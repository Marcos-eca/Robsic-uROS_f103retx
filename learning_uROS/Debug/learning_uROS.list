
learning_uROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018588  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb4  08018778  08018778  00028778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a32c  0801a32c  000302b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a32c  0801a32c  0002a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a334  0801a334  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a334  0801a334  0002a334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a338  0801a338  0002a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0801a33c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d388  200002b8  0801a5f4  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000d640  0801a5f4  0003d640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241d5  00000000  00000000  000302e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005007  00000000  00000000  000544b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  000594c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  0005ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b3  00000000  00000000  0005c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020451  00000000  00000000  0007d75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b76a5  00000000  00000000  0009dbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  00155251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007838  00000000  00000000  00155300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200002b8 	.word	0x200002b8
 800020c:	00000000 	.word	0x00000000
 8000210:	08018760 	.word	0x08018760

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200002bc 	.word	0x200002bc
 800022c:	08018760 	.word	0x08018760

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_frsub>:
 8000254:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__addsf3>
 800025a:	bf00      	nop

0800025c <__aeabi_fsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000260 <__addsf3>:
 8000260:	0042      	lsls	r2, r0, #1
 8000262:	bf1f      	itttt	ne
 8000264:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000268:	ea92 0f03 	teqne	r2, r3
 800026c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000270:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000274:	d06a      	beq.n	800034c <__addsf3+0xec>
 8000276:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800027e:	bfc1      	itttt	gt
 8000280:	18d2      	addgt	r2, r2, r3
 8000282:	4041      	eorgt	r1, r0
 8000284:	4048      	eorgt	r0, r1
 8000286:	4041      	eorgt	r1, r0
 8000288:	bfb8      	it	lt
 800028a:	425b      	neglt	r3, r3
 800028c:	2b19      	cmp	r3, #25
 800028e:	bf88      	it	hi
 8000290:	4770      	bxhi	lr
 8000292:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800029e:	bf18      	it	ne
 80002a0:	4240      	negne	r0, r0
 80002a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ae:	bf18      	it	ne
 80002b0:	4249      	negne	r1, r1
 80002b2:	ea92 0f03 	teq	r2, r3
 80002b6:	d03f      	beq.n	8000338 <__addsf3+0xd8>
 80002b8:	f1a2 0201 	sub.w	r2, r2, #1
 80002bc:	fa41 fc03 	asr.w	ip, r1, r3
 80002c0:	eb10 000c 	adds.w	r0, r0, ip
 80002c4:	f1c3 0320 	rsb	r3, r3, #32
 80002c8:	fa01 f103 	lsl.w	r1, r1, r3
 80002cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d0:	d502      	bpl.n	80002d8 <__addsf3+0x78>
 80002d2:	4249      	negs	r1, r1
 80002d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002dc:	d313      	bcc.n	8000306 <__addsf3+0xa6>
 80002de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e2:	d306      	bcc.n	80002f2 <__addsf3+0x92>
 80002e4:	0840      	lsrs	r0, r0, #1
 80002e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ea:	f102 0201 	add.w	r2, r2, #1
 80002ee:	2afe      	cmp	r2, #254	; 0xfe
 80002f0:	d251      	bcs.n	8000396 <__addsf3+0x136>
 80002f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fa:	bf08      	it	eq
 80002fc:	f020 0001 	biceq.w	r0, r0, #1
 8000300:	ea40 0003 	orr.w	r0, r0, r3
 8000304:	4770      	bx	lr
 8000306:	0049      	lsls	r1, r1, #1
 8000308:	eb40 0000 	adc.w	r0, r0, r0
 800030c:	3a01      	subs	r2, #1
 800030e:	bf28      	it	cs
 8000310:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000314:	d2ed      	bcs.n	80002f2 <__addsf3+0x92>
 8000316:	fab0 fc80 	clz	ip, r0
 800031a:	f1ac 0c08 	sub.w	ip, ip, #8
 800031e:	ebb2 020c 	subs.w	r2, r2, ip
 8000322:	fa00 f00c 	lsl.w	r0, r0, ip
 8000326:	bfaa      	itet	ge
 8000328:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800032c:	4252      	neglt	r2, r2
 800032e:	4318      	orrge	r0, r3
 8000330:	bfbc      	itt	lt
 8000332:	40d0      	lsrlt	r0, r2
 8000334:	4318      	orrlt	r0, r3
 8000336:	4770      	bx	lr
 8000338:	f092 0f00 	teq	r2, #0
 800033c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000340:	bf06      	itte	eq
 8000342:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000346:	3201      	addeq	r2, #1
 8000348:	3b01      	subne	r3, #1
 800034a:	e7b5      	b.n	80002b8 <__addsf3+0x58>
 800034c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000350:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000354:	bf18      	it	ne
 8000356:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035a:	d021      	beq.n	80003a0 <__addsf3+0x140>
 800035c:	ea92 0f03 	teq	r2, r3
 8000360:	d004      	beq.n	800036c <__addsf3+0x10c>
 8000362:	f092 0f00 	teq	r2, #0
 8000366:	bf08      	it	eq
 8000368:	4608      	moveq	r0, r1
 800036a:	4770      	bx	lr
 800036c:	ea90 0f01 	teq	r0, r1
 8000370:	bf1c      	itt	ne
 8000372:	2000      	movne	r0, #0
 8000374:	4770      	bxne	lr
 8000376:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037a:	d104      	bne.n	8000386 <__addsf3+0x126>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	bf28      	it	cs
 8000380:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000384:	4770      	bx	lr
 8000386:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038a:	bf3c      	itt	cc
 800038c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000390:	4770      	bxcc	lr
 8000392:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000396:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039e:	4770      	bx	lr
 80003a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a4:	bf16      	itet	ne
 80003a6:	4608      	movne	r0, r1
 80003a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003ac:	4601      	movne	r1, r0
 80003ae:	0242      	lsls	r2, r0, #9
 80003b0:	bf06      	itte	eq
 80003b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003b6:	ea90 0f01 	teqeq	r0, r1
 80003ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003be:	4770      	bx	lr

080003c0 <__aeabi_ui2f>:
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	e004      	b.n	80003d0 <__aeabi_i2f+0x8>
 80003c6:	bf00      	nop

080003c8 <__aeabi_i2f>:
 80003c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	ea5f 0c00 	movs.w	ip, r0
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003dc:	4601      	mov	r1, r0
 80003de:	f04f 0000 	mov.w	r0, #0
 80003e2:	e01c      	b.n	800041e <__aeabi_l2f+0x2a>

080003e4 <__aeabi_ul2f>:
 80003e4:	ea50 0201 	orrs.w	r2, r0, r1
 80003e8:	bf08      	it	eq
 80003ea:	4770      	bxeq	lr
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e00a      	b.n	8000408 <__aeabi_l2f+0x14>
 80003f2:	bf00      	nop

080003f4 <__aeabi_l2f>:
 80003f4:	ea50 0201 	orrs.w	r2, r0, r1
 80003f8:	bf08      	it	eq
 80003fa:	4770      	bxeq	lr
 80003fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000400:	d502      	bpl.n	8000408 <__aeabi_l2f+0x14>
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	ea5f 0c01 	movs.w	ip, r1
 800040c:	bf02      	ittt	eq
 800040e:	4684      	moveq	ip, r0
 8000410:	4601      	moveq	r1, r0
 8000412:	2000      	moveq	r0, #0
 8000414:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000418:	bf08      	it	eq
 800041a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800041e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000422:	fabc f28c 	clz	r2, ip
 8000426:	3a08      	subs	r2, #8
 8000428:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800042c:	db10      	blt.n	8000450 <__aeabi_l2f+0x5c>
 800042e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000432:	4463      	add	r3, ip
 8000434:	fa00 fc02 	lsl.w	ip, r0, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	f020 0001 	biceq.w	r0, r0, #1
 800044e:	4770      	bx	lr
 8000450:	f102 0220 	add.w	r2, r2, #32
 8000454:	fa01 fc02 	lsl.w	ip, r1, r2
 8000458:	f1c2 0220 	rsb	r2, r2, #32
 800045c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000460:	fa21 f202 	lsr.w	r2, r1, r2
 8000464:	eb43 0002 	adc.w	r0, r3, r2
 8000468:	bf08      	it	eq
 800046a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046e:	4770      	bx	lr

08000470 <__aeabi_fmul>:
 8000470:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000474:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000478:	bf1e      	ittt	ne
 800047a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800047e:	ea92 0f0c 	teqne	r2, ip
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d06f      	beq.n	8000568 <__aeabi_fmul+0xf8>
 8000488:	441a      	add	r2, r3
 800048a:	ea80 0c01 	eor.w	ip, r0, r1
 800048e:	0240      	lsls	r0, r0, #9
 8000490:	bf18      	it	ne
 8000492:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000496:	d01e      	beq.n	80004d6 <__aeabi_fmul+0x66>
 8000498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800049c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a4:	fba0 3101 	umull	r3, r1, r0, r1
 80004a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b0:	bf3e      	ittt	cc
 80004b2:	0049      	lslcc	r1, r1, #1
 80004b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004b8:	005b      	lslcc	r3, r3, #1
 80004ba:	ea40 0001 	orr.w	r0, r0, r1
 80004be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c2:	2afd      	cmp	r2, #253	; 0xfd
 80004c4:	d81d      	bhi.n	8000502 <__aeabi_fmul+0x92>
 80004c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ce:	bf08      	it	eq
 80004d0:	f020 0001 	biceq.w	r0, r0, #1
 80004d4:	4770      	bx	lr
 80004d6:	f090 0f00 	teq	r0, #0
 80004da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004de:	bf08      	it	eq
 80004e0:	0249      	lsleq	r1, r1, #9
 80004e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ea:	3a7f      	subs	r2, #127	; 0x7f
 80004ec:	bfc2      	ittt	gt
 80004ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004f6:	4770      	bxgt	lr
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	3a01      	subs	r2, #1
 8000502:	dc5d      	bgt.n	80005c0 <__aeabi_fmul+0x150>
 8000504:	f112 0f19 	cmn.w	r2, #25
 8000508:	bfdc      	itt	le
 800050a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800050e:	4770      	bxle	lr
 8000510:	f1c2 0200 	rsb	r2, r2, #0
 8000514:	0041      	lsls	r1, r0, #1
 8000516:	fa21 f102 	lsr.w	r1, r1, r2
 800051a:	f1c2 0220 	rsb	r2, r2, #32
 800051e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000522:	ea5f 0031 	movs.w	r0, r1, rrx
 8000526:	f140 0000 	adc.w	r0, r0, #0
 800052a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800052e:	bf08      	it	eq
 8000530:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000534:	4770      	bx	lr
 8000536:	f092 0f00 	teq	r2, #0
 800053a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800053e:	bf02      	ittt	eq
 8000540:	0040      	lsleq	r0, r0, #1
 8000542:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000546:	3a01      	subeq	r2, #1
 8000548:	d0f9      	beq.n	800053e <__aeabi_fmul+0xce>
 800054a:	ea40 000c 	orr.w	r0, r0, ip
 800054e:	f093 0f00 	teq	r3, #0
 8000552:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000556:	bf02      	ittt	eq
 8000558:	0049      	lsleq	r1, r1, #1
 800055a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800055e:	3b01      	subeq	r3, #1
 8000560:	d0f9      	beq.n	8000556 <__aeabi_fmul+0xe6>
 8000562:	ea41 010c 	orr.w	r1, r1, ip
 8000566:	e78f      	b.n	8000488 <__aeabi_fmul+0x18>
 8000568:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800056c:	ea92 0f0c 	teq	r2, ip
 8000570:	bf18      	it	ne
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d00a      	beq.n	800058e <__aeabi_fmul+0x11e>
 8000578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800057c:	bf18      	it	ne
 800057e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000582:	d1d8      	bne.n	8000536 <__aeabi_fmul+0xc6>
 8000584:	ea80 0001 	eor.w	r0, r0, r1
 8000588:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800058c:	4770      	bx	lr
 800058e:	f090 0f00 	teq	r0, #0
 8000592:	bf17      	itett	ne
 8000594:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000598:	4608      	moveq	r0, r1
 800059a:	f091 0f00 	teqne	r1, #0
 800059e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a2:	d014      	beq.n	80005ce <__aeabi_fmul+0x15e>
 80005a4:	ea92 0f0c 	teq	r2, ip
 80005a8:	d101      	bne.n	80005ae <__aeabi_fmul+0x13e>
 80005aa:	0242      	lsls	r2, r0, #9
 80005ac:	d10f      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005ae:	ea93 0f0c 	teq	r3, ip
 80005b2:	d103      	bne.n	80005bc <__aeabi_fmul+0x14c>
 80005b4:	024b      	lsls	r3, r1, #9
 80005b6:	bf18      	it	ne
 80005b8:	4608      	movne	r0, r1
 80005ba:	d108      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005bc:	ea80 0001 	eor.w	r0, r0, r1
 80005c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005cc:	4770      	bx	lr
 80005ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bx	lr

080005d8 <__aeabi_fdiv>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d069      	beq.n	80006c4 <__aeabi_fdiv+0xec>
 80005f0:	eba2 0203 	sub.w	r2, r2, r3
 80005f4:	ea80 0c01 	eor.w	ip, r0, r1
 80005f8:	0249      	lsls	r1, r1, #9
 80005fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005fe:	d037      	beq.n	8000670 <__aeabi_fdiv+0x98>
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000608:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800060c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000610:	428b      	cmp	r3, r1
 8000612:	bf38      	it	cc
 8000614:	005b      	lslcc	r3, r3, #1
 8000616:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800061e:	428b      	cmp	r3, r1
 8000620:	bf24      	itt	cs
 8000622:	1a5b      	subcs	r3, r3, r1
 8000624:	ea40 000c 	orrcs.w	r0, r0, ip
 8000628:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800062c:	bf24      	itt	cs
 800062e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000632:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000636:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063a:	bf24      	itt	cs
 800063c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000644:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000648:	bf24      	itt	cs
 800064a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800064e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	bf18      	it	ne
 8000656:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065a:	d1e0      	bne.n	800061e <__aeabi_fdiv+0x46>
 800065c:	2afd      	cmp	r2, #253	; 0xfd
 800065e:	f63f af50 	bhi.w	8000502 <__aeabi_fmul+0x92>
 8000662:	428b      	cmp	r3, r1
 8000664:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000668:	bf08      	it	eq
 800066a:	f020 0001 	biceq.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000674:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000678:	327f      	adds	r2, #127	; 0x7f
 800067a:	bfc2      	ittt	gt
 800067c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000680:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000684:	4770      	bxgt	lr
 8000686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	3a01      	subs	r2, #1
 8000690:	e737      	b.n	8000502 <__aeabi_fmul+0x92>
 8000692:	f092 0f00 	teq	r2, #0
 8000696:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069a:	bf02      	ittt	eq
 800069c:	0040      	lsleq	r0, r0, #1
 800069e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a2:	3a01      	subeq	r2, #1
 80006a4:	d0f9      	beq.n	800069a <__aeabi_fdiv+0xc2>
 80006a6:	ea40 000c 	orr.w	r0, r0, ip
 80006aa:	f093 0f00 	teq	r3, #0
 80006ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b2:	bf02      	ittt	eq
 80006b4:	0049      	lsleq	r1, r1, #1
 80006b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006ba:	3b01      	subeq	r3, #1
 80006bc:	d0f9      	beq.n	80006b2 <__aeabi_fdiv+0xda>
 80006be:	ea41 010c 	orr.w	r1, r1, ip
 80006c2:	e795      	b.n	80005f0 <__aeabi_fdiv+0x18>
 80006c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006c8:	ea92 0f0c 	teq	r2, ip
 80006cc:	d108      	bne.n	80006e0 <__aeabi_fdiv+0x108>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	f47f af7d 	bne.w	80005ce <__aeabi_fmul+0x15e>
 80006d4:	ea93 0f0c 	teq	r3, ip
 80006d8:	f47f af70 	bne.w	80005bc <__aeabi_fmul+0x14c>
 80006dc:	4608      	mov	r0, r1
 80006de:	e776      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006e0:	ea93 0f0c 	teq	r3, ip
 80006e4:	d104      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 80006e6:	024b      	lsls	r3, r1, #9
 80006e8:	f43f af4c 	beq.w	8000584 <__aeabi_fmul+0x114>
 80006ec:	4608      	mov	r0, r1
 80006ee:	e76e      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f4:	bf18      	it	ne
 80006f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fa:	d1ca      	bne.n	8000692 <__aeabi_fdiv+0xba>
 80006fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000700:	f47f af5c 	bne.w	80005bc <__aeabi_fmul+0x14c>
 8000704:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000708:	f47f af3c 	bne.w	8000584 <__aeabi_fmul+0x114>
 800070c:	e75f      	b.n	80005ce <__aeabi_fmul+0x15e>
 800070e:	bf00      	nop

08000710 <__aeabi_f2iz>:
 8000710:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000718:	d30f      	bcc.n	800073a <__aeabi_f2iz+0x2a>
 800071a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800071e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000722:	d90d      	bls.n	8000740 <__aeabi_f2iz+0x30>
 8000724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000730:	fa23 f002 	lsr.w	r0, r3, r2
 8000734:	bf18      	it	ne
 8000736:	4240      	negne	r0, r0
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2iz+0x3a>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d105      	bne.n	8000756 <__aeabi_f2iz+0x46>
 800074a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_ldivmod>:
 800075c:	b97b      	cbnz	r3, 800077e <__aeabi_ldivmod+0x22>
 800075e:	b972      	cbnz	r2, 800077e <__aeabi_ldivmod+0x22>
 8000760:	2900      	cmp	r1, #0
 8000762:	bfbe      	ittt	lt
 8000764:	2000      	movlt	r0, #0
 8000766:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800076a:	e006      	blt.n	800077a <__aeabi_ldivmod+0x1e>
 800076c:	bf08      	it	eq
 800076e:	2800      	cmpeq	r0, #0
 8000770:	bf1c      	itt	ne
 8000772:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000776:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800077a:	f000 b9b9 	b.w	8000af0 <__aeabi_idiv0>
 800077e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000782:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000786:	2900      	cmp	r1, #0
 8000788:	db09      	blt.n	800079e <__aeabi_ldivmod+0x42>
 800078a:	2b00      	cmp	r3, #0
 800078c:	db1a      	blt.n	80007c4 <__aeabi_ldivmod+0x68>
 800078e:	f000 f84d 	bl	800082c <__udivmoddi4>
 8000792:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db1b      	blt.n	80007e0 <__aeabi_ldivmod+0x84>
 80007a8:	f000 f840 	bl	800082c <__udivmoddi4>
 80007ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b4:	b004      	add	sp, #16
 80007b6:	4240      	negs	r0, r0
 80007b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	4770      	bx	lr
 80007c4:	4252      	negs	r2, r2
 80007c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ca:	f000 f82f 	bl	800082c <__udivmoddi4>
 80007ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d6:	b004      	add	sp, #16
 80007d8:	4240      	negs	r0, r0
 80007da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007de:	4770      	bx	lr
 80007e0:	4252      	negs	r2, r2
 80007e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e6:	f000 f821 	bl	800082c <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4252      	negs	r2, r2
 80007f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007fa:	4770      	bx	lr

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 b96e 	b.w	8000af0 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	468e      	mov	lr, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8083 	bne.w	8000944 <__udivmoddi4+0x118>
 800083e:	428a      	cmp	r2, r1
 8000840:	4617      	mov	r7, r2
 8000842:	d947      	bls.n	80008d4 <__udivmoddi4+0xa8>
 8000844:	fab2 f382 	clz	r3, r2
 8000848:	b14b      	cbz	r3, 800085e <__udivmoddi4+0x32>
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000852:	fa20 f101 	lsr.w	r1, r0, r1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea41 0e0e 	orr.w	lr, r1, lr
 800085c:	409c      	lsls	r4, r3
 800085e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000862:	fbbe fcf8 	udiv	ip, lr, r8
 8000866:	fa1f f987 	uxth.w	r9, r7
 800086a:	fb08 e21c 	mls	r2, r8, ip, lr
 800086e:	fb0c f009 	mul.w	r0, ip, r9
 8000872:	0c21      	lsrs	r1, r4, #16
 8000874:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000878:	4290      	cmp	r0, r2
 800087a:	d90a      	bls.n	8000892 <__udivmoddi4+0x66>
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000882:	f080 8118 	bcs.w	8000ab6 <__udivmoddi4+0x28a>
 8000886:	4290      	cmp	r0, r2
 8000888:	f240 8115 	bls.w	8000ab6 <__udivmoddi4+0x28a>
 800088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000890:	443a      	add	r2, r7
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	fbb2 f0f8 	udiv	r0, r2, r8
 8000898:	fb08 2210 	mls	r2, r8, r0, r2
 800089c:	fb00 f109 	mul.w	r1, r0, r9
 80008a0:	b2a4      	uxth	r4, r4
 80008a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a6:	42a1      	cmp	r1, r4
 80008a8:	d909      	bls.n	80008be <__udivmoddi4+0x92>
 80008aa:	193c      	adds	r4, r7, r4
 80008ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008b0:	f080 8103 	bcs.w	8000aba <__udivmoddi4+0x28e>
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	f240 8100 	bls.w	8000aba <__udivmoddi4+0x28e>
 80008ba:	3802      	subs	r0, #2
 80008bc:	443c      	add	r4, r7
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	2100      	movs	r1, #0
 80008c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008c6:	b11e      	cbz	r6, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	2200      	movs	r2, #0
 80008ca:	40dc      	lsrs	r4, r3
 80008cc:	e9c6 4200 	strd	r4, r2, [r6]
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	b902      	cbnz	r2, 80008d8 <__udivmoddi4+0xac>
 80008d6:	deff      	udf	#255	; 0xff
 80008d8:	fab2 f382 	clz	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d14f      	bne.n	8000980 <__udivmoddi4+0x154>
 80008e0:	1a8d      	subs	r5, r1, r2
 80008e2:	2101      	movs	r1, #1
 80008e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80008e8:	fa1f f882 	uxth.w	r8, r2
 80008ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80008f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80008f4:	fb08 f00c 	mul.w	r0, r8, ip
 80008f8:	0c22      	lsrs	r2, r4, #16
 80008fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0xe6>
 8000902:	197d      	adds	r5, r7, r5
 8000904:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000908:	d202      	bcs.n	8000910 <__udivmoddi4+0xe4>
 800090a:	42a8      	cmp	r0, r5
 800090c:	f200 80e9 	bhi.w	8000ae2 <__udivmoddi4+0x2b6>
 8000910:	4694      	mov	ip, r2
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	fbb5 f0fe 	udiv	r0, r5, lr
 8000918:	fb0e 5510 	mls	r5, lr, r0, r5
 800091c:	fb08 f800 	mul.w	r8, r8, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000926:	45a0      	cmp	r8, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x10e>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x10c>
 8000932:	45a0      	cmp	r8, r4
 8000934:	f200 80d9 	bhi.w	8000aea <__udivmoddi4+0x2be>
 8000938:	4610      	mov	r0, r2
 800093a:	eba4 0408 	sub.w	r4, r4, r8
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	e7c0      	b.n	80008c6 <__udivmoddi4+0x9a>
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x12e>
 8000948:	2e00      	cmp	r6, #0
 800094a:	f000 80b1 	beq.w	8000ab0 <__udivmoddi4+0x284>
 800094e:	2100      	movs	r1, #0
 8000950:	e9c6 0500 	strd	r0, r5, [r6]
 8000954:	4608      	mov	r0, r1
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d14b      	bne.n	80009fa <__udivmoddi4+0x1ce>
 8000962:	42ab      	cmp	r3, r5
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0x140>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 80b9 	bhi.w	8000ade <__udivmoddi4+0x2b2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb65 0303 	sbc.w	r3, r5, r3
 8000972:	2001      	movs	r0, #1
 8000974:	469e      	mov	lr, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0aa      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800097a:	e9c6 4e00 	strd	r4, lr, [r6]
 800097e:	e7a7      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000980:	409f      	lsls	r7, r3
 8000982:	f1c3 0220 	rsb	r2, r3, #32
 8000986:	40d1      	lsrs	r1, r2
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fa1f f887 	uxth.w	r8, r7
 8000994:	fb0e 1110 	mls	r1, lr, r0, r1
 8000998:	fa24 f202 	lsr.w	r2, r4, r2
 800099c:	409d      	lsls	r5, r3
 800099e:	fb00 fc08 	mul.w	ip, r0, r8
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0c15      	lsrs	r5, r2, #16
 80009a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	fa04 f403 	lsl.w	r4, r4, r3
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x19a>
 80009b2:	197d      	adds	r5, r7, r5
 80009b4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009b8:	f080 808f 	bcs.w	8000ada <__udivmoddi4+0x2ae>
 80009bc:	45ac      	cmp	ip, r5
 80009be:	f240 808c 	bls.w	8000ada <__udivmoddi4+0x2ae>
 80009c2:	3802      	subs	r0, #2
 80009c4:	443d      	add	r5, r7
 80009c6:	eba5 050c 	sub.w	r5, r5, ip
 80009ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80009ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80009d2:	fb01 f908 	mul.w	r9, r1, r8
 80009d6:	b295      	uxth	r5, r2
 80009d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009dc:	45a9      	cmp	r9, r5
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x1c4>
 80009e0:	197d      	adds	r5, r7, r5
 80009e2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80009e6:	d274      	bcs.n	8000ad2 <__udivmoddi4+0x2a6>
 80009e8:	45a9      	cmp	r9, r5
 80009ea:	d972      	bls.n	8000ad2 <__udivmoddi4+0x2a6>
 80009ec:	3902      	subs	r1, #2
 80009ee:	443d      	add	r5, r7
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f8:	e778      	b.n	80008ec <__udivmoddi4+0xc0>
 80009fa:	f1c1 0720 	rsb	r7, r1, #32
 80009fe:	408b      	lsls	r3, r1
 8000a00:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a04:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a08:	fa25 f407 	lsr.w	r4, r5, r7
 8000a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a10:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a14:	fa1f f88c 	uxth.w	r8, ip
 8000a18:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1c:	fa20 f307 	lsr.w	r3, r0, r7
 8000a20:	fb09 fa08 	mul.w	sl, r9, r8
 8000a24:	408d      	lsls	r5, r1
 8000a26:	431d      	orrs	r5, r3
 8000a28:	0c2b      	lsrs	r3, r5, #16
 8000a2a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a2e:	45a2      	cmp	sl, r4
 8000a30:	fa02 f201 	lsl.w	r2, r2, r1
 8000a34:	fa00 f301 	lsl.w	r3, r0, r1
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x222>
 8000a3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a42:	d248      	bcs.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a44:	45a2      	cmp	sl, r4
 8000a46:	d946      	bls.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a48:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	eba4 040a 	sub.w	r4, r4, sl
 8000a52:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a56:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a5a:	fb00 fa08 	mul.w	sl, r0, r8
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x24e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000a70:	d22d      	bcs.n	8000ace <__udivmoddi4+0x2a2>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d92b      	bls.n	8000ace <__udivmoddi4+0x2a2>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c6      	mov	lr, r8
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	d319      	bcc.n	8000ac2 <__udivmoddi4+0x296>
 8000a8e:	d016      	beq.n	8000abe <__udivmoddi4+0x292>
 8000a90:	b15e      	cbz	r6, 8000aaa <__udivmoddi4+0x27e>
 8000a92:	ebb3 020e 	subs.w	r2, r3, lr
 8000a96:	eb64 0405 	sbc.w	r4, r4, r5
 8000a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c6 7400 	strd	r7, r4, [r6]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70c      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	e6eb      	b.n	8000892 <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6ff      	b.n	80008be <__udivmoddi4+0x92>
 8000abe:	4543      	cmp	r3, r8
 8000ac0:	d2e6      	bcs.n	8000a90 <__udivmoddi4+0x264>
 8000ac2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ac6:	eb69 050c 	sbc.w	r5, r9, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7e0      	b.n	8000a90 <__udivmoddi4+0x264>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e7d3      	b.n	8000a7a <__udivmoddi4+0x24e>
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	e78c      	b.n	80009f0 <__udivmoddi4+0x1c4>
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e7b9      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e773      	b.n	80009c6 <__udivmoddi4+0x19a>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e749      	b.n	8000976 <__udivmoddi4+0x14a>
 8000ae2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae6:	443d      	add	r5, r7
 8000ae8:	e713      	b.n	8000912 <__udivmoddi4+0xe6>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	e724      	b.n	800093a <__udivmoddi4+0x10e>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_ADC1_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b34:	f002 faf4 	bl	8003120 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b3e:	f001 fed1 	bl	80028e4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000685c 	.word	0x2000685c
 8000b50:	40012400 	.word	0x40012400

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_ADC_MspInit+0x98>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d137      	bne.n	8000be4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <HAL_ADC_MspInit+0xa0>)
 8000bcc:	f004 f87e 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_ADC_MspInit+0xa4>)
 8000be0:	f004 f874 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <MX_CAN_Init+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c08:	2212      	movs	r2, #18
 8000c0a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c4c:	f002 fed1 	bl	80039f2 <HAL_CAN_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000c56:	f001 fe45 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000688c 	.word	0x2000688c
 8000c64:	40006400 	.word	0x40006400

08000c68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_CAN_MspInit+0x9c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d139      	bne.n	8000cfc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000cce:	f003 fffd 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000ce8:	f003 fff0 	bl	8004ccc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f003 fa5a 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cf6:	2014      	movs	r0, #20
 8000cf8:	f003 fa73 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40006400 	.word	0x40006400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d1c:	f007 fada 	bl	80082d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d20:	4b58      	ldr	r3, [pc, #352]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d28:	f000 f98a 	bl	8001040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d2c:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 808e 	bne.w	8000e56 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01d      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000d40:	2208      	movs	r2, #8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d014      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	3308      	adds	r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d78:	bf00      	nop
 8000d7a:	e7fe      	b.n	8000d7a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d069      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d864      	bhi.n	8000e56 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d96:	e004      	b.n	8000da2 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d903      	bls.n	8000db4 <pvPortMallocMicroROS+0xa4>
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f1      	bne.n	8000d98 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d04b      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4413      	add	r3, r2
 8000dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	2308      	movs	r3, #8
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91f      	bls.n	8000e20 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00a      	beq.n	8000e08 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	613b      	str	r3, [r7, #16]
}
 8000e04:	bf00      	nop
 8000e06:	e7fe      	b.n	8000e06 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	1ad2      	subs	r2, r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e1a:	69b8      	ldr	r0, [r7, #24]
 8000e1c:	f000 f972 	bl	8001104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d203      	bcs.n	8000e42 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e56:	f007 fa4b 	bl	80082f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00a      	beq.n	8000e7a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	60fb      	str	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200029ec 	.word	0x200029ec
 8000e88:	200029f8 	.word	0x200029f8
 8000e8c:	200029f0 	.word	0x200029f0
 8000e90:	200029e4 	.word	0x200029e4
 8000e94:	200029f4 	.word	0x200029f4

08000e98 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d048      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	425b      	negs	r3, r3
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <vPortFreeMicroROS+0x44>
	__asm volatile
 8000ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eca:	f383 8811 	msr	BASEPRI, r3
 8000ece:	f3bf 8f6f 	isb	sy
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	60fb      	str	r3, [r7, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	e7fe      	b.n	8000eda <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00a      	beq.n	8000efa <vPortFreeMicroROS+0x62>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	60bb      	str	r3, [r7, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d115      	bne.n	8000f3c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f20:	f007 f9d8 	bl	80082d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f32:	6938      	ldr	r0, [r7, #16]
 8000f34:	f000 f8e6 	bl	8001104 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f38:	f007 f9da 	bl	80082f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200029f8 	.word	0x200029f8
 8000f48:	200029f0 	.word	0x200029f0

08000f4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <getBlockSize+0x34>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

	return count;
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	200029f8 	.word	0x200029f8

08000f84 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f8e:	f007 f9a1 	bl	80082d4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f7ff febc 	bl	8000d10 <pvPortMallocMicroROS>
 8000f98:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <pvPortReallocMicroROS+0x70>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	617b      	str	r3, [r7, #20]

  	while(count--)
 8000fc2:	e007      	b.n	8000fd4 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	1c53      	adds	r3, r2, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	61b9      	str	r1, [r7, #24]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	617a      	str	r2, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f2      	bne.n	8000fc4 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff5a 	bl	8000e98 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8000fe4:	f007 f984 	bl	80082f0 <xTaskResumeAll>

	return newmem;
 8000fe8:	693b      	ldr	r3, [r7, #16]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200029f8 	.word	0x200029f8

08000ff8 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001002:	f007 f967 	bl	80082d4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fe7d 	bl	8000d10 <pvPortMallocMicroROS>
 8001016:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	613b      	str	r3, [r7, #16]

  	while(count--)
 800101c:	e004      	b.n	8001028 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	613a      	str	r2, [r7, #16]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f5      	bne.n	800101e <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001032:	f007 f95d 	bl	80082f0 <xTaskResumeAll>
  	return mem;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001046:	f242 7310 	movw	r3, #10000	; 0x2710
 800104a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <prvHeapInit+0xac>)
 800104e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00c      	beq.n	8001074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3307      	adds	r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <prvHeapInit+0xac>)
 8001070:	4413      	add	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <prvHeapInit+0xb0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <prvHeapInit+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800108c:	2208      	movs	r2, #8
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f023 0307 	bic.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <prvHeapInit+0xb4>)
 80010a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <prvHeapInit+0xb4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <prvHeapInit+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <prvHeapInit+0xb4>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <prvHeapInit+0xb8>)
 80010ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <prvHeapInit+0xbc>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <prvHeapInit+0xc0>)
 80010da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200002d4 	.word	0x200002d4
 80010f0:	200029e4 	.word	0x200029e4
 80010f4:	200029ec 	.word	0x200029ec
 80010f8:	200029f4 	.word	0x200029f4
 80010fc:	200029f0 	.word	0x200029f0
 8001100:	200029f8 	.word	0x200029f8

08001104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <prvInsertBlockIntoFreeList+0xa8>)
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e002      	b.n	8001118 <prvInsertBlockIntoFreeList+0x14>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d8f7      	bhi.n	8001112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d108      	bne.n	8001146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	441a      	add	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	441a      	add	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d118      	bne.n	800118c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d00d      	beq.n	8001182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	441a      	add	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e008      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e003      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d002      	beq.n	80011a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200029e4 	.word	0x200029e4
 80011b0:	200029ec 	.word	0x200029ec

080011b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DAC_Init+0x60>)
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_DAC_Init+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_DAC_Init+0x60>)
 80011ca:	f003 f818 	bl	80041fe <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d4:	f001 fb86 	bl	80028e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_DAC_Init+0x60>)
 80011e8:	f003 f8a0 	bl	800432c <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f2:	f001 fb77 	bl	80028e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2210      	movs	r2, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DAC_Init+0x60>)
 80011fe:	f003 f895 	bl	800432c <HAL_DAC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001208:	f001 fb6c 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200068b4 	.word	0x200068b4
 8001218:	40007400 	.word	0x40007400

0800121c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_DAC_MspInit+0x6c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d121      	bne.n	8001280 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_DAC_MspInit+0x70>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_DAC_MspInit+0x70>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_DAC_MspInit+0x70>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800126c:	2330      	movs	r3, #48	; 0x30
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_DAC_MspInit+0x74>)
 800127c:	f003 fd26 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40007400 	.word	0x40007400
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x48>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x48>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x48>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2010      	movs	r0, #16
 80012b8:	f002 ff77 	bl	80041aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012bc:	2010      	movs	r0, #16
 80012be:	f002 ff90 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2011      	movs	r0, #17
 80012c8:	f002 ff6f 	bl	80041aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012cc:	2011      	movs	r0, #17
 80012ce:	f002 ff88 	bl	80041e2 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80012ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <cubemx_transport_open+0x28>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f004 ffbc 	bl	8006274 <HAL_UART_Receive_DMA>
    return true;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200029fc 	.word	0x200029fc

0800130c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800131a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f004 ffd9 	bl	80062d4 <HAL_UART_DMAStop>
    return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001340:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d11c      	bne.n	8001388 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f004 ff20 	bl	800619c <HAL_UART_Transmit_DMA>
 800135c:	4603      	mov	r3, r0
 800135e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001360:	e002      	b.n	8001368 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f005 fe6a 	bl	800703c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001368:	7cfb      	ldrb	r3, [r7, #19]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <cubemx_transport_write+0x4e>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b20      	cmp	r3, #32
 8001378:	d1f3      	bne.n	8001362 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <cubemx_transport_write+0x58>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	e002      	b.n	800138a <cubemx_transport_write+0x5e>
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001388:	2300      	movs	r3, #0
    }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013a8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ae:	b672      	cpsid	i
}
 80013b0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <cubemx_transport_read+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f005 fe35 	bl	800703c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <cubemx_transport_read+0xa0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <cubemx_transport_read+0x9c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d103      	bne.n	80013e6 <cubemx_transport_read+0x52>
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbe3      	blt.n	80013ae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80013ea:	e011      	b.n	8001410 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <cubemx_transport_read+0xa0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	440b      	add	r3, r1
 80013f6:	4910      	ldr	r1, [pc, #64]	; (8001438 <cubemx_transport_read+0xa4>)
 80013f8:	5c8a      	ldrb	r2, [r1, r2]
 80013fa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <cubemx_transport_read+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <cubemx_transport_read+0xa0>)
 8001408:	6013      	str	r3, [r2, #0]
        wrote++;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <cubemx_transport_read+0xa0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <cubemx_transport_read+0x9c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d003      	beq.n	8001424 <cubemx_transport_read+0x90>
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e3      	bcc.n	80013ec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001424:	69bb      	ldr	r3, [r7, #24]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20003200 	.word	0x20003200
 8001434:	200031fc 	.word	0x200031fc
 8001438:	200029fc 	.word	0x200029fc

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of analog_mutex */
  analog_mutexHandle = osMutexNew(&analog_mutex_attributes);
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_FREERTOS_Init+0x64>)
 8001442:	f005 fe29 	bl	8007098 <osMutexNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <MX_FREERTOS_Init+0x68>)
 800144a:	6013      	str	r3, [r2, #0]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	4816      	ldr	r0, [pc, #88]	; (80014a8 <MX_FREERTOS_Init+0x6c>)
 8001450:	f002 fef7 	bl	8004242 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001454:	2110      	movs	r1, #16
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_FREERTOS_Init+0x6c>)
 8001458:	f002 fef3 	bl	8004242 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_FREERTOS_Init+0x70>)
 800145e:	2100      	movs	r1, #0
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_FREERTOS_Init+0x74>)
 8001462:	f005 fd41 	bl	8006ee8 <osThreadNew>
 8001466:	4603      	mov	r3, r0
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_FREERTOS_Init+0x78>)
 800146a:	6013      	str	r3, [r2, #0]

  /* creation of digital_inputs */
  digital_inputsHandle = osThreadNew(digital_inputs_task, NULL, &digital_inputs_attributes);
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_FREERTOS_Init+0x7c>)
 800146e:	2100      	movs	r1, #0
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_FREERTOS_Init+0x80>)
 8001472:	f005 fd39 	bl	8006ee8 <osThreadNew>
 8001476:	4603      	mov	r3, r0
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <MX_FREERTOS_Init+0x84>)
 800147a:	6013      	str	r3, [r2, #0]

  /* creation of analog_input */
  analog_inputHandle = osThreadNew(analog_input_task, NULL, &analog_input_attributes);
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <MX_FREERTOS_Init+0x88>)
 800147e:	2100      	movs	r1, #0
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_FREERTOS_Init+0x8c>)
 8001482:	f005 fd31 	bl	8006ee8 <osThreadNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <MX_FREERTOS_Init+0x90>)
 800148a:	6013      	str	r3, [r2, #0]

  /* creation of auto_man_mod */
  auto_man_modHandle = osThreadNew(automatic_manual_mode_Task, NULL, &auto_man_mod_attributes);
 800148c:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <MX_FREERTOS_Init+0x94>)
 800148e:	2100      	movs	r1, #0
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <MX_FREERTOS_Init+0x98>)
 8001492:	f005 fd29 	bl	8006ee8 <osThreadNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <MX_FREERTOS_Init+0x9c>)
 800149a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0801968c 	.word	0x0801968c
 80014a4:	200082c8 	.word	0x200082c8
 80014a8:	200068b4 	.word	0x200068b4
 80014ac:	080195fc 	.word	0x080195fc
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	200068cc 	.word	0x200068cc
 80014b8:	08019620 	.word	0x08019620
 80014bc:	08001ce1 	.word	0x08001ce1
 80014c0:	200068d0 	.word	0x200068d0
 80014c4:	08019644 	.word	0x08019644
 80014c8:	08001dd1 	.word	0x08001dd1
 80014cc:	20008330 	.word	0x20008330
 80014d0:	08019668 	.word	0x08019668
 80014d4:	08001e81 	.word	0x08001e81
 80014d8:	200080d0 	.word	0x200080d0
 80014dc:	00000000 	.word	0x00000000

080014e0 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b0d6      	sub	sp, #344	; 0x158
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80014ec:	4baf      	ldr	r3, [pc, #700]	; (80017ac <task_ros2_function+0x2cc>)
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <task_ros2_function+0x2d0>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4baf      	ldr	r3, [pc, #700]	; (80017b4 <task_ros2_function+0x2d4>)
 80014f6:	4ab0      	ldr	r2, [pc, #704]	; (80017b8 <task_ros2_function+0x2d8>)
 80014f8:	49b0      	ldr	r1, [pc, #704]	; (80017bc <task_ros2_function+0x2dc>)
 80014fa:	2001      	movs	r0, #1
 80014fc:	f009 fea6 	bl	800b24c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001500:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001504:	4618      	mov	r0, r3
 8001506:	f009 fb2f 	bl	800ab68 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <task_ros2_function+0x2e0>)
 800150c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001510:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <task_ros2_function+0x2e4>)
 8001512:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001516:	4bac      	ldr	r3, [pc, #688]	; (80017c8 <task_ros2_function+0x2e8>)
 8001518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800151c:	4bab      	ldr	r3, [pc, #684]	; (80017cc <task_ros2_function+0x2ec>)
 800151e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001522:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001526:	4618      	mov	r0, r3
 8001528:	f009 fb2c 	bl	800ab84 <rcutils_set_default_allocator>
 800152c:	4603      	mov	r3, r0
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8001538:	f44f 719c 	mov.w	r1, #312	; 0x138
 800153c:	48a4      	ldr	r0, [pc, #656]	; (80017d0 <task_ros2_function+0x2f0>)
 800153e:	f015 fe6d 	bl	801721c <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8001542:	463b      	mov	r3, r7
 8001544:	4618      	mov	r0, r3
 8001546:	f009 fb3d 	bl	800abc4 <rcutils_get_default_allocator>
 800154a:	463b      	mov	r3, r7
 800154c:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 800155a:	f008 fa7f 	bl	8009a5c <rcl_get_zero_initialized_init_options>
 800155e:	4602      	mov	r2, r0
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001566:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800156a:	466a      	mov	r2, sp
 800156c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001570:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001574:	e882 0003 	stmia.w	r2, {r0, r1}
 8001578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800157c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157e:	4620      	mov	r0, r4
 8001580:	f008 fa6e 	bl	8009a60 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001584:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001588:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800158c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f009 f9cc 	bl	800a934 <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "golfinho", "acquisition_system", &support);
 800159c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015a0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80015a4:	4a8b      	ldr	r2, [pc, #556]	; (80017d4 <task_ros2_function+0x2f4>)
 80015a6:	498c      	ldr	r1, [pc, #560]	; (80017d8 <task_ros2_function+0x2f8>)
 80015a8:	f009 fa02 	bl	800a9b0 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80015ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b0:	f00a fd3c 	bl	800c02c <rmw_uros_sync_session>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <task_ros2_function+0xe4>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80015ba:	f240 114d 	movw	r1, #333	; 0x14d
 80015be:	4887      	ldr	r0, [pc, #540]	; (80017dc <task_ros2_function+0x2fc>)
 80015c0:	f015 fe2c 	bl	801721c <iprintf>

	  // ros2_gpio_input_pub
	  rclc_publisher_init_default(
 80015c4:	f00b fc16 	bl	800cdf4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <task_ros2_function+0x300>)
 80015d0:	4884      	ldr	r0, [pc, #528]	; (80017e4 <task_ros2_function+0x304>)
 80015d2:	f009 fa29 	bl	800aa28 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt8MultiArray),
			  "/golfinho/diagnostics/status_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 80015d6:	f00b fc09 	bl	800cdec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 80015da:	4602      	mov	r2, r0
 80015dc:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <task_ros2_function+0x308>)
 80015e2:	4882      	ldr	r0, [pc, #520]	; (80017ec <task_ros2_function+0x30c>)
 80015e4:	f009 fa20 	bl	800aa28 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
			  "/golfinho/diagnostics/motion_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 80015e8:	f00b f86c 	bl	800c6c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015f2:	4b7f      	ldr	r3, [pc, #508]	; (80017f0 <task_ros2_function+0x310>)
 80015f4:	487f      	ldr	r0, [pc, #508]	; (80017f4 <task_ros2_function+0x314>)
 80015f6:	f009 fa17 	bl	800aa28 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/golfinho/imu");

	  // ros2_joints_pub
	  rclc_publisher_init_default(
 80015fa:	f00b f867 	bl	800c6cc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 80015fe:	4602      	mov	r2, r0
 8001600:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001604:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <task_ros2_function+0x318>)
 8001606:	487d      	ldr	r0, [pc, #500]	; (80017fc <task_ros2_function+0x31c>)
 8001608:	f009 fa0e 	bl	800aa28 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
			  "/golfinho/gps");

	  // ros2_joint_steering_pub
	  rclc_publisher_init_default(
 800160c:	f00b f85c 	bl	800c6c8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8001610:	4602      	mov	r2, r0
 8001612:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001616:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <task_ros2_function+0x320>)
 8001618:	487a      	ldr	r0, [pc, #488]	; (8001804 <task_ros2_function+0x324>)
 800161a:	f009 fa05 	bl	800aa28 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
			  "/golfinho/joint_steering");

	  //create gpio_output_sub
	  receive_commands_from_ros_sub = rcl_get_zero_initialized_subscription();
 800161e:	f008 fc95 	bl	8009f4c <rcl_get_zero_initialized_subscription>
 8001622:	4603      	mov	r3, r0
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <task_ros2_function+0x328>)
 8001626:	6013      	str	r3, [r2, #0]

	  rclc_subscription_init_best_effort(
 8001628:	f00b fbe2 	bl	800cdf0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 800162c:	4602      	mov	r2, r0
 800162e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <task_ros2_function+0x32c>)
 8001634:	4874      	ldr	r0, [pc, #464]	; (8001808 <task_ros2_function+0x328>)
 8001636:	f009 fa2b 	bl	800aa90 <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
			  "/receive_commands_from_ros");


	  golfinho_check_status_msg.data.capacity = 5;
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <task_ros2_function+0x330>)
 800163c:	2205      	movs	r2, #5
 800163e:	619a      	str	r2, [r3, #24]
	  golfinho_check_status_msg.data.size = 5;
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <task_ros2_function+0x330>)
 8001642:	2205      	movs	r2, #5
 8001644:	615a      	str	r2, [r3, #20]
	  golfinho_check_status_msg.data.data = (uint8_t*) pvPortMalloc(golfinho_check_status_msg.data.capacity * sizeof(uint8_t));
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <task_ros2_function+0x330>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4618      	mov	r0, r3
 800164c:	f008 f82e 	bl	80096ac <pvPortMalloc>
 8001650:	4603      	mov	r3, r0
 8001652:	4a6f      	ldr	r2, [pc, #444]	; (8001810 <task_ros2_function+0x330>)
 8001654:	6113      	str	r3, [r2, #16]
	  golfinho_check_status_msg.layout.dim.capacity = 5;
 8001656:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <task_ros2_function+0x330>)
 8001658:	2205      	movs	r2, #5
 800165a:	609a      	str	r2, [r3, #8]
	  golfinho_check_status_msg.layout.dim.size = 5;
 800165c:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <task_ros2_function+0x330>)
 800165e:	2205      	movs	r2, #5
 8001660:	605a      	str	r2, [r3, #4]
	  golfinho_check_status_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_check_status_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <task_ros2_function+0x330>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4618      	mov	r0, r3
 8001670:	f008 f81c 	bl	80096ac <pvPortMalloc>
 8001674:	4603      	mov	r3, r0
 8001676:	4a66      	ldr	r2, [pc, #408]	; (8001810 <task_ros2_function+0x330>)
 8001678:	6013      	str	r3, [r2, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001680:	e031      	b.n	80016e6 <task_ros2_function+0x206>
	 		golfinho_check_status_msg.layout.dim.data[i].label.capacity = 7;
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <task_ros2_function+0x330>)
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	2207      	movs	r2, #7
 8001696:	609a      	str	r2, [r3, #8]
	 		golfinho_check_status_msg.layout.dim.data[i].label.size = 7;
 8001698:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <task_ros2_function+0x330>)
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	2207      	movs	r2, #7
 80016ac:	605a      	str	r2, [r3, #4]
	 		golfinho_check_status_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_check_status_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <task_ros2_function+0x330>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	6898      	ldr	r0, [r3, #8]
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <task_ros2_function+0x330>)
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	18cc      	adds	r4, r1, r3
 80016d4:	f007 ffea 	bl	80096ac <pvPortMalloc>
 80016d8:	4603      	mov	r3, r0
 80016da:	6023      	str	r3, [r4, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 80016dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <task_ros2_function+0x330>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3c7      	bcc.n	8001682 <task_ros2_function+0x1a2>

	 	  }

	 	  strcpy(golfinho_check_status_msg.layout.dim.data[0].label.data, "reserved");
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <task_ros2_function+0x330>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4946      	ldr	r1, [pc, #280]	; (8001814 <task_ros2_function+0x334>)
 80016fa:	461a      	mov	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	cb03      	ldmia	r3!, {r0, r1}
 8001700:	6010      	str	r0, [r2, #0]
 8001702:	6051      	str	r1, [r2, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	7213      	strb	r3, [r2, #8]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[1].label.data, "status");
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <task_ros2_function+0x330>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3314      	adds	r3, #20
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <task_ros2_function+0x338>)
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	8891      	ldrh	r1, [r2, #4]
 8001718:	7992      	ldrb	r2, [r2, #6]
 800171a:	8099      	strh	r1, [r3, #4]
 800171c:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[2].label.data, "op_mod");
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <task_ros2_function+0x330>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3328      	adds	r3, #40	; 0x28
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <task_ros2_function+0x33c>)
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	6018      	str	r0, [r3, #0]
 800172c:	8891      	ldrh	r1, [r2, #4]
 800172e:	7992      	ldrb	r2, [r2, #6]
 8001730:	8099      	strh	r1, [r3, #4]
 8001732:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[3].label.data, "key_th");
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <task_ros2_function+0x330>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	333c      	adds	r3, #60	; 0x3c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <task_ros2_function+0x340>)
 800173e:	6810      	ldr	r0, [r2, #0]
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	8891      	ldrh	r1, [r2, #4]
 8001744:	7992      	ldrb	r2, [r2, #6]
 8001746:	8099      	strh	r1, [r3, #4]
 8001748:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[4].label.data, "key_br");
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <task_ros2_function+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3350      	adds	r3, #80	; 0x50
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <task_ros2_function+0x344>)
 8001754:	6810      	ldr	r0, [r2, #0]
 8001756:	6018      	str	r0, [r3, #0]
 8001758:	8891      	ldrh	r1, [r2, #4]
 800175a:	7992      	ldrb	r2, [r2, #6]
 800175c:	8099      	strh	r1, [r3, #4]
 800175e:	719a      	strb	r2, [r3, #6]


		 	golfinho_motion_info_gpio_output_msg.data.capacity = 6;
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <task_ros2_function+0x348>)
 8001762:	2206      	movs	r2, #6
 8001764:	619a      	str	r2, [r3, #24]
		 	golfinho_motion_info_gpio_output_msg.data.size = 6;
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <task_ros2_function+0x348>)
 8001768:	2206      	movs	r2, #6
 800176a:	615a      	str	r2, [r3, #20]
		 	golfinho_motion_info_gpio_output_msg.data.data = (uint16_t*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.data.capacity * sizeof(uint16_t));
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <task_ros2_function+0x348>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f007 ff9a 	bl	80096ac <pvPortMalloc>
 8001778:	4603      	mov	r3, r0
 800177a:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <task_ros2_function+0x348>)
 800177c:	6113      	str	r3, [r2, #16]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.capacity = 6;
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <task_ros2_function+0x348>)
 8001780:	2206      	movs	r2, #6
 8001782:	609a      	str	r2, [r3, #8]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.size = 6;
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <task_ros2_function+0x348>)
 8001786:	2206      	movs	r2, #6
 8001788:	605a      	str	r2, [r3, #4]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <task_ros2_function+0x348>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f007 ff88 	bl	80096ac <pvPortMalloc>
 800179c:	4603      	mov	r3, r0
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <task_ros2_function+0x348>)
 80017a0:	6013      	str	r3, [r2, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80017a8:	e072      	b.n	8001890 <task_ros2_function+0x3b0>
 80017aa:	bf00      	nop
 80017ac:	08001395 	.word	0x08001395
 80017b0:	0800132d 	.word	0x0800132d
 80017b4:	0800130d 	.word	0x0800130d
 80017b8:	080012e1 	.word	0x080012e1
 80017bc:	20008408 	.word	0x20008408
 80017c0:	080028f1 	.word	0x080028f1
 80017c4:	08002935 	.word	0x08002935
 80017c8:	0800296d 	.word	0x0800296d
 80017cc:	080029d9 	.word	0x080029d9
 80017d0:	080187c4 	.word	0x080187c4
 80017d4:	080187ec 	.word	0x080187ec
 80017d8:	08018800 	.word	0x08018800
 80017dc:	0801880c 	.word	0x0801880c
 80017e0:	0801882c 	.word	0x0801882c
 80017e4:	2000827c 	.word	0x2000827c
 80017e8:	08018850 	.word	0x08018850
 80017ec:	200080cc 	.word	0x200080cc
 80017f0:	08018874 	.word	0x08018874
 80017f4:	200068c8 	.word	0x200068c8
 80017f8:	08018884 	.word	0x08018884
 80017fc:	200082cc 	.word	0x200082cc
 8001800:	08018894 	.word	0x08018894
 8001804:	20008234 	.word	0x20008234
 8001808:	20008280 	.word	0x20008280
 800180c:	080188b0 	.word	0x080188b0
 8001810:	20008290 	.word	0x20008290
 8001814:	080188cc 	.word	0x080188cc
 8001818:	080188d8 	.word	0x080188d8
 800181c:	080188e0 	.word	0x080188e0
 8001820:	080188e8 	.word	0x080188e8
 8001824:	080188f0 	.word	0x080188f0
 8001828:	20008218 	.word	0x20008218
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity = 9;
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <task_ros2_function+0x488>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	2209      	movs	r2, #9
 8001840:	609a      	str	r2, [r3, #8]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.size = 9;
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <task_ros2_function+0x488>)
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	2209      	movs	r2, #9
 8001856:	605a      	str	r2, [r3, #4]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity * sizeof(char));
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <task_ros2_function+0x488>)
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	6898      	ldr	r0, [r3, #8]
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <task_ros2_function+0x488>)
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18cc      	adds	r4, r1, r3
 800187e:	f007 ff15 	bl	80096ac <pvPortMalloc>
 8001882:	4603      	mov	r3, r0
 8001884:	6023      	str	r3, [r4, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 8001886:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800188a:	3301      	adds	r3, #1
 800188c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <task_ros2_function+0x488>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001898:	429a      	cmp	r2, r3
 800189a:	d3c7      	bcc.n	800182c <task_ros2_function+0x34c>

			 	  }

			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[0].label.data, "reserved");
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <task_ros2_function+0x488>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4932      	ldr	r1, [pc, #200]	; (800196c <task_ros2_function+0x48c>)
 80018a4:	461a      	mov	r2, r3
 80018a6:	460b      	mov	r3, r1
 80018a8:	cb03      	ldmia	r3!, {r0, r1}
 80018aa:	6010      	str	r0, [r2, #0]
 80018ac:	6051      	str	r1, [r2, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[1].label.data, "steering");
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <task_ros2_function+0x488>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3314      	adds	r3, #20
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <task_ros2_function+0x490>)
 80018bc:	461a      	mov	r2, r3
 80018be:	460b      	mov	r3, r1
 80018c0:	cb03      	ldmia	r3!, {r0, r1}
 80018c2:	6010      	str	r0, [r2, #0]
 80018c4:	6051      	str	r1, [r2, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[2].label.data, "throttle");
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <task_ros2_function+0x488>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3328      	adds	r3, #40	; 0x28
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4928      	ldr	r1, [pc, #160]	; (8001974 <task_ros2_function+0x494>)
 80018d4:	461a      	mov	r2, r3
 80018d6:	460b      	mov	r3, r1
 80018d8:	cb03      	ldmia	r3!, {r0, r1}
 80018da:	6010      	str	r0, [r2, #0]
 80018dc:	6051      	str	r1, [r2, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[3].label.data, "break");
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <task_ros2_function+0x488>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	333c      	adds	r3, #60	; 0x3c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <task_ros2_function+0x498>)
 80018ec:	6810      	ldr	r0, [r2, #0]
 80018ee:	6018      	str	r0, [r3, #0]
 80018f0:	8892      	ldrh	r2, [r2, #4]
 80018f2:	809a      	strh	r2, [r3, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[4].label.data, "bat_car");
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <task_ros2_function+0x488>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3350      	adds	r3, #80	; 0x50
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	491f      	ldr	r1, [pc, #124]	; (800197c <task_ros2_function+0x49c>)
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	cb03      	ldmia	r3!, {r0, r1}
 8001904:	6010      	str	r0, [r2, #0]
 8001906:	6051      	str	r1, [r2, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[5].label.data, "bat_sys");
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <task_ros2_function+0x488>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3364      	adds	r3, #100	; 0x64
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	491b      	ldr	r1, [pc, #108]	; (8001980 <task_ros2_function+0x4a0>)
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	cb03      	ldmia	r3!, {r0, r1}
 8001918:	6010      	str	r0, [r2, #0]
 800191a:	6051      	str	r1, [r2, #4]

		 	    receive.data.capacity = 6;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <task_ros2_function+0x4a4>)
 800191e:	2206      	movs	r2, #6
 8001920:	619a      	str	r2, [r3, #24]
		 	    receive.data.size = 6;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <task_ros2_function+0x4a4>)
 8001924:	2206      	movs	r2, #6
 8001926:	615a      	str	r2, [r3, #20]
		 	    receive.data.data = (uint16_t*) pvPortMalloc(receive.data.capacity * sizeof(uint16_t));
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <task_ros2_function+0x4a4>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f007 febc 	bl	80096ac <pvPortMalloc>
 8001934:	4603      	mov	r3, r0
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <task_ros2_function+0x4a4>)
 8001938:	6113      	str	r3, [r2, #16]
		 	    receive.layout.dim.capacity = 6;
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <task_ros2_function+0x4a4>)
 800193c:	2206      	movs	r2, #6
 800193e:	609a      	str	r2, [r3, #8]
		 	    receive.layout.dim.size = 6;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <task_ros2_function+0x4a4>)
 8001942:	2206      	movs	r2, #6
 8001944:	605a      	str	r2, [r3, #4]
		 	    receive.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(receive.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <task_ros2_function+0x4a4>)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f007 feaa 	bl	80096ac <pvPortMalloc>
 8001958:	4603      	mov	r3, r0
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <task_ros2_function+0x4a4>)
 800195c:	6013      	str	r3, [r2, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001964:	e042      	b.n	80019ec <task_ros2_function+0x50c>
 8001966:	bf00      	nop
 8001968:	20008218 	.word	0x20008218
 800196c:	080188cc 	.word	0x080188cc
 8001970:	080188f8 	.word	0x080188f8
 8001974:	08018904 	.word	0x08018904
 8001978:	08018910 	.word	0x08018910
 800197c:	08018918 	.word	0x08018918
 8001980:	08018920 	.word	0x08018920
 8001984:	200082ac 	.word	0x200082ac
				 	    receive.layout.dim.data[i].label.capacity = 6;
 8001988:	4bbf      	ldr	r3, [pc, #764]	; (8001c88 <task_ros2_function+0x7a8>)
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	2206      	movs	r2, #6
 800199c:	609a      	str	r2, [r3, #8]
				 		receive.layout.dim.data[i].label.size = 6;
 800199e:	4bba      	ldr	r3, [pc, #744]	; (8001c88 <task_ros2_function+0x7a8>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	2206      	movs	r2, #6
 80019b2:	605a      	str	r2, [r3, #4]
				 		receive.layout.dim.data[i].label.data = (char*) pvPortMalloc(receive.layout.dim.data[i].label.capacity * sizeof(char));
 80019b4:	4bb4      	ldr	r3, [pc, #720]	; (8001c88 <task_ros2_function+0x7a8>)
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	4baf      	ldr	r3, [pc, #700]	; (8001c88 <task_ros2_function+0x7a8>)
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	18cc      	adds	r4, r1, r3
 80019da:	f007 fe67 	bl	80096ac <pvPortMalloc>
 80019de:	4603      	mov	r3, r0
 80019e0:	6023      	str	r3, [r4, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 80019e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019ec:	4ba6      	ldr	r3, [pc, #664]	; (8001c88 <task_ros2_function+0x7a8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3c7      	bcc.n	8001988 <task_ros2_function+0x4a8>

				 	  }
				 	    strcpy(receive.layout.dim.data[0].label.data, "k_sw");
 80019f8:	4ba3      	ldr	r3, [pc, #652]	; (8001c88 <task_ros2_function+0x7a8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4aa3      	ldr	r2, [pc, #652]	; (8001c8c <task_ros2_function+0x7ac>)
 8001a00:	6810      	ldr	r0, [r2, #0]
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	7912      	ldrb	r2, [r2, #4]
 8001a06:	711a      	strb	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[1].label.data, "op_mod");
 8001a08:	4b9f      	ldr	r3, [pc, #636]	; (8001c88 <task_ros2_function+0x7a8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a9f      	ldr	r2, [pc, #636]	; (8001c90 <task_ros2_function+0x7b0>)
 8001a12:	6810      	ldr	r0, [r2, #0]
 8001a14:	6018      	str	r0, [r3, #0]
 8001a16:	8891      	ldrh	r1, [r2, #4]
 8001a18:	7992      	ldrb	r2, [r2, #6]
 8001a1a:	8099      	strh	r1, [r3, #4]
 8001a1c:	719a      	strb	r2, [r3, #6]
				    	strcpy(receive.layout.dim.data[2].label.data, "k_th");
 8001a1e:	4b9a      	ldr	r3, [pc, #616]	; (8001c88 <task_ros2_function+0x7a8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3328      	adds	r3, #40	; 0x28
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a9b      	ldr	r2, [pc, #620]	; (8001c94 <task_ros2_function+0x7b4>)
 8001a28:	6810      	ldr	r0, [r2, #0]
 8001a2a:	6018      	str	r0, [r3, #0]
 8001a2c:	7912      	ldrb	r2, [r2, #4]
 8001a2e:	711a      	strb	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[3].label.data, "k_brk");
 8001a30:	4b95      	ldr	r3, [pc, #596]	; (8001c88 <task_ros2_function+0x7a8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	333c      	adds	r3, #60	; 0x3c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a97      	ldr	r2, [pc, #604]	; (8001c98 <task_ros2_function+0x7b8>)
 8001a3a:	6810      	ldr	r0, [r2, #0]
 8001a3c:	6018      	str	r0, [r3, #0]
 8001a3e:	8892      	ldrh	r2, [r2, #4]
 8001a40:	809a      	strh	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[4].label.data, "th_an");
 8001a42:	4b91      	ldr	r3, [pc, #580]	; (8001c88 <task_ros2_function+0x7a8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3350      	adds	r3, #80	; 0x50
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <task_ros2_function+0x7bc>)
 8001a4c:	6810      	ldr	r0, [r2, #0]
 8001a4e:	6018      	str	r0, [r3, #0]
 8001a50:	8892      	ldrh	r2, [r2, #4]
 8001a52:	809a      	strh	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[5].label.data, "brk_an");
 8001a54:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <task_ros2_function+0x7a8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3364      	adds	r3, #100	; 0x64
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <task_ros2_function+0x7c0>)
 8001a5e:	6810      	ldr	r0, [r2, #0]
 8001a60:	6018      	str	r0, [r3, #0]
 8001a62:	8891      	ldrh	r1, [r2, #4]
 8001a64:	7992      	ldrb	r2, [r2, #6]
 8001a66:	8099      	strh	r1, [r3, #4]
 8001a68:	719a      	strb	r2, [r3, #6]

	//imu
                        int STRING_BUFFER_LEN=10;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				    	char imu_buffer[STRING_BUFFER_LEN];
 8001a70:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001a74:	1e63      	subs	r3, r4, #1
 8001a76:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	00cb      	lsls	r3, r1, #3
 8001a8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a90:	00c2      	lsls	r2, r0, #3
 8001a92:	4623      	mov	r3, r4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	00cb      	lsls	r3, r1, #3
 8001aa4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	3307      	adds	r3, #7
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ab6:	ab02      	add	r3, sp, #8
 8001ab8:	3300      	adds	r3, #0
 8001aba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				    	imu_.header.frame_id.data = imu_buffer;
 8001abe:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <task_ros2_function+0x7c4>)
 8001ac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ac4:	6093      	str	r3, [r2, #8]
				    	imu_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001ac6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001aca:	4a76      	ldr	r2, [pc, #472]	; (8001ca4 <task_ros2_function+0x7c4>)
 8001acc:	6113      	str	r3, [r2, #16]

	//gps
				    	char gps_buffer[STRING_BUFFER_LEN];
 8001ace:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001ad2:	1e63      	subs	r3, r4, #1
 8001ad4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001ad8:	4623      	mov	r3, r4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00cb      	lsls	r3, r1, #3
 8001aea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aee:	00c2      	lsls	r2, r0, #3
 8001af0:	4623      	mov	r3, r4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00cb      	lsls	r3, r1, #3
 8001b02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b06:	00c2      	lsls	r2, r0, #3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	ebad 0d03 	sub.w	sp, sp, r3
 8001b14:	ab02      	add	r3, sp, #8
 8001b16:	3300      	adds	r3, #0
 8001b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				    	gps_.header.frame_id.data = gps_buffer;
 8001b1c:	4a62      	ldr	r2, [pc, #392]	; (8001ca8 <task_ros2_function+0x7c8>)
 8001b1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b22:	6093      	str	r3, [r2, #8]
				    	gps_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001b24:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001b28:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <task_ros2_function+0x7c8>)
 8001b2a:	6113      	str	r3, [r2, #16]

	// joint_steering
				   // 	int cap=5,siz=5;
				   // 	char name_[5]={"steer"};
				    	char joint_steering_buffer[STRING_BUFFER_LEN];
 8001b2c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001b30:	1e63      	subs	r3, r4, #1
 8001b32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b36:	4623      	mov	r3, r4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	00cb      	lsls	r3, r1, #3
 8001b48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b4c:	00c2      	lsls	r2, r0, #3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	00cb      	lsls	r3, r1, #3
 8001b60:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b64:	00c2      	lsls	r2, r0, #3
 8001b66:	4623      	mov	r3, r4
 8001b68:	3307      	adds	r3, #7
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b72:	ab02      	add	r3, sp, #8
 8001b74:	3300      	adds	r3, #0
 8001b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				    	joint_steering.header.frame_id.data = joint_steering_buffer;
 8001b7a:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <task_ros2_function+0x7cc>)
 8001b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b80:	6093      	str	r3, [r2, #8]
				    	joint_steering.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001b82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001b86:	4a49      	ldr	r2, [pc, #292]	; (8001cac <task_ros2_function+0x7cc>)
 8001b88:	6113      	str	r3, [r2, #16]
					//	joint_steering.name.data->size=siz;
					//	joint_steering.name.data->data=name_;


	  // Create a timer
	  rclc_timer_init_default(&golfinho_check_status_timer, &support, RCL_MS_TO_NS(500), golfinho_check_status_timer_callback);
 8001b8a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <task_ros2_function+0x7d0>)
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	a335      	add	r3, pc, #212	; (adr r3, 8001c68 <task_ros2_function+0x788>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	4846      	ldr	r0, [pc, #280]	; (8001cb4 <task_ros2_function+0x7d4>)
 8001b9a:	f008 ffad 	bl	800aaf8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_motion_info_timer, &support, RCL_MS_TO_NS(100), golfinho_motion_info_timer_callback);
 8001b9e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ba2:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <task_ros2_function+0x7d8>)
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	a332      	add	r3, pc, #200	; (adr r3, 8001c70 <task_ros2_function+0x790>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	4843      	ldr	r0, [pc, #268]	; (8001cbc <task_ros2_function+0x7dc>)
 8001bae:	f008 ffa3 	bl	800aaf8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_imu_timer, &support, RCL_MS_TO_NS(25), golfinho_imu_timer_callback);
 8001bb2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001bb6:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <task_ros2_function+0x7e0>)
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	a32f      	add	r3, pc, #188	; (adr r3, 8001c78 <task_ros2_function+0x798>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	4840      	ldr	r0, [pc, #256]	; (8001cc4 <task_ros2_function+0x7e4>)
 8001bc2:	f008 ff99 	bl	800aaf8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_gps_timer, &support, RCL_MS_TO_NS(1000), golfinho_gps_timer_callback);
 8001bc6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <task_ros2_function+0x7e8>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	a32c      	add	r3, pc, #176	; (adr r3, 8001c80 <task_ros2_function+0x7a0>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	483d      	ldr	r0, [pc, #244]	; (8001ccc <task_ros2_function+0x7ec>)
 8001bd6:	f008 ff8f 	bl	800aaf8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_joint_steering_timer, &support, RCL_MS_TO_NS(100), golfinho_joint_steering_timer_callback);
 8001bda:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <task_ros2_function+0x7f0>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	a323      	add	r3, pc, #140	; (adr r3, 8001c70 <task_ros2_function+0x790>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <task_ros2_function+0x7f4>)
 8001bea:	f008 ff85 	bl	800aaf8 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context,6, &allocator);
 8001bee:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001bf2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bf6:	f103 0108 	add.w	r1, r3, #8
 8001bfa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001bfe:	4613      	mov	r3, r2
 8001c00:	2206      	movs	r2, #6
 8001c02:	f008 fc11 	bl	800a428 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &receive_commands_from_ros_sub, &receive,
 8001c06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <task_ros2_function+0x7f8>)
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <task_ros2_function+0x7a8>)
 8001c12:	4932      	ldr	r1, [pc, #200]	; (8001cdc <task_ros2_function+0x7fc>)
 8001c14:	f008 fc7c 	bl	800a510 <rclc_executor_add_subscription>
	 	  			  &receive_commands_from_ros_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_timer(&executor, &golfinho_check_status_timer);
 8001c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1c:	4925      	ldr	r1, [pc, #148]	; (8001cb4 <task_ros2_function+0x7d4>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f008 fcae 	bl	800a580 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_motion_info_timer);
 8001c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c28:	4924      	ldr	r1, [pc, #144]	; (8001cbc <task_ros2_function+0x7dc>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f008 fca8 	bl	800a580 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_imu_timer);
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	4923      	ldr	r1, [pc, #140]	; (8001cc4 <task_ros2_function+0x7e4>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f008 fca2 	bl	800a580 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_gps_timer);
 8001c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c40:	4922      	ldr	r1, [pc, #136]	; (8001ccc <task_ros2_function+0x7ec>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f008 fc9c 	bl	800a580 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_joint_steering_timer);
 8001c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4c:	4921      	ldr	r1, [pc, #132]	; (8001cd4 <task_ros2_function+0x7f4>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f008 fc96 	bl	800a580 <rclc_executor_add_timer>

      // Run executor
	  rclc_executor_spin(&executor);
 8001c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f008 fe33 	bl	800a8c4 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f005 f9ec 	bl	800703c <osDelay>
 8001c64:	e7fb      	b.n	8001c5e <task_ros2_function+0x77e>
 8001c66:	bf00      	nop
 8001c68:	1dcd6500 	.word	0x1dcd6500
 8001c6c:	00000000 	.word	0x00000000
 8001c70:	05f5e100 	.word	0x05f5e100
 8001c74:	00000000 	.word	0x00000000
 8001c78:	017d7840 	.word	0x017d7840
 8001c7c:	00000000 	.word	0x00000000
 8001c80:	3b9aca00 	.word	0x3b9aca00
 8001c84:	00000000 	.word	0x00000000
 8001c88:	200082ac 	.word	0x200082ac
 8001c8c:	08018928 	.word	0x08018928
 8001c90:	080188e0 	.word	0x080188e0
 8001c94:	08018930 	.word	0x08018930
 8001c98:	08018938 	.word	0x08018938
 8001c9c:	08018940 	.word	0x08018940
 8001ca0:	08018948 	.word	0x08018948
 8001ca4:	200080d8 	.word	0x200080d8
 8001ca8:	200068d8 	.word	0x200068d8
 8001cac:	20008238 	.word	0x20008238
 8001cb0:	080020dd 	.word	0x080020dd
 8001cb4:	20008284 	.word	0x20008284
 8001cb8:	080021a5 	.word	0x080021a5
 8001cbc:	20008288 	.word	0x20008288
 8001cc0:	08002425 	.word	0x08002425
 8001cc4:	2000828c 	.word	0x2000828c
 8001cc8:	080024b1 	.word	0x080024b1
 8001ccc:	20008334 	.word	0x20008334
 8001cd0:	0800253d 	.word	0x0800253d
 8001cd4:	200080c8 	.word	0x200080c8
 8001cd8:	080023a9 	.word	0x080023a9
 8001cdc:	20008280 	.word	0x20008280

08001ce0 <digital_inputs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_digital_inputs_task */
void digital_inputs_task(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN digital_inputs_task */
  /* Infinite loop */
	 uint8_t stats[3]={0,0,0};
 8001ce8:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <digital_inputs_task+0xe0>)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	8019      	strh	r1, [r3, #0]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	0c12      	lsrs	r2, r2, #16
 8001cf8:	701a      	strb	r2, [r3, #0]
	  for(;;)
	  {

		  // key switch
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	4831      	ldr	r0, [pc, #196]	; (8001dc4 <digital_inputs_task+0xe4>)
 8001cfe:	f003 f979 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	73bb      	strb	r3, [r7, #14]
		  stats[1]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	482c      	ldr	r0, [pc, #176]	; (8001dc8 <digital_inputs_task+0xe8>)
 8001d16:	f003 f96d 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	737b      	strb	r3, [r7, #13]
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8001d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <digital_inputs_task+0xe8>)
 8001d2e:	f003 f961 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	733b      	strb	r3, [r7, #12]

		  // break
		  digital_data_input_manual[4]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 8001d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <digital_inputs_task+0xe8>)
 8001d46:	f003 f955 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <digital_inputs_task+0xec>)
 8001d5a:	711a      	strb	r2, [r3, #4]
		  // throttle
		  digital_data_input_manual[3]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8001d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d60:	4819      	ldr	r0, [pc, #100]	; (8001dc8 <digital_inputs_task+0xe8>)
 8001d62:	f003 f947 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <digital_inputs_task+0xec>)
 8001d76:	70da      	strb	r2, [r3, #3]

		  if(stats[0] || stats[1] || stats[2]){
 8001d78:	7b3b      	ldrb	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <digital_inputs_task+0xaa>
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <digital_inputs_task+0xaa>
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <digital_inputs_task+0xd0>
			  if(stats[0])
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <digital_inputs_task+0xb6>
			 	digital_data_input_manual[1]=2;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <digital_inputs_task+0xec>)
 8001d92:	2202      	movs	r2, #2
 8001d94:	705a      	strb	r2, [r3, #1]
			  if(stats[1])
 8001d96:	7b7b      	ldrb	r3, [r7, #13]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <digital_inputs_task+0xc2>
			 	digital_data_input_manual[1]=3;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <digital_inputs_task+0xec>)
 8001d9e:	2203      	movs	r2, #3
 8001da0:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <digital_inputs_task+0xd6>
			    digital_data_input_manual[1]=4;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <digital_inputs_task+0xec>)
 8001daa:	2204      	movs	r2, #4
 8001dac:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001dae:	e002      	b.n	8001db6 <digital_inputs_task+0xd6>
		  }else
			  digital_data_input_manual[1]=1;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <digital_inputs_task+0xec>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]


		  osDelay(100);
 8001db6:	2064      	movs	r0, #100	; 0x64
 8001db8:	f005 f940 	bl	800703c <osDelay>
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001dbc:	e79d      	b.n	8001cfa <digital_inputs_task+0x1a>
 8001dbe:	bf00      	nop
 8001dc0:	08018950 	.word	0x08018950
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	20003208 	.word	0x20003208

08001dd0 <analog_input_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_input_task */
void analog_input_task(void *argument)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_input_task */
  /* Infinite loop */
  for(;;)
  {
	  // Get ADC value
		  ADC_select_channel_Throttle();
 8001dd8:	f000 fc12 	bl	8002600 <ADC_select_channel_Throttle>
		  HAL_ADC_Start(&hadc1);
 8001ddc:	4826      	ldr	r0, [pc, #152]	; (8001e78 <analog_input_task+0xa8>)
 8001dde:	f001 fa89 	bl	80032f4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001de2:	210a      	movs	r1, #10
 8001de4:	4824      	ldr	r0, [pc, #144]	; (8001e78 <analog_input_task+0xa8>)
 8001de6:	f001 fb5f 	bl	80034a8 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[3] = HAL_ADC_GetValue(&hadc1);
 8001dea:	4823      	ldr	r0, [pc, #140]	; (8001e78 <analog_input_task+0xa8>)
 8001dec:	f001 fc62 	bl	80036b4 <HAL_ADC_GetValue>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <analog_input_task+0xac>)
 8001df6:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8001df8:	481f      	ldr	r0, [pc, #124]	; (8001e78 <analog_input_task+0xa8>)
 8001dfa:	f001 fb29 	bl	8003450 <HAL_ADC_Stop>

	      ADC_select_channel_break();
 8001dfe:	f000 fbe1 	bl	80025c4 <ADC_select_channel_break>
		  HAL_ADC_Start(&hadc1);
 8001e02:	481d      	ldr	r0, [pc, #116]	; (8001e78 <analog_input_task+0xa8>)
 8001e04:	f001 fa76 	bl	80032f4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001e08:	210a      	movs	r1, #10
 8001e0a:	481b      	ldr	r0, [pc, #108]	; (8001e78 <analog_input_task+0xa8>)
 8001e0c:	f001 fb4c 	bl	80034a8 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[2] = HAL_ADC_GetValue(&hadc1);
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <analog_input_task+0xa8>)
 8001e12:	f001 fc4f 	bl	80036b4 <HAL_ADC_GetValue>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <analog_input_task+0xac>)
 8001e1c:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 8001e1e:	4816      	ldr	r0, [pc, #88]	; (8001e78 <analog_input_task+0xa8>)
 8001e20:	f001 fb16 	bl	8003450 <HAL_ADC_Stop>

		  ADC_select_channel_batery_car();
 8001e24:	f000 fc08 	bl	8002638 <ADC_select_channel_batery_car>
		  HAL_ADC_Start(&hadc1);
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <analog_input_task+0xa8>)
 8001e2a:	f001 fa63 	bl	80032f4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001e2e:	210a      	movs	r1, #10
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <analog_input_task+0xa8>)
 8001e32:	f001 fb39 	bl	80034a8 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[4] = HAL_ADC_GetValue(&hadc1);
 8001e36:	4810      	ldr	r0, [pc, #64]	; (8001e78 <analog_input_task+0xa8>)
 8001e38:	f001 fc3c 	bl	80036b4 <HAL_ADC_GetValue>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <analog_input_task+0xac>)
 8001e42:	811a      	strh	r2, [r3, #8]
		  HAL_ADC_Stop(&hadc1);
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <analog_input_task+0xa8>)
 8001e46:	f001 fb03 	bl	8003450 <HAL_ADC_Stop>

		  ADC_select_channel_system_batery();
 8001e4a:	f000 fc11 	bl	8002670 <ADC_select_channel_system_batery>
		  HAL_ADC_Start(&hadc1);
 8001e4e:	480a      	ldr	r0, [pc, #40]	; (8001e78 <analog_input_task+0xa8>)
 8001e50:	f001 fa50 	bl	80032f4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001e54:	210a      	movs	r1, #10
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <analog_input_task+0xa8>)
 8001e58:	f001 fb26 	bl	80034a8 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[5] = HAL_ADC_GetValue(&hadc1);
 8001e5c:	4806      	ldr	r0, [pc, #24]	; (8001e78 <analog_input_task+0xa8>)
 8001e5e:	f001 fc29 	bl	80036b4 <HAL_ADC_GetValue>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <analog_input_task+0xac>)
 8001e68:	815a      	strh	r2, [r3, #10]
		  HAL_ADC_Stop(&hadc1);
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <analog_input_task+0xa8>)
 8001e6c:	f001 faf0 	bl	8003450 <HAL_ADC_Stop>

		  HAL_Delay(50);
 8001e70:	2032      	movs	r0, #50	; 0x32
 8001e72:	f001 f931 	bl	80030d8 <HAL_Delay>
		  ADC_select_channel_Throttle();
 8001e76:	e7af      	b.n	8001dd8 <analog_input_task+0x8>
 8001e78:	2000685c 	.word	0x2000685c
 8001e7c:	20003210 	.word	0x20003210

08001e80 <automatic_manual_mode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_automatic_manual_mode_Task */
void automatic_manual_mode_Task(void *argument)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN automatic_manual_mode_Task */
  /* Infinite loop */
  for(;;){

	  switch(flg){
 8001e88:	4b8d      	ldr	r3, [pc, #564]	; (80020c0 <automatic_manual_mode_Task+0x240>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <automatic_manual_mode_Task+0x18>
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f000 8088 	beq.w	8001fa6 <automatic_manual_mode_Task+0x126>
 8001e96:	e10f      	b.n	80020b8 <automatic_manual_mode_Task+0x238>

	  case 0:
      //KEY SWITCH
		  if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==3 || digital_data_input_manual[1]==4)
 8001e98:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d007      	beq.n	8001eb0 <automatic_manual_mode_Task+0x30>
 8001ea0:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d003      	beq.n	8001eb0 <automatic_manual_mode_Task+0x30>
 8001ea8:	4b86      	ldr	r3, [pc, #536]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d105      	bne.n	8001ebc <automatic_manual_mode_Task+0x3c>
		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4884      	ldr	r0, [pc, #528]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001eb6:	f003 f8b4 	bl	8005022 <HAL_GPIO_WritePin>
 8001eba:	e008      	b.n	8001ece <automatic_manual_mode_Task+0x4e>
         else
		     if(digital_data_input_manual[1]==2)
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ebe:	785b      	ldrb	r3, [r3, #1]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d104      	bne.n	8001ece <automatic_manual_mode_Task+0x4e>
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	487f      	ldr	r0, [pc, #508]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001eca:	f003 f8aa 	bl	8005022 <HAL_GPIO_WritePin>



     	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==4)
 8001ece:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d007      	beq.n	8001ee6 <automatic_manual_mode_Task+0x66>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d003      	beq.n	8001ee6 <automatic_manual_mode_Task+0x66>
 8001ede:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d105      	bne.n	8001ef2 <automatic_manual_mode_Task+0x72>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2108      	movs	r1, #8
 8001eea:	4877      	ldr	r0, [pc, #476]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001eec:	f003 f899 	bl	8005022 <HAL_GPIO_WritePin>
 8001ef0:	e008      	b.n	8001f04 <automatic_manual_mode_Task+0x84>
     	 else
             if(digital_data_input_manual[1]==3)
 8001ef2:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d104      	bne.n	8001f04 <automatic_manual_mode_Task+0x84>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2108      	movs	r1, #8
 8001efe:	4872      	ldr	r0, [pc, #456]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f00:	f003 f88f 	bl	8005022 <HAL_GPIO_WritePin>

    	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==3)
 8001f04:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d007      	beq.n	8001f1c <automatic_manual_mode_Task+0x9c>
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d003      	beq.n	8001f1c <automatic_manual_mode_Task+0x9c>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d105      	bne.n	8001f28 <automatic_manual_mode_Task+0xa8>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4869      	ldr	r0, [pc, #420]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f22:	f003 f87e 	bl	8005022 <HAL_GPIO_WritePin>
 8001f26:	e008      	b.n	8001f3a <automatic_manual_mode_Task+0xba>
    	 else
             if(digital_data_input_manual[1]==4)
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d104      	bne.n	8001f3a <automatic_manual_mode_Task+0xba>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2110      	movs	r1, #16
 8001f34:	4864      	ldr	r0, [pc, #400]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f36:	f003 f874 	bl	8005022 <HAL_GPIO_WritePin>


      // THROTTLE


             if(digital_data_input_manual[3]){
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f3c:	78db      	ldrb	r3, [r3, #3]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <automatic_manual_mode_Task+0xdc>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	2101      	movs	r1, #1
 8001f46:	4860      	ldr	r0, [pc, #384]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f48:	f003 f86b 	bl	8005022 <HAL_GPIO_WritePin>
           	     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 8001f4c:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <automatic_manual_mode_Task+0x24c>)
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	485e      	ldr	r0, [pc, #376]	; (80020d0 <automatic_manual_mode_Task+0x250>)
 8001f56:	f002 f9c5 	bl	80042e4 <HAL_DAC_SetValue>
 8001f5a:	e008      	b.n	8001f6e <automatic_manual_mode_Task+0xee>
               }else
            	 if(!digital_data_input_manual[3])
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f5e:	78db      	ldrb	r3, [r3, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <automatic_manual_mode_Task+0xee>
            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2101      	movs	r1, #1
 8001f68:	4857      	ldr	r0, [pc, #348]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f6a:	f003 f85a 	bl	8005022 <HAL_GPIO_WritePin>
      //  BREAK
             if(digital_data_input_manual[4]){
 8001f6e:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <automatic_manual_mode_Task+0x110>
               	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4853      	ldr	r0, [pc, #332]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001f7c:	f003 f851 	bl	8005022 <HAL_GPIO_WritePin>
                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[3]);
 8001f80:	4b52      	ldr	r3, [pc, #328]	; (80020cc <automatic_manual_mode_Task+0x24c>)
 8001f82:	88db      	ldrh	r3, [r3, #6]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2110      	movs	r1, #16
 8001f88:	4851      	ldr	r0, [pc, #324]	; (80020d0 <automatic_manual_mode_Task+0x250>)
 8001f8a:	f002 f9ab 	bl	80042e4 <HAL_DAC_SetValue>
            	}else
            	   if(!digital_data_input_manual[4])
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

		  break;
 8001f8e:	e090      	b.n	80020b2 <automatic_manual_mode_Task+0x232>
            	   if(!digital_data_input_manual[4])
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <automatic_manual_mode_Task+0x244>)
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 808c 	bne.w	80020b2 <automatic_manual_mode_Task+0x232>
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	484a      	ldr	r0, [pc, #296]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001fa0:	f003 f83f 	bl	8005022 <HAL_GPIO_WritePin>
		  break;
 8001fa4:	e085      	b.n	80020b2 <automatic_manual_mode_Task+0x232>

	  case 1:
		    //KEY SWITCH
     	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==3 || digital_data_input_auto[1]==4)
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d007      	beq.n	8001fbe <automatic_manual_mode_Task+0x13e>
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d003      	beq.n	8001fbe <automatic_manual_mode_Task+0x13e>
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d105      	bne.n	8001fca <automatic_manual_mode_Task+0x14a>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4841      	ldr	r0, [pc, #260]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001fc4:	f003 f82d 	bl	8005022 <HAL_GPIO_WritePin>
 8001fc8:	e008      	b.n	8001fdc <automatic_manual_mode_Task+0x15c>
  	      else
	        if(digital_data_input_auto[1]==2)
 8001fca:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d104      	bne.n	8001fdc <automatic_manual_mode_Task+0x15c>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	483c      	ldr	r0, [pc, #240]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001fd8:	f003 f823 	bl	8005022 <HAL_GPIO_WritePin>

    	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==4)
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d007      	beq.n	8001ff4 <automatic_manual_mode_Task+0x174>
 8001fe4:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d003      	beq.n	8001ff4 <automatic_manual_mode_Task+0x174>
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d105      	bne.n	8002000 <automatic_manual_mode_Task+0x180>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2108      	movs	r1, #8
 8001ff8:	4833      	ldr	r0, [pc, #204]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8001ffa:	f003 f812 	bl	8005022 <HAL_GPIO_WritePin>
 8001ffe:	e008      	b.n	8002012 <automatic_manual_mode_Task+0x192>
    	 else
		    if(digital_data_input_auto[1]==3)
 8002000:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d104      	bne.n	8002012 <automatic_manual_mode_Task+0x192>
		       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2108      	movs	r1, #8
 800200c:	482e      	ldr	r0, [pc, #184]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 800200e:	f003 f808 	bl	8005022 <HAL_GPIO_WritePin>

      	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==3)
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d007      	beq.n	800202a <automatic_manual_mode_Task+0x1aa>
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <automatic_manual_mode_Task+0x1aa>
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d105      	bne.n	8002036 <automatic_manual_mode_Task+0x1b6>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2110      	movs	r1, #16
 800202e:	4826      	ldr	r0, [pc, #152]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8002030:	f002 fff7 	bl	8005022 <HAL_GPIO_WritePin>
 8002034:	e008      	b.n	8002048 <automatic_manual_mode_Task+0x1c8>
      	 else
	 	    if(digital_data_input_auto[1]==4)
 8002036:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 8002038:	785b      	ldrb	r3, [r3, #1]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d104      	bne.n	8002048 <automatic_manual_mode_Task+0x1c8>
	       	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	2110      	movs	r1, #16
 8002042:	4821      	ldr	r0, [pc, #132]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8002044:	f002 ffed 	bl	8005022 <HAL_GPIO_WritePin>

		      // THROTTLE
		             if(digital_data_input_auto[3]){
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <automatic_manual_mode_Task+0x1ea>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	2101      	movs	r1, #1
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8002056:	f002 ffe4 	bl	8005022 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_auto[2]);
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <automatic_manual_mode_Task+0x258>)
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	481b      	ldr	r0, [pc, #108]	; (80020d0 <automatic_manual_mode_Task+0x250>)
 8002064:	f002 f93e 	bl	80042e4 <HAL_DAC_SetValue>
 8002068:	e008      	b.n	800207c <automatic_manual_mode_Task+0x1fc>
	  	  	  	  	  }else
		            	 if(!digital_data_input_auto[3])
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 800206c:	78db      	ldrb	r3, [r3, #3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <automatic_manual_mode_Task+0x1fc>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2101      	movs	r1, #1
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 8002078:	f002 ffd3 	bl	8005022 <HAL_GPIO_WritePin>
            //  BREAK
		             if(digital_data_input_auto[4]){
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 800207e:	791b      	ldrb	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00c      	beq.n	800209e <automatic_manual_mode_Task+0x21e>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2102      	movs	r1, #2
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 800208a:	f002 ffca 	bl	8005022 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_auto[3]);
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <automatic_manual_mode_Task+0x258>)
 8002090:	88db      	ldrh	r3, [r3, #6]
 8002092:	2200      	movs	r2, #0
 8002094:	2110      	movs	r1, #16
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <automatic_manual_mode_Task+0x250>)
 8002098:	f002 f924 	bl	80042e4 <HAL_DAC_SetValue>
	  	  	  	  	  }else
	  	  	  	  		 if(!digital_data_input_auto[4])
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

	     break;
 800209c:	e00b      	b.n	80020b6 <automatic_manual_mode_Task+0x236>
	  	  	  	  		 if(!digital_data_input_auto[4])
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <automatic_manual_mode_Task+0x254>)
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d107      	bne.n	80020b6 <automatic_manual_mode_Task+0x236>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2102      	movs	r1, #2
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <automatic_manual_mode_Task+0x248>)
 80020ac:	f002 ffb9 	bl	8005022 <HAL_GPIO_WritePin>
	     break;
 80020b0:	e001      	b.n	80020b6 <automatic_manual_mode_Task+0x236>
		  break;
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <automatic_manual_mode_Task+0x238>
	     break;
 80020b6:	bf00      	nop

	  }


    osDelay(100);
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	f004 ffbf 	bl	800703c <osDelay>
	  switch(flg){
 80020be:	e6e3      	b.n	8001e88 <automatic_manual_mode_Task+0x8>
 80020c0:	20003204 	.word	0x20003204
 80020c4:	20003208 	.word	0x20003208
 80020c8:	40011000 	.word	0x40011000
 80020cc:	20003210 	.word	0x20003210
 80020d0:	200068b4 	.word	0x200068b4
 80020d4:	2000321c 	.word	0x2000321c
 80020d8:	20003224 	.word	0x20003224

080020dc <golfinho_check_status_timer_callback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* ROS CALLBACKS*/
void golfinho_check_status_timer_callback(rcl_timer_t * timer, int64_t last_call_time) // Envia os dados de estados do carrihno para o ros2
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modods de operação
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <golfinho_check_status_timer_callback+0xb0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01d      	beq.n	800212c <golfinho_check_status_timer_callback+0x50>
     	        golfinho_check_status_msg.data.data[0]=digital_data_input_auto[0];
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a27      	ldr	r2, [pc, #156]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
	         	golfinho_check_status_msg.data.data[1]=digital_data_input_auto[1]; // key_switch
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 8002102:	7852      	ldrb	r2, [r2, #1]
 8002104:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2]; // op_mode
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	3302      	adds	r3, #2
 800210c:	4a21      	ldr	r2, [pc, #132]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 800210e:	7892      	ldrb	r2, [r2, #2]
 8002110:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_auto[3]; // key_t
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	3303      	adds	r3, #3
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 800211a:	78d2      	ldrb	r2, [r2, #3]
 800211c:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[4]=digital_data_input_auto[4]; // key_break
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	3304      	adds	r3, #4
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 8002126:	7912      	ldrb	r2, [r2, #4]
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e01c      	b.n	8002166 <golfinho_check_status_timer_callback+0x8a>
			}else {
				golfinho_check_status_msg.data.data[0]=digital_data_input_manual[0];
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <golfinho_check_status_timer_callback+0xbc>)
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[1]=digital_data_input_manual[1];// key_switch
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <golfinho_check_status_timer_callback+0xbc>)
 800213e:	7852      	ldrb	r2, [r2, #1]
 8002140:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2];  // op_mode
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	3302      	adds	r3, #2
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <golfinho_check_status_timer_callback+0xb8>)
 800214a:	7892      	ldrb	r2, [r2, #2]
 800214c:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_manual[3];// key_t
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	3303      	adds	r3, #3
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <golfinho_check_status_timer_callback+0xbc>)
 8002156:	78d2      	ldrb	r2, [r2, #3]
 8002158:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[4]=digital_data_input_manual[4];// key_break
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	3304      	adds	r3, #4
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <golfinho_check_status_timer_callback+0xbc>)
 8002162:	7912      	ldrb	r2, [r2, #4]
 8002164:	701a      	strb	r2, [r3, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub,&golfinho_check_status_msg, NULL);
 8002166:	2200      	movs	r2, #0
 8002168:	4909      	ldr	r1, [pc, #36]	; (8002190 <golfinho_check_status_timer_callback+0xb4>)
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <golfinho_check_status_timer_callback+0xc0>)
 800216c:	f007 feca 	bl	8009f04 <rcl_publish>
 8002170:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <golfinho_check_status_timer_callback+0xa6>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002178:	f240 21c1 	movw	r1, #705	; 0x2c1
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <golfinho_check_status_timer_callback+0xc4>)
 800217e:	f015 f84d 	bl	801721c <iprintf>
		}
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20003204 	.word	0x20003204
 8002190:	20008290 	.word	0x20008290
 8002194:	2000321c 	.word	0x2000321c
 8002198:	20003208 	.word	0x20003208
 800219c:	2000827c 	.word	0x2000827c
 80021a0:	08018954 	.word	0x08018954

080021a4 <golfinho_motion_info_timer_callback>:

void golfinho_motion_info_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modos de operação
 80021b0:	4b75      	ldr	r3, [pc, #468]	; (8002388 <golfinho_motion_info_timer_callback+0x1e4>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d06a      	beq.n	800228e <golfinho_motion_info_timer_callback+0xea>

		if(digital_data_input_auto[3]) //acelerador
 80021b8:	4b74      	ldr	r3, [pc, #464]	; (800238c <golfinho_motion_info_timer_callback+0x1e8>)
 80021ba:	78db      	ldrb	r3, [r3, #3]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <golfinho_motion_info_timer_callback+0x48>
		   golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_auto[2]*100/4096;
 80021c0:	4b73      	ldr	r3, [pc, #460]	; (8002390 <golfinho_motion_info_timer_callback+0x1ec>)
 80021c2:	889b      	ldrh	r3, [r3, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2364      	movs	r3, #100	; 0x64
 80021c8:	fb03 f302 	mul.w	r3, r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da01      	bge.n	80021d4 <golfinho_motion_info_timer_callback+0x30>
 80021d0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80021d4:	131b      	asrs	r3, r3, #12
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b6e      	ldr	r3, [pc, #440]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f103 0408 	add.w	r4, r3, #8
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe f8f1 	bl	80003c8 <__aeabi_i2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	e005      	b.n	80021f8 <golfinho_motion_info_timer_callback+0x54>
		else
		   golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	3308      	adds	r3, #8
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

		if(digital_data_input_auto[4]) //break
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <golfinho_motion_info_timer_callback+0x1e8>)
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <golfinho_motion_info_timer_callback+0x88>
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_auto[3]*100/4096;
 8002200:	4b63      	ldr	r3, [pc, #396]	; (8002390 <golfinho_motion_info_timer_callback+0x1ec>)
 8002202:	88db      	ldrh	r3, [r3, #6]
 8002204:	461a      	mov	r2, r3
 8002206:	2364      	movs	r3, #100	; 0x64
 8002208:	fb03 f302 	mul.w	r3, r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	da01      	bge.n	8002214 <golfinho_motion_info_timer_callback+0x70>
 8002210:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002214:	131b      	asrs	r3, r3, #12
 8002216:	461a      	mov	r2, r3
 8002218:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f103 040c 	add.w	r4, r3, #12
 8002220:	4610      	mov	r0, r2
 8002222:	f7fe f8d1 	bl	80003c8 <__aeabi_i2f>
 8002226:	4603      	mov	r3, r0
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	e005      	b.n	8002238 <golfinho_motion_info_timer_callback+0x94>
		else
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	330c      	adds	r3, #12
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

		golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 800223a:	891b      	ldrh	r3, [r3, #8]
 800223c:	461a      	mov	r2, r3
 800223e:	2364      	movs	r3, #100	; 0x64
 8002240:	fb03 f302 	mul.w	r3, r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	da01      	bge.n	800224c <golfinho_motion_info_timer_callback+0xa8>
 8002248:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800224c:	131b      	asrs	r3, r3, #12
 800224e:	461a      	mov	r2, r3
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f103 0410 	add.w	r4, r3, #16
 8002258:	4610      	mov	r0, r2
 800225a:	f7fe f8b5 	bl	80003c8 <__aeabi_i2f>
 800225e:	4603      	mov	r3, r0
 8002260:	6023      	str	r3, [r4, #0]
		golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 8002264:	895b      	ldrh	r3, [r3, #10]
 8002266:	461a      	mov	r2, r3
 8002268:	2364      	movs	r3, #100	; 0x64
 800226a:	fb03 f302 	mul.w	r3, r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	da01      	bge.n	8002276 <golfinho_motion_info_timer_callback+0xd2>
 8002272:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002276:	131b      	asrs	r3, r3, #12
 8002278:	461a      	mov	r2, r3
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f103 0414 	add.w	r4, r3, #20
 8002282:	4610      	mov	r0, r2
 8002284:	f7fe f8a0 	bl	80003c8 <__aeabi_i2f>
 8002288:	4603      	mov	r3, r0
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	e069      	b.n	8002362 <golfinho_motion_info_timer_callback+0x1be>
			}else {

				if(digital_data_input_manual[3]) //acelerador
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <golfinho_motion_info_timer_callback+0x1f8>)
 8002290:	78db      	ldrb	r3, [r3, #3]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <golfinho_motion_info_timer_callback+0x11e>
			        golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_manual[2]*100/4096;
 8002296:	4b40      	ldr	r3, [pc, #256]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	fb03 f302 	mul.w	r3, r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da01      	bge.n	80022aa <golfinho_motion_info_timer_callback+0x106>
 80022a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022aa:	131b      	asrs	r3, r3, #12
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f103 0408 	add.w	r4, r3, #8
 80022b6:	4610      	mov	r0, r2
 80022b8:	f7fe f886 	bl	80003c8 <__aeabi_i2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	e005      	b.n	80022ce <golfinho_motion_info_timer_callback+0x12a>
				else
			        golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	3308      	adds	r3, #8
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

			    if(digital_data_input_manual[4]) //freio
 80022ce:	4b33      	ldr	r3, [pc, #204]	; (800239c <golfinho_motion_info_timer_callback+0x1f8>)
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <golfinho_motion_info_timer_callback+0x15e>
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_manual[3]*100/4096;
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 80022d8:	88db      	ldrh	r3, [r3, #6]
 80022da:	461a      	mov	r2, r3
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	fb03 f302 	mul.w	r3, r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da01      	bge.n	80022ea <golfinho_motion_info_timer_callback+0x146>
 80022e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022ea:	131b      	asrs	r3, r3, #12
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f103 040c 	add.w	r4, r3, #12
 80022f6:	4610      	mov	r0, r2
 80022f8:	f7fe f866 	bl	80003c8 <__aeabi_i2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	e005      	b.n	800230e <golfinho_motion_info_timer_callback+0x16a>
			    else
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	330c      	adds	r3, #12
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

				golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 8002310:	891b      	ldrh	r3, [r3, #8]
 8002312:	461a      	mov	r2, r3
 8002314:	2364      	movs	r3, #100	; 0x64
 8002316:	fb03 f302 	mul.w	r3, r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	da01      	bge.n	8002322 <golfinho_motion_info_timer_callback+0x17e>
 800231e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002322:	131b      	asrs	r3, r3, #12
 8002324:	461a      	mov	r2, r3
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f103 0410 	add.w	r4, r3, #16
 800232e:	4610      	mov	r0, r2
 8002330:	f7fe f84a 	bl	80003c8 <__aeabi_i2f>
 8002334:	4603      	mov	r3, r0
 8002336:	6023      	str	r3, [r4, #0]
				golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <golfinho_motion_info_timer_callback+0x1f4>)
 800233a:	895b      	ldrh	r3, [r3, #10]
 800233c:	461a      	mov	r2, r3
 800233e:	2364      	movs	r3, #100	; 0x64
 8002340:	fb03 f302 	mul.w	r3, r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	da01      	bge.n	800234c <golfinho_motion_info_timer_callback+0x1a8>
 8002348:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800234c:	131b      	asrs	r3, r3, #12
 800234e:	461a      	mov	r2, r3
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f103 0414 	add.w	r4, r3, #20
 8002358:	4610      	mov	r0, r2
 800235a:	f7fe f835 	bl	80003c8 <__aeabi_i2f>
 800235e:	4603      	mov	r3, r0
 8002360:	6023      	str	r3, [r4, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_motion_info_pub,&golfinho_motion_info_gpio_output_msg, NULL);
 8002362:	2200      	movs	r2, #0
 8002364:	490b      	ldr	r1, [pc, #44]	; (8002394 <golfinho_motion_info_timer_callback+0x1f0>)
 8002366:	480e      	ldr	r0, [pc, #56]	; (80023a0 <golfinho_motion_info_timer_callback+0x1fc>)
 8002368:	f007 fdcc 	bl	8009f04 <rcl_publish>
 800236c:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <golfinho_motion_info_timer_callback+0x1da>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002374:	f240 21e9 	movw	r1, #745	; 0x2e9
 8002378:	480a      	ldr	r0, [pc, #40]	; (80023a4 <golfinho_motion_info_timer_callback+0x200>)
 800237a:	f014 ff4f 	bl	801721c <iprintf>
		}
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop
 8002388:	20003204 	.word	0x20003204
 800238c:	2000321c 	.word	0x2000321c
 8002390:	20003224 	.word	0x20003224
 8002394:	20008218 	.word	0x20008218
 8002398:	20003210 	.word	0x20003210
 800239c:	20003208 	.word	0x20003208
 80023a0:	200080cc 	.word	0x200080cc
 80023a4:	08018954 	.word	0x08018954

080023a8 <receive_commands_from_ros_callback>:

void receive_commands_from_ros_callback(const void * msgin){
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]


	const std_msgs__msg__UInt16MultiArray *receive_command_ros_msg;

	if (msgin != NULL){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02a      	beq.n	800240c <receive_commands_from_ros_callback+0x64>
		receive_command_ros_msg = (const std_msgs__msg__UInt16MultiArray *)msgin;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

		digital_data_input_auto[1]= receive_command_ros_msg->data.data[0]; // key_switch
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <receive_commands_from_ros_callback+0x70>)
 80023c4:	705a      	strb	r2, [r3, #1]
		digital_data_input_auto[2]= receive_command_ros_msg->data.data[1]; // operation_modo
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	3302      	adds	r3, #2
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <receive_commands_from_ros_callback+0x70>)
 80023d2:	709a      	strb	r2, [r3, #2]
		flg=digital_data_input_auto[2];
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <receive_commands_from_ros_callback+0x70>)
 80023d6:	789a      	ldrb	r2, [r3, #2]
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <receive_commands_from_ros_callback+0x74>)
 80023da:	701a      	strb	r2, [r3, #0]
		digital_data_input_auto[3]= receive_command_ros_msg->data.data[2];  // throttle_ switch
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	3304      	adds	r3, #4
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <receive_commands_from_ros_callback+0x70>)
 80023e8:	70da      	strb	r2, [r3, #3]
		digital_data_input_auto[4]= receive_command_ros_msg->data.data[3];  // break_ switch
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	3306      	adds	r3, #6
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <receive_commands_from_ros_callback+0x70>)
 80023f6:	711a      	strb	r2, [r3, #4]

		analog_data_input_auto[2]= receive_command_ros_msg->data.data[4]; // throttle analog
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	891a      	ldrh	r2, [r3, #8]
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <receive_commands_from_ros_callback+0x78>)
 8002400:	809a      	strh	r2, [r3, #4]
		analog_data_input_auto[3]= receive_command_ros_msg->data.data[5]; // break analog
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	895a      	ldrh	r2, [r3, #10]
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <receive_commands_from_ros_callback+0x78>)
 800240a:	80da      	strh	r2, [r3, #6]

	}
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000321c 	.word	0x2000321c
 800241c:	20003204 	.word	0x20003204
 8002420:	20003224 	.word	0x20003224

08002424 <golfinho_imu_timer_callback>:

void golfinho_imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 8002430:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=10;
 8002436:	230a      	movs	r3, #10
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02a      	beq.n	8002496 <golfinho_imu_timer_callback+0x72>

		sprintf(imu_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <golfinho_imu_timer_callback+0x80>)
 800244a:	f014 ffb9 	bl	80173c0 <siprintf>
		imu_.header.frame_id.size = strlen(imu_.header.frame_id.data);
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd fef6 	bl	8000244 <strlen>
 8002458:	4603      	mov	r3, r0
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 800245c:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	4619      	mov	r1, r3
 8002464:	2001      	movs	r0, #1
 8002466:	f000 fb2f 	bl	8002ac8 <clock_gettime>
		imu_.header.stamp.sec = ts.tv_sec;
 800246a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 8002470:	601a      	str	r2, [r3, #0]
		imu_.header.stamp.nanosec = ts.tv_nsec;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	461a      	mov	r2, r3
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 8002478:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_imu_pub,&imu_, NULL);
 800247a:	2200      	movs	r2, #0
 800247c:	4908      	ldr	r1, [pc, #32]	; (80024a0 <golfinho_imu_timer_callback+0x7c>)
 800247e:	480a      	ldr	r0, [pc, #40]	; (80024a8 <golfinho_imu_timer_callback+0x84>)
 8002480:	f007 fd40 	bl	8009f04 <rcl_publish>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <golfinho_imu_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 800248c:	f240 3117 	movw	r1, #791	; 0x317
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <golfinho_imu_timer_callback+0x88>)
 8002492:	f014 fec3 	bl	801721c <iprintf>
		}
}
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	; 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200080d8 	.word	0x200080d8
 80024a4:	0801897c 	.word	0x0801897c
 80024a8:	200068c8 	.word	0x200068c8
 80024ac:	08018954 	.word	0x08018954

080024b0 <golfinho_gps_timer_callback>:



void golfinho_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 80024bc:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=11;
 80024c2:	230b      	movs	r3, #11
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02a      	beq.n	8002522 <golfinho_gps_timer_callback+0x72>

		sprintf(gps_.header.frame_id.data, "%d_%d", seq_no, device_id);
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 80024ce:	6898      	ldr	r0, [r3, #8]
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <golfinho_gps_timer_callback+0x80>)
 80024d6:	f014 ff73 	bl	80173c0 <siprintf>
		gps_.header.frame_id.size = strlen(gps_.header.frame_id.data);
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd feb0 	bl	8000244 <strlen>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 80024e8:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4619      	mov	r1, r3
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fae9 	bl	8002ac8 <clock_gettime>
		gps_.header.stamp.sec = ts.tv_sec;
 80024f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 80024fc:	601a      	str	r2, [r3, #0]
		gps_.header.stamp.nanosec = ts.tv_nsec;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	461a      	mov	r2, r3
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 8002504:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_gps_pub,&gps_, NULL);
 8002506:	2200      	movs	r2, #0
 8002508:	4908      	ldr	r1, [pc, #32]	; (800252c <golfinho_gps_timer_callback+0x7c>)
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <golfinho_gps_timer_callback+0x84>)
 800250c:	f007 fcfa 	bl	8009f04 <rcl_publish>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <golfinho_gps_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002518:	f44f 714d 	mov.w	r1, #820	; 0x334
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <golfinho_gps_timer_callback+0x88>)
 800251e:	f014 fe7d 	bl	801721c <iprintf>
		}
   }
}
 8002522:	bf00      	nop
 8002524:	3730      	adds	r7, #48	; 0x30
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200068d8 	.word	0x200068d8
 8002530:	0801897c 	.word	0x0801897c
 8002534:	200082cc 	.word	0x200082cc
 8002538:	08018954 	.word	0x08018954

0800253c <golfinho_joint_steering_timer_callback>:


void golfinho_joint_steering_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=012;
 8002548:	230a      	movs	r3, #10
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=01;
 800254c:	2301      	movs	r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
	double data0,data1,data2;

	(void) last_call_time;

	if (timer != NULL) {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02a      	beq.n	80025ac <golfinho_joint_steering_timer_callback+0x70>

		sprintf(joint_steering.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 8002558:	6898      	ldr	r0, [r3, #8]
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255e:	4916      	ldr	r1, [pc, #88]	; (80025b8 <golfinho_joint_steering_timer_callback+0x7c>)
 8002560:	f014 ff2e 	bl	80173c0 <siprintf>
		joint_steering.header.frame_id.size = strlen(joint_steering.header.frame_id.data);
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd fe6b 	bl	8000244 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 8002572:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	2001      	movs	r0, #1
 800257c:	f000 faa4 	bl	8002ac8 <clock_gettime>
		joint_steering.header.stamp.sec = ts.tv_sec;
 8002580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 8002586:	601a      	str	r2, [r3, #0]
		joint_steering.header.stamp.nanosec = ts.tv_nsec;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	461a      	mov	r2, r3
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 800258e:	605a      	str	r2, [r3, #4]

	//	joint_steering.position.data=&data0;
	//	joint_steering.velocity.data=&data1;
	//	joint_steering.effort.data=&data2;

		rcl_ret_t ret = rcl_publish(&ros2_joint_steering_pub,&joint_steering, NULL);
 8002590:	2200      	movs	r2, #0
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <golfinho_joint_steering_timer_callback+0x78>)
 8002594:	4809      	ldr	r0, [pc, #36]	; (80025bc <golfinho_joint_steering_timer_callback+0x80>)
 8002596:	f007 fcb5 	bl	8009f04 <rcl_publish>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <golfinho_joint_steering_timer_callback+0x70>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 80025a2:	f240 3155 	movw	r1, #853	; 0x355
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <golfinho_joint_steering_timer_callback+0x84>)
 80025a8:	f014 fe38 	bl	801721c <iprintf>
		}
	}

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20008238 	.word	0x20008238
 80025b8:	0801897c 	.word	0x0801897c
 80025bc:	20008234 	.word	0x20008234
 80025c0:	08018954 	.word	0x08018954

080025c4 <ADC_select_channel_break>:




void ADC_select_channel_break (void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 80025d4:	2308      	movs	r3, #8
 80025d6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025d8:	2301      	movs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <ADC_select_channel_break+0x38>)
 80025e6:	f001 f871 	bl	80036cc <HAL_ADC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <ADC_select_channel_break+0x30>
	  {
	    Error_Handler();
 80025f0:	f000 f978 	bl	80028e4 <Error_Handler>
	  }
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000685c 	.word	0x2000685c

08002600 <ADC_select_channel_Throttle>:

void ADC_select_channel_Throttle (void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_9;
 8002610:	2309      	movs	r3, #9
 8002612:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002614:	2301      	movs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <ADC_select_channel_Throttle+0x34>)
 800261e:	f001 f855 	bl	80036cc <HAL_ADC_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <ADC_select_channel_Throttle+0x2c>
	  {
	    Error_Handler();
 8002628:	f000 f95c 	bl	80028e4 <Error_Handler>
	  }
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000685c 	.word	0x2000685c

08002638 <ADC_select_channel_batery_car>:

void ADC_select_channel_batery_car(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8002648:	2306      	movs	r3, #6
 800264a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800264c:	2301      	movs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <ADC_select_channel_batery_car+0x34>)
 8002656:	f001 f839 	bl	80036cc <HAL_ADC_ConfigChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <ADC_select_channel_batery_car+0x2c>
	  {
	    Error_Handler();
 8002660:	f000 f940 	bl	80028e4 <Error_Handler>
	  }
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000685c 	.word	0x2000685c

08002670 <ADC_select_channel_system_batery>:

void ADC_select_channel_system_batery(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8002680:	2307      	movs	r3, #7
 8002682:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002684:	2301      	movs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <ADC_select_channel_system_batery+0x34>)
 800268e:	f001 f81d 	bl	80036cc <HAL_ADC_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <ADC_select_channel_system_batery+0x2c>
	  {
	    Error_Handler();
 8002698:	f000 f924 	bl	80028e4 <Error_Handler>
	  }
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000685c 	.word	0x2000685c

080026a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <MX_GPIO_Init+0x11c>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <MX_GPIO_Init+0x11c>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <MX_GPIO_Init+0x11c>)
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <MX_GPIO_Init+0x11c>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800271c:	2200      	movs	r2, #0
 800271e:	213f      	movs	r1, #63	; 0x3f
 8002720:	4829      	ldr	r0, [pc, #164]	; (80027c8 <MX_GPIO_Init+0x120>)
 8002722:	f002 fc7e 	bl	8005022 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f640 4104 	movw	r1, #3076	; 0xc04
 800272c:	4827      	ldr	r0, [pc, #156]	; (80027cc <MX_GPIO_Init+0x124>)
 800272e:	f002 fc78 	bl	8005022 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002732:	233f      	movs	r3, #63	; 0x3f
 8002734:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2302      	movs	r3, #2
 8002740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4619      	mov	r1, r3
 8002748:	481f      	ldr	r0, [pc, #124]	; (80027c8 <MX_GPIO_Init+0x120>)
 800274a:	f002 fabf 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800274e:	f640 4304 	movw	r3, #3076	; 0xc04
 8002752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	2301      	movs	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2302      	movs	r3, #2
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4619      	mov	r1, r3
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <MX_GPIO_Init+0x124>)
 8002768:	f002 fab0 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800276c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4619      	mov	r1, r3
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <MX_GPIO_Init+0x124>)
 8002782:	f002 faa3 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002786:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800278a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4619      	mov	r1, r3
 800279a:	480b      	ldr	r0, [pc, #44]	; (80027c8 <MX_GPIO_Init+0x120>)
 800279c:	f002 fa96 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_GPIO_Init+0x128>)
 80027b6:	f002 fa89 	bl	8004ccc <HAL_GPIO_Init>

}
 80027ba:	bf00      	nop
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40010c00 	.word	0x40010c00
 80027d0:	40010800 	.word	0x40010800

080027d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	 //char msg[10];
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 80027d8:	f000 fc4c 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027dc:	f000 f813 	bl	8002806 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e0:	f7ff ff62 	bl	80026a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80027e4:	f7fe fd56 	bl	8001294 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027e8:	f000 fb70 	bl	8002ecc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80027ec:	f7fe f982 	bl	8000af4 <MX_ADC1_Init>
  MX_DAC_Init();
 80027f0:	f7fe fce0 	bl	80011b4 <MX_DAC_Init>
  MX_CAN_Init();
 80027f4:	f7fe fa02 	bl	8000bfc <MX_CAN_Init>

// HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80027f8:	f004 fb10 	bl	8006e1c <osKernelInitialize>
  MX_FREERTOS_Init();
 80027fc:	f7fe fe1e 	bl	800143c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002800:	f004 fb3e 	bl	8006e80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8002804:	e7fe      	b.n	8002804 <main+0x30>

08002806 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b096      	sub	sp, #88	; 0x58
 800280a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800280c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002810:	2228      	movs	r2, #40	; 0x28
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f014 fc45 	bl	80170a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800283a:	2301      	movs	r3, #1
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800283e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002844:	2300      	movs	r3, #0
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002848:	2301      	movs	r3, #1
 800284a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284c:	2302      	movs	r3, #2
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002854:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002856:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800285a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fbf7 	bl	8005054 <HAL_RCC_OscConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800286c:	f000 f83a 	bl	80028e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002870:	230f      	movs	r3, #15
 8002872:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800287c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fe61 	bl	8005554 <HAL_RCC_ClockConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002898:	f000 f824 	bl	80028e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800289c:	2302      	movs	r3, #2
 800289e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 f81d 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80028b4:	f000 f816 	bl	80028e4 <Error_Handler>
  }
}
 80028b8:	bf00      	nop
 80028ba:	3758      	adds	r7, #88	; 0x58
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028d2:	f000 fbe5 	bl	80030a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	e7fe      	b.n	80028ec <Error_Handler+0x8>
	...

080028f0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <microros_allocate+0x3c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <microros_allocate+0x3c>)
 8002908:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <microros_allocate+0x40>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <microros_allocate+0x40>)
 8002918:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f9f8 	bl	8000d10 <pvPortMallocMicroROS>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20003230 	.word	0x20003230
 8002930:	20003234 	.word	0x20003234

08002934 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe fb01 	bl	8000f4c <getBlockSize>
 800294a:	4603      	mov	r3, r0
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <microros_deallocate+0x34>)
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <microros_deallocate+0x34>)
 8002956:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe fa9d 	bl	8000e98 <vPortFreeMicroROS>
  }
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20003234 	.word	0x20003234

0800296c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <microros_reallocate+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	461a      	mov	r2, r3
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <microros_reallocate+0x64>)
 8002986:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <microros_reallocate+0x68>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	461a      	mov	r2, r3
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <microros_reallocate+0x68>)
 8002996:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800299e:	68b8      	ldr	r0, [r7, #8]
 80029a0:	f7fe f9b6 	bl	8000d10 <pvPortMallocMicroROS>
 80029a4:	4603      	mov	r3, r0
 80029a6:	e00e      	b.n	80029c6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7fe facf 	bl	8000f4c <getBlockSize>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <microros_reallocate+0x68>)
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <microros_reallocate+0x68>)
 80029ba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fe fae0 	bl	8000f84 <pvPortReallocMicroROS>
 80029c4:	4603      	mov	r3, r0
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003230 	.word	0x20003230
 80029d4:	20003234 	.word	0x20003234

080029d8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <microros_zero_allocate+0x48>)
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <microros_zero_allocate+0x48>)
 80029f6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <microros_zero_allocate+0x4c>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <microros_zero_allocate+0x4c>)
 8002a0a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7fe faf2 	bl	8000ff8 <pvPortCallocMicroROS>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20003230 	.word	0x20003230
 8002a24:	20003234 	.word	0x20003234

08002a28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3c:	a320      	add	r3, pc, #128	; (adr r3, 8002ac0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe8b 	bl	800075c <__aeabi_ldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a54:	a31a      	add	r3, pc, #104	; (adr r3, 8002ac0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fe7f 	bl	800075c <__aeabi_ldivmod>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da1f      	bge.n	8002aaa <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <UTILS_NanosecondsToTimespec+0x90>)
 8002a70:	fb82 1203 	smull	r1, r2, r2, r3
 8002a74:	1712      	asrs	r2, r2, #28
 8002a76:	17db      	asrs	r3, r3, #31
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	461a      	mov	r2, r3
 8002a88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a8c:	1a84      	subs	r4, r0, r2
 8002a8e:	eb61 0503 	sbc.w	r5, r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4907      	ldr	r1, [pc, #28]	; (8002abc <UTILS_NanosecondsToTimespec+0x94>)
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
    }
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	44b82fa1 	.word	0x44b82fa1
 8002abc:	3b9aca00 	.word	0x3b9aca00
 8002ac0:	3b9aca00 	.word	0x3b9aca00
 8002ac4:	00000000 	.word	0x00000000

08002ac8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	4618      	mov	r0, r3
 8002af0:	f005 fe78 	bl	80087e4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	0003      	movs	r3, r0
 8002b06:	2200      	movs	r2, #0
 8002b08:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b18:	1884      	adds	r4, r0, r2
 8002b1a:	eb41 0503 	adc.w	r5, r1, r3
 8002b1e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002b22:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	1b12      	subs	r2, r2, r4
 8002b40:	eb63 0305 	sbc.w	r3, r3, r5
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0259      	lsls	r1, r3, #9
 8002b4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b52:	0250      	lsls	r0, r2, #9
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1912      	adds	r2, r2, r4
 8002b5a:	eb45 0303 	adc.w	r3, r5, r3
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	0199      	lsls	r1, r3, #6
 8002b68:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002b6c:	0190      	lsls	r0, r2, #6
 8002b6e:	1a80      	subs	r0, r0, r2
 8002b70:	eb61 0103 	sbc.w	r1, r1, r3
 8002b74:	eb10 0804 	adds.w	r8, r0, r4
 8002b78:	eb41 0905 	adc.w	r9, r1, r5
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4640      	mov	r0, r8
 8002b80:	4649      	mov	r1, r9
 8002b82:	f7ff ff51 	bl	8002a28 <UTILS_NanosecondsToTimespec>

    return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_MspInit+0x68>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_MspInit+0x68>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6193      	str	r3, [r2, #24]
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_MspInit+0x68>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_MspInit+0x68>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_MspInit+0x68>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_MspInit+0x68>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	210f      	movs	r1, #15
 8002bce:	f06f 0001 	mvn.w	r0, #1
 8002bd2:	f001 faea 	bl	80041aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_MspInit+0x6c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_MspInit+0x6c>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000

08002c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	2019      	movs	r0, #25
 8002c1a:	f001 fac6 	bl	80041aa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c1e:	2019      	movs	r0, #25
 8002c20:	f001 fadf 	bl	80041e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_InitTick+0x9c>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_InitTick+0x9c>)
 8002c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c2e:	6193      	str	r3, [r2, #24]
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_InitTick+0x9c>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c3c:	f107 0210 	add.w	r2, r7, #16
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fe00 	bl	800584c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f002 fdea 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8002c50:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_InitTick+0xa0>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_InitTick+0xa8>)
 8002c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c80:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c82:	f002 ffcd 	bl	8005c20 <HAL_TIM_Base_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c8c:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <HAL_InitTick+0xa4>)
 8002c8e:	f003 f81f 	bl	8005cd0 <HAL_TIM_Base_Start_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3730      	adds	r7, #48	; 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	20008338 	.word	0x20008338
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
	...

08002cdc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <DMA1_Channel6_IRQHandler+0x10>)
 8002ce2:	f001 fd89 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20008380 	.word	0x20008380

08002cf0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA1_Channel7_IRQHandler+0x10>)
 8002cf6:	f001 fd7f 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200083c4 	.word	0x200083c4

08002d04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002d0a:	f000 ff6d 	bl	8003be8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000688c 	.word	0x2000688c

08002d18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM1_UP_IRQHandler+0x10>)
 8002d1e:	f003 f837 	bl	8005d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20008338 	.word	0x20008338

08002d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <USART2_IRQHandler+0x10>)
 8002d32:	f003 fb2b 	bl	800638c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20008408 	.word	0x20008408

08002d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
	return 1;
 8002d44:	2301      	movs	r3, #1
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <_kill>:

int _kill(int pid, int sig)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d58:	f014 f8fc 	bl	8016f54 <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2216      	movs	r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
	return -1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_exit>:

void _exit (int status)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffe7 	bl	8002d4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d80:	e7fe      	b.n	8002d80 <_exit+0x12>

08002d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e00a      	b.n	8002daa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d94:	f3af 8000 	nop.w
 8002d98:	4601      	mov	r1, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	60ba      	str	r2, [r7, #8]
 8002da0:	b2ca      	uxtb	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbf0      	blt.n	8002d94 <_read+0x12>
	}

return len;
 8002db2:	687b      	ldr	r3, [r7, #4]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e009      	b.n	8002de2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	60ba      	str	r2, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbf1      	blt.n	8002dce <_write+0x12>
	}
	return len;
 8002dea:	687b      	ldr	r3, [r7, #4]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <_sbrk+0x5c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x16>
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <_sbrk+0x5c>)
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <_sbrk+0x60>)
 8002e08:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_sbrk+0x5c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <_sbrk+0x5c>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	441a      	add	r2, r3
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <_sbrk+0x64>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	490f      	ldr	r1, [pc, #60]	; (8002e5c <_sbrk+0x68>)
 8002e20:	440b      	add	r3, r1
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d908      	bls.n	8002e38 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002e26:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002e28:	f014 f894 	bl	8016f54 <__errno>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	220c      	movs	r2, #12
 8002e30:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e36:	e006      	b.n	8002e46 <_sbrk+0x52>

    }

    heap_end += incr;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <_sbrk+0x5c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <_sbrk+0x5c>)
 8002e42:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8002e44:	68fb      	ldr	r3, [r7, #12]

}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000323c 	.word	0x2000323c
 8002e54:	2000d640 	.word	0x2000d640
 8002e58:	00000400 	.word	0x00000400
 8002e5c:	20010000 	.word	0x20010000

08002e60 <_close>:

int _close(int file)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	return -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e86:	605a      	str	r2, [r3, #4]
	return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <_isatty>:

int _isatty(int file)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <MX_USART2_UART_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_USART2_UART_Init+0x4c>)
 8002f04:	f003 f8fc 	bl	8006100 <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f0e:	f7ff fce9 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20008408 	.word	0x20008408
 8002f1c:	40004400 	.word	0x40004400

08002f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_UART_MspInit+0x138>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	f040 8086 	bne.w	800304e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a45      	ldr	r2, [pc, #276]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4a3f      	ldr	r2, [pc, #252]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6193      	str	r3, [r2, #24]
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_UART_MspInit+0x13c>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f72:	2304      	movs	r3, #4
 8002f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	4836      	ldr	r0, [pc, #216]	; (8003060 <HAL_UART_MspInit+0x140>)
 8002f86:	f001 fea1 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	f107 0310 	add.w	r3, r7, #16
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4830      	ldr	r0, [pc, #192]	; (8003060 <HAL_UART_MspInit+0x140>)
 8002f9e:	f001 fe95 	bl	8004ccc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <HAL_UART_MspInit+0x148>)
 8002fa6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fae:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fc8:	2220      	movs	r2, #32
 8002fca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002fd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fd4:	4823      	ldr	r0, [pc, #140]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fd6:	f001 f9f7 	bl	80043c8 <HAL_DMA_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002fe0:	f7ff fc80 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_UART_MspInit+0x144>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_UART_MspInit+0x14c>)
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_UART_MspInit+0x150>)
 8002ff4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_UART_MspInit+0x14c>)
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_UART_MspInit+0x14c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_UART_MspInit+0x14c>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_UART_MspInit+0x14c>)
 800301c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003020:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003024:	f001 f9d0 	bl	80043c8 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800302e:	f7ff fc59 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_UART_MspInit+0x14c>)
 8003036:	635a      	str	r2, [r3, #52]	; 0x34
 8003038:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_UART_MspInit+0x14c>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2105      	movs	r1, #5
 8003042:	2026      	movs	r0, #38	; 0x26
 8003044:	f001 f8b1 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003048:	2026      	movs	r0, #38	; 0x26
 800304a:	f001 f8ca 	bl	80041e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800304e:	bf00      	nop
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40004400 	.word	0x40004400
 800305c:	40021000 	.word	0x40021000
 8003060:	40010800 	.word	0x40010800
 8003064:	20008380 	.word	0x20008380
 8003068:	4002006c 	.word	0x4002006c
 800306c:	200083c4 	.word	0x200083c4
 8003070:	40020080 	.word	0x40020080

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_Init+0x28>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a07      	ldr	r2, [pc, #28]	; (800309c <HAL_Init+0x28>)
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003084:	2003      	movs	r0, #3
 8003086:	f001 f885 	bl	8004194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308a:	200f      	movs	r0, #15
 800308c:	f7ff fdba 	bl	8002c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003090:	f7ff fd80 	bl	8002b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_IncTick+0x1c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_IncTick+0x20>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	4a03      	ldr	r2, [pc, #12]	; (80030c0 <HAL_IncTick+0x20>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	2000844c 	.word	0x2000844c

080030c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <HAL_GetTick+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	2000844c 	.word	0x2000844c

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffe0 	bl	80030c4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0ce      	b.n	80032e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fcf8 	bl	8000b54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fc03 	bl	8003970 <ADC_ConversionStop_Disable>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 80a9 	bne.w	80032ce <HAL_ADC_Init+0x1ae>
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80a5 	bne.w	80032ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4951      	ldr	r1, [pc, #324]	; (80032e8 <HAL_ADC_Init+0x1c8>)
 80031a2:	428b      	cmp	r3, r1
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_Init+0x9c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_Init+0x96>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	e004      	b.n	80031c0 <HAL_ADC_Init+0xa0>
 80031b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031ba:	e001      	b.n	80031c0 <HAL_ADC_Init+0xa0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7b1b      	ldrb	r3, [r3, #12]
 80031c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d003      	beq.n	80031e2 <HAL_ADC_Init+0xc2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_Init+0xc8>
 80031e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e6:	e000      	b.n	80031ea <HAL_ADC_Init+0xca>
 80031e8:	2300      	movs	r3, #0
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7d1b      	ldrb	r3, [r3, #20]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d119      	bne.n	800322c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7b1b      	ldrb	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	3b01      	subs	r3, #1
 8003206:	035a      	lsls	r2, r3, #13
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e00b      	b.n	800322c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <HAL_ADC_Init+0x1cc>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	430b      	orrs	r3, r1
 8003252:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d003      	beq.n	8003266 <HAL_ADC_Init+0x146>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d104      	bne.n	8003270 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	3b01      	subs	r3, #1
 800326c:	051b      	lsls	r3, r3, #20
 800326e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	430a      	orrs	r2, r1
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_ADC_Init+0x1d0>)
 800328c:	4013      	ands	r3, r2
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d10b      	bne.n	80032ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032aa:	e018      	b.n	80032de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	f023 0312 	bic.w	r3, r3, #18
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032cc:	e007      	b.n	80032de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40013c00 	.word	0x40013c00
 80032ec:	ffe1f7fd 	.word	0xffe1f7fd
 80032f0:	ff1f0efe 	.word	0xff1f0efe

080032f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADC_Start+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e098      	b.n	8003440 <HAL_ADC_Start+0x14c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fad0 	bl	80038bc <ADC_Enable>
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8087 	bne.w	8003436 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_ADC_Start+0x154>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d105      	bne.n	8003352 <HAL_ADC_Start+0x5e>
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_ADC_Start+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d115      	bne.n	800337e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d026      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800337c:	e01d      	b.n	80033ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_ADC_Start+0x158>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_ADC_Start+0xaa>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_ADC_Start+0x154>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <HAL_ADC_Start+0xc6>
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_ADC_Start+0x158>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f023 0206 	bic.w	r2, r3, #6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033d2:	e002      	b.n	80033da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0202 	mvn.w	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033fa:	d113      	bne.n	8003424 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_ADC_Start+0x154>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d105      	bne.n	8003412 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_ADC_Start+0x158>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	e00c      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e003      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012800 	.word	0x40012800
 800344c:	40012400 	.word	0x40012400

08003450 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Stop+0x1a>
 8003466:	2302      	movs	r3, #2
 8003468:	e01a      	b.n	80034a0 <HAL_ADC_Stop+0x50>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa7c 	bl	8003970 <ADC_ConversionStop_Disable>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80034be:	f7ff fe01 	bl	80030c4 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0d3      	b.n	8003692 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d131      	bne.n	800355c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	d12a      	bne.n	800355c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003506:	e021      	b.n	800354c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	d01d      	beq.n	800354c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_ADC_PollForConversion+0x7e>
 8003516:	f7ff fdd5 	bl	80030c4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d212      	bcs.n	800354c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0a2      	b.n	8003692 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0d6      	beq.n	8003508 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800355a:	e070      	b.n	800363e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_ADC_PollForConversion+0x1f4>)
 800355e:	681c      	ldr	r4, [r3, #0]
 8003560:	2002      	movs	r0, #2
 8003562:	f002 fa77 	bl	8005a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8003566:	4603      	mov	r3, r0
 8003568:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	4b4b      	ldr	r3, [pc, #300]	; (80036a0 <HAL_ADC_PollForConversion+0x1f8>)
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_ADC_PollForConversion+0x104>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_ADC_PollForConversion+0x1fc>)
 8003582:	400b      	ands	r3, r1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <HAL_ADC_PollForConversion+0x104>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_ADC_PollForConversion+0x200>)
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <HAL_ADC_PollForConversion+0x100>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_ADC_PollForConversion+0x204>)
 800359e:	400b      	ands	r3, r1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_PollForConversion+0x100>
 80035a4:	2314      	movs	r3, #20
 80035a6:	e020      	b.n	80035ea <HAL_ADC_PollForConversion+0x142>
 80035a8:	2329      	movs	r3, #41	; 0x29
 80035aa:	e01e      	b.n	80035ea <HAL_ADC_PollForConversion+0x142>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_ADC_PollForConversion+0x200>)
 80035b4:	400b      	ands	r3, r1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x120>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_ADC_PollForConversion+0x204>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <HAL_ADC_PollForConversion+0x13c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6919      	ldr	r1, [r3, #16]
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_ADC_PollForConversion+0x208>)
 80035d0:	400b      	ands	r3, r1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x140>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68d9      	ldr	r1, [r3, #12]
 80035dc:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <HAL_ADC_PollForConversion+0x208>)
 80035de:	400b      	ands	r3, r1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x140>
 80035e4:	2354      	movs	r3, #84	; 0x54
 80035e6:	e000      	b.n	80035ea <HAL_ADC_PollForConversion+0x142>
 80035e8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035f0:	e021      	b.n	8003636 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f8:	d01a      	beq.n	8003630 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_ADC_PollForConversion+0x168>
 8003600:	f7ff fd60 	bl	80030c4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d20f      	bcs.n	8003630 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d90b      	bls.n	8003630 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e030      	b.n	8003692 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	d8d9      	bhi.n	80035f2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f06f 0212 	mvn.w	r2, #18
 8003646:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800365e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003662:	d115      	bne.n	8003690 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	bf00      	nop
 800369c:	20000004 	.word	0x20000004
 80036a0:	24924924 	.word	0x24924924
 80036a4:	00924924 	.word	0x00924924
 80036a8:	12492492 	.word	0x12492492
 80036ac:	00492492 	.word	0x00492492
 80036b0:	00249249 	.word	0x00249249

080036b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x20>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0dc      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x1da>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d81c      	bhi.n	8003736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b05      	subs	r3, #5
 800370e:	221f      	movs	r2, #31
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	4019      	ands	r1, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3b05      	subs	r3, #5
 8003728:	fa00 f203 	lsl.w	r2, r0, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
 8003734:	e03c      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d81c      	bhi.n	8003778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	3b23      	subs	r3, #35	; 0x23
 8003750:	221f      	movs	r2, #31
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	4019      	ands	r1, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	3b23      	subs	r3, #35	; 0x23
 800376a:	fa00 f203 	lsl.w	r2, r0, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
 8003776:	e01b      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	3b41      	subs	r3, #65	; 0x41
 800378a:	221f      	movs	r2, #31
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	4019      	ands	r1, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	3b41      	subs	r3, #65	; 0x41
 80037a4:	fa00 f203 	lsl.w	r2, r0, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b09      	cmp	r3, #9
 80037b6:	d91c      	bls.n	80037f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68d9      	ldr	r1, [r3, #12]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	3b1e      	subs	r3, #30
 80037ca:	2207      	movs	r2, #7
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	4019      	ands	r1, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6898      	ldr	r0, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	3b1e      	subs	r3, #30
 80037e4:	fa00 f203 	lsl.w	r2, r0, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	e019      	b.n	8003826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6919      	ldr	r1, [r3, #16]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	2207      	movs	r2, #7
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	4019      	ands	r1, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6898      	ldr	r0, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	fa00 f203 	lsl.w	r2, r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b10      	cmp	r3, #16
 800382c:	d003      	beq.n	8003836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003832:	2b11      	cmp	r3, #17
 8003834:	d132      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d125      	bne.n	800388c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d126      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800385c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b10      	cmp	r3, #16
 8003864:	d11a      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	0c9a      	lsrs	r2, r3, #18
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800387c:	e002      	b.n	8003884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_ConfigChannel+0x1b2>
 800388a:	e007      	b.n	800389c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40012400 	.word	0x40012400
 80038b4:	20000004 	.word	0x20000004
 80038b8:	431bde83 	.word	0x431bde83

080038bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d040      	beq.n	800395c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <ADC_Enable+0xac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <ADC_Enable+0xb0>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	0c9b      	lsrs	r3, r3, #18
 80038f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038f8:	e002      	b.n	8003900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f9      	bne.n	80038fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003906:	f7ff fbdd 	bl	80030c4 <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800390c:	e01f      	b.n	800394e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800390e:	f7ff fbd9 	bl	80030c4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d918      	bls.n	800394e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d011      	beq.n	800394e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e007      	b.n	800395e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d1d8      	bne.n	800390e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000004 	.word	0x20000004
 800396c:	431bde83 	.word	0x431bde83

08003970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d12e      	bne.n	80039e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800399a:	f7ff fb93 	bl	80030c4 <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039a0:	e01b      	b.n	80039da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039a2:	f7ff fb8f 	bl	80030c4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d914      	bls.n	80039da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10d      	bne.n	80039da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f043 0210 	orr.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e007      	b.n	80039ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d0dc      	beq.n	80039a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0ed      	b.n	8003be0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fd f929 	bl	8000c68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a26:	f7ff fb4d 	bl	80030c4 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a2c:	e012      	b.n	8003a54 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a2e:	f7ff fb49 	bl	80030c4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b0a      	cmp	r3, #10
 8003a3a:	d90b      	bls.n	8003a54 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0c5      	b.n	8003be0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0e5      	beq.n	8003a2e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0202 	bic.w	r2, r2, #2
 8003a70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a72:	f7ff fb27 	bl	80030c4 <HAL_GetTick>
 8003a76:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a78:	e012      	b.n	8003aa0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a7a:	f7ff fb23 	bl	80030c4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b0a      	cmp	r3, #10
 8003a86:	d90b      	bls.n	8003aa0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2205      	movs	r2, #5
 8003a98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e09f      	b.n	8003be0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e5      	bne.n	8003a7a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e1b      	ldrb	r3, [r3, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d108      	bne.n	8003ac8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e5b      	ldrb	r3, [r3, #25]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d108      	bne.n	8003af2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e007      	b.n	8003b02 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7e9b      	ldrb	r3, [r3, #26]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d108      	bne.n	8003b1c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0220 	orr.w	r2, r2, #32
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e007      	b.n	8003b2c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0220 	bic.w	r2, r2, #32
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7edb      	ldrb	r3, [r3, #27]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0210 	bic.w	r2, r2, #16
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e007      	b.n	8003b56 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7f1b      	ldrb	r3, [r3, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0208 	bic.w	r2, r2, #8
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7f5b      	ldrb	r3, [r3, #29]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0204 	orr.w	r2, r2, #4
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e007      	b.n	8003baa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0204 	bic.w	r2, r2, #4
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	ea42 0103 	orr.w	r1, r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d07c      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f983 	bl	8003f56 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c50:	e016      	b.n	8003c80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e00c      	b.n	8003c80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	e002      	b.n	8003c80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f986 	bl	8003f8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d024      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f962 	bl	8003f68 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ca4:	e016      	b.n	8003cd4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb8:	e00c      	b.n	8003cd4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e002      	b.n	8003cd4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f965 	bl	8003f9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d024      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ce6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f941 	bl	8003f7a <HAL_CAN_TxMailbox2CompleteCallback>
 8003cf8:	e016      	b.n	8003d28 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	e00c      	b.n	8003d28 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d20:	e002      	b.n	8003d28 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f944 	bl	8003fb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2208      	movs	r2, #8
 8003d66:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f933 	bl	8003fd4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f91b 	bl	8003fc2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f913 	bl	8003ff8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8fb 	bl	8003fe6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d006      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8fc 	bl	800400a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8f4 	bl	800401c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d07b      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d072      	beq.n	8003f2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f043 0302 	orr.w	r3, r3, #2
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d043      	beq.n	8003f2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03e      	beq.n	8003f2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d02b      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x32a>
 8003eba:	2b60      	cmp	r3, #96	; 0x60
 8003ebc:	d82e      	bhi.n	8003f1c <HAL_CAN_IRQHandler+0x334>
 8003ebe:	2b50      	cmp	r3, #80	; 0x50
 8003ec0:	d022      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x320>
 8003ec2:	2b50      	cmp	r3, #80	; 0x50
 8003ec4:	d82a      	bhi.n	8003f1c <HAL_CAN_IRQHandler+0x334>
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d019      	beq.n	8003efe <HAL_CAN_IRQHandler+0x316>
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d826      	bhi.n	8003f1c <HAL_CAN_IRQHandler+0x334>
 8003ece:	2b30      	cmp	r3, #48	; 0x30
 8003ed0:	d010      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x30c>
 8003ed2:	2b30      	cmp	r3, #48	; 0x30
 8003ed4:	d822      	bhi.n	8003f1c <HAL_CAN_IRQHandler+0x334>
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d002      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x2f8>
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d005      	beq.n	8003eea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ede:	e01d      	b.n	8003f1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee8:	e019      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f043 0310 	orr.w	r3, r3, #16
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ef2:	e014      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003efc:	e00f      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f06:	e00a      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f10:	e005      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f1a:	e000      	b.n	8003f1e <HAL_CAN_IRQHandler+0x336>
            break;
 8003f1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2204      	movs	r2, #4
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f870 	bl	800402e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3728      	adds	r7, #40	; 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800405c:	4013      	ands	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800406c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004072:	4a04      	ldr	r2, [pc, #16]	; (8004084 <__NVIC_SetPriorityGrouping+0x44>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	60d3      	str	r3, [r2, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <__NVIC_GetPriorityGrouping+0x18>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 0307 	and.w	r3, r3, #7
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0b      	blt.n	80040ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <__NVIC_EnableIRQ+0x34>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff4f 	bl	8004040 <__NVIC_SetPriorityGrouping>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041bc:	f7ff ff64 	bl	8004088 <__NVIC_GetPriorityGrouping>
 80041c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff ffb2 	bl	8004130 <NVIC_EncodePriority>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ff81 	bl	80040dc <__NVIC_SetPriority>
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff57 	bl	80040a4 <__NVIC_EnableIRQ>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e014      	b.n	800423a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fc fffb 	bl	800121c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	795b      	ldrb	r3, [r3, #5]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_DAC_Start+0x16>
 8004254:	2302      	movs	r3, #2
 8004256:	e040      	b.n	80042da <HAL_DAC_Start+0x98>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2201      	movs	r2, #1
 8004272:	409a      	lsls	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800428c:	2b3c      	cmp	r3, #60	; 0x3c
 800428e:	d11d      	bne.n	80042cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	e014      	b.n	80042cc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	213c      	movs	r1, #60	; 0x3c
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0202 	orr.w	r2, r2, #2
 80042ca:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4413      	add	r3, r2
 8004308:	3308      	adds	r3, #8
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e004      	b.n	8004318 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	3314      	adds	r3, #20
 8004316:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	461a      	mov	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	795b      	ldrb	r3, [r3, #5]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_DAC_ConfigChannel+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e03c      	b.n	80043be <HAL_DAC_ConfigChannel+0x92>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2202      	movs	r2, #2
 800434e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4013      	ands	r3, r2
 800436c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	22c0      	movs	r2, #192	; 0xc0
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	400a      	ands	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e059      	b.n	8004492 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_DMA_Init+0xd4>)
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d80f      	bhi.n	800440a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_DMA_Init+0xd8>)
 80043f2:	4413      	add	r3, r2
 80043f4:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <HAL_DMA_Init+0xdc>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	009a      	lsls	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <HAL_DMA_Init+0xe0>)
 8004406:	63da      	str	r2, [r3, #60]	; 0x3c
 8004408:	e00e      	b.n	8004428 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_DMA_Init+0xe4>)
 8004412:	4413      	add	r3, r2
 8004414:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_DMA_Init+0xdc>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_DMA_Init+0xe8>)
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800443e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004442:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800444c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40020407 	.word	0x40020407
 80044a0:	bffdfff8 	.word	0xbffdfff8
 80044a4:	cccccccd 	.word	0xcccccccd
 80044a8:	40020000 	.word	0x40020000
 80044ac:	bffdfbf8 	.word	0xbffdfbf8
 80044b0:	40020400 	.word	0x40020400

080044b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Start_IT+0x20>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e04a      	b.n	800456a <HAL_DMA_Start_IT+0xb6>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d13a      	bne.n	800455c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fbb0 	bl	8004c70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 020e 	orr.w	r2, r2, #14
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e00f      	b.n	800454a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 020a 	orr.w	r2, r2, #10
 8004548:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e005      	b.n	8004568 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004564:	2302      	movs	r3, #2
 8004566:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004584:	2b02      	cmp	r3, #2
 8004586:	d008      	beq.n	800459a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2204      	movs	r2, #4
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e020      	b.n	80045dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 020e 	bic.w	r2, r2, #14
 80045a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d005      	beq.n	800460a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e0d6      	b.n	80047b8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 020e 	bic.w	r2, r2, #14
 8004618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <HAL_DMA_Abort_IT+0x1dc>)
 8004632:	429a      	cmp	r2, r3
 8004634:	d958      	bls.n	80046e8 <HAL_DMA_Abort_IT+0x100>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_DMA_Abort_IT+0x1e0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d04f      	beq.n	80046e0 <HAL_DMA_Abort_IT+0xf8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a61      	ldr	r2, [pc, #388]	; (80047cc <HAL_DMA_Abort_IT+0x1e4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d048      	beq.n	80046dc <HAL_DMA_Abort_IT+0xf4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a60      	ldr	r2, [pc, #384]	; (80047d0 <HAL_DMA_Abort_IT+0x1e8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d040      	beq.n	80046d6 <HAL_DMA_Abort_IT+0xee>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_DMA_Abort_IT+0x1ec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d038      	beq.n	80046d0 <HAL_DMA_Abort_IT+0xe8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_DMA_Abort_IT+0x1f0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d030      	beq.n	80046ca <HAL_DMA_Abort_IT+0xe2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a5b      	ldr	r2, [pc, #364]	; (80047dc <HAL_DMA_Abort_IT+0x1f4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d028      	beq.n	80046c4 <HAL_DMA_Abort_IT+0xdc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a53      	ldr	r2, [pc, #332]	; (80047c4 <HAL_DMA_Abort_IT+0x1dc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d020      	beq.n	80046be <HAL_DMA_Abort_IT+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a57      	ldr	r2, [pc, #348]	; (80047e0 <HAL_DMA_Abort_IT+0x1f8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d019      	beq.n	80046ba <HAL_DMA_Abort_IT+0xd2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a56      	ldr	r2, [pc, #344]	; (80047e4 <HAL_DMA_Abort_IT+0x1fc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d012      	beq.n	80046b6 <HAL_DMA_Abort_IT+0xce>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a54      	ldr	r2, [pc, #336]	; (80047e8 <HAL_DMA_Abort_IT+0x200>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00a      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a53      	ldr	r2, [pc, #332]	; (80047ec <HAL_DMA_Abort_IT+0x204>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d102      	bne.n	80046aa <HAL_DMA_Abort_IT+0xc2>
 80046a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a8:	e01b      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ae:	e018      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046b4:	e015      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046b6:	2310      	movs	r3, #16
 80046b8:	e013      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e011      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046c2:	e00e      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046c8:	e00b      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ce:	e008      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d4:	e005      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046da:	e002      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046dc:	2310      	movs	r3, #16
 80046de:	e000      	b.n	80046e2 <HAL_DMA_Abort_IT+0xfa>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4a43      	ldr	r2, [pc, #268]	; (80047f0 <HAL_DMA_Abort_IT+0x208>)
 80046e4:	6053      	str	r3, [r2, #4]
 80046e6:	e057      	b.n	8004798 <HAL_DMA_Abort_IT+0x1b0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a36      	ldr	r2, [pc, #216]	; (80047c8 <HAL_DMA_Abort_IT+0x1e0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04f      	beq.n	8004792 <HAL_DMA_Abort_IT+0x1aa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a35      	ldr	r2, [pc, #212]	; (80047cc <HAL_DMA_Abort_IT+0x1e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d048      	beq.n	800478e <HAL_DMA_Abort_IT+0x1a6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a33      	ldr	r2, [pc, #204]	; (80047d0 <HAL_DMA_Abort_IT+0x1e8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <HAL_DMA_Abort_IT+0x1a0>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a32      	ldr	r2, [pc, #200]	; (80047d4 <HAL_DMA_Abort_IT+0x1ec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d038      	beq.n	8004782 <HAL_DMA_Abort_IT+0x19a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <HAL_DMA_Abort_IT+0x1f0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d030      	beq.n	800477c <HAL_DMA_Abort_IT+0x194>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <HAL_DMA_Abort_IT+0x1f4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d028      	beq.n	8004776 <HAL_DMA_Abort_IT+0x18e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <HAL_DMA_Abort_IT+0x1dc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d020      	beq.n	8004770 <HAL_DMA_Abort_IT+0x188>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2b      	ldr	r2, [pc, #172]	; (80047e0 <HAL_DMA_Abort_IT+0x1f8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d019      	beq.n	800476c <HAL_DMA_Abort_IT+0x184>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <HAL_DMA_Abort_IT+0x1fc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d012      	beq.n	8004768 <HAL_DMA_Abort_IT+0x180>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <HAL_DMA_Abort_IT+0x200>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00a      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_DMA_Abort_IT+0x204>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d102      	bne.n	800475c <HAL_DMA_Abort_IT+0x174>
 8004756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475a:	e01b      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 800475c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004760:	e018      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004766:	e015      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004768:	2310      	movs	r3, #16
 800476a:	e013      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 800476c:	2301      	movs	r3, #1
 800476e:	e011      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004774:	e00e      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800477a:	e00b      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 800477c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004780:	e008      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004786:	e005      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800478c:	e002      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 800478e:	2310      	movs	r3, #16
 8004790:	e000      	b.n	8004794 <HAL_DMA_Abort_IT+0x1ac>
 8004792:	2301      	movs	r3, #1
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_DMA_Abort_IT+0x20c>)
 8004796:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
    } 
  }
  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40020080 	.word	0x40020080
 80047c8:	40020008 	.word	0x40020008
 80047cc:	4002001c 	.word	0x4002001c
 80047d0:	40020030 	.word	0x40020030
 80047d4:	40020044 	.word	0x40020044
 80047d8:	40020058 	.word	0x40020058
 80047dc:	4002006c 	.word	0x4002006c
 80047e0:	40020408 	.word	0x40020408
 80047e4:	4002041c 	.word	0x4002041c
 80047e8:	40020430 	.word	0x40020430
 80047ec:	40020444 	.word	0x40020444
 80047f0:	40020400 	.word	0x40020400
 80047f4:	40020000 	.word	0x40020000

080047f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2204      	movs	r2, #4
 8004816:	409a      	lsls	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80d6 	beq.w	80049ce <HAL_DMA_IRQHandler+0x1d6>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80d0 	beq.w	80049ce <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	4b9b      	ldr	r3, [pc, #620]	; (8004ac0 <HAL_DMA_IRQHandler+0x2c8>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d958      	bls.n	800490a <HAL_DMA_IRQHandler+0x112>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a99      	ldr	r2, [pc, #612]	; (8004ac4 <HAL_DMA_IRQHandler+0x2cc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d04f      	beq.n	8004902 <HAL_DMA_IRQHandler+0x10a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a98      	ldr	r2, [pc, #608]	; (8004ac8 <HAL_DMA_IRQHandler+0x2d0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d048      	beq.n	80048fe <HAL_DMA_IRQHandler+0x106>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a96      	ldr	r2, [pc, #600]	; (8004acc <HAL_DMA_IRQHandler+0x2d4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x100>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a95      	ldr	r2, [pc, #596]	; (8004ad0 <HAL_DMA_IRQHandler+0x2d8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d038      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xfa>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a93      	ldr	r2, [pc, #588]	; (8004ad4 <HAL_DMA_IRQHandler+0x2dc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d030      	beq.n	80048ec <HAL_DMA_IRQHandler+0xf4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a92      	ldr	r2, [pc, #584]	; (8004ad8 <HAL_DMA_IRQHandler+0x2e0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d028      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xee>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a89      	ldr	r2, [pc, #548]	; (8004ac0 <HAL_DMA_IRQHandler+0x2c8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d020      	beq.n	80048e0 <HAL_DMA_IRQHandler+0xe8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a8e      	ldr	r2, [pc, #568]	; (8004adc <HAL_DMA_IRQHandler+0x2e4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d019      	beq.n	80048dc <HAL_DMA_IRQHandler+0xe4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a8c      	ldr	r2, [pc, #560]	; (8004ae0 <HAL_DMA_IRQHandler+0x2e8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d012      	beq.n	80048d8 <HAL_DMA_IRQHandler+0xe0>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a8b      	ldr	r2, [pc, #556]	; (8004ae4 <HAL_DMA_IRQHandler+0x2ec>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00a      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xda>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <HAL_DMA_IRQHandler+0x2f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d102      	bne.n	80048cc <HAL_DMA_IRQHandler+0xd4>
 80048c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048ca:	e01b      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048d0:	e018      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	e015      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	e013      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048dc:	2304      	movs	r3, #4
 80048de:	e011      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048e4:	e00e      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048ea:	e00b      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048f0:	e008      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048f6:	e005      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fc:	e002      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 80048fe:	2340      	movs	r3, #64	; 0x40
 8004900:	e000      	b.n	8004904 <HAL_DMA_IRQHandler+0x10c>
 8004902:	2304      	movs	r3, #4
 8004904:	4a79      	ldr	r2, [pc, #484]	; (8004aec <HAL_DMA_IRQHandler+0x2f4>)
 8004906:	6053      	str	r3, [r2, #4]
 8004908:	e057      	b.n	80049ba <HAL_DMA_IRQHandler+0x1c2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6d      	ldr	r2, [pc, #436]	; (8004ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d04f      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x1bc>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_DMA_IRQHandler+0x2d0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d048      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x1b8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6a      	ldr	r2, [pc, #424]	; (8004acc <HAL_DMA_IRQHandler+0x2d4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d040      	beq.n	80049aa <HAL_DMA_IRQHandler+0x1b2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a68      	ldr	r2, [pc, #416]	; (8004ad0 <HAL_DMA_IRQHandler+0x2d8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d038      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x1ac>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_DMA_IRQHandler+0x2dc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d030      	beq.n	800499e <HAL_DMA_IRQHandler+0x1a6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_DMA_IRQHandler+0x2e0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d028      	beq.n	8004998 <HAL_DMA_IRQHandler+0x1a0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5d      	ldr	r2, [pc, #372]	; (8004ac0 <HAL_DMA_IRQHandler+0x2c8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d020      	beq.n	8004992 <HAL_DMA_IRQHandler+0x19a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a61      	ldr	r2, [pc, #388]	; (8004adc <HAL_DMA_IRQHandler+0x2e4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d019      	beq.n	800498e <HAL_DMA_IRQHandler+0x196>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <HAL_DMA_IRQHandler+0x2e8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d012      	beq.n	800498a <HAL_DMA_IRQHandler+0x192>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5e      	ldr	r2, [pc, #376]	; (8004ae4 <HAL_DMA_IRQHandler+0x2ec>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00a      	beq.n	8004984 <HAL_DMA_IRQHandler+0x18c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5d      	ldr	r2, [pc, #372]	; (8004ae8 <HAL_DMA_IRQHandler+0x2f0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d102      	bne.n	800497e <HAL_DMA_IRQHandler+0x186>
 8004978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800497c:	e01b      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 800497e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004982:	e018      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 8004984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004988:	e015      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	e013      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 800498e:	2304      	movs	r3, #4
 8004990:	e011      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 8004992:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004996:	e00e      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 8004998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800499c:	e00b      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 800499e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049a2:	e008      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 80049a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049a8:	e005      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 80049aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ae:	e002      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	e000      	b.n	80049b6 <HAL_DMA_IRQHandler+0x1be>
 80049b4:	2304      	movs	r3, #4
 80049b6:	4a4e      	ldr	r2, [pc, #312]	; (8004af0 <HAL_DMA_IRQHandler+0x2f8>)
 80049b8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8136 	beq.w	8004c30 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80049cc:	e130      	b.n	8004c30 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2202      	movs	r2, #2
 80049d4:	409a      	lsls	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80f8 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x3d8>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80f2 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 020a 	bic.w	r2, r2, #10
 8004a08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <HAL_DMA_IRQHandler+0x2c8>)
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d973      	bls.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a28      	ldr	r2, [pc, #160]	; (8004ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d06a      	beq.n	8004afe <HAL_DMA_IRQHandler+0x306>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <HAL_DMA_IRQHandler+0x2d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d063      	beq.n	8004afa <HAL_DMA_IRQHandler+0x302>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a25      	ldr	r2, [pc, #148]	; (8004acc <HAL_DMA_IRQHandler+0x2d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d05b      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x2fc>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_DMA_IRQHandler+0x2d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d038      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x2c0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <HAL_DMA_IRQHandler+0x2dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d030      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x2ba>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <HAL_DMA_IRQHandler+0x2e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d028      	beq.n	8004aac <HAL_DMA_IRQHandler+0x2b4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_DMA_IRQHandler+0x2c8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d020      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x2ae>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <HAL_DMA_IRQHandler+0x2e4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x2aa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <HAL_DMA_IRQHandler+0x2e8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d012      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x2a6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_DMA_IRQHandler+0x2ec>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_DMA_IRQHandler+0x2f0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d102      	bne.n	8004a92 <HAL_DMA_IRQHandler+0x29a>
 8004a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a90:	e036      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a96:	e033      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9c:	e030      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	e02e      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e02c      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aaa:	e029      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004aac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ab0:	e026      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab6:	e023      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004abc:	e020      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004abe:	bf00      	nop
 8004ac0:	40020080 	.word	0x40020080
 8004ac4:	40020008 	.word	0x40020008
 8004ac8:	4002001c 	.word	0x4002001c
 8004acc:	40020030 	.word	0x40020030
 8004ad0:	40020044 	.word	0x40020044
 8004ad4:	40020058 	.word	0x40020058
 8004ad8:	4002006c 	.word	0x4002006c
 8004adc:	40020408 	.word	0x40020408
 8004ae0:	4002041c 	.word	0x4002041c
 8004ae4:	40020430 	.word	0x40020430
 8004ae8:	40020444 	.word	0x40020444
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020000 	.word	0x40020000
 8004af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af8:	e002      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004afa:	2320      	movs	r3, #32
 8004afc:	e000      	b.n	8004b00 <HAL_DMA_IRQHandler+0x308>
 8004afe:	2302      	movs	r3, #2
 8004b00:	4a4e      	ldr	r2, [pc, #312]	; (8004c3c <HAL_DMA_IRQHandler+0x444>)
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e057      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x3be>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4d      	ldr	r2, [pc, #308]	; (8004c40 <HAL_DMA_IRQHandler+0x448>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d04f      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x3b8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4b      	ldr	r2, [pc, #300]	; (8004c44 <HAL_DMA_IRQHandler+0x44c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d048      	beq.n	8004bac <HAL_DMA_IRQHandler+0x3b4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4a      	ldr	r2, [pc, #296]	; (8004c48 <HAL_DMA_IRQHandler+0x450>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d040      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x3ae>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a48      	ldr	r2, [pc, #288]	; (8004c4c <HAL_DMA_IRQHandler+0x454>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d038      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x3a8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a47      	ldr	r2, [pc, #284]	; (8004c50 <HAL_DMA_IRQHandler+0x458>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d030      	beq.n	8004b9a <HAL_DMA_IRQHandler+0x3a2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a45      	ldr	r2, [pc, #276]	; (8004c54 <HAL_DMA_IRQHandler+0x45c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d028      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x39c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a44      	ldr	r2, [pc, #272]	; (8004c58 <HAL_DMA_IRQHandler+0x460>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d020      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x396>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a42      	ldr	r2, [pc, #264]	; (8004c5c <HAL_DMA_IRQHandler+0x464>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x392>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <HAL_DMA_IRQHandler+0x468>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d012      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x38e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_DMA_IRQHandler+0x46c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00a      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x388>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <HAL_DMA_IRQHandler+0x470>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d102      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x382>
 8004b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b78:	e01b      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7e:	e018      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b84:	e015      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b86:	2320      	movs	r3, #32
 8004b88:	e013      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e011      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b92:	e00e      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b98:	e00b      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b9e:	e008      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ba4:	e005      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004baa:	e002      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004bac:	2320      	movs	r3, #32
 8004bae:	e000      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x3ba>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <HAL_DMA_IRQHandler+0x474>)
 8004bb4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d034      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bce:	e02f      	b.n	8004c30 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d028      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x43a>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d023      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 020e 	bic.w	r2, r2, #14
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
    }
  }
  return;
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
}
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40020400 	.word	0x40020400
 8004c40:	40020008 	.word	0x40020008
 8004c44:	4002001c 	.word	0x4002001c
 8004c48:	40020030 	.word	0x40020030
 8004c4c:	40020044 	.word	0x40020044
 8004c50:	40020058 	.word	0x40020058
 8004c54:	4002006c 	.word	0x4002006c
 8004c58:	40020080 	.word	0x40020080
 8004c5c:	40020408 	.word	0x40020408
 8004c60:	4002041c 	.word	0x4002041c
 8004c64:	40020430 	.word	0x40020430
 8004c68:	40020444 	.word	0x40020444
 8004c6c:	40020000 	.word	0x40020000

08004c70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d108      	bne.n	8004cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cae:	e007      	b.n	8004cc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b08b      	sub	sp, #44	; 0x2c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cde:	e179      	b.n	8004fd4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	f040 8168 	bne.w	8004fce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4aa0      	ldr	r2, [pc, #640]	; (8004f84 <HAL_GPIO_Init+0x2b8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d05e      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d08:	4a9e      	ldr	r2, [pc, #632]	; (8004f84 <HAL_GPIO_Init+0x2b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d875      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d0e:	4a9e      	ldr	r2, [pc, #632]	; (8004f88 <HAL_GPIO_Init+0x2bc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d058      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d14:	4a9c      	ldr	r2, [pc, #624]	; (8004f88 <HAL_GPIO_Init+0x2bc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d86f      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d1a:	4a9c      	ldr	r2, [pc, #624]	; (8004f8c <HAL_GPIO_Init+0x2c0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d052      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d20:	4a9a      	ldr	r2, [pc, #616]	; (8004f8c <HAL_GPIO_Init+0x2c0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d869      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d26:	4a9a      	ldr	r2, [pc, #616]	; (8004f90 <HAL_GPIO_Init+0x2c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04c      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d2c:	4a98      	ldr	r2, [pc, #608]	; (8004f90 <HAL_GPIO_Init+0x2c4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d863      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d32:	4a98      	ldr	r2, [pc, #608]	; (8004f94 <HAL_GPIO_Init+0x2c8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d046      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
 8004d38:	4a96      	ldr	r2, [pc, #600]	; (8004f94 <HAL_GPIO_Init+0x2c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d85d      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d3e:	2b12      	cmp	r3, #18
 8004d40:	d82a      	bhi.n	8004d98 <HAL_GPIO_Init+0xcc>
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d859      	bhi.n	8004dfa <HAL_GPIO_Init+0x12e>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <HAL_GPIO_Init+0x80>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004dc7 	.word	0x08004dc7
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004db3 	.word	0x08004db3
 8004d58:	08004df5 	.word	0x08004df5
 8004d5c:	08004dfb 	.word	0x08004dfb
 8004d60:	08004dfb 	.word	0x08004dfb
 8004d64:	08004dfb 	.word	0x08004dfb
 8004d68:	08004dfb 	.word	0x08004dfb
 8004d6c:	08004dfb 	.word	0x08004dfb
 8004d70:	08004dfb 	.word	0x08004dfb
 8004d74:	08004dfb 	.word	0x08004dfb
 8004d78:	08004dfb 	.word	0x08004dfb
 8004d7c:	08004dfb 	.word	0x08004dfb
 8004d80:	08004dfb 	.word	0x08004dfb
 8004d84:	08004dfb 	.word	0x08004dfb
 8004d88:	08004dfb 	.word	0x08004dfb
 8004d8c:	08004dfb 	.word	0x08004dfb
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	4a7f      	ldr	r2, [pc, #508]	; (8004f98 <HAL_GPIO_Init+0x2cc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d9e:	e02c      	b.n	8004dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	623b      	str	r3, [r7, #32]
          break;
 8004da6:	e029      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	623b      	str	r3, [r7, #32]
          break;
 8004db0:	e024      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	3308      	adds	r3, #8
 8004db8:	623b      	str	r3, [r7, #32]
          break;
 8004dba:	e01f      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	623b      	str	r3, [r7, #32]
          break;
 8004dc4:	e01a      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	623b      	str	r3, [r7, #32]
          break;
 8004dd2:	e013      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	611a      	str	r2, [r3, #16]
          break;
 8004de6:	e009      	b.n	8004dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004de8:	2308      	movs	r3, #8
 8004dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	615a      	str	r2, [r3, #20]
          break;
 8004df2:	e003      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
          break;
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x130>
          break;
 8004dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2bff      	cmp	r3, #255	; 0xff
 8004e00:	d801      	bhi.n	8004e06 <HAL_GPIO_Init+0x13a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	e001      	b.n	8004e0a <HAL_GPIO_Init+0x13e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d802      	bhi.n	8004e18 <HAL_GPIO_Init+0x14c>
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x152>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	3b08      	subs	r3, #8
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	210f      	movs	r1, #15
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	6a39      	ldr	r1, [r7, #32]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80c1 	beq.w	8004fce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e4c:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	4a52      	ldr	r2, [pc, #328]	; (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6193      	str	r3, [r2, #24]
 8004e58:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_GPIO_Init+0x2d0>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e64:	4a4e      	ldr	r2, [pc, #312]	; (8004fa0 <HAL_GPIO_Init+0x2d4>)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	089b      	lsrs	r3, r3, #2
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a46      	ldr	r2, [pc, #280]	; (8004fa4 <HAL_GPIO_Init+0x2d8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a45      	ldr	r2, [pc, #276]	; (8004fa8 <HAL_GPIO_Init+0x2dc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d019      	beq.n	8004ecc <HAL_GPIO_Init+0x200>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a44      	ldr	r2, [pc, #272]	; (8004fac <HAL_GPIO_Init+0x2e0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_GPIO_Init+0x1fc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a43      	ldr	r2, [pc, #268]	; (8004fb0 <HAL_GPIO_Init+0x2e4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_GPIO_Init+0x1f8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a42      	ldr	r2, [pc, #264]	; (8004fb4 <HAL_GPIO_Init+0x2e8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <HAL_GPIO_Init+0x1f4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a41      	ldr	r2, [pc, #260]	; (8004fb8 <HAL_GPIO_Init+0x2ec>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_GPIO_Init+0x1f0>
 8004eb8:	2305      	movs	r3, #5
 8004eba:	e00a      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ebc:	2306      	movs	r3, #6
 8004ebe:	e008      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e006      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e004      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e002      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_GPIO_Init+0x206>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed4:	f002 0203 	and.w	r2, r2, #3
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	4093      	lsls	r3, r2
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ee2:	492f      	ldr	r1, [pc, #188]	; (8004fa0 <HAL_GPIO_Init+0x2d4>)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	3302      	adds	r3, #2
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004efc:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	492e      	ldr	r1, [pc, #184]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]
 8004f08:	e006      	b.n	8004f18 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	492a      	ldr	r1, [pc, #168]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	4924      	ldr	r1, [pc, #144]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	e006      	b.n	8004f40 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	4920      	ldr	r1, [pc, #128]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d006      	beq.n	8004f5a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	491a      	ldr	r1, [pc, #104]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d025      	beq.n	8004fc0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	4910      	ldr	r1, [pc, #64]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60cb      	str	r3, [r1, #12]
 8004f80:	e025      	b.n	8004fce <HAL_GPIO_Init+0x302>
 8004f82:	bf00      	nop
 8004f84:	10320000 	.word	0x10320000
 8004f88:	10310000 	.word	0x10310000
 8004f8c:	10220000 	.word	0x10220000
 8004f90:	10210000 	.word	0x10210000
 8004f94:	10120000 	.word	0x10120000
 8004f98:	10110000 	.word	0x10110000
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010800 	.word	0x40010800
 8004fa8:	40010c00 	.word	0x40010c00
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	40011400 	.word	0x40011400
 8004fb4:	40011800 	.word	0x40011800
 8004fb8:	40011c00 	.word	0x40011c00
 8004fbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	4909      	ldr	r1, [pc, #36]	; (8004ff0 <HAL_GPIO_Init+0x324>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f47f ae7e 	bne.w	8004ce0 <HAL_GPIO_Init+0x14>
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	372c      	adds	r7, #44	; 0x2c
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e001      	b.n	8005016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	807b      	strh	r3, [r7, #2]
 800502e:	4613      	mov	r3, r2
 8005030:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005032:	787b      	ldrb	r3, [r7, #1]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800503e:	e003      	b.n	8005048 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	041a      	lsls	r2, r3, #16
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
	...

08005054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e26c      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8087 	beq.w	8005182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005074:	4b92      	ldr	r3, [pc, #584]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b04      	cmp	r3, #4
 800507e:	d00c      	beq.n	800509a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005080:	4b8f      	ldr	r3, [pc, #572]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d112      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
 800508c:	4b8c      	ldr	r3, [pc, #560]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d10b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509a:	4b89      	ldr	r3, [pc, #548]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d06c      	beq.n	8005180 <HAL_RCC_OscConfig+0x12c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d168      	bne.n	8005180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e246      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x76>
 80050bc:	4b80      	ldr	r3, [pc, #512]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7f      	ldr	r2, [pc, #508]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e02e      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b78      	ldr	r3, [pc, #480]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a77      	ldr	r2, [pc, #476]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0xbc>
 80050f6:	4b72      	ldr	r3, [pc, #456]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 8005110:	4b6b      	ldr	r3, [pc, #428]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b68      	ldr	r3, [pc, #416]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a67      	ldr	r2, [pc, #412]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd ffc8 	bl	80030c4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd ffc4 	bl	80030c4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1fa      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xe4>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd ffb4 	bl	80030c4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fd ffb0 	bl	80030c4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1e6      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x10c>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518e:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800519a:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
 80051a6:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1ba      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4939      	ldr	r1, [pc, #228]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCC_OscConfig+0x270>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fd ff69 	bl	80030c4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd ff65 	bl	80030c4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e19b      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4927      	ldr	r1, [pc, #156]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <HAL_RCC_OscConfig+0x270>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fd ff48 	bl	80030c4 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fd ff44 	bl	80030c4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e17a      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03a      	beq.n	80052d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005270:	f7fd ff28 	bl	80030c4 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fd ff24 	bl	80030c4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e15a      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005296:	2001      	movs	r0, #1
 8005298:	f000 fb08 	bl	80058ac <RCC_Delay>
 800529c:	e01c      	b.n	80052d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fd ff0e 	bl	80030c4 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052aa:	e00f      	b.n	80052cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fd ff0a 	bl	80030c4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d908      	bls.n	80052cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e140      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	42420000 	.word	0x42420000
 80052c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b9e      	ldr	r3, [pc, #632]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e9      	bne.n	80052ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a6 	beq.w	8005432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b97      	ldr	r3, [pc, #604]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b94      	ldr	r3, [pc, #592]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4a93      	ldr	r2, [pc, #588]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	61d3      	str	r3, [r2, #28]
 8005302:	4b91      	ldr	r3, [pc, #580]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005312:	4b8e      	ldr	r3, [pc, #568]	; (800554c <HAL_RCC_OscConfig+0x4f8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531e:	4b8b      	ldr	r3, [pc, #556]	; (800554c <HAL_RCC_OscConfig+0x4f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a8a      	ldr	r2, [pc, #552]	; (800554c <HAL_RCC_OscConfig+0x4f8>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fd fecb 	bl	80030c4 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fd fec7 	bl	80030c4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b64      	cmp	r3, #100	; 0x64
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0fd      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b81      	ldr	r3, [pc, #516]	; (800554c <HAL_RCC_OscConfig+0x4f8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <HAL_RCC_OscConfig+0x312>
 8005358:	4b7b      	ldr	r3, [pc, #492]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4a7a      	ldr	r2, [pc, #488]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6213      	str	r3, [r2, #32]
 8005364:	e02d      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x334>
 800536e:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4a75      	ldr	r2, [pc, #468]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6213      	str	r3, [r2, #32]
 800537a:	4b73      	ldr	r3, [pc, #460]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4a72      	ldr	r2, [pc, #456]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6213      	str	r3, [r2, #32]
 8005386:	e01c      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b05      	cmp	r3, #5
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x356>
 8005390:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4a6c      	ldr	r2, [pc, #432]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6213      	str	r3, [r2, #32]
 800539c:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a69      	ldr	r2, [pc, #420]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4a66      	ldr	r2, [pc, #408]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6213      	str	r3, [r2, #32]
 80053b6:	4b64      	ldr	r3, [pc, #400]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4a63      	ldr	r2, [pc, #396]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ca:	f7fd fe7b 	bl	80030c4 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fd fe77 	bl	80030c4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0ab      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e8:	4b57      	ldr	r3, [pc, #348]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ee      	beq.n	80053d2 <HAL_RCC_OscConfig+0x37e>
 80053f4:	e014      	b.n	8005420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fd fe65 	bl	80030c4 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd fe61 	bl	80030c4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	; 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e095      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005414:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ee      	bne.n	80053fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b48      	ldr	r3, [pc, #288]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4a47      	ldr	r2, [pc, #284]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8081 	beq.w	800553e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800543c:	4b42      	ldr	r3, [pc, #264]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d061      	beq.n	800550c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d146      	bne.n	80054de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCC_OscConfig+0x4fc>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fd fe35 	bl	80030c4 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545e:	f7fd fe31 	bl	80030c4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e067      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005470:	4b35      	ldr	r3, [pc, #212]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005484:	d108      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005486:	4b30      	ldr	r3, [pc, #192]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	492d      	ldr	r1, [pc, #180]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005498:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a19      	ldr	r1, [r3, #32]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	430b      	orrs	r3, r1
 80054aa:	4927      	ldr	r1, [pc, #156]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_RCC_OscConfig+0x4fc>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fd fe05 	bl	80030c4 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054be:	f7fd fe01 	bl	80030c4 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e037      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x46a>
 80054dc:	e02f      	b.n	800553e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <HAL_RCC_OscConfig+0x4fc>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fd fdee 	bl	80030c4 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fd fdea 	bl	80030c4 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e020      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x498>
 800550a:	e018      	b.n	800553e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e013      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCC_OscConfig+0x4f4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	429a      	cmp	r2, r3
 800552a:	d106      	bne.n	800553a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	40007000 	.word	0x40007000
 8005550:	42420060 	.word	0x42420060

08005554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0d0      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d910      	bls.n	8005598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b67      	ldr	r3, [pc, #412]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	4965      	ldr	r1, [pc, #404]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b63      	ldr	r3, [pc, #396]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0b8      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b0:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a58      	ldr	r2, [pc, #352]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a52      	ldr	r2, [pc, #328]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d4:	4b50      	ldr	r3, [pc, #320]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	494d      	ldr	r1, [pc, #308]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d040      	beq.n	8005674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b47      	ldr	r3, [pc, #284]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d115      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07f      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	4b41      	ldr	r3, [pc, #260]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e073      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005622:	4b3d      	ldr	r3, [pc, #244]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e06b      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005632:	4b39      	ldr	r3, [pc, #228]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4936      	ldr	r1, [pc, #216]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fd fd3e 	bl	80030c4 <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fd fd3a 	bl	80030c4 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	; 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e053      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 020c 	and.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d1eb      	bne.n	800564c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d210      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 0207 	bic.w	r2, r3, #7
 800568a:	4922      	ldr	r1, [pc, #136]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b20      	ldr	r3, [pc, #128]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e032      	b.n	800570a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4916      	ldr	r1, [pc, #88]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	490e      	ldr	r1, [pc, #56]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056e2:	f000 f821 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	490a      	ldr	r1, [pc, #40]	; (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1cc>)
 80056fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCC_ClockConfig+0x1d0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fa7e 	bl	8002c04 <HAL_InitTick>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40022000 	.word	0x40022000
 8005718:	40021000 	.word	0x40021000
 800571c:	0801969c 	.word	0x0801969c
 8005720:	20000004 	.word	0x20000004
 8005724:	20000008 	.word	0x20000008

08005728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b490      	push	{r4, r7}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005730:	1d3c      	adds	r4, r7, #4
 8005732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005738:	f240 2301 	movw	r3, #513	; 0x201
 800573c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	2300      	movs	r3, #0
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005752:	4b22      	ldr	r3, [pc, #136]	; (80057dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d002      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x40>
 8005762:	2b08      	cmp	r3, #8
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x46>
 8005766:	e02d      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800576a:	623b      	str	r3, [r7, #32]
      break;
 800576c:	e02d      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	0c9b      	lsrs	r3, r3, #18
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800577a:	4413      	add	r3, r2
 800577c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005780:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	0c5b      	lsrs	r3, r3, #17
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800579a:	4413      	add	r3, r2
 800579c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057a6:	fb02 f203 	mul.w	r2, r2, r3
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	e004      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	623b      	str	r3, [r7, #32]
      break;
 80057c2:	e002      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c6:	623b      	str	r3, [r7, #32]
      break;
 80057c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3728      	adds	r7, #40	; 0x28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc90      	pop	{r4, r7}
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	08018984 	.word	0x08018984
 80057dc:	40021000 	.word	0x40021000
 80057e0:	007a1200 	.word	0x007a1200
 80057e4:	003d0900 	.word	0x003d0900

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b02      	ldr	r3, [pc, #8]	; (80057f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	20000004 	.word	0x20000004

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005800:	f7ff fff2 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	080196ac 	.word	0x080196ac

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005828:	f7ff ffde 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	0adb      	lsrs	r3, r3, #11
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	080196ac 	.word	0x080196ac

0800584c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	220f      	movs	r2, #15
 800585a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <HAL_RCC_GetClockConfig+0x58>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <HAL_RCC_GetClockConfig+0x58>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_GetClockConfig+0x58>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <HAL_RCC_GetClockConfig+0x58>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0207 	and.w	r2, r3, #7
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40022000 	.word	0x40022000

080058ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <RCC_Delay+0x34>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <RCC_Delay+0x38>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a5b      	lsrs	r3, r3, #9
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058c8:	bf00      	nop
  }
  while (Delay --);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	60fa      	str	r2, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f9      	bne.n	80058c8 <RCC_Delay+0x1c>
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	20000004 	.word	0x20000004
 80058e4:	10624dd3 	.word	0x10624dd3

080058e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d07d      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005904:	2300      	movs	r3, #0
 8005906:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005908:	4b4f      	ldr	r3, [pc, #316]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4a4b      	ldr	r2, [pc, #300]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591e:	61d3      	str	r3, [r2, #28]
 8005920:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005930:	4b46      	ldr	r3, [pc, #280]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d118      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800593c:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a42      	ldr	r2, [pc, #264]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005948:	f7fd fbbc 	bl	80030c4 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	e008      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005950:	f7fd fbb8 	bl	80030c4 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b64      	cmp	r3, #100	; 0x64
 800595c:	d901      	bls.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e06d      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005962:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800596e:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d02e      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d027      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005994:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005996:	4b2e      	ldr	r3, [pc, #184]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005998:	2201      	movs	r2, #1
 800599a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800599c:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059a2:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d014      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b2:	f7fd fb87 	bl	80030c4 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	e00a      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fd fb83 	bl	80030c4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e036      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ee      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059dc:	4b1a      	ldr	r3, [pc, #104]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4917      	ldr	r1, [pc, #92]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	490b      	ldr	r1, [pc, #44]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	42420440 	.word	0x42420440

08005a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b08d      	sub	sp, #52	; 0x34
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a5c:	4b6b      	ldr	r3, [pc, #428]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005a5e:	f107 040c 	add.w	r4, r7, #12
 8005a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a68:	f240 2301 	movw	r3, #513	; 0x201
 8005a6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	2300      	movs	r3, #0
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	2300      	movs	r3, #0
 8005a78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	f200 80b6 	bhi.w	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005b77 	.word	0x08005b77
 8005a98:	08005bdd 	.word	0x08005bdd
 8005a9c:	08005bf9 	.word	0x08005bf9
 8005aa0:	08005b67 	.word	0x08005b67
 8005aa4:	08005bf9 	.word	0x08005bf9
 8005aa8:	08005bf9 	.word	0x08005bf9
 8005aac:	08005bf9 	.word	0x08005bf9
 8005ab0:	08005b6f 	.word	0x08005b6f
 8005ab4:	08005bf9 	.word	0x08005bf9
 8005ab8:	08005bf9 	.word	0x08005bf9
 8005abc:	08005bf9 	.word	0x08005bf9
 8005ac0:	08005bf9 	.word	0x08005bf9
 8005ac4:	08005bf9 	.word	0x08005bf9
 8005ac8:	08005bf9 	.word	0x08005bf9
 8005acc:	08005bf9 	.word	0x08005bf9
 8005ad0:	08005ad5 	.word	0x08005ad5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005ad4:	4b4e      	ldr	r3, [pc, #312]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ada:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 808a 	beq.w	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	0c9b      	lsrs	r3, r3, #18
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005af4:	4413      	add	r3, r2
 8005af6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005afa:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	0c5b      	lsrs	r3, r3, #17
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b14:	4413      	add	r3, r2
 8005b16:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005b26:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b36:	e004      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005b3c:	fb02 f303 	mul.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005b54:	e052      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4a30      	ldr	r2, [pc, #192]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005b64:	e04a      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005b66:	f7ff fddf 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005b6a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005b6c:	e049      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7ff fddb 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005b72:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005b74:	e045      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005b76:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d108      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b98:	e01f      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d109      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8005bb2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb8:	e00f      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc4:	d11c      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8005bd2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005bd8:	e012      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005bda:	e011      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005bdc:	f7ff fe22 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	0b9b      	lsrs	r3, r3, #14
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	3301      	adds	r3, #1
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8005bf8:	bf00      	nop
 8005bfa:	e002      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005bfc:	bf00      	nop
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005c00:	bf00      	nop
    }
  }
  return (frequency);
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3734      	adds	r7, #52	; 0x34
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}
 8005c0c:	08018994 	.word	0x08018994
 8005c10:	40021000 	.word	0x40021000
 8005c14:	007a1200 	.word	0x007a1200
 8005c18:	003d0900 	.word	0x003d0900
 8005c1c:	aaaaaaab 	.word	0xaaaaaaab

08005c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e041      	b.n	8005cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f839 	bl	8005cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f000 f9c2 	bl	8005fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d001      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e044      	b.n	8005d72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <HAL_TIM_Base_Start_IT+0xac>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d111      	bne.n	8005d60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d010      	beq.n	8005d70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	e007      	b.n	8005d70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00

08005d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0202 	mvn.w	r2, #2
 8005dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8ed 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8e0 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8ef 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0204 	mvn.w	r2, #4
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8c3 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8b6 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8c5 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d122      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d11b      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0208 	mvn.w	r2, #8
 8005e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f899 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f88c 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f89b 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b10      	cmp	r3, #16
 8005ea0:	d122      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d11b      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0210 	mvn.w	r2, #16
 8005eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f86f 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f862 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f871 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d10e      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0201 	mvn.w	r2, #1
 8005f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fc fcd6 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d10e      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b80      	cmp	r3, #128	; 0x80
 8005f2e:	d107      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8d7 	bl	80060ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d10e      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f835 	bl	8005fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d10e      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d107      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0220 	mvn.w	r2, #32
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8a2 	bl	80060dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <TIM_Base_SetConfig+0xe0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a32      	ldr	r2, [pc, #200]	; (80060cc <TIM_Base_SetConfig+0xe4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00f      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <TIM_Base_SetConfig+0xe8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a2e      	ldr	r2, [pc, #184]	; (80060d4 <TIM_Base_SetConfig+0xec>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <TIM_Base_SetConfig+0xf0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <TIM_Base_SetConfig+0xe0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <TIM_Base_SetConfig+0x82>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a21      	ldr	r2, [pc, #132]	; (80060cc <TIM_Base_SetConfig+0xe4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_Base_SetConfig+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0x82>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <TIM_Base_SetConfig+0xe8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0x82>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <TIM_Base_SetConfig+0xec>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0x82>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <TIM_Base_SetConfig+0xf0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <TIM_Base_SetConfig+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0xc8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <TIM_Base_SetConfig+0xe4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d103      	bne.n	80060b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	615a      	str	r2, [r3, #20]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00

080060dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e03f      	b.n	8006192 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc fefa 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fdb5 	bl	8006cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d153      	bne.n	800625e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_UART_Transmit_DMA+0x26>
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e04c      	b.n	8006260 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Transmit_DMA+0x38>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e045      	b.n	8006260 <HAL_UART_Transmit_DMA+0xc4>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2221      	movs	r2, #33	; 0x21
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006200:	4a19      	ldr	r2, [pc, #100]	; (8006268 <HAL_UART_Transmit_DMA+0xcc>)
 8006202:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_UART_Transmit_DMA+0xd0>)
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_UART_Transmit_DMA+0xd4>)
 8006212:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2200      	movs	r2, #0
 800621a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800621c:	f107 0308 	add.w	r3, r7, #8
 8006220:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	461a      	mov	r2, r3
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	f7fe f93e 	bl	80044b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006240:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006258:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	08006751 	.word	0x08006751
 800626c:	080067a3 	.word	0x080067a3
 8006270:	0800688b 	.word	0x0800688b

08006274 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b20      	cmp	r3, #32
 800628c:	d11d      	bne.n	80062ca <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_UART_Receive_DMA+0x26>
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e016      	b.n	80062cc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_UART_Receive_DMA+0x38>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e00f      	b.n	80062cc <HAL_UART_Receive_DMA+0x58>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	461a      	mov	r2, r3
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fb2d 	bl	8006920 <UART_Start_Receive_DMA>
 80062c6:	4603      	mov	r3, r0
 80062c8:	e000      	b.n	80062cc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
  }
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b21      	cmp	r3, #33	; 0x21
 8006300:	d116      	bne.n	8006330 <HAL_UART_DMAStop+0x5c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006316:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe f924 	bl	8004572 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb5c 	bl	80069e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b22      	cmp	r3, #34	; 0x22
 8006350:	d116      	bne.n	8006380 <HAL_UART_DMAStop+0xac>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006366:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe f8fc 	bl	8004572 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb49 	bl	8006a12 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_UART_IRQHandler+0x52>
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fbc2 	bl	8006b60 <UART_Receive_IT>
      return;
 80063dc:	e17b      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80b1 	beq.w	8006548 <HAL_UART_IRQHandler+0x1bc>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_UART_IRQHandler+0x70>
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80a6 	beq.w	8006548 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_UART_IRQHandler+0x90>
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_UART_IRQHandler+0xb0>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f043 0202 	orr.w	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_UART_IRQHandler+0xd0>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	f043 0204 	orr.w	r2, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <HAL_UART_IRQHandler+0xfa>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_UART_IRQHandler+0xee>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0208 	orr.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 811e 	beq.w	80066cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_UART_IRQHandler+0x11e>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fb5b 	bl	8006b60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <HAL_UART_IRQHandler+0x146>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d031      	beq.n	8006536 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa9d 	bl	8006a12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d023      	beq.n	800652e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4a76      	ldr	r2, [pc, #472]	; (80066dc <HAL_UART_IRQHandler+0x350>)
 8006504:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f86c 	bl	80045e8 <HAL_DMA_Abort_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00e      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8fe 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00a      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8fa 	bl	8006728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e006      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8f6 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006542:	e0c3      	b.n	80066cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	bf00      	nop
    return;
 8006546:	e0c1      	b.n	80066cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80a1 	bne.w	8006694 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809b 	beq.w	8006694 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8095 	beq.w	8006694 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d04e      	beq.n	800662c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006598:	8a3b      	ldrh	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8098 	beq.w	80066d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a4:	8a3a      	ldrh	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8092 	bcs.w	80066d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8a3a      	ldrh	r2, [r7, #16]
 80065b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d02b      	beq.n	8006614 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0210 	bic.w	r2, r2, #16
 8006608:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd ffaf 	bl	8004572 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800661c:	b29b      	uxth	r3, r3
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f888 	bl	800673a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800662a:	e051      	b.n	80066d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006634:	b29b      	uxth	r3, r3
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d047      	beq.n	80066d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006644:	8a7b      	ldrh	r3, [r7, #18]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d044      	beq.n	80066d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006658:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0210 	bic.w	r2, r2, #16
 8006686:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006688:	8a7b      	ldrh	r3, [r7, #18]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f854 	bl	800673a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006692:	e01f      	b.n	80066d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_UART_IRQHandler+0x324>
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9f2 	bl	8006a92 <UART_Transmit_IT>
    return;
 80066ae:	e012      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <HAL_UART_IRQHandler+0x34a>
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fa33 	bl	8006b30 <UART_EndTransmit_IT>
    return;
 80066ca:	e004      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80066cc:	bf00      	nop
 80066ce:	e002      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80066d4:	bf00      	nop
  }
}
 80066d6:	3728      	adds	r7, #40	; 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	08006a6b 	.word	0x08006a6b

080066e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d113      	bne.n	8006794 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006780:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006790:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006792:	e002      	b.n	800679a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff ffa3 	bl	80066e0 <HAL_UART_TxCpltCallback>
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff ff9e 	bl	80066f2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d12a      	bne.n	8006830 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ee:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695a      	ldr	r2, [r3, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	2b01      	cmp	r3, #1
 800681e:	d107      	bne.n	8006830 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0210 	bic.w	r2, r2, #16
 800682e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	d106      	bne.n	8006846 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800683c:	4619      	mov	r1, r3
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff ff7b 	bl	800673a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006844:	e002      	b.n	800684c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff ff5c 	bl	8006704 <HAL_UART_RxCpltCallback>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	2b01      	cmp	r3, #1
 8006868:	d108      	bne.n	800687c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	4619      	mov	r1, r3
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff ff60 	bl	800673a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800687a:	e002      	b.n	8006882 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff ff4a 	bl	8006716 <HAL_UART_RxHalfCpltCallback>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	bf14      	ite	ne
 80068aa:	2301      	movne	r3, #1
 80068ac:	2300      	moveq	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b21      	cmp	r3, #33	; 0x21
 80068bc:	d108      	bne.n	80068d0 <UART_DMAError+0x46>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f000 f88c 	bl	80069e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b22      	cmp	r3, #34	; 0x22
 80068f0:	d108      	bne.n	8006904 <UART_DMAError+0x7a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068fe:	68b8      	ldr	r0, [r7, #8]
 8006900:	f000 f887 	bl	8006a12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	f043 0210 	orr.w	r2, r3, #16
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f7ff ff09 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2222      	movs	r2, #34	; 0x22
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	4a23      	ldr	r2, [pc, #140]	; (80069dc <UART_Start_Receive_DMA+0xbc>)
 800694e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <UART_Start_Receive_DMA+0xc0>)
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <UART_Start_Receive_DMA+0xc4>)
 800695e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	2200      	movs	r2, #0
 8006966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006968:	f107 0308 	add.w	r3, r7, #8
 800696c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3304      	adds	r3, #4
 8006978:	4619      	mov	r1, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	f7fd fd98 	bl	80044b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006984:	2300      	movs	r3, #0
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695a      	ldr	r2, [r3, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	080067bf 	.word	0x080067bf
 80069e0:	08006855 	.word	0x08006855
 80069e4:	0800688b 	.word	0x0800688b

080069e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695a      	ldr	r2, [r3, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d107      	bne.n	8006a52 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0210 	bic.w	r2, r2, #16
 8006a50:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff fe4f 	bl	8006728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b21      	cmp	r3, #33	; 0x21
 8006aa4:	d13e      	bne.n	8006b24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aae:	d114      	bne.n	8006ada <UART_Transmit_IT+0x48>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d110      	bne.n	8006ada <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006acc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	1c9a      	adds	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]
 8006ad8:	e008      	b.n	8006aec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	1c59      	adds	r1, r3, #1
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6211      	str	r1, [r2, #32]
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4619      	mov	r1, r3
 8006afa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10f      	bne.n	8006b20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	e000      	b.n	8006b26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b24:	2302      	movs	r3, #2
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff fdc5 	bl	80066e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b22      	cmp	r3, #34	; 0x22
 8006b72:	f040 8099 	bne.w	8006ca8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d117      	bne.n	8006bb0 <UART_Receive_IT+0x50>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d113      	bne.n	8006bb0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
 8006bae:	e026      	b.n	8006bfe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d007      	beq.n	8006bd4 <UART_Receive_IT+0x74>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <UART_Receive_IT+0x82>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e008      	b.n	8006bf4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d148      	bne.n	8006ca4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0220 	bic.w	r2, r2, #32
 8006c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d123      	bne.n	8006c9a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0210 	bic.w	r2, r2, #16
 8006c66:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b10      	cmp	r3, #16
 8006c74:	d10a      	bne.n	8006c8c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fd51 	bl	800673a <HAL_UARTEx_RxEventCallback>
 8006c98:	e002      	b.n	8006ca0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fd32 	bl	8006704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e002      	b.n	8006caa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006cee:	f023 030c 	bic.w	r3, r3, #12
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <UART_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d103      	bne.n	8006d24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d1c:	f7fe fd82 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	e002      	b.n	8006d2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fe fd6a 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 8006d28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009a      	lsls	r2, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <UART_SetConfig+0x118>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	0119      	lsls	r1, r3, #4
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009a      	lsls	r2, r3, #2
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <UART_SetConfig+0x118>)
 8006d62:	fba3 0302 	umull	r0, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2064      	movs	r0, #100	; 0x64
 8006d6a:	fb00 f303 	mul.w	r3, r0, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <UART_SetConfig+0x118>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d80:	4419      	add	r1, r3
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <UART_SetConfig+0x118>)
 8006d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	2064      	movs	r0, #100	; 0x64
 8006da2:	fb00 f303 	mul.w	r3, r0, r3
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	3332      	adds	r3, #50	; 0x32
 8006dac:	4a07      	ldr	r2, [pc, #28]	; (8006dcc <UART_SetConfig+0x118>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40013800 	.word	0x40013800
 8006dcc:	51eb851f 	.word	0x51eb851f

08006dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dd0:	480c      	ldr	r0, [pc, #48]	; (8006e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006dd2:	490d      	ldr	r1, [pc, #52]	; (8006e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dd8:	e002      	b.n	8006de0 <LoopCopyDataInit>

08006dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dde:	3304      	adds	r3, #4

08006de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006de4:	d3f9      	bcc.n	8006dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006de8:	4c0a      	ldr	r4, [pc, #40]	; (8006e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006dec:	e001      	b.n	8006df2 <LoopFillZerobss>

08006dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006df0:	3204      	adds	r2, #4

08006df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006df4:	d3fb      	bcc.n	8006dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006df6:	f7fc f863 	bl	8002ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dfa:	f010 f8f7 	bl	8016fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006dfe:	f7fb fce9 	bl	80027d4 <main>
  bx lr
 8006e02:	4770      	bx	lr
  ldr r0, =_sdata
 8006e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e08:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8006e0c:	0801a33c 	.word	0x0801a33c
  ldr r2, =_sbss
 8006e10:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8006e14:	2000d640 	.word	0x2000d640

08006e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e18:	e7fe      	b.n	8006e18 <ADC1_2_IRQHandler>
	...

08006e1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e22:	f3ef 8305 	mrs	r3, IPSR
 8006e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	607b      	str	r3, [r7, #4]
  return(result);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <osKernelInitialize+0x32>
 8006e3a:	4b10      	ldr	r3, [pc, #64]	; (8006e7c <osKernelInitialize+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d109      	bne.n	8006e56 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e42:	f3ef 8311 	mrs	r3, BASEPRI
 8006e46:	603b      	str	r3, [r7, #0]
  return(result);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e4e:	f06f 0305 	mvn.w	r3, #5
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e00c      	b.n	8006e70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <osKernelInitialize+0x60>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006e5e:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <osKernelInitialize+0x60>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e002      	b.n	8006e70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e70:	68fb      	ldr	r3, [r7, #12]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr
 8006e7c:	20003240 	.word	0x20003240

08006e80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e86:	f3ef 8305 	mrs	r3, IPSR
 8006e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e92:	f3ef 8310 	mrs	r3, PRIMASK
 8006e96:	607b      	str	r3, [r7, #4]
  return(result);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <osKernelStart+0x32>
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <osKernelStart+0x64>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d109      	bne.n	8006eba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <osKernelStart+0x3a>
    stat = osErrorISR;
 8006eb2:	f06f 0305 	mvn.w	r3, #5
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e00e      	b.n	8006ed8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <osKernelStart+0x64>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <osKernelStart+0x64>)
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006ec8:	f001 f99e 	bl	8008208 <vTaskStartScheduler>
      stat = osOK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e002      	b.n	8006ed8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ed6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20003240 	.word	0x20003240

08006ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b092      	sub	sp, #72	; 0x48
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef8:	f3ef 8305 	mrs	r3, IPSR
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 8094 	bne.w	800702e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f06:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0a:	623b      	str	r3, [r7, #32]
  return(result);
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 808d 	bne.w	800702e <osThreadNew+0x146>
 8006f14:	4b48      	ldr	r3, [pc, #288]	; (8007038 <osThreadNew+0x150>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d106      	bne.n	8006f2a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f20:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f040 8082 	bne.w	800702e <osThreadNew+0x146>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d07e      	beq.n	800702e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006f34:	2318      	movs	r3, #24
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006f38:	2300      	movs	r3, #0
 8006f3a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006f3c:	f107 031b 	add.w	r3, r7, #27
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d045      	beq.n	8006fda <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <osThreadNew+0x74>
        name = attr->name;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <osThreadNew+0x9a>
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b38      	cmp	r3, #56	; 0x38
 8006f74:	d805      	bhi.n	8006f82 <osThreadNew+0x9a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <osThreadNew+0x9e>
        return (NULL);
 8006f82:	2300      	movs	r3, #0
 8006f84:	e054      	b.n	8007030 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	089b      	lsrs	r3, r3, #2
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00e      	beq.n	8006fbc <osThreadNew+0xd4>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b5b      	cmp	r3, #91	; 0x5b
 8006fa4:	d90a      	bls.n	8006fbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <osThreadNew+0xd4>
        mem = 1;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fba:	e010      	b.n	8006fde <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10c      	bne.n	8006fde <osThreadNew+0xf6>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d108      	bne.n	8006fde <osThreadNew+0xf6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <osThreadNew+0xf6>
          mem = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd8:	e001      	b.n	8006fde <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d110      	bne.n	8007006 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 ff38 	bl	8007e70 <xTaskCreateStatic>
 8007000:	4603      	mov	r3, r0
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e013      	b.n	800702e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d110      	bne.n	800702e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	b29a      	uxth	r2, r3
 8007010:	f107 0314 	add.w	r3, r7, #20
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 ff82 	bl	8007f28 <xTaskCreate>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d001      	beq.n	800702e <osThreadNew+0x146>
          hTask = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3738      	adds	r7, #56	; 0x38
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20003240 	.word	0x20003240

0800703c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007044:	f3ef 8305 	mrs	r3, IPSR
 8007048:	613b      	str	r3, [r7, #16]
  return(result);
 800704a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	60fb      	str	r3, [r7, #12]
  return(result);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <osDelay+0x34>
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <osDelay+0x58>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d109      	bne.n	8007078 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007064:	f3ef 8311 	mrs	r3, BASEPRI
 8007068:	60bb      	str	r3, [r7, #8]
  return(result);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <osDelay+0x3c>
    stat = osErrorISR;
 8007070:	f06f 0305 	mvn.w	r3, #5
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	e007      	b.n	8007088 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 f88c 	bl	80081a0 <vTaskDelay>
    }
  }

  return (stat);
 8007088:	697b      	ldr	r3, [r7, #20]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20003240 	.word	0x20003240

08007098 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a4:	f3ef 8305 	mrs	r3, IPSR
 80070a8:	613b      	str	r3, [r7, #16]
  return(result);
 80070aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8085 	bne.w	80071bc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b2:	f3ef 8310 	mrs	r3, PRIMASK
 80070b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d17e      	bne.n	80071bc <osMutexNew+0x124>
 80070be:	4b42      	ldr	r3, [pc, #264]	; (80071c8 <osMutexNew+0x130>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d105      	bne.n	80070d2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070c6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d174      	bne.n	80071bc <osMutexNew+0x124>
    if (attr != NULL) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	623b      	str	r3, [r7, #32]
 80070de:	e001      	b.n	80070e4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <osMutexNew+0x5c>
      rmtx = 1U;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e001      	b.n	80070f8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d15c      	bne.n	80071bc <osMutexNew+0x124>
      mem = -1;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007106:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d015      	beq.n	800713a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <osMutexNew+0x8c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b4f      	cmp	r3, #79	; 0x4f
 800711c:	d902      	bls.n	8007124 <osMutexNew+0x8c>
          mem = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e00c      	b.n	800713e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <osMutexNew+0xa6>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <osMutexNew+0xa6>
            mem = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e001      	b.n	800713e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d112      	bne.n	800716a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	4619      	mov	r1, r3
 8007150:	2004      	movs	r0, #4
 8007152:	f000 fa8f 	bl	8007674 <xQueueCreateMutexStatic>
 8007156:	6278      	str	r0, [r7, #36]	; 0x24
 8007158:	e016      	b.n	8007188 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4619      	mov	r1, r3
 8007160:	2001      	movs	r0, #1
 8007162:	f000 fa87 	bl	8007674 <xQueueCreateMutexStatic>
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
 8007168:	e00e      	b.n	8007188 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007176:	2004      	movs	r0, #4
 8007178:	f000 fa64 	bl	8007644 <xQueueCreateMutex>
 800717c:	6278      	str	r0, [r7, #36]	; 0x24
 800717e:	e003      	b.n	8007188 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007180:	2001      	movs	r0, #1
 8007182:	f000 fa5f 	bl	8007644 <xQueueCreateMutex>
 8007186:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <osMutexNew+0x110>
        if (attr != NULL) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <osMutexNew+0x104>
          name = attr->name;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e001      	b.n	80071a0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80071a0:	6979      	ldr	r1, [r7, #20]
 80071a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071a4:	f000 fe08 	bl	8007db8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d006      	beq.n	80071bc <osMutexNew+0x124>
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	; 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20003240 	.word	0x20003240

080071cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4a06      	ldr	r2, [pc, #24]	; (80071f4 <vApplicationGetIdleTaskMemory+0x28>)
 80071dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4a05      	ldr	r2, [pc, #20]	; (80071f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80071e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2280      	movs	r2, #128	; 0x80
 80071e8:	601a      	str	r2, [r3, #0]
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr
 80071f4:	20003244 	.word	0x20003244
 80071f8:	200032a0 	.word	0x200032a0

080071fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a07      	ldr	r2, [pc, #28]	; (8007228 <vApplicationGetTimerTaskMemory+0x2c>)
 800720c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	4a06      	ldr	r2, [pc, #24]	; (800722c <vApplicationGetTimerTaskMemory+0x30>)
 8007212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800721a:	601a      	str	r2, [r3, #0]
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	200034a0 	.word	0x200034a0
 800722c:	200034fc 	.word	0x200034fc

08007230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 0208 	add.w	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f103 0208 	add.w	r2, r3, #8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f103 0208 	add.w	r2, r3, #8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007286:	b480      	push	{r7}
 8007288:	b085      	sub	sp, #20
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e2:	d103      	bne.n	80072ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e00c      	b.n	8007306 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3308      	adds	r3, #8
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e002      	b.n	80072fa <vListInsert+0x2e>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	d2f6      	bcs.n	80072f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6892      	ldr	r2, [r2, #8]
 8007352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6852      	ldr	r2, [r2, #4]
 800735c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d103      	bne.n	8007370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	1e5a      	subs	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr
	...

08007390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericReset+0x2a>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60bb      	str	r3, [r7, #8]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073ba:	f002 f877 	bl	80094ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	441a      	add	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	3b01      	subs	r3, #1
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d114      	bne.n	800743a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3310      	adds	r3, #16
 800741c:	4618      	mov	r0, r3
 800741e:	f001 f97d 	bl	800871c <xTaskRemoveFromEventList>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d012      	beq.n	800744e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <xQueueGenericReset+0xcc>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	e009      	b.n	800744e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3310      	adds	r3, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fef6 	bl	8007230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff fef1 	bl	8007230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800744e:	f002 f85d 	bl	800950c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007452:	2301      	movs	r3, #1
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <xQueueGenericCreateStatic+0x52>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <xQueueGenericCreateStatic+0x56>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericCreateStatic+0x58>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <xQueueGenericCreateStatic+0x7e>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <xQueueGenericCreateStatic+0x82>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <xQueueGenericCreateStatic+0x84>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	61fb      	str	r3, [r7, #28]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074fe:	2350      	movs	r3, #80	; 0x50
 8007500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d00a      	beq.n	800751e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	61bb      	str	r3, [r7, #24]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f843 	bl	80075ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007546:	4618      	mov	r0, r3
 8007548:	3730      	adds	r7, #48	; 0x30
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800754e:	b580      	push	{r7, lr}
 8007550:	b08a      	sub	sp, #40	; 0x28
 8007552:	af02      	add	r7, sp, #8
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	4613      	mov	r3, r2
 800755a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	613b      	str	r3, [r7, #16]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	e004      	b.n	800758e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3350      	adds	r3, #80	; 0x50
 8007592:	4618      	mov	r0, r3
 8007594:	f002 f88a 	bl	80096ac <pvPortMalloc>
 8007598:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00f      	beq.n	80075c0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	3350      	adds	r3, #80	; 0x50
 80075a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075ae:	79fa      	ldrb	r2, [r7, #7]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f805 	bl	80075ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80075c0:	69bb      	ldr	r3, [r7, #24]
	}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e002      	b.n	80075ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075f8:	2101      	movs	r1, #1
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	f7ff fec8 	bl	8007390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f838 	bl	80076ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800764e:	2301      	movs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	461a      	mov	r2, r3
 800765a:	6939      	ldr	r1, [r7, #16]
 800765c:	6978      	ldr	r0, [r7, #20]
 800765e:	f7ff ff76 	bl	800754e <xQueueGenericCreate>
 8007662:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ffd3 	bl	8007610 <prvInitialiseMutex>

		return pxNewQueue;
 800766a:	68fb      	ldr	r3, [r7, #12]
	}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af02      	add	r7, sp, #8
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007680:	2301      	movs	r3, #1
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	6939      	ldr	r1, [r7, #16]
 8007692:	6978      	ldr	r0, [r7, #20]
 8007694:	f7ff fee4 	bl	8007460 <xQueueGenericCreateStatic>
 8007698:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff ffb8 	bl	8007610 <prvInitialiseMutex>

		return pxNewQueue;
 80076a0:	68fb      	ldr	r3, [r7, #12]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08e      	sub	sp, #56	; 0x38
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076ba:	2300      	movs	r3, #0
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericSend+0x32>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <xQueueGenericSend+0x40>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xQueueGenericSend+0x44>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <xQueueGenericSend+0x46>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <xQueueGenericSend+0x60>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d103      	bne.n	800771a <xQueueGenericSend+0x6e>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <xQueueGenericSend+0x72>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueGenericSend+0x74>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xQueueGenericSend+0x8e>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	623b      	str	r3, [r7, #32]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800773a:	f001 f9d7 	bl	8008aec <xTaskGetSchedulerState>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <xQueueGenericSend+0x9e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <xQueueGenericSend+0xa2>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <xQueueGenericSend+0xa4>
 800774e:	2300      	movs	r3, #0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueGenericSend+0xbe>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	61fb      	str	r3, [r7, #28]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800776a:	f001 fe9f 	bl	80094ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <xQueueGenericSend+0xd4>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d129      	bne.n	80077d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007786:	f000 fa07 	bl	8007b98 <prvCopyDataToQueue>
 800778a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d010      	beq.n	80077b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	4618      	mov	r0, r3
 800779a:	f000 ffbf 	bl	800871c <xTaskRemoveFromEventList>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077a4:	4b3f      	ldr	r3, [pc, #252]	; (80078a4 <xQueueGenericSend+0x1f8>)
 80077a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	e00a      	b.n	80077cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077bc:	4b39      	ldr	r3, [pc, #228]	; (80078a4 <xQueueGenericSend+0x1f8>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077cc:	f001 fe9e 	bl	800950c <vPortExitCritical>
				return pdPASS;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e063      	b.n	800789c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077da:	f001 fe97 	bl	800950c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	e05c      	b.n	800789c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 f81f 	bl	8008830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077f6:	f001 fe89 	bl	800950c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077fa:	f000 fd6b 	bl	80082d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077fe:	f001 fe55 	bl	80094ac <vPortEnterCritical>
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007808:	b25b      	sxtb	r3, r3
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800780e:	d103      	bne.n	8007818 <xQueueGenericSend+0x16c>
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800781e:	b25b      	sxtb	r3, r3
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007824:	d103      	bne.n	800782e <xQueueGenericSend+0x182>
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800782e:	f001 fe6d 	bl	800950c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007832:	1d3a      	adds	r2, r7, #4
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f80e 	bl	800885c <xTaskCheckForTimeOut>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d124      	bne.n	8007890 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007848:	f000 fa9e 	bl	8007d88 <prvIsQueueFull>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d018      	beq.n	8007884 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	3310      	adds	r3, #16
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ff0e 	bl	800867c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007862:	f000 fa29 	bl	8007cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007866:	f000 fd43 	bl	80082f0 <xTaskResumeAll>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	f47f af7c 	bne.w	800776a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <xQueueGenericSend+0x1f8>)
 8007874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	e772      	b.n	800776a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007886:	f000 fa17 	bl	8007cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800788a:	f000 fd31 	bl	80082f0 <xTaskResumeAll>
 800788e:	e76c      	b.n	800776a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007892:	f000 fa11 	bl	8007cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007896:	f000 fd2b 	bl	80082f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800789a:	2300      	movs	r3, #0
		}
	}
}
 800789c:	4618      	mov	r0, r3
 800789e:	3738      	adds	r7, #56	; 0x38
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <xQueueGenericSendFromISR+0x3c>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <xQueueGenericSendFromISR+0x40>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <xQueueGenericSendFromISR+0x42>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	623b      	str	r3, [r7, #32]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d103      	bne.n	8007912 <xQueueGenericSendFromISR+0x6a>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <xQueueGenericSendFromISR+0x6e>
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <xQueueGenericSendFromISR+0x70>
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	61fb      	str	r3, [r7, #28]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007932:	f001 fe7d 	bl	8009630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007936:	f3ef 8211 	mrs	r2, BASEPRI
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	61ba      	str	r2, [r7, #24]
 800794c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800794e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <xQueueGenericSendFromISR+0xbc>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d12c      	bne.n	80079be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800796a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007974:	f000 f910 	bl	8007b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007978:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007980:	d112      	bne.n	80079a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	3324      	adds	r3, #36	; 0x24
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fec4 	bl	800871c <xTaskRemoveFromEventList>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00e      	beq.n	80079b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e007      	b.n	80079b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079ac:	3301      	adds	r3, #1
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	b25a      	sxtb	r2, r3
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079b8:	2301      	movs	r3, #1
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80079bc:	e001      	b.n	80079c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3738      	adds	r7, #56	; 0x38
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08c      	sub	sp, #48	; 0x30
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <xQueueReceive+0x30>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	623b      	str	r3, [r7, #32]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <xQueueReceive+0x3e>
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <xQueueReceive+0x42>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <xQueueReceive+0x44>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xQueueReceive+0x5e>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	61fb      	str	r3, [r7, #28]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a36:	f001 f859 	bl	8008aec <xTaskGetSchedulerState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <xQueueReceive+0x6e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <xQueueReceive+0x72>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <xQueueReceive+0x74>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10a      	bne.n	8007a66 <xQueueReceive+0x8e>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	61bb      	str	r3, [r7, #24]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a66:	f001 fd21 	bl	80094ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01f      	beq.n	8007ab6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7a:	f000 f8f7 	bl	8007c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	1e5a      	subs	r2, r3, #1
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00f      	beq.n	8007aae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	3310      	adds	r3, #16
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fe42 	bl	800871c <xTaskRemoveFromEventList>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a9e:	4b3d      	ldr	r3, [pc, #244]	; (8007b94 <xQueueReceive+0x1bc>)
 8007aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007aae:	f001 fd2d 	bl	800950c <vPortExitCritical>
				return pdPASS;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e069      	b.n	8007b8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d103      	bne.n	8007ac4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007abc:	f001 fd26 	bl	800950c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e062      	b.n	8007b8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aca:	f107 0310 	add.w	r3, r7, #16
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 feae 	bl	8008830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ad8:	f001 fd18 	bl	800950c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007adc:	f000 fbfa 	bl	80082d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ae0:	f001 fce4 	bl	80094ac <vPortEnterCritical>
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aea:	b25b      	sxtb	r3, r3
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af0:	d103      	bne.n	8007afa <xQueueReceive+0x122>
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b06:	d103      	bne.n	8007b10 <xQueueReceive+0x138>
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b10:	f001 fcfc 	bl	800950c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b14:	1d3a      	adds	r2, r7, #4
 8007b16:	f107 0310 	add.w	r3, r7, #16
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fe9d 	bl	800885c <xTaskCheckForTimeOut>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d123      	bne.n	8007b70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b2a:	f000 f917 	bl	8007d5c <prvIsQueueEmpty>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	3324      	adds	r3, #36	; 0x24
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fd9d 	bl	800867c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b44:	f000 f8b8 	bl	8007cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b48:	f000 fbd2 	bl	80082f0 <xTaskResumeAll>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d189      	bne.n	8007a66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b52:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <xQueueReceive+0x1bc>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	e780      	b.n	8007a66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b66:	f000 f8a7 	bl	8007cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b6a:	f000 fbc1 	bl	80082f0 <xTaskResumeAll>
 8007b6e:	e77a      	b.n	8007a66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b72:	f000 f8a1 	bl	8007cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b76:	f000 fbbb 	bl	80082f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7c:	f000 f8ee 	bl	8007d5c <prvIsQueueEmpty>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f43f af6f 	beq.w	8007a66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3730      	adds	r7, #48	; 0x30
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10d      	bne.n	8007bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d14d      	bne.n	8007c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 ffb0 	bl	8008b28 <xTaskPriorityDisinherit>
 8007bc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	e043      	b.n	8007c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d119      	bne.n	8007c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6898      	ldr	r0, [r3, #8]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	461a      	mov	r2, r3
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	f00f fa36 	bl	8017054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d32b      	bcc.n	8007c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	609a      	str	r2, [r3, #8]
 8007c0a:	e026      	b.n	8007c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68d8      	ldr	r0, [r3, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	461a      	mov	r2, r3
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	f00f fa1c 	bl	8017054 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	425b      	negs	r3, r3
 8007c26:	441a      	add	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d207      	bcs.n	8007c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	425b      	negs	r3, r3
 8007c42:	441a      	add	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d105      	bne.n	8007c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c62:	697b      	ldr	r3, [r7, #20]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d018      	beq.n	8007cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d303      	bcc.n	8007ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68d9      	ldr	r1, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6838      	ldr	r0, [r7, #0]
 8007cac:	f00f f9d2 	bl	8017054 <memcpy>
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cc0:	f001 fbf4 	bl	80094ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ccc:	e011      	b.n	8007cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d012      	beq.n	8007cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3324      	adds	r3, #36	; 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fd1e 	bl	800871c <xTaskRemoveFromEventList>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ce6:	f000 fe1b 	bl	8008920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dce9      	bgt.n	8007cce <prvUnlockQueue+0x16>
 8007cfa:	e000      	b.n	8007cfe <prvUnlockQueue+0x46>
					break;
 8007cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d06:	f001 fc01 	bl	800950c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d0a:	f001 fbcf 	bl	80094ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d16:	e011      	b.n	8007d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d012      	beq.n	8007d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3310      	adds	r3, #16
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fcf9 	bl	800871c <xTaskRemoveFromEventList>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d30:	f000 fdf6 	bl	8008920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dce9      	bgt.n	8007d18 <prvUnlockQueue+0x60>
 8007d44:	e000      	b.n	8007d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	22ff      	movs	r2, #255	; 0xff
 8007d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d50:	f001 fbdc 	bl	800950c <vPortExitCritical>
}
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d64:	f001 fba2 	bl	80094ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e001      	b.n	8007d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d7a:	f001 fbc7 	bl	800950c <vPortExitCritical>

	return xReturn;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d90:	f001 fb8c 	bl	80094ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d102      	bne.n	8007da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	e001      	b.n	8007daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007daa:	f001 fbaf 	bl	800950c <vPortExitCritical>

	return xReturn;
 8007dae:	68fb      	ldr	r3, [r7, #12]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e014      	b.n	8007df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dc8:	4a0e      	ldr	r2, [pc, #56]	; (8007e04 <vQueueAddToRegistry+0x4c>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007dd4:	490b      	ldr	r1, [pc, #44]	; (8007e04 <vQueueAddToRegistry+0x4c>)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <vQueueAddToRegistry+0x4c>)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dea:	e006      	b.n	8007dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b07      	cmp	r3, #7
 8007df6:	d9e7      	bls.n	8007dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	20008450 	.word	0x20008450

08007e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e18:	f001 fb48 	bl	80094ac <vPortEnterCritical>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e22:	b25b      	sxtb	r3, r3
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e28:	d103      	bne.n	8007e32 <vQueueWaitForMessageRestricted+0x2a>
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3e:	d103      	bne.n	8007e48 <vQueueWaitForMessageRestricted+0x40>
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e48:	f001 fb60 	bl	800950c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	3324      	adds	r3, #36	; 0x24
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fc31 	bl	80086c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e62:	6978      	ldr	r0, [r7, #20]
 8007e64:	f7ff ff28 	bl	8007cb8 <prvUnlockQueue>
	}
 8007e68:	bf00      	nop
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08e      	sub	sp, #56	; 0x38
 8007e74:	af04      	add	r7, sp, #16
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	623b      	str	r3, [r7, #32]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61fb      	str	r3, [r7, #28]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007eb6:	235c      	movs	r3, #92	; 0x5c
 8007eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ebe:	d00a      	beq.n	8007ed6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	61bb      	str	r3, [r7, #24]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <xTaskCreateStatic+0xaa>
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f850 	bl	8007fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f14:	f000 f8d4 	bl	80080c0 <prvAddNewTaskToReadyList>
 8007f18:	e001      	b.n	8007f1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f1e:	697b      	ldr	r3, [r7, #20]
	}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 fbb5 	bl	80096ac <pvPortMalloc>
 8007f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f4a:	205c      	movs	r0, #92	; 0x5c
 8007f4c:	f001 fbae 	bl	80096ac <pvPortMalloc>
 8007f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f5e:	e005      	b.n	8007f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f60:	6978      	ldr	r0, [r7, #20]
 8007f62:	f001 fc67 	bl	8009834 <vPortFree>
 8007f66:	e001      	b.n	8007f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d017      	beq.n	8007fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f7a:	88fa      	ldrh	r2, [r7, #6]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f80e 	bl	8007fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f96:	69f8      	ldr	r0, [r7, #28]
 8007f98:	f000 f892 	bl	80080c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	e002      	b.n	8007fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	21a5      	movs	r1, #165	; 0xa5
 8007fcc:	f00f f86a 	bl	80170a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	617b      	str	r3, [r7, #20]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	e012      	b.n	8008036 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	3334      	adds	r3, #52	; 0x34
 8008020:	460a      	mov	r2, r1
 8008022:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3301      	adds	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b0f      	cmp	r3, #15
 800803a:	d9e9      	bls.n	8008010 <prvInitialiseNewTask+0x5e>
 800803c:	e000      	b.n	8008040 <prvInitialiseNewTask+0x8e>
		{
			break;
 800803e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	2b37      	cmp	r3, #55	; 0x37
 800804c:	d901      	bls.n	8008052 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800804e:	2337      	movs	r3, #55	; 0x37
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800805c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	2200      	movs	r2, #0
 8008062:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	3304      	adds	r3, #4
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff f900 	bl	800726e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	3318      	adds	r3, #24
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff f8fb 	bl	800726e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	2200      	movs	r2, #0
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	69b8      	ldr	r0, [r7, #24]
 80080a2:	f001 f915 	bl	80092d0 <pxPortInitialiseStack>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b8:	bf00      	nop
 80080ba:	3720      	adds	r7, #32
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080c8:	f001 f9f0 	bl	80094ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080cc:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <prvAddNewTaskToReadyList+0xc4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <prvAddNewTaskToReadyList+0xc4>)
 80080d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080d6:	4b2c      	ldr	r3, [pc, #176]	; (8008188 <prvAddNewTaskToReadyList+0xc8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080de:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <prvAddNewTaskToReadyList+0xc8>)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080e4:	4b27      	ldr	r3, [pc, #156]	; (8008184 <prvAddNewTaskToReadyList+0xc4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d110      	bne.n	800810e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080ec:	f000 fc3c 	bl	8008968 <prvInitialiseTaskLists>
 80080f0:	e00d      	b.n	800810e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080f2:	4b26      	ldr	r3, [pc, #152]	; (800818c <prvAddNewTaskToReadyList+0xcc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <prvAddNewTaskToReadyList+0xc8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	429a      	cmp	r2, r3
 8008106:	d802      	bhi.n	800810e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008108:	4a1f      	ldr	r2, [pc, #124]	; (8008188 <prvAddNewTaskToReadyList+0xc8>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <prvAddNewTaskToReadyList+0xd0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	4a1e      	ldr	r2, [pc, #120]	; (8008190 <prvAddNewTaskToReadyList+0xd0>)
 8008116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <prvAddNewTaskToReadyList+0xd0>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008124:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <prvAddNewTaskToReadyList+0xd4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d903      	bls.n	8008134 <prvAddNewTaskToReadyList+0x74>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	4a18      	ldr	r2, [pc, #96]	; (8008194 <prvAddNewTaskToReadyList+0xd4>)
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4a15      	ldr	r2, [pc, #84]	; (8008198 <prvAddNewTaskToReadyList+0xd8>)
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3304      	adds	r3, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7ff f89b 	bl	8007286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008150:	f001 f9dc 	bl	800950c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008154:	4b0d      	ldr	r3, [pc, #52]	; (800818c <prvAddNewTaskToReadyList+0xcc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00e      	beq.n	800817a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <prvAddNewTaskToReadyList+0xc8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	429a      	cmp	r2, r3
 8008168:	d207      	bcs.n	800817a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <prvAddNewTaskToReadyList+0xdc>)
 800816c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20003dd0 	.word	0x20003dd0
 8008188:	200038fc 	.word	0x200038fc
 800818c:	20003ddc 	.word	0x20003ddc
 8008190:	20003dec 	.word	0x20003dec
 8008194:	20003dd8 	.word	0x20003dd8
 8008198:	20003900 	.word	0x20003900
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d017      	beq.n	80081e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <vTaskDelay+0x60>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <vTaskDelay+0x30>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	60bb      	str	r3, [r7, #8]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081d0:	f000 f880 	bl	80082d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081d4:	2100      	movs	r1, #0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fd14 	bl	8008c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081dc:	f000 f888 	bl	80082f0 <xTaskResumeAll>
 80081e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d107      	bne.n	80081f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <vTaskDelay+0x64>)
 80081ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20003df8 	.word	0x20003df8
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08a      	sub	sp, #40	; 0x28
 800820c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008216:	463a      	mov	r2, r7
 8008218:	1d39      	adds	r1, r7, #4
 800821a:	f107 0308 	add.w	r3, r7, #8
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe ffd4 	bl	80071cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	9202      	str	r2, [sp, #8]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	460a      	mov	r2, r1
 8008236:	4921      	ldr	r1, [pc, #132]	; (80082bc <vTaskStartScheduler+0xb4>)
 8008238:	4821      	ldr	r0, [pc, #132]	; (80082c0 <vTaskStartScheduler+0xb8>)
 800823a:	f7ff fe19 	bl	8007e70 <xTaskCreateStatic>
 800823e:	4603      	mov	r3, r0
 8008240:	4a20      	ldr	r2, [pc, #128]	; (80082c4 <vTaskStartScheduler+0xbc>)
 8008242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008244:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <vTaskStartScheduler+0xbc>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e001      	b.n	8008256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008252:	2300      	movs	r3, #0
 8008254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d102      	bne.n	8008262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800825c:	f000 fd26 	bl	8008cac <xTimerCreateTimerTask>
 8008260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d116      	bne.n	8008296 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	613b      	str	r3, [r7, #16]
}
 800827a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800827c:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <vTaskStartScheduler+0xc0>)
 800827e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008284:	4b11      	ldr	r3, [pc, #68]	; (80082cc <vTaskStartScheduler+0xc4>)
 8008286:	2201      	movs	r2, #1
 8008288:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <vTaskStartScheduler+0xc8>)
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008290:	f001 f89a 	bl	80093c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008294:	e00e      	b.n	80082b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800829c:	d10a      	bne.n	80082b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60fb      	str	r3, [r7, #12]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <vTaskStartScheduler+0xaa>
}
 80082b4:	bf00      	nop
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	080189a4 	.word	0x080189a4
 80082c0:	08008939 	.word	0x08008939
 80082c4:	20003df4 	.word	0x20003df4
 80082c8:	20003df0 	.word	0x20003df0
 80082cc:	20003ddc 	.word	0x20003ddc
 80082d0:	20003dd4 	.word	0x20003dd4

080082d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <vTaskSuspendAll+0x18>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	4a03      	ldr	r2, [pc, #12]	; (80082ec <vTaskSuspendAll+0x18>)
 80082e0:	6013      	str	r3, [r2, #0]
}
 80082e2:	bf00      	nop
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20003df8 	.word	0x20003df8

080082f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082fe:	4b42      	ldr	r3, [pc, #264]	; (8008408 <xTaskResumeAll+0x118>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <xTaskResumeAll+0x2c>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	603b      	str	r3, [r7, #0]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800831c:	f001 f8c6 	bl	80094ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <xTaskResumeAll+0x118>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	4a38      	ldr	r2, [pc, #224]	; (8008408 <xTaskResumeAll+0x118>)
 8008328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <xTaskResumeAll+0x118>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d162      	bne.n	80083f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008332:	4b36      	ldr	r3, [pc, #216]	; (800840c <xTaskResumeAll+0x11c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d05e      	beq.n	80083f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800833a:	e02f      	b.n	800839c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800833c:	4b34      	ldr	r3, [pc, #208]	; (8008410 <xTaskResumeAll+0x120>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3318      	adds	r3, #24
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fff7 	bl	800733c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3304      	adds	r3, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fff2 	bl	800733c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	4b2d      	ldr	r3, [pc, #180]	; (8008414 <xTaskResumeAll+0x124>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	d903      	bls.n	800836c <xTaskResumeAll+0x7c>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	4a2a      	ldr	r2, [pc, #168]	; (8008414 <xTaskResumeAll+0x124>)
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4a27      	ldr	r2, [pc, #156]	; (8008418 <xTaskResumeAll+0x128>)
 800837a:	441a      	add	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f7fe ff7f 	bl	8007286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838c:	4b23      	ldr	r3, [pc, #140]	; (800841c <xTaskResumeAll+0x12c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	429a      	cmp	r2, r3
 8008394:	d302      	bcc.n	800839c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008396:	4b22      	ldr	r3, [pc, #136]	; (8008420 <xTaskResumeAll+0x130>)
 8008398:	2201      	movs	r2, #1
 800839a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800839c:	4b1c      	ldr	r3, [pc, #112]	; (8008410 <xTaskResumeAll+0x120>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1cb      	bne.n	800833c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083aa:	f000 fb7b 	bl	8008aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80083ae:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <xTaskResumeAll+0x134>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d010      	beq.n	80083dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083ba:	f000 f845 	bl	8008448 <xTaskIncrementTick>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80083c4:	4b16      	ldr	r3, [pc, #88]	; (8008420 <xTaskResumeAll+0x130>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f1      	bne.n	80083ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80083d6:	4b13      	ldr	r3, [pc, #76]	; (8008424 <xTaskResumeAll+0x134>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <xTaskResumeAll+0x130>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083e8:	4b0f      	ldr	r3, [pc, #60]	; (8008428 <xTaskResumeAll+0x138>)
 80083ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083f8:	f001 f888 	bl	800950c <vPortExitCritical>

	return xAlreadyYielded;
 80083fc:	68bb      	ldr	r3, [r7, #8]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20003df8 	.word	0x20003df8
 800840c:	20003dd0 	.word	0x20003dd0
 8008410:	20003d90 	.word	0x20003d90
 8008414:	20003dd8 	.word	0x20003dd8
 8008418:	20003900 	.word	0x20003900
 800841c:	200038fc 	.word	0x200038fc
 8008420:	20003de4 	.word	0x20003de4
 8008424:	20003de0 	.word	0x20003de0
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008432:	4b04      	ldr	r3, [pc, #16]	; (8008444 <xTaskGetTickCount+0x18>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008438:	687b      	ldr	r3, [r7, #4]
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	20003dd4 	.word	0x20003dd4

08008448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008452:	4b51      	ldr	r3, [pc, #324]	; (8008598 <xTaskIncrementTick+0x150>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 808e 	bne.w	8008578 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800845c:	4b4f      	ldr	r3, [pc, #316]	; (800859c <xTaskIncrementTick+0x154>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008464:	4a4d      	ldr	r2, [pc, #308]	; (800859c <xTaskIncrementTick+0x154>)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d120      	bne.n	80084b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008470:	4b4b      	ldr	r3, [pc, #300]	; (80085a0 <xTaskIncrementTick+0x158>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <xTaskIncrementTick+0x48>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	603b      	str	r3, [r7, #0]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xTaskIncrementTick+0x46>
 8008490:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <xTaskIncrementTick+0x158>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	4b43      	ldr	r3, [pc, #268]	; (80085a4 <xTaskIncrementTick+0x15c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a41      	ldr	r2, [pc, #260]	; (80085a0 <xTaskIncrementTick+0x158>)
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4a41      	ldr	r2, [pc, #260]	; (80085a4 <xTaskIncrementTick+0x15c>)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	4b40      	ldr	r3, [pc, #256]	; (80085a8 <xTaskIncrementTick+0x160>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3301      	adds	r3, #1
 80084aa:	4a3f      	ldr	r2, [pc, #252]	; (80085a8 <xTaskIncrementTick+0x160>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	f000 faf9 	bl	8008aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084b2:	4b3e      	ldr	r3, [pc, #248]	; (80085ac <xTaskIncrementTick+0x164>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d34e      	bcc.n	800855a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084bc:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <xTaskIncrementTick+0x158>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <xTaskIncrementTick+0x82>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <xTaskIncrementTick+0x84>
 80084ca:	2300      	movs	r3, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d0:	4b36      	ldr	r3, [pc, #216]	; (80085ac <xTaskIncrementTick+0x164>)
 80084d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d6:	601a      	str	r2, [r3, #0]
					break;
 80084d8:	e03f      	b.n	800855a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084da:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <xTaskIncrementTick+0x158>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d203      	bcs.n	80084fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084f2:	4a2e      	ldr	r2, [pc, #184]	; (80085ac <xTaskIncrementTick+0x164>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6013      	str	r3, [r2, #0]
						break;
 80084f8:	e02f      	b.n	800855a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe ff1c 	bl	800733c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3318      	adds	r3, #24
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe ff13 	bl	800733c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851a:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <xTaskIncrementTick+0x168>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d903      	bls.n	800852a <xTaskIncrementTick+0xe2>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	4a22      	ldr	r2, [pc, #136]	; (80085b0 <xTaskIncrementTick+0x168>)
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <xTaskIncrementTick+0x16c>)
 8008538:	441a      	add	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7fe fea0 	bl	8007286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <xTaskIncrementTick+0x170>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	429a      	cmp	r2, r3
 8008552:	d3b3      	bcc.n	80084bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008554:	2301      	movs	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008558:	e7b0      	b.n	80084bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <xTaskIncrementTick+0x170>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008560:	4914      	ldr	r1, [pc, #80]	; (80085b4 <xTaskIncrementTick+0x16c>)
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d907      	bls.n	8008582 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008572:	2301      	movs	r3, #1
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e004      	b.n	8008582 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008578:	4b10      	ldr	r3, [pc, #64]	; (80085bc <xTaskIncrementTick+0x174>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	4a0f      	ldr	r2, [pc, #60]	; (80085bc <xTaskIncrementTick+0x174>)
 8008580:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <xTaskIncrementTick+0x178>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800858a:	2301      	movs	r3, #1
 800858c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800858e:	697b      	ldr	r3, [r7, #20]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20003df8 	.word	0x20003df8
 800859c:	20003dd4 	.word	0x20003dd4
 80085a0:	20003d88 	.word	0x20003d88
 80085a4:	20003d8c 	.word	0x20003d8c
 80085a8:	20003de8 	.word	0x20003de8
 80085ac:	20003df0 	.word	0x20003df0
 80085b0:	20003dd8 	.word	0x20003dd8
 80085b4:	20003900 	.word	0x20003900
 80085b8:	200038fc 	.word	0x200038fc
 80085bc:	20003de0 	.word	0x20003de0
 80085c0:	20003de4 	.word	0x20003de4

080085c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085ca:	4b27      	ldr	r3, [pc, #156]	; (8008668 <vTaskSwitchContext+0xa4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085d2:	4b26      	ldr	r3, [pc, #152]	; (800866c <vTaskSwitchContext+0xa8>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085d8:	e041      	b.n	800865e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80085da:	4b24      	ldr	r3, [pc, #144]	; (800866c <vTaskSwitchContext+0xa8>)
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80085e0:	4b23      	ldr	r3, [pc, #140]	; (8008670 <vTaskSwitchContext+0xac>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e010      	b.n	800860a <vTaskSwitchContext+0x46>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <vTaskSwitchContext+0x40>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	607b      	str	r3, [r7, #4]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vTaskSwitchContext+0x3e>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3b01      	subs	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	491a      	ldr	r1, [pc, #104]	; (8008674 <vTaskSwitchContext+0xb0>)
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0e4      	beq.n	80085e8 <vTaskSwitchContext+0x24>
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4a12      	ldr	r2, [pc, #72]	; (8008674 <vTaskSwitchContext+0xb0>)
 800862a:	4413      	add	r3, r2
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3308      	adds	r3, #8
 8008640:	429a      	cmp	r2, r3
 8008642:	d104      	bne.n	800864e <vTaskSwitchContext+0x8a>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4a08      	ldr	r2, [pc, #32]	; (8008678 <vTaskSwitchContext+0xb4>)
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	4a05      	ldr	r2, [pc, #20]	; (8008670 <vTaskSwitchContext+0xac>)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6013      	str	r3, [r2, #0]
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr
 8008668:	20003df8 	.word	0x20003df8
 800866c:	20003de4 	.word	0x20003de4
 8008670:	20003dd8 	.word	0x20003dd8
 8008674:	20003900 	.word	0x20003900
 8008678:	200038fc 	.word	0x200038fc

0800867c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60fb      	str	r3, [r7, #12]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vTaskPlaceOnEventList+0x44>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3318      	adds	r3, #24
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fe fe0e 	bl	80072cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086b0:	2101      	movs	r1, #1
 80086b2:	6838      	ldr	r0, [r7, #0]
 80086b4:	f000 faa6 	bl	8008c04 <prvAddCurrentTaskToDelayedList>
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	200038fc 	.word	0x200038fc

080086c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	617b      	str	r3, [r7, #20]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <vTaskPlaceOnEventListRestricted+0x54>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3318      	adds	r3, #24
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7fe fdc6 	bl	8007286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008704:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	68b8      	ldr	r0, [r7, #8]
 800870a:	f000 fa7b 	bl	8008c04 <prvAddCurrentTaskToDelayedList>
	}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200038fc 	.word	0x200038fc

0800871c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	60fb      	str	r3, [r7, #12]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	3318      	adds	r3, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fdf5 	bl	800733c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008752:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <xTaskRemoveFromEventList+0xb0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11d      	bne.n	8008796 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	3304      	adds	r3, #4
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fdec 	bl	800733c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <xTaskRemoveFromEventList+0xb4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <xTaskRemoveFromEventList+0x5c>
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <xTaskRemoveFromEventList+0xb4>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <xTaskRemoveFromEventList+0xb8>)
 8008786:	441a      	add	r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f7fe fd79 	bl	8007286 <vListInsertEnd>
 8008794:	e005      	b.n	80087a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3318      	adds	r3, #24
 800879a:	4619      	mov	r1, r3
 800879c:	480e      	ldr	r0, [pc, #56]	; (80087d8 <xTaskRemoveFromEventList+0xbc>)
 800879e:	f7fe fd72 	bl	8007286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <xTaskRemoveFromEventList+0xc0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d905      	bls.n	80087bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <xTaskRemoveFromEventList+0xc4>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	e001      	b.n	80087c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80087c0:	697b      	ldr	r3, [r7, #20]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20003df8 	.word	0x20003df8
 80087d0:	20003dd8 	.word	0x20003dd8
 80087d4:	20003900 	.word	0x20003900
 80087d8:	20003d90 	.word	0x20003d90
 80087dc:	200038fc 	.word	0x200038fc
 80087e0:	20003de4 	.word	0x20003de4

080087e4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008808:	f000 fe50 	bl	80094ac <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <vTaskSetTimeOutState+0x44>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <vTaskSetTimeOutState+0x48>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800881c:	f000 fe76 	bl	800950c <vPortExitCritical>
}
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20003de8 	.word	0x20003de8
 800882c:	20003dd4 	.word	0x20003dd4

08008830 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <vTaskInternalSetTimeOutState+0x24>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008840:	4b05      	ldr	r3, [pc, #20]	; (8008858 <vTaskInternalSetTimeOutState+0x28>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	605a      	str	r2, [r3, #4]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20003de8 	.word	0x20003de8
 8008858:	20003dd4 	.word	0x20003dd4

0800885c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	613b      	str	r3, [r7, #16]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	60fb      	str	r3, [r7, #12]
}
 800889a:	bf00      	nop
 800889c:	e7fe      	b.n	800889c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800889e:	f000 fe05 	bl	80094ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <xTaskCheckForTimeOut+0xbc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ba:	d102      	bne.n	80088c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	61fb      	str	r3, [r7, #28]
 80088c0:	e023      	b.n	800890a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b15      	ldr	r3, [pc, #84]	; (800891c <xTaskCheckForTimeOut+0xc0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d007      	beq.n	80088de <xTaskCheckForTimeOut+0x82>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d302      	bcc.n	80088de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e015      	b.n	800890a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d20b      	bcs.n	8008900 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ff9b 	bl	8008830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
 80088fe:	e004      	b.n	800890a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800890a:	f000 fdff 	bl	800950c <vPortExitCritical>

	return xReturn;
 800890e:	69fb      	ldr	r3, [r7, #28]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20003dd4 	.word	0x20003dd4
 800891c:	20003de8 	.word	0x20003de8

08008920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <vTaskMissedYield+0x14>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
}
 800892a:	bf00      	nop
 800892c:	46bd      	mov	sp, r7
 800892e:	bc80      	pop	{r7}
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20003de4 	.word	0x20003de4

08008938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008940:	f000 f852 	bl	80089e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008944:	4b06      	ldr	r3, [pc, #24]	; (8008960 <prvIdleTask+0x28>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d9f9      	bls.n	8008940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800894c:	4b05      	ldr	r3, [pc, #20]	; (8008964 <prvIdleTask+0x2c>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800895c:	e7f0      	b.n	8008940 <prvIdleTask+0x8>
 800895e:	bf00      	nop
 8008960:	20003900 	.word	0x20003900
 8008964:	e000ed04 	.word	0xe000ed04

08008968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800896e:	2300      	movs	r3, #0
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	e00c      	b.n	800898e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a12      	ldr	r2, [pc, #72]	; (80089c8 <prvInitialiseTaskLists+0x60>)
 8008980:	4413      	add	r3, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fc54 	bl	8007230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3301      	adds	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b37      	cmp	r3, #55	; 0x37
 8008992:	d9ef      	bls.n	8008974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008994:	480d      	ldr	r0, [pc, #52]	; (80089cc <prvInitialiseTaskLists+0x64>)
 8008996:	f7fe fc4b 	bl	8007230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800899a:	480d      	ldr	r0, [pc, #52]	; (80089d0 <prvInitialiseTaskLists+0x68>)
 800899c:	f7fe fc48 	bl	8007230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a0:	480c      	ldr	r0, [pc, #48]	; (80089d4 <prvInitialiseTaskLists+0x6c>)
 80089a2:	f7fe fc45 	bl	8007230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089a6:	480c      	ldr	r0, [pc, #48]	; (80089d8 <prvInitialiseTaskLists+0x70>)
 80089a8:	f7fe fc42 	bl	8007230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089ac:	480b      	ldr	r0, [pc, #44]	; (80089dc <prvInitialiseTaskLists+0x74>)
 80089ae:	f7fe fc3f 	bl	8007230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <prvInitialiseTaskLists+0x78>)
 80089b4:	4a05      	ldr	r2, [pc, #20]	; (80089cc <prvInitialiseTaskLists+0x64>)
 80089b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089b8:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <prvInitialiseTaskLists+0x7c>)
 80089ba:	4a05      	ldr	r2, [pc, #20]	; (80089d0 <prvInitialiseTaskLists+0x68>)
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20003900 	.word	0x20003900
 80089cc:	20003d60 	.word	0x20003d60
 80089d0:	20003d74 	.word	0x20003d74
 80089d4:	20003d90 	.word	0x20003d90
 80089d8:	20003da4 	.word	0x20003da4
 80089dc:	20003dbc 	.word	0x20003dbc
 80089e0:	20003d88 	.word	0x20003d88
 80089e4:	20003d8c 	.word	0x20003d8c

080089e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ee:	e019      	b.n	8008a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089f0:	f000 fd5c 	bl	80094ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80089f4:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <prvCheckTasksWaitingTermination+0x50>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fc9b 	bl	800733c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a06:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <prvCheckTasksWaitingTermination+0x54>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <prvCheckTasksWaitingTermination+0x54>)
 8008a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a1a:	f000 fd77 	bl	800950c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f810 	bl	8008a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e1      	bne.n	80089f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a2c:	bf00      	nop
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20003da4 	.word	0x20003da4
 8008a3c:	20003dd0 	.word	0x20003dd0
 8008a40:	20003db8 	.word	0x20003db8

08008a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d108      	bne.n	8008a68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 feea 	bl	8009834 <vPortFree>
				vPortFree( pxTCB );
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fee7 	bl	8009834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a66:	e018      	b.n	8008a9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d103      	bne.n	8008a7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fede 	bl	8009834 <vPortFree>
	}
 8008a78:	e00f      	b.n	8008a9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d00a      	beq.n	8008a9a <prvDeleteTCB+0x56>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	60fb      	str	r3, [r7, #12]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <prvDeleteTCB+0x54>
	}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <prvResetNextTaskUnblockTime+0x40>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <prvResetNextTaskUnblockTime+0x14>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <prvResetNextTaskUnblockTime+0x16>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008abe:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <prvResetNextTaskUnblockTime+0x44>)
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ac4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ac6:	e008      	b.n	8008ada <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008ac8:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <prvResetNextTaskUnblockTime+0x40>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	4a04      	ldr	r2, [pc, #16]	; (8008ae8 <prvResetNextTaskUnblockTime+0x44>)
 8008ad8:	6013      	str	r3, [r2, #0]
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	20003d88 	.word	0x20003d88
 8008ae8:	20003df0 	.word	0x20003df0

08008aec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008af2:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <xTaskGetSchedulerState+0x34>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008afa:	2301      	movs	r3, #1
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	e008      	b.n	8008b12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <xTaskGetSchedulerState+0x38>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	607b      	str	r3, [r7, #4]
 8008b0c:	e001      	b.n	8008b12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b12:	687b      	ldr	r3, [r7, #4]
	}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20003ddc 	.word	0x20003ddc
 8008b24:	20003df8 	.word	0x20003df8

08008b28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d056      	beq.n	8008bec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b3e:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <xTaskPriorityDisinherit+0xd0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d00a      	beq.n	8008b5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60bb      	str	r3, [r7, #8]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d02c      	beq.n	8008bec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d128      	bne.n	8008bec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fbcc 	bl	800733c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <xTaskPriorityDisinherit+0xd4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d903      	bls.n	8008bcc <xTaskPriorityDisinherit+0xa4>
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4a0c      	ldr	r2, [pc, #48]	; (8008bfc <xTaskPriorityDisinherit+0xd4>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <xTaskPriorityDisinherit+0xd8>)
 8008bda:	441a      	add	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fe fb4f 	bl	8007286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bec:	697b      	ldr	r3, [r7, #20]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200038fc 	.word	0x200038fc
 8008bfc:	20003dd8 	.word	0x20003dd8
 8008c00:	20003900 	.word	0x20003900

08008c04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c0e:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x90>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c14:	4b20      	ldr	r3, [pc, #128]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fb8e 	bl	800733c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c26:	d10a      	bne.n	8008c3e <prvAddCurrentTaskToDelayedList+0x3a>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c2e:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4819      	ldr	r0, [pc, #100]	; (8008c9c <prvAddCurrentTaskToDelayedList+0x98>)
 8008c38:	f7fe fb25 	bl	8007286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c3c:	e026      	b.n	8008c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4413      	add	r3, r2
 8008c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c46:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d209      	bcs.n	8008c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c56:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fe fb32 	bl	80072cc <vListInsert>
}
 8008c68:	e010      	b.n	8008c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe fb28 	bl	80072cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d202      	bcs.n	8008c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c86:	4a08      	ldr	r2, [pc, #32]	; (8008ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6013      	str	r3, [r2, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20003dd4 	.word	0x20003dd4
 8008c98:	200038fc 	.word	0x200038fc
 8008c9c:	20003dbc 	.word	0x20003dbc
 8008ca0:	20003d8c 	.word	0x20003d8c
 8008ca4:	20003d88 	.word	0x20003d88
 8008ca8:	20003df0 	.word	0x20003df0

08008cac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	; 0x28
 8008cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008cb6:	f000 facb 	bl	8009250 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008cba:	4b1c      	ldr	r3, [pc, #112]	; (8008d2c <xTimerCreateTimerTask+0x80>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d021      	beq.n	8008d06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cca:	1d3a      	adds	r2, r7, #4
 8008ccc:	f107 0108 	add.w	r1, r7, #8
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fa91 	bl	80071fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	9202      	str	r2, [sp, #8]
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	460a      	mov	r2, r1
 8008cec:	4910      	ldr	r1, [pc, #64]	; (8008d30 <xTimerCreateTimerTask+0x84>)
 8008cee:	4811      	ldr	r0, [pc, #68]	; (8008d34 <xTimerCreateTimerTask+0x88>)
 8008cf0:	f7ff f8be 	bl	8007e70 <xTaskCreateStatic>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4a10      	ldr	r2, [pc, #64]	; (8008d38 <xTimerCreateTimerTask+0x8c>)
 8008cf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cfa:	4b0f      	ldr	r3, [pc, #60]	; (8008d38 <xTimerCreateTimerTask+0x8c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d02:	2301      	movs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	613b      	str	r3, [r7, #16]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20003e2c 	.word	0x20003e2c
 8008d30:	080189ac 	.word	0x080189ac
 8008d34:	08008e59 	.word	0x08008e59
 8008d38:	20003e30 	.word	0x20003e30

08008d3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10a      	bne.n	8008d6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	623b      	str	r3, [r7, #32]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <xTimerGenericCommand+0x98>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d02a      	beq.n	8008dc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	dc18      	bgt.n	8008db6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d84:	f7ff feb2 	bl	8008aec <xTaskGetSchedulerState>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d109      	bne.n	8008da2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <xTimerGenericCommand+0x98>)
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f107 0110 	add.w	r1, r7, #16
 8008d96:	2300      	movs	r3, #0
 8008d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9a:	f7fe fc87 	bl	80076ac <xQueueGenericSend>
 8008d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8008da0:	e012      	b.n	8008dc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008da2:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <xTimerGenericCommand+0x98>)
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	f107 0110 	add.w	r1, r7, #16
 8008daa:	2300      	movs	r3, #0
 8008dac:	2200      	movs	r2, #0
 8008dae:	f7fe fc7d 	bl	80076ac <xQueueGenericSend>
 8008db2:	6278      	str	r0, [r7, #36]	; 0x24
 8008db4:	e008      	b.n	8008dc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008db6:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <xTimerGenericCommand+0x98>)
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	f107 0110 	add.w	r1, r7, #16
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	f7fe fd71 	bl	80078a8 <xQueueGenericSendFromISR>
 8008dc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3728      	adds	r7, #40	; 0x28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20003e2c 	.word	0x20003e2c

08008dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af02      	add	r7, sp, #8
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <prvProcessExpiredTimer+0x7c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe faa3 	bl	800733c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d122      	bne.n	8008e44 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	18d1      	adds	r1, r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	6978      	ldr	r0, [r7, #20]
 8008e0c:	f000 f8c8 	bl	8008fa0 <prvInsertTimerInActiveList>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e16:	2300      	movs	r3, #0
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6978      	ldr	r0, [r7, #20]
 8008e22:	f7ff ff8b 	bl	8008d3c <xTimerGenericCommand>
 8008e26:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	6978      	ldr	r0, [r7, #20]
 8008e4a:	4798      	blx	r3
}
 8008e4c:	bf00      	nop
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20003e24 	.word	0x20003e24

08008e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e60:	f107 0308 	add.w	r3, r7, #8
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f857 	bl	8008f18 <prvGetNextExpireTime>
 8008e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f803 	bl	8008e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e76:	f000 f8d5 	bl	8009024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e7a:	e7f1      	b.n	8008e60 <prvTimerTask+0x8>

08008e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e86:	f7ff fa25 	bl	80082d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e8a:	f107 0308 	add.w	r3, r7, #8
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f866 	bl	8008f60 <prvSampleTimeNow>
 8008e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d130      	bne.n	8008efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <prvProcessTimerOrBlockTask+0x3c>
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d806      	bhi.n	8008eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008eaa:	f7ff fa21 	bl	80082f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff91 	bl	8008dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008eb6:	e024      	b.n	8008f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ebe:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <prvProcessTimerOrBlockTask+0x90>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <prvProcessTimerOrBlockTask+0x94>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4619      	mov	r1, r3
 8008ede:	f7fe ff93 	bl	8007e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ee2:	f7ff fa05 	bl	80082f0 <xTaskResumeAll>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <prvProcessTimerOrBlockTask+0x98>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	f3bf 8f6f 	isb	sy
}
 8008efc:	e001      	b.n	8008f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008efe:	f7ff f9f7 	bl	80082f0 <xTaskResumeAll>
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20003e28 	.word	0x20003e28
 8008f10:	20003e2c 	.word	0x20003e2c
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <prvGetNextExpireTime+0x44>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf0c      	ite	eq
 8008f2a:	2301      	moveq	r3, #1
 8008f2c:	2300      	movne	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f3e:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <prvGetNextExpireTime+0x44>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e001      	b.n	8008f4e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20003e24 	.word	0x20003e24

08008f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f68:	f7ff fa60 	bl	800842c <xTaskGetTickCount>
 8008f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	; (8008f9c <prvSampleTimeNow+0x3c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d205      	bcs.n	8008f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f78:	f000 f908 	bl	800918c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	e002      	b.n	8008f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f8a:	4a04      	ldr	r2, [pc, #16]	; (8008f9c <prvSampleTimeNow+0x3c>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f90:	68fb      	ldr	r3, [r7, #12]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20003e34 	.word	0x20003e34

08008fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d812      	bhi.n	8008fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	1ad2      	subs	r2, r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d302      	bcc.n	8008fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e01b      	b.n	8009012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fda:	4b10      	ldr	r3, [pc, #64]	; (800901c <prvInsertTimerInActiveList+0x7c>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f7fe f971 	bl	80072cc <vListInsert>
 8008fea:	e012      	b.n	8009012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d206      	bcs.n	8009002 <prvInsertTimerInActiveList+0x62>
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e007      	b.n	8009012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009002:	4b07      	ldr	r3, [pc, #28]	; (8009020 <prvInsertTimerInActiveList+0x80>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f7fe f95d 	bl	80072cc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20003e28 	.word	0x20003e28
 8009020:	20003e24 	.word	0x20003e24

08009024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08e      	sub	sp, #56	; 0x38
 8009028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800902a:	e09d      	b.n	8009168 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	da18      	bge.n	8009064 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	3304      	adds	r3, #4
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	61fb      	str	r3, [r7, #28]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800905a:	6850      	ldr	r0, [r2, #4]
 800905c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800905e:	6892      	ldr	r2, [r2, #8]
 8009060:	4611      	mov	r1, r2
 8009062:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	db7d      	blt.n	8009166 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe f95e 	bl	800733c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009080:	463b      	mov	r3, r7
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff ff6c 	bl	8008f60 <prvSampleTimeNow>
 8009088:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b09      	cmp	r3, #9
 800908e:	d86b      	bhi.n	8009168 <prvProcessReceivedCommands+0x144>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <prvProcessReceivedCommands+0x74>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090c1 	.word	0x080090c1
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090c1 	.word	0x080090c1
 80090a4:	08009169 	.word	0x08009169
 80090a8:	0800911d 	.word	0x0800911d
 80090ac:	08009155 	.word	0x08009155
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	080090c1 	.word	0x080090c1
 80090b8:	08009169 	.word	0x08009169
 80090bc:	0800911d 	.word	0x0800911d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	18d1      	adds	r1, r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ce:	f7ff ff67 	bl	8008fa0 <prvInsertTimerInActiveList>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d047      	beq.n	8009168 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d13f      	bne.n	8009168 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	441a      	add	r2, r3
 80090f0:	2300      	movs	r3, #0
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	2100      	movs	r1, #0
 80090f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fa:	f7ff fe1f 	bl	8008d3c <xTimerGenericCommand>
 80090fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d130      	bne.n	8009168 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	61bb      	str	r3, [r7, #24]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	617b      	str	r3, [r7, #20]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	18d1      	adds	r1, r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800914e:	f7ff ff27 	bl	8008fa0 <prvInsertTimerInActiveList>
					break;
 8009152:	e009      	b.n	8009168 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800915e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009160:	f000 fb68 	bl	8009834 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009164:	e000      	b.n	8009168 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009166:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009168:	4b07      	ldr	r3, [pc, #28]	; (8009188 <prvProcessReceivedCommands+0x164>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1d39      	adds	r1, r7, #4
 800916e:	2200      	movs	r2, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fc31 	bl	80079d8 <xQueueReceive>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	f47f af57 	bne.w	800902c <prvProcessReceivedCommands+0x8>
	}
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	3730      	adds	r7, #48	; 0x30
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20003e2c 	.word	0x20003e2c

0800918c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009192:	e045      	b.n	8009220 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009194:	4b2c      	ldr	r3, [pc, #176]	; (8009248 <prvSwitchTimerLists+0xbc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800919e:	4b2a      	ldr	r3, [pc, #168]	; (8009248 <prvSwitchTimerLists+0xbc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe f8c5 	bl	800733c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d12e      	bne.n	8009220 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4413      	add	r3, r2
 80091ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d90e      	bls.n	80091f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091e0:	4b19      	ldr	r3, [pc, #100]	; (8009248 <prvSwitchTimerLists+0xbc>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f7fe f86e 	bl	80072cc <vListInsert>
 80091f0:	e016      	b.n	8009220 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f2:	2300      	movs	r3, #0
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	2100      	movs	r1, #0
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fd9d 	bl	8008d3c <xTimerGenericCommand>
 8009202:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <prvSwitchTimerLists+0x94>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	603b      	str	r3, [r7, #0]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009220:	4b09      	ldr	r3, [pc, #36]	; (8009248 <prvSwitchTimerLists+0xbc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1b4      	bne.n	8009194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800922a:	4b07      	ldr	r3, [pc, #28]	; (8009248 <prvSwitchTimerLists+0xbc>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009230:	4b06      	ldr	r3, [pc, #24]	; (800924c <prvSwitchTimerLists+0xc0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a04      	ldr	r2, [pc, #16]	; (8009248 <prvSwitchTimerLists+0xbc>)
 8009236:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009238:	4a04      	ldr	r2, [pc, #16]	; (800924c <prvSwitchTimerLists+0xc0>)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	6013      	str	r3, [r2, #0]
}
 800923e:	bf00      	nop
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20003e24 	.word	0x20003e24
 800924c:	20003e28 	.word	0x20003e28

08009250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009256:	f000 f929 	bl	80094ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <prvCheckForValidListAndQueue+0x60>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d120      	bne.n	80092a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009262:	4814      	ldr	r0, [pc, #80]	; (80092b4 <prvCheckForValidListAndQueue+0x64>)
 8009264:	f7fd ffe4 	bl	8007230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009268:	4813      	ldr	r0, [pc, #76]	; (80092b8 <prvCheckForValidListAndQueue+0x68>)
 800926a:	f7fd ffe1 	bl	8007230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <prvCheckForValidListAndQueue+0x6c>)
 8009270:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <prvCheckForValidListAndQueue+0x64>)
 8009272:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009274:	4b12      	ldr	r3, [pc, #72]	; (80092c0 <prvCheckForValidListAndQueue+0x70>)
 8009276:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <prvCheckForValidListAndQueue+0x68>)
 8009278:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800927a:	2300      	movs	r3, #0
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <prvCheckForValidListAndQueue+0x74>)
 8009280:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <prvCheckForValidListAndQueue+0x78>)
 8009282:	2110      	movs	r1, #16
 8009284:	200a      	movs	r0, #10
 8009286:	f7fe f8eb 	bl	8007460 <xQueueGenericCreateStatic>
 800928a:	4603      	mov	r3, r0
 800928c:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <prvCheckForValidListAndQueue+0x60>)
 800928e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <prvCheckForValidListAndQueue+0x60>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <prvCheckForValidListAndQueue+0x60>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	490b      	ldr	r1, [pc, #44]	; (80092cc <prvCheckForValidListAndQueue+0x7c>)
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fd8a 	bl	8007db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092a4:	f000 f932 	bl	800950c <vPortExitCritical>
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20003e2c 	.word	0x20003e2c
 80092b4:	20003dfc 	.word	0x20003dfc
 80092b8:	20003e10 	.word	0x20003e10
 80092bc:	20003e24 	.word	0x20003e24
 80092c0:	20003e28 	.word	0x20003e28
 80092c4:	20003ed8 	.word	0x20003ed8
 80092c8:	20003e38 	.word	0x20003e38
 80092cc:	080189b4 	.word	0x080189b4

080092d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3b04      	subs	r3, #4
 80092e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3b04      	subs	r3, #4
 80092ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f023 0201 	bic.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009300:	4a08      	ldr	r2, [pc, #32]	; (8009324 <pxPortInitialiseStack+0x54>)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3b14      	subs	r3, #20
 800930a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3b20      	subs	r3, #32
 8009316:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009318:	68fb      	ldr	r3, [r7, #12]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr
 8009324:	08009329 	.word	0x08009329

08009328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <prvTaskExitError+0x54>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933a:	d00a      	beq.n	8009352 <prvTaskExitError+0x2a>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	60fb      	str	r3, [r7, #12]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <prvTaskExitError+0x28>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60bb      	str	r3, [r7, #8]
}
 8009364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009366:	bf00      	nop
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0fc      	beq.n	8009368 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800936e:	bf00      	nop
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000010 	.word	0x20000010

08009380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <pxCurrentTCBConst2>)
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	6808      	ldr	r0, [r1, #0]
 8009386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800938a:	f380 8809 	msr	PSP, r0
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8811 	msr	BASEPRI, r0
 800939a:	f04e 0e0d 	orr.w	lr, lr, #13
 800939e:	4770      	bx	lr

080093a0 <pxCurrentTCBConst2>:
 80093a0:	200038fc 	.word	0x200038fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80093a8:	4806      	ldr	r0, [pc, #24]	; (80093c4 <prvPortStartFirstTask+0x1c>)
 80093aa:	6800      	ldr	r0, [r0, #0]
 80093ac:	6800      	ldr	r0, [r0, #0]
 80093ae:	f380 8808 	msr	MSP, r0
 80093b2:	b662      	cpsie	i
 80093b4:	b661      	cpsie	f
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	df00      	svc	0
 80093c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093c2:	bf00      	nop
 80093c4:	e000ed08 	.word	0xe000ed08

080093c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093ce:	4b32      	ldr	r3, [pc, #200]	; (8009498 <xPortStartScheduler+0xd0>)
 80093d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	22ff      	movs	r2, #255	; 0xff
 80093de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4b2a      	ldr	r3, [pc, #168]	; (800949c <xPortStartScheduler+0xd4>)
 80093f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093f6:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <xPortStartScheduler+0xd8>)
 80093f8:	2207      	movs	r2, #7
 80093fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093fc:	e009      	b.n	8009412 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093fe:	4b28      	ldr	r3, [pc, #160]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3b01      	subs	r3, #1
 8009404:	4a26      	ldr	r2, [pc, #152]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941a:	2b80      	cmp	r3, #128	; 0x80
 800941c:	d0ef      	beq.n	80093fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800941e:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1c3 0307 	rsb	r3, r3, #7
 8009426:	2b04      	cmp	r3, #4
 8009428:	d00a      	beq.n	8009440 <xPortStartScheduler+0x78>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60bb      	str	r3, [r7, #8]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009440:	4b17      	ldr	r3, [pc, #92]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	021b      	lsls	r3, r3, #8
 8009446:	4a16      	ldr	r2, [pc, #88]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009448:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800944a:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <xPortStartScheduler+0xd8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009452:	4a13      	ldr	r2, [pc, #76]	; (80094a0 <xPortStartScheduler+0xd8>)
 8009454:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800945e:	4b11      	ldr	r3, [pc, #68]	; (80094a4 <xPortStartScheduler+0xdc>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <xPortStartScheduler+0xdc>)
 8009464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800946a:	4b0e      	ldr	r3, [pc, #56]	; (80094a4 <xPortStartScheduler+0xdc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a0d      	ldr	r2, [pc, #52]	; (80094a4 <xPortStartScheduler+0xdc>)
 8009470:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009474:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009476:	f000 f8b9 	bl	80095ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800947a:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <xPortStartScheduler+0xe0>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009480:	f7ff ff92 	bl	80093a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009484:	f7ff f89e 	bl	80085c4 <vTaskSwitchContext>
	prvTaskExitError();
 8009488:	f7ff ff4e 	bl	8009328 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	e000e400 	.word	0xe000e400
 800949c:	20003f28 	.word	0x20003f28
 80094a0:	20003f2c 	.word	0x20003f2c
 80094a4:	e000ed20 	.word	0xe000ed20
 80094a8:	20000010 	.word	0x20000010

080094ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	607b      	str	r3, [r7, #4]
}
 80094c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <vPortEnterCritical+0x58>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a0d      	ldr	r2, [pc, #52]	; (8009504 <vPortEnterCritical+0x58>)
 80094ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094d0:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <vPortEnterCritical+0x58>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10f      	bne.n	80094f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <vPortEnterCritical+0x5c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	603b      	str	r3, [r7, #0]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vPortEnterCritical+0x4a>
	}
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000010 	.word	0x20000010
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009512:	4b11      	ldr	r3, [pc, #68]	; (8009558 <vPortExitCritical+0x4c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10a      	bne.n	8009530 <vPortExitCritical+0x24>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	607b      	str	r3, [r7, #4]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009530:	4b09      	ldr	r3, [pc, #36]	; (8009558 <vPortExitCritical+0x4c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3b01      	subs	r3, #1
 8009536:	4a08      	ldr	r2, [pc, #32]	; (8009558 <vPortExitCritical+0x4c>)
 8009538:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800953a:	4b07      	ldr	r3, [pc, #28]	; (8009558 <vPortExitCritical+0x4c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d105      	bne.n	800954e <vPortExitCritical+0x42>
 8009542:	2300      	movs	r3, #0
 8009544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	f383 8811 	msr	BASEPRI, r3
}
 800954c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr
 8009558:	20000010 	.word	0x20000010
 800955c:	00000000 	.word	0x00000000

08009560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009560:	f3ef 8009 	mrs	r0, PSP
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <pxCurrentTCBConst>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009570:	6010      	str	r0, [r2, #0]
 8009572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800957a:	f380 8811 	msr	BASEPRI, r0
 800957e:	f7ff f821 	bl	80085c4 <vTaskSwitchContext>
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	6808      	ldr	r0, [r1, #0]
 8009592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009596:	f380 8809 	msr	PSP, r0
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	4770      	bx	lr

080095a0 <pxCurrentTCBConst>:
 80095a0:	200038fc 	.word	0x200038fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
}
 80095c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095c2:	f7fe ff41 	bl	8008448 <xTaskIncrementTick>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <SysTick_Handler+0x40>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f383 8811 	msr	BASEPRI, r3
}
 80095de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <vPortSetupTimerInterrupt+0x30>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <vPortSetupTimerInterrupt+0x34>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <vPortSetupTimerInterrupt+0x38>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a09      	ldr	r2, [pc, #36]	; (8009628 <vPortSetupTimerInterrupt+0x3c>)
 8009602:	fba2 2303 	umull	r2, r3, r2, r3
 8009606:	099b      	lsrs	r3, r3, #6
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <vPortSetupTimerInterrupt+0x40>)
 800960a:	3b01      	subs	r3, #1
 800960c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800960e:	4b03      	ldr	r3, [pc, #12]	; (800961c <vPortSetupTimerInterrupt+0x30>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr
 800961c:	e000e010 	.word	0xe000e010
 8009620:	e000e018 	.word	0xe000e018
 8009624:	20000004 	.word	0x20000004
 8009628:	10624dd3 	.word	0x10624dd3
 800962c:	e000e014 	.word	0xe000e014

08009630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009636:	f3ef 8305 	mrs	r3, IPSR
 800963a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b0f      	cmp	r3, #15
 8009640:	d914      	bls.n	800966c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009642:	4a16      	ldr	r2, [pc, #88]	; (800969c <vPortValidateInterruptPriority+0x6c>)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800964c:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <vPortValidateInterruptPriority+0x70>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	7afa      	ldrb	r2, [r7, #11]
 8009652:	429a      	cmp	r2, r3
 8009654:	d20a      	bcs.n	800966c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	607b      	str	r3, [r7, #4]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <vPortValidateInterruptPriority+0x74>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009674:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <vPortValidateInterruptPriority+0x78>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d90a      	bls.n	8009692 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	603b      	str	r3, [r7, #0]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <vPortValidateInterruptPriority+0x60>
	}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr
 800969c:	e000e3f0 	.word	0xe000e3f0
 80096a0:	20003f28 	.word	0x20003f28
 80096a4:	e000ed0c 	.word	0xe000ed0c
 80096a8:	20003f2c 	.word	0x20003f2c

080096ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096b8:	f7fe fe0c 	bl	80082d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096bc:	4b58      	ldr	r3, [pc, #352]	; (8009820 <pvPortMalloc+0x174>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096c4:	f000 f910 	bl	80098e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096c8:	4b56      	ldr	r3, [pc, #344]	; (8009824 <pvPortMalloc+0x178>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 808e 	bne.w	80097f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01d      	beq.n	8009718 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096dc:	2208      	movs	r2, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4413      	add	r3, r2
 80096e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d014      	beq.n	8009718 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	3308      	adds	r3, #8
 80096f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <pvPortMalloc+0x6c>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	617b      	str	r3, [r7, #20]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d069      	beq.n	80097f2 <pvPortMalloc+0x146>
 800971e:	4b42      	ldr	r3, [pc, #264]	; (8009828 <pvPortMalloc+0x17c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d864      	bhi.n	80097f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009728:	4b40      	ldr	r3, [pc, #256]	; (800982c <pvPortMalloc+0x180>)
 800972a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800972c:	4b3f      	ldr	r3, [pc, #252]	; (800982c <pvPortMalloc+0x180>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009732:	e004      	b.n	800973e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d903      	bls.n	8009750 <pvPortMalloc+0xa4>
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f1      	bne.n	8009734 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009750:	4b33      	ldr	r3, [pc, #204]	; (8009820 <pvPortMalloc+0x174>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009756:	429a      	cmp	r2, r3
 8009758:	d04b      	beq.n	80097f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2208      	movs	r2, #8
 8009760:	4413      	add	r3, r2
 8009762:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	2308      	movs	r3, #8
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	429a      	cmp	r2, r3
 800977a:	d91f      	bls.n	80097bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800977c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4413      	add	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <pvPortMalloc+0xf8>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	613b      	str	r3, [r7, #16]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097b6:	69b8      	ldr	r0, [r7, #24]
 80097b8:	f000 f8f8 	bl	80099ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097bc:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <pvPortMalloc+0x17c>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	4a18      	ldr	r2, [pc, #96]	; (8009828 <pvPortMalloc+0x17c>)
 80097c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097ca:	4b17      	ldr	r3, [pc, #92]	; (8009828 <pvPortMalloc+0x17c>)
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b18      	ldr	r3, [pc, #96]	; (8009830 <pvPortMalloc+0x184>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d203      	bcs.n	80097de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <pvPortMalloc+0x17c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a15      	ldr	r2, [pc, #84]	; (8009830 <pvPortMalloc+0x184>)
 80097dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <pvPortMalloc+0x178>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	431a      	orrs	r2, r3
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097f2:	f7fe fd7d 	bl	80082f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <pvPortMalloc+0x16a>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <pvPortMalloc+0x168>
	return pvReturn;
 8009816:	69fb      	ldr	r3, [r7, #28]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3728      	adds	r7, #40	; 0x28
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20006648 	.word	0x20006648
 8009824:	20006654 	.word	0x20006654
 8009828:	2000664c 	.word	0x2000664c
 800982c:	20006640 	.word	0x20006640
 8009830:	20006650 	.word	0x20006650

08009834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d048      	beq.n	80098d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009846:	2308      	movs	r3, #8
 8009848:	425b      	negs	r3, r3
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4413      	add	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	4b21      	ldr	r3, [pc, #132]	; (80098e0 <vPortFree+0xac>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4013      	ands	r3, r2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <vPortFree+0x44>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	60fb      	str	r3, [r7, #12]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <vPortFree+0x62>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60bb      	str	r3, [r7, #8]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	4b11      	ldr	r3, [pc, #68]	; (80098e0 <vPortFree+0xac>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4013      	ands	r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d019      	beq.n	80098d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d115      	bne.n	80098d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <vPortFree+0xac>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	43db      	mvns	r3, r3
 80098b6:	401a      	ands	r2, r3
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098bc:	f7fe fd0a 	bl	80082d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <vPortFree+0xb0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4413      	add	r3, r2
 80098ca:	4a06      	ldr	r2, [pc, #24]	; (80098e4 <vPortFree+0xb0>)
 80098cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098ce:	6938      	ldr	r0, [r7, #16]
 80098d0:	f000 f86c 	bl	80099ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098d4:	f7fe fd0c 	bl	80082f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098d8:	bf00      	nop
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	20006654 	.word	0x20006654
 80098e4:	2000664c 	.word	0x2000664c

080098e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80098f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098f4:	4b27      	ldr	r3, [pc, #156]	; (8009994 <prvHeapInit+0xac>)
 80098f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00c      	beq.n	800991c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3307      	adds	r3, #7
 8009906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0307 	bic.w	r3, r3, #7
 800990e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	4a1f      	ldr	r2, [pc, #124]	; (8009994 <prvHeapInit+0xac>)
 8009918:	4413      	add	r3, r2
 800991a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009920:	4a1d      	ldr	r2, [pc, #116]	; (8009998 <prvHeapInit+0xb0>)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009926:	4b1c      	ldr	r3, [pc, #112]	; (8009998 <prvHeapInit+0xb0>)
 8009928:	2200      	movs	r2, #0
 800992a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	4413      	add	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009934:	2208      	movs	r2, #8
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f023 0307 	bic.w	r3, r3, #7
 8009942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4a15      	ldr	r2, [pc, #84]	; (800999c <prvHeapInit+0xb4>)
 8009948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800994a:	4b14      	ldr	r3, [pc, #80]	; (800999c <prvHeapInit+0xb4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <prvHeapInit+0xb4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	1ad2      	subs	r2, r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <prvHeapInit+0xb4>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <prvHeapInit+0xb8>)
 8009976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <prvHeapInit+0xbc>)
 800997e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <prvHeapInit+0xc0>)
 8009982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009986:	601a      	str	r2, [r3, #0]
}
 8009988:	bf00      	nop
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	bc80      	pop	{r7}
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20003f30 	.word	0x20003f30
 8009998:	20006640 	.word	0x20006640
 800999c:	20006648 	.word	0x20006648
 80099a0:	20006650 	.word	0x20006650
 80099a4:	2000664c 	.word	0x2000664c
 80099a8:	20006654 	.word	0x20006654

080099ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099b4:	4b27      	ldr	r3, [pc, #156]	; (8009a54 <prvInsertBlockIntoFreeList+0xa8>)
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	e002      	b.n	80099c0 <prvInsertBlockIntoFreeList+0x14>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d8f7      	bhi.n	80099ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4413      	add	r3, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d108      	bne.n	80099ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	441a      	add	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	441a      	add	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d118      	bne.n	8009a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <prvInsertBlockIntoFreeList+0xac>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d00d      	beq.n	8009a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	441a      	add	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	e008      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <prvInsertBlockIntoFreeList+0xac>)
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e003      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d002      	beq.n	8009a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bc80      	pop	{r7}
 8009a52:	4770      	bx	lr
 8009a54:	20006640 	.word	0x20006640
 8009a58:	20006648 	.word	0x20006648

08009a5c <rcl_get_zero_initialized_init_options>:
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	4770      	bx	lr

08009a60 <rcl_init_options_init>:
 8009a60:	b084      	sub	sp, #16
 8009a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a64:	b091      	sub	sp, #68	; 0x44
 8009a66:	af17      	add	r7, sp, #92	; 0x5c
 8009a68:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d045      	beq.n	8009afc <rcl_init_options_init+0x9c>
 8009a70:	6803      	ldr	r3, [r0, #0]
 8009a72:	4606      	mov	r6, r0
 8009a74:	b133      	cbz	r3, 8009a84 <rcl_init_options_init+0x24>
 8009a76:	2464      	movs	r4, #100	; 0x64
 8009a78:	4620      	mov	r0, r4
 8009a7a:	b011      	add	sp, #68	; 0x44
 8009a7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009a80:	b004      	add	sp, #16
 8009a82:	4770      	bx	lr
 8009a84:	4638      	mov	r0, r7
 8009a86:	f001 f8ab 	bl	800abe0 <rcutils_allocator_is_valid>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d036      	beq.n	8009afc <rcl_init_options_init+0x9c>
 8009a8e:	2050      	movs	r0, #80	; 0x50
 8009a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a92:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009a94:	4798      	blx	r3
 8009a96:	4604      	mov	r4, r0
 8009a98:	6030      	str	r0, [r6, #0]
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d030      	beq.n	8009b00 <rcl_init_options_init+0xa0>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	46bc      	mov	ip, r7
 8009aa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aa8:	f8dc 3000 	ldr.w	r3, [ip]
 8009aac:	a802      	add	r0, sp, #8
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	3418      	adds	r4, #24
 8009ab2:	ad02      	add	r5, sp, #8
 8009ab4:	f001 fb16 	bl	800b0e4 <rmw_get_zero_initialized_init_options>
 8009ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ac4:	f8d6 c000 	ldr.w	ip, [r6]
 8009ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009acc:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ad0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8009ad4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009ad8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009adc:	f10c 0018 	add.w	r0, ip, #24
 8009ae0:	f001 fbcc 	bl	800b27c <rmw_init_options_init>
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d0c6      	beq.n	8009a78 <rcl_init_options_init+0x18>
 8009aea:	6830      	ldr	r0, [r6, #0]
 8009aec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009aee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009af0:	4798      	blx	r3
 8009af2:	4620      	mov	r0, r4
 8009af4:	f009 f9d8 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8009af8:	4604      	mov	r4, r0
 8009afa:	e7bd      	b.n	8009a78 <rcl_init_options_init+0x18>
 8009afc:	240b      	movs	r4, #11
 8009afe:	e7bb      	b.n	8009a78 <rcl_init_options_init+0x18>
 8009b00:	240a      	movs	r4, #10
 8009b02:	e7b9      	b.n	8009a78 <rcl_init_options_init+0x18>

08009b04 <rcl_init_options_fini>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	b1c0      	cbz	r0, 8009b3c <rcl_init_options_fini+0x38>
 8009b0a:	6804      	ldr	r4, [r0, #0]
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	b1ac      	cbz	r4, 8009b3c <rcl_init_options_fini+0x38>
 8009b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b12:	ad01      	add	r5, sp, #4
 8009b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	a801      	add	r0, sp, #4
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f001 f860 	bl	800abe0 <rcutils_allocator_is_valid>
 8009b20:	b160      	cbz	r0, 8009b3c <rcl_init_options_fini+0x38>
 8009b22:	6830      	ldr	r0, [r6, #0]
 8009b24:	3018      	adds	r0, #24
 8009b26:	f001 fc43 	bl	800b3b0 <rmw_init_options_fini>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	b950      	cbnz	r0, 8009b44 <rcl_init_options_fini+0x40>
 8009b2e:	6830      	ldr	r0, [r6, #0]
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	9905      	ldr	r1, [sp, #20]
 8009b34:	4798      	blx	r3
 8009b36:	4620      	mov	r0, r4
 8009b38:	b006      	add	sp, #24
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	240b      	movs	r4, #11
 8009b3e:	4620      	mov	r0, r4
 8009b40:	b006      	add	sp, #24
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f009 f9b0 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8009b48:	4604      	mov	r4, r0
 8009b4a:	e7f8      	b.n	8009b3e <rcl_init_options_fini+0x3a>

08009b4c <rcl_init_options_copy>:
 8009b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b50:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d070      	beq.n	8009c3a <rcl_init_options_copy+0xee>
 8009b58:	6806      	ldr	r6, [r0, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	d06c      	beq.n	8009c3a <rcl_init_options_copy+0xee>
 8009b60:	460c      	mov	r4, r1
 8009b62:	2900      	cmp	r1, #0
 8009b64:	d069      	beq.n	8009c3a <rcl_init_options_copy+0xee>
 8009b66:	680b      	ldr	r3, [r1, #0]
 8009b68:	b12b      	cbz	r3, 8009b76 <rcl_init_options_copy+0x2a>
 8009b6a:	2664      	movs	r6, #100	; 0x64
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 8009b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b76:	af10      	add	r7, sp, #64	; 0x40
 8009b78:	46bc      	mov	ip, r7
 8009b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009b7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b80:	6833      	ldr	r3, [r6, #0]
 8009b82:	4638      	mov	r0, r7
 8009b84:	f8cc 3000 	str.w	r3, [ip]
 8009b88:	f001 f82a 	bl	800abe0 <rcutils_allocator_is_valid>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d054      	beq.n	8009c3a <rcl_init_options_copy+0xee>
 8009b90:	2050      	movs	r0, #80	; 0x50
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6939      	ldr	r1, [r7, #16]
 8009b96:	4798      	blx	r3
 8009b98:	4606      	mov	r6, r0
 8009b9a:	6020      	str	r0, [r4, #0]
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f000 8089 	beq.w	8009cb4 <rcl_init_options_copy+0x168>
 8009ba2:	4684      	mov	ip, r0
 8009ba4:	46be      	mov	lr, r7
 8009ba6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009baa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bae:	f8de 3000 	ldr.w	r3, [lr]
 8009bb2:	a802      	add	r0, sp, #8
 8009bb4:	f8cc 3000 	str.w	r3, [ip]
 8009bb8:	f001 fa94 	bl	800b0e4 <rmw_get_zero_initialized_init_options>
 8009bbc:	3618      	adds	r6, #24
 8009bbe:	f10d 0c08 	add.w	ip, sp, #8
 8009bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009bc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009bce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009bd4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009bd8:	e886 0003 	stmia.w	r6, {r0, r1}
 8009bdc:	6826      	ldr	r6, [r4, #0]
 8009bde:	ab13      	add	r3, sp, #76	; 0x4c
 8009be0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009be4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009be8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009bec:	f106 0018 	add.w	r0, r6, #24
 8009bf0:	f001 fb44 	bl	800b27c <rmw_init_options_init>
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	bb30      	cbnz	r0, 8009c46 <rcl_init_options_copy+0xfa>
 8009bf8:	f8d4 e000 	ldr.w	lr, [r4]
 8009bfc:	f8d5 c000 	ldr.w	ip, [r5]
 8009c00:	4676      	mov	r6, lr
 8009c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009c08:	f8dc 3000 	ldr.w	r3, [ip]
 8009c0c:	f10e 0018 	add.w	r0, lr, #24
 8009c10:	6033      	str	r3, [r6, #0]
 8009c12:	f001 fbcd 	bl	800b3b0 <rmw_init_options_fini>
 8009c16:	4680      	mov	r8, r0
 8009c18:	b300      	cbz	r0, 8009c5c <rcl_init_options_copy+0x110>
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f001 f8a8 	bl	800ad70 <rcutils_get_error_string>
 8009c20:	f001 f8ce 	bl	800adc0 <rcutils_reset_error>
 8009c24:	4620      	mov	r0, r4
 8009c26:	f7ff ff6d 	bl	8009b04 <rcl_init_options_fini>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d19d      	bne.n	8009b6c <rcl_init_options_copy+0x20>
 8009c30:	4640      	mov	r0, r8
 8009c32:	f009 f939 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8009c36:	4606      	mov	r6, r0
 8009c38:	e798      	b.n	8009b6c <rcl_init_options_copy+0x20>
 8009c3a:	260b      	movs	r6, #11
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 8009c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6939      	ldr	r1, [r7, #16]
 8009c4a:	6820      	ldr	r0, [r4, #0]
 8009c4c:	4798      	blx	r3
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f009 f92a 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8009c54:	4606      	mov	r6, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0ce      	beq.n	8009bf8 <rcl_init_options_copy+0xac>
 8009c5a:	e787      	b.n	8009b6c <rcl_init_options_copy+0x20>
 8009c5c:	f8d4 8000 	ldr.w	r8, [r4]
 8009c60:	a802      	add	r0, sp, #8
 8009c62:	f001 fa3f 	bl	800b0e4 <rmw_get_zero_initialized_init_options>
 8009c66:	ae02      	add	r6, sp, #8
 8009c68:	f108 0c18 	add.w	ip, r8, #24
 8009c6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009c6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009c74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009c7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c7e:	682a      	ldr	r2, [r5, #0]
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009c86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009c8a:	f102 0018 	add.w	r0, r2, #24
 8009c8e:	f103 0118 	add.w	r1, r3, #24
 8009c92:	f001 fb4b 	bl	800b32c <rmw_init_options_copy>
 8009c96:	4606      	mov	r6, r0
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	f43f af67 	beq.w	8009b6c <rcl_init_options_copy+0x20>
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f001 f866 	bl	800ad70 <rcutils_get_error_string>
 8009ca4:	f001 f88c 	bl	800adc0 <rcutils_reset_error>
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff ff2b 	bl	8009b04 <rcl_init_options_fini>
 8009cae:	b118      	cbz	r0, 8009cb8 <rcl_init_options_copy+0x16c>
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	e75b      	b.n	8009b6c <rcl_init_options_copy+0x20>
 8009cb4:	260a      	movs	r6, #10
 8009cb6:	e759      	b.n	8009b6c <rcl_init_options_copy+0x20>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f009 f8f5 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	e754      	b.n	8009b6c <rcl_init_options_copy+0x20>
 8009cc2:	bf00      	nop

08009cc4 <rcl_get_zero_initialized_publisher>:
 8009cc4:	4b01      	ldr	r3, [pc, #4]	; (8009ccc <rcl_get_zero_initialized_publisher+0x8>)
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	080196b4 	.word	0x080196b4

08009cd0 <rcl_publisher_init>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b08f      	sub	sp, #60	; 0x3c
 8009cd6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8009cd8:	2f00      	cmp	r7, #0
 8009cda:	d03a      	beq.n	8009d52 <rcl_publisher_init+0x82>
 8009cdc:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	4648      	mov	r0, r9
 8009ce4:	4688      	mov	r8, r1
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	461d      	mov	r5, r3
 8009cea:	f000 ff79 	bl	800abe0 <rcutils_allocator_is_valid>
 8009cee:	b380      	cbz	r0, 8009d52 <rcl_publisher_init+0x82>
 8009cf0:	b37c      	cbz	r4, 8009d52 <rcl_publisher_init+0x82>
 8009cf2:	f8d4 a000 	ldr.w	sl, [r4]
 8009cf6:	f1ba 0f00 	cmp.w	sl, #0
 8009cfa:	d004      	beq.n	8009d06 <rcl_publisher_init+0x36>
 8009cfc:	2564      	movs	r5, #100	; 0x64
 8009cfe:	4628      	mov	r0, r5
 8009d00:	b00f      	add	sp, #60	; 0x3c
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	4640      	mov	r0, r8
 8009d08:	f009 fd82 	bl	8013810 <rcl_node_is_valid>
 8009d0c:	b330      	cbz	r0, 8009d5c <rcl_publisher_init+0x8c>
 8009d0e:	b306      	cbz	r6, 8009d52 <rcl_publisher_init+0x82>
 8009d10:	b1fd      	cbz	r5, 8009d52 <rcl_publisher_init+0x82>
 8009d12:	46ce      	mov	lr, r9
 8009d14:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8009d18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d20:	f8de 3000 	ldr.w	r3, [lr]
 8009d24:	f8cc 3000 	str.w	r3, [ip]
 8009d28:	f001 f868 	bl	800adfc <rcutils_get_zero_initialized_string_map>
 8009d2c:	4684      	mov	ip, r0
 8009d2e:	ab0e      	add	r3, sp, #56	; 0x38
 8009d30:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009d34:	f8cd c018 	str.w	ip, [sp, #24]
 8009d38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3e:	4651      	mov	r1, sl
 8009d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d42:	a806      	add	r0, sp, #24
 8009d44:	f001 f8d0 	bl	800aee8 <rcutils_string_map_init>
 8009d48:	b150      	cbz	r0, 8009d60 <rcl_publisher_init+0x90>
 8009d4a:	280a      	cmp	r0, #10
 8009d4c:	d013      	beq.n	8009d76 <rcl_publisher_init+0xa6>
 8009d4e:	2501      	movs	r5, #1
 8009d50:	e7d5      	b.n	8009cfe <rcl_publisher_init+0x2e>
 8009d52:	250b      	movs	r5, #11
 8009d54:	4628      	mov	r0, r5
 8009d56:	b00f      	add	sp, #60	; 0x3c
 8009d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	25c8      	movs	r5, #200	; 0xc8
 8009d5e:	e7ce      	b.n	8009cfe <rcl_publisher_init+0x2e>
 8009d60:	a806      	add	r0, sp, #24
 8009d62:	f009 faa3 	bl	80132ac <rcl_get_default_topic_name_substitutions>
 8009d66:	4682      	mov	sl, r0
 8009d68:	b138      	cbz	r0, 8009d7a <rcl_publisher_init+0xaa>
 8009d6a:	a806      	add	r0, sp, #24
 8009d6c:	f001 f8fa 	bl	800af64 <rcutils_string_map_fini>
 8009d70:	f1ba 0f0a 	cmp.w	sl, #10
 8009d74:	d1eb      	bne.n	8009d4e <rcl_publisher_init+0x7e>
 8009d76:	250a      	movs	r5, #10
 8009d78:	e7c1      	b.n	8009cfe <rcl_publisher_init+0x2e>
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d80:	f009 fd50 	bl	8013824 <rcl_node_get_name>
 8009d84:	4682      	mov	sl, r0
 8009d86:	4640      	mov	r0, r8
 8009d88:	f009 fd54 	bl	8013834 <rcl_node_get_namespace>
 8009d8c:	46ec      	mov	ip, sp
 8009d8e:	4686      	mov	lr, r0
 8009d90:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8009d94:	f10d 0b1c 	add.w	fp, sp, #28
 8009d98:	f8cd b014 	str.w	fp, [sp, #20]
 8009d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009da0:	f8d9 3000 	ldr.w	r3, [r9]
 8009da4:	4628      	mov	r0, r5
 8009da6:	f8cc 3000 	str.w	r3, [ip]
 8009daa:	4651      	mov	r1, sl
 8009dac:	4672      	mov	r2, lr
 8009dae:	ab06      	add	r3, sp, #24
 8009db0:	f009 f918 	bl	8012fe4 <rcl_expand_topic_name>
 8009db4:	4605      	mov	r5, r0
 8009db6:	a806      	add	r0, sp, #24
 8009db8:	f001 f8d4 	bl	800af64 <rcutils_string_map_fini>
 8009dbc:	b920      	cbnz	r0, 8009dc8 <rcl_publisher_init+0xf8>
 8009dbe:	b15d      	cbz	r5, 8009dd8 <rcl_publisher_init+0x108>
 8009dc0:	2d67      	cmp	r5, #103	; 0x67
 8009dc2:	d002      	beq.n	8009dca <rcl_publisher_init+0xfa>
 8009dc4:	2d69      	cmp	r5, #105	; 0x69
 8009dc6:	d05f      	beq.n	8009e88 <rcl_publisher_init+0x1b8>
 8009dc8:	2501      	movs	r5, #1
 8009dca:	9807      	ldr	r0, [sp, #28]
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d096      	beq.n	8009cfe <rcl_publisher_init+0x2e>
 8009dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009dd4:	4798      	blx	r3
 8009dd6:	e792      	b.n	8009cfe <rcl_publisher_init+0x2e>
 8009dd8:	4640      	mov	r0, r8
 8009dda:	f009 fd33 	bl	8013844 <rcl_node_get_options>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d0f2      	beq.n	8009dc8 <rcl_publisher_init+0xf8>
 8009de2:	9807      	ldr	r0, [sp, #28]
 8009de4:	f7f6 fa2e 	bl	8000244 <strlen>
 8009de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009dec:	3001      	adds	r0, #1
 8009dee:	4798      	blx	r3
 8009df0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009df4:	4681      	mov	r9, r0
 8009df6:	4650      	mov	r0, sl
 8009df8:	f7f6 fa24 	bl	8000244 <strlen>
 8009dfc:	4651      	mov	r1, sl
 8009dfe:	1c42      	adds	r2, r0, #1
 8009e00:	4648      	mov	r0, r9
 8009e02:	f00d f927 	bl	8017054 <memcpy>
 8009e06:	462a      	mov	r2, r5
 8009e08:	4648      	mov	r0, r9
 8009e0a:	a908      	add	r1, sp, #32
 8009e0c:	f001 f996 	bl	800b13c <rmw_validate_full_topic_name>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d137      	bne.n	8009e84 <rcl_publisher_init+0x1b4>
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d138      	bne.n	8009e8c <rcl_publisher_init+0x1bc>
 8009e1a:	20c0      	movs	r0, #192	; 0xc0
 8009e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e20:	4798      	blx	r3
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	b3a0      	cbz	r0, 8009e90 <rcl_publisher_init+0x1c0>
 8009e26:	4640      	mov	r0, r8
 8009e28:	f009 fd14 	bl	8013854 <rcl_node_get_rmw_handle>
 8009e2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	4631      	mov	r1, r6
 8009e34:	463b      	mov	r3, r7
 8009e36:	464a      	mov	r2, r9
 8009e38:	6825      	ldr	r5, [r4, #0]
 8009e3a:	f001 fdc7 	bl	800b9cc <rmw_create_publisher>
 8009e3e:	6821      	ldr	r1, [r4, #0]
 8009e40:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 8009e44:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8009e48:	b388      	cbz	r0, 8009eae <rcl_publisher_init+0x1de>
 8009e4a:	3168      	adds	r1, #104	; 0x68
 8009e4c:	f001 fe9a 	bl	800bb84 <rmw_publisher_get_actual_qos>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	b9f0      	cbnz	r0, 8009e94 <rcl_publisher_init+0x1c4>
 8009e56:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8009e60:	4639      	mov	r1, r7
 8009e62:	2268      	movs	r2, #104	; 0x68
 8009e64:	f00d f8f6 	bl	8017054 <memcpy>
 8009e68:	f8d8 2000 	ldr.w	r2, [r8]
 8009e6c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 8009e70:	9807      	ldr	r0, [sp, #28]
 8009e72:	b110      	cbz	r0, 8009e7a <rcl_publisher_init+0x1aa>
 8009e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e78:	4798      	blx	r3
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e80:	4798      	blx	r3
 8009e82:	e73c      	b.n	8009cfe <rcl_publisher_init+0x2e>
 8009e84:	2501      	movs	r5, #1
 8009e86:	e7f3      	b.n	8009e70 <rcl_publisher_init+0x1a0>
 8009e88:	2567      	movs	r5, #103	; 0x67
 8009e8a:	e79e      	b.n	8009dca <rcl_publisher_init+0xfa>
 8009e8c:	2567      	movs	r5, #103	; 0x67
 8009e8e:	e7ef      	b.n	8009e70 <rcl_publisher_init+0x1a0>
 8009e90:	250a      	movs	r5, #10
 8009e92:	e7ed      	b.n	8009e70 <rcl_publisher_init+0x1a0>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0f5      	beq.n	8009e84 <rcl_publisher_init+0x1b4>
 8009e98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009e9c:	b13b      	cbz	r3, 8009eae <rcl_publisher_init+0x1de>
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f009 fcd8 	bl	8013854 <rcl_node_get_rmw_handle>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8009eaa:	f001 fe6d 	bl	800bb88 <rmw_destroy_publisher>
 8009eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009eb2:	6820      	ldr	r0, [r4, #0]
 8009eb4:	4798      	blx	r3
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2501      	movs	r5, #1
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	e7d8      	b.n	8009e70 <rcl_publisher_init+0x1a0>
 8009ebe:	bf00      	nop

08009ec0 <rcl_publisher_get_default_options>:
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	466c      	mov	r4, sp
 8009ec6:	4f0d      	ldr	r7, [pc, #52]	; (8009efc <rcl_publisher_get_default_options+0x3c>)
 8009ec8:	4606      	mov	r6, r0
 8009eca:	2250      	movs	r2, #80	; 0x50
 8009ecc:	490c      	ldr	r1, [pc, #48]	; (8009f00 <rcl_publisher_get_default_options+0x40>)
 8009ece:	4638      	mov	r0, r7
 8009ed0:	f00d f8c0 	bl	8017054 <memcpy>
 8009ed4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8009ed8:	4668      	mov	r0, sp
 8009eda:	f000 fe73 	bl	800abc4 <rcutils_get_default_allocator>
 8009ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f001 f90d 	bl	800b104 <rmw_get_default_publisher_options>
 8009eea:	4639      	mov	r1, r7
 8009eec:	6678      	str	r0, [r7, #100]	; 0x64
 8009eee:	2268      	movs	r2, #104	; 0x68
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f00d f8af 	bl	8017054 <memcpy>
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	b007      	add	sp, #28
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efc:	20006658 	.word	0x20006658
 8009f00:	080196b8 	.word	0x080196b8

08009f04 <rcl_publish>:
 8009f04:	b1f8      	cbz	r0, 8009f46 <rcl_publish+0x42>
 8009f06:	6803      	ldr	r3, [r0, #0]
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b1b3      	cbz	r3, 8009f3c <rcl_publish+0x38>
 8009f0e:	4616      	mov	r6, r2
 8009f10:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8009f14:	b192      	cbz	r2, 8009f3c <rcl_publish+0x38>
 8009f16:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	f008 ffe8 	bl	8012ef0 <rcl_context_is_valid>
 8009f20:	b160      	cbz	r0, 8009f3c <rcl_publish+0x38>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8009f28:	b140      	cbz	r0, 8009f3c <rcl_publish+0x38>
 8009f2a:	b155      	cbz	r5, 8009f42 <rcl_publish+0x3e>
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f001 fcec 	bl	800b90c <rmw_publish>
 8009f34:	3800      	subs	r0, #0
 8009f36:	bf18      	it	ne
 8009f38:	2001      	movne	r0, #1
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	200b      	movs	r0, #11
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009f4a:	4770      	bx	lr

08009f4c <rcl_get_zero_initialized_subscription>:
 8009f4c:	4b01      	ldr	r3, [pc, #4]	; (8009f54 <rcl_get_zero_initialized_subscription+0x8>)
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	08019708 	.word	0x08019708

08009f58 <rcl_subscription_init>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	b08f      	sub	sp, #60	; 0x3c
 8009f5e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8009f60:	b1d7      	cbz	r7, 8009f98 <rcl_subscription_init+0x40>
 8009f62:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8009f66:	4604      	mov	r4, r0
 8009f68:	4648      	mov	r0, r9
 8009f6a:	4688      	mov	r8, r1
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	461d      	mov	r5, r3
 8009f70:	f000 fe36 	bl	800abe0 <rcutils_allocator_is_valid>
 8009f74:	b180      	cbz	r0, 8009f98 <rcl_subscription_init+0x40>
 8009f76:	b17c      	cbz	r4, 8009f98 <rcl_subscription_init+0x40>
 8009f78:	4640      	mov	r0, r8
 8009f7a:	f009 fc49 	bl	8013810 <rcl_node_is_valid>
 8009f7e:	b380      	cbz	r0, 8009fe2 <rcl_subscription_init+0x8a>
 8009f80:	b156      	cbz	r6, 8009f98 <rcl_subscription_init+0x40>
 8009f82:	b14d      	cbz	r5, 8009f98 <rcl_subscription_init+0x40>
 8009f84:	f8d4 a000 	ldr.w	sl, [r4]
 8009f88:	f1ba 0f00 	cmp.w	sl, #0
 8009f8c:	d009      	beq.n	8009fa2 <rcl_subscription_init+0x4a>
 8009f8e:	2564      	movs	r5, #100	; 0x64
 8009f90:	4628      	mov	r0, r5
 8009f92:	b00f      	add	sp, #60	; 0x3c
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	250b      	movs	r5, #11
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	b00f      	add	sp, #60	; 0x3c
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	46ce      	mov	lr, r9
 8009fa4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8009fa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009fac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009fb0:	f8de 3000 	ldr.w	r3, [lr]
 8009fb4:	f8cc 3000 	str.w	r3, [ip]
 8009fb8:	f000 ff20 	bl	800adfc <rcutils_get_zero_initialized_string_map>
 8009fbc:	4684      	mov	ip, r0
 8009fbe:	ab0e      	add	r3, sp, #56	; 0x38
 8009fc0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009fc4:	f8cd c018 	str.w	ip, [sp, #24]
 8009fc8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fce:	4651      	mov	r1, sl
 8009fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd2:	a806      	add	r0, sp, #24
 8009fd4:	f000 ff88 	bl	800aee8 <rcutils_string_map_init>
 8009fd8:	b140      	cbz	r0, 8009fec <rcl_subscription_init+0x94>
 8009fda:	280a      	cmp	r0, #10
 8009fdc:	d011      	beq.n	800a002 <rcl_subscription_init+0xaa>
 8009fde:	2501      	movs	r5, #1
 8009fe0:	e7db      	b.n	8009f9a <rcl_subscription_init+0x42>
 8009fe2:	25c8      	movs	r5, #200	; 0xc8
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	b00f      	add	sp, #60	; 0x3c
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	a806      	add	r0, sp, #24
 8009fee:	f009 f95d 	bl	80132ac <rcl_get_default_topic_name_substitutions>
 8009ff2:	4682      	mov	sl, r0
 8009ff4:	b138      	cbz	r0, 800a006 <rcl_subscription_init+0xae>
 8009ff6:	a806      	add	r0, sp, #24
 8009ff8:	f000 ffb4 	bl	800af64 <rcutils_string_map_fini>
 8009ffc:	f1ba 0f0a 	cmp.w	sl, #10
 800a000:	d1ed      	bne.n	8009fde <rcl_subscription_init+0x86>
 800a002:	250a      	movs	r5, #10
 800a004:	e7c9      	b.n	8009f9a <rcl_subscription_init+0x42>
 800a006:	4640      	mov	r0, r8
 800a008:	f8cd a01c 	str.w	sl, [sp, #28]
 800a00c:	f009 fc0a 	bl	8013824 <rcl_node_get_name>
 800a010:	4682      	mov	sl, r0
 800a012:	4640      	mov	r0, r8
 800a014:	f009 fc0e 	bl	8013834 <rcl_node_get_namespace>
 800a018:	46ec      	mov	ip, sp
 800a01a:	4686      	mov	lr, r0
 800a01c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a020:	f10d 0b1c 	add.w	fp, sp, #28
 800a024:	f8cd b014 	str.w	fp, [sp, #20]
 800a028:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a02c:	f8d9 3000 	ldr.w	r3, [r9]
 800a030:	4628      	mov	r0, r5
 800a032:	f8cc 3000 	str.w	r3, [ip]
 800a036:	4651      	mov	r1, sl
 800a038:	4672      	mov	r2, lr
 800a03a:	ab06      	add	r3, sp, #24
 800a03c:	f008 ffd2 	bl	8012fe4 <rcl_expand_topic_name>
 800a040:	4605      	mov	r5, r0
 800a042:	a806      	add	r0, sp, #24
 800a044:	f000 ff8e 	bl	800af64 <rcutils_string_map_fini>
 800a048:	b920      	cbnz	r0, 800a054 <rcl_subscription_init+0xfc>
 800a04a:	b15d      	cbz	r5, 800a064 <rcl_subscription_init+0x10c>
 800a04c:	2d67      	cmp	r5, #103	; 0x67
 800a04e:	d002      	beq.n	800a056 <rcl_subscription_init+0xfe>
 800a050:	2d69      	cmp	r5, #105	; 0x69
 800a052:	d05a      	beq.n	800a10a <rcl_subscription_init+0x1b2>
 800a054:	2501      	movs	r5, #1
 800a056:	9807      	ldr	r0, [sp, #28]
 800a058:	2800      	cmp	r0, #0
 800a05a:	d09e      	beq.n	8009f9a <rcl_subscription_init+0x42>
 800a05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a05e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a060:	4798      	blx	r3
 800a062:	e79a      	b.n	8009f9a <rcl_subscription_init+0x42>
 800a064:	4640      	mov	r0, r8
 800a066:	f009 fbed 	bl	8013844 <rcl_node_get_options>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0f2      	beq.n	800a054 <rcl_subscription_init+0xfc>
 800a06e:	9807      	ldr	r0, [sp, #28]
 800a070:	f7f6 f8e8 	bl	8000244 <strlen>
 800a074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a076:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a078:	3001      	adds	r0, #1
 800a07a:	4798      	blx	r3
 800a07c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a080:	4681      	mov	r9, r0
 800a082:	4650      	mov	r0, sl
 800a084:	f7f6 f8de 	bl	8000244 <strlen>
 800a088:	4651      	mov	r1, sl
 800a08a:	1c42      	adds	r2, r0, #1
 800a08c:	4648      	mov	r0, r9
 800a08e:	f00c ffe1 	bl	8017054 <memcpy>
 800a092:	462a      	mov	r2, r5
 800a094:	4648      	mov	r0, r9
 800a096:	a908      	add	r1, sp, #32
 800a098:	f001 f850 	bl	800b13c <rmw_validate_full_topic_name>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d132      	bne.n	800a106 <rcl_subscription_init+0x1ae>
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d133      	bne.n	800a10e <rcl_subscription_init+0x1b6>
 800a0a6:	20c8      	movs	r0, #200	; 0xc8
 800a0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a0ac:	4798      	blx	r3
 800a0ae:	6020      	str	r0, [r4, #0]
 800a0b0:	b378      	cbz	r0, 800a112 <rcl_subscription_init+0x1ba>
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	f009 fbce 	bl	8013854 <rcl_node_get_rmw_handle>
 800a0b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4631      	mov	r1, r6
 800a0c0:	463b      	mov	r3, r7
 800a0c2:	464a      	mov	r2, r9
 800a0c4:	6825      	ldr	r5, [r4, #0]
 800a0c6:	f001 fdf3 	bl	800bcb0 <rmw_create_subscription>
 800a0ca:	6821      	ldr	r1, [r4, #0]
 800a0cc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800a0d0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a0d4:	b368      	cbz	r0, 800a132 <rcl_subscription_init+0x1da>
 800a0d6:	3170      	adds	r1, #112	; 0x70
 800a0d8:	f001 fece 	bl	800be78 <rmw_subscription_get_actual_qos>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	b9d0      	cbnz	r0, 800a116 <rcl_subscription_init+0x1be>
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a0e6:	2270      	movs	r2, #112	; 0x70
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800a0ee:	f00c ffb1 	bl	8017054 <memcpy>
 800a0f2:	9807      	ldr	r0, [sp, #28]
 800a0f4:	b110      	cbz	r0, 800a0fc <rcl_subscription_init+0x1a4>
 800a0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a0fa:	4798      	blx	r3
 800a0fc:	4648      	mov	r0, r9
 800a0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a100:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a102:	4798      	blx	r3
 800a104:	e749      	b.n	8009f9a <rcl_subscription_init+0x42>
 800a106:	2501      	movs	r5, #1
 800a108:	e7f3      	b.n	800a0f2 <rcl_subscription_init+0x19a>
 800a10a:	2567      	movs	r5, #103	; 0x67
 800a10c:	e7a3      	b.n	800a056 <rcl_subscription_init+0xfe>
 800a10e:	2567      	movs	r5, #103	; 0x67
 800a110:	e7ef      	b.n	800a0f2 <rcl_subscription_init+0x19a>
 800a112:	250a      	movs	r5, #10
 800a114:	e7ed      	b.n	800a0f2 <rcl_subscription_init+0x19a>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0f4      	beq.n	800a106 <rcl_subscription_init+0x1ae>
 800a11c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a120:	b13b      	cbz	r3, 800a132 <rcl_subscription_init+0x1da>
 800a122:	4640      	mov	r0, r8
 800a124:	f009 fb96 	bl	8013854 <rcl_node_get_rmw_handle>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a12e:	f001 fea5 	bl	800be7c <rmw_destroy_subscription>
 800a132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a134:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a136:	6820      	ldr	r0, [r4, #0]
 800a138:	4798      	blx	r3
 800a13a:	2300      	movs	r3, #0
 800a13c:	2501      	movs	r5, #1
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	e7d7      	b.n	800a0f2 <rcl_subscription_init+0x19a>
 800a142:	bf00      	nop

0800a144 <rcl_subscription_get_default_options>:
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	4f12      	ldr	r7, [pc, #72]	; (800a190 <rcl_subscription_get_default_options+0x4c>)
 800a148:	b089      	sub	sp, #36	; 0x24
 800a14a:	4606      	mov	r6, r0
 800a14c:	2250      	movs	r2, #80	; 0x50
 800a14e:	4911      	ldr	r1, [pc, #68]	; (800a194 <rcl_subscription_get_default_options+0x50>)
 800a150:	4638      	mov	r0, r7
 800a152:	f00c ff7f 	bl	8017054 <memcpy>
 800a156:	ac02      	add	r4, sp, #8
 800a158:	a802      	add	r0, sp, #8
 800a15a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a15e:	f000 fd31 	bl	800abc4 <rcutils_get_default_allocator>
 800a162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	466c      	mov	r4, sp
 800a16a:	4620      	mov	r0, r4
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	f000 ffcf 	bl	800b110 <rmw_get_default_subscription_options>
 800a172:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a176:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a17a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a17e:	2270      	movs	r2, #112	; 0x70
 800a180:	4639      	mov	r1, r7
 800a182:	4630      	mov	r0, r6
 800a184:	f00c ff66 	bl	8017054 <memcpy>
 800a188:	4630      	mov	r0, r6
 800a18a:	b009      	add	sp, #36	; 0x24
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	bf00      	nop
 800a190:	200066c0 	.word	0x200066c0
 800a194:	08019710 	.word	0x08019710

0800a198 <rcl_take>:
 800a198:	2800      	cmp	r0, #0
 800a19a:	d040      	beq.n	800a21e <rcl_take+0x86>
 800a19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	6800      	ldr	r0, [r0, #0]
 800a1a4:	b09d      	sub	sp, #116	; 0x74
 800a1a6:	b390      	cbz	r0, 800a20e <rcl_take+0x76>
 800a1a8:	4699      	mov	r9, r3
 800a1aa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800a1ae:	b373      	cbz	r3, 800a20e <rcl_take+0x76>
 800a1b0:	4688      	mov	r8, r1
 800a1b2:	b391      	cbz	r1, 800a21a <rcl_take+0x82>
 800a1b4:	4617      	mov	r7, r2
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	d035      	beq.n	800a226 <rcl_take+0x8e>
 800a1ba:	463d      	mov	r5, r7
 800a1bc:	a802      	add	r0, sp, #8
 800a1be:	f000 ffab 	bl	800b118 <rmw_get_zero_initialized_message_info>
 800a1c2:	f04f 0c00 	mov.w	ip, #0
 800a1c6:	ac02      	add	r4, sp, #8
 800a1c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1d0:	6836      	ldr	r6, [r6, #0]
 800a1d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a1d6:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 800a1da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a1de:	463b      	mov	r3, r7
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	f8cd 9000 	str.w	r9, [sp]
 800a1e8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a1ec:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 800a1f0:	f001 fea2 	bl	800bf38 <rmw_take_with_info>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	b9c0      	cbnz	r0, 800a22a <rcl_take+0x92>
 800a1f8:	f240 1291 	movw	r2, #401	; 0x191
 800a1fc:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800a200:	2900      	cmp	r1, #0
 800a202:	bf08      	it	eq
 800a204:	4613      	moveq	r3, r2
 800a206:	4618      	mov	r0, r3
 800a208:	b01d      	add	sp, #116	; 0x74
 800a20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a20e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a212:	4618      	mov	r0, r3
 800a214:	b01d      	add	sp, #116	; 0x74
 800a216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a21a:	230b      	movs	r3, #11
 800a21c:	e7f3      	b.n	800a206 <rcl_take+0x6e>
 800a21e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a222:	4618      	mov	r0, r3
 800a224:	4770      	bx	lr
 800a226:	af10      	add	r7, sp, #64	; 0x40
 800a228:	e7c7      	b.n	800a1ba <rcl_take+0x22>
 800a22a:	f008 fe3d 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 800a22e:	4603      	mov	r3, r0
 800a230:	e7e9      	b.n	800a206 <rcl_take+0x6e>
 800a232:	bf00      	nop

0800a234 <rcl_subscription_get_rmw_handle>:
 800a234:	b118      	cbz	r0, 800a23e <rcl_subscription_get_rmw_handle+0xa>
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	b108      	cbz	r0, 800a23e <rcl_subscription_get_rmw_handle+0xa>
 800a23a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a23e:	4770      	bx	lr

0800a240 <_rclc_check_for_new_data>:
 800a240:	4603      	mov	r3, r0
 800a242:	b1e0      	cbz	r0, 800a27e <_rclc_check_for_new_data+0x3e>
 800a244:	7802      	ldrb	r2, [r0, #0]
 800a246:	2a08      	cmp	r2, #8
 800a248:	d81b      	bhi.n	800a282 <_rclc_check_for_new_data+0x42>
 800a24a:	e8df f002 	tbb	[pc, r2]
 800a24e:	1010      	.short	0x1010
 800a250:	05121216 	.word	0x05121216
 800a254:	0505      	.short	0x0505
 800a256:	14          	.byte	0x14
 800a257:	00          	.byte	0x00
 800a258:	6a0a      	ldr	r2, [r1, #32]
 800a25a:	2000      	movs	r0, #0
 800a25c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a25e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a262:	1a12      	subs	r2, r2, r0
 800a264:	bf18      	it	ne
 800a266:	2201      	movne	r2, #1
 800a268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a26c:	4770      	bx	lr
 800a26e:	680a      	ldr	r2, [r1, #0]
 800a270:	e7f3      	b.n	800a25a <_rclc_check_for_new_data+0x1a>
 800a272:	698a      	ldr	r2, [r1, #24]
 800a274:	e7f1      	b.n	800a25a <_rclc_check_for_new_data+0x1a>
 800a276:	688a      	ldr	r2, [r1, #8]
 800a278:	e7ef      	b.n	800a25a <_rclc_check_for_new_data+0x1a>
 800a27a:	690a      	ldr	r2, [r1, #16]
 800a27c:	e7ed      	b.n	800a25a <_rclc_check_for_new_data+0x1a>
 800a27e:	200b      	movs	r0, #11
 800a280:	4770      	bx	lr
 800a282:	2200      	movs	r2, #0
 800a284:	2001      	movs	r0, #1
 800a286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a28a:	4770      	bx	lr

0800a28c <_rclc_take_new_data>:
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d049      	beq.n	800a324 <_rclc_take_new_data+0x98>
 800a290:	b510      	push	{r4, lr}
 800a292:	7803      	ldrb	r3, [r0, #0]
 800a294:	4604      	mov	r4, r0
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d84a      	bhi.n	800a332 <_rclc_take_new_data+0xa6>
 800a29c:	e8df f003 	tbb	[pc, r3]
 800a2a0:	2b121515 	.word	0x2b121515
 800a2a4:	0505052b 	.word	0x0505052b
 800a2a8:	12          	.byte	0x12
 800a2a9:	00          	.byte	0x00
 800a2aa:	6a0b      	ldr	r3, [r1, #32]
 800a2ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b2:	b13b      	cbz	r3, 800a2c4 <_rclc_take_new_data+0x38>
 800a2b4:	6882      	ldr	r2, [r0, #8]
 800a2b6:	f100 0110 	add.w	r1, r0, #16
 800a2ba:	6840      	ldr	r0, [r0, #4]
 800a2bc:	f009 fc0e 	bl	8013adc <rcl_take_request>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d131      	bne.n	800a328 <_rclc_take_new_data+0x9c>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	b00e      	add	sp, #56	; 0x38
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	680b      	ldr	r3, [r1, #0]
 800a2cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f6      	beq.n	800a2c4 <_rclc_take_new_data+0x38>
 800a2d6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	aa02      	add	r2, sp, #8
 800a2de:	f7ff ff5b 	bl	800a198 <rcl_take>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d0ef      	beq.n	800a2c6 <_rclc_take_new_data+0x3a>
 800a2e6:	f240 1391 	movw	r3, #401	; 0x191
 800a2ea:	4298      	cmp	r0, r3
 800a2ec:	d115      	bne.n	800a31a <_rclc_take_new_data+0x8e>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a2f4:	e7e7      	b.n	800a2c6 <_rclc_take_new_data+0x3a>
 800a2f6:	698b      	ldr	r3, [r1, #24]
 800a2f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0e0      	beq.n	800a2c4 <_rclc_take_new_data+0x38>
 800a302:	6882      	ldr	r2, [r0, #8]
 800a304:	f100 0110 	add.w	r1, r0, #16
 800a308:	6840      	ldr	r0, [r0, #4]
 800a30a:	f008 fd91 	bl	8012e30 <rcl_take_response>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d0d8      	beq.n	800a2c4 <_rclc_take_new_data+0x38>
 800a312:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a316:	4298      	cmp	r0, r3
 800a318:	d0d5      	beq.n	800a2c6 <_rclc_take_new_data+0x3a>
 800a31a:	9001      	str	r0, [sp, #4]
 800a31c:	f000 fd50 	bl	800adc0 <rcutils_reset_error>
 800a320:	9801      	ldr	r0, [sp, #4]
 800a322:	e7d0      	b.n	800a2c6 <_rclc_take_new_data+0x3a>
 800a324:	200b      	movs	r0, #11
 800a326:	4770      	bx	lr
 800a328:	f240 2359 	movw	r3, #601	; 0x259
 800a32c:	4298      	cmp	r0, r3
 800a32e:	d0de      	beq.n	800a2ee <_rclc_take_new_data+0x62>
 800a330:	e7f3      	b.n	800a31a <_rclc_take_new_data+0x8e>
 800a332:	2001      	movs	r0, #1
 800a334:	e7c7      	b.n	800a2c6 <_rclc_take_new_data+0x3a>
 800a336:	bf00      	nop

0800a338 <rclc_executor_trigger_any>:
 800a338:	4603      	mov	r3, r0
 800a33a:	b178      	cbz	r0, 800a35c <rclc_executor_trigger_any+0x24>
 800a33c:	b179      	cbz	r1, 800a35e <rclc_executor_trigger_any+0x26>
 800a33e:	2200      	movs	r2, #0
 800a340:	e005      	b.n	800a34e <rclc_executor_trigger_any+0x16>
 800a342:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a346:	3340      	adds	r3, #64	; 0x40
 800a348:	b930      	cbnz	r0, 800a358 <rclc_executor_trigger_any+0x20>
 800a34a:	4291      	cmp	r1, r2
 800a34c:	d005      	beq.n	800a35a <rclc_executor_trigger_any+0x22>
 800a34e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a352:	3201      	adds	r2, #1
 800a354:	2800      	cmp	r0, #0
 800a356:	d1f4      	bne.n	800a342 <rclc_executor_trigger_any+0xa>
 800a358:	4770      	bx	lr
 800a35a:	4770      	bx	lr
 800a35c:	4770      	bx	lr
 800a35e:	4608      	mov	r0, r1
 800a360:	e7fa      	b.n	800a358 <rclc_executor_trigger_any+0x20>
 800a362:	bf00      	nop

0800a364 <_rclc_execute.part.0>:
 800a364:	b530      	push	{r4, r5, lr}
 800a366:	7803      	ldrb	r3, [r0, #0]
 800a368:	4604      	mov	r4, r0
 800a36a:	b083      	sub	sp, #12
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d857      	bhi.n	800a420 <_rclc_execute.part.0+0xbc>
 800a370:	e8df f003 	tbb	[pc, r3]
 800a374:	31372820 	.word	0x31372820
 800a378:	05050540 	.word	0x05050540
 800a37c:	1b          	.byte	0x1b
 800a37d:	00          	.byte	0x00
 800a37e:	2b06      	cmp	r3, #6
 800a380:	d046      	beq.n	800a410 <_rclc_execute.part.0+0xac>
 800a382:	2b07      	cmp	r3, #7
 800a384:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a386:	d13d      	bne.n	800a404 <_rclc_execute.part.0+0xa0>
 800a388:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a38c:	6880      	ldr	r0, [r0, #8]
 800a38e:	4798      	blx	r3
 800a390:	f104 0510 	add.w	r5, r4, #16
 800a394:	4629      	mov	r1, r5
 800a396:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a398:	6860      	ldr	r0, [r4, #4]
 800a39a:	f009 fbd7 	bl	8013b4c <rcl_send_response>
 800a39e:	b138      	cbz	r0, 800a3b0 <_rclc_execute.part.0+0x4c>
 800a3a0:	9001      	str	r0, [sp, #4]
 800a3a2:	f000 fd0d 	bl	800adc0 <rcutils_reset_error>
 800a3a6:	9801      	ldr	r0, [sp, #4]
 800a3a8:	e002      	b.n	800a3b0 <_rclc_execute.part.0+0x4c>
 800a3aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a3ac:	4798      	blx	r3
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	b003      	add	sp, #12
 800a3b2:	bd30      	pop	{r4, r5, pc}
 800a3b4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a3b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a3ba:	b96d      	cbnz	r5, 800a3d8 <_rclc_execute.part.0+0x74>
 800a3bc:	4628      	mov	r0, r5
 800a3be:	4798      	blx	r3
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	e7f5      	b.n	800a3b0 <_rclc_execute.part.0+0x4c>
 800a3c4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800a3c8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800a3cc:	b9ad      	cbnz	r5, 800a3fa <_rclc_execute.part.0+0x96>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4798      	blx	r3
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	e7ec      	b.n	800a3b0 <_rclc_execute.part.0+0x4c>
 800a3d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a3d8:	68a0      	ldr	r0, [r4, #8]
 800a3da:	4798      	blx	r3
 800a3dc:	2000      	movs	r0, #0
 800a3de:	b003      	add	sp, #12
 800a3e0:	bd30      	pop	{r4, r5, pc}
 800a3e2:	6840      	ldr	r0, [r0, #4]
 800a3e4:	f009 fe76 	bl	80140d4 <rcl_timer_call>
 800a3e8:	f240 3321 	movw	r3, #801	; 0x321
 800a3ec:	4298      	cmp	r0, r3
 800a3ee:	d1d6      	bne.n	800a39e <_rclc_execute.part.0+0x3a>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7dd      	b.n	800a3b0 <_rclc_execute.part.0+0x4c>
 800a3f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a3f6:	f100 0110 	add.w	r1, r0, #16
 800a3fa:	68a0      	ldr	r0, [r4, #8]
 800a3fc:	4798      	blx	r3
 800a3fe:	2000      	movs	r0, #0
 800a400:	b003      	add	sp, #12
 800a402:	bd30      	pop	{r4, r5, pc}
 800a404:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a406:	6880      	ldr	r0, [r0, #8]
 800a408:	4798      	blx	r3
 800a40a:	f104 0510 	add.w	r5, r4, #16
 800a40e:	e7c1      	b.n	800a394 <_rclc_execute.part.0+0x30>
 800a410:	f100 0510 	add.w	r5, r0, #16
 800a414:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a416:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a418:	4629      	mov	r1, r5
 800a41a:	6880      	ldr	r0, [r0, #8]
 800a41c:	4798      	blx	r3
 800a41e:	e7b9      	b.n	800a394 <_rclc_execute.part.0+0x30>
 800a420:	2001      	movs	r0, #1
 800a422:	e7c5      	b.n	800a3b0 <_rclc_execute.part.0+0x4c>
 800a424:	0000      	movs	r0, r0
	...

0800a428 <rclc_executor_init>:
 800a428:	2800      	cmp	r0, #0
 800a42a:	d064      	beq.n	800a4f6 <rclc_executor_init+0xce>
 800a42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	460f      	mov	r7, r1
 800a432:	b0ae      	sub	sp, #184	; 0xb8
 800a434:	2900      	cmp	r1, #0
 800a436:	d056      	beq.n	800a4e6 <rclc_executor_init+0xbe>
 800a438:	4605      	mov	r5, r0
 800a43a:	4618      	mov	r0, r3
 800a43c:	4616      	mov	r6, r2
 800a43e:	469a      	mov	sl, r3
 800a440:	f000 fbce 	bl	800abe0 <rcutils_allocator_is_valid>
 800a444:	2800      	cmp	r0, #0
 800a446:	d04e      	beq.n	800a4e6 <rclc_executor_init+0xbe>
 800a448:	2e00      	cmp	r6, #0
 800a44a:	d04c      	beq.n	800a4e6 <rclc_executor_init+0xbe>
 800a44c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 800a450:	e9d9 8900 	ldrd	r8, r9, [r9]
 800a454:	2280      	movs	r2, #128	; 0x80
 800a456:	492a      	ldr	r1, [pc, #168]	; (800a500 <rclc_executor_init+0xd8>)
 800a458:	2400      	movs	r4, #0
 800a45a:	a80e      	add	r0, sp, #56	; 0x38
 800a45c:	f00c fdfa 	bl	8017054 <memcpy>
 800a460:	2280      	movs	r2, #128	; 0x80
 800a462:	a90e      	add	r1, sp, #56	; 0x38
 800a464:	4628      	mov	r0, r5
 800a466:	f00c fdf5 	bl	8017054 <memcpy>
 800a46a:	602f      	str	r7, [r5, #0]
 800a46c:	466f      	mov	r7, sp
 800a46e:	4668      	mov	r0, sp
 800a470:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800a474:	f00a f886 	bl	8014584 <rcl_get_zero_initialized_wait_set>
 800a478:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a47a:	f105 0c14 	add.w	ip, r5, #20
 800a47e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a482:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a484:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a488:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a48a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	f8da 3000 	ldr.w	r3, [sl]
 800a494:	f8da 1010 	ldr.w	r1, [sl, #16]
 800a498:	f8cc 2000 	str.w	r2, [ip]
 800a49c:	01b0      	lsls	r0, r6, #6
 800a49e:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 800a4a2:	f8c5 a010 	str.w	sl, [r5, #16]
 800a4a6:	4798      	blx	r3
 800a4a8:	6068      	str	r0, [r5, #4]
 800a4aa:	b908      	cbnz	r0, 800a4b0 <rclc_executor_init+0x88>
 800a4ac:	e025      	b.n	800a4fa <rclc_executor_init+0xd2>
 800a4ae:	6868      	ldr	r0, [r5, #4]
 800a4b0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	f000 fa28 	bl	800a90c <rclc_executor_handle_init>
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	d1f6      	bne.n	800a4ae <rclc_executor_init+0x86>
 800a4c0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800a4c4:	f000 fa16 	bl	800a8f4 <rclc_executor_handle_counters_zero_init>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	4a0e      	ldr	r2, [pc, #56]	; (800a504 <rclc_executor_init+0xdc>)
 800a4cc:	686b      	ldr	r3, [r5, #4]
 800a4ce:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800a4d2:	b163      	cbz	r3, 800a4ee <rclc_executor_init+0xc6>
 800a4d4:	692b      	ldr	r3, [r5, #16]
 800a4d6:	b153      	cbz	r3, 800a4ee <rclc_executor_init+0xc6>
 800a4d8:	68ab      	ldr	r3, [r5, #8]
 800a4da:	b143      	cbz	r3, 800a4ee <rclc_executor_init+0xc6>
 800a4dc:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800a4e0:	b02e      	add	sp, #184	; 0xb8
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	200b      	movs	r0, #11
 800a4e8:	b02e      	add	sp, #184	; 0xb8
 800a4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	b02e      	add	sp, #184	; 0xb8
 800a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f6:	200b      	movs	r0, #11
 800a4f8:	4770      	bx	lr
 800a4fa:	200a      	movs	r0, #10
 800a4fc:	e7f4      	b.n	800a4e8 <rclc_executor_init+0xc0>
 800a4fe:	bf00      	nop
 800a500:	08019760 	.word	0x08019760
 800a504:	0800a339 	.word	0x0800a339
 800a508:	3b9aca00 	.word	0x3b9aca00
 800a50c:	00000000 	.word	0x00000000

0800a510 <rclc_executor_add_subscription>:
 800a510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a514:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800a518:	b348      	cbz	r0, 800a56e <rclc_executor_add_subscription+0x5e>
 800a51a:	b341      	cbz	r1, 800a56e <rclc_executor_add_subscription+0x5e>
 800a51c:	b33a      	cbz	r2, 800a56e <rclc_executor_add_subscription+0x5e>
 800a51e:	b333      	cbz	r3, 800a56e <rclc_executor_add_subscription+0x5e>
 800a520:	4604      	mov	r4, r0
 800a522:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 800a526:	4285      	cmp	r5, r0
 800a528:	d302      	bcc.n	800a530 <rclc_executor_add_subscription+0x20>
 800a52a:	2001      	movs	r0, #1
 800a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a530:	2700      	movs	r7, #0
 800a532:	f04f 0c01 	mov.w	ip, #1
 800a536:	6860      	ldr	r0, [r4, #4]
 800a538:	ea4f 1e85 	mov.w	lr, r5, lsl #6
 800a53c:	f800 700e 	strb.w	r7, [r0, lr]
 800a540:	f104 0814 	add.w	r8, r4, #20
 800a544:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800a548:	4465      	add	r5, ip
 800a54a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a54e:	6303      	str	r3, [r0, #48]	; 0x30
 800a550:	7046      	strb	r6, [r0, #1]
 800a552:	62c7      	str	r7, [r0, #44]	; 0x2c
 800a554:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800a558:	4640      	mov	r0, r8
 800a55a:	60e5      	str	r5, [r4, #12]
 800a55c:	f00a f824 	bl	80145a8 <rcl_wait_set_is_valid>
 800a560:	b940      	cbnz	r0, 800a574 <rclc_executor_add_subscription+0x64>
 800a562:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a564:	2000      	movs	r0, #0
 800a566:	3301      	adds	r3, #1
 800a568:	64a3      	str	r3, [r4, #72]	; 0x48
 800a56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56e:	200b      	movs	r0, #11
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a574:	4640      	mov	r0, r8
 800a576:	f00a f81d 	bl	80145b4 <rcl_wait_set_fini>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d0f1      	beq.n	800a562 <rclc_executor_add_subscription+0x52>
 800a57e:	e7d5      	b.n	800a52c <rclc_executor_add_subscription+0x1c>

0800a580 <rclc_executor_add_timer>:
 800a580:	b308      	cbz	r0, 800a5c6 <rclc_executor_add_timer+0x46>
 800a582:	b301      	cbz	r1, 800a5c6 <rclc_executor_add_timer+0x46>
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a58a:	4293      	cmp	r3, r2
 800a58c:	4604      	mov	r4, r0
 800a58e:	d301      	bcc.n	800a594 <rclc_executor_add_timer+0x14>
 800a590:	2001      	movs	r0, #1
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	2502      	movs	r5, #2
 800a596:	2701      	movs	r7, #1
 800a598:	2600      	movs	r6, #0
 800a59a:	6840      	ldr	r0, [r0, #4]
 800a59c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800a5a0:	6051      	str	r1, [r2, #4]
 800a5a2:	0199      	lsls	r1, r3, #6
 800a5a4:	5245      	strh	r5, [r0, r1]
 800a5a6:	443b      	add	r3, r7
 800a5a8:	f104 0514 	add.w	r5, r4, #20
 800a5ac:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800a5b0:	62d6      	str	r6, [r2, #44]	; 0x2c
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	60e3      	str	r3, [r4, #12]
 800a5b6:	f009 fff7 	bl	80145a8 <rcl_wait_set_is_valid>
 800a5ba:	b930      	cbnz	r0, 800a5ca <rclc_executor_add_timer+0x4a>
 800a5bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a5be:	2000      	movs	r0, #0
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c6:	200b      	movs	r0, #11
 800a5c8:	4770      	bx	lr
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f009 fff2 	bl	80145b4 <rcl_wait_set_fini>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d0f3      	beq.n	800a5bc <rclc_executor_add_timer+0x3c>
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d6:	bf00      	nop

0800a5d8 <rclc_executor_prepare>:
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d03d      	beq.n	800a658 <rclc_executor_prepare+0x80>
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	f100 0814 	add.w	r8, r0, #20
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	b09a      	sub	sp, #104	; 0x68
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	f009 ffdd 	bl	80145a8 <rcl_wait_set_is_valid>
 800a5ee:	b118      	cbz	r0, 800a5f8 <rclc_executor_prepare+0x20>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	b01a      	add	sp, #104	; 0x68
 800a5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	f009 ffdb 	bl	80145b4 <rcl_wait_set_fini>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d127      	bne.n	800a652 <rclc_executor_prepare+0x7a>
 800a602:	4646      	mov	r6, r8
 800a604:	a80c      	add	r0, sp, #48	; 0x30
 800a606:	ad0c      	add	r5, sp, #48	; 0x30
 800a608:	f009 ffbc 	bl	8014584 <rcl_get_zero_initialized_wait_set>
 800a60c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a60e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a612:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a616:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a618:	6927      	ldr	r7, [r4, #16]
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	ad04      	add	r5, sp, #16
 800a61e:	6033      	str	r3, [r6, #0]
 800a620:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a624:	6838      	ldr	r0, [r7, #0]
 800a626:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a628:	6826      	ldr	r6, [r4, #0]
 800a62a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800a62e:	6028      	str	r0, [r5, #0]
 800a630:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800a634:	e9cd 3200 	strd	r3, r2, [sp]
 800a638:	4640      	mov	r0, r8
 800a63a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a63c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a63e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a640:	f00a fada 	bl	8014bf8 <rcl_wait_set_init>
 800a644:	2800      	cmp	r0, #0
 800a646:	d0d4      	beq.n	800a5f2 <rclc_executor_prepare+0x1a>
 800a648:	900b      	str	r0, [sp, #44]	; 0x2c
 800a64a:	f000 fbb9 	bl	800adc0 <rcutils_reset_error>
 800a64e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a650:	e7cf      	b.n	800a5f2 <rclc_executor_prepare+0x1a>
 800a652:	f000 fbb5 	bl	800adc0 <rcutils_reset_error>
 800a656:	e7d4      	b.n	800a602 <rclc_executor_prepare+0x2a>
 800a658:	200b      	movs	r0, #11
 800a65a:	4770      	bx	lr

0800a65c <rclc_executor_spin_some.part.0>:
 800a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	f100 0814 	add.w	r8, r0, #20
 800a664:	b083      	sub	sp, #12
 800a666:	4692      	mov	sl, r2
 800a668:	4699      	mov	r9, r3
 800a66a:	4605      	mov	r5, r0
 800a66c:	f7ff ffb4 	bl	800a5d8 <rclc_executor_prepare>
 800a670:	4640      	mov	r0, r8
 800a672:	f00a f86f 	bl	8014754 <rcl_wait_set_clear>
 800a676:	4607      	mov	r7, r0
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 80bb 	bne.w	800a7f4 <rclc_executor_spin_some.part.0+0x198>
 800a67e:	68ab      	ldr	r3, [r5, #8]
 800a680:	4604      	mov	r4, r0
 800a682:	b1eb      	cbz	r3, 800a6c0 <rclc_executor_spin_some.part.0+0x64>
 800a684:	686e      	ldr	r6, [r5, #4]
 800a686:	01a2      	lsls	r2, r4, #6
 800a688:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800a68c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800a690:	b1b3      	cbz	r3, 800a6c0 <rclc_executor_spin_some.part.0+0x64>
 800a692:	5cb3      	ldrb	r3, [r6, r2]
 800a694:	2b08      	cmp	r3, #8
 800a696:	f200 80a6 	bhi.w	800a7e6 <rclc_executor_spin_some.part.0+0x18a>
 800a69a:	e8df f003 	tbb	[pc, r3]
 800a69e:	8686      	.short	0x8686
 800a6a0:	05787890 	.word	0x05787890
 800a6a4:	0505      	.short	0x0505
 800a6a6:	9a          	.byte	0x9a
 800a6a7:	00          	.byte	0x00
 800a6a8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	6849      	ldr	r1, [r1, #4]
 800a6b0:	f00a fbb8 	bl	8014e24 <rcl_wait_set_add_service>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d172      	bne.n	800a79e <rclc_executor_spin_some.part.0+0x142>
 800a6b8:	68ab      	ldr	r3, [r5, #8]
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	429c      	cmp	r4, r3
 800a6be:	d3e1      	bcc.n	800a684 <rclc_executor_spin_some.part.0+0x28>
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	f00a fbdb 	bl	8014e80 <rcl_wait>
 800a6ca:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 8098 	beq.w	800a804 <rclc_executor_spin_some.part.0+0x1a8>
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	f040 8086 	bne.w	800a7e6 <rclc_executor_spin_some.part.0+0x18a>
 800a6da:	68a9      	ldr	r1, [r5, #8]
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	f000 80ea 	beq.w	800a8b6 <rclc_executor_spin_some.part.0+0x25a>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	f240 1991 	movw	r9, #401	; 0x191
 800a6e8:	4626      	mov	r6, r4
 800a6ea:	e00b      	b.n	800a704 <rclc_executor_spin_some.part.0+0xa8>
 800a6ec:	4641      	mov	r1, r8
 800a6ee:	f7ff fda7 	bl	800a240 <_rclc_check_for_new_data>
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	b110      	cbz	r0, 800a6fc <rclc_executor_spin_some.part.0+0xa0>
 800a6f6:	4548      	cmp	r0, r9
 800a6f8:	f040 8082 	bne.w	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a6fc:	68a9      	ldr	r1, [r5, #8]
 800a6fe:	428e      	cmp	r6, r1
 800a700:	f080 80d5 	bcs.w	800a8ae <rclc_executor_spin_some.part.0+0x252>
 800a704:	686b      	ldr	r3, [r5, #4]
 800a706:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800a70a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a70e:	3601      	adds	r6, #1
 800a710:	2a00      	cmp	r2, #0
 800a712:	d1eb      	bne.n	800a6ec <rclc_executor_spin_some.part.0+0x90>
 800a714:	4618      	mov	r0, r3
 800a716:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a71a:	4798      	blx	r3
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d06f      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a720:	68ab      	ldr	r3, [r5, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d06c      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a726:	2600      	movs	r6, #0
 800a728:	f240 1991 	movw	r9, #401	; 0x191
 800a72c:	e009      	b.n	800a742 <rclc_executor_spin_some.part.0+0xe6>
 800a72e:	4641      	mov	r1, r8
 800a730:	f7ff fdac 	bl	800a28c <_rclc_take_new_data>
 800a734:	4604      	mov	r4, r0
 800a736:	b108      	cbz	r0, 800a73c <rclc_executor_spin_some.part.0+0xe0>
 800a738:	4548      	cmp	r0, r9
 800a73a:	d161      	bne.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a73c:	68ab      	ldr	r3, [r5, #8]
 800a73e:	429e      	cmp	r6, r3
 800a740:	d207      	bcs.n	800a752 <rclc_executor_spin_some.part.0+0xf6>
 800a742:	6868      	ldr	r0, [r5, #4]
 800a744:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a748:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a74c:	3601      	adds	r6, #1
 800a74e:	2a00      	cmp	r2, #0
 800a750:	d1ed      	bne.n	800a72e <rclc_executor_spin_some.part.0+0xd2>
 800a752:	2600      	movs	r6, #0
 800a754:	b933      	cbnz	r3, 800a764 <rclc_executor_spin_some.part.0+0x108>
 800a756:	e053      	b.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a758:	2a01      	cmp	r2, #1
 800a75a:	d011      	beq.n	800a780 <rclc_executor_spin_some.part.0+0x124>
 800a75c:	3601      	adds	r6, #1
 800a75e:	429e      	cmp	r6, r3
 800a760:	d244      	bcs.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a762:	2400      	movs	r4, #0
 800a764:	6868      	ldr	r0, [r5, #4]
 800a766:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800a76a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d046      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a772:	7842      	ldrb	r2, [r0, #1]
 800a774:	2a00      	cmp	r2, #0
 800a776:	d1ef      	bne.n	800a758 <rclc_executor_spin_some.part.0+0xfc>
 800a778:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d0ed      	beq.n	800a75c <rclc_executor_spin_some.part.0+0x100>
 800a780:	f7ff fdf0 	bl	800a364 <_rclc_execute.part.0>
 800a784:	2800      	cmp	r0, #0
 800a786:	f040 8094 	bne.w	800a8b2 <rclc_executor_spin_some.part.0+0x256>
 800a78a:	68ab      	ldr	r3, [r5, #8]
 800a78c:	e7e6      	b.n	800a75c <rclc_executor_spin_some.part.0+0x100>
 800a78e:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a792:	4640      	mov	r0, r8
 800a794:	6849      	ldr	r1, [r1, #4]
 800a796:	f00a fb19 	bl	8014dcc <rcl_wait_set_add_client>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d08c      	beq.n	800a6b8 <rclc_executor_spin_some.part.0+0x5c>
 800a79e:	9001      	str	r0, [sp, #4]
 800a7a0:	f000 fb0e 	bl	800adc0 <rcutils_reset_error>
 800a7a4:	9801      	ldr	r0, [sp, #4]
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	e020      	b.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a7aa:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	6849      	ldr	r1, [r1, #4]
 800a7b2:	f009 ffa3 	bl	80146fc <rcl_wait_set_add_subscription>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f43f af7e 	beq.w	800a6b8 <rclc_executor_spin_some.part.0+0x5c>
 800a7bc:	e7ef      	b.n	800a79e <rclc_executor_spin_some.part.0+0x142>
 800a7be:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	6849      	ldr	r1, [r1, #4]
 800a7c6:	f00a fad1 	bl	8014d6c <rcl_wait_set_add_timer>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f43f af74 	beq.w	800a6b8 <rclc_executor_spin_some.part.0+0x5c>
 800a7d0:	e7e5      	b.n	800a79e <rclc_executor_spin_some.part.0+0x142>
 800a7d2:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	6849      	ldr	r1, [r1, #4]
 800a7da:	f00a fa9b 	bl	8014d14 <rcl_wait_set_add_guard_condition>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f af6a 	beq.w	800a6b8 <rclc_executor_spin_some.part.0+0x5c>
 800a7e4:	e7db      	b.n	800a79e <rclc_executor_spin_some.part.0+0x142>
 800a7e6:	f000 faeb 	bl	800adc0 <rcutils_reset_error>
 800a7ea:	2701      	movs	r7, #1
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	b003      	add	sp, #12
 800a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	f000 fae4 	bl	800adc0 <rcutils_reset_error>
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	4627      	mov	r7, r4
 800a802:	e7f3      	b.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a804:	68a9      	ldr	r1, [r5, #8]
 800a806:	2900      	cmp	r1, #0
 800a808:	d058      	beq.n	800a8bc <rclc_executor_spin_some.part.0+0x260>
 800a80a:	2400      	movs	r4, #0
 800a80c:	f240 1991 	movw	r9, #401	; 0x191
 800a810:	4626      	mov	r6, r4
 800a812:	e009      	b.n	800a828 <rclc_executor_spin_some.part.0+0x1cc>
 800a814:	4641      	mov	r1, r8
 800a816:	f7ff fd13 	bl	800a240 <_rclc_check_for_new_data>
 800a81a:	4604      	mov	r4, r0
 800a81c:	b108      	cbz	r0, 800a822 <rclc_executor_spin_some.part.0+0x1c6>
 800a81e:	4548      	cmp	r0, r9
 800a820:	d1ee      	bne.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a822:	68a9      	ldr	r1, [r5, #8]
 800a824:	428e      	cmp	r6, r1
 800a826:	d240      	bcs.n	800a8aa <rclc_executor_spin_some.part.0+0x24e>
 800a828:	686b      	ldr	r3, [r5, #4]
 800a82a:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800a82e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a832:	3601      	adds	r6, #1
 800a834:	2a00      	cmp	r2, #0
 800a836:	d1ed      	bne.n	800a814 <rclc_executor_spin_some.part.0+0x1b8>
 800a838:	4618      	mov	r0, r3
 800a83a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800a83e:	4798      	blx	r3
 800a840:	2800      	cmp	r0, #0
 800a842:	d0dd      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a844:	68ab      	ldr	r3, [r5, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0da      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a84a:	f04f 0a00 	mov.w	sl, #0
 800a84e:	f240 1691 	movw	r6, #401	; 0x191
 800a852:	f240 2959 	movw	r9, #601	; 0x259
 800a856:	e00b      	b.n	800a870 <rclc_executor_spin_some.part.0+0x214>
 800a858:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a85c:	b113      	cbz	r3, 800a864 <rclc_executor_spin_some.part.0+0x208>
 800a85e:	f7ff fd81 	bl	800a364 <_rclc_execute.part.0>
 800a862:	bb30      	cbnz	r0, 800a8b2 <rclc_executor_spin_some.part.0+0x256>
 800a864:	68ab      	ldr	r3, [r5, #8]
 800a866:	f10a 0a01 	add.w	sl, sl, #1
 800a86a:	459a      	cmp	sl, r3
 800a86c:	d2be      	bcs.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a86e:	2400      	movs	r4, #0
 800a870:	6868      	ldr	r0, [r5, #4]
 800a872:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a876:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a87a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0be      	beq.n	800a800 <rclc_executor_spin_some.part.0+0x1a4>
 800a882:	4641      	mov	r1, r8
 800a884:	f7ff fd02 	bl	800a28c <_rclc_take_new_data>
 800a888:	b118      	cbz	r0, 800a892 <rclc_executor_spin_some.part.0+0x236>
 800a88a:	42b0      	cmp	r0, r6
 800a88c:	d001      	beq.n	800a892 <rclc_executor_spin_some.part.0+0x236>
 800a88e:	4548      	cmp	r0, r9
 800a890:	d10f      	bne.n	800a8b2 <rclc_executor_spin_some.part.0+0x256>
 800a892:	6868      	ldr	r0, [r5, #4]
 800a894:	eb10 000b 	adds.w	r0, r0, fp
 800a898:	d005      	beq.n	800a8a6 <rclc_executor_spin_some.part.0+0x24a>
 800a89a:	7843      	ldrb	r3, [r0, #1]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0db      	beq.n	800a858 <rclc_executor_spin_some.part.0+0x1fc>
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d1df      	bne.n	800a864 <rclc_executor_spin_some.part.0+0x208>
 800a8a4:	e7db      	b.n	800a85e <rclc_executor_spin_some.part.0+0x202>
 800a8a6:	270b      	movs	r7, #11
 800a8a8:	e7a0      	b.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a8aa:	686b      	ldr	r3, [r5, #4]
 800a8ac:	e7c4      	b.n	800a838 <rclc_executor_spin_some.part.0+0x1dc>
 800a8ae:	686b      	ldr	r3, [r5, #4]
 800a8b0:	e730      	b.n	800a714 <rclc_executor_spin_some.part.0+0xb8>
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	e79a      	b.n	800a7ec <rclc_executor_spin_some.part.0+0x190>
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	686b      	ldr	r3, [r5, #4]
 800a8ba:	e72b      	b.n	800a714 <rclc_executor_spin_some.part.0+0xb8>
 800a8bc:	460c      	mov	r4, r1
 800a8be:	686b      	ldr	r3, [r5, #4]
 800a8c0:	e7ba      	b.n	800a838 <rclc_executor_spin_some.part.0+0x1dc>
 800a8c2:	bf00      	nop

0800a8c4 <rclc_executor_spin>:
 800a8c4:	b1a0      	cbz	r0, 800a8f0 <rclc_executor_spin+0x2c>
 800a8c6:	b5d0      	push	{r4, r6, r7, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	f008 fb0e 	bl	8012ef0 <rcl_context_is_valid>
 800a8d4:	b140      	cbz	r0, 800a8e8 <rclc_executor_spin+0x24>
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4632      	mov	r2, r6
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7ff febe 	bl	800a65c <rclc_executor_spin_some.part.0>
 800a8e0:	f030 0302 	bics.w	r3, r0, #2
 800a8e4:	d0f1      	beq.n	800a8ca <rclc_executor_spin+0x6>
 800a8e6:	bdd0      	pop	{r4, r6, r7, pc}
 800a8e8:	f000 fa6a 	bl	800adc0 <rcutils_reset_error>
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	bdd0      	pop	{r4, r6, r7, pc}
 800a8f0:	200b      	movs	r0, #11
 800a8f2:	4770      	bx	lr

0800a8f4 <rclc_executor_handle_counters_zero_init>:
 800a8f4:	b140      	cbz	r0, 800a908 <rclc_executor_handle_counters_zero_init+0x14>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	6043      	str	r3, [r0, #4]
 800a8fc:	6083      	str	r3, [r0, #8]
 800a8fe:	60c3      	str	r3, [r0, #12]
 800a900:	6103      	str	r3, [r0, #16]
 800a902:	6143      	str	r3, [r0, #20]
 800a904:	4618      	mov	r0, r3
 800a906:	4770      	bx	lr
 800a908:	200b      	movs	r0, #11
 800a90a:	4770      	bx	lr

0800a90c <rclc_executor_handle_init>:
 800a90c:	b178      	cbz	r0, 800a92e <rclc_executor_handle_init+0x22>
 800a90e:	4603      	mov	r3, r0
 800a910:	2209      	movs	r2, #9
 800a912:	b430      	push	{r4, r5}
 800a914:	2000      	movs	r0, #0
 800a916:	2400      	movs	r4, #0
 800a918:	2500      	movs	r5, #0
 800a91a:	801a      	strh	r2, [r3, #0]
 800a91c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800a920:	bc30      	pop	{r4, r5}
 800a922:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800a926:	6359      	str	r1, [r3, #52]	; 0x34
 800a928:	6318      	str	r0, [r3, #48]	; 0x30
 800a92a:	8718      	strh	r0, [r3, #56]	; 0x38
 800a92c:	4770      	bx	lr
 800a92e:	200b      	movs	r0, #11
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop

0800a934 <rclc_support_init_with_options>:
 800a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a93e:	b390      	cbz	r0, 800a9a6 <rclc_support_init_with_options+0x72>
 800a940:	461c      	mov	r4, r3
 800a942:	b383      	cbz	r3, 800a9a6 <rclc_support_init_with_options+0x72>
 800a944:	f1b8 0f00 	cmp.w	r8, #0
 800a948:	d02d      	beq.n	800a9a6 <rclc_support_init_with_options+0x72>
 800a94a:	4605      	mov	r5, r0
 800a94c:	460e      	mov	r6, r1
 800a94e:	4617      	mov	r7, r2
 800a950:	f7ff f884 	bl	8009a5c <rcl_get_zero_initialized_init_options>
 800a954:	4629      	mov	r1, r5
 800a956:	6028      	str	r0, [r5, #0]
 800a958:	4620      	mov	r0, r4
 800a95a:	f7ff f8f7 	bl	8009b4c <rcl_init_options_copy>
 800a95e:	4604      	mov	r4, r0
 800a960:	b9d8      	cbnz	r0, 800a99a <rclc_support_init_with_options+0x66>
 800a962:	466c      	mov	r4, sp
 800a964:	4620      	mov	r0, r4
 800a966:	f008 fab3 	bl	8012ed0 <rcl_get_zero_initialized_context>
 800a96a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a96e:	f105 0408 	add.w	r4, r5, #8
 800a972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a976:	4623      	mov	r3, r4
 800a978:	4639      	mov	r1, r7
 800a97a:	4630      	mov	r0, r6
 800a97c:	462a      	mov	r2, r5
 800a97e:	f008 fc9b 	bl	80132b8 <rcl_init>
 800a982:	4604      	mov	r4, r0
 800a984:	b948      	cbnz	r0, 800a99a <rclc_support_init_with_options+0x66>
 800a986:	4642      	mov	r2, r8
 800a988:	2003      	movs	r0, #3
 800a98a:	f8c5 8018 	str.w	r8, [r5, #24]
 800a98e:	f105 011c 	add.w	r1, r5, #28
 800a992:	f009 f90b 	bl	8013bac <rcl_clock_init>
 800a996:	4604      	mov	r4, r0
 800a998:	b108      	cbz	r0, 800a99e <rclc_support_init_with_options+0x6a>
 800a99a:	f000 fa11 	bl	800adc0 <rcutils_reset_error>
 800a99e:	4620      	mov	r0, r4
 800a9a0:	b004      	add	sp, #16
 800a9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a6:	240b      	movs	r4, #11
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	b004      	add	sp, #16
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9b0 <rclc_node_init_default>:
 800a9b0:	b3c0      	cbz	r0, 800aa24 <rclc_node_init_default+0x74>
 800a9b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	b08f      	sub	sp, #60	; 0x3c
 800a9ba:	b331      	cbz	r1, 800aa0a <rclc_node_init_default+0x5a>
 800a9bc:	4616      	mov	r6, r2
 800a9be:	b322      	cbz	r2, 800aa0a <rclc_node_init_default+0x5a>
 800a9c0:	461f      	mov	r7, r3
 800a9c2:	b313      	cbz	r3, 800aa0a <rclc_node_init_default+0x5a>
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	f10d 0810 	add.w	r8, sp, #16
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	f10d 091c 	add.w	r9, sp, #28
 800a9d0:	f008 fdaa 	bl	8013528 <rcl_get_zero_initialized_node>
 800a9d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a9d8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9dc:	4648      	mov	r0, r9
 800a9de:	f008 ff3f 	bl	8013860 <rcl_node_get_default_options>
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f008 fda0 	bl	8013528 <rcl_get_zero_initialized_node>
 800a9e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	f8cd 9000 	str.w	r9, [sp]
 800a9f2:	f107 0308 	add.w	r3, r7, #8
 800a9f6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f008 fd9d 	bl	801353c <rcl_node_init>
 800aa02:	b930      	cbnz	r0, 800aa12 <rclc_node_init_default+0x62>
 800aa04:	b00f      	add	sp, #60	; 0x3c
 800aa06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa0a:	200b      	movs	r0, #11
 800aa0c:	b00f      	add	sp, #60	; 0x3c
 800aa0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa12:	9003      	str	r0, [sp, #12]
 800aa14:	f000 f9d4 	bl	800adc0 <rcutils_reset_error>
 800aa18:	f000 f9d2 	bl	800adc0 <rcutils_reset_error>
 800aa1c:	9803      	ldr	r0, [sp, #12]
 800aa1e:	b00f      	add	sp, #60	; 0x3c
 800aa20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa24:	200b      	movs	r0, #11
 800aa26:	4770      	bx	lr

0800aa28 <rclc_publisher_init_default>:
 800aa28:	b368      	cbz	r0, 800aa86 <rclc_publisher_init_default+0x5e>
 800aa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	460d      	mov	r5, r1
 800aa30:	b09e      	sub	sp, #120	; 0x78
 800aa32:	b321      	cbz	r1, 800aa7e <rclc_publisher_init_default+0x56>
 800aa34:	4616      	mov	r6, r2
 800aa36:	b312      	cbz	r2, 800aa7e <rclc_publisher_init_default+0x56>
 800aa38:	461f      	mov	r7, r3
 800aa3a:	b303      	cbz	r3, 800aa7e <rclc_publisher_init_default+0x56>
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	f7ff f941 	bl	8009cc4 <rcl_get_zero_initialized_publisher>
 800aa42:	f10d 0810 	add.w	r8, sp, #16
 800aa46:	6020      	str	r0, [r4, #0]
 800aa48:	4640      	mov	r0, r8
 800aa4a:	f7ff fa39 	bl	8009ec0 <rcl_publisher_get_default_options>
 800aa4e:	2250      	movs	r2, #80	; 0x50
 800aa50:	490e      	ldr	r1, [pc, #56]	; (800aa8c <rclc_publisher_init_default+0x64>)
 800aa52:	4640      	mov	r0, r8
 800aa54:	f00c fafe 	bl	8017054 <memcpy>
 800aa58:	463b      	mov	r3, r7
 800aa5a:	4632      	mov	r2, r6
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f8cd 8000 	str.w	r8, [sp]
 800aa64:	f7ff f934 	bl	8009cd0 <rcl_publisher_init>
 800aa68:	b910      	cbnz	r0, 800aa70 <rclc_publisher_init_default+0x48>
 800aa6a:	b01e      	add	sp, #120	; 0x78
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	9003      	str	r0, [sp, #12]
 800aa72:	f000 f9a5 	bl	800adc0 <rcutils_reset_error>
 800aa76:	9803      	ldr	r0, [sp, #12]
 800aa78:	b01e      	add	sp, #120	; 0x78
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7e:	200b      	movs	r0, #11
 800aa80:	b01e      	add	sp, #120	; 0x78
 800aa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa86:	200b      	movs	r0, #11
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	080197e0 	.word	0x080197e0

0800aa90 <rclc_subscription_init_best_effort>:
 800aa90:	b368      	cbz	r0, 800aaee <rclc_subscription_init_best_effort+0x5e>
 800aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa96:	460d      	mov	r5, r1
 800aa98:	b0a0      	sub	sp, #128	; 0x80
 800aa9a:	b321      	cbz	r1, 800aae6 <rclc_subscription_init_best_effort+0x56>
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	b312      	cbz	r2, 800aae6 <rclc_subscription_init_best_effort+0x56>
 800aaa0:	461f      	mov	r7, r3
 800aaa2:	b303      	cbz	r3, 800aae6 <rclc_subscription_init_best_effort+0x56>
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	f7ff fa51 	bl	8009f4c <rcl_get_zero_initialized_subscription>
 800aaaa:	f10d 0810 	add.w	r8, sp, #16
 800aaae:	6020      	str	r0, [r4, #0]
 800aab0:	4640      	mov	r0, r8
 800aab2:	f7ff fb47 	bl	800a144 <rcl_subscription_get_default_options>
 800aab6:	2250      	movs	r2, #80	; 0x50
 800aab8:	490e      	ldr	r1, [pc, #56]	; (800aaf4 <rclc_subscription_init_best_effort+0x64>)
 800aaba:	4640      	mov	r0, r8
 800aabc:	f00c faca 	bl	8017054 <memcpy>
 800aac0:	463b      	mov	r3, r7
 800aac2:	4632      	mov	r2, r6
 800aac4:	4629      	mov	r1, r5
 800aac6:	4620      	mov	r0, r4
 800aac8:	f8cd 8000 	str.w	r8, [sp]
 800aacc:	f7ff fa44 	bl	8009f58 <rcl_subscription_init>
 800aad0:	b910      	cbnz	r0, 800aad8 <rclc_subscription_init_best_effort+0x48>
 800aad2:	b020      	add	sp, #128	; 0x80
 800aad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad8:	9003      	str	r0, [sp, #12]
 800aada:	f000 f971 	bl	800adc0 <rcutils_reset_error>
 800aade:	9803      	ldr	r0, [sp, #12]
 800aae0:	b020      	add	sp, #128	; 0x80
 800aae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae6:	200b      	movs	r0, #11
 800aae8:	b020      	add	sp, #128	; 0x80
 800aaea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaee:	200b      	movs	r0, #11
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	08019830 	.word	0x08019830

0800aaf8 <rclc_timer_init_default>:
 800aaf8:	b360      	cbz	r0, 800ab54 <rclc_timer_init_default+0x5c>
 800aafa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aafe:	460c      	mov	r4, r1
 800ab00:	b08b      	sub	sp, #44	; 0x2c
 800ab02:	b319      	cbz	r1, 800ab4c <rclc_timer_init_default+0x54>
 800ab04:	4691      	mov	r9, r2
 800ab06:	4698      	mov	r8, r3
 800ab08:	4607      	mov	r7, r0
 800ab0a:	f009 fa33 	bl	8013f74 <rcl_get_zero_initialized_timer>
 800ab0e:	4684      	mov	ip, r0
 800ab10:	69a6      	ldr	r6, [r4, #24]
 800ab12:	ad03      	add	r5, sp, #12
 800ab14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab18:	6833      	ldr	r3, [r6, #0]
 800ab1a:	f8c7 c000 	str.w	ip, [r7]
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab22:	4638      	mov	r0, r7
 800ab24:	e9cd 9800 	strd	r9, r8, [sp]
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	f104 0208 	add.w	r2, r4, #8
 800ab2e:	f104 011c 	add.w	r1, r4, #28
 800ab32:	f009 fa25 	bl	8013f80 <rcl_timer_init>
 800ab36:	b910      	cbnz	r0, 800ab3e <rclc_timer_init_default+0x46>
 800ab38:	b00b      	add	sp, #44	; 0x2c
 800ab3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab3e:	9009      	str	r0, [sp, #36]	; 0x24
 800ab40:	f000 f93e 	bl	800adc0 <rcutils_reset_error>
 800ab44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab46:	b00b      	add	sp, #44	; 0x2c
 800ab48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	200b      	movs	r0, #11
 800ab4e:	b00b      	add	sp, #44	; 0x2c
 800ab50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab54:	200b      	movs	r0, #11
 800ab56:	4770      	bx	lr

0800ab58 <__default_zero_allocate>:
 800ab58:	f00c b9f4 	b.w	8016f44 <calloc>

0800ab5c <__default_reallocate>:
 800ab5c:	f00c bbe4 	b.w	8017328 <realloc>

0800ab60 <__default_deallocate>:
 800ab60:	f00c ba70 	b.w	8017044 <free>

0800ab64 <__default_allocate>:
 800ab64:	f00c ba66 	b.w	8017034 <malloc>

0800ab68 <rcutils_get_zero_initialized_allocator>:
 800ab68:	b470      	push	{r4, r5, r6}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	4d04      	ldr	r5, [pc, #16]	; (800ab80 <rcutils_get_zero_initialized_allocator+0x18>)
 800ab70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	4630      	mov	r0, r6
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bc70      	pop	{r4, r5, r6}
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	08019880 	.word	0x08019880

0800ab84 <rcutils_set_default_allocator>:
 800ab84:	b1a0      	cbz	r0, 800abb0 <rcutils_set_default_allocator+0x2c>
 800ab86:	6802      	ldr	r2, [r0, #0]
 800ab88:	b19a      	cbz	r2, 800abb2 <rcutils_set_default_allocator+0x2e>
 800ab8a:	6841      	ldr	r1, [r0, #4]
 800ab8c:	b199      	cbz	r1, 800abb6 <rcutils_set_default_allocator+0x32>
 800ab8e:	b470      	push	{r4, r5, r6}
 800ab90:	68c4      	ldr	r4, [r0, #12]
 800ab92:	b15c      	cbz	r4, 800abac <rcutils_set_default_allocator+0x28>
 800ab94:	6885      	ldr	r5, [r0, #8]
 800ab96:	b185      	cbz	r5, 800abba <rcutils_set_default_allocator+0x36>
 800ab98:	2600      	movs	r6, #0
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <rcutils_set_default_allocator+0x3c>)
 800ab9e:	e9c3 2100 	strd	r2, r1, [r3]
 800aba2:	e9c3 5402 	strd	r5, r4, [r3, #8]
 800aba6:	611e      	str	r6, [r3, #16]
 800aba8:	bc70      	pop	{r4, r5, r6}
 800abaa:	4770      	bx	lr
 800abac:	4620      	mov	r0, r4
 800abae:	e7fb      	b.n	800aba8 <rcutils_set_default_allocator+0x24>
 800abb0:	4770      	bx	lr
 800abb2:	4610      	mov	r0, r2
 800abb4:	4770      	bx	lr
 800abb6:	4608      	mov	r0, r1
 800abb8:	4770      	bx	lr
 800abba:	4628      	mov	r0, r5
 800abbc:	e7f4      	b.n	800aba8 <rcutils_set_default_allocator+0x24>
 800abbe:	bf00      	nop
 800abc0:	20000014 	.word	0x20000014

0800abc4 <rcutils_get_default_allocator>:
 800abc4:	b470      	push	{r4, r5, r6}
 800abc6:	4604      	mov	r4, r0
 800abc8:	4606      	mov	r6, r0
 800abca:	4d04      	ldr	r5, [pc, #16]	; (800abdc <rcutils_get_default_allocator+0x18>)
 800abcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	4630      	mov	r0, r6
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bc70      	pop	{r4, r5, r6}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000014 	.word	0x20000014

0800abe0 <rcutils_allocator_is_valid>:
 800abe0:	b158      	cbz	r0, 800abfa <rcutils_allocator_is_valid+0x1a>
 800abe2:	6803      	ldr	r3, [r0, #0]
 800abe4:	b143      	cbz	r3, 800abf8 <rcutils_allocator_is_valid+0x18>
 800abe6:	6843      	ldr	r3, [r0, #4]
 800abe8:	b133      	cbz	r3, 800abf8 <rcutils_allocator_is_valid+0x18>
 800abea:	68c3      	ldr	r3, [r0, #12]
 800abec:	b123      	cbz	r3, 800abf8 <rcutils_allocator_is_valid+0x18>
 800abee:	6880      	ldr	r0, [r0, #8]
 800abf0:	3800      	subs	r0, #0
 800abf2:	bf18      	it	ne
 800abf4:	2001      	movne	r0, #1
 800abf6:	4770      	bx	lr
 800abf8:	4618      	mov	r0, r3
 800abfa:	4770      	bx	lr

0800abfc <__rcutils_format_error_string>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	460f      	mov	r7, r1
 800ac02:	4606      	mov	r6, r0
 800ac04:	b087      	sub	sp, #28
 800ac06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f00c fc1f 	bl	801744e <strnlen>
 800ac10:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800ac14:	4548      	cmp	r0, r9
 800ac16:	bf28      	it	cs
 800ac18:	4648      	movcs	r0, r9
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800ac22:	462a      	mov	r2, r5
 800ac24:	4630      	mov	r0, r6
 800ac26:	f00c fa23 	bl	8017070 <memmove>
 800ac2a:	2c05      	cmp	r4, #5
 800ac2c:	46a0      	mov	r8, r4
 800ac2e:	bf28      	it	cs
 800ac30:	f04f 0805 	movcs.w	r8, #5
 800ac34:	2300      	movs	r3, #0
 800ac36:	4544      	cmp	r4, r8
 800ac38:	bf98      	it	ls
 800ac3a:	eba9 0805 	subls.w	r8, r9, r5
 800ac3e:	5573      	strb	r3, [r6, r5]
 800ac40:	442e      	add	r6, r5
 800ac42:	2500      	movs	r5, #0
 800ac44:	4642      	mov	r2, r8
 800ac46:	4630      	mov	r0, r6
 800ac48:	4947      	ldr	r1, [pc, #284]	; (800ad68 <__rcutils_format_error_string+0x16c>)
 800ac4a:	eba4 0408 	sub.w	r4, r4, r8
 800ac4e:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 800ac52:	f00c f9ff 	bl	8017054 <memcpy>
 800ac56:	f806 5008 	strb.w	r5, [r6, r8]
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	f00c fbf6 	bl	801744e <strnlen>
 800ac62:	4284      	cmp	r4, r0
 800ac64:	4683      	mov	fp, r0
 800ac66:	4446      	add	r6, r8
 800ac68:	d96b      	bls.n	800ad42 <__rcutils_format_error_string+0x146>
 800ac6a:	1a24      	subs	r4, r4, r0
 800ac6c:	2c01      	cmp	r4, #1
 800ac6e:	46a1      	mov	r9, r4
 800ac70:	bf28      	it	cs
 800ac72:	f04f 0901 	movcs.w	r9, #1
 800ac76:	4602      	mov	r2, r0
 800ac78:	4651      	mov	r1, sl
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f00c f9f8 	bl	8017070 <memmove>
 800ac80:	454c      	cmp	r4, r9
 800ac82:	eb06 030b 	add.w	r3, r6, fp
 800ac86:	f806 500b 	strb.w	r5, [r6, fp]
 800ac8a:	bf88      	it	hi
 800ac8c:	eba4 0809 	subhi.w	r8, r4, r9
 800ac90:	d960      	bls.n	800ad54 <__rcutils_format_error_string+0x158>
 800ac92:	464a      	mov	r2, r9
 800ac94:	4618      	mov	r0, r3
 800ac96:	4935      	ldr	r1, [pc, #212]	; (800ad6c <__rcutils_format_error_string+0x170>)
 800ac98:	f00c f9dc 	bl	8017054 <memcpy>
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	f800 6009 	strb.w	r6, [r0, r9]
 800aca2:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800aca6:	ea54 0305 	orrs.w	r3, r4, r5
 800acaa:	4481      	add	r9, r0
 800acac:	d057      	beq.n	800ad5e <__rcutils_format_error_string+0x162>
 800acae:	466f      	mov	r7, sp
 800acb0:	46ba      	mov	sl, r7
 800acb2:	4620      	mov	r0, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	220a      	movs	r2, #10
 800acb8:	2300      	movs	r3, #0
 800acba:	f7f5 fd9f 	bl	80007fc <__aeabi_uldivmod>
 800acbe:	3230      	adds	r2, #48	; 0x30
 800acc0:	2300      	movs	r3, #0
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	f80a 2b01 	strb.w	r2, [sl], #1
 800acca:	220a      	movs	r2, #10
 800accc:	f7f5 fd96 	bl	80007fc <__aeabi_uldivmod>
 800acd0:	462b      	mov	r3, r5
 800acd2:	4622      	mov	r2, r4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf08      	it	eq
 800acd8:	2a0a      	cmpeq	r2, #10
 800acda:	4604      	mov	r4, r0
 800acdc:	460d      	mov	r5, r1
 800acde:	f106 0601 	add.w	r6, r6, #1
 800ace2:	d2e6      	bcs.n	800acb2 <__rcutils_format_error_string+0xb6>
 800ace4:	2300      	movs	r3, #0
 800ace6:	aa06      	add	r2, sp, #24
 800ace8:	4416      	add	r6, r2
 800acea:	2115      	movs	r1, #21
 800acec:	4638      	mov	r0, r7
 800acee:	f806 3c18 	strb.w	r3, [r6, #-24]
 800acf2:	f00c fbac 	bl	801744e <strnlen>
 800acf6:	2801      	cmp	r0, #1
 800acf8:	d90f      	bls.n	800ad1a <__rcutils_format_error_string+0x11e>
 800acfa:	463a      	mov	r2, r7
 800acfc:	1e43      	subs	r3, r0, #1
 800acfe:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800ad02:	443b      	add	r3, r7
 800ad04:	4408      	add	r0, r1
 800ad06:	7811      	ldrb	r1, [r2, #0]
 800ad08:	781c      	ldrb	r4, [r3, #0]
 800ad0a:	f802 4b01 	strb.w	r4, [r2], #1
 800ad0e:	f803 1901 	strb.w	r1, [r3], #-1
 800ad12:	1ac4      	subs	r4, r0, r3
 800ad14:	1a81      	subs	r1, r0, r2
 800ad16:	428c      	cmp	r4, r1
 800ad18:	d3f5      	bcc.n	800ad06 <__rcutils_format_error_string+0x10a>
 800ad1a:	4641      	mov	r1, r8
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f00c fb96 	bl	801744e <strnlen>
 800ad22:	4604      	mov	r4, r0
 800ad24:	4540      	cmp	r0, r8
 800ad26:	bf28      	it	cs
 800ad28:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4648      	mov	r0, r9
 800ad32:	f00c f98f 	bl	8017054 <memcpy>
 800ad36:	2300      	movs	r3, #0
 800ad38:	f809 3004 	strb.w	r3, [r9, r4]
 800ad3c:	b007      	add	sp, #28
 800ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	3c01      	subs	r4, #1
 800ad44:	4622      	mov	r2, r4
 800ad46:	4651      	mov	r1, sl
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f00c f991 	bl	8017070 <memmove>
 800ad4e:	1933      	adds	r3, r6, r4
 800ad50:	5535      	strb	r5, [r6, r4]
 800ad52:	2401      	movs	r4, #1
 800ad54:	f04f 0801 	mov.w	r8, #1
 800ad58:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800ad5c:	e799      	b.n	800ac92 <__rcutils_format_error_string+0x96>
 800ad5e:	2330      	movs	r3, #48	; 0x30
 800ad60:	466f      	mov	r7, sp
 800ad62:	f8ad 3000 	strh.w	r3, [sp]
 800ad66:	e7d8      	b.n	800ad1a <__rcutils_format_error_string+0x11e>
 800ad68:	08019894 	.word	0x08019894
 800ad6c:	0801989c 	.word	0x0801989c

0800ad70 <rcutils_get_error_string>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4b0e      	ldr	r3, [pc, #56]	; (800adac <rcutils_get_error_string+0x3c>)
 800ad74:	4604      	mov	r4, r0
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	b18b      	cbz	r3, 800ad9e <rcutils_get_error_string+0x2e>
 800ad7a:	4d0d      	ldr	r5, [pc, #52]	; (800adb0 <rcutils_get_error_string+0x40>)
 800ad7c:	782b      	ldrb	r3, [r5, #0]
 800ad7e:	b13b      	cbz	r3, 800ad90 <rcutils_get_error_string+0x20>
 800ad80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad84:	4620      	mov	r0, r4
 800ad86:	490b      	ldr	r1, [pc, #44]	; (800adb4 <rcutils_get_error_string+0x44>)
 800ad88:	f00c f964 	bl	8017054 <memcpy>
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	4909      	ldr	r1, [pc, #36]	; (800adb8 <rcutils_get_error_string+0x48>)
 800ad92:	4808      	ldr	r0, [pc, #32]	; (800adb4 <rcutils_get_error_string+0x44>)
 800ad94:	f7ff ff32 	bl	800abfc <__rcutils_format_error_string>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	702b      	strb	r3, [r5, #0]
 800ad9c:	e7f0      	b.n	800ad80 <rcutils_get_error_string+0x10>
 800ad9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ada2:	4906      	ldr	r1, [pc, #24]	; (800adbc <rcutils_get_error_string+0x4c>)
 800ada4:	f00c f956 	bl	8017054 <memcpy>
 800ada8:	4620      	mov	r0, r4
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20006730 	.word	0x20006730
 800adb0:	20006731 	.word	0x20006731
 800adb4:	20008490 	.word	0x20008490
 800adb8:	20008890 	.word	0x20008890
 800adbc:	080191bc 	.word	0x080191bc

0800adc0 <rcutils_reset_error>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	2400      	movs	r4, #0
 800adc4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800adc8:	4621      	mov	r1, r4
 800adca:	4807      	ldr	r0, [pc, #28]	; (800ade8 <rcutils_reset_error+0x28>)
 800adcc:	f00c f96a 	bl	80170a4 <memset>
 800add0:	4b06      	ldr	r3, [pc, #24]	; (800adec <rcutils_reset_error+0x2c>)
 800add2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800add6:	4906      	ldr	r1, [pc, #24]	; (800adf0 <rcutils_reset_error+0x30>)
 800add8:	4806      	ldr	r0, [pc, #24]	; (800adf4 <rcutils_reset_error+0x34>)
 800adda:	701c      	strb	r4, [r3, #0]
 800addc:	f00c f93a 	bl	8017054 <memcpy>
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <rcutils_reset_error+0x38>)
 800ade2:	701c      	strb	r4, [r3, #0]
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	bf00      	nop
 800ade8:	20008890 	.word	0x20008890
 800adec:	20006731 	.word	0x20006731
 800adf0:	080189bc 	.word	0x080189bc
 800adf4:	20008490 	.word	0x20008490
 800adf8:	20006730 	.word	0x20006730

0800adfc <rcutils_get_zero_initialized_string_map>:
 800adfc:	2000      	movs	r0, #0
 800adfe:	4b01      	ldr	r3, [pc, #4]	; (800ae04 <rcutils_get_zero_initialized_string_map+0x8>)
 800ae00:	6018      	str	r0, [r3, #0]
 800ae02:	4770      	bx	lr
 800ae04:	20006734 	.word	0x20006734

0800ae08 <rcutils_string_map_reserve>:
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d05d      	beq.n	800aec8 <rcutils_string_map_reserve+0xc0>
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	6805      	ldr	r5, [r0, #0]
 800ae12:	4606      	mov	r6, r0
 800ae14:	460c      	mov	r4, r1
 800ae16:	b12d      	cbz	r5, 800ae24 <rcutils_string_map_reserve+0x1c>
 800ae18:	68eb      	ldr	r3, [r5, #12]
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	d905      	bls.n	800ae2a <rcutils_string_map_reserve+0x22>
 800ae1e:	461c      	mov	r4, r3
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	d1f9      	bne.n	800ae18 <rcutils_string_map_reserve+0x10>
 800ae24:	201f      	movs	r0, #31
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	68ab      	ldr	r3, [r5, #8]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d047      	beq.n	800aec0 <rcutils_string_map_reserve+0xb8>
 800ae30:	6a2f      	ldr	r7, [r5, #32]
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d034      	beq.n	800aea0 <rcutils_string_map_reserve+0x98>
 800ae36:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ae3a:	d243      	bcs.n	800aec4 <rcutils_string_map_reserve+0xbc>
 800ae3c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800ae40:	4641      	mov	r1, r8
 800ae42:	463a      	mov	r2, r7
 800ae44:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800ae48:	6828      	ldr	r0, [r5, #0]
 800ae4a:	47c8      	blx	r9
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d039      	beq.n	800aec4 <rcutils_string_map_reserve+0xbc>
 800ae50:	6833      	ldr	r3, [r6, #0]
 800ae52:	463a      	mov	r2, r7
 800ae54:	6018      	str	r0, [r3, #0]
 800ae56:	4641      	mov	r1, r8
 800ae58:	6858      	ldr	r0, [r3, #4]
 800ae5a:	47c8      	blx	r9
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	b388      	cbz	r0, 800aec4 <rcutils_string_map_reserve+0xbc>
 800ae60:	6835      	ldr	r5, [r6, #0]
 800ae62:	68aa      	ldr	r2, [r5, #8]
 800ae64:	6068      	str	r0, [r5, #4]
 800ae66:	42a2      	cmp	r2, r4
 800ae68:	d226      	bcs.n	800aeb8 <rcutils_string_map_reserve+0xb0>
 800ae6a:	682e      	ldr	r6, [r5, #0]
 800ae6c:	eb00 0c08 	add.w	ip, r0, r8
 800ae70:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800ae74:	4560      	cmp	r0, ip
 800ae76:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800ae7a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800ae7e:	d203      	bcs.n	800ae88 <rcutils_string_map_reserve+0x80>
 800ae80:	eb06 0c08 	add.w	ip, r6, r8
 800ae84:	4567      	cmp	r7, ip
 800ae86:	d321      	bcc.n	800aecc <rcutils_string_map_reserve+0xc4>
 800ae88:	1aa2      	subs	r2, r4, r2
 800ae8a:	0096      	lsls	r6, r2, #2
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	2100      	movs	r1, #0
 800ae90:	f00c f908 	bl	80170a4 <memset>
 800ae94:	4632      	mov	r2, r6
 800ae96:	4638      	mov	r0, r7
 800ae98:	2100      	movs	r1, #0
 800ae9a:	f00c f903 	bl	80170a4 <memset>
 800ae9e:	e00b      	b.n	800aeb8 <rcutils_string_map_reserve+0xb0>
 800aea0:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800aea4:	6828      	ldr	r0, [r5, #0]
 800aea6:	4639      	mov	r1, r7
 800aea8:	47c0      	blx	r8
 800aeaa:	6833      	ldr	r3, [r6, #0]
 800aeac:	4639      	mov	r1, r7
 800aeae:	6858      	ldr	r0, [r3, #4]
 800aeb0:	601c      	str	r4, [r3, #0]
 800aeb2:	47c0      	blx	r8
 800aeb4:	6835      	ldr	r5, [r6, #0]
 800aeb6:	606c      	str	r4, [r5, #4]
 800aeb8:	2000      	movs	r0, #0
 800aeba:	60ac      	str	r4, [r5, #8]
 800aebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec0:	2000      	movs	r0, #0
 800aec2:	e7b0      	b.n	800ae26 <rcutils_string_map_reserve+0x1e>
 800aec4:	200a      	movs	r0, #10
 800aec6:	e7ae      	b.n	800ae26 <rcutils_string_map_reserve+0x1e>
 800aec8:	200b      	movs	r0, #11
 800aeca:	4770      	bx	lr
 800aecc:	2000      	movs	r0, #0
 800aece:	3904      	subs	r1, #4
 800aed0:	1f32      	subs	r2, r6, #4
 800aed2:	440b      	add	r3, r1
 800aed4:	4490      	add	r8, r2
 800aed6:	4431      	add	r1, r6
 800aed8:	f841 0f04 	str.w	r0, [r1, #4]!
 800aedc:	4541      	cmp	r1, r8
 800aede:	f843 0f04 	str.w	r0, [r3, #4]!
 800aee2:	d1f9      	bne.n	800aed8 <rcutils_string_map_reserve+0xd0>
 800aee4:	e7e8      	b.n	800aeb8 <rcutils_string_map_reserve+0xb0>
 800aee6:	bf00      	nop

0800aee8 <rcutils_string_map_init>:
 800aee8:	b082      	sub	sp, #8
 800aeea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeec:	ac06      	add	r4, sp, #24
 800aeee:	e884 000c 	stmia.w	r4, {r2, r3}
 800aef2:	b370      	cbz	r0, 800af52 <rcutils_string_map_init+0x6a>
 800aef4:	6806      	ldr	r6, [r0, #0]
 800aef6:	4604      	mov	r4, r0
 800aef8:	b12e      	cbz	r6, 800af06 <rcutils_string_map_init+0x1e>
 800aefa:	251e      	movs	r5, #30
 800aefc:	4628      	mov	r0, r5
 800aefe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af02:	b002      	add	sp, #8
 800af04:	4770      	bx	lr
 800af06:	a806      	add	r0, sp, #24
 800af08:	460d      	mov	r5, r1
 800af0a:	f7ff fe69 	bl	800abe0 <rcutils_allocator_is_valid>
 800af0e:	b300      	cbz	r0, 800af52 <rcutils_string_map_init+0x6a>
 800af10:	2024      	movs	r0, #36	; 0x24
 800af12:	9b06      	ldr	r3, [sp, #24]
 800af14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af16:	4798      	blx	r3
 800af18:	6020      	str	r0, [r4, #0]
 800af1a:	b300      	cbz	r0, 800af5e <rcutils_string_map_init+0x76>
 800af1c:	f100 0710 	add.w	r7, r0, #16
 800af20:	f10d 0c18 	add.w	ip, sp, #24
 800af24:	e9c0 6600 	strd	r6, r6, [r0]
 800af28:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800af2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800af32:	f8dc 3000 	ldr.w	r3, [ip]
 800af36:	4629      	mov	r1, r5
 800af38:	4620      	mov	r0, r4
 800af3a:	603b      	str	r3, [r7, #0]
 800af3c:	f7ff ff64 	bl	800ae08 <rcutils_string_map_reserve>
 800af40:	4605      	mov	r5, r0
 800af42:	2800      	cmp	r0, #0
 800af44:	d0da      	beq.n	800aefc <rcutils_string_map_init+0x14>
 800af46:	9b07      	ldr	r3, [sp, #28]
 800af48:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af4a:	6820      	ldr	r0, [r4, #0]
 800af4c:	4798      	blx	r3
 800af4e:	6026      	str	r6, [r4, #0]
 800af50:	e7d4      	b.n	800aefc <rcutils_string_map_init+0x14>
 800af52:	250b      	movs	r5, #11
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af5a:	b002      	add	sp, #8
 800af5c:	4770      	bx	lr
 800af5e:	250a      	movs	r5, #10
 800af60:	e7cc      	b.n	800aefc <rcutils_string_map_init+0x14>
 800af62:	bf00      	nop

0800af64 <rcutils_string_map_fini>:
 800af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af68:	2800      	cmp	r0, #0
 800af6a:	d036      	beq.n	800afda <rcutils_string_map_fini+0x76>
 800af6c:	6804      	ldr	r4, [r0, #0]
 800af6e:	4606      	mov	r6, r0
 800af70:	2c00      	cmp	r4, #0
 800af72:	d02f      	beq.n	800afd4 <rcutils_string_map_fini+0x70>
 800af74:	68a3      	ldr	r3, [r4, #8]
 800af76:	b313      	cbz	r3, 800afbe <rcutils_string_map_fini+0x5a>
 800af78:	2500      	movs	r5, #0
 800af7a:	46a8      	mov	r8, r5
 800af7c:	e017      	b.n	800afae <rcutils_string_map_fini+0x4a>
 800af7e:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800af82:	6967      	ldr	r7, [r4, #20]
 800af84:	4649      	mov	r1, r9
 800af86:	47b8      	blx	r7
 800af88:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af8c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800af90:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af94:	4649      	mov	r1, r9
 800af96:	47b8      	blx	r7
 800af98:	68e3      	ldr	r3, [r4, #12]
 800af9a:	6862      	ldr	r2, [r4, #4]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800afa2:	60e3      	str	r3, [r4, #12]
 800afa4:	6834      	ldr	r4, [r6, #0]
 800afa6:	3501      	adds	r5, #1
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	429d      	cmp	r5, r3
 800afac:	d207      	bcs.n	800afbe <rcutils_string_map_fini+0x5a>
 800afae:	6822      	ldr	r2, [r4, #0]
 800afb0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d1e2      	bne.n	800af7e <rcutils_string_map_fini+0x1a>
 800afb8:	3501      	adds	r5, #1
 800afba:	429d      	cmp	r5, r3
 800afbc:	d3f8      	bcc.n	800afb0 <rcutils_string_map_fini+0x4c>
 800afbe:	2100      	movs	r1, #0
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff ff21 	bl	800ae08 <rcutils_string_map_reserve>
 800afc6:	4604      	mov	r4, r0
 800afc8:	b920      	cbnz	r0, 800afd4 <rcutils_string_map_fini+0x70>
 800afca:	6830      	ldr	r0, [r6, #0]
 800afcc:	6943      	ldr	r3, [r0, #20]
 800afce:	6a01      	ldr	r1, [r0, #32]
 800afd0:	4798      	blx	r3
 800afd2:	6034      	str	r4, [r6, #0]
 800afd4:	4620      	mov	r0, r4
 800afd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afda:	240b      	movs	r4, #11
 800afdc:	4620      	mov	r0, r4
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	bf00      	nop

0800afe4 <rcutils_string_map_getn>:
 800afe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	b310      	cbz	r0, 800b030 <rcutils_string_map_getn+0x4c>
 800afea:	6804      	ldr	r4, [r0, #0]
 800afec:	b30c      	cbz	r4, 800b032 <rcutils_string_map_getn+0x4e>
 800afee:	460d      	mov	r5, r1
 800aff0:	b1f1      	cbz	r1, 800b030 <rcutils_string_map_getn+0x4c>
 800aff2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800aff6:	6827      	ldr	r7, [r4, #0]
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	d018      	beq.n	800b030 <rcutils_string_map_getn+0x4c>
 800affe:	4690      	mov	r8, r2
 800b000:	2600      	movs	r6, #0
 800b002:	3f04      	subs	r7, #4
 800b004:	f857 9f04 	ldr.w	r9, [r7, #4]!
 800b008:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800b00c:	3601      	adds	r6, #1
 800b00e:	f1b9 0f00 	cmp.w	r9, #0
 800b012:	d00b      	beq.n	800b02c <rcutils_string_map_getn+0x48>
 800b014:	4648      	mov	r0, r9
 800b016:	f7f5 f915 	bl	8000244 <strlen>
 800b01a:	4540      	cmp	r0, r8
 800b01c:	4602      	mov	r2, r0
 800b01e:	4649      	mov	r1, r9
 800b020:	bf38      	it	cc
 800b022:	4642      	movcc	r2, r8
 800b024:	4628      	mov	r0, r5
 800b026:	f00c fa00 	bl	801742a <strncmp>
 800b02a:	b128      	cbz	r0, 800b038 <rcutils_string_map_getn+0x54>
 800b02c:	45b2      	cmp	sl, r6
 800b02e:	d1e9      	bne.n	800b004 <rcutils_string_map_getn+0x20>
 800b030:	2400      	movs	r4, #0
 800b032:	4620      	mov	r0, r4
 800b034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	f853 400b 	ldr.w	r4, [r3, fp]
 800b03e:	4620      	mov	r0, r4
 800b040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b044 <rcutils_system_time_now>:
 800b044:	b310      	cbz	r0, 800b08c <rcutils_system_time_now+0x48>
 800b046:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b048:	b085      	sub	sp, #20
 800b04a:	4604      	mov	r4, r0
 800b04c:	4669      	mov	r1, sp
 800b04e:	2001      	movs	r0, #1
 800b050:	f7f7 fd3a 	bl	8002ac8 <clock_gettime>
 800b054:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b058:	2e00      	cmp	r6, #0
 800b05a:	f177 0300 	sbcs.w	r3, r7, #0
 800b05e:	db12      	blt.n	800b086 <rcutils_system_time_now+0x42>
 800b060:	9902      	ldr	r1, [sp, #8]
 800b062:	2900      	cmp	r1, #0
 800b064:	db0c      	blt.n	800b080 <rcutils_system_time_now+0x3c>
 800b066:	2000      	movs	r0, #0
 800b068:	4d09      	ldr	r5, [pc, #36]	; (800b090 <rcutils_system_time_now+0x4c>)
 800b06a:	fba6 2305 	umull	r2, r3, r6, r5
 800b06e:	fb05 3307 	mla	r3, r5, r7, r3
 800b072:	1852      	adds	r2, r2, r1
 800b074:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b078:	e9c4 2300 	strd	r2, r3, [r4]
 800b07c:	b005      	add	sp, #20
 800b07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b080:	ea56 0307 	orrs.w	r3, r6, r7
 800b084:	d1ef      	bne.n	800b066 <rcutils_system_time_now+0x22>
 800b086:	2002      	movs	r0, #2
 800b088:	b005      	add	sp, #20
 800b08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b08c:	200b      	movs	r0, #11
 800b08e:	4770      	bx	lr
 800b090:	3b9aca00 	.word	0x3b9aca00

0800b094 <rcutils_steady_time_now>:
 800b094:	b310      	cbz	r0, 800b0dc <rcutils_steady_time_now+0x48>
 800b096:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b098:	b085      	sub	sp, #20
 800b09a:	4604      	mov	r4, r0
 800b09c:	4669      	mov	r1, sp
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7f7 fd12 	bl	8002ac8 <clock_gettime>
 800b0a4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b0a8:	2e00      	cmp	r6, #0
 800b0aa:	f177 0300 	sbcs.w	r3, r7, #0
 800b0ae:	db12      	blt.n	800b0d6 <rcutils_steady_time_now+0x42>
 800b0b0:	9902      	ldr	r1, [sp, #8]
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	db0c      	blt.n	800b0d0 <rcutils_steady_time_now+0x3c>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	4d09      	ldr	r5, [pc, #36]	; (800b0e0 <rcutils_steady_time_now+0x4c>)
 800b0ba:	fba6 2305 	umull	r2, r3, r6, r5
 800b0be:	fb05 3307 	mla	r3, r5, r7, r3
 800b0c2:	1852      	adds	r2, r2, r1
 800b0c4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b0c8:	e9c4 2300 	strd	r2, r3, [r4]
 800b0cc:	b005      	add	sp, #20
 800b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d0:	ea56 0307 	orrs.w	r3, r6, r7
 800b0d4:	d1ef      	bne.n	800b0b6 <rcutils_steady_time_now+0x22>
 800b0d6:	2002      	movs	r0, #2
 800b0d8:	b005      	add	sp, #20
 800b0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0dc:	200b      	movs	r0, #11
 800b0de:	4770      	bx	lr
 800b0e0:	3b9aca00 	.word	0x3b9aca00

0800b0e4 <rmw_get_zero_initialized_init_options>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	2238      	movs	r2, #56	; 0x38
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f00b ffda 	bl	80170a4 <memset>
 800b0f0:	f104 0010 	add.w	r0, r4, #16
 800b0f4:	f000 f808 	bl	800b108 <rmw_get_default_security_options>
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	60e3      	str	r3, [r4, #12]
 800b100:	bd10      	pop	{r4, pc}
 800b102:	bf00      	nop

0800b104 <rmw_get_default_publisher_options>:
 800b104:	2000      	movs	r0, #0
 800b106:	4770      	bx	lr

0800b108 <rmw_get_default_security_options>:
 800b108:	2200      	movs	r2, #0
 800b10a:	7002      	strb	r2, [r0, #0]
 800b10c:	6042      	str	r2, [r0, #4]
 800b10e:	4770      	bx	lr

0800b110 <rmw_get_default_subscription_options>:
 800b110:	2200      	movs	r2, #0
 800b112:	6002      	str	r2, [r0, #0]
 800b114:	7102      	strb	r2, [r0, #4]
 800b116:	4770      	bx	lr

0800b118 <rmw_get_zero_initialized_message_info>:
 800b118:	b470      	push	{r4, r5, r6}
 800b11a:	4604      	mov	r4, r0
 800b11c:	4606      	mov	r6, r0
 800b11e:	4d06      	ldr	r5, [pc, #24]	; (800b138 <rmw_get_zero_initialized_message_info+0x20>)
 800b120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b128:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b130:	4630      	mov	r0, r6
 800b132:	bc70      	pop	{r4, r5, r6}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	080195c0 	.word	0x080195c0

0800b13c <rmw_validate_full_topic_name>:
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d062      	beq.n	800b206 <rmw_validate_full_topic_name+0xca>
 800b140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b144:	460d      	mov	r5, r1
 800b146:	2900      	cmp	r1, #0
 800b148:	d05f      	beq.n	800b20a <rmw_validate_full_topic_name+0xce>
 800b14a:	4616      	mov	r6, r2
 800b14c:	4604      	mov	r4, r0
 800b14e:	f7f5 f879 	bl	8000244 <strlen>
 800b152:	b148      	cbz	r0, 800b168 <rmw_validate_full_topic_name+0x2c>
 800b154:	7823      	ldrb	r3, [r4, #0]
 800b156:	2b2f      	cmp	r3, #47	; 0x2f
 800b158:	d00d      	beq.n	800b176 <rmw_validate_full_topic_name+0x3a>
 800b15a:	2302      	movs	r3, #2
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	b13e      	cbz	r6, 800b170 <rmw_validate_full_topic_name+0x34>
 800b160:	2000      	movs	r0, #0
 800b162:	6030      	str	r0, [r6, #0]
 800b164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b168:	2301      	movs	r3, #1
 800b16a:	602b      	str	r3, [r5, #0]
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	d1f7      	bne.n	800b160 <rmw_validate_full_topic_name+0x24>
 800b170:	2000      	movs	r0, #0
 800b172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b176:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b17a:	f814 300c 	ldrb.w	r3, [r4, ip]
 800b17e:	2b2f      	cmp	r3, #47	; 0x2f
 800b180:	d045      	beq.n	800b20e <rmw_validate_full_topic_name+0xd2>
 800b182:	4627      	mov	r7, r4
 800b184:	1e63      	subs	r3, r4, #1
 800b186:	eb03 0900 	add.w	r9, r3, r0
 800b18a:	f1c4 0e01 	rsb	lr, r4, #1
 800b18e:	eb0e 0803 	add.w	r8, lr, r3
 800b192:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b196:	f021 0220 	bic.w	r2, r1, #32
 800b19a:	3a41      	subs	r2, #65	; 0x41
 800b19c:	2a19      	cmp	r2, #25
 800b19e:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 800b1a2:	d90b      	bls.n	800b1bc <rmw_validate_full_topic_name+0x80>
 800b1a4:	295f      	cmp	r1, #95	; 0x5f
 800b1a6:	d009      	beq.n	800b1bc <rmw_validate_full_topic_name+0x80>
 800b1a8:	2c0a      	cmp	r4, #10
 800b1aa:	d907      	bls.n	800b1bc <rmw_validate_full_topic_name+0x80>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	2e00      	cmp	r6, #0
 800b1b2:	d0dd      	beq.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f8c6 8000 	str.w	r8, [r6]
 800b1ba:	e7d3      	b.n	800b164 <rmw_validate_full_topic_name+0x28>
 800b1bc:	454b      	cmp	r3, r9
 800b1be:	d1e6      	bne.n	800b18e <rmw_validate_full_topic_name+0x52>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f8df e084 	ldr.w	lr, [pc, #132]	; 800b248 <rmw_validate_full_topic_name+0x10c>
 800b1c6:	f10c 0801 	add.w	r8, ip, #1
 800b1ca:	e005      	b.n	800b1d8 <rmw_validate_full_topic_name+0x9c>
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4288      	cmp	r0, r1
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	f107 0701 	add.w	r7, r7, #1
 800b1d6:	d925      	bls.n	800b224 <rmw_validate_full_topic_name+0xe8>
 800b1d8:	459c      	cmp	ip, r3
 800b1da:	f103 0201 	add.w	r2, r3, #1
 800b1de:	d01d      	beq.n	800b21c <rmw_validate_full_topic_name+0xe0>
 800b1e0:	7839      	ldrb	r1, [r7, #0]
 800b1e2:	292f      	cmp	r1, #47	; 0x2f
 800b1e4:	d1f2      	bne.n	800b1cc <rmw_validate_full_topic_name+0x90>
 800b1e6:	787c      	ldrb	r4, [r7, #1]
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	2c2f      	cmp	r4, #47	; 0x2f
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	d026      	beq.n	800b23e <rmw_validate_full_topic_name+0x102>
 800b1f0:	f814 300e 	ldrb.w	r3, [r4, lr]
 800b1f4:	075b      	lsls	r3, r3, #29
 800b1f6:	d5ea      	bpl.n	800b1ce <rmw_validate_full_topic_name+0x92>
 800b1f8:	2306      	movs	r3, #6
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	2e00      	cmp	r6, #0
 800b1fe:	d0b7      	beq.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b200:	2000      	movs	r0, #0
 800b202:	6032      	str	r2, [r6, #0]
 800b204:	e7ae      	b.n	800b164 <rmw_validate_full_topic_name+0x28>
 800b206:	200b      	movs	r0, #11
 800b208:	4770      	bx	lr
 800b20a:	200b      	movs	r0, #11
 800b20c:	e7aa      	b.n	800b164 <rmw_validate_full_topic_name+0x28>
 800b20e:	2303      	movs	r3, #3
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	2e00      	cmp	r6, #0
 800b214:	d0ac      	beq.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b216:	f8c6 c000 	str.w	ip, [r6]
 800b21a:	e7a9      	b.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b21c:	4641      	mov	r1, r8
 800b21e:	f10c 0201 	add.w	r2, ip, #1
 800b222:	e7d4      	b.n	800b1ce <rmw_validate_full_topic_name+0x92>
 800b224:	28f7      	cmp	r0, #247	; 0xf7
 800b226:	d802      	bhi.n	800b22e <rmw_validate_full_topic_name+0xf2>
 800b228:	2000      	movs	r0, #0
 800b22a:	6028      	str	r0, [r5, #0]
 800b22c:	e79a      	b.n	800b164 <rmw_validate_full_topic_name+0x28>
 800b22e:	2307      	movs	r3, #7
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	2e00      	cmp	r6, #0
 800b234:	d09c      	beq.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b236:	23f6      	movs	r3, #246	; 0xf6
 800b238:	2000      	movs	r0, #0
 800b23a:	6033      	str	r3, [r6, #0]
 800b23c:	e792      	b.n	800b164 <rmw_validate_full_topic_name+0x28>
 800b23e:	2305      	movs	r3, #5
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	2e00      	cmp	r6, #0
 800b244:	d1dc      	bne.n	800b200 <rmw_validate_full_topic_name+0xc4>
 800b246:	e793      	b.n	800b170 <rmw_validate_full_topic_name+0x34>
 800b248:	0801a0dd 	.word	0x0801a0dd

0800b24c <rmw_uros_set_custom_transport>:
 800b24c:	b4f0      	push	{r4, r5, r6, r7}
 800b24e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b252:	b16a      	cbz	r2, 800b270 <rmw_uros_set_custom_transport+0x24>
 800b254:	b163      	cbz	r3, 800b270 <rmw_uros_set_custom_transport+0x24>
 800b256:	b15e      	cbz	r6, 800b270 <rmw_uros_set_custom_transport+0x24>
 800b258:	b157      	cbz	r7, 800b270 <rmw_uros_set_custom_transport+0x24>
 800b25a:	4605      	mov	r5, r0
 800b25c:	4c06      	ldr	r4, [pc, #24]	; (800b278 <rmw_uros_set_custom_transport+0x2c>)
 800b25e:	2000      	movs	r0, #0
 800b260:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b264:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800b268:	7025      	strb	r5, [r4, #0]
 800b26a:	6167      	str	r7, [r4, #20]
 800b26c:	bcf0      	pop	{r4, r5, r6, r7}
 800b26e:	4770      	bx	lr
 800b270:	200b      	movs	r0, #11
 800b272:	bcf0      	pop	{r4, r5, r6, r7}
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	20008c80 	.word	0x20008c80

0800b27c <rmw_init_options_init>:
 800b27c:	b084      	sub	sp, #16
 800b27e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b282:	ad09      	add	r5, sp, #36	; 0x24
 800b284:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b288:	b130      	cbz	r0, 800b298 <rmw_init_options_init+0x1c>
 800b28a:	4604      	mov	r4, r0
 800b28c:	4628      	mov	r0, r5
 800b28e:	f7ff fca7 	bl	800abe0 <rcutils_allocator_is_valid>
 800b292:	b108      	cbz	r0, 800b298 <rmw_init_options_init+0x1c>
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	b123      	cbz	r3, 800b2a2 <rmw_init_options_init+0x26>
 800b298:	200b      	movs	r0, #11
 800b29a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b29e:	b004      	add	sp, #16
 800b2a0:	4770      	bx	lr
 800b2a2:	f04f 0800 	mov.w	r8, #0
 800b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a8:	f04f 0900 	mov.w	r9, #0
 800b2ac:	4e1a      	ldr	r6, [pc, #104]	; (800b318 <rmw_init_options_init+0x9c>)
 800b2ae:	e9c4 8900 	strd	r8, r9, [r4]
 800b2b2:	6837      	ldr	r7, [r6, #0]
 800b2b4:	f104 0620 	add.w	r6, r4, #32
 800b2b8:	60a7      	str	r7, [r4, #8]
 800b2ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b2bc:	682a      	ldr	r2, [r5, #0]
 800b2be:	4b17      	ldr	r3, [pc, #92]	; (800b31c <rmw_init_options_init+0xa0>)
 800b2c0:	6032      	str	r2, [r6, #0]
 800b2c2:	4817      	ldr	r0, [pc, #92]	; (800b320 <rmw_init_options_init+0xa4>)
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	4917      	ldr	r1, [pc, #92]	; (800b324 <rmw_init_options_init+0xa8>)
 800b2c8:	61e3      	str	r3, [r4, #28]
 800b2ca:	f000 ff9d 	bl	800c208 <rmw_uxrce_init_init_options_impl_memory>
 800b2ce:	4814      	ldr	r0, [pc, #80]	; (800b320 <rmw_init_options_init+0xa4>)
 800b2d0:	f00a fb52 	bl	8015978 <get_memory>
 800b2d4:	b1e8      	cbz	r0, 800b312 <rmw_init_options_init+0x96>
 800b2d6:	4a14      	ldr	r2, [pc, #80]	; (800b328 <rmw_init_options_init+0xac>)
 800b2d8:	68c3      	ldr	r3, [r0, #12]
 800b2da:	6851      	ldr	r1, [r2, #4]
 800b2dc:	7810      	ldrb	r0, [r2, #0]
 800b2de:	6363      	str	r3, [r4, #52]	; 0x34
 800b2e0:	7418      	strb	r0, [r3, #16]
 800b2e2:	6159      	str	r1, [r3, #20]
 800b2e4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800b2e8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800b2ec:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800b2f0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800b2f4:	f006 fd2e 	bl	8011d54 <uxr_nanos>
 800b2f8:	f00b ffa8 	bl	801724c <srand>
 800b2fc:	f00b ffd4 	bl	80172a8 <rand>
 800b300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b302:	6298      	str	r0, [r3, #40]	; 0x28
 800b304:	2800      	cmp	r0, #0
 800b306:	d0f9      	beq.n	800b2fc <rmw_init_options_init+0x80>
 800b308:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b30c:	2000      	movs	r0, #0
 800b30e:	b004      	add	sp, #16
 800b310:	4770      	bx	lr
 800b312:	2001      	movs	r0, #1
 800b314:	e7c1      	b.n	800b29a <rmw_init_options_init+0x1e>
 800b316:	bf00      	nop
 800b318:	0801a0ac 	.word	0x0801a0ac
 800b31c:	080198a0 	.word	0x080198a0
 800b320:	2000bf9c 	.word	0x2000bf9c
 800b324:	2000bbf0 	.word	0x2000bbf0
 800b328:	20008c80 	.word	0x20008c80

0800b32c <rmw_init_options_copy>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	b158      	cbz	r0, 800b348 <rmw_init_options_copy+0x1c>
 800b330:	460d      	mov	r5, r1
 800b332:	b149      	cbz	r1, 800b348 <rmw_init_options_copy+0x1c>
 800b334:	4604      	mov	r4, r0
 800b336:	6880      	ldr	r0, [r0, #8]
 800b338:	b120      	cbz	r0, 800b344 <rmw_init_options_copy+0x18>
 800b33a:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <rmw_init_options_copy+0x7c>)
 800b33c:	6819      	ldr	r1, [r3, #0]
 800b33e:	f7f4 ff77 	bl	8000230 <strcmp>
 800b342:	bb60      	cbnz	r0, 800b39e <rmw_init_options_copy+0x72>
 800b344:	68ab      	ldr	r3, [r5, #8]
 800b346:	b113      	cbz	r3, 800b34e <rmw_init_options_copy+0x22>
 800b348:	260b      	movs	r6, #11
 800b34a:	4630      	mov	r0, r6
 800b34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34e:	4623      	mov	r3, r4
 800b350:	462a      	mov	r2, r5
 800b352:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800b356:	681f      	ldr	r7, [r3, #0]
 800b358:	685e      	ldr	r6, [r3, #4]
 800b35a:	6898      	ldr	r0, [r3, #8]
 800b35c:	68d9      	ldr	r1, [r3, #12]
 800b35e:	3310      	adds	r3, #16
 800b360:	4563      	cmp	r3, ip
 800b362:	6017      	str	r7, [r2, #0]
 800b364:	6056      	str	r6, [r2, #4]
 800b366:	6090      	str	r0, [r2, #8]
 800b368:	60d1      	str	r1, [r2, #12]
 800b36a:	f102 0210 	add.w	r2, r2, #16
 800b36e:	d1f2      	bne.n	800b356 <rmw_init_options_copy+0x2a>
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	480d      	ldr	r0, [pc, #52]	; (800b3ac <rmw_init_options_copy+0x80>)
 800b376:	6011      	str	r1, [r2, #0]
 800b378:	6053      	str	r3, [r2, #4]
 800b37a:	f00a fafd 	bl	8015978 <get_memory>
 800b37e:	b188      	cbz	r0, 800b3a4 <rmw_init_options_copy+0x78>
 800b380:	2600      	movs	r6, #0
 800b382:	68c3      	ldr	r3, [r0, #12]
 800b384:	636b      	str	r3, [r5, #52]	; 0x34
 800b386:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b388:	f103 0410 	add.w	r4, r3, #16
 800b38c:	3510      	adds	r5, #16
 800b38e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b39a:	4630      	mov	r0, r6
 800b39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39e:	260c      	movs	r6, #12
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a4:	2601      	movs	r6, #1
 800b3a6:	e7d0      	b.n	800b34a <rmw_init_options_copy+0x1e>
 800b3a8:	0801a0ac 	.word	0x0801a0ac
 800b3ac:	2000bf9c 	.word	0x2000bf9c

0800b3b0 <rmw_init_options_fini>:
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d036      	beq.n	800b422 <rmw_init_options_fini+0x72>
 800b3b4:	b530      	push	{r4, r5, lr}
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	b08f      	sub	sp, #60	; 0x3c
 800b3ba:	3020      	adds	r0, #32
 800b3bc:	f7ff fc10 	bl	800abe0 <rcutils_allocator_is_valid>
 800b3c0:	b328      	cbz	r0, 800b40e <rmw_init_options_fini+0x5e>
 800b3c2:	68a0      	ldr	r0, [r4, #8]
 800b3c4:	b120      	cbz	r0, 800b3d0 <rmw_init_options_fini+0x20>
 800b3c6:	4b18      	ldr	r3, [pc, #96]	; (800b428 <rmw_init_options_fini+0x78>)
 800b3c8:	6819      	ldr	r1, [r3, #0]
 800b3ca:	f7f4 ff31 	bl	8000230 <strcmp>
 800b3ce:	bb30      	cbnz	r0, 800b41e <rmw_init_options_fini+0x6e>
 800b3d0:	4b16      	ldr	r3, [pc, #88]	; (800b42c <rmw_init_options_fini+0x7c>)
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	b1f9      	cbz	r1, 800b416 <rmw_init_options_fini+0x66>
 800b3d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b3d8:	e001      	b.n	800b3de <rmw_init_options_fini+0x2e>
 800b3da:	6889      	ldr	r1, [r1, #8]
 800b3dc:	b1d9      	cbz	r1, 800b416 <rmw_init_options_fini+0x66>
 800b3de:	68cb      	ldr	r3, [r1, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d1fa      	bne.n	800b3da <rmw_init_options_fini+0x2a>
 800b3e4:	466d      	mov	r5, sp
 800b3e6:	4811      	ldr	r0, [pc, #68]	; (800b42c <rmw_init_options_fini+0x7c>)
 800b3e8:	f00a fad6 	bl	8015998 <put_memory>
 800b3ec:	4668      	mov	r0, sp
 800b3ee:	f7ff fe79 	bl	800b0e4 <rmw_get_zero_initialized_init_options>
 800b3f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3fe:	2300      	movs	r3, #0
 800b400:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b404:	e884 0003 	stmia.w	r4, {r0, r1}
 800b408:	4618      	mov	r0, r3
 800b40a:	b00f      	add	sp, #60	; 0x3c
 800b40c:	bd30      	pop	{r4, r5, pc}
 800b40e:	230b      	movs	r3, #11
 800b410:	4618      	mov	r0, r3
 800b412:	b00f      	add	sp, #60	; 0x3c
 800b414:	bd30      	pop	{r4, r5, pc}
 800b416:	2301      	movs	r3, #1
 800b418:	4618      	mov	r0, r3
 800b41a:	b00f      	add	sp, #60	; 0x3c
 800b41c:	bd30      	pop	{r4, r5, pc}
 800b41e:	230c      	movs	r3, #12
 800b420:	e7f2      	b.n	800b408 <rmw_init_options_fini+0x58>
 800b422:	230b      	movs	r3, #11
 800b424:	4618      	mov	r0, r3
 800b426:	4770      	bx	lr
 800b428:	0801a0ac 	.word	0x0801a0ac
 800b42c:	2000bf9c 	.word	0x2000bf9c

0800b430 <rmw_init>:
 800b430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b434:	b083      	sub	sp, #12
 800b436:	2800      	cmp	r0, #0
 800b438:	f000 8087 	beq.w	800b54a <rmw_init+0x11a>
 800b43c:	460e      	mov	r6, r1
 800b43e:	2900      	cmp	r1, #0
 800b440:	f000 8083 	beq.w	800b54a <rmw_init+0x11a>
 800b444:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b446:	4605      	mov	r5, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d07e      	beq.n	800b54a <rmw_init+0x11a>
 800b44c:	4b70      	ldr	r3, [pc, #448]	; (800b610 <rmw_init+0x1e0>)
 800b44e:	6880      	ldr	r0, [r0, #8]
 800b450:	f8d3 8000 	ldr.w	r8, [r3]
 800b454:	b120      	cbz	r0, 800b460 <rmw_init+0x30>
 800b456:	4641      	mov	r1, r8
 800b458:	f7f4 feea 	bl	8000230 <strcmp>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d17e      	bne.n	800b55e <rmw_init+0x12e>
 800b460:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b464:	68e9      	ldr	r1, [r5, #12]
 800b466:	486b      	ldr	r0, [pc, #428]	; (800b614 <rmw_init+0x1e4>)
 800b468:	e9c6 2300 	strd	r2, r3, [r6]
 800b46c:	61f1      	str	r1, [r6, #28]
 800b46e:	2201      	movs	r2, #1
 800b470:	4969      	ldr	r1, [pc, #420]	; (800b618 <rmw_init+0x1e8>)
 800b472:	f8c6 8008 	str.w	r8, [r6, #8]
 800b476:	f000 fe6d 	bl	800c154 <rmw_uxrce_init_session_memory>
 800b47a:	4868      	ldr	r0, [pc, #416]	; (800b61c <rmw_init+0x1ec>)
 800b47c:	2204      	movs	r2, #4
 800b47e:	4968      	ldr	r1, [pc, #416]	; (800b620 <rmw_init+0x1f0>)
 800b480:	f000 fea4 	bl	800c1cc <rmw_uxrce_init_static_input_buffer_memory>
 800b484:	4863      	ldr	r0, [pc, #396]	; (800b614 <rmw_init+0x1e4>)
 800b486:	f00a fa77 	bl	8015978 <get_memory>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d062      	beq.n	800b554 <rmw_init+0x124>
 800b48e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800b490:	68c4      	ldr	r4, [r0, #12]
 800b492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b498:	7c39      	ldrb	r1, [r7, #16]
 800b49a:	9001      	str	r0, [sp, #4]
 800b49c:	6a38      	ldr	r0, [r7, #32]
 800b49e:	f104 0910 	add.w	r9, r4, #16
 800b4a2:	9000      	str	r0, [sp, #0]
 800b4a4:	4648      	mov	r0, r9
 800b4a6:	f004 fd4f 	bl	800ff48 <uxr_set_custom_transport_callbacks>
 800b4aa:	2700      	movs	r7, #0
 800b4ac:	f241 5194 	movw	r1, #5524	; 0x1594
 800b4b0:	f241 5398 	movw	r3, #5528	; 0x1598
 800b4b4:	f241 509c 	movw	r0, #5532	; 0x159c
 800b4b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4bc:	5067      	str	r7, [r4, r1]
 800b4be:	50e7      	str	r7, [r4, r3]
 800b4c0:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800b4c4:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800b4c8:	5027      	str	r7, [r4, r0]
 800b4ca:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800b4ce:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800b4d2:	4854      	ldr	r0, [pc, #336]	; (800b624 <rmw_init+0x1f4>)
 800b4d4:	600f      	str	r7, [r1, #0]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 800b4dc:	4952      	ldr	r1, [pc, #328]	; (800b628 <rmw_init+0x1f8>)
 800b4de:	64b4      	str	r4, [r6, #72]	; 0x48
 800b4e0:	f000 fe1e 	bl	800c120 <rmw_uxrce_init_node_memory>
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	4951      	ldr	r1, [pc, #324]	; (800b62c <rmw_init+0x1fc>)
 800b4e8:	4851      	ldr	r0, [pc, #324]	; (800b630 <rmw_init+0x200>)
 800b4ea:	f000 fdff 	bl	800c0ec <rmw_uxrce_init_subscription_memory>
 800b4ee:	220a      	movs	r2, #10
 800b4f0:	4950      	ldr	r1, [pc, #320]	; (800b634 <rmw_init+0x204>)
 800b4f2:	4851      	ldr	r0, [pc, #324]	; (800b638 <rmw_init+0x208>)
 800b4f4:	f000 fde0 	bl	800c0b8 <rmw_uxrce_init_publisher_memory>
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	4950      	ldr	r1, [pc, #320]	; (800b63c <rmw_init+0x20c>)
 800b4fc:	4850      	ldr	r0, [pc, #320]	; (800b640 <rmw_init+0x210>)
 800b4fe:	f000 fda7 	bl	800c050 <rmw_uxrce_init_service_memory>
 800b502:	2201      	movs	r2, #1
 800b504:	494f      	ldr	r1, [pc, #316]	; (800b644 <rmw_init+0x214>)
 800b506:	4850      	ldr	r0, [pc, #320]	; (800b648 <rmw_init+0x218>)
 800b508:	f000 fdbc 	bl	800c084 <rmw_uxrce_init_client_memory>
 800b50c:	220f      	movs	r2, #15
 800b50e:	494f      	ldr	r1, [pc, #316]	; (800b64c <rmw_init+0x21c>)
 800b510:	484f      	ldr	r0, [pc, #316]	; (800b650 <rmw_init+0x220>)
 800b512:	f000 fe3f 	bl	800c194 <rmw_uxrce_init_topic_memory>
 800b516:	2203      	movs	r2, #3
 800b518:	494e      	ldr	r1, [pc, #312]	; (800b654 <rmw_init+0x224>)
 800b51a:	484f      	ldr	r0, [pc, #316]	; (800b658 <rmw_init+0x228>)
 800b51c:	f000 fe74 	bl	800c208 <rmw_uxrce_init_init_options_impl_memory>
 800b520:	2204      	movs	r2, #4
 800b522:	494e      	ldr	r1, [pc, #312]	; (800b65c <rmw_init+0x22c>)
 800b524:	484e      	ldr	r0, [pc, #312]	; (800b660 <rmw_init+0x230>)
 800b526:	f000 fe89 	bl	800c23c <rmw_uxrce_init_wait_set_memory>
 800b52a:	2204      	movs	r2, #4
 800b52c:	494d      	ldr	r1, [pc, #308]	; (800b664 <rmw_init+0x234>)
 800b52e:	484e      	ldr	r0, [pc, #312]	; (800b668 <rmw_init+0x238>)
 800b530:	f000 fea0 	bl	800c274 <rmw_uxrce_init_guard_condition_memory>
 800b534:	463a      	mov	r2, r7
 800b536:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b538:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800b53a:	f000 fd51 	bl	800bfe0 <rmw_uxrce_transport_init>
 800b53e:	4607      	mov	r7, r0
 800b540:	b190      	cbz	r0, 800b568 <rmw_init+0x138>
 800b542:	4638      	mov	r0, r7
 800b544:	b003      	add	sp, #12
 800b546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b54a:	270b      	movs	r7, #11
 800b54c:	4638      	mov	r0, r7
 800b54e:	b003      	add	sp, #12
 800b550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b554:	2701      	movs	r7, #1
 800b556:	4638      	mov	r0, r7
 800b558:	b003      	add	sp, #12
 800b55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55e:	270c      	movs	r7, #12
 800b560:	4638      	mov	r0, r7
 800b562:	b003      	add	sp, #12
 800b564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b568:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b56a:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800b56e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b570:	4628      	mov	r0, r5
 800b572:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800b576:	f005 f9fb 	bl	8010970 <uxr_init_session>
 800b57a:	4622      	mov	r2, r4
 800b57c:	4628      	mov	r0, r5
 800b57e:	493b      	ldr	r1, [pc, #236]	; (800b66c <rmw_init+0x23c>)
 800b580:	f005 fa18 	bl	80109b4 <uxr_set_topic_callback>
 800b584:	463a      	mov	r2, r7
 800b586:	4628      	mov	r0, r5
 800b588:	4939      	ldr	r1, [pc, #228]	; (800b670 <rmw_init+0x240>)
 800b58a:	f005 fa0f 	bl	80109ac <uxr_set_status_callback>
 800b58e:	463a      	mov	r2, r7
 800b590:	4628      	mov	r0, r5
 800b592:	4938      	ldr	r1, [pc, #224]	; (800b674 <rmw_init+0x244>)
 800b594:	f005 fa12 	bl	80109bc <uxr_set_request_callback>
 800b598:	463a      	mov	r2, r7
 800b59a:	4628      	mov	r0, r5
 800b59c:	4936      	ldr	r1, [pc, #216]	; (800b678 <rmw_init+0x248>)
 800b59e:	f005 fa11 	bl	80109c4 <uxr_set_reply_callback>
 800b5a2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b5a6:	2304      	movs	r3, #4
 800b5a8:	0092      	lsls	r2, r2, #2
 800b5aa:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f005 fad6 	bl	8010b60 <uxr_create_input_reliable_stream>
 800b5b4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b5b8:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800b5bc:	0092      	lsls	r2, r2, #2
 800b5be:	2304      	movs	r3, #4
 800b5c0:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f005 faa1 	bl	8010b0c <uxr_create_output_reliable_stream>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800b5d2:	f005 fabf 	bl	8010b54 <uxr_create_input_best_effort_stream>
 800b5d6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800b5da:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800b5de:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	3114      	adds	r1, #20
 800b5e6:	f005 fa7f 	bl	8010ae8 <uxr_create_output_best_effort_stream>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 800b5f2:	f005 f9eb 	bl	80109cc <uxr_create_session>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d1a3      	bne.n	800b542 <rmw_init+0x112>
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f004 fce4 	bl	800ffc8 <uxr_close_custom_transport>
 800b600:	4621      	mov	r1, r4
 800b602:	4804      	ldr	r0, [pc, #16]	; (800b614 <rmw_init+0x1e4>)
 800b604:	f00a f9c8 	bl	8015998 <put_memory>
 800b608:	64b7      	str	r7, [r6, #72]	; 0x48
 800b60a:	2701      	movs	r7, #1
 800b60c:	e799      	b.n	800b542 <rmw_init+0x112>
 800b60e:	bf00      	nop
 800b610:	0801a0ac 	.word	0x0801a0ac
 800b614:	2000be48 	.word	0x2000be48
 800b618:	2000c078 	.word	0x2000c078
 800b61c:	20008ca0 	.word	0x20008ca0
 800b620:	20009a80 	.word	0x20009a80
 800b624:	2000bc74 	.word	0x2000bc74
 800b628:	2000be58 	.word	0x2000be58
 800b62c:	200095a8 	.word	0x200095a8
 800b630:	2000bf0c 	.word	0x2000bf0c
 800b634:	20008cc0 	.word	0x20008cc0
 800b638:	20008cb0 	.word	0x20008cb0
 800b63c:	2000bfb0 	.word	0x2000bfb0
 800b640:	2000befc 	.word	0x2000befc
 800b644:	200099b8 	.word	0x200099b8
 800b648:	20009530 	.word	0x20009530
 800b64c:	2000bc84 	.word	0x2000bc84
 800b650:	2000be38 	.word	0x2000be38
 800b654:	2000bbf0 	.word	0x2000bbf0
 800b658:	2000bf9c 	.word	0x2000bf9c
 800b65c:	2000bb80 	.word	0x2000bb80
 800b660:	2000d620 	.word	0x2000d620
 800b664:	2000bf1c 	.word	0x2000bf1c
 800b668:	2000be28 	.word	0x2000be28
 800b66c:	080157b1 	.word	0x080157b1
 800b670:	080157a9 	.word	0x080157a9
 800b674:	08015845 	.word	0x08015845
 800b678:	080158e1 	.word	0x080158e1

0800b67c <rmw_context_fini>:
 800b67c:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <rmw_context_fini+0x60>)
 800b67e:	b570      	push	{r4, r5, r6, lr}
 800b680:	681c      	ldr	r4, [r3, #0]
 800b682:	4605      	mov	r5, r0
 800b684:	b33c      	cbz	r4, 800b6d6 <rmw_context_fini+0x5a>
 800b686:	2600      	movs	r6, #0
 800b688:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b68a:	68e0      	ldr	r0, [r4, #12]
 800b68c:	68a4      	ldr	r4, [r4, #8]
 800b68e:	6902      	ldr	r2, [r0, #16]
 800b690:	428a      	cmp	r2, r1
 800b692:	d018      	beq.n	800b6c6 <rmw_context_fini+0x4a>
 800b694:	2c00      	cmp	r4, #0
 800b696:	d1f8      	bne.n	800b68a <rmw_context_fini+0xe>
 800b698:	b189      	cbz	r1, 800b6be <rmw_context_fini+0x42>
 800b69a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800b69e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800b6a2:	789b      	ldrb	r3, [r3, #2]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	bf14      	ite	ne
 800b6a8:	210a      	movne	r1, #10
 800b6aa:	2100      	moveq	r1, #0
 800b6ac:	f005 f9d2 	bl	8010a54 <uxr_delete_session_retries>
 800b6b0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800b6b2:	f000 fdf9 	bl	800c2a8 <rmw_uxrce_fini_session_memory>
 800b6b6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800b6b8:	3010      	adds	r0, #16
 800b6ba:	f004 fc85 	bl	800ffc8 <uxr_close_custom_transport>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	64ab      	str	r3, [r5, #72]	; 0x48
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	3018      	adds	r0, #24
 800b6c8:	f000 f89c 	bl	800b804 <rmw_destroy_node>
 800b6cc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	d1da      	bne.n	800b68a <rmw_context_fini+0xe>
 800b6d4:	e7e0      	b.n	800b698 <rmw_context_fini+0x1c>
 800b6d6:	4626      	mov	r6, r4
 800b6d8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b6da:	e7dd      	b.n	800b698 <rmw_context_fini+0x1c>
 800b6dc:	2000bc74 	.word	0x2000bc74

0800b6e0 <create_node>:
 800b6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d05f      	beq.n	800b7aa <create_node+0xca>
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	4835      	ldr	r0, [pc, #212]	; (800b7c4 <create_node+0xe4>)
 800b6ee:	460f      	mov	r7, r1
 800b6f0:	4690      	mov	r8, r2
 800b6f2:	461d      	mov	r5, r3
 800b6f4:	f00a f940 	bl	8015978 <get_memory>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d056      	beq.n	800b7aa <create_node+0xca>
 800b6fc:	68c4      	ldr	r4, [r0, #12]
 800b6fe:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800b700:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	f00a f99f 	bl	8015a48 <rmw_get_implementation_identifier>
 800b70a:	f8c4 9020 	str.w	r9, [r4, #32]
 800b70e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b712:	4630      	mov	r0, r6
 800b714:	f7f4 fd96 	bl	8000244 <strlen>
 800b718:	1c42      	adds	r2, r0, #1
 800b71a:	2a3c      	cmp	r2, #60	; 0x3c
 800b71c:	f104 0518 	add.w	r5, r4, #24
 800b720:	d840      	bhi.n	800b7a4 <create_node+0xc4>
 800b722:	4648      	mov	r0, r9
 800b724:	4631      	mov	r1, r6
 800b726:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800b72a:	f00b fc93 	bl	8017054 <memcpy>
 800b72e:	4638      	mov	r0, r7
 800b730:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800b734:	f7f4 fd86 	bl	8000244 <strlen>
 800b738:	1c42      	adds	r2, r0, #1
 800b73a:	2a3c      	cmp	r2, #60	; 0x3c
 800b73c:	d832      	bhi.n	800b7a4 <create_node+0xc4>
 800b73e:	4639      	mov	r1, r7
 800b740:	4648      	mov	r0, r9
 800b742:	f00b fc87 	bl	8017054 <memcpy>
 800b746:	f241 5394 	movw	r3, #5524	; 0x1594
 800b74a:	2101      	movs	r1, #1
 800b74c:	6922      	ldr	r2, [r4, #16]
 800b74e:	5ad0      	ldrh	r0, [r2, r3]
 800b750:	eb00 0c01 	add.w	ip, r0, r1
 800b754:	f822 c003 	strh.w	ip, [r2, r3]
 800b758:	f004 fc3a 	bl	800ffd0 <uxr_object_id>
 800b75c:	6160      	str	r0, [r4, #20]
 800b75e:	783b      	ldrb	r3, [r7, #0]
 800b760:	2b2f      	cmp	r3, #47	; 0x2f
 800b762:	d127      	bne.n	800b7b4 <create_node+0xd4>
 800b764:	787b      	ldrb	r3, [r7, #1]
 800b766:	bb2b      	cbnz	r3, 800b7b4 <create_node+0xd4>
 800b768:	4633      	mov	r3, r6
 800b76a:	213c      	movs	r1, #60	; 0x3c
 800b76c:	4a16      	ldr	r2, [pc, #88]	; (800b7c8 <create_node+0xe8>)
 800b76e:	4817      	ldr	r0, [pc, #92]	; (800b7cc <create_node+0xec>)
 800b770:	f00b fdf2 	bl	8017358 <sniprintf>
 800b774:	2106      	movs	r1, #6
 800b776:	6920      	ldr	r0, [r4, #16]
 800b778:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <create_node+0xec>)
 800b77a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800b77e:	e9cd 3100 	strd	r3, r1, [sp]
 800b782:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b786:	6811      	ldr	r1, [r2, #0]
 800b788:	fa1f f388 	uxth.w	r3, r8
 800b78c:	6962      	ldr	r2, [r4, #20]
 800b78e:	f004 f997 	bl	800fac0 <uxr_buffer_create_participant_bin>
 800b792:	4602      	mov	r2, r0
 800b794:	6920      	ldr	r0, [r4, #16]
 800b796:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b79a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b79e:	f000 fef3 	bl	800c588 <run_xrce_session>
 800b7a2:	b918      	cbnz	r0, 800b7ac <create_node+0xcc>
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f000 fd85 	bl	800c2b4 <rmw_uxrce_fini_node_memory>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	b003      	add	sp, #12
 800b7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	213c      	movs	r1, #60	; 0x3c
 800b7b8:	4a05      	ldr	r2, [pc, #20]	; (800b7d0 <create_node+0xf0>)
 800b7ba:	9600      	str	r6, [sp, #0]
 800b7bc:	4803      	ldr	r0, [pc, #12]	; (800b7cc <create_node+0xec>)
 800b7be:	f00b fdcb 	bl	8017358 <sniprintf>
 800b7c2:	e7d7      	b.n	800b774 <create_node+0x94>
 800b7c4:	2000bc74 	.word	0x2000bc74
 800b7c8:	080198e0 	.word	0x080198e0
 800b7cc:	20006738 	.word	0x20006738
 800b7d0:	080198a4 	.word	0x080198a4

0800b7d4 <rmw_create_node>:
 800b7d4:	b199      	cbz	r1, 800b7fe <rmw_create_node+0x2a>
 800b7d6:	b430      	push	{r4, r5}
 800b7d8:	4614      	mov	r4, r2
 800b7da:	461a      	mov	r2, r3
 800b7dc:	780b      	ldrb	r3, [r1, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	b14b      	cbz	r3, 800b7f8 <rmw_create_node+0x24>
 800b7e4:	b144      	cbz	r4, 800b7f8 <rmw_create_node+0x24>
 800b7e6:	7823      	ldrb	r3, [r4, #0]
 800b7e8:	b133      	cbz	r3, 800b7f8 <rmw_create_node+0x24>
 800b7ea:	b902      	cbnz	r2, 800b7ee <rmw_create_node+0x1a>
 800b7ec:	69ea      	ldr	r2, [r5, #28]
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	bc30      	pop	{r4, r5}
 800b7f4:	f7ff bf74 	b.w	800b6e0 <create_node>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	bc30      	pop	{r4, r5}
 800b7fc:	4770      	bx	lr
 800b7fe:	2000      	movs	r0, #0
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop

0800b804 <rmw_destroy_node>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	2800      	cmp	r0, #0
 800b808:	d067      	beq.n	800b8da <rmw_destroy_node+0xd6>
 800b80a:	4607      	mov	r7, r0
 800b80c:	6800      	ldr	r0, [r0, #0]
 800b80e:	b128      	cbz	r0, 800b81c <rmw_destroy_node+0x18>
 800b810:	4b34      	ldr	r3, [pc, #208]	; (800b8e4 <rmw_destroy_node+0xe0>)
 800b812:	6819      	ldr	r1, [r3, #0]
 800b814:	f7f4 fd0c 	bl	8000230 <strcmp>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d15e      	bne.n	800b8da <rmw_destroy_node+0xd6>
 800b81c:	687c      	ldr	r4, [r7, #4]
 800b81e:	2c00      	cmp	r4, #0
 800b820:	d05b      	beq.n	800b8da <rmw_destroy_node+0xd6>
 800b822:	4b31      	ldr	r3, [pc, #196]	; (800b8e8 <rmw_destroy_node+0xe4>)
 800b824:	681d      	ldr	r5, [r3, #0]
 800b826:	2d00      	cmp	r5, #0
 800b828:	d05a      	beq.n	800b8e0 <rmw_destroy_node+0xdc>
 800b82a:	2600      	movs	r6, #0
 800b82c:	68e9      	ldr	r1, [r5, #12]
 800b82e:	68ad      	ldr	r5, [r5, #8]
 800b830:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800b834:	429c      	cmp	r4, r3
 800b836:	d048      	beq.n	800b8ca <rmw_destroy_node+0xc6>
 800b838:	2d00      	cmp	r5, #0
 800b83a:	d1f7      	bne.n	800b82c <rmw_destroy_node+0x28>
 800b83c:	4b2b      	ldr	r3, [pc, #172]	; (800b8ec <rmw_destroy_node+0xe8>)
 800b83e:	681d      	ldr	r5, [r3, #0]
 800b840:	b15d      	cbz	r5, 800b85a <rmw_destroy_node+0x56>
 800b842:	68e9      	ldr	r1, [r5, #12]
 800b844:	68ad      	ldr	r5, [r5, #8]
 800b846:	6a0b      	ldr	r3, [r1, #32]
 800b848:	429c      	cmp	r4, r3
 800b84a:	d1f9      	bne.n	800b840 <rmw_destroy_node+0x3c>
 800b84c:	4638      	mov	r0, r7
 800b84e:	317c      	adds	r1, #124	; 0x7c
 800b850:	f000 fb14 	bl	800be7c <rmw_destroy_subscription>
 800b854:	4606      	mov	r6, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	d1f3      	bne.n	800b842 <rmw_destroy_node+0x3e>
 800b85a:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <rmw_destroy_node+0xec>)
 800b85c:	681d      	ldr	r5, [r3, #0]
 800b85e:	b15d      	cbz	r5, 800b878 <rmw_destroy_node+0x74>
 800b860:	68e9      	ldr	r1, [r5, #12]
 800b862:	68ad      	ldr	r5, [r5, #8]
 800b864:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b866:	429c      	cmp	r4, r3
 800b868:	d1f9      	bne.n	800b85e <rmw_destroy_node+0x5a>
 800b86a:	4638      	mov	r0, r7
 800b86c:	317c      	adds	r1, #124	; 0x7c
 800b86e:	f000 f9db 	bl	800bc28 <rmw_destroy_service>
 800b872:	4606      	mov	r6, r0
 800b874:	2d00      	cmp	r5, #0
 800b876:	d1f3      	bne.n	800b860 <rmw_destroy_node+0x5c>
 800b878:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <rmw_destroy_node+0xf0>)
 800b87a:	681d      	ldr	r5, [r3, #0]
 800b87c:	b15d      	cbz	r5, 800b896 <rmw_destroy_node+0x92>
 800b87e:	68e9      	ldr	r1, [r5, #12]
 800b880:	68ad      	ldr	r5, [r5, #8]
 800b882:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800b884:	429c      	cmp	r4, r3
 800b886:	d1f9      	bne.n	800b87c <rmw_destroy_node+0x78>
 800b888:	4638      	mov	r0, r7
 800b88a:	317c      	adds	r1, #124	; 0x7c
 800b88c:	f00a f898 	bl	80159c0 <rmw_destroy_client>
 800b890:	4606      	mov	r6, r0
 800b892:	2d00      	cmp	r5, #0
 800b894:	d1f3      	bne.n	800b87e <rmw_destroy_node+0x7a>
 800b896:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b89a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b89e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b8a2:	6819      	ldr	r1, [r3, #0]
 800b8a4:	f004 f8be 	bl	800fa24 <uxr_buffer_delete_entity>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6920      	ldr	r0, [r4, #16]
 800b8ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b8b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b8b4:	f000 fe68 	bl	800c588 <run_xrce_session>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bf08      	it	eq
 800b8be:	2602      	moveq	r6, #2
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f000 fcf7 	bl	800c2b4 <rmw_uxrce_fini_node_memory>
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	3184      	adds	r1, #132	; 0x84
 800b8ce:	f000 f95b 	bl	800bb88 <rmw_destroy_publisher>
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	2d00      	cmp	r5, #0
 800b8d6:	d1a9      	bne.n	800b82c <rmw_destroy_node+0x28>
 800b8d8:	e7b0      	b.n	800b83c <rmw_destroy_node+0x38>
 800b8da:	2601      	movs	r6, #1
 800b8dc:	4630      	mov	r0, r6
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	462e      	mov	r6, r5
 800b8e2:	e7ab      	b.n	800b83c <rmw_destroy_node+0x38>
 800b8e4:	0801a0ac 	.word	0x0801a0ac
 800b8e8:	20008cb0 	.word	0x20008cb0
 800b8ec:	2000bf0c 	.word	0x2000bf0c
 800b8f0:	2000befc 	.word	0x2000befc
 800b8f4:	20009530 	.word	0x20009530

0800b8f8 <rmw_node_get_graph_guard_condition>:
 800b8f8:	6843      	ldr	r3, [r0, #4]
 800b8fa:	6918      	ldr	r0, [r3, #16]
 800b8fc:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop

0800b904 <flush_session>:
 800b904:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800b906:	f005 ba37 	b.w	8010d78 <uxr_run_session_until_confirm_delivery>
 800b90a:	bf00      	nop

0800b90c <rmw_publish>:
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d053      	beq.n	800b9b8 <rmw_publish+0xac>
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	460d      	mov	r5, r1
 800b914:	b08e      	sub	sp, #56	; 0x38
 800b916:	2900      	cmp	r1, #0
 800b918:	d04b      	beq.n	800b9b2 <rmw_publish+0xa6>
 800b91a:	4604      	mov	r4, r0
 800b91c:	6800      	ldr	r0, [r0, #0]
 800b91e:	f000 feb7 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800b922:	2800      	cmp	r0, #0
 800b924:	d045      	beq.n	800b9b2 <rmw_publish+0xa6>
 800b926:	6866      	ldr	r6, [r4, #4]
 800b928:	2e00      	cmp	r6, #0
 800b92a:	d042      	beq.n	800b9b2 <rmw_publish+0xa6>
 800b92c:	69b4      	ldr	r4, [r6, #24]
 800b92e:	4628      	mov	r0, r5
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	4798      	blx	r3
 800b934:	69f3      	ldr	r3, [r6, #28]
 800b936:	9005      	str	r0, [sp, #20]
 800b938:	b113      	cbz	r3, 800b940 <rmw_publish+0x34>
 800b93a:	a805      	add	r0, sp, #20
 800b93c:	4798      	blx	r3
 800b93e:	9805      	ldr	r0, [sp, #20]
 800b940:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	9000      	str	r0, [sp, #0]
 800b948:	6972      	ldr	r2, [r6, #20]
 800b94a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b94e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b950:	ab06      	add	r3, sp, #24
 800b952:	f006 faa1 	bl	8011e98 <uxr_prepare_output_stream>
 800b956:	b1d8      	cbz	r0, 800b990 <rmw_publish+0x84>
 800b958:	68a3      	ldr	r3, [r4, #8]
 800b95a:	4628      	mov	r0, r5
 800b95c:	a906      	add	r1, sp, #24
 800b95e:	4798      	blx	r3
 800b960:	6a33      	ldr	r3, [r6, #32]
 800b962:	4604      	mov	r4, r0
 800b964:	b10b      	cbz	r3, 800b96a <rmw_publish+0x5e>
 800b966:	a806      	add	r0, sp, #24
 800b968:	4798      	blx	r3
 800b96a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800b96e:	2b01      	cmp	r3, #1
 800b970:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800b974:	d022      	beq.n	800b9bc <rmw_publish+0xb0>
 800b976:	6918      	ldr	r0, [r3, #16]
 800b978:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800b97a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b97e:	f005 f9fb 	bl	8010d78 <uxr_run_session_until_confirm_delivery>
 800b982:	4004      	ands	r4, r0
 800b984:	b2e4      	uxtb	r4, r4
 800b986:	f084 0001 	eor.w	r0, r4, #1
 800b98a:	b2c0      	uxtb	r0, r0
 800b98c:	b00e      	add	sp, #56	; 0x38
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 800b994:	4a0c      	ldr	r2, [pc, #48]	; (800b9c8 <rmw_publish+0xbc>)
 800b996:	6908      	ldr	r0, [r1, #16]
 800b998:	9b05      	ldr	r3, [sp, #20]
 800b99a:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	6972      	ldr	r2, [r6, #20]
 800b9a2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800b9a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b9a8:	ab06      	add	r3, sp, #24
 800b9aa:	f006 faa5 	bl	8011ef8 <uxr_prepare_output_stream_fragmented>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d1d2      	bne.n	800b958 <rmw_publish+0x4c>
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	b00e      	add	sp, #56	; 0x38
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	4770      	bx	lr
 800b9bc:	6918      	ldr	r0, [r3, #16]
 800b9be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b9c2:	f005 f947 	bl	8010c54 <uxr_flash_output_streams>
 800b9c6:	e7de      	b.n	800b986 <rmw_publish+0x7a>
 800b9c8:	0800b905 	.word	0x0800b905

0800b9cc <rmw_create_publisher>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	b087      	sub	sp, #28
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f000 80ca 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800b9d8:	460e      	mov	r6, r1
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	f000 80c6 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	6800      	ldr	r0, [r0, #0]
 800b9e4:	4615      	mov	r5, r2
 800b9e6:	4698      	mov	r8, r3
 800b9e8:	f000 fe52 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f000 80bd 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800b9f2:	2d00      	cmp	r5, #0
 800b9f4:	f000 80ba 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800b9f8:	782b      	ldrb	r3, [r5, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 80b6 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800ba00:	f1b8 0f00 	cmp.w	r8, #0
 800ba04:	f000 80b2 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800ba08:	485b      	ldr	r0, [pc, #364]	; (800bb78 <rmw_create_publisher+0x1ac>)
 800ba0a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ba0e:	f009 ffb3 	bl	8015978 <get_memory>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f000 80aa 	beq.w	800bb6c <rmw_create_publisher+0x1a0>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	68c4      	ldr	r4, [r0, #12]
 800ba1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800ba20:	f00a f812 	bl	8015a48 <rmw_get_implementation_identifier>
 800ba24:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800ba28:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ba2c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ba30:	4628      	mov	r0, r5
 800ba32:	f7f4 fc07 	bl	8000244 <strlen>
 800ba36:	3001      	adds	r0, #1
 800ba38:	283c      	cmp	r0, #60	; 0x3c
 800ba3a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800ba3e:	f200 8092 	bhi.w	800bb66 <rmw_create_publisher+0x19a>
 800ba42:	462b      	mov	r3, r5
 800ba44:	213c      	movs	r1, #60	; 0x3c
 800ba46:	4a4d      	ldr	r2, [pc, #308]	; (800bb7c <rmw_create_publisher+0x1b0>)
 800ba48:	4650      	mov	r0, sl
 800ba4a:	f00b fc85 	bl	8017358 <sniprintf>
 800ba4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba52:	4641      	mov	r1, r8
 800ba54:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800ba58:	2250      	movs	r2, #80	; 0x50
 800ba5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ba5e:	f00b faf9 	bl	8017054 <memcpy>
 800ba62:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ba66:	4630      	mov	r0, r6
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba6e:	4944      	ldr	r1, [pc, #272]	; (800bb80 <rmw_create_publisher+0x1b4>)
 800ba70:	bf0c      	ite	eq
 800ba72:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ba76:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ba7a:	67a3      	str	r3, [r4, #120]	; 0x78
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ba82:	f000 fe13 	bl	800c6ac <get_message_typesupport_handle>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d06d      	beq.n	800bb66 <rmw_create_publisher+0x19a>
 800ba8a:	6842      	ldr	r2, [r0, #4]
 800ba8c:	61a2      	str	r2, [r4, #24]
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	d069      	beq.n	800bb66 <rmw_create_publisher+0x19a>
 800ba92:	4629      	mov	r1, r5
 800ba94:	4643      	mov	r3, r8
 800ba96:	4648      	mov	r0, r9
 800ba98:	f009 ffdc 	bl	8015a54 <create_topic>
 800ba9c:	6260      	str	r0, [r4, #36]	; 0x24
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d061      	beq.n	800bb66 <rmw_create_publisher+0x19a>
 800baa2:	f241 5398 	movw	r3, #5528	; 0x1598
 800baa6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800baaa:	2103      	movs	r1, #3
 800baac:	5ad0      	ldrh	r0, [r2, r3]
 800baae:	2606      	movs	r6, #6
 800bab0:	1c45      	adds	r5, r0, #1
 800bab2:	52d5      	strh	r5, [r2, r3]
 800bab4:	f004 fa8c 	bl	800ffd0 <uxr_object_id>
 800bab8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800babc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800bac0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800bac4:	6912      	ldr	r2, [r2, #16]
 800bac6:	6120      	str	r0, [r4, #16]
 800bac8:	9600      	str	r6, [sp, #0]
 800baca:	6819      	ldr	r1, [r3, #0]
 800bacc:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800bad0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bad4:	6922      	ldr	r2, [r4, #16]
 800bad6:	f004 f861 	bl	800fb9c <uxr_buffer_create_publisher_bin>
 800bada:	4602      	mov	r2, r0
 800badc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bae0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bae4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bae8:	f000 fd4e 	bl	800c588 <run_xrce_session>
 800baec:	b3b8      	cbz	r0, 800bb5e <rmw_create_publisher+0x192>
 800baee:	f241 539a 	movw	r3, #5530	; 0x159a
 800baf2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800baf6:	2105      	movs	r1, #5
 800baf8:	5ad0      	ldrh	r0, [r2, r3]
 800bafa:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800bafe:	1c45      	adds	r5, r0, #1
 800bb00:	52d5      	strh	r5, [r2, r3]
 800bb02:	f004 fa65 	bl	800ffd0 <uxr_object_id>
 800bb06:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800bb0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb0e:	f10d 0a10 	add.w	sl, sp, #16
 800bb12:	6915      	ldr	r5, [r2, #16]
 800bb14:	4641      	mov	r1, r8
 800bb16:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800bb1a:	6160      	str	r0, [r4, #20]
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800bb22:	f000 fd4d 	bl	800c5c0 <convert_qos_profile>
 800bb26:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bb2a:	9603      	str	r6, [sp, #12]
 800bb2c:	9001      	str	r0, [sp, #4]
 800bb2e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bb32:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bb36:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bb40:	f8d8 1000 	ldr.w	r1, [r8]
 800bb44:	4628      	mov	r0, r5
 800bb46:	f004 f889 	bl	800fc5c <uxr_buffer_create_datawriter_bin>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb50:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bb54:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bb58:	f000 fd16 	bl	800c588 <run_xrce_session>
 800bb5c:	b938      	cbnz	r0, 800bb6e <rmw_create_publisher+0x1a2>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	4805      	ldr	r0, [pc, #20]	; (800bb78 <rmw_create_publisher+0x1ac>)
 800bb62:	f009 ff19 	bl	8015998 <put_memory>
 800bb66:	4638      	mov	r0, r7
 800bb68:	f000 fbbc 	bl	800c2e4 <rmw_uxrce_fini_publisher_memory>
 800bb6c:	2700      	movs	r7, #0
 800bb6e:	4638      	mov	r0, r7
 800bb70:	b007      	add	sp, #28
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	bf00      	nop
 800bb78:	20008cb0 	.word	0x20008cb0
 800bb7c:	080198e0 	.word	0x080198e0
 800bb80:	080198ac 	.word	0x080198ac

0800bb84 <rmw_publisher_get_actual_qos>:
 800bb84:	2000      	movs	r0, #0
 800bb86:	4770      	bx	lr

0800bb88 <rmw_destroy_publisher>:
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	b128      	cbz	r0, 800bb98 <rmw_destroy_publisher+0x10>
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	6800      	ldr	r0, [r0, #0]
 800bb90:	460d      	mov	r5, r1
 800bb92:	f000 fd7d 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bb96:	b910      	cbnz	r0, 800bb9e <rmw_destroy_publisher+0x16>
 800bb98:	2401      	movs	r4, #1
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9e:	6863      	ldr	r3, [r4, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0f9      	beq.n	800bb98 <rmw_destroy_publisher+0x10>
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	d0f7      	beq.n	800bb98 <rmw_destroy_publisher+0x10>
 800bba8:	6828      	ldr	r0, [r5, #0]
 800bbaa:	f000 fd71 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d0f2      	beq.n	800bb98 <rmw_destroy_publisher+0x10>
 800bbb2:	686c      	ldr	r4, [r5, #4]
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	d0ef      	beq.n	800bb98 <rmw_destroy_publisher+0x10>
 800bbb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbba:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800bbbe:	f009 ff97 	bl	8015af0 <destroy_topic>
 800bbc2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bbc6:	6962      	ldr	r2, [r4, #20]
 800bbc8:	6918      	ldr	r0, [r3, #16]
 800bbca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bbce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bbd2:	6819      	ldr	r1, [r3, #0]
 800bbd4:	f003 ff26 	bl	800fa24 <uxr_buffer_delete_entity>
 800bbd8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bbdc:	6922      	ldr	r2, [r4, #16]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800bbe6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bbea:	6809      	ldr	r1, [r1, #0]
 800bbec:	f003 ff1a 	bl	800fa24 <uxr_buffer_delete_entity>
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	6938      	ldr	r0, [r7, #16]
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bbfa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bbfe:	f000 fcc3 	bl	800c588 <run_xrce_session>
 800bc02:	4604      	mov	r4, r0
 800bc04:	6938      	ldr	r0, [r7, #16]
 800bc06:	4632      	mov	r2, r6
 800bc08:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bc0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bc10:	f000 fcba 	bl	800c588 <run_xrce_session>
 800bc14:	b12c      	cbz	r4, 800bc22 <rmw_destroy_publisher+0x9a>
 800bc16:	b120      	cbz	r0, 800bc22 <rmw_destroy_publisher+0x9a>
 800bc18:	2400      	movs	r4, #0
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f000 fb62 	bl	800c2e4 <rmw_uxrce_fini_publisher_memory>
 800bc20:	e7bb      	b.n	800bb9a <rmw_destroy_publisher+0x12>
 800bc22:	2402      	movs	r4, #2
 800bc24:	e7f9      	b.n	800bc1a <rmw_destroy_publisher+0x92>
 800bc26:	bf00      	nop

0800bc28 <rmw_destroy_service>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	b128      	cbz	r0, 800bc38 <rmw_destroy_service+0x10>
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	6800      	ldr	r0, [r0, #0]
 800bc30:	460d      	mov	r5, r1
 800bc32:	f000 fd2d 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bc36:	b910      	cbnz	r0, 800bc3e <rmw_destroy_service+0x16>
 800bc38:	2401      	movs	r4, #1
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
 800bc3e:	6863      	ldr	r3, [r4, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0f9      	beq.n	800bc38 <rmw_destroy_service+0x10>
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	d0f7      	beq.n	800bc38 <rmw_destroy_service+0x10>
 800bc48:	6828      	ldr	r0, [r5, #0]
 800bc4a:	f000 fd21 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0f2      	beq.n	800bc38 <rmw_destroy_service+0x10>
 800bc52:	686e      	ldr	r6, [r5, #4]
 800bc54:	2e00      	cmp	r6, #0
 800bc56:	d0ef      	beq.n	800bc38 <rmw_destroy_service+0x10>
 800bc58:	6864      	ldr	r4, [r4, #4]
 800bc5a:	6932      	ldr	r2, [r6, #16]
 800bc5c:	6920      	ldr	r0, [r4, #16]
 800bc5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bc62:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bc66:	6819      	ldr	r1, [r3, #0]
 800bc68:	f004 fa1a 	bl	80100a0 <uxr_buffer_cancel_data>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	6920      	ldr	r0, [r4, #16]
 800bc70:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bc74:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bc78:	f000 fc86 	bl	800c588 <run_xrce_session>
 800bc7c:	6920      	ldr	r0, [r4, #16]
 800bc7e:	6932      	ldr	r2, [r6, #16]
 800bc80:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bc84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bc88:	6819      	ldr	r1, [r3, #0]
 800bc8a:	f003 fecb 	bl	800fa24 <uxr_buffer_delete_entity>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	6920      	ldr	r0, [r4, #16]
 800bc92:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bc96:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bc9a:	f000 fc75 	bl	800c588 <run_xrce_session>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4628      	mov	r0, r5
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bf14      	ite	ne
 800bca6:	2400      	movne	r4, #0
 800bca8:	2402      	moveq	r4, #2
 800bcaa:	f000 fb47 	bl	800c33c <rmw_uxrce_fini_service_memory>
 800bcae:	e7c4      	b.n	800bc3a <rmw_destroy_service+0x12>

0800bcb0 <rmw_create_subscription>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	b08d      	sub	sp, #52	; 0x34
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f000 80d3 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bcbc:	460e      	mov	r6, r1
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	f000 80cf 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	6800      	ldr	r0, [r0, #0]
 800bcc8:	4615      	mov	r5, r2
 800bcca:	4698      	mov	r8, r3
 800bccc:	f000 fce0 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	f000 80c6 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	f000 80c3 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bcdc:	782b      	ldrb	r3, [r5, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 80bf 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bce4:	f1b8 0f00 	cmp.w	r8, #0
 800bce8:	f000 80bb 	beq.w	800be62 <rmw_create_subscription+0x1b2>
 800bcec:	485f      	ldr	r0, [pc, #380]	; (800be6c <rmw_create_subscription+0x1bc>)
 800bcee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bcf2:	f009 fe41 	bl	8015978 <get_memory>
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f000 80b3 	beq.w	800be64 <rmw_create_subscription+0x1b4>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	68c7      	ldr	r7, [r0, #12]
 800bd02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd06:	f009 fe9f 	bl	8015a48 <rmw_get_implementation_identifier>
 800bd0a:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800bd0e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd10:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7f4 fa95 	bl	8000244 <strlen>
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	283c      	cmp	r0, #60	; 0x3c
 800bd1e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800bd22:	f200 809b 	bhi.w	800be5c <rmw_create_subscription+0x1ac>
 800bd26:	462b      	mov	r3, r5
 800bd28:	213c      	movs	r1, #60	; 0x3c
 800bd2a:	4a51      	ldr	r2, [pc, #324]	; (800be70 <rmw_create_subscription+0x1c0>)
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	f00b fb13 	bl	8017358 <sniprintf>
 800bd32:	4641      	mov	r1, r8
 800bd34:	2250      	movs	r2, #80	; 0x50
 800bd36:	f8c7 9020 	str.w	r9, [r7, #32]
 800bd3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bd3e:	f00b f989 	bl	8017054 <memcpy>
 800bd42:	4630      	mov	r0, r6
 800bd44:	494b      	ldr	r1, [pc, #300]	; (800be74 <rmw_create_subscription+0x1c4>)
 800bd46:	f000 fcb1 	bl	800c6ac <get_message_typesupport_handle>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f000 8086 	beq.w	800be5c <rmw_create_subscription+0x1ac>
 800bd50:	6842      	ldr	r2, [r0, #4]
 800bd52:	61ba      	str	r2, [r7, #24]
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	f000 8081 	beq.w	800be5c <rmw_create_subscription+0x1ac>
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	4643      	mov	r3, r8
 800bd5e:	4648      	mov	r0, r9
 800bd60:	f009 fe78 	bl	8015a54 <create_topic>
 800bd64:	61f8      	str	r0, [r7, #28]
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d078      	beq.n	800be5c <rmw_create_subscription+0x1ac>
 800bd6a:	f241 539c 	movw	r3, #5532	; 0x159c
 800bd6e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bd72:	2104      	movs	r1, #4
 800bd74:	5ad0      	ldrh	r0, [r2, r3]
 800bd76:	2506      	movs	r5, #6
 800bd78:	1c46      	adds	r6, r0, #1
 800bd7a:	52d6      	strh	r6, [r2, r3]
 800bd7c:	f004 f928 	bl	800ffd0 <uxr_object_id>
 800bd80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd84:	6138      	str	r0, [r7, #16]
 800bd86:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800bd8a:	9500      	str	r5, [sp, #0]
 800bd8c:	6811      	ldr	r1, [r2, #0]
 800bd8e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bd98:	f003 ff30 	bl	800fbfc <uxr_buffer_create_subscriber_bin>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bda2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bda6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bdaa:	f000 fbed 	bl	800c588 <run_xrce_session>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d050      	beq.n	800be54 <rmw_create_subscription+0x1a4>
 800bdb2:	f241 539e 	movw	r3, #5534	; 0x159e
 800bdb6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bdba:	4629      	mov	r1, r5
 800bdbc:	5ad0      	ldrh	r0, [r2, r3]
 800bdbe:	ae08      	add	r6, sp, #32
 800bdc0:	f100 0c01 	add.w	ip, r0, #1
 800bdc4:	f822 c003 	strh.w	ip, [r2, r3]
 800bdc8:	f004 f902 	bl	800ffd0 <uxr_object_id>
 800bdcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4641      	mov	r1, r8
 800bdd4:	6178      	str	r0, [r7, #20]
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	f000 fbef 	bl	800c5c0 <convert_qos_profile>
 800bde2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bde6:	9b05      	ldr	r3, [sp, #20]
 800bde8:	9001      	str	r0, [sp, #4]
 800bdea:	9503      	str	r5, [sp, #12]
 800bdec:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800bdfc:	f8db 1000 	ldr.w	r1, [fp]
 800be00:	f003 ffa8 	bl	800fd54 <uxr_buffer_create_datareader_bin>
 800be04:	4602      	mov	r2, r0
 800be06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800be0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800be0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800be12:	f000 fbb9 	bl	800c588 <run_xrce_session>
 800be16:	b1e8      	cbz	r0, 800be54 <rmw_create_subscription+0x1a4>
 800be18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800be1c:	2200      	movs	r2, #0
 800be1e:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800be22:	f898 3008 	ldrb.w	r3, [r8, #8]
 800be26:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	bf0c      	ite	eq
 800be2e:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800be32:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800be36:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800be3a:	9307      	str	r3, [sp, #28]
 800be3c:	aa0a      	add	r2, sp, #40	; 0x28
 800be3e:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800be42:	9200      	str	r2, [sp, #0]
 800be44:	6819      	ldr	r1, [r3, #0]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800be4e:	f004 f8ed 	bl	801002c <uxr_buffer_request_data>
 800be52:	e007      	b.n	800be64 <rmw_create_subscription+0x1b4>
 800be54:	4639      	mov	r1, r7
 800be56:	4805      	ldr	r0, [pc, #20]	; (800be6c <rmw_create_subscription+0x1bc>)
 800be58:	f009 fd9e 	bl	8015998 <put_memory>
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fa57 	bl	800c310 <rmw_uxrce_fini_subscription_memory>
 800be62:	2400      	movs	r4, #0
 800be64:	4620      	mov	r0, r4
 800be66:	b00d      	add	sp, #52	; 0x34
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	2000bf0c 	.word	0x2000bf0c
 800be70:	080198e0 	.word	0x080198e0
 800be74:	080198ac 	.word	0x080198ac

0800be78 <rmw_subscription_get_actual_qos>:
 800be78:	2000      	movs	r0, #0
 800be7a:	4770      	bx	lr

0800be7c <rmw_destroy_subscription>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	b128      	cbz	r0, 800be8c <rmw_destroy_subscription+0x10>
 800be80:	4604      	mov	r4, r0
 800be82:	6800      	ldr	r0, [r0, #0]
 800be84:	460d      	mov	r5, r1
 800be86:	f000 fc03 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800be8a:	b910      	cbnz	r0, 800be92 <rmw_destroy_subscription+0x16>
 800be8c:	2401      	movs	r4, #1
 800be8e:	4620      	mov	r0, r4
 800be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d0f9      	beq.n	800be8c <rmw_destroy_subscription+0x10>
 800be98:	2d00      	cmp	r5, #0
 800be9a:	d0f7      	beq.n	800be8c <rmw_destroy_subscription+0x10>
 800be9c:	6828      	ldr	r0, [r5, #0]
 800be9e:	f000 fbf7 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0f2      	beq.n	800be8c <rmw_destroy_subscription+0x10>
 800bea6:	686c      	ldr	r4, [r5, #4]
 800bea8:	2c00      	cmp	r4, #0
 800beaa:	d0ef      	beq.n	800be8c <rmw_destroy_subscription+0x10>
 800beac:	6a26      	ldr	r6, [r4, #32]
 800beae:	6962      	ldr	r2, [r4, #20]
 800beb0:	6930      	ldr	r0, [r6, #16]
 800beb2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800beb6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800beba:	6819      	ldr	r1, [r3, #0]
 800bebc:	f004 f8f0 	bl	80100a0 <uxr_buffer_cancel_data>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6930      	ldr	r0, [r6, #16]
 800bec4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bec8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800becc:	f000 fb5c 	bl	800c588 <run_xrce_session>
 800bed0:	69e0      	ldr	r0, [r4, #28]
 800bed2:	f009 fe0d 	bl	8015af0 <destroy_topic>
 800bed6:	6a23      	ldr	r3, [r4, #32]
 800bed8:	6962      	ldr	r2, [r4, #20]
 800beda:	6918      	ldr	r0, [r3, #16]
 800bedc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bee0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bee4:	6819      	ldr	r1, [r3, #0]
 800bee6:	f003 fd9d 	bl	800fa24 <uxr_buffer_delete_entity>
 800beea:	6a23      	ldr	r3, [r4, #32]
 800beec:	6922      	ldr	r2, [r4, #16]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4604      	mov	r4, r0
 800bef2:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800bef6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800befa:	6809      	ldr	r1, [r1, #0]
 800befc:	f003 fd92 	bl	800fa24 <uxr_buffer_delete_entity>
 800bf00:	4607      	mov	r7, r0
 800bf02:	6930      	ldr	r0, [r6, #16]
 800bf04:	4622      	mov	r2, r4
 800bf06:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bf0a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bf0e:	f000 fb3b 	bl	800c588 <run_xrce_session>
 800bf12:	4604      	mov	r4, r0
 800bf14:	6930      	ldr	r0, [r6, #16]
 800bf16:	463a      	mov	r2, r7
 800bf18:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bf1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bf20:	f000 fb32 	bl	800c588 <run_xrce_session>
 800bf24:	b12c      	cbz	r4, 800bf32 <rmw_destroy_subscription+0xb6>
 800bf26:	b120      	cbz	r0, 800bf32 <rmw_destroy_subscription+0xb6>
 800bf28:	2400      	movs	r4, #0
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f000 f9f0 	bl	800c310 <rmw_uxrce_fini_subscription_memory>
 800bf30:	e7ad      	b.n	800be8e <rmw_destroy_subscription+0x12>
 800bf32:	2402      	movs	r4, #2
 800bf34:	e7f9      	b.n	800bf2a <rmw_destroy_subscription+0xae>
 800bf36:	bf00      	nop

0800bf38 <rmw_take_with_info>:
 800bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	6800      	ldr	r0, [r0, #0]
 800bf3e:	460f      	mov	r7, r1
 800bf40:	4615      	mov	r5, r2
 800bf42:	b089      	sub	sp, #36	; 0x24
 800bf44:	b128      	cbz	r0, 800bf52 <rmw_take_with_info+0x1a>
 800bf46:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <rmw_take_with_info+0xa0>)
 800bf48:	6819      	ldr	r1, [r3, #0]
 800bf4a:	f7f4 f971 	bl	8000230 <strcmp>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d13e      	bne.n	800bfd0 <rmw_take_with_info+0x98>
 800bf52:	b305      	cbz	r5, 800bf96 <rmw_take_with_info+0x5e>
 800bf54:	2300      	movs	r3, #0
 800bf56:	6864      	ldr	r4, [r4, #4]
 800bf58:	702b      	strb	r3, [r5, #0]
 800bf5a:	f000 fa9d 	bl	800c498 <rmw_uxrce_clean_expired_static_input_buffer>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fa70 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 800bf64:	4606      	mov	r6, r0
 800bf66:	b1f0      	cbz	r0, 800bfa6 <rmw_take_with_info+0x6e>
 800bf68:	68c1      	ldr	r1, [r0, #12]
 800bf6a:	4668      	mov	r0, sp
 800bf6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800bf70:	3110      	adds	r1, #16
 800bf72:	f003 fc09 	bl	800f788 <ucdr_init_buffer>
 800bf76:	69a3      	ldr	r3, [r4, #24]
 800bf78:	4639      	mov	r1, r7
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	4668      	mov	r0, sp
 800bf7e:	4798      	blx	r3
 800bf80:	4604      	mov	r4, r0
 800bf82:	4631      	mov	r1, r6
 800bf84:	4815      	ldr	r0, [pc, #84]	; (800bfdc <rmw_take_with_info+0xa4>)
 800bf86:	f009 fd07 	bl	8015998 <put_memory>
 800bf8a:	702c      	strb	r4, [r5, #0]
 800bf8c:	f084 0001 	eor.w	r0, r4, #1
 800bf90:	b2c0      	uxtb	r0, r0
 800bf92:	b009      	add	sp, #36	; 0x24
 800bf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf96:	6864      	ldr	r4, [r4, #4]
 800bf98:	f000 fa7e 	bl	800c498 <rmw_uxrce_clean_expired_static_input_buffer>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 fa51 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	b910      	cbnz	r0, 800bfac <rmw_take_with_info+0x74>
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	b009      	add	sp, #36	; 0x24
 800bfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfac:	68e9      	ldr	r1, [r5, #12]
 800bfae:	4668      	mov	r0, sp
 800bfb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800bfb4:	3110      	adds	r1, #16
 800bfb6:	f003 fbe7 	bl	800f788 <ucdr_init_buffer>
 800bfba:	69a3      	ldr	r3, [r4, #24]
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	4668      	mov	r0, sp
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	4798      	blx	r3
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4804      	ldr	r0, [pc, #16]	; (800bfdc <rmw_take_with_info+0xa4>)
 800bfca:	f009 fce5 	bl	8015998 <put_memory>
 800bfce:	e7dd      	b.n	800bf8c <rmw_take_with_info+0x54>
 800bfd0:	200c      	movs	r0, #12
 800bfd2:	b009      	add	sp, #36	; 0x24
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	0801a0ac 	.word	0x0801a0ac
 800bfdc:	20008ca0 	.word	0x20008ca0

0800bfe0 <rmw_uxrce_transport_init>:
 800bfe0:	b508      	push	{r3, lr}
 800bfe2:	b108      	cbz	r0, 800bfe8 <rmw_uxrce_transport_init+0x8>
 800bfe4:	f100 0210 	add.w	r2, r0, #16
 800bfe8:	b139      	cbz	r1, 800bffa <rmw_uxrce_transport_init+0x1a>
 800bfea:	4610      	mov	r0, r2
 800bfec:	6949      	ldr	r1, [r1, #20]
 800bfee:	f003 ffb7 	bl	800ff60 <uxr_init_custom_transport>
 800bff2:	f080 0001 	eor.w	r0, r0, #1
 800bff6:	b2c0      	uxtb	r0, r0
 800bff8:	bd08      	pop	{r3, pc}
 800bffa:	4b04      	ldr	r3, [pc, #16]	; (800c00c <rmw_uxrce_transport_init+0x2c>)
 800bffc:	4610      	mov	r0, r2
 800bffe:	6859      	ldr	r1, [r3, #4]
 800c000:	f003 ffae 	bl	800ff60 <uxr_init_custom_transport>
 800c004:	f080 0001 	eor.w	r0, r0, #1
 800c008:	b2c0      	uxtb	r0, r0
 800c00a:	bd08      	pop	{r3, pc}
 800c00c:	20008c80 	.word	0x20008c80

0800c010 <rmw_uros_epoch_nanos>:
 800c010:	4b05      	ldr	r3, [pc, #20]	; (800c028 <rmw_uros_epoch_nanos+0x18>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	b123      	cbz	r3, 800c020 <rmw_uros_epoch_nanos+0x10>
 800c016:	68d8      	ldr	r0, [r3, #12]
 800c018:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c01c:	f004 be10 	b.w	8010c40 <uxr_epoch_nanos>
 800c020:	2000      	movs	r0, #0
 800c022:	2100      	movs	r1, #0
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	2000be48 	.word	0x2000be48

0800c02c <rmw_uros_sync_session>:
 800c02c:	b508      	push	{r3, lr}
 800c02e:	4b07      	ldr	r3, [pc, #28]	; (800c04c <rmw_uros_sync_session+0x20>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	b14b      	cbz	r3, 800c048 <rmw_uros_sync_session+0x1c>
 800c034:	4601      	mov	r1, r0
 800c036:	68d8      	ldr	r0, [r3, #12]
 800c038:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c03c:	f004 fdac 	bl	8010b98 <uxr_sync_session>
 800c040:	f080 0001 	eor.w	r0, r0, #1
 800c044:	b2c0      	uxtb	r0, r0
 800c046:	bd08      	pop	{r3, pc}
 800c048:	2001      	movs	r0, #1
 800c04a:	bd08      	pop	{r3, pc}
 800c04c:	2000be48 	.word	0x2000be48

0800c050 <rmw_uxrce_init_service_memory>:
 800c050:	b1ba      	cbz	r2, 800c082 <rmw_uxrce_init_service_memory+0x32>
 800c052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c054:	7a03      	ldrb	r3, [r0, #8]
 800c056:	4605      	mov	r5, r0
 800c058:	b993      	cbnz	r3, 800c080 <rmw_uxrce_init_service_memory+0x30>
 800c05a:	460c      	mov	r4, r1
 800c05c:	21c8      	movs	r1, #200	; 0xc8
 800c05e:	2001      	movs	r0, #1
 800c060:	461f      	mov	r7, r3
 800c062:	fb01 4602 	mla	r6, r1, r2, r4
 800c066:	e9c5 3300 	strd	r3, r3, [r5]
 800c06a:	60e9      	str	r1, [r5, #12]
 800c06c:	7228      	strb	r0, [r5, #8]
 800c06e:	4621      	mov	r1, r4
 800c070:	4628      	mov	r0, r5
 800c072:	f009 fc91 	bl	8015998 <put_memory>
 800c076:	60e4      	str	r4, [r4, #12]
 800c078:	f804 7bc8 	strb.w	r7, [r4], #200
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	d1f6      	bne.n	800c06e <rmw_uxrce_init_service_memory+0x1e>
 800c080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c082:	4770      	bx	lr

0800c084 <rmw_uxrce_init_client_memory>:
 800c084:	b1ba      	cbz	r2, 800c0b6 <rmw_uxrce_init_client_memory+0x32>
 800c086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c088:	7a03      	ldrb	r3, [r0, #8]
 800c08a:	4605      	mov	r5, r0
 800c08c:	b993      	cbnz	r3, 800c0b4 <rmw_uxrce_init_client_memory+0x30>
 800c08e:	460c      	mov	r4, r1
 800c090:	21c8      	movs	r1, #200	; 0xc8
 800c092:	2001      	movs	r0, #1
 800c094:	461f      	mov	r7, r3
 800c096:	fb01 4602 	mla	r6, r1, r2, r4
 800c09a:	e9c5 3300 	strd	r3, r3, [r5]
 800c09e:	60e9      	str	r1, [r5, #12]
 800c0a0:	7228      	strb	r0, [r5, #8]
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f009 fc77 	bl	8015998 <put_memory>
 800c0aa:	60e4      	str	r4, [r4, #12]
 800c0ac:	f804 7bc8 	strb.w	r7, [r4], #200
 800c0b0:	42a6      	cmp	r6, r4
 800c0b2:	d1f6      	bne.n	800c0a2 <rmw_uxrce_init_client_memory+0x1e>
 800c0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b6:	4770      	bx	lr

0800c0b8 <rmw_uxrce_init_publisher_memory>:
 800c0b8:	b1ba      	cbz	r2, 800c0ea <rmw_uxrce_init_publisher_memory+0x32>
 800c0ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0bc:	7a03      	ldrb	r3, [r0, #8]
 800c0be:	4605      	mov	r5, r0
 800c0c0:	b993      	cbnz	r3, 800c0e8 <rmw_uxrce_init_publisher_memory+0x30>
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	21d8      	movs	r1, #216	; 0xd8
 800c0c6:	2001      	movs	r0, #1
 800c0c8:	461f      	mov	r7, r3
 800c0ca:	fb01 4602 	mla	r6, r1, r2, r4
 800c0ce:	e9c5 3300 	strd	r3, r3, [r5]
 800c0d2:	60e9      	str	r1, [r5, #12]
 800c0d4:	7228      	strb	r0, [r5, #8]
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f009 fc5d 	bl	8015998 <put_memory>
 800c0de:	60e4      	str	r4, [r4, #12]
 800c0e0:	f804 7bd8 	strb.w	r7, [r4], #216
 800c0e4:	42a6      	cmp	r6, r4
 800c0e6:	d1f6      	bne.n	800c0d6 <rmw_uxrce_init_publisher_memory+0x1e>
 800c0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ea:	4770      	bx	lr

0800c0ec <rmw_uxrce_init_subscription_memory>:
 800c0ec:	b1ba      	cbz	r2, 800c11e <rmw_uxrce_init_subscription_memory+0x32>
 800c0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f0:	7a03      	ldrb	r3, [r0, #8]
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b993      	cbnz	r3, 800c11c <rmw_uxrce_init_subscription_memory+0x30>
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	21d0      	movs	r1, #208	; 0xd0
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	461f      	mov	r7, r3
 800c0fe:	fb01 4602 	mla	r6, r1, r2, r4
 800c102:	e9c5 3300 	strd	r3, r3, [r5]
 800c106:	60e9      	str	r1, [r5, #12]
 800c108:	7228      	strb	r0, [r5, #8]
 800c10a:	4621      	mov	r1, r4
 800c10c:	4628      	mov	r0, r5
 800c10e:	f009 fc43 	bl	8015998 <put_memory>
 800c112:	60e4      	str	r4, [r4, #12]
 800c114:	f804 7bd0 	strb.w	r7, [r4], #208
 800c118:	42a6      	cmp	r6, r4
 800c11a:	d1f6      	bne.n	800c10a <rmw_uxrce_init_subscription_memory+0x1e>
 800c11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c11e:	4770      	bx	lr

0800c120 <rmw_uxrce_init_node_memory>:
 800c120:	b1ba      	cbz	r2, 800c152 <rmw_uxrce_init_node_memory+0x32>
 800c122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c124:	7a03      	ldrb	r3, [r0, #8]
 800c126:	4605      	mov	r5, r0
 800c128:	b993      	cbnz	r3, 800c150 <rmw_uxrce_init_node_memory+0x30>
 800c12a:	460c      	mov	r4, r1
 800c12c:	21a4      	movs	r1, #164	; 0xa4
 800c12e:	2001      	movs	r0, #1
 800c130:	461f      	mov	r7, r3
 800c132:	fb01 4602 	mla	r6, r1, r2, r4
 800c136:	e9c5 3300 	strd	r3, r3, [r5]
 800c13a:	60e9      	str	r1, [r5, #12]
 800c13c:	7228      	strb	r0, [r5, #8]
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f009 fc29 	bl	8015998 <put_memory>
 800c146:	60e4      	str	r4, [r4, #12]
 800c148:	f804 7ba4 	strb.w	r7, [r4], #164
 800c14c:	42a6      	cmp	r6, r4
 800c14e:	d1f6      	bne.n	800c13e <rmw_uxrce_init_node_memory+0x1e>
 800c150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c152:	4770      	bx	lr

0800c154 <rmw_uxrce_init_session_memory>:
 800c154:	b1e2      	cbz	r2, 800c190 <rmw_uxrce_init_session_memory+0x3c>
 800c156:	7a03      	ldrb	r3, [r0, #8]
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	4605      	mov	r5, r0
 800c15e:	b9ab      	cbnz	r3, 800c18c <rmw_uxrce_init_session_memory+0x38>
 800c160:	f241 50a8 	movw	r0, #5544	; 0x15a8
 800c164:	460c      	mov	r4, r1
 800c166:	2101      	movs	r1, #1
 800c168:	4698      	mov	r8, r3
 800c16a:	4607      	mov	r7, r0
 800c16c:	fb00 4602 	mla	r6, r0, r2, r4
 800c170:	e9c5 3300 	strd	r3, r3, [r5]
 800c174:	60e8      	str	r0, [r5, #12]
 800c176:	7229      	strb	r1, [r5, #8]
 800c178:	4621      	mov	r1, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	f009 fc0c 	bl	8015998 <put_memory>
 800c180:	60e4      	str	r4, [r4, #12]
 800c182:	f884 8000 	strb.w	r8, [r4]
 800c186:	443c      	add	r4, r7
 800c188:	42a6      	cmp	r6, r4
 800c18a:	d1f5      	bne.n	800c178 <rmw_uxrce_init_session_memory+0x24>
 800c18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop

0800c194 <rmw_uxrce_init_topic_memory>:
 800c194:	b1ca      	cbz	r2, 800c1ca <rmw_uxrce_init_topic_memory+0x36>
 800c196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c198:	7a03      	ldrb	r3, [r0, #8]
 800c19a:	4606      	mov	r6, r0
 800c19c:	b9a3      	cbnz	r3, 800c1c8 <rmw_uxrce_init_topic_memory+0x34>
 800c19e:	460c      	mov	r4, r1
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	211c      	movs	r1, #28
 800c1a4:	461f      	mov	r7, r3
 800c1a6:	e9c6 3300 	strd	r3, r3, [r6]
 800c1aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c1ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1b2:	7230      	strb	r0, [r6, #8]
 800c1b4:	60f1      	str	r1, [r6, #12]
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f009 fbed 	bl	8015998 <put_memory>
 800c1be:	60e4      	str	r4, [r4, #12]
 800c1c0:	f804 7b1c 	strb.w	r7, [r4], #28
 800c1c4:	42a5      	cmp	r5, r4
 800c1c6:	d1f6      	bne.n	800c1b6 <rmw_uxrce_init_topic_memory+0x22>
 800c1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ca:	4770      	bx	lr

0800c1cc <rmw_uxrce_init_static_input_buffer_memory>:
 800c1cc:	b1da      	cbz	r2, 800c206 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d0:	7a03      	ldrb	r3, [r0, #8]
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	b9b3      	cbnz	r3, 800c204 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800c1de:	461f      	mov	r7, r3
 800c1e0:	e9c6 3300 	strd	r3, r3, [r6]
 800c1e4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800c1e8:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800c1ec:	7230      	strb	r0, [r6, #8]
 800c1ee:	60f1      	str	r1, [r6, #12]
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f009 fbd0 	bl	8015998 <put_memory>
 800c1f8:	60e4      	str	r4, [r4, #12]
 800c1fa:	7027      	strb	r7, [r4, #0]
 800c1fc:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800c200:	42a5      	cmp	r5, r4
 800c202:	d1f5      	bne.n	800c1f0 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 800c204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c206:	4770      	bx	lr

0800c208 <rmw_uxrce_init_init_options_impl_memory>:
 800c208:	b1ba      	cbz	r2, 800c23a <rmw_uxrce_init_init_options_impl_memory+0x32>
 800c20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20c:	7a03      	ldrb	r3, [r0, #8]
 800c20e:	4605      	mov	r5, r0
 800c210:	b993      	cbnz	r3, 800c238 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800c212:	460c      	mov	r4, r1
 800c214:	212c      	movs	r1, #44	; 0x2c
 800c216:	2001      	movs	r0, #1
 800c218:	461f      	mov	r7, r3
 800c21a:	fb01 4602 	mla	r6, r1, r2, r4
 800c21e:	e9c5 3300 	strd	r3, r3, [r5]
 800c222:	60e9      	str	r1, [r5, #12]
 800c224:	7228      	strb	r0, [r5, #8]
 800c226:	4621      	mov	r1, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	f009 fbb5 	bl	8015998 <put_memory>
 800c22e:	60e4      	str	r4, [r4, #12]
 800c230:	f804 7b2c 	strb.w	r7, [r4], #44
 800c234:	42a6      	cmp	r6, r4
 800c236:	d1f6      	bne.n	800c226 <rmw_uxrce_init_init_options_impl_memory+0x1e>
 800c238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c23a:	4770      	bx	lr

0800c23c <rmw_uxrce_init_wait_set_memory>:
 800c23c:	b1ca      	cbz	r2, 800c272 <rmw_uxrce_init_wait_set_memory+0x36>
 800c23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c240:	7a03      	ldrb	r3, [r0, #8]
 800c242:	4606      	mov	r6, r0
 800c244:	b9a3      	cbnz	r3, 800c270 <rmw_uxrce_init_wait_set_memory+0x34>
 800c246:	460c      	mov	r4, r1
 800c248:	2001      	movs	r0, #1
 800c24a:	211c      	movs	r1, #28
 800c24c:	461f      	mov	r7, r3
 800c24e:	e9c6 3300 	strd	r3, r3, [r6]
 800c252:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c256:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c25a:	7230      	strb	r0, [r6, #8]
 800c25c:	60f1      	str	r1, [r6, #12]
 800c25e:	4621      	mov	r1, r4
 800c260:	4630      	mov	r0, r6
 800c262:	f009 fb99 	bl	8015998 <put_memory>
 800c266:	60e4      	str	r4, [r4, #12]
 800c268:	f804 7b1c 	strb.w	r7, [r4], #28
 800c26c:	42a5      	cmp	r5, r4
 800c26e:	d1f6      	bne.n	800c25e <rmw_uxrce_init_wait_set_memory+0x22>
 800c270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c272:	4770      	bx	lr

0800c274 <rmw_uxrce_init_guard_condition_memory>:
 800c274:	b1ba      	cbz	r2, 800c2a6 <rmw_uxrce_init_guard_condition_memory+0x32>
 800c276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c278:	7a03      	ldrb	r3, [r0, #8]
 800c27a:	4605      	mov	r5, r0
 800c27c:	b993      	cbnz	r3, 800c2a4 <rmw_uxrce_init_guard_condition_memory+0x30>
 800c27e:	460c      	mov	r4, r1
 800c280:	2001      	movs	r0, #1
 800c282:	2120      	movs	r1, #32
 800c284:	461f      	mov	r7, r3
 800c286:	e9c5 3300 	strd	r3, r3, [r5]
 800c28a:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800c28e:	7228      	strb	r0, [r5, #8]
 800c290:	60e9      	str	r1, [r5, #12]
 800c292:	4621      	mov	r1, r4
 800c294:	4628      	mov	r0, r5
 800c296:	f009 fb7f 	bl	8015998 <put_memory>
 800c29a:	60e4      	str	r4, [r4, #12]
 800c29c:	f804 7b20 	strb.w	r7, [r4], #32
 800c2a0:	42a6      	cmp	r6, r4
 800c2a2:	d1f6      	bne.n	800c292 <rmw_uxrce_init_guard_condition_memory+0x1e>
 800c2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a6:	4770      	bx	lr

0800c2a8 <rmw_uxrce_fini_session_memory>:
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <rmw_uxrce_fini_session_memory+0x8>)
 800c2ac:	f009 bb74 	b.w	8015998 <put_memory>
 800c2b0:	2000be48 	.word	0x2000be48

0800c2b4 <rmw_uxrce_fini_node_memory>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	6800      	ldr	r0, [r0, #0]
 800c2ba:	b128      	cbz	r0, 800c2c8 <rmw_uxrce_fini_node_memory+0x14>
 800c2bc:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <rmw_uxrce_fini_node_memory+0x28>)
 800c2be:	6819      	ldr	r1, [r3, #0]
 800c2c0:	f7f3 ffb6 	bl	8000230 <strcmp>
 800c2c4:	b940      	cbnz	r0, 800c2d8 <rmw_uxrce_fini_node_memory+0x24>
 800c2c6:	6020      	str	r0, [r4, #0]
 800c2c8:	6861      	ldr	r1, [r4, #4]
 800c2ca:	b129      	cbz	r1, 800c2d8 <rmw_uxrce_fini_node_memory+0x24>
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	4804      	ldr	r0, [pc, #16]	; (800c2e0 <rmw_uxrce_fini_node_memory+0x2c>)
 800c2d0:	610d      	str	r5, [r1, #16]
 800c2d2:	f009 fb61 	bl	8015998 <put_memory>
 800c2d6:	6065      	str	r5, [r4, #4]
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
 800c2da:	bf00      	nop
 800c2dc:	0801a0ac 	.word	0x0801a0ac
 800c2e0:	2000bc74 	.word	0x2000bc74

0800c2e4 <rmw_uxrce_fini_publisher_memory>:
 800c2e4:	b510      	push	{r4, lr}
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	6800      	ldr	r0, [r0, #0]
 800c2ea:	b128      	cbz	r0, 800c2f8 <rmw_uxrce_fini_publisher_memory+0x14>
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c2ee:	6819      	ldr	r1, [r3, #0]
 800c2f0:	f7f3 ff9e 	bl	8000230 <strcmp>
 800c2f4:	b938      	cbnz	r0, 800c306 <rmw_uxrce_fini_publisher_memory+0x22>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	6861      	ldr	r1, [r4, #4]
 800c2fa:	b121      	cbz	r1, 800c306 <rmw_uxrce_fini_publisher_memory+0x22>
 800c2fc:	4803      	ldr	r0, [pc, #12]	; (800c30c <rmw_uxrce_fini_publisher_memory+0x28>)
 800c2fe:	f009 fb4b 	bl	8015998 <put_memory>
 800c302:	2300      	movs	r3, #0
 800c304:	6063      	str	r3, [r4, #4]
 800c306:	bd10      	pop	{r4, pc}
 800c308:	0801a0ac 	.word	0x0801a0ac
 800c30c:	20008cb0 	.word	0x20008cb0

0800c310 <rmw_uxrce_fini_subscription_memory>:
 800c310:	b510      	push	{r4, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	6800      	ldr	r0, [r0, #0]
 800c316:	b128      	cbz	r0, 800c324 <rmw_uxrce_fini_subscription_memory+0x14>
 800c318:	4b06      	ldr	r3, [pc, #24]	; (800c334 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c31a:	6819      	ldr	r1, [r3, #0]
 800c31c:	f7f3 ff88 	bl	8000230 <strcmp>
 800c320:	b938      	cbnz	r0, 800c332 <rmw_uxrce_fini_subscription_memory+0x22>
 800c322:	6020      	str	r0, [r4, #0]
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	b121      	cbz	r1, 800c332 <rmw_uxrce_fini_subscription_memory+0x22>
 800c328:	4803      	ldr	r0, [pc, #12]	; (800c338 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c32a:	f009 fb35 	bl	8015998 <put_memory>
 800c32e:	2300      	movs	r3, #0
 800c330:	6063      	str	r3, [r4, #4]
 800c332:	bd10      	pop	{r4, pc}
 800c334:	0801a0ac 	.word	0x0801a0ac
 800c338:	2000bf0c 	.word	0x2000bf0c

0800c33c <rmw_uxrce_fini_service_memory>:
 800c33c:	b510      	push	{r4, lr}
 800c33e:	4604      	mov	r4, r0
 800c340:	6800      	ldr	r0, [r0, #0]
 800c342:	b128      	cbz	r0, 800c350 <rmw_uxrce_fini_service_memory+0x14>
 800c344:	4b06      	ldr	r3, [pc, #24]	; (800c360 <rmw_uxrce_fini_service_memory+0x24>)
 800c346:	6819      	ldr	r1, [r3, #0]
 800c348:	f7f3 ff72 	bl	8000230 <strcmp>
 800c34c:	b938      	cbnz	r0, 800c35e <rmw_uxrce_fini_service_memory+0x22>
 800c34e:	6020      	str	r0, [r4, #0]
 800c350:	6861      	ldr	r1, [r4, #4]
 800c352:	b121      	cbz	r1, 800c35e <rmw_uxrce_fini_service_memory+0x22>
 800c354:	4803      	ldr	r0, [pc, #12]	; (800c364 <rmw_uxrce_fini_service_memory+0x28>)
 800c356:	f009 fb1f 	bl	8015998 <put_memory>
 800c35a:	2300      	movs	r3, #0
 800c35c:	6063      	str	r3, [r4, #4]
 800c35e:	bd10      	pop	{r4, pc}
 800c360:	0801a0ac 	.word	0x0801a0ac
 800c364:	2000befc 	.word	0x2000befc

0800c368 <rmw_uxrce_fini_client_memory>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	4604      	mov	r4, r0
 800c36c:	6800      	ldr	r0, [r0, #0]
 800c36e:	b128      	cbz	r0, 800c37c <rmw_uxrce_fini_client_memory+0x14>
 800c370:	4b06      	ldr	r3, [pc, #24]	; (800c38c <rmw_uxrce_fini_client_memory+0x24>)
 800c372:	6819      	ldr	r1, [r3, #0]
 800c374:	f7f3 ff5c 	bl	8000230 <strcmp>
 800c378:	b938      	cbnz	r0, 800c38a <rmw_uxrce_fini_client_memory+0x22>
 800c37a:	6020      	str	r0, [r4, #0]
 800c37c:	6861      	ldr	r1, [r4, #4]
 800c37e:	b121      	cbz	r1, 800c38a <rmw_uxrce_fini_client_memory+0x22>
 800c380:	4803      	ldr	r0, [pc, #12]	; (800c390 <rmw_uxrce_fini_client_memory+0x28>)
 800c382:	f009 fb09 	bl	8015998 <put_memory>
 800c386:	2300      	movs	r3, #0
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	bd10      	pop	{r4, pc}
 800c38c:	0801a0ac 	.word	0x0801a0ac
 800c390:	20009530 	.word	0x20009530

0800c394 <rmw_uxrce_fini_topic_memory>:
 800c394:	b510      	push	{r4, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	4803      	ldr	r0, [pc, #12]	; (800c3a8 <rmw_uxrce_fini_topic_memory+0x14>)
 800c39a:	4621      	mov	r1, r4
 800c39c:	f009 fafc 	bl	8015998 <put_memory>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61a3      	str	r3, [r4, #24]
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	bf00      	nop
 800c3a8:	2000be38 	.word	0x2000be38

0800c3ac <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	b4f0      	push	{r4, r5, r6, r7}
 800c3b0:	4923      	ldr	r1, [pc, #140]	; (800c440 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800c3b2:	ac04      	add	r4, sp, #16
 800c3b4:	e884 000c 	stmia.w	r4, {r2, r3}
 800c3b8:	680d      	ldr	r5, [r1, #0]
 800c3ba:	9c05      	ldr	r4, [sp, #20]
 800c3bc:	4601      	mov	r1, r0
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	d03c      	beq.n	800c43c <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	68da      	ldr	r2, [r3, #12]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800c3ce:	4291      	cmp	r1, r2
 800c3d0:	bf08      	it	eq
 800c3d2:	3001      	addeq	r0, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1f6      	bne.n	800c3c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800c3d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d025      	beq.n	800c42c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800c3e0:	d905      	bls.n	800c3ee <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d003      	beq.n	800c3ee <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c3ea:	b002      	add	sp, #8
 800c3ec:	4770      	bx	lr
 800c3ee:	b304      	cbz	r4, 800c432 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c3f0:	4284      	cmp	r4, r0
 800c3f2:	d81e      	bhi.n	800c432 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	d0f6      	beq.n	800c3e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c3fe:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800c402:	e002      	b.n	800c40a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800c404:	68ad      	ldr	r5, [r5, #8]
 800c406:	2d00      	cmp	r5, #0
 800c408:	d0ee      	beq.n	800c3e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 800c40a:	68eb      	ldr	r3, [r5, #12]
 800c40c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800c410:	4291      	cmp	r1, r2
 800c412:	d1f7      	bne.n	800c404 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c414:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	42b2      	cmp	r2, r6
 800c41e:	eb73 0407 	sbcs.w	r4, r3, r7
 800c422:	daef      	bge.n	800c404 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c424:	4616      	mov	r6, r2
 800c426:	461f      	mov	r7, r3
 800c428:	4628      	mov	r0, r5
 800c42a:	e7eb      	b.n	800c404 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c42c:	b10c      	cbz	r4, 800c432 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c42e:	4284      	cmp	r4, r0
 800c430:	d9d9      	bls.n	800c3e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c432:	bcf0      	pop	{r4, r5, r6, r7}
 800c434:	4802      	ldr	r0, [pc, #8]	; (800c440 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800c436:	b002      	add	sp, #8
 800c438:	f009 ba9e 	b.w	8015978 <get_memory>
 800c43c:	4628      	mov	r0, r5
 800c43e:	e7cb      	b.n	800c3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 800c440:	20008ca0 	.word	0x20008ca0

0800c444 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c444:	4b12      	ldr	r3, [pc, #72]	; (800c490 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	b303      	cbz	r3, 800c48c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 800c44a:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 800c44e:	4604      	mov	r4, r0
 800c450:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c454:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800c458:	2000      	movs	r0, #0
 800c45a:	e001      	b.n	800c460 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	b193      	cbz	r3, 800c486 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800c466:	428c      	cmp	r4, r1
 800c468:	d1f8      	bne.n	800c45c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c46a:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800c46e:	e9d2 8900 	ldrd	r8, r9, [r2]
 800c472:	45b0      	cmp	r8, r6
 800c474:	eb79 0207 	sbcs.w	r2, r9, r7
 800c478:	daf0      	bge.n	800c45c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c47a:	4618      	mov	r0, r3
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	4646      	mov	r6, r8
 800c480:	464f      	mov	r7, r9
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1ec      	bne.n	800c460 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800c486:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 800c48a:	4770      	bx	lr
 800c48c:	4618      	mov	r0, r3
 800c48e:	4770      	bx	lr
 800c490:	20008ca0 	.word	0x20008ca0
 800c494:	00000000 	.word	0x00000000

0800c498 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4e38      	ldr	r6, [pc, #224]	; (800c580 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800c49e:	b083      	sub	sp, #12
 800c4a0:	f8d6 8000 	ldr.w	r8, [r6]
 800c4a4:	f7ff fdb4 	bl	800c010 <rmw_uros_epoch_nanos>
 800c4a8:	f1b8 0f00 	cmp.w	r8, #0
 800c4ac:	d05f      	beq.n	800c56e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800c4ae:	46b1      	mov	r9, r6
 800c4b0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800c4ba:	468b      	mov	fp, r1
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d02d      	beq.n	800c51c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	d041      	beq.n	800c548 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d029      	beq.n	800c51c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800c4da:	18c2      	adds	r2, r0, r3
 800c4dc:	9b01      	ldr	r3, [sp, #4]
 800c4de:	cec0      	ldmia	r6, {r6, r7}
 800c4e0:	eb41 0303 	adc.w	r3, r1, r3
 800c4e4:	1994      	adds	r4, r2, r6
 800c4e6:	eb43 0507 	adc.w	r5, r3, r7
 800c4ea:	4554      	cmp	r4, sl
 800c4ec:	eb75 020b 	sbcs.w	r2, r5, fp
 800c4f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4f4:	db03      	blt.n	800c4fe <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 800c4f6:	45b2      	cmp	sl, r6
 800c4f8:	eb7b 0207 	sbcs.w	r2, fp, r7
 800c4fc:	da05      	bge.n	800c50a <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 800c4fe:	4641      	mov	r1, r8
 800c500:	4648      	mov	r0, r9
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	f009 fa48 	bl	8015998 <put_memory>
 800c508:	9b00      	ldr	r3, [sp, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d02f      	beq.n	800c56e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800c50e:	4698      	mov	r8, r3
 800c510:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800c514:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d1d1      	bne.n	800c4c0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800c51c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800c520:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800c524:	e9cd 2300 	strd	r2, r3, [sp]
 800c528:	4313      	orrs	r3, r2
 800c52a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800c52e:	d015      	beq.n	800c55c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c530:	9a01      	ldr	r2, [sp, #4]
 800c532:	4b14      	ldr	r3, [pc, #80]	; (800c584 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800c534:	fb03 f702 	mul.w	r7, r3, r2
 800c538:	9a00      	ldr	r2, [sp, #0]
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	e9cd 2300 	strd	r2, r3, [sp]
 800c542:	443b      	add	r3, r7
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	e7c5      	b.n	800c4d4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800c548:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800c54c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800c550:	e9cd 2300 	strd	r2, r3, [sp]
 800c554:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800c558:	4313      	orrs	r3, r2
 800c55a:	d1e9      	bne.n	800c530 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800c55c:	ea50 0301 	orrs.w	r3, r0, r1
 800c560:	d1b8      	bne.n	800c4d4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800c562:	a305      	add	r3, pc, #20	; (adr r3, 800c578 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	e9cd 2300 	strd	r2, r3, [sp]
 800c56c:	e7b2      	b.n	800c4d4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800c56e:	b003      	add	sp, #12
 800c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c574:	f3af 8000 	nop.w
 800c578:	fc23ac00 	.word	0xfc23ac00
 800c57c:	00000006 	.word	0x00000006
 800c580:	20008ca0 	.word	0x20008ca0
 800c584:	3b9aca00 	.word	0x3b9aca00

0800c588 <run_xrce_session>:
 800c588:	b510      	push	{r4, lr}
 800c58a:	788c      	ldrb	r4, [r1, #2]
 800c58c:	b086      	sub	sp, #24
 800c58e:	2c01      	cmp	r4, #1
 800c590:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c594:	d00c      	beq.n	800c5b0 <run_xrce_session+0x28>
 800c596:	4619      	mov	r1, r3
 800c598:	2301      	movs	r3, #1
 800c59a:	f10d 020e 	add.w	r2, sp, #14
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c5a4:	f10d 0317 	add.w	r3, sp, #23
 800c5a8:	f004 fc0a 	bl	8010dc0 <uxr_run_session_until_all_status>
 800c5ac:	b006      	add	sp, #24
 800c5ae:	bd10      	pop	{r4, pc}
 800c5b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c5b4:	f004 fb4e 	bl	8010c54 <uxr_flash_output_streams>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	b006      	add	sp, #24
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	bf00      	nop

0800c5c0 <convert_qos_profile>:
 800c5c0:	b430      	push	{r4, r5}
 800c5c2:	7a0d      	ldrb	r5, [r1, #8]
 800c5c4:	780c      	ldrb	r4, [r1, #0]
 800c5c6:	7a4a      	ldrb	r2, [r1, #9]
 800c5c8:	f1a5 0502 	sub.w	r5, r5, #2
 800c5cc:	f1a4 0402 	sub.w	r4, r4, #2
 800c5d0:	fab5 f585 	clz	r5, r5
 800c5d4:	fab4 f484 	clz	r4, r4
 800c5d8:	2a02      	cmp	r2, #2
 800c5da:	bf18      	it	ne
 800c5dc:	2200      	movne	r2, #0
 800c5de:	8889      	ldrh	r1, [r1, #4]
 800c5e0:	096d      	lsrs	r5, r5, #5
 800c5e2:	0964      	lsrs	r4, r4, #5
 800c5e4:	7045      	strb	r5, [r0, #1]
 800c5e6:	7084      	strb	r4, [r0, #2]
 800c5e8:	7002      	strb	r2, [r0, #0]
 800c5ea:	8081      	strh	r1, [r0, #4]
 800c5ec:	bc30      	pop	{r4, r5}
 800c5ee:	4770      	bx	lr

0800c5f0 <generate_type_name>:
 800c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	6840      	ldr	r0, [r0, #4]
 800c5fa:	4688      	mov	r8, r1
 800c5fc:	4617      	mov	r7, r2
 800c5fe:	f7f3 fe21 	bl	8000244 <strlen>
 800c602:	6834      	ldr	r4, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b11c      	cbz	r4, 800c610 <generate_type_name+0x20>
 800c608:	4620      	mov	r0, r4
 800c60a:	f7f3 fe1b 	bl	8000244 <strlen>
 800c60e:	4604      	mov	r4, r0
 800c610:	2300      	movs	r3, #0
 800c612:	f888 3000 	strb.w	r3, [r8]
 800c616:	6833      	ldr	r3, [r6, #0]
 800c618:	3508      	adds	r5, #8
 800c61a:	442c      	add	r4, r5
 800c61c:	b19b      	cbz	r3, 800c646 <generate_type_name+0x56>
 800c61e:	490c      	ldr	r1, [pc, #48]	; (800c650 <generate_type_name+0x60>)
 800c620:	4608      	mov	r0, r1
 800c622:	6875      	ldr	r5, [r6, #4]
 800c624:	4a0b      	ldr	r2, [pc, #44]	; (800c654 <generate_type_name+0x64>)
 800c626:	9504      	str	r5, [sp, #16]
 800c628:	4d0b      	ldr	r5, [pc, #44]	; (800c658 <generate_type_name+0x68>)
 800c62a:	9103      	str	r1, [sp, #12]
 800c62c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800c630:	9000      	str	r0, [sp, #0]
 800c632:	9205      	str	r2, [sp, #20]
 800c634:	4639      	mov	r1, r7
 800c636:	4640      	mov	r0, r8
 800c638:	4a08      	ldr	r2, [pc, #32]	; (800c65c <generate_type_name+0x6c>)
 800c63a:	f00a fe8d 	bl	8017358 <sniprintf>
 800c63e:	4620      	mov	r0, r4
 800c640:	b006      	add	sp, #24
 800c642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c646:	4b06      	ldr	r3, [pc, #24]	; (800c660 <generate_type_name+0x70>)
 800c648:	4901      	ldr	r1, [pc, #4]	; (800c650 <generate_type_name+0x60>)
 800c64a:	4618      	mov	r0, r3
 800c64c:	e7e9      	b.n	800c622 <generate_type_name+0x32>
 800c64e:	bf00      	nop
 800c650:	080198d0 	.word	0x080198d0
 800c654:	080198e4 	.word	0x080198e4
 800c658:	080198e8 	.word	0x080198e8
 800c65c:	080198d4 	.word	0x080198d4
 800c660:	08019e84 	.word	0x08019e84

0800c664 <generate_topic_name>:
 800c664:	b510      	push	{r4, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	9000      	str	r0, [sp, #0]
 800c66a:	4614      	mov	r4, r2
 800c66c:	4608      	mov	r0, r1
 800c66e:	4b06      	ldr	r3, [pc, #24]	; (800c688 <generate_topic_name+0x24>)
 800c670:	4611      	mov	r1, r2
 800c672:	4a06      	ldr	r2, [pc, #24]	; (800c68c <generate_topic_name+0x28>)
 800c674:	f00a fe70 	bl	8017358 <sniprintf>
 800c678:	2800      	cmp	r0, #0
 800c67a:	da02      	bge.n	800c682 <generate_topic_name+0x1e>
 800c67c:	4284      	cmp	r4, r0
 800c67e:	bfd8      	it	le
 800c680:	2000      	movle	r0, #0
 800c682:	b002      	add	sp, #8
 800c684:	bd10      	pop	{r4, pc}
 800c686:	bf00      	nop
 800c688:	080198f4 	.word	0x080198f4
 800c68c:	080198ec 	.word	0x080198ec

0800c690 <is_uxrce_rmw_identifier_valid>:
 800c690:	b510      	push	{r4, lr}
 800c692:	4604      	mov	r4, r0
 800c694:	b140      	cbz	r0, 800c6a8 <is_uxrce_rmw_identifier_valid+0x18>
 800c696:	f009 f9d7 	bl	8015a48 <rmw_get_implementation_identifier>
 800c69a:	4601      	mov	r1, r0
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7f3 fdc7 	bl	8000230 <strcmp>
 800c6a2:	fab0 f080 	clz	r0, r0
 800c6a6:	0940      	lsrs	r0, r0, #5
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop

0800c6ac <get_message_typesupport_handle>:
 800c6ac:	6883      	ldr	r3, [r0, #8]
 800c6ae:	4718      	bx	r3

0800c6b0 <get_message_typesupport_handle_function>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	6800      	ldr	r0, [r0, #0]
 800c6b6:	f7f3 fdbb 	bl	8000230 <strcmp>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	bf0c      	ite	eq
 800c6be:	4620      	moveq	r0, r4
 800c6c0:	2000      	movne	r0, #0
 800c6c2:	bd10      	pop	{r4, pc}

0800c6c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c6c4:	f000 b8ea 	b.w	800c89c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>

0800c6c8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800c6c8:	f000 ba46 	b.w	800cb58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

0800c6cc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800c6cc:	f000 bb22 	b.w	800cd14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

0800c6d0 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800c6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	460e      	mov	r6, r1
 800c6d6:	f000 fc25 	bl	800cf24 <get_serialized_size_std_msgs__msg__Header>
 800c6da:	1835      	adds	r5, r6, r0
 800c6dc:	4629      	mov	r1, r5
 800c6de:	f107 0018 	add.w	r0, r7, #24
 800c6e2:	f000 febd 	bl	800d460 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800c6e6:	4405      	add	r5, r0
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	2108      	movs	r1, #8
 800c6ec:	f003 f850 	bl	800f790 <ucdr_alignment>
 800c6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6f4:	4425      	add	r5, r4
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800c6fc:	f000 ff6a 	bl	800d5d4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c700:	4405      	add	r5, r0
 800c702:	4628      	mov	r0, r5
 800c704:	2108      	movs	r1, #8
 800c706:	f003 f843 	bl	800f790 <ucdr_alignment>
 800c70a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c70e:	442c      	add	r4, r5
 800c710:	4621      	mov	r1, r4
 800c712:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800c716:	f000 ff5d 	bl	800d5d4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c71a:	4404      	add	r4, r0
 800c71c:	4620      	mov	r0, r4
 800c71e:	2108      	movs	r1, #8
 800c720:	f003 f836 	bl	800f790 <ucdr_alignment>
 800c724:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800c728:	4430      	add	r0, r6
 800c72a:	4420      	add	r0, r4
 800c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72e:	bf00      	nop

0800c730 <get_serialized_size_sensor_msgs__msg__Imu>:
 800c730:	b108      	cbz	r0, 800c736 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800c732:	f7ff bfcd 	b.w	800c6d0 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c736:	4770      	bx	lr

0800c738 <_Imu__get_serialized_size>:
 800c738:	b110      	cbz	r0, 800c740 <_Imu__get_serialized_size+0x8>
 800c73a:	2100      	movs	r1, #0
 800c73c:	f7ff bfc8 	b.w	800c6d0 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop

0800c744 <_Imu__cdr_deserialize>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	460c      	mov	r4, r1
 800c748:	b399      	cbz	r1, 800c7b2 <_Imu__cdr_deserialize+0x6e>
 800c74a:	4605      	mov	r5, r0
 800c74c:	f000 fc6c 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c750:	6843      	ldr	r3, [r0, #4]
 800c752:	4621      	mov	r1, r4
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	4628      	mov	r0, r5
 800c758:	4798      	blx	r3
 800c75a:	f000 ff37 	bl	800d5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c75e:	6843      	ldr	r3, [r0, #4]
 800c760:	f104 0118 	add.w	r1, r4, #24
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	4628      	mov	r0, r5
 800c768:	4798      	blx	r3
 800c76a:	2209      	movs	r2, #9
 800c76c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c770:	4628      	mov	r0, r5
 800c772:	f001 faef 	bl	800dd54 <ucdr_deserialize_array_double>
 800c776:	f000 ffb9 	bl	800d6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c77a:	6843      	ldr	r3, [r0, #4]
 800c77c:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	4628      	mov	r0, r5
 800c784:	4798      	blx	r3
 800c786:	2209      	movs	r2, #9
 800c788:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800c78c:	4628      	mov	r0, r5
 800c78e:	f001 fae1 	bl	800dd54 <ucdr_deserialize_array_double>
 800c792:	f000 ffab 	bl	800d6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c796:	6843      	ldr	r3, [r0, #4]
 800c798:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800c79c:	4628      	mov	r0, r5
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	4798      	blx	r3
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800c7a8:	2209      	movs	r2, #9
 800c7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ae:	f001 bad1 	b.w	800dd54 <ucdr_deserialize_array_double>
 800c7b2:	4608      	mov	r0, r1
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop

0800c7b8 <_Imu__cdr_serialize>:
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d035      	beq.n	800c828 <_Imu__cdr_serialize+0x70>
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	460d      	mov	r5, r1
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	f000 fc31 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c7c6:	6843      	ldr	r3, [r0, #4]
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4798      	blx	r3
 800c7d0:	f000 fefc 	bl	800d5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c7d4:	6843      	ldr	r3, [r0, #4]
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	f104 0018 	add.w	r0, r4, #24
 800c7de:	4798      	blx	r3
 800c7e0:	2209      	movs	r2, #9
 800c7e2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f001 fa08 	bl	800dbfc <ucdr_serialize_array_double>
 800c7ec:	f000 ff7e 	bl	800d6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c7f0:	6843      	ldr	r3, [r0, #4]
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800c7fa:	4798      	blx	r3
 800c7fc:	2209      	movs	r2, #9
 800c7fe:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800c802:	4628      	mov	r0, r5
 800c804:	f001 f9fa 	bl	800dbfc <ucdr_serialize_array_double>
 800c808:	f000 ff70 	bl	800d6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c80c:	6843      	ldr	r3, [r0, #4]
 800c80e:	4629      	mov	r1, r5
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800c816:	4798      	blx	r3
 800c818:	4628      	mov	r0, r5
 800c81a:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800c81e:	2209      	movs	r2, #9
 800c820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c824:	f001 b9ea 	b.w	800dbfc <ucdr_serialize_array_double>
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <max_serialized_size_sensor_msgs__msg__Imu>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	2301      	movs	r3, #1
 800c830:	7003      	strb	r3, [r0, #0]
 800c832:	4607      	mov	r7, r0
 800c834:	460e      	mov	r6, r1
 800c836:	f000 fbed 	bl	800d014 <max_serialized_size_std_msgs__msg__Header>
 800c83a:	1835      	adds	r5, r6, r0
 800c83c:	4629      	mov	r1, r5
 800c83e:	4638      	mov	r0, r7
 800c840:	f000 fea0 	bl	800d584 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800c844:	4405      	add	r5, r0
 800c846:	4628      	mov	r0, r5
 800c848:	2108      	movs	r1, #8
 800c84a:	f002 ffa1 	bl	800f790 <ucdr_alignment>
 800c84e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c852:	4425      	add	r5, r4
 800c854:	4629      	mov	r1, r5
 800c856:	4638      	mov	r0, r7
 800c858:	f000 ff2c 	bl	800d6b4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c85c:	4405      	add	r5, r0
 800c85e:	4628      	mov	r0, r5
 800c860:	2108      	movs	r1, #8
 800c862:	f002 ff95 	bl	800f790 <ucdr_alignment>
 800c866:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c86a:	442c      	add	r4, r5
 800c86c:	4621      	mov	r1, r4
 800c86e:	4638      	mov	r0, r7
 800c870:	f000 ff20 	bl	800d6b4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c874:	4404      	add	r4, r0
 800c876:	4620      	mov	r0, r4
 800c878:	2108      	movs	r1, #8
 800c87a:	f002 ff89 	bl	800f790 <ucdr_alignment>
 800c87e:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800c882:	4430      	add	r0, r6
 800c884:	4420      	add	r0, r4
 800c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c888 <_Imu__max_serialized_size>:
 800c888:	b500      	push	{lr}
 800c88a:	b083      	sub	sp, #12
 800c88c:	2100      	movs	r1, #0
 800c88e:	f10d 0007 	add.w	r0, sp, #7
 800c892:	f7ff ffcb 	bl	800c82c <max_serialized_size_sensor_msgs__msg__Imu>
 800c896:	b003      	add	sp, #12
 800c898:	f85d fb04 	ldr.w	pc, [sp], #4

0800c89c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c89c:	4800      	ldr	r0, [pc, #0]	; (800c8a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800c89e:	4770      	bx	lr
 800c8a0:	20000028 	.word	0x20000028

0800c8a4 <_JointState__max_serialized_size>:
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	b500      	push	{lr}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	f10d 0007 	add.w	r0, sp, #7
 800c8b0:	f88d 3007 	strb.w	r3, [sp, #7]
 800c8b4:	f000 fbae 	bl	800d014 <max_serialized_size_std_msgs__msg__Header>
 800c8b8:	b003      	add	sp, #12
 800c8ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8be:	bf00      	nop

0800c8c0 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	4688      	mov	r8, r1
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	f000 fb2c 	bl	800cf24 <get_serialized_size_std_msgs__msg__Header>
 800c8cc:	eb08 0400 	add.w	r4, r8, r0
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	2104      	movs	r1, #4
 800c8d4:	69b7      	ldr	r7, [r6, #24]
 800c8d6:	f002 ff5b 	bl	800f790 <ucdr_alignment>
 800c8da:	1d03      	adds	r3, r0, #4
 800c8dc:	441c      	add	r4, r3
 800c8de:	b187      	cbz	r7, 800c902 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x42>
 800c8e0:	2500      	movs	r5, #0
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	2104      	movs	r1, #4
 800c8e6:	f002 ff53 	bl	800f790 <ucdr_alignment>
 800c8ea:	6973      	ldr	r3, [r6, #20]
 800c8ec:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800c8f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c8f4:	3501      	adds	r5, #1
 800c8f6:	1903      	adds	r3, r0, r4
 800c8f8:	6854      	ldr	r4, [r2, #4]
 800c8fa:	3305      	adds	r3, #5
 800c8fc:	42af      	cmp	r7, r5
 800c8fe:	441c      	add	r4, r3
 800c900:	d1ef      	bne.n	800c8e2 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800c902:	2104      	movs	r1, #4
 800c904:	4620      	mov	r0, r4
 800c906:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c908:	f002 ff42 	bl	800f790 <ucdr_alignment>
 800c90c:	4404      	add	r4, r0
 800c90e:	3404      	adds	r4, #4
 800c910:	4620      	mov	r0, r4
 800c912:	2108      	movs	r1, #8
 800c914:	f002 ff3c 	bl	800f790 <ucdr_alignment>
 800c918:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800c91c:	442c      	add	r4, r5
 800c91e:	4620      	mov	r0, r4
 800c920:	2104      	movs	r1, #4
 800c922:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800c924:	f002 ff34 	bl	800f790 <ucdr_alignment>
 800c928:	1d05      	adds	r5, r0, #4
 800c92a:	4425      	add	r5, r4
 800c92c:	4628      	mov	r0, r5
 800c92e:	2108      	movs	r1, #8
 800c930:	f002 ff2e 	bl	800f790 <ucdr_alignment>
 800c934:	eb00 04c7 	add.w	r4, r0, r7, lsl #3
 800c938:	4425      	add	r5, r4
 800c93a:	4628      	mov	r0, r5
 800c93c:	2104      	movs	r1, #4
 800c93e:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 800c940:	f002 ff26 	bl	800f790 <ucdr_alignment>
 800c944:	1d04      	adds	r4, r0, #4
 800c946:	442c      	add	r4, r5
 800c948:	4620      	mov	r0, r4
 800c94a:	2108      	movs	r1, #8
 800c94c:	f002 ff20 	bl	800f790 <ucdr_alignment>
 800c950:	ebc8 08c6 	rsb	r8, r8, r6, lsl #3
 800c954:	4440      	add	r0, r8
 800c956:	4420      	add	r0, r4
 800c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c95c <get_serialized_size_sensor_msgs__msg__JointState>:
 800c95c:	b108      	cbz	r0, 800c962 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800c95e:	f7ff bfaf 	b.w	800c8c0 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800c962:	4770      	bx	lr

0800c964 <_JointState__get_serialized_size>:
 800c964:	b110      	cbz	r0, 800c96c <_JointState__get_serialized_size+0x8>
 800c966:	2100      	movs	r1, #0
 800c968:	f7ff bfaa 	b.w	800c8c0 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <_JointState__cdr_deserialize>:
 800c970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c974:	460d      	mov	r5, r1
 800c976:	b083      	sub	sp, #12
 800c978:	2900      	cmp	r1, #0
 800c97a:	d073      	beq.n	800ca64 <_JointState__cdr_deserialize+0xf4>
 800c97c:	4606      	mov	r6, r0
 800c97e:	f000 fb53 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c982:	6843      	ldr	r3, [r0, #4]
 800c984:	4629      	mov	r1, r5
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	4630      	mov	r0, r6
 800c98a:	4798      	blx	r3
 800c98c:	4669      	mov	r1, sp
 800c98e:	4630      	mov	r0, r6
 800c990:	f001 fe02 	bl	800e598 <ucdr_deserialize_uint32_t>
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	69ea      	ldr	r2, [r5, #28]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d34d      	bcc.n	800ca38 <_JointState__cdr_deserialize+0xc8>
 800c99c:	61ab      	str	r3, [r5, #24]
 800c99e:	f10d 0804 	add.w	r8, sp, #4
 800c9a2:	b320      	cbz	r0, 800c9ee <_JointState__cdr_deserialize+0x7e>
 800c9a4:	2400      	movs	r4, #0
 800c9a6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	f10d 0804 	add.w	r8, sp, #4
 800c9b0:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800c9b4:	d21b      	bcs.n	800c9ee <_JointState__cdr_deserialize+0x7e>
 800c9b6:	696a      	ldr	r2, [r5, #20]
 800c9b8:	4643      	mov	r3, r8
 800c9ba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c9be:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800c9c2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	464a      	mov	r2, r9
 800c9ca:	f002 ff61 	bl	800f890 <ucdr_deserialize_sequence_char>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d037      	beq.n	800ca42 <_JointState__cdr_deserialize+0xd2>
 800c9d2:	9901      	ldr	r1, [sp, #4]
 800c9d4:	b101      	cbz	r1, 800c9d8 <_JointState__cdr_deserialize+0x68>
 800c9d6:	3901      	subs	r1, #1
 800c9d8:	696a      	ldr	r2, [r5, #20]
 800c9da:	9b00      	ldr	r3, [sp, #0]
 800c9dc:	4417      	add	r7, r2
 800c9de:	3401      	adds	r4, #1
 800c9e0:	6079      	str	r1, [r7, #4]
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c9e8:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800c9ec:	d3e3      	bcc.n	800c9b6 <_JointState__cdr_deserialize+0x46>
 800c9ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c9f0:	4643      	mov	r3, r8
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	6a29      	ldr	r1, [r5, #32]
 800c9f8:	f002 fffa 	bl	800f9f0 <ucdr_deserialize_sequence_double>
 800c9fc:	9b01      	ldr	r3, [sp, #4]
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d055      	beq.n	800caae <_JointState__cdr_deserialize+0x13e>
 800ca02:	626b      	str	r3, [r5, #36]	; 0x24
 800ca04:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800ca06:	4643      	mov	r3, r8
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800ca0e:	f002 ffef 	bl	800f9f0 <ucdr_deserialize_sequence_double>
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d03a      	beq.n	800ca8e <_JointState__cdr_deserialize+0x11e>
 800ca18:	632b      	str	r3, [r5, #48]	; 0x30
 800ca1a:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800ca1c:	4643      	mov	r3, r8
 800ca1e:	463a      	mov	r2, r7
 800ca20:	4630      	mov	r0, r6
 800ca22:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800ca24:	f002 ffe4 	bl	800f9f0 <ucdr_deserialize_sequence_double>
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	b1f8      	cbz	r0, 800ca6e <_JointState__cdr_deserialize+0xfe>
 800ca2e:	4620      	mov	r0, r4
 800ca30:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ca32:	b003      	add	sp, #12
 800ca34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca38:	2400      	movs	r4, #0
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	b003      	add	sp, #12
 800ca3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	4599      	cmp	r9, r3
 800ca46:	d2d2      	bcs.n	800c9ee <_JointState__cdr_deserialize+0x7e>
 800ca48:	2101      	movs	r1, #1
 800ca4a:	7571      	strb	r1, [r6, #21]
 800ca4c:	696b      	ldr	r3, [r5, #20]
 800ca4e:	75b0      	strb	r0, [r6, #22]
 800ca50:	441f      	add	r7, r3
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	4630      	mov	r0, r6
 800ca56:	f002 feb3 	bl	800f7c0 <ucdr_align_to>
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	9901      	ldr	r1, [sp, #4]
 800ca5e:	f002 fee5 	bl	800f82c <ucdr_advance_buffer>
 800ca62:	e7c4      	b.n	800c9ee <_JointState__cdr_deserialize+0x7e>
 800ca64:	460c      	mov	r4, r1
 800ca66:	4620      	mov	r0, r4
 800ca68:	b003      	add	sp, #12
 800ca6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca6e:	429f      	cmp	r7, r3
 800ca70:	d2e3      	bcs.n	800ca3a <_JointState__cdr_deserialize+0xca>
 800ca72:	2301      	movs	r3, #1
 800ca74:	75b0      	strb	r0, [r6, #22]
 800ca76:	7573      	strb	r3, [r6, #21]
 800ca78:	2108      	movs	r1, #8
 800ca7a:	63e8      	str	r0, [r5, #60]	; 0x3c
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f002 fe9f 	bl	800f7c0 <ucdr_align_to>
 800ca82:	9901      	ldr	r1, [sp, #4]
 800ca84:	4630      	mov	r0, r6
 800ca86:	00c9      	lsls	r1, r1, #3
 800ca88:	f002 fed0 	bl	800f82c <ucdr_advance_buffer>
 800ca8c:	e7d5      	b.n	800ca3a <_JointState__cdr_deserialize+0xca>
 800ca8e:	429c      	cmp	r4, r3
 800ca90:	d2c3      	bcs.n	800ca1a <_JointState__cdr_deserialize+0xaa>
 800ca92:	2301      	movs	r3, #1
 800ca94:	75b0      	strb	r0, [r6, #22]
 800ca96:	7573      	strb	r3, [r6, #21]
 800ca98:	2108      	movs	r1, #8
 800ca9a:	6328      	str	r0, [r5, #48]	; 0x30
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f002 fe8f 	bl	800f7c0 <ucdr_align_to>
 800caa2:	9901      	ldr	r1, [sp, #4]
 800caa4:	4630      	mov	r0, r6
 800caa6:	00c9      	lsls	r1, r1, #3
 800caa8:	f002 fec0 	bl	800f82c <ucdr_advance_buffer>
 800caac:	e7b5      	b.n	800ca1a <_JointState__cdr_deserialize+0xaa>
 800caae:	429c      	cmp	r4, r3
 800cab0:	d2a8      	bcs.n	800ca04 <_JointState__cdr_deserialize+0x94>
 800cab2:	2301      	movs	r3, #1
 800cab4:	75b0      	strb	r0, [r6, #22]
 800cab6:	7573      	strb	r3, [r6, #21]
 800cab8:	2108      	movs	r1, #8
 800caba:	6268      	str	r0, [r5, #36]	; 0x24
 800cabc:	4630      	mov	r0, r6
 800cabe:	f002 fe7f 	bl	800f7c0 <ucdr_align_to>
 800cac2:	9901      	ldr	r1, [sp, #4]
 800cac4:	4630      	mov	r0, r6
 800cac6:	00c9      	lsls	r1, r1, #3
 800cac8:	f002 feb0 	bl	800f82c <ucdr_advance_buffer>
 800cacc:	e79a      	b.n	800ca04 <_JointState__cdr_deserialize+0x94>
 800cace:	bf00      	nop

0800cad0 <_JointState__cdr_serialize>:
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d040      	beq.n	800cb56 <_JointState__cdr_serialize+0x86>
 800cad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cad8:	4688      	mov	r8, r1
 800cada:	4607      	mov	r7, r0
 800cadc:	f000 faa4 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cae0:	6843      	ldr	r3, [r0, #4]
 800cae2:	4641      	mov	r1, r8
 800cae4:	4638      	mov	r0, r7
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	4798      	blx	r3
 800caea:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800caee:	4640      	mov	r0, r8
 800caf0:	4649      	mov	r1, r9
 800caf2:	f001 fc21 	bl	800e338 <ucdr_serialize_uint32_t>
 800caf6:	b1e8      	cbz	r0, 800cb34 <_JointState__cdr_serialize+0x64>
 800caf8:	f1b9 0f00 	cmp.w	r9, #0
 800cafc:	d01a      	beq.n	800cb34 <_JointState__cdr_serialize+0x64>
 800cafe:	2400      	movs	r4, #0
 800cb00:	e00c      	b.n	800cb1c <_JointState__cdr_serialize+0x4c>
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7f3 fb9e 	bl	8000244 <strlen>
 800cb08:	1c42      	adds	r2, r0, #1
 800cb0a:	6068      	str	r0, [r5, #4]
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4640      	mov	r0, r8
 800cb10:	f002 feac 	bl	800f86c <ucdr_serialize_sequence_char>
 800cb14:	3401      	adds	r4, #1
 800cb16:	b168      	cbz	r0, 800cb34 <_JointState__cdr_serialize+0x64>
 800cb18:	45a1      	cmp	r9, r4
 800cb1a:	d00b      	beq.n	800cb34 <_JointState__cdr_serialize+0x64>
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800cb22:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800cb26:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	d1e9      	bne.n	800cb02 <_JointState__cdr_serialize+0x32>
 800cb2e:	4632      	mov	r2, r6
 800cb30:	4630      	mov	r0, r6
 800cb32:	e7ea      	b.n	800cb0a <_JointState__cdr_serialize+0x3a>
 800cb34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb38:	4640      	mov	r0, r8
 800cb3a:	f002 ff47 	bl	800f9cc <ucdr_serialize_sequence_double>
 800cb3e:	e9d7 120b 	ldrd	r1, r2, [r7, #44]	; 0x2c
 800cb42:	4640      	mov	r0, r8
 800cb44:	f002 ff42 	bl	800f9cc <ucdr_serialize_sequence_double>
 800cb48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb52:	f002 bf3b 	b.w	800f9cc <ucdr_serialize_sequence_double>
 800cb56:	4770      	bx	lr

0800cb58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cb58:	4800      	ldr	r0, [pc, #0]	; (800cb5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800cb5a:	4770      	bx	lr
 800cb5c:	20000050 	.word	0x20000050

0800cb60 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	460c      	mov	r4, r1
 800cb64:	4606      	mov	r6, r0
 800cb66:	f000 f9dd 	bl	800cf24 <get_serialized_size_std_msgs__msg__Header>
 800cb6a:	1825      	adds	r5, r4, r0
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f106 0014 	add.w	r0, r6, #20
 800cb72:	f000 f8d3 	bl	800cd1c <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 800cb76:	4405      	add	r5, r0
 800cb78:	4628      	mov	r0, r5
 800cb7a:	2108      	movs	r1, #8
 800cb7c:	f002 fe08 	bl	800f790 <ucdr_alignment>
 800cb80:	f100 0608 	add.w	r6, r0, #8
 800cb84:	4435      	add	r5, r6
 800cb86:	4628      	mov	r0, r5
 800cb88:	2108      	movs	r1, #8
 800cb8a:	f002 fe01 	bl	800f790 <ucdr_alignment>
 800cb8e:	f100 0608 	add.w	r6, r0, #8
 800cb92:	442e      	add	r6, r5
 800cb94:	4630      	mov	r0, r6
 800cb96:	2108      	movs	r1, #8
 800cb98:	f002 fdfa 	bl	800f790 <ucdr_alignment>
 800cb9c:	f100 0508 	add.w	r5, r0, #8
 800cba0:	442e      	add	r6, r5
 800cba2:	4630      	mov	r0, r6
 800cba4:	2108      	movs	r1, #8
 800cba6:	f002 fdf3 	bl	800f790 <ucdr_alignment>
 800cbaa:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800cbae:	4435      	add	r5, r6
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	f002 fdec 	bl	800f790 <ucdr_alignment>
 800cbb8:	f1c4 0401 	rsb	r4, r4, #1
 800cbbc:	4420      	add	r0, r4
 800cbbe:	4428      	add	r0, r5
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
 800cbc2:	bf00      	nop

0800cbc4 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 800cbc4:	b108      	cbz	r0, 800cbca <get_serialized_size_sensor_msgs__msg__NavSatFix+0x6>
 800cbc6:	f7ff bfcb 	b.w	800cb60 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800cbca:	4770      	bx	lr

0800cbcc <_NavSatFix__get_serialized_size>:
 800cbcc:	b110      	cbz	r0, 800cbd4 <_NavSatFix__get_serialized_size+0x8>
 800cbce:	2100      	movs	r1, #0
 800cbd0:	f7ff bfc6 	b.w	800cb60 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop

0800cbd8 <_NavSatFix__cdr_deserialize>:
 800cbd8:	b538      	push	{r3, r4, r5, lr}
 800cbda:	460c      	mov	r4, r1
 800cbdc:	b359      	cbz	r1, 800cc36 <_NavSatFix__cdr_deserialize+0x5e>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	f000 fa22 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cbe4:	6843      	ldr	r3, [r0, #4]
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	4628      	mov	r0, r5
 800cbec:	4798      	blx	r3
 800cbee:	f000 f8f9 	bl	800cde4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800cbf2:	6843      	ldr	r3, [r0, #4]
 800cbf4:	f104 0114 	add.w	r1, r4, #20
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	4798      	blx	r3
 800cbfe:	f104 0118 	add.w	r1, r4, #24
 800cc02:	4628      	mov	r0, r5
 800cc04:	f002 fbd6 	bl	800f3b4 <ucdr_deserialize_double>
 800cc08:	f104 0120 	add.w	r1, r4, #32
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f002 fbd1 	bl	800f3b4 <ucdr_deserialize_double>
 800cc12:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800cc16:	4628      	mov	r0, r5
 800cc18:	f002 fbcc 	bl	800f3b4 <ucdr_deserialize_double>
 800cc1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cc20:	4628      	mov	r0, r5
 800cc22:	2209      	movs	r2, #9
 800cc24:	f001 f896 	bl	800dd54 <ucdr_deserialize_array_double>
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800cc2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc32:	f001 b97d 	b.w	800df30 <ucdr_deserialize_uint8_t>
 800cc36:	4608      	mov	r0, r1
 800cc38:	bd38      	pop	{r3, r4, r5, pc}
 800cc3a:	bf00      	nop

0800cc3c <_NavSatFix__cdr_serialize>:
 800cc3c:	b368      	cbz	r0, 800cc9a <_NavSatFix__cdr_serialize+0x5e>
 800cc3e:	b538      	push	{r3, r4, r5, lr}
 800cc40:	460d      	mov	r5, r1
 800cc42:	4604      	mov	r4, r0
 800cc44:	f000 f9f0 	bl	800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cc48:	6843      	ldr	r3, [r0, #4]
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4798      	blx	r3
 800cc52:	f000 f8c7 	bl	800cde4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800cc56:	6843      	ldr	r3, [r0, #4]
 800cc58:	4629      	mov	r1, r5
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f104 0014 	add.w	r0, r4, #20
 800cc60:	4798      	blx	r3
 800cc62:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800cc66:	4628      	mov	r0, r5
 800cc68:	f002 fa02 	bl	800f070 <ucdr_serialize_double>
 800cc6c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800cc70:	4628      	mov	r0, r5
 800cc72:	f002 f9fd 	bl	800f070 <ucdr_serialize_double>
 800cc76:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	f002 f9f8 	bl	800f070 <ucdr_serialize_double>
 800cc80:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cc84:	4628      	mov	r0, r5
 800cc86:	2209      	movs	r2, #9
 800cc88:	f000 ffb8 	bl	800dbfc <ucdr_serialize_array_double>
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800cc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc96:	f001 b935 	b.w	800df04 <ucdr_serialize_uint8_t>
 800cc9a:	4770      	bx	lr

0800cc9c <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	2701      	movs	r7, #1
 800cca0:	7007      	strb	r7, [r0, #0]
 800cca2:	460c      	mov	r4, r1
 800cca4:	4606      	mov	r6, r0
 800cca6:	f000 f9b5 	bl	800d014 <max_serialized_size_std_msgs__msg__Header>
 800ccaa:	1825      	adds	r5, r4, r0
 800ccac:	4629      	mov	r1, r5
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f000 f884 	bl	800cdbc <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 800ccb4:	4405      	add	r5, r0
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	2108      	movs	r1, #8
 800ccba:	f002 fd69 	bl	800f790 <ucdr_alignment>
 800ccbe:	f100 0608 	add.w	r6, r0, #8
 800ccc2:	4435      	add	r5, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	2108      	movs	r1, #8
 800ccc8:	f002 fd62 	bl	800f790 <ucdr_alignment>
 800cccc:	f100 0608 	add.w	r6, r0, #8
 800ccd0:	442e      	add	r6, r5
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	2108      	movs	r1, #8
 800ccd6:	f002 fd5b 	bl	800f790 <ucdr_alignment>
 800ccda:	f100 0508 	add.w	r5, r0, #8
 800ccde:	442e      	add	r6, r5
 800cce0:	4630      	mov	r0, r6
 800cce2:	2108      	movs	r1, #8
 800cce4:	f002 fd54 	bl	800f790 <ucdr_alignment>
 800cce8:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800ccec:	4435      	add	r5, r6
 800ccee:	4639      	mov	r1, r7
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f002 fd4d 	bl	800f790 <ucdr_alignment>
 800ccf6:	1b3c      	subs	r4, r7, r4
 800ccf8:	4420      	add	r0, r4
 800ccfa:	4428      	add	r0, r5
 800ccfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccfe:	bf00      	nop

0800cd00 <_NavSatFix__max_serialized_size>:
 800cd00:	b500      	push	{lr}
 800cd02:	b083      	sub	sp, #12
 800cd04:	2100      	movs	r1, #0
 800cd06:	f10d 0007 	add.w	r0, sp, #7
 800cd0a:	f7ff ffc7 	bl	800cc9c <max_serialized_size_sensor_msgs__msg__NavSatFix>
 800cd0e:	b003      	add	sp, #12
 800cd10:	f85d fb04 	ldr.w	pc, [sp], #4

0800cd14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800cd14:	4800      	ldr	r0, [pc, #0]	; (800cd18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 800cd16:	4770      	bx	lr
 800cd18:	20000078 	.word	0x20000078

0800cd1c <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800cd1c:	b180      	cbz	r0, 800cd40 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 800cd1e:	b538      	push	{r3, r4, r5, lr}
 800cd20:	460d      	mov	r5, r1
 800cd22:	2101      	movs	r1, #1
 800cd24:	4628      	mov	r0, r5
 800cd26:	f002 fd33 	bl	800f790 <ucdr_alignment>
 800cd2a:	1c6c      	adds	r4, r5, #1
 800cd2c:	4404      	add	r4, r0
 800cd2e:	4620      	mov	r0, r4
 800cd30:	2102      	movs	r1, #2
 800cd32:	f002 fd2d 	bl	800f790 <ucdr_alignment>
 800cd36:	f1c5 0502 	rsb	r5, r5, #2
 800cd3a:	4428      	add	r0, r5
 800cd3c:	4420      	add	r0, r4
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop

0800cd44 <_NavSatStatus__cdr_deserialize>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	460c      	mov	r4, r1
 800cd48:	b141      	cbz	r1, 800cd5c <_NavSatStatus__cdr_deserialize+0x18>
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	f001 fe30 	bl	800e9b0 <ucdr_deserialize_int8_t>
 800cd50:	4628      	mov	r0, r5
 800cd52:	1ca1      	adds	r1, r4, #2
 800cd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd58:	f001 ba00 	b.w	800e15c <ucdr_deserialize_uint16_t>
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}

0800cd60 <_NavSatStatus__cdr_serialize>:
 800cd60:	b168      	cbz	r0, 800cd7e <_NavSatStatus__cdr_serialize+0x1e>
 800cd62:	b538      	push	{r3, r4, r5, lr}
 800cd64:	460d      	mov	r5, r1
 800cd66:	4604      	mov	r4, r0
 800cd68:	f990 1000 	ldrsb.w	r1, [r0]
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f001 fe09 	bl	800e984 <ucdr_serialize_int8_t>
 800cd72:	4628      	mov	r0, r5
 800cd74:	8861      	ldrh	r1, [r4, #2]
 800cd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd7a:	f001 b8ef 	b.w	800df5c <ucdr_serialize_uint16_t>
 800cd7e:	4770      	bx	lr

0800cd80 <_NavSatStatus__get_serialized_size>:
 800cd80:	b160      	cbz	r0, 800cd9c <_NavSatStatus__get_serialized_size+0x1c>
 800cd82:	b510      	push	{r4, lr}
 800cd84:	2101      	movs	r1, #1
 800cd86:	2000      	movs	r0, #0
 800cd88:	f002 fd02 	bl	800f790 <ucdr_alignment>
 800cd8c:	1c44      	adds	r4, r0, #1
 800cd8e:	4620      	mov	r0, r4
 800cd90:	2102      	movs	r1, #2
 800cd92:	f002 fcfd 	bl	800f790 <ucdr_alignment>
 800cd96:	3002      	adds	r0, #2
 800cd98:	4420      	add	r0, r4
 800cd9a:	bd10      	pop	{r4, pc}
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop

0800cda0 <_NavSatStatus__max_serialized_size>:
 800cda0:	b510      	push	{r4, lr}
 800cda2:	2101      	movs	r1, #1
 800cda4:	2000      	movs	r0, #0
 800cda6:	f002 fcf3 	bl	800f790 <ucdr_alignment>
 800cdaa:	1c44      	adds	r4, r0, #1
 800cdac:	4620      	mov	r0, r4
 800cdae:	2102      	movs	r1, #2
 800cdb0:	f002 fcee 	bl	800f790 <ucdr_alignment>
 800cdb4:	3002      	adds	r0, #2
 800cdb6:	4420      	add	r0, r4
 800cdb8:	bd10      	pop	{r4, pc}
 800cdba:	bf00      	nop

0800cdbc <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	7019      	strb	r1, [r3, #0]
 800cdc8:	f002 fce2 	bl	800f790 <ucdr_alignment>
 800cdcc:	1c65      	adds	r5, r4, #1
 800cdce:	4405      	add	r5, r0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	2102      	movs	r1, #2
 800cdd4:	f002 fcdc 	bl	800f790 <ucdr_alignment>
 800cdd8:	f1c4 0402 	rsb	r4, r4, #2
 800cddc:	4420      	add	r0, r4
 800cdde:	4428      	add	r0, r5
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop

0800cde4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 800cde4:	4800      	ldr	r0, [pc, #0]	; (800cde8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 800cde6:	4770      	bx	lr
 800cde8:	200000a0 	.word	0x200000a0

0800cdec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800cdec:	f000 b888 	b.w	800cf00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>

0800cdf0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800cdf0:	f000 ba48 	b.w	800d284 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

0800cdf4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800cdf4:	f000 bac8 	b.w	800d388 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>

0800cdf8 <_Float32MultiArray__max_serialized_size>:
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	b500      	push	{lr}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f10d 0007 	add.w	r0, sp, #7
 800ce04:	f88d 3007 	strb.w	r3, [sp, #7]
 800ce08:	f000 f9aa 	bl	800d160 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ce0c:	b003      	add	sp, #12
 800ce0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce12:	bf00      	nop

0800ce14 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	b190      	cbz	r0, 800ce40 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x2c>
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	f000 f944 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ce20:	182e      	adds	r6, r5, r0
 800ce22:	2104      	movs	r1, #4
 800ce24:	4630      	mov	r0, r6
 800ce26:	6967      	ldr	r7, [r4, #20]
 800ce28:	f002 fcb2 	bl	800f790 <ucdr_alignment>
 800ce2c:	1d04      	adds	r4, r0, #4
 800ce2e:	4434      	add	r4, r6
 800ce30:	4620      	mov	r0, r4
 800ce32:	2104      	movs	r1, #4
 800ce34:	f002 fcac 	bl	800f790 <ucdr_alignment>
 800ce38:	ebc5 0587 	rsb	r5, r5, r7, lsl #2
 800ce3c:	4428      	add	r0, r5
 800ce3e:	4420      	add	r0, r4
 800ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce42:	bf00      	nop

0800ce44 <_Float32MultiArray__cdr_deserialize>:
 800ce44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	b083      	sub	sp, #12
 800ce4a:	b1d1      	cbz	r1, 800ce82 <_Float32MultiArray__cdr_deserialize+0x3e>
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	f000 f991 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ce52:	6843      	ldr	r3, [r0, #4]
 800ce54:	4621      	mov	r1, r4
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	4630      	mov	r0, r6
 800ce5a:	4798      	blx	r3
 800ce5c:	69a7      	ldr	r7, [r4, #24]
 800ce5e:	ab01      	add	r3, sp, #4
 800ce60:	463a      	mov	r2, r7
 800ce62:	4630      	mov	r0, r6
 800ce64:	6921      	ldr	r1, [r4, #16]
 800ce66:	f002 fd97 	bl	800f998 <ucdr_deserialize_sequence_float>
 800ce6a:	9b01      	ldr	r3, [sp, #4]
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	b920      	cbnz	r0, 800ce7a <_Float32MultiArray__cdr_deserialize+0x36>
 800ce70:	429f      	cmp	r7, r3
 800ce72:	d30a      	bcc.n	800ce8a <_Float32MultiArray__cdr_deserialize+0x46>
 800ce74:	4628      	mov	r0, r5
 800ce76:	b003      	add	sp, #12
 800ce78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	6163      	str	r3, [r4, #20]
 800ce7e:	b003      	add	sp, #12
 800ce80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce82:	460d      	mov	r5, r1
 800ce84:	4628      	mov	r0, r5
 800ce86:	b003      	add	sp, #12
 800ce88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	75b0      	strb	r0, [r6, #22]
 800ce8e:	7573      	strb	r3, [r6, #21]
 800ce90:	2104      	movs	r1, #4
 800ce92:	6160      	str	r0, [r4, #20]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f002 fc93 	bl	800f7c0 <ucdr_align_to>
 800ce9a:	9901      	ldr	r1, [sp, #4]
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	0089      	lsls	r1, r1, #2
 800cea0:	f002 fcc4 	bl	800f82c <ucdr_advance_buffer>
 800cea4:	4628      	mov	r0, r5
 800cea6:	b003      	add	sp, #12
 800cea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceaa:	bf00      	nop

0800ceac <_Float32MultiArray__cdr_serialize>:
 800ceac:	b180      	cbz	r0, 800ced0 <_Float32MultiArray__cdr_serialize+0x24>
 800ceae:	b538      	push	{r3, r4, r5, lr}
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	f000 f95e 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800ceb8:	6843      	ldr	r3, [r0, #4]
 800ceba:	4629      	mov	r1, r5
 800cebc:	4620      	mov	r0, r4
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	4798      	blx	r3
 800cec2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800cec6:	4628      	mov	r0, r5
 800cec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cecc:	f002 bd52 	b.w	800f974 <ucdr_serialize_sequence_float>
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop

0800ced4 <_Float32MultiArray__get_serialized_size>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4604      	mov	r4, r0
 800ced8:	b180      	cbz	r0, 800cefc <_Float32MultiArray__get_serialized_size+0x28>
 800ceda:	2100      	movs	r1, #0
 800cedc:	f000 f8e4 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800cee0:	2104      	movs	r1, #4
 800cee2:	6965      	ldr	r5, [r4, #20]
 800cee4:	4604      	mov	r4, r0
 800cee6:	f002 fc53 	bl	800f790 <ucdr_alignment>
 800ceea:	4404      	add	r4, r0
 800ceec:	3404      	adds	r4, #4
 800ceee:	4620      	mov	r0, r4
 800cef0:	2104      	movs	r1, #4
 800cef2:	f002 fc4d 	bl	800f790 <ucdr_alignment>
 800cef6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800cefa:	4420      	add	r0, r4
 800cefc:	bd38      	pop	{r3, r4, r5, pc}
 800cefe:	bf00      	nop

0800cf00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800cf00:	4800      	ldr	r0, [pc, #0]	; (800cf04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800cf02:	4770      	bx	lr
 800cf04:	200000c8 	.word	0x200000c8

0800cf08 <_Header__max_serialized_size>:
 800cf08:	2301      	movs	r3, #1
 800cf0a:	b500      	push	{lr}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	2100      	movs	r1, #0
 800cf10:	f10d 0007 	add.w	r0, sp, #7
 800cf14:	f88d 3007 	strb.w	r3, [sp, #7]
 800cf18:	f000 fa8a 	bl	800d430 <max_serialized_size_builtin_interfaces__msg__Time>
 800cf1c:	b003      	add	sp, #12
 800cf1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf22:	bf00      	nop

0800cf24 <get_serialized_size_std_msgs__msg__Header>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	4605      	mov	r5, r0
 800cf28:	b168      	cbz	r0, 800cf46 <get_serialized_size_std_msgs__msg__Header+0x22>
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	f000 fa30 	bl	800d390 <get_serialized_size_builtin_interfaces__msg__Time>
 800cf30:	1826      	adds	r6, r4, r0
 800cf32:	2104      	movs	r1, #4
 800cf34:	4630      	mov	r0, r6
 800cf36:	f002 fc2b 	bl	800f790 <ucdr_alignment>
 800cf3a:	68e9      	ldr	r1, [r5, #12]
 800cf3c:	f1c4 0405 	rsb	r4, r4, #5
 800cf40:	440c      	add	r4, r1
 800cf42:	4404      	add	r4, r0
 800cf44:	19a0      	adds	r0, r4, r6
 800cf46:	bd70      	pop	{r4, r5, r6, pc}

0800cf48 <_Header__cdr_deserialize>:
 800cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	b1e1      	cbz	r1, 800cf8a <_Header__cdr_deserialize+0x42>
 800cf50:	4606      	mov	r6, r0
 800cf52:	f000 fa81 	bl	800d458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cf56:	6843      	ldr	r3, [r0, #4]
 800cf58:	4621      	mov	r1, r4
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4798      	blx	r3
 800cf60:	6927      	ldr	r7, [r4, #16]
 800cf62:	ab01      	add	r3, sp, #4
 800cf64:	463a      	mov	r2, r7
 800cf66:	4630      	mov	r0, r6
 800cf68:	68a1      	ldr	r1, [r4, #8]
 800cf6a:	f002 fc91 	bl	800f890 <ucdr_deserialize_sequence_char>
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	4605      	mov	r5, r0
 800cf72:	b920      	cbnz	r0, 800cf7e <_Header__cdr_deserialize+0x36>
 800cf74:	429f      	cmp	r7, r3
 800cf76:	d30c      	bcc.n	800cf92 <_Header__cdr_deserialize+0x4a>
 800cf78:	4628      	mov	r0, r5
 800cf7a:	b003      	add	sp, #12
 800cf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf7e:	b103      	cbz	r3, 800cf82 <_Header__cdr_deserialize+0x3a>
 800cf80:	3b01      	subs	r3, #1
 800cf82:	4628      	mov	r0, r5
 800cf84:	60e3      	str	r3, [r4, #12]
 800cf86:	b003      	add	sp, #12
 800cf88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	b003      	add	sp, #12
 800cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf92:	2101      	movs	r1, #1
 800cf94:	75b0      	strb	r0, [r6, #22]
 800cf96:	7571      	strb	r1, [r6, #21]
 800cf98:	60e0      	str	r0, [r4, #12]
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f002 fc10 	bl	800f7c0 <ucdr_align_to>
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	9901      	ldr	r1, [sp, #4]
 800cfa4:	f002 fc42 	bl	800f82c <ucdr_advance_buffer>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	b003      	add	sp, #12
 800cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfae:	bf00      	nop

0800cfb0 <_Header__cdr_serialize>:
 800cfb0:	b1f8      	cbz	r0, 800cff2 <_Header__cdr_serialize+0x42>
 800cfb2:	b570      	push	{r4, r5, r6, lr}
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	f000 fa4e 	bl	800d458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cfbc:	6843      	ldr	r3, [r0, #4]
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	4798      	blx	r3
 800cfc6:	68a6      	ldr	r6, [r4, #8]
 800cfc8:	b156      	cbz	r6, 800cfe0 <_Header__cdr_serialize+0x30>
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f7f3 f93a 	bl	8000244 <strlen>
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	60e0      	str	r0, [r4, #12]
 800cfd4:	1c42      	adds	r2, r0, #1
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfdc:	f002 bc46 	b.w	800f86c <ucdr_serialize_sequence_char>
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	60e0      	str	r0, [r4, #12]
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4628      	mov	r0, r5
 800cfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfee:	f002 bc3d 	b.w	800f86c <ucdr_serialize_sequence_char>
 800cff2:	4770      	bx	lr

0800cff4 <_Header__get_serialized_size>:
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	4604      	mov	r4, r0
 800cff8:	b150      	cbz	r0, 800d010 <_Header__get_serialized_size+0x1c>
 800cffa:	2100      	movs	r1, #0
 800cffc:	f000 f9c8 	bl	800d390 <get_serialized_size_builtin_interfaces__msg__Time>
 800d000:	2104      	movs	r1, #4
 800d002:	4605      	mov	r5, r0
 800d004:	f002 fbc4 	bl	800f790 <ucdr_alignment>
 800d008:	68e4      	ldr	r4, [r4, #12]
 800d00a:	3405      	adds	r4, #5
 800d00c:	442c      	add	r4, r5
 800d00e:	4420      	add	r0, r4
 800d010:	bd38      	pop	{r3, r4, r5, pc}
 800d012:	bf00      	nop

0800d014 <max_serialized_size_std_msgs__msg__Header>:
 800d014:	2301      	movs	r3, #1
 800d016:	b510      	push	{r4, lr}
 800d018:	7003      	strb	r3, [r0, #0]
 800d01a:	4604      	mov	r4, r0
 800d01c:	f000 fa08 	bl	800d430 <max_serialized_size_builtin_interfaces__msg__Time>
 800d020:	2300      	movs	r3, #0
 800d022:	7023      	strb	r3, [r4, #0]
 800d024:	bd10      	pop	{r4, pc}
 800d026:	bf00      	nop

0800d028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d028:	4800      	ldr	r0, [pc, #0]	; (800d02c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800d02a:	4770      	bx	lr
 800d02c:	200000f0 	.word	0x200000f0

0800d030 <_MultiArrayLayout__max_serialized_size>:
 800d030:	2104      	movs	r1, #4
 800d032:	b508      	push	{r3, lr}
 800d034:	2000      	movs	r0, #0
 800d036:	f002 fbab 	bl	800f790 <ucdr_alignment>
 800d03a:	3004      	adds	r0, #4
 800d03c:	bd08      	pop	{r3, pc}
 800d03e:	bf00      	nop

0800d040 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800d040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d044:	4607      	mov	r7, r0
 800d046:	4689      	mov	r9, r1
 800d048:	4608      	mov	r0, r1
 800d04a:	2104      	movs	r1, #4
 800d04c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800d050:	f002 fb9e 	bl	800f790 <ucdr_alignment>
 800d054:	f109 0304 	add.w	r3, r9, #4
 800d058:	18c6      	adds	r6, r0, r3
 800d05a:	f1b8 0f00 	cmp.w	r8, #0
 800d05e:	d018      	beq.n	800d092 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800d060:	2500      	movs	r5, #0
 800d062:	f009 f89b 	bl	801619c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	6843      	ldr	r3, [r0, #4]
 800d06a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800d06e:	4631      	mov	r1, r6
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d076:	4798      	blx	r3
 800d078:	4604      	mov	r4, r0
 800d07a:	2c04      	cmp	r4, #4
 800d07c:	4621      	mov	r1, r4
 800d07e:	4630      	mov	r0, r6
 800d080:	bf28      	it	cs
 800d082:	2104      	movcs	r1, #4
 800d084:	f002 fb84 	bl	800f790 <ucdr_alignment>
 800d088:	3501      	adds	r5, #1
 800d08a:	4404      	add	r4, r0
 800d08c:	45a8      	cmp	r8, r5
 800d08e:	4426      	add	r6, r4
 800d090:	d1e7      	bne.n	800d062 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800d092:	2104      	movs	r1, #4
 800d094:	4630      	mov	r0, r6
 800d096:	f002 fb7b 	bl	800f790 <ucdr_alignment>
 800d09a:	f1c9 0904 	rsb	r9, r9, #4
 800d09e:	444e      	add	r6, r9
 800d0a0:	4430      	add	r0, r6
 800d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	bf00      	nop

0800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d0a8:	b108      	cbz	r0, 800d0ae <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800d0aa:	f7ff bfc9 	b.w	800d040 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d0ae:	4770      	bx	lr

0800d0b0 <_MultiArrayLayout__get_serialized_size>:
 800d0b0:	b110      	cbz	r0, 800d0b8 <_MultiArrayLayout__get_serialized_size+0x8>
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f7ff bfc4 	b.w	800d040 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <_MultiArrayLayout__cdr_deserialize>:
 800d0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0be:	460d      	mov	r5, r1
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	b329      	cbz	r1, 800d110 <_MultiArrayLayout__cdr_deserialize+0x54>
 800d0c4:	a901      	add	r1, sp, #4
 800d0c6:	4607      	mov	r7, r0
 800d0c8:	f001 fa66 	bl	800e598 <ucdr_deserialize_uint32_t>
 800d0cc:	9b01      	ldr	r3, [sp, #4]
 800d0ce:	68aa      	ldr	r2, [r5, #8]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d31a      	bcc.n	800d10a <_MultiArrayLayout__cdr_deserialize+0x4e>
 800d0d4:	606b      	str	r3, [r5, #4]
 800d0d6:	b18b      	cbz	r3, 800d0fc <_MultiArrayLayout__cdr_deserialize+0x40>
 800d0d8:	2400      	movs	r4, #0
 800d0da:	4626      	mov	r6, r4
 800d0dc:	e002      	b.n	800d0e4 <_MultiArrayLayout__cdr_deserialize+0x28>
 800d0de:	9b01      	ldr	r3, [sp, #4]
 800d0e0:	429e      	cmp	r6, r3
 800d0e2:	d20b      	bcs.n	800d0fc <_MultiArrayLayout__cdr_deserialize+0x40>
 800d0e4:	f009 f85a 	bl	801619c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d0e8:	6829      	ldr	r1, [r5, #0]
 800d0ea:	6843      	ldr	r3, [r0, #4]
 800d0ec:	4421      	add	r1, r4
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	4798      	blx	r3
 800d0f4:	3601      	adds	r6, #1
 800d0f6:	3414      	adds	r4, #20
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d1f0      	bne.n	800d0de <_MultiArrayLayout__cdr_deserialize+0x22>
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f105 010c 	add.w	r1, r5, #12
 800d102:	f001 fa49 	bl	800e598 <ucdr_deserialize_uint32_t>
 800d106:	b003      	add	sp, #12
 800d108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d10a:	2000      	movs	r0, #0
 800d10c:	b003      	add	sp, #12
 800d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d110:	4608      	mov	r0, r1
 800d112:	b003      	add	sp, #12
 800d114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d116:	bf00      	nop

0800d118 <_MultiArrayLayout__cdr_serialize>:
 800d118:	b308      	cbz	r0, 800d15e <_MultiArrayLayout__cdr_serialize+0x46>
 800d11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11c:	6847      	ldr	r7, [r0, #4]
 800d11e:	460e      	mov	r6, r1
 800d120:	4605      	mov	r5, r0
 800d122:	4608      	mov	r0, r1
 800d124:	4639      	mov	r1, r7
 800d126:	f001 f907 	bl	800e338 <ucdr_serialize_uint32_t>
 800d12a:	b190      	cbz	r0, 800d152 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d12c:	b18f      	cbz	r7, 800d152 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d12e:	2400      	movs	r4, #0
 800d130:	e001      	b.n	800d136 <_MultiArrayLayout__cdr_serialize+0x1e>
 800d132:	42a7      	cmp	r7, r4
 800d134:	d00d      	beq.n	800d152 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d136:	f009 f831 	bl	801619c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d13a:	682a      	ldr	r2, [r5, #0]
 800d13c:	6843      	ldr	r3, [r0, #4]
 800d13e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800d142:	4631      	mov	r1, r6
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d14a:	4798      	blx	r3
 800d14c:	3401      	adds	r4, #1
 800d14e:	2800      	cmp	r0, #0
 800d150:	d1ef      	bne.n	800d132 <_MultiArrayLayout__cdr_serialize+0x1a>
 800d152:	4630      	mov	r0, r6
 800d154:	68e9      	ldr	r1, [r5, #12]
 800d156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d15a:	f001 b8ed 	b.w	800e338 <ucdr_serialize_uint32_t>
 800d15e:	4770      	bx	lr

0800d160 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d160:	b508      	push	{r3, lr}
 800d162:	2200      	movs	r2, #0
 800d164:	4603      	mov	r3, r0
 800d166:	4608      	mov	r0, r1
 800d168:	701a      	strb	r2, [r3, #0]
 800d16a:	2104      	movs	r1, #4
 800d16c:	f002 fb10 	bl	800f790 <ucdr_alignment>
 800d170:	3004      	adds	r0, #4
 800d172:	bd08      	pop	{r3, pc}

0800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800d174:	4800      	ldr	r0, [pc, #0]	; (800d178 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800d176:	4770      	bx	lr
 800d178:	20000118 	.word	0x20000118

0800d17c <_UInt16MultiArray__max_serialized_size>:
 800d17c:	2301      	movs	r3, #1
 800d17e:	b500      	push	{lr}
 800d180:	b083      	sub	sp, #12
 800d182:	2100      	movs	r1, #0
 800d184:	f10d 0007 	add.w	r0, sp, #7
 800d188:	f88d 3007 	strb.w	r3, [sp, #7]
 800d18c:	f7ff ffe8 	bl	800d160 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d190:	b003      	add	sp, #12
 800d192:	f85d fb04 	ldr.w	pc, [sp], #4
 800d196:	bf00      	nop

0800d198 <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	4604      	mov	r4, r0
 800d19c:	b190      	cbz	r0, 800d1c4 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2c>
 800d19e:	460d      	mov	r5, r1
 800d1a0:	f7ff ff82 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d1a4:	182e      	adds	r6, r5, r0
 800d1a6:	2104      	movs	r1, #4
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	6967      	ldr	r7, [r4, #20]
 800d1ac:	f002 faf0 	bl	800f790 <ucdr_alignment>
 800d1b0:	1d04      	adds	r4, r0, #4
 800d1b2:	4434      	add	r4, r6
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	2102      	movs	r1, #2
 800d1b8:	f002 faea 	bl	800f790 <ucdr_alignment>
 800d1bc:	ebc5 0547 	rsb	r5, r5, r7, lsl #1
 800d1c0:	4428      	add	r0, r5
 800d1c2:	4420      	add	r0, r4
 800d1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c6:	bf00      	nop

0800d1c8 <_UInt16MultiArray__cdr_deserialize>:
 800d1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b083      	sub	sp, #12
 800d1ce:	b1d1      	cbz	r1, 800d206 <_UInt16MultiArray__cdr_deserialize+0x3e>
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	f7ff ffcf 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d1d6:	6843      	ldr	r3, [r0, #4]
 800d1d8:	4621      	mov	r1, r4
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	4630      	mov	r0, r6
 800d1de:	4798      	blx	r3
 800d1e0:	69a7      	ldr	r7, [r4, #24]
 800d1e2:	ab01      	add	r3, sp, #4
 800d1e4:	463a      	mov	r2, r7
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	6921      	ldr	r1, [r4, #16]
 800d1ea:	f002 fba9 	bl	800f940 <ucdr_deserialize_sequence_uint16_t>
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	b920      	cbnz	r0, 800d1fe <_UInt16MultiArray__cdr_deserialize+0x36>
 800d1f4:	429f      	cmp	r7, r3
 800d1f6:	d30a      	bcc.n	800d20e <_UInt16MultiArray__cdr_deserialize+0x46>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	b003      	add	sp, #12
 800d1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1fe:	4628      	mov	r0, r5
 800d200:	6163      	str	r3, [r4, #20]
 800d202:	b003      	add	sp, #12
 800d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d206:	460d      	mov	r5, r1
 800d208:	4628      	mov	r0, r5
 800d20a:	b003      	add	sp, #12
 800d20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d20e:	2301      	movs	r3, #1
 800d210:	75b0      	strb	r0, [r6, #22]
 800d212:	7573      	strb	r3, [r6, #21]
 800d214:	2102      	movs	r1, #2
 800d216:	6160      	str	r0, [r4, #20]
 800d218:	4630      	mov	r0, r6
 800d21a:	f002 fad1 	bl	800f7c0 <ucdr_align_to>
 800d21e:	9901      	ldr	r1, [sp, #4]
 800d220:	4630      	mov	r0, r6
 800d222:	0049      	lsls	r1, r1, #1
 800d224:	f002 fb02 	bl	800f82c <ucdr_advance_buffer>
 800d228:	4628      	mov	r0, r5
 800d22a:	b003      	add	sp, #12
 800d22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d22e:	bf00      	nop

0800d230 <_UInt16MultiArray__cdr_serialize>:
 800d230:	b180      	cbz	r0, 800d254 <_UInt16MultiArray__cdr_serialize+0x24>
 800d232:	b538      	push	{r3, r4, r5, lr}
 800d234:	460d      	mov	r5, r1
 800d236:	4604      	mov	r4, r0
 800d238:	f7ff ff9c 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d23c:	6843      	ldr	r3, [r0, #4]
 800d23e:	4629      	mov	r1, r5
 800d240:	4620      	mov	r0, r4
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	4798      	blx	r3
 800d246:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d24a:	4628      	mov	r0, r5
 800d24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d250:	f002 bb64 	b.w	800f91c <ucdr_serialize_sequence_uint16_t>
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop

0800d258 <_UInt16MultiArray__get_serialized_size>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4604      	mov	r4, r0
 800d25c:	b180      	cbz	r0, 800d280 <_UInt16MultiArray__get_serialized_size+0x28>
 800d25e:	2100      	movs	r1, #0
 800d260:	f7ff ff22 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d264:	2104      	movs	r1, #4
 800d266:	6965      	ldr	r5, [r4, #20]
 800d268:	4604      	mov	r4, r0
 800d26a:	f002 fa91 	bl	800f790 <ucdr_alignment>
 800d26e:	4404      	add	r4, r0
 800d270:	3404      	adds	r4, #4
 800d272:	4620      	mov	r0, r4
 800d274:	2102      	movs	r1, #2
 800d276:	f002 fa8b 	bl	800f790 <ucdr_alignment>
 800d27a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800d27e:	4420      	add	r0, r4
 800d280:	bd38      	pop	{r3, r4, r5, pc}
 800d282:	bf00      	nop

0800d284 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800d284:	4800      	ldr	r0, [pc, #0]	; (800d288 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 800d286:	4770      	bx	lr
 800d288:	20000140 	.word	0x20000140

0800d28c <_UInt8MultiArray__max_serialized_size>:
 800d28c:	2301      	movs	r3, #1
 800d28e:	b500      	push	{lr}
 800d290:	b083      	sub	sp, #12
 800d292:	2100      	movs	r1, #0
 800d294:	f10d 0007 	add.w	r0, sp, #7
 800d298:	f88d 3007 	strb.w	r3, [sp, #7]
 800d29c:	f7ff ff60 	bl	800d160 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d2a0:	b003      	add	sp, #12
 800d2a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2a6:	bf00      	nop

0800d2a8 <get_serialized_size_std_msgs__msg__UInt8MultiArray>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	b188      	cbz	r0, 800d2d2 <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x2a>
 800d2ae:	460e      	mov	r6, r1
 800d2b0:	f7ff fefa 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d2b4:	1837      	adds	r7, r6, r0
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	2104      	movs	r1, #4
 800d2ba:	6965      	ldr	r5, [r4, #20]
 800d2bc:	f002 fa68 	bl	800f790 <ucdr_alignment>
 800d2c0:	3004      	adds	r0, #4
 800d2c2:	4407      	add	r7, r0
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	f002 fa62 	bl	800f790 <ucdr_alignment>
 800d2cc:	1bad      	subs	r5, r5, r6
 800d2ce:	4405      	add	r5, r0
 800d2d0:	19e8      	adds	r0, r5, r7
 800d2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2d4 <_UInt8MultiArray__cdr_deserialize>:
 800d2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	b083      	sub	sp, #12
 800d2da:	b1d1      	cbz	r1, 800d312 <_UInt8MultiArray__cdr_deserialize+0x3e>
 800d2dc:	4606      	mov	r6, r0
 800d2de:	f7ff ff49 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d2e2:	6843      	ldr	r3, [r0, #4]
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4798      	blx	r3
 800d2ec:	69a7      	ldr	r7, [r4, #24]
 800d2ee:	ab01      	add	r3, sp, #4
 800d2f0:	463a      	mov	r2, r7
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	6921      	ldr	r1, [r4, #16]
 800d2f6:	f002 faf7 	bl	800f8e8 <ucdr_deserialize_sequence_uint8_t>
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	b920      	cbnz	r0, 800d30a <_UInt8MultiArray__cdr_deserialize+0x36>
 800d300:	429f      	cmp	r7, r3
 800d302:	d30a      	bcc.n	800d31a <_UInt8MultiArray__cdr_deserialize+0x46>
 800d304:	4628      	mov	r0, r5
 800d306:	b003      	add	sp, #12
 800d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30a:	4628      	mov	r0, r5
 800d30c:	6163      	str	r3, [r4, #20]
 800d30e:	b003      	add	sp, #12
 800d310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d312:	460d      	mov	r5, r1
 800d314:	4628      	mov	r0, r5
 800d316:	b003      	add	sp, #12
 800d318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d31a:	2101      	movs	r1, #1
 800d31c:	75b0      	strb	r0, [r6, #22]
 800d31e:	7571      	strb	r1, [r6, #21]
 800d320:	6160      	str	r0, [r4, #20]
 800d322:	4630      	mov	r0, r6
 800d324:	f002 fa4c 	bl	800f7c0 <ucdr_align_to>
 800d328:	4630      	mov	r0, r6
 800d32a:	9901      	ldr	r1, [sp, #4]
 800d32c:	f002 fa7e 	bl	800f82c <ucdr_advance_buffer>
 800d330:	4628      	mov	r0, r5
 800d332:	b003      	add	sp, #12
 800d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d336:	bf00      	nop

0800d338 <_UInt8MultiArray__cdr_serialize>:
 800d338:	b180      	cbz	r0, 800d35c <_UInt8MultiArray__cdr_serialize+0x24>
 800d33a:	b538      	push	{r3, r4, r5, lr}
 800d33c:	460d      	mov	r5, r1
 800d33e:	4604      	mov	r4, r0
 800d340:	f7ff ff18 	bl	800d174 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d344:	6843      	ldr	r3, [r0, #4]
 800d346:	4629      	mov	r1, r5
 800d348:	4620      	mov	r0, r4
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	4798      	blx	r3
 800d34e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d352:	4628      	mov	r0, r5
 800d354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d358:	f002 bab4 	b.w	800f8c4 <ucdr_serialize_sequence_uint8_t>
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop

0800d360 <_UInt8MultiArray__get_serialized_size>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4604      	mov	r4, r0
 800d364:	b178      	cbz	r0, 800d386 <_UInt8MultiArray__get_serialized_size+0x26>
 800d366:	2100      	movs	r1, #0
 800d368:	f7ff fe9e 	bl	800d0a8 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d36c:	2104      	movs	r1, #4
 800d36e:	6965      	ldr	r5, [r4, #20]
 800d370:	4604      	mov	r4, r0
 800d372:	f002 fa0d 	bl	800f790 <ucdr_alignment>
 800d376:	4404      	add	r4, r0
 800d378:	3404      	adds	r4, #4
 800d37a:	4620      	mov	r0, r4
 800d37c:	2101      	movs	r1, #1
 800d37e:	f002 fa07 	bl	800f790 <ucdr_alignment>
 800d382:	4428      	add	r0, r5
 800d384:	4420      	add	r0, r4
 800d386:	bd38      	pop	{r3, r4, r5, pc}

0800d388 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800d388:	4800      	ldr	r0, [pc, #0]	; (800d38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x4>)
 800d38a:	4770      	bx	lr
 800d38c:	20000168 	.word	0x20000168

0800d390 <get_serialized_size_builtin_interfaces__msg__Time>:
 800d390:	b180      	cbz	r0, 800d3b4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800d392:	b538      	push	{r3, r4, r5, lr}
 800d394:	460d      	mov	r5, r1
 800d396:	2104      	movs	r1, #4
 800d398:	4628      	mov	r0, r5
 800d39a:	f002 f9f9 	bl	800f790 <ucdr_alignment>
 800d39e:	1d2c      	adds	r4, r5, #4
 800d3a0:	4404      	add	r4, r0
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	2104      	movs	r1, #4
 800d3a6:	f002 f9f3 	bl	800f790 <ucdr_alignment>
 800d3aa:	f1c5 0504 	rsb	r5, r5, #4
 800d3ae:	4428      	add	r0, r5
 800d3b0:	4420      	add	r0, r4
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop

0800d3b8 <_Time__cdr_deserialize>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	b141      	cbz	r1, 800d3d0 <_Time__cdr_deserialize+0x18>
 800d3be:	4605      	mov	r5, r0
 800d3c0:	f001 fc98 	bl	800ecf4 <ucdr_deserialize_int32_t>
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	1d21      	adds	r1, r4, #4
 800d3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3cc:	f001 b8e4 	b.w	800e598 <ucdr_deserialize_uint32_t>
 800d3d0:	4608      	mov	r0, r1
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}

0800d3d4 <_Time__cdr_serialize>:
 800d3d4:	b160      	cbz	r0, 800d3f0 <_Time__cdr_serialize+0x1c>
 800d3d6:	b538      	push	{r3, r4, r5, lr}
 800d3d8:	460d      	mov	r5, r1
 800d3da:	4604      	mov	r4, r0
 800d3dc:	6801      	ldr	r1, [r0, #0]
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f001 fbf0 	bl	800ebc4 <ucdr_serialize_int32_t>
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	6861      	ldr	r1, [r4, #4]
 800d3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ec:	f000 bfa4 	b.w	800e338 <ucdr_serialize_uint32_t>
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop

0800d3f4 <_Time__get_serialized_size>:
 800d3f4:	b160      	cbz	r0, 800d410 <_Time__get_serialized_size+0x1c>
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	2104      	movs	r1, #4
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	f002 f9c8 	bl	800f790 <ucdr_alignment>
 800d400:	1d04      	adds	r4, r0, #4
 800d402:	4620      	mov	r0, r4
 800d404:	2104      	movs	r1, #4
 800d406:	f002 f9c3 	bl	800f790 <ucdr_alignment>
 800d40a:	3004      	adds	r0, #4
 800d40c:	4420      	add	r0, r4
 800d40e:	bd10      	pop	{r4, pc}
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop

0800d414 <_Time__max_serialized_size>:
 800d414:	b510      	push	{r4, lr}
 800d416:	2104      	movs	r1, #4
 800d418:	2000      	movs	r0, #0
 800d41a:	f002 f9b9 	bl	800f790 <ucdr_alignment>
 800d41e:	1d04      	adds	r4, r0, #4
 800d420:	4620      	mov	r0, r4
 800d422:	2104      	movs	r1, #4
 800d424:	f002 f9b4 	bl	800f790 <ucdr_alignment>
 800d428:	3004      	adds	r0, #4
 800d42a:	4420      	add	r0, r4
 800d42c:	bd10      	pop	{r4, pc}
 800d42e:	bf00      	nop

0800d430 <max_serialized_size_builtin_interfaces__msg__Time>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	2201      	movs	r2, #1
 800d434:	4603      	mov	r3, r0
 800d436:	460c      	mov	r4, r1
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	4608      	mov	r0, r1
 800d43c:	2104      	movs	r1, #4
 800d43e:	f002 f9a7 	bl	800f790 <ucdr_alignment>
 800d442:	1d25      	adds	r5, r4, #4
 800d444:	4405      	add	r5, r0
 800d446:	4628      	mov	r0, r5
 800d448:	2104      	movs	r1, #4
 800d44a:	f002 f9a1 	bl	800f790 <ucdr_alignment>
 800d44e:	f1c4 0404 	rsb	r4, r4, #4
 800d452:	4420      	add	r0, r4
 800d454:	4428      	add	r0, r5
 800d456:	bd38      	pop	{r3, r4, r5, pc}

0800d458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d458:	4800      	ldr	r0, [pc, #0]	; (800d45c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d45a:	4770      	bx	lr
 800d45c:	20000190 	.word	0x20000190

0800d460 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800d460:	b1f0      	cbz	r0, 800d4a0 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800d462:	b570      	push	{r4, r5, r6, lr}
 800d464:	460d      	mov	r5, r1
 800d466:	2108      	movs	r1, #8
 800d468:	4628      	mov	r0, r5
 800d46a:	f002 f991 	bl	800f790 <ucdr_alignment>
 800d46e:	f105 0408 	add.w	r4, r5, #8
 800d472:	1826      	adds	r6, r4, r0
 800d474:	4630      	mov	r0, r6
 800d476:	2108      	movs	r1, #8
 800d478:	f002 f98a 	bl	800f790 <ucdr_alignment>
 800d47c:	f100 0408 	add.w	r4, r0, #8
 800d480:	4434      	add	r4, r6
 800d482:	4620      	mov	r0, r4
 800d484:	2108      	movs	r1, #8
 800d486:	f002 f983 	bl	800f790 <ucdr_alignment>
 800d48a:	3008      	adds	r0, #8
 800d48c:	4404      	add	r4, r0
 800d48e:	4620      	mov	r0, r4
 800d490:	2108      	movs	r1, #8
 800d492:	f002 f97d 	bl	800f790 <ucdr_alignment>
 800d496:	f1c5 0508 	rsb	r5, r5, #8
 800d49a:	4428      	add	r0, r5
 800d49c:	4420      	add	r0, r4
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop

0800d4a4 <_Quaternion__cdr_deserialize>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	b199      	cbz	r1, 800d4d2 <_Quaternion__cdr_deserialize+0x2e>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	f001 ff82 	bl	800f3b4 <ucdr_deserialize_double>
 800d4b0:	f104 0108 	add.w	r1, r4, #8
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f001 ff7d 	bl	800f3b4 <ucdr_deserialize_double>
 800d4ba:	f104 0110 	add.w	r1, r4, #16
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f001 ff78 	bl	800f3b4 <ucdr_deserialize_double>
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f104 0118 	add.w	r1, r4, #24
 800d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ce:	f001 bf71 	b.w	800f3b4 <ucdr_deserialize_double>
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	bd38      	pop	{r3, r4, r5, pc}
 800d4d6:	bf00      	nop

0800d4d8 <_Quaternion__cdr_serialize>:
 800d4d8:	b1c0      	cbz	r0, 800d50c <_Quaternion__cdr_serialize+0x34>
 800d4da:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d4de:	b570      	push	{r4, r5, r6, lr}
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	f001 fdc3 	bl	800f070 <ucdr_serialize_double>
 800d4ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f001 fdbe 	bl	800f070 <ucdr_serialize_double>
 800d4f4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f001 fdb9 	bl	800f070 <ucdr_serialize_double>
 800d4fe:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800d502:	4628      	mov	r0, r5
 800d504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d508:	f001 bdb2 	b.w	800f070 <ucdr_serialize_double>
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop

0800d510 <_Quaternion__get_serialized_size>:
 800d510:	b1d0      	cbz	r0, 800d548 <_Quaternion__get_serialized_size+0x38>
 800d512:	b538      	push	{r3, r4, r5, lr}
 800d514:	2108      	movs	r1, #8
 800d516:	2000      	movs	r0, #0
 800d518:	f002 f93a 	bl	800f790 <ucdr_alignment>
 800d51c:	f100 0508 	add.w	r5, r0, #8
 800d520:	4628      	mov	r0, r5
 800d522:	2108      	movs	r1, #8
 800d524:	f002 f934 	bl	800f790 <ucdr_alignment>
 800d528:	f100 0408 	add.w	r4, r0, #8
 800d52c:	442c      	add	r4, r5
 800d52e:	4620      	mov	r0, r4
 800d530:	2108      	movs	r1, #8
 800d532:	f002 f92d 	bl	800f790 <ucdr_alignment>
 800d536:	3008      	adds	r0, #8
 800d538:	4404      	add	r4, r0
 800d53a:	4620      	mov	r0, r4
 800d53c:	2108      	movs	r1, #8
 800d53e:	f002 f927 	bl	800f790 <ucdr_alignment>
 800d542:	3008      	adds	r0, #8
 800d544:	4420      	add	r0, r4
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop

0800d54c <_Quaternion__max_serialized_size>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	2108      	movs	r1, #8
 800d550:	2000      	movs	r0, #0
 800d552:	f002 f91d 	bl	800f790 <ucdr_alignment>
 800d556:	f100 0508 	add.w	r5, r0, #8
 800d55a:	4628      	mov	r0, r5
 800d55c:	2108      	movs	r1, #8
 800d55e:	f002 f917 	bl	800f790 <ucdr_alignment>
 800d562:	f100 0408 	add.w	r4, r0, #8
 800d566:	4425      	add	r5, r4
 800d568:	4628      	mov	r0, r5
 800d56a:	2108      	movs	r1, #8
 800d56c:	f002 f910 	bl	800f790 <ucdr_alignment>
 800d570:	f100 0408 	add.w	r4, r0, #8
 800d574:	442c      	add	r4, r5
 800d576:	4620      	mov	r0, r4
 800d578:	2108      	movs	r1, #8
 800d57a:	f002 f909 	bl	800f790 <ucdr_alignment>
 800d57e:	3008      	adds	r0, #8
 800d580:	4420      	add	r0, r4
 800d582:	bd38      	pop	{r3, r4, r5, pc}

0800d584 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800d584:	4603      	mov	r3, r0
 800d586:	2201      	movs	r2, #1
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	4608      	mov	r0, r1
 800d58c:	701a      	strb	r2, [r3, #0]
 800d58e:	460c      	mov	r4, r1
 800d590:	2108      	movs	r1, #8
 800d592:	f002 f8fd 	bl	800f790 <ucdr_alignment>
 800d596:	f104 0608 	add.w	r6, r4, #8
 800d59a:	4406      	add	r6, r0
 800d59c:	4630      	mov	r0, r6
 800d59e:	2108      	movs	r1, #8
 800d5a0:	f002 f8f6 	bl	800f790 <ucdr_alignment>
 800d5a4:	f100 0508 	add.w	r5, r0, #8
 800d5a8:	442e      	add	r6, r5
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	2108      	movs	r1, #8
 800d5ae:	f002 f8ef 	bl	800f790 <ucdr_alignment>
 800d5b2:	f100 0508 	add.w	r5, r0, #8
 800d5b6:	4435      	add	r5, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	2108      	movs	r1, #8
 800d5bc:	f002 f8e8 	bl	800f790 <ucdr_alignment>
 800d5c0:	f1c4 0408 	rsb	r4, r4, #8
 800d5c4:	4420      	add	r0, r4
 800d5c6:	4428      	add	r0, r5
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	bf00      	nop

0800d5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800d5cc:	4800      	ldr	r0, [pc, #0]	; (800d5d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800d5ce:	4770      	bx	lr
 800d5d0:	200001b8 	.word	0x200001b8

0800d5d4 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d5d4:	b1b8      	cbz	r0, 800d606 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d5d6:	b538      	push	{r3, r4, r5, lr}
 800d5d8:	460d      	mov	r5, r1
 800d5da:	2108      	movs	r1, #8
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f002 f8d7 	bl	800f790 <ucdr_alignment>
 800d5e2:	f105 0408 	add.w	r4, r5, #8
 800d5e6:	4404      	add	r4, r0
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	2108      	movs	r1, #8
 800d5ec:	f002 f8d0 	bl	800f790 <ucdr_alignment>
 800d5f0:	3008      	adds	r0, #8
 800d5f2:	4404      	add	r4, r0
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	2108      	movs	r1, #8
 800d5f8:	f002 f8ca 	bl	800f790 <ucdr_alignment>
 800d5fc:	f1c5 0508 	rsb	r5, r5, #8
 800d600:	4428      	add	r0, r5
 800d602:	4420      	add	r0, r4
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	4770      	bx	lr

0800d608 <_Vector3__cdr_deserialize>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	460c      	mov	r4, r1
 800d60c:	b171      	cbz	r1, 800d62c <_Vector3__cdr_deserialize+0x24>
 800d60e:	4605      	mov	r5, r0
 800d610:	f001 fed0 	bl	800f3b4 <ucdr_deserialize_double>
 800d614:	f104 0108 	add.w	r1, r4, #8
 800d618:	4628      	mov	r0, r5
 800d61a:	f001 fecb 	bl	800f3b4 <ucdr_deserialize_double>
 800d61e:	4628      	mov	r0, r5
 800d620:	f104 0110 	add.w	r1, r4, #16
 800d624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d628:	f001 bec4 	b.w	800f3b4 <ucdr_deserialize_double>
 800d62c:	4608      	mov	r0, r1
 800d62e:	bd38      	pop	{r3, r4, r5, pc}

0800d630 <_Vector3__cdr_serialize>:
 800d630:	b198      	cbz	r0, 800d65a <_Vector3__cdr_serialize+0x2a>
 800d632:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d636:	b570      	push	{r4, r5, r6, lr}
 800d638:	460d      	mov	r5, r1
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	f001 fd17 	bl	800f070 <ucdr_serialize_double>
 800d642:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800d646:	4628      	mov	r0, r5
 800d648:	f001 fd12 	bl	800f070 <ucdr_serialize_double>
 800d64c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d650:	4628      	mov	r0, r5
 800d652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d656:	f001 bd0b 	b.w	800f070 <ucdr_serialize_double>
 800d65a:	4770      	bx	lr

0800d65c <_Vector3__get_serialized_size>:
 800d65c:	b198      	cbz	r0, 800d686 <_Vector3__get_serialized_size+0x2a>
 800d65e:	b510      	push	{r4, lr}
 800d660:	2108      	movs	r1, #8
 800d662:	2000      	movs	r0, #0
 800d664:	f002 f894 	bl	800f790 <ucdr_alignment>
 800d668:	f100 0408 	add.w	r4, r0, #8
 800d66c:	4620      	mov	r0, r4
 800d66e:	2108      	movs	r1, #8
 800d670:	f002 f88e 	bl	800f790 <ucdr_alignment>
 800d674:	3008      	adds	r0, #8
 800d676:	4404      	add	r4, r0
 800d678:	4620      	mov	r0, r4
 800d67a:	2108      	movs	r1, #8
 800d67c:	f002 f888 	bl	800f790 <ucdr_alignment>
 800d680:	3008      	adds	r0, #8
 800d682:	4420      	add	r0, r4
 800d684:	bd10      	pop	{r4, pc}
 800d686:	4770      	bx	lr

0800d688 <_Vector3__max_serialized_size>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	2108      	movs	r1, #8
 800d68c:	2000      	movs	r0, #0
 800d68e:	f002 f87f 	bl	800f790 <ucdr_alignment>
 800d692:	f100 0508 	add.w	r5, r0, #8
 800d696:	4628      	mov	r0, r5
 800d698:	2108      	movs	r1, #8
 800d69a:	f002 f879 	bl	800f790 <ucdr_alignment>
 800d69e:	f100 0408 	add.w	r4, r0, #8
 800d6a2:	442c      	add	r4, r5
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	2108      	movs	r1, #8
 800d6a8:	f002 f872 	bl	800f790 <ucdr_alignment>
 800d6ac:	3008      	adds	r0, #8
 800d6ae:	4420      	add	r0, r4
 800d6b0:	bd38      	pop	{r3, r4, r5, pc}
 800d6b2:	bf00      	nop

0800d6b4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	460c      	mov	r4, r1
 800d6c0:	2108      	movs	r1, #8
 800d6c2:	f002 f865 	bl	800f790 <ucdr_alignment>
 800d6c6:	f104 0508 	add.w	r5, r4, #8
 800d6ca:	1946      	adds	r6, r0, r5
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	2108      	movs	r1, #8
 800d6d0:	f002 f85e 	bl	800f790 <ucdr_alignment>
 800d6d4:	f100 0508 	add.w	r5, r0, #8
 800d6d8:	4435      	add	r5, r6
 800d6da:	4628      	mov	r0, r5
 800d6dc:	2108      	movs	r1, #8
 800d6de:	f002 f857 	bl	800f790 <ucdr_alignment>
 800d6e2:	f1c4 0408 	rsb	r4, r4, #8
 800d6e6:	4420      	add	r0, r4
 800d6e8:	4428      	add	r0, r5
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}

0800d6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d6ec:	4800      	ldr	r0, [pc, #0]	; (800d6f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d6ee:	4770      	bx	lr
 800d6f0:	200001e0 	.word	0x200001e0

0800d6f4 <ucdr_serialize_endian_array_char>:
 800d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	461e      	mov	r6, r3
 800d6fc:	4690      	mov	r8, r2
 800d6fe:	4604      	mov	r4, r0
 800d700:	f001 fff0 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d704:	b9e0      	cbnz	r0, 800d740 <ucdr_serialize_endian_array_char+0x4c>
 800d706:	4637      	mov	r7, r6
 800d708:	e00a      	b.n	800d720 <ucdr_serialize_endian_array_char+0x2c>
 800d70a:	462a      	mov	r2, r5
 800d70c:	68a0      	ldr	r0, [r4, #8]
 800d70e:	f009 fca1 	bl	8017054 <memcpy>
 800d712:	68a2      	ldr	r2, [r4, #8]
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	442a      	add	r2, r5
 800d718:	442b      	add	r3, r5
 800d71a:	1b7f      	subs	r7, r7, r5
 800d71c:	60a2      	str	r2, [r4, #8]
 800d71e:	6123      	str	r3, [r4, #16]
 800d720:	4639      	mov	r1, r7
 800d722:	2201      	movs	r2, #1
 800d724:	4620      	mov	r0, r4
 800d726:	f002 f865 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d72a:	1bf1      	subs	r1, r6, r7
 800d72c:	4605      	mov	r5, r0
 800d72e:	4441      	add	r1, r8
 800d730:	2800      	cmp	r0, #0
 800d732:	d1ea      	bne.n	800d70a <ucdr_serialize_endian_array_char+0x16>
 800d734:	2301      	movs	r3, #1
 800d736:	7da0      	ldrb	r0, [r4, #22]
 800d738:	7563      	strb	r3, [r4, #21]
 800d73a:	4058      	eors	r0, r3
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d740:	4632      	mov	r2, r6
 800d742:	4641      	mov	r1, r8
 800d744:	68a0      	ldr	r0, [r4, #8]
 800d746:	f009 fc85 	bl	8017054 <memcpy>
 800d74a:	68a2      	ldr	r2, [r4, #8]
 800d74c:	6923      	ldr	r3, [r4, #16]
 800d74e:	4432      	add	r2, r6
 800d750:	4433      	add	r3, r6
 800d752:	60a2      	str	r2, [r4, #8]
 800d754:	6123      	str	r3, [r4, #16]
 800d756:	e7ed      	b.n	800d734 <ucdr_serialize_endian_array_char+0x40>

0800d758 <ucdr_deserialize_endian_array_char>:
 800d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75c:	4619      	mov	r1, r3
 800d75e:	461e      	mov	r6, r3
 800d760:	4690      	mov	r8, r2
 800d762:	4604      	mov	r4, r0
 800d764:	f001 ffbe 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d768:	b9e0      	cbnz	r0, 800d7a4 <ucdr_deserialize_endian_array_char+0x4c>
 800d76a:	4637      	mov	r7, r6
 800d76c:	e00a      	b.n	800d784 <ucdr_deserialize_endian_array_char+0x2c>
 800d76e:	462a      	mov	r2, r5
 800d770:	68a1      	ldr	r1, [r4, #8]
 800d772:	f009 fc6f 	bl	8017054 <memcpy>
 800d776:	68a2      	ldr	r2, [r4, #8]
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	442a      	add	r2, r5
 800d77c:	442b      	add	r3, r5
 800d77e:	1b7f      	subs	r7, r7, r5
 800d780:	60a2      	str	r2, [r4, #8]
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	2201      	movs	r2, #1
 800d786:	4639      	mov	r1, r7
 800d788:	4620      	mov	r0, r4
 800d78a:	f002 f833 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d78e:	4605      	mov	r5, r0
 800d790:	1bf0      	subs	r0, r6, r7
 800d792:	4440      	add	r0, r8
 800d794:	2d00      	cmp	r5, #0
 800d796:	d1ea      	bne.n	800d76e <ucdr_deserialize_endian_array_char+0x16>
 800d798:	2301      	movs	r3, #1
 800d79a:	7da0      	ldrb	r0, [r4, #22]
 800d79c:	7563      	strb	r3, [r4, #21]
 800d79e:	4058      	eors	r0, r3
 800d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	68a1      	ldr	r1, [r4, #8]
 800d7aa:	f009 fc53 	bl	8017054 <memcpy>
 800d7ae:	68a2      	ldr	r2, [r4, #8]
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	4432      	add	r2, r6
 800d7b4:	4433      	add	r3, r6
 800d7b6:	60a2      	str	r2, [r4, #8]
 800d7b8:	6123      	str	r3, [r4, #16]
 800d7ba:	e7ed      	b.n	800d798 <ucdr_deserialize_endian_array_char+0x40>

0800d7bc <ucdr_serialize_array_uint8_t>:
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	4688      	mov	r8, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	4616      	mov	r6, r2
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	f001 ff8c 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d7cc:	b9e0      	cbnz	r0, 800d808 <ucdr_serialize_array_uint8_t+0x4c>
 800d7ce:	4637      	mov	r7, r6
 800d7d0:	e00a      	b.n	800d7e8 <ucdr_serialize_array_uint8_t+0x2c>
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	68a0      	ldr	r0, [r4, #8]
 800d7d6:	f009 fc3d 	bl	8017054 <memcpy>
 800d7da:	68a2      	ldr	r2, [r4, #8]
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	442a      	add	r2, r5
 800d7e0:	442b      	add	r3, r5
 800d7e2:	1b7f      	subs	r7, r7, r5
 800d7e4:	60a2      	str	r2, [r4, #8]
 800d7e6:	6123      	str	r3, [r4, #16]
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f002 f801 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d7f2:	1bf1      	subs	r1, r6, r7
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	4441      	add	r1, r8
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d1ea      	bne.n	800d7d2 <ucdr_serialize_array_uint8_t+0x16>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	7da0      	ldrb	r0, [r4, #22]
 800d800:	7563      	strb	r3, [r4, #21]
 800d802:	4058      	eors	r0, r3
 800d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d808:	4632      	mov	r2, r6
 800d80a:	4641      	mov	r1, r8
 800d80c:	68a0      	ldr	r0, [r4, #8]
 800d80e:	f009 fc21 	bl	8017054 <memcpy>
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	6922      	ldr	r2, [r4, #16]
 800d816:	4433      	add	r3, r6
 800d818:	4432      	add	r2, r6
 800d81a:	60a3      	str	r3, [r4, #8]
 800d81c:	6122      	str	r2, [r4, #16]
 800d81e:	e7ed      	b.n	800d7fc <ucdr_serialize_array_uint8_t+0x40>

0800d820 <ucdr_serialize_endian_array_uint8_t>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	4619      	mov	r1, r3
 800d826:	461e      	mov	r6, r3
 800d828:	4690      	mov	r8, r2
 800d82a:	4604      	mov	r4, r0
 800d82c:	f001 ff5a 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d830:	b9e0      	cbnz	r0, 800d86c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d832:	4637      	mov	r7, r6
 800d834:	e00a      	b.n	800d84c <ucdr_serialize_endian_array_uint8_t+0x2c>
 800d836:	462a      	mov	r2, r5
 800d838:	68a0      	ldr	r0, [r4, #8]
 800d83a:	f009 fc0b 	bl	8017054 <memcpy>
 800d83e:	68a2      	ldr	r2, [r4, #8]
 800d840:	6923      	ldr	r3, [r4, #16]
 800d842:	442a      	add	r2, r5
 800d844:	442b      	add	r3, r5
 800d846:	1b7f      	subs	r7, r7, r5
 800d848:	60a2      	str	r2, [r4, #8]
 800d84a:	6123      	str	r3, [r4, #16]
 800d84c:	4639      	mov	r1, r7
 800d84e:	2201      	movs	r2, #1
 800d850:	4620      	mov	r0, r4
 800d852:	f001 ffcf 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d856:	1bf1      	subs	r1, r6, r7
 800d858:	4605      	mov	r5, r0
 800d85a:	4441      	add	r1, r8
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d1ea      	bne.n	800d836 <ucdr_serialize_endian_array_uint8_t+0x16>
 800d860:	2301      	movs	r3, #1
 800d862:	7da0      	ldrb	r0, [r4, #22]
 800d864:	7563      	strb	r3, [r4, #21]
 800d866:	4058      	eors	r0, r3
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	4632      	mov	r2, r6
 800d86e:	4641      	mov	r1, r8
 800d870:	68a0      	ldr	r0, [r4, #8]
 800d872:	f009 fbef 	bl	8017054 <memcpy>
 800d876:	68a2      	ldr	r2, [r4, #8]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	4432      	add	r2, r6
 800d87c:	4433      	add	r3, r6
 800d87e:	60a2      	str	r2, [r4, #8]
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	e7ed      	b.n	800d860 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d884 <ucdr_deserialize_array_uint8_t>:
 800d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	4688      	mov	r8, r1
 800d88a:	4611      	mov	r1, r2
 800d88c:	4616      	mov	r6, r2
 800d88e:	4604      	mov	r4, r0
 800d890:	f001 ff28 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d894:	b9e0      	cbnz	r0, 800d8d0 <ucdr_deserialize_array_uint8_t+0x4c>
 800d896:	4637      	mov	r7, r6
 800d898:	e00a      	b.n	800d8b0 <ucdr_deserialize_array_uint8_t+0x2c>
 800d89a:	462a      	mov	r2, r5
 800d89c:	68a1      	ldr	r1, [r4, #8]
 800d89e:	f009 fbd9 	bl	8017054 <memcpy>
 800d8a2:	68a2      	ldr	r2, [r4, #8]
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	442a      	add	r2, r5
 800d8a8:	442b      	add	r3, r5
 800d8aa:	1b7f      	subs	r7, r7, r5
 800d8ac:	60a2      	str	r2, [r4, #8]
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	4639      	mov	r1, r7
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f001 ff9d 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	1bf0      	subs	r0, r6, r7
 800d8be:	4440      	add	r0, r8
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	d1ea      	bne.n	800d89a <ucdr_deserialize_array_uint8_t+0x16>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	7da0      	ldrb	r0, [r4, #22]
 800d8c8:	7563      	strb	r3, [r4, #21]
 800d8ca:	4058      	eors	r0, r3
 800d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d0:	4632      	mov	r2, r6
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	68a1      	ldr	r1, [r4, #8]
 800d8d6:	f009 fbbd 	bl	8017054 <memcpy>
 800d8da:	68a3      	ldr	r3, [r4, #8]
 800d8dc:	6922      	ldr	r2, [r4, #16]
 800d8de:	4433      	add	r3, r6
 800d8e0:	4432      	add	r2, r6
 800d8e2:	60a3      	str	r3, [r4, #8]
 800d8e4:	6122      	str	r2, [r4, #16]
 800d8e6:	e7ed      	b.n	800d8c4 <ucdr_deserialize_array_uint8_t+0x40>

0800d8e8 <ucdr_deserialize_endian_array_uint8_t>:
 800d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	461e      	mov	r6, r3
 800d8f0:	4690      	mov	r8, r2
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	f001 fef6 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d8f8:	b9e0      	cbnz	r0, 800d934 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d8fa:	4637      	mov	r7, r6
 800d8fc:	e00a      	b.n	800d914 <ucdr_deserialize_endian_array_uint8_t+0x2c>
 800d8fe:	462a      	mov	r2, r5
 800d900:	68a1      	ldr	r1, [r4, #8]
 800d902:	f009 fba7 	bl	8017054 <memcpy>
 800d906:	68a2      	ldr	r2, [r4, #8]
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	442a      	add	r2, r5
 800d90c:	442b      	add	r3, r5
 800d90e:	1b7f      	subs	r7, r7, r5
 800d910:	60a2      	str	r2, [r4, #8]
 800d912:	6123      	str	r3, [r4, #16]
 800d914:	2201      	movs	r2, #1
 800d916:	4639      	mov	r1, r7
 800d918:	4620      	mov	r0, r4
 800d91a:	f001 ff6b 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d91e:	4605      	mov	r5, r0
 800d920:	1bf0      	subs	r0, r6, r7
 800d922:	4440      	add	r0, r8
 800d924:	2d00      	cmp	r5, #0
 800d926:	d1ea      	bne.n	800d8fe <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d928:	2301      	movs	r3, #1
 800d92a:	7da0      	ldrb	r0, [r4, #22]
 800d92c:	7563      	strb	r3, [r4, #21]
 800d92e:	4058      	eors	r0, r3
 800d930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d934:	4632      	mov	r2, r6
 800d936:	4640      	mov	r0, r8
 800d938:	68a1      	ldr	r1, [r4, #8]
 800d93a:	f009 fb8b 	bl	8017054 <memcpy>
 800d93e:	68a2      	ldr	r2, [r4, #8]
 800d940:	6923      	ldr	r3, [r4, #16]
 800d942:	4432      	add	r2, r6
 800d944:	4433      	add	r3, r6
 800d946:	60a2      	str	r2, [r4, #8]
 800d948:	6123      	str	r3, [r4, #16]
 800d94a:	e7ed      	b.n	800d928 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d94c <ucdr_serialize_endian_array_uint16_t>:
 800d94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d950:	460f      	mov	r7, r1
 800d952:	2102      	movs	r1, #2
 800d954:	4605      	mov	r5, r0
 800d956:	4614      	mov	r4, r2
 800d958:	461e      	mov	r6, r3
 800d95a:	f001 ff21 	bl	800f7a0 <ucdr_buffer_alignment>
 800d95e:	f895 8015 	ldrb.w	r8, [r5, #21]
 800d962:	4601      	mov	r1, r0
 800d964:	4628      	mov	r0, r5
 800d966:	f001 ff61 	bl	800f82c <ucdr_advance_buffer>
 800d96a:	2f01      	cmp	r7, #1
 800d96c:	f885 8015 	strb.w	r8, [r5, #21]
 800d970:	d010      	beq.n	800d994 <ucdr_serialize_endian_array_uint16_t+0x48>
 800d972:	b156      	cbz	r6, 800d98a <ucdr_serialize_endian_array_uint16_t+0x3e>
 800d974:	3c02      	subs	r4, #2
 800d976:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800d97a:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800d97e:	4639      	mov	r1, r7
 800d980:	4628      	mov	r0, r5
 800d982:	f000 fb6b 	bl	800e05c <ucdr_serialize_endian_uint16_t>
 800d986:	42b4      	cmp	r4, r6
 800d988:	d1f7      	bne.n	800d97a <ucdr_serialize_endian_array_uint16_t+0x2e>
 800d98a:	7da8      	ldrb	r0, [r5, #22]
 800d98c:	f080 0001 	eor.w	r0, r0, #1
 800d990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d994:	0076      	lsls	r6, r6, #1
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	f001 fea3 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800d99e:	b9f8      	cbnz	r0, 800d9e0 <ucdr_serialize_endian_array_uint16_t+0x94>
 800d9a0:	46b0      	mov	r8, r6
 800d9a2:	e00b      	b.n	800d9bc <ucdr_serialize_endian_array_uint16_t+0x70>
 800d9a4:	463a      	mov	r2, r7
 800d9a6:	68a8      	ldr	r0, [r5, #8]
 800d9a8:	f009 fb54 	bl	8017054 <memcpy>
 800d9ac:	68aa      	ldr	r2, [r5, #8]
 800d9ae:	692b      	ldr	r3, [r5, #16]
 800d9b0:	443a      	add	r2, r7
 800d9b2:	443b      	add	r3, r7
 800d9b4:	eba8 0807 	sub.w	r8, r8, r7
 800d9b8:	60aa      	str	r2, [r5, #8]
 800d9ba:	612b      	str	r3, [r5, #16]
 800d9bc:	4641      	mov	r1, r8
 800d9be:	2202      	movs	r2, #2
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f001 ff17 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800d9c6:	eba6 0108 	sub.w	r1, r6, r8
 800d9ca:	4607      	mov	r7, r0
 800d9cc:	4421      	add	r1, r4
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d1e8      	bne.n	800d9a4 <ucdr_serialize_endian_array_uint16_t+0x58>
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	7da8      	ldrb	r0, [r5, #22]
 800d9d6:	756b      	strb	r3, [r5, #21]
 800d9d8:	f080 0001 	eor.w	r0, r0, #1
 800d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	68a8      	ldr	r0, [r5, #8]
 800d9e6:	f009 fb35 	bl	8017054 <memcpy>
 800d9ea:	68aa      	ldr	r2, [r5, #8]
 800d9ec:	692b      	ldr	r3, [r5, #16]
 800d9ee:	4432      	add	r2, r6
 800d9f0:	441e      	add	r6, r3
 800d9f2:	60aa      	str	r2, [r5, #8]
 800d9f4:	612e      	str	r6, [r5, #16]
 800d9f6:	e7ec      	b.n	800d9d2 <ucdr_serialize_endian_array_uint16_t+0x86>

0800d9f8 <ucdr_deserialize_endian_array_uint16_t>:
 800d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fc:	460f      	mov	r7, r1
 800d9fe:	2102      	movs	r1, #2
 800da00:	4605      	mov	r5, r0
 800da02:	4614      	mov	r4, r2
 800da04:	461e      	mov	r6, r3
 800da06:	f001 fecb 	bl	800f7a0 <ucdr_buffer_alignment>
 800da0a:	f895 8015 	ldrb.w	r8, [r5, #21]
 800da0e:	4601      	mov	r1, r0
 800da10:	4628      	mov	r0, r5
 800da12:	f001 ff0b 	bl	800f82c <ucdr_advance_buffer>
 800da16:	2f01      	cmp	r7, #1
 800da18:	f885 8015 	strb.w	r8, [r5, #21]
 800da1c:	d00f      	beq.n	800da3e <ucdr_deserialize_endian_array_uint16_t+0x46>
 800da1e:	b14e      	cbz	r6, 800da34 <ucdr_deserialize_endian_array_uint16_t+0x3c>
 800da20:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800da24:	4622      	mov	r2, r4
 800da26:	4639      	mov	r1, r7
 800da28:	4628      	mov	r0, r5
 800da2a:	3402      	adds	r4, #2
 800da2c:	f000 fc0a 	bl	800e244 <ucdr_deserialize_endian_uint16_t>
 800da30:	42a6      	cmp	r6, r4
 800da32:	d1f7      	bne.n	800da24 <ucdr_deserialize_endian_array_uint16_t+0x2c>
 800da34:	7da8      	ldrb	r0, [r5, #22]
 800da36:	f080 0001 	eor.w	r0, r0, #1
 800da3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3e:	0076      	lsls	r6, r6, #1
 800da40:	4631      	mov	r1, r6
 800da42:	4628      	mov	r0, r5
 800da44:	f001 fe4e 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800da48:	b9f8      	cbnz	r0, 800da8a <ucdr_deserialize_endian_array_uint16_t+0x92>
 800da4a:	46b0      	mov	r8, r6
 800da4c:	e00b      	b.n	800da66 <ucdr_deserialize_endian_array_uint16_t+0x6e>
 800da4e:	463a      	mov	r2, r7
 800da50:	68a9      	ldr	r1, [r5, #8]
 800da52:	f009 faff 	bl	8017054 <memcpy>
 800da56:	68aa      	ldr	r2, [r5, #8]
 800da58:	692b      	ldr	r3, [r5, #16]
 800da5a:	443a      	add	r2, r7
 800da5c:	443b      	add	r3, r7
 800da5e:	eba8 0807 	sub.w	r8, r8, r7
 800da62:	60aa      	str	r2, [r5, #8]
 800da64:	612b      	str	r3, [r5, #16]
 800da66:	2202      	movs	r2, #2
 800da68:	4641      	mov	r1, r8
 800da6a:	4628      	mov	r0, r5
 800da6c:	f001 fec2 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800da70:	4607      	mov	r7, r0
 800da72:	eba6 0008 	sub.w	r0, r6, r8
 800da76:	4420      	add	r0, r4
 800da78:	2f00      	cmp	r7, #0
 800da7a:	d1e8      	bne.n	800da4e <ucdr_deserialize_endian_array_uint16_t+0x56>
 800da7c:	2302      	movs	r3, #2
 800da7e:	7da8      	ldrb	r0, [r5, #22]
 800da80:	756b      	strb	r3, [r5, #21]
 800da82:	f080 0001 	eor.w	r0, r0, #1
 800da86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8a:	4632      	mov	r2, r6
 800da8c:	4620      	mov	r0, r4
 800da8e:	68a9      	ldr	r1, [r5, #8]
 800da90:	f009 fae0 	bl	8017054 <memcpy>
 800da94:	68aa      	ldr	r2, [r5, #8]
 800da96:	692b      	ldr	r3, [r5, #16]
 800da98:	4432      	add	r2, r6
 800da9a:	441e      	add	r6, r3
 800da9c:	60aa      	str	r2, [r5, #8]
 800da9e:	612e      	str	r6, [r5, #16]
 800daa0:	e7ec      	b.n	800da7c <ucdr_deserialize_endian_array_uint16_t+0x84>
 800daa2:	bf00      	nop

0800daa4 <ucdr_serialize_endian_array_float>:
 800daa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa8:	460f      	mov	r7, r1
 800daaa:	2104      	movs	r1, #4
 800daac:	4605      	mov	r5, r0
 800daae:	4614      	mov	r4, r2
 800dab0:	461e      	mov	r6, r3
 800dab2:	f001 fe75 	bl	800f7a0 <ucdr_buffer_alignment>
 800dab6:	f895 8015 	ldrb.w	r8, [r5, #21]
 800daba:	4601      	mov	r1, r0
 800dabc:	4628      	mov	r0, r5
 800dabe:	f001 feb5 	bl	800f82c <ucdr_advance_buffer>
 800dac2:	2f01      	cmp	r7, #1
 800dac4:	f885 8015 	strb.w	r8, [r5, #21]
 800dac8:	d010      	beq.n	800daec <ucdr_serialize_endian_array_float+0x48>
 800daca:	b156      	cbz	r6, 800dae2 <ucdr_serialize_endian_array_float+0x3e>
 800dacc:	3c04      	subs	r4, #4
 800dace:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dad2:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800dad6:	4639      	mov	r1, r7
 800dad8:	4628      	mov	r0, r5
 800dada:	f001 f99b 	bl	800ee14 <ucdr_serialize_endian_float>
 800dade:	42b4      	cmp	r4, r6
 800dae0:	d1f7      	bne.n	800dad2 <ucdr_serialize_endian_array_float+0x2e>
 800dae2:	7da8      	ldrb	r0, [r5, #22]
 800dae4:	f080 0001 	eor.w	r0, r0, #1
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	00b6      	lsls	r6, r6, #2
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	f001 fdf7 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800daf6:	b9f8      	cbnz	r0, 800db38 <ucdr_serialize_endian_array_float+0x94>
 800daf8:	46b0      	mov	r8, r6
 800dafa:	e00b      	b.n	800db14 <ucdr_serialize_endian_array_float+0x70>
 800dafc:	463a      	mov	r2, r7
 800dafe:	68a8      	ldr	r0, [r5, #8]
 800db00:	f009 faa8 	bl	8017054 <memcpy>
 800db04:	68aa      	ldr	r2, [r5, #8]
 800db06:	692b      	ldr	r3, [r5, #16]
 800db08:	443a      	add	r2, r7
 800db0a:	443b      	add	r3, r7
 800db0c:	eba8 0807 	sub.w	r8, r8, r7
 800db10:	60aa      	str	r2, [r5, #8]
 800db12:	612b      	str	r3, [r5, #16]
 800db14:	4641      	mov	r1, r8
 800db16:	2204      	movs	r2, #4
 800db18:	4628      	mov	r0, r5
 800db1a:	f001 fe6b 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800db1e:	eba6 0108 	sub.w	r1, r6, r8
 800db22:	4607      	mov	r7, r0
 800db24:	4421      	add	r1, r4
 800db26:	2800      	cmp	r0, #0
 800db28:	d1e8      	bne.n	800dafc <ucdr_serialize_endian_array_float+0x58>
 800db2a:	2304      	movs	r3, #4
 800db2c:	7da8      	ldrb	r0, [r5, #22]
 800db2e:	756b      	strb	r3, [r5, #21]
 800db30:	f080 0001 	eor.w	r0, r0, #1
 800db34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db38:	4632      	mov	r2, r6
 800db3a:	4621      	mov	r1, r4
 800db3c:	68a8      	ldr	r0, [r5, #8]
 800db3e:	f009 fa89 	bl	8017054 <memcpy>
 800db42:	68aa      	ldr	r2, [r5, #8]
 800db44:	692b      	ldr	r3, [r5, #16]
 800db46:	4432      	add	r2, r6
 800db48:	441e      	add	r6, r3
 800db4a:	60aa      	str	r2, [r5, #8]
 800db4c:	612e      	str	r6, [r5, #16]
 800db4e:	e7ec      	b.n	800db2a <ucdr_serialize_endian_array_float+0x86>

0800db50 <ucdr_deserialize_endian_array_float>:
 800db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db54:	460f      	mov	r7, r1
 800db56:	2104      	movs	r1, #4
 800db58:	4605      	mov	r5, r0
 800db5a:	4614      	mov	r4, r2
 800db5c:	461e      	mov	r6, r3
 800db5e:	f001 fe1f 	bl	800f7a0 <ucdr_buffer_alignment>
 800db62:	f895 8015 	ldrb.w	r8, [r5, #21]
 800db66:	4601      	mov	r1, r0
 800db68:	4628      	mov	r0, r5
 800db6a:	f001 fe5f 	bl	800f82c <ucdr_advance_buffer>
 800db6e:	2f01      	cmp	r7, #1
 800db70:	f885 8015 	strb.w	r8, [r5, #21]
 800db74:	d00f      	beq.n	800db96 <ucdr_deserialize_endian_array_float+0x46>
 800db76:	b14e      	cbz	r6, 800db8c <ucdr_deserialize_endian_array_float+0x3c>
 800db78:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800db7c:	4622      	mov	r2, r4
 800db7e:	4639      	mov	r1, r7
 800db80:	4628      	mov	r0, r5
 800db82:	3404      	adds	r4, #4
 800db84:	f001 f9de 	bl	800ef44 <ucdr_deserialize_endian_float>
 800db88:	42a6      	cmp	r6, r4
 800db8a:	d1f7      	bne.n	800db7c <ucdr_deserialize_endian_array_float+0x2c>
 800db8c:	7da8      	ldrb	r0, [r5, #22]
 800db8e:	f080 0001 	eor.w	r0, r0, #1
 800db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db96:	00b6      	lsls	r6, r6, #2
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	f001 fda2 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800dba0:	b9f8      	cbnz	r0, 800dbe2 <ucdr_deserialize_endian_array_float+0x92>
 800dba2:	46b0      	mov	r8, r6
 800dba4:	e00b      	b.n	800dbbe <ucdr_deserialize_endian_array_float+0x6e>
 800dba6:	463a      	mov	r2, r7
 800dba8:	68a9      	ldr	r1, [r5, #8]
 800dbaa:	f009 fa53 	bl	8017054 <memcpy>
 800dbae:	68aa      	ldr	r2, [r5, #8]
 800dbb0:	692b      	ldr	r3, [r5, #16]
 800dbb2:	443a      	add	r2, r7
 800dbb4:	443b      	add	r3, r7
 800dbb6:	eba8 0807 	sub.w	r8, r8, r7
 800dbba:	60aa      	str	r2, [r5, #8]
 800dbbc:	612b      	str	r3, [r5, #16]
 800dbbe:	2204      	movs	r2, #4
 800dbc0:	4641      	mov	r1, r8
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f001 fe16 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800dbc8:	4607      	mov	r7, r0
 800dbca:	eba6 0008 	sub.w	r0, r6, r8
 800dbce:	4420      	add	r0, r4
 800dbd0:	2f00      	cmp	r7, #0
 800dbd2:	d1e8      	bne.n	800dba6 <ucdr_deserialize_endian_array_float+0x56>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	7da8      	ldrb	r0, [r5, #22]
 800dbd8:	756b      	strb	r3, [r5, #21]
 800dbda:	f080 0001 	eor.w	r0, r0, #1
 800dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe2:	4632      	mov	r2, r6
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	68a9      	ldr	r1, [r5, #8]
 800dbe8:	f009 fa34 	bl	8017054 <memcpy>
 800dbec:	68aa      	ldr	r2, [r5, #8]
 800dbee:	692b      	ldr	r3, [r5, #16]
 800dbf0:	4432      	add	r2, r6
 800dbf2:	441e      	add	r6, r3
 800dbf4:	60aa      	str	r2, [r5, #8]
 800dbf6:	612e      	str	r6, [r5, #16]
 800dbf8:	e7ec      	b.n	800dbd4 <ucdr_deserialize_endian_array_float+0x84>
 800dbfa:	bf00      	nop

0800dbfc <ucdr_serialize_array_double>:
 800dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc00:	460d      	mov	r5, r1
 800dc02:	2108      	movs	r1, #8
 800dc04:	4604      	mov	r4, r0
 800dc06:	4616      	mov	r6, r2
 800dc08:	f001 fdca 	bl	800f7a0 <ucdr_buffer_alignment>
 800dc0c:	4601      	mov	r1, r0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	7d67      	ldrb	r7, [r4, #21]
 800dc12:	f001 fe0b 	bl	800f82c <ucdr_advance_buffer>
 800dc16:	7d21      	ldrb	r1, [r4, #20]
 800dc18:	7567      	strb	r7, [r4, #21]
 800dc1a:	2901      	cmp	r1, #1
 800dc1c:	d011      	beq.n	800dc42 <ucdr_serialize_array_double+0x46>
 800dc1e:	b15e      	cbz	r6, 800dc38 <ucdr_serialize_array_double+0x3c>
 800dc20:	3d08      	subs	r5, #8
 800dc22:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800dc26:	e000      	b.n	800dc2a <ucdr_serialize_array_double+0x2e>
 800dc28:	7d21      	ldrb	r1, [r4, #20]
 800dc2a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f001 faee 	bl	800f210 <ucdr_serialize_endian_double>
 800dc34:	42b5      	cmp	r5, r6
 800dc36:	d1f7      	bne.n	800dc28 <ucdr_serialize_array_double+0x2c>
 800dc38:	7da0      	ldrb	r0, [r4, #22]
 800dc3a:	f080 0001 	eor.w	r0, r0, #1
 800dc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc42:	00f6      	lsls	r6, r6, #3
 800dc44:	4631      	mov	r1, r6
 800dc46:	4620      	mov	r0, r4
 800dc48:	f001 fd4c 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800dc4c:	b9f8      	cbnz	r0, 800dc8e <ucdr_serialize_array_double+0x92>
 800dc4e:	46b0      	mov	r8, r6
 800dc50:	e00b      	b.n	800dc6a <ucdr_serialize_array_double+0x6e>
 800dc52:	463a      	mov	r2, r7
 800dc54:	68a0      	ldr	r0, [r4, #8]
 800dc56:	f009 f9fd 	bl	8017054 <memcpy>
 800dc5a:	68a2      	ldr	r2, [r4, #8]
 800dc5c:	6923      	ldr	r3, [r4, #16]
 800dc5e:	443a      	add	r2, r7
 800dc60:	443b      	add	r3, r7
 800dc62:	eba8 0807 	sub.w	r8, r8, r7
 800dc66:	60a2      	str	r2, [r4, #8]
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	2208      	movs	r2, #8
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f001 fdc0 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800dc74:	eba6 0108 	sub.w	r1, r6, r8
 800dc78:	4607      	mov	r7, r0
 800dc7a:	4429      	add	r1, r5
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	d1e8      	bne.n	800dc52 <ucdr_serialize_array_double+0x56>
 800dc80:	2308      	movs	r3, #8
 800dc82:	7da0      	ldrb	r0, [r4, #22]
 800dc84:	7563      	strb	r3, [r4, #21]
 800dc86:	f080 0001 	eor.w	r0, r0, #1
 800dc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc8e:	4632      	mov	r2, r6
 800dc90:	4629      	mov	r1, r5
 800dc92:	68a0      	ldr	r0, [r4, #8]
 800dc94:	f009 f9de 	bl	8017054 <memcpy>
 800dc98:	68a2      	ldr	r2, [r4, #8]
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	4432      	add	r2, r6
 800dc9e:	441e      	add	r6, r3
 800dca0:	60a2      	str	r2, [r4, #8]
 800dca2:	6126      	str	r6, [r4, #16]
 800dca4:	e7ec      	b.n	800dc80 <ucdr_serialize_array_double+0x84>
 800dca6:	bf00      	nop

0800dca8 <ucdr_serialize_endian_array_double>:
 800dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	460f      	mov	r7, r1
 800dcae:	2108      	movs	r1, #8
 800dcb0:	4605      	mov	r5, r0
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	461e      	mov	r6, r3
 800dcb6:	f001 fd73 	bl	800f7a0 <ucdr_buffer_alignment>
 800dcba:	f895 8015 	ldrb.w	r8, [r5, #21]
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f001 fdb3 	bl	800f82c <ucdr_advance_buffer>
 800dcc6:	2f01      	cmp	r7, #1
 800dcc8:	f885 8015 	strb.w	r8, [r5, #21]
 800dccc:	d010      	beq.n	800dcf0 <ucdr_serialize_endian_array_double+0x48>
 800dcce:	b156      	cbz	r6, 800dce6 <ucdr_serialize_endian_array_double+0x3e>
 800dcd0:	3c08      	subs	r4, #8
 800dcd2:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800dcd6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800dcda:	4639      	mov	r1, r7
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f001 fa97 	bl	800f210 <ucdr_serialize_endian_double>
 800dce2:	42b4      	cmp	r4, r6
 800dce4:	d1f7      	bne.n	800dcd6 <ucdr_serialize_endian_array_double+0x2e>
 800dce6:	7da8      	ldrb	r0, [r5, #22]
 800dce8:	f080 0001 	eor.w	r0, r0, #1
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	00f6      	lsls	r6, r6, #3
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f001 fcf5 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800dcfa:	b9f8      	cbnz	r0, 800dd3c <ucdr_serialize_endian_array_double+0x94>
 800dcfc:	46b0      	mov	r8, r6
 800dcfe:	e00b      	b.n	800dd18 <ucdr_serialize_endian_array_double+0x70>
 800dd00:	463a      	mov	r2, r7
 800dd02:	68a8      	ldr	r0, [r5, #8]
 800dd04:	f009 f9a6 	bl	8017054 <memcpy>
 800dd08:	68aa      	ldr	r2, [r5, #8]
 800dd0a:	692b      	ldr	r3, [r5, #16]
 800dd0c:	443a      	add	r2, r7
 800dd0e:	443b      	add	r3, r7
 800dd10:	eba8 0807 	sub.w	r8, r8, r7
 800dd14:	60aa      	str	r2, [r5, #8]
 800dd16:	612b      	str	r3, [r5, #16]
 800dd18:	4641      	mov	r1, r8
 800dd1a:	2208      	movs	r2, #8
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	f001 fd69 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800dd22:	eba6 0108 	sub.w	r1, r6, r8
 800dd26:	4607      	mov	r7, r0
 800dd28:	4421      	add	r1, r4
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d1e8      	bne.n	800dd00 <ucdr_serialize_endian_array_double+0x58>
 800dd2e:	2308      	movs	r3, #8
 800dd30:	7da8      	ldrb	r0, [r5, #22]
 800dd32:	756b      	strb	r3, [r5, #21]
 800dd34:	f080 0001 	eor.w	r0, r0, #1
 800dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	4621      	mov	r1, r4
 800dd40:	68a8      	ldr	r0, [r5, #8]
 800dd42:	f009 f987 	bl	8017054 <memcpy>
 800dd46:	68aa      	ldr	r2, [r5, #8]
 800dd48:	692b      	ldr	r3, [r5, #16]
 800dd4a:	4432      	add	r2, r6
 800dd4c:	441e      	add	r6, r3
 800dd4e:	60aa      	str	r2, [r5, #8]
 800dd50:	612e      	str	r6, [r5, #16]
 800dd52:	e7ec      	b.n	800dd2e <ucdr_serialize_endian_array_double+0x86>

0800dd54 <ucdr_deserialize_array_double>:
 800dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd58:	460d      	mov	r5, r1
 800dd5a:	2108      	movs	r1, #8
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	4616      	mov	r6, r2
 800dd60:	f001 fd1e 	bl	800f7a0 <ucdr_buffer_alignment>
 800dd64:	4601      	mov	r1, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	7d67      	ldrb	r7, [r4, #21]
 800dd6a:	f001 fd5f 	bl	800f82c <ucdr_advance_buffer>
 800dd6e:	7d21      	ldrb	r1, [r4, #20]
 800dd70:	7567      	strb	r7, [r4, #21]
 800dd72:	2901      	cmp	r1, #1
 800dd74:	d010      	beq.n	800dd98 <ucdr_deserialize_array_double+0x44>
 800dd76:	b156      	cbz	r6, 800dd8e <ucdr_deserialize_array_double+0x3a>
 800dd78:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800dd7c:	e000      	b.n	800dd80 <ucdr_deserialize_array_double+0x2c>
 800dd7e:	7d21      	ldrb	r1, [r4, #20]
 800dd80:	462a      	mov	r2, r5
 800dd82:	4620      	mov	r0, r4
 800dd84:	3508      	adds	r5, #8
 800dd86:	f001 fbdb 	bl	800f540 <ucdr_deserialize_endian_double>
 800dd8a:	42ae      	cmp	r6, r5
 800dd8c:	d1f7      	bne.n	800dd7e <ucdr_deserialize_array_double+0x2a>
 800dd8e:	7da0      	ldrb	r0, [r4, #22]
 800dd90:	f080 0001 	eor.w	r0, r0, #1
 800dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd98:	00f6      	lsls	r6, r6, #3
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f001 fca1 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800dda2:	b9f8      	cbnz	r0, 800dde4 <ucdr_deserialize_array_double+0x90>
 800dda4:	46b0      	mov	r8, r6
 800dda6:	e00b      	b.n	800ddc0 <ucdr_deserialize_array_double+0x6c>
 800dda8:	463a      	mov	r2, r7
 800ddaa:	68a1      	ldr	r1, [r4, #8]
 800ddac:	f009 f952 	bl	8017054 <memcpy>
 800ddb0:	68a2      	ldr	r2, [r4, #8]
 800ddb2:	6923      	ldr	r3, [r4, #16]
 800ddb4:	443a      	add	r2, r7
 800ddb6:	443b      	add	r3, r7
 800ddb8:	eba8 0807 	sub.w	r8, r8, r7
 800ddbc:	60a2      	str	r2, [r4, #8]
 800ddbe:	6123      	str	r3, [r4, #16]
 800ddc0:	2208      	movs	r2, #8
 800ddc2:	4641      	mov	r1, r8
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f001 fd15 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800ddca:	4607      	mov	r7, r0
 800ddcc:	eba6 0008 	sub.w	r0, r6, r8
 800ddd0:	4428      	add	r0, r5
 800ddd2:	2f00      	cmp	r7, #0
 800ddd4:	d1e8      	bne.n	800dda8 <ucdr_deserialize_array_double+0x54>
 800ddd6:	2308      	movs	r3, #8
 800ddd8:	7da0      	ldrb	r0, [r4, #22]
 800ddda:	7563      	strb	r3, [r4, #21]
 800dddc:	f080 0001 	eor.w	r0, r0, #1
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	4632      	mov	r2, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	68a1      	ldr	r1, [r4, #8]
 800ddea:	f009 f933 	bl	8017054 <memcpy>
 800ddee:	68a2      	ldr	r2, [r4, #8]
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	4432      	add	r2, r6
 800ddf4:	441e      	add	r6, r3
 800ddf6:	60a2      	str	r2, [r4, #8]
 800ddf8:	6126      	str	r6, [r4, #16]
 800ddfa:	e7ec      	b.n	800ddd6 <ucdr_deserialize_array_double+0x82>

0800ddfc <ucdr_deserialize_endian_array_double>:
 800ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de00:	460f      	mov	r7, r1
 800de02:	2108      	movs	r1, #8
 800de04:	4605      	mov	r5, r0
 800de06:	4614      	mov	r4, r2
 800de08:	461e      	mov	r6, r3
 800de0a:	f001 fcc9 	bl	800f7a0 <ucdr_buffer_alignment>
 800de0e:	f895 8015 	ldrb.w	r8, [r5, #21]
 800de12:	4601      	mov	r1, r0
 800de14:	4628      	mov	r0, r5
 800de16:	f001 fd09 	bl	800f82c <ucdr_advance_buffer>
 800de1a:	2f01      	cmp	r7, #1
 800de1c:	f885 8015 	strb.w	r8, [r5, #21]
 800de20:	d00f      	beq.n	800de42 <ucdr_deserialize_endian_array_double+0x46>
 800de22:	b14e      	cbz	r6, 800de38 <ucdr_deserialize_endian_array_double+0x3c>
 800de24:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800de28:	4622      	mov	r2, r4
 800de2a:	4639      	mov	r1, r7
 800de2c:	4628      	mov	r0, r5
 800de2e:	3408      	adds	r4, #8
 800de30:	f001 fb86 	bl	800f540 <ucdr_deserialize_endian_double>
 800de34:	42a6      	cmp	r6, r4
 800de36:	d1f7      	bne.n	800de28 <ucdr_deserialize_endian_array_double+0x2c>
 800de38:	7da8      	ldrb	r0, [r5, #22]
 800de3a:	f080 0001 	eor.w	r0, r0, #1
 800de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de42:	00f6      	lsls	r6, r6, #3
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	f001 fc4c 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800de4c:	b9f8      	cbnz	r0, 800de8e <ucdr_deserialize_endian_array_double+0x92>
 800de4e:	46b0      	mov	r8, r6
 800de50:	e00b      	b.n	800de6a <ucdr_deserialize_endian_array_double+0x6e>
 800de52:	463a      	mov	r2, r7
 800de54:	68a9      	ldr	r1, [r5, #8]
 800de56:	f009 f8fd 	bl	8017054 <memcpy>
 800de5a:	68aa      	ldr	r2, [r5, #8]
 800de5c:	692b      	ldr	r3, [r5, #16]
 800de5e:	443a      	add	r2, r7
 800de60:	443b      	add	r3, r7
 800de62:	eba8 0807 	sub.w	r8, r8, r7
 800de66:	60aa      	str	r2, [r5, #8]
 800de68:	612b      	str	r3, [r5, #16]
 800de6a:	2208      	movs	r2, #8
 800de6c:	4641      	mov	r1, r8
 800de6e:	4628      	mov	r0, r5
 800de70:	f001 fcc0 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800de74:	4607      	mov	r7, r0
 800de76:	eba6 0008 	sub.w	r0, r6, r8
 800de7a:	4420      	add	r0, r4
 800de7c:	2f00      	cmp	r7, #0
 800de7e:	d1e8      	bne.n	800de52 <ucdr_deserialize_endian_array_double+0x56>
 800de80:	2308      	movs	r3, #8
 800de82:	7da8      	ldrb	r0, [r5, #22]
 800de84:	756b      	strb	r3, [r5, #21]
 800de86:	f080 0001 	eor.w	r0, r0, #1
 800de8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de8e:	4632      	mov	r2, r6
 800de90:	4620      	mov	r0, r4
 800de92:	68a9      	ldr	r1, [r5, #8]
 800de94:	f009 f8de 	bl	8017054 <memcpy>
 800de98:	68aa      	ldr	r2, [r5, #8]
 800de9a:	692b      	ldr	r3, [r5, #16]
 800de9c:	4432      	add	r2, r6
 800de9e:	441e      	add	r6, r3
 800dea0:	60aa      	str	r2, [r5, #8]
 800dea2:	612e      	str	r6, [r5, #16]
 800dea4:	e7ec      	b.n	800de80 <ucdr_deserialize_endian_array_double+0x84>
 800dea6:	bf00      	nop

0800dea8 <ucdr_serialize_bool>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	460d      	mov	r5, r1
 800deac:	2101      	movs	r1, #1
 800deae:	4604      	mov	r4, r0
 800deb0:	f001 fc24 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800deb4:	b148      	cbz	r0, 800deca <ucdr_serialize_bool+0x22>
 800deb6:	2101      	movs	r1, #1
 800deb8:	68a3      	ldr	r3, [r4, #8]
 800deba:	701d      	strb	r5, [r3, #0]
 800debc:	68a2      	ldr	r2, [r4, #8]
 800debe:	6923      	ldr	r3, [r4, #16]
 800dec0:	440a      	add	r2, r1
 800dec2:	440b      	add	r3, r1
 800dec4:	60a2      	str	r2, [r4, #8]
 800dec6:	6123      	str	r3, [r4, #16]
 800dec8:	7561      	strb	r1, [r4, #21]
 800deca:	7da0      	ldrb	r0, [r4, #22]
 800decc:	f080 0001 	eor.w	r0, r0, #1
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop

0800ded4 <ucdr_deserialize_bool>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	460d      	mov	r5, r1
 800ded8:	2101      	movs	r1, #1
 800deda:	4604      	mov	r4, r0
 800dedc:	f001 fc0e 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800dee0:	b160      	cbz	r0, 800defc <ucdr_deserialize_bool+0x28>
 800dee2:	68a2      	ldr	r2, [r4, #8]
 800dee4:	2001      	movs	r0, #1
 800dee6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800deea:	6923      	ldr	r3, [r4, #16]
 800deec:	3900      	subs	r1, #0
 800deee:	bf18      	it	ne
 800def0:	2101      	movne	r1, #1
 800def2:	4403      	add	r3, r0
 800def4:	7029      	strb	r1, [r5, #0]
 800def6:	60a2      	str	r2, [r4, #8]
 800def8:	6123      	str	r3, [r4, #16]
 800defa:	7560      	strb	r0, [r4, #21]
 800defc:	7da0      	ldrb	r0, [r4, #22]
 800defe:	f080 0001 	eor.w	r0, r0, #1
 800df02:	bd38      	pop	{r3, r4, r5, pc}

0800df04 <ucdr_serialize_uint8_t>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	460d      	mov	r5, r1
 800df08:	2101      	movs	r1, #1
 800df0a:	4604      	mov	r4, r0
 800df0c:	f001 fbf6 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800df10:	b148      	cbz	r0, 800df26 <ucdr_serialize_uint8_t+0x22>
 800df12:	2101      	movs	r1, #1
 800df14:	68a3      	ldr	r3, [r4, #8]
 800df16:	701d      	strb	r5, [r3, #0]
 800df18:	68a2      	ldr	r2, [r4, #8]
 800df1a:	6923      	ldr	r3, [r4, #16]
 800df1c:	440a      	add	r2, r1
 800df1e:	440b      	add	r3, r1
 800df20:	60a2      	str	r2, [r4, #8]
 800df22:	6123      	str	r3, [r4, #16]
 800df24:	7561      	strb	r1, [r4, #21]
 800df26:	7da0      	ldrb	r0, [r4, #22]
 800df28:	f080 0001 	eor.w	r0, r0, #1
 800df2c:	bd38      	pop	{r3, r4, r5, pc}
 800df2e:	bf00      	nop

0800df30 <ucdr_deserialize_uint8_t>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	460d      	mov	r5, r1
 800df34:	2101      	movs	r1, #1
 800df36:	4604      	mov	r4, r0
 800df38:	f001 fbe0 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800df3c:	b150      	cbz	r0, 800df54 <ucdr_deserialize_uint8_t+0x24>
 800df3e:	2101      	movs	r1, #1
 800df40:	68a3      	ldr	r3, [r4, #8]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	702b      	strb	r3, [r5, #0]
 800df46:	68a2      	ldr	r2, [r4, #8]
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	440a      	add	r2, r1
 800df4c:	440b      	add	r3, r1
 800df4e:	60a2      	str	r2, [r4, #8]
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	7561      	strb	r1, [r4, #21]
 800df54:	7da0      	ldrb	r0, [r4, #22]
 800df56:	f080 0001 	eor.w	r0, r0, #1
 800df5a:	bd38      	pop	{r3, r4, r5, pc}

0800df5c <ucdr_serialize_uint16_t>:
 800df5c:	460b      	mov	r3, r1
 800df5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df62:	2102      	movs	r1, #2
 800df64:	b082      	sub	sp, #8
 800df66:	4604      	mov	r4, r0
 800df68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800df6c:	f001 fc18 	bl	800f7a0 <ucdr_buffer_alignment>
 800df70:	4601      	mov	r1, r0
 800df72:	4620      	mov	r0, r4
 800df74:	7d67      	ldrb	r7, [r4, #21]
 800df76:	f001 fc59 	bl	800f82c <ucdr_advance_buffer>
 800df7a:	4620      	mov	r0, r4
 800df7c:	2102      	movs	r1, #2
 800df7e:	f001 fbb1 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800df82:	bb78      	cbnz	r0, 800dfe4 <ucdr_serialize_uint16_t+0x88>
 800df84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800df88:	42ab      	cmp	r3, r5
 800df8a:	d926      	bls.n	800dfda <ucdr_serialize_uint16_t+0x7e>
 800df8c:	6922      	ldr	r2, [r4, #16]
 800df8e:	1b5e      	subs	r6, r3, r5
 800df90:	4432      	add	r2, r6
 800df92:	f1c6 0802 	rsb	r8, r6, #2
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	60a3      	str	r3, [r4, #8]
 800df9c:	6122      	str	r2, [r4, #16]
 800df9e:	f001 fbad 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d03b      	beq.n	800e01e <ucdr_serialize_uint16_t+0xc2>
 800dfa6:	7d23      	ldrb	r3, [r4, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d04a      	beq.n	800e042 <ucdr_serialize_uint16_t+0xe6>
 800dfac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dfb0:	702b      	strb	r3, [r5, #0]
 800dfb2:	2e00      	cmp	r6, #0
 800dfb4:	d040      	beq.n	800e038 <ucdr_serialize_uint16_t+0xdc>
 800dfb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dfba:	706b      	strb	r3, [r5, #1]
 800dfbc:	2102      	movs	r1, #2
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	68a2      	ldr	r2, [r4, #8]
 800dfc2:	7da0      	ldrb	r0, [r4, #22]
 800dfc4:	440b      	add	r3, r1
 800dfc6:	1b9e      	subs	r6, r3, r6
 800dfc8:	4442      	add	r2, r8
 800dfca:	f080 0001 	eor.w	r0, r0, #1
 800dfce:	6126      	str	r6, [r4, #16]
 800dfd0:	60a2      	str	r2, [r4, #8]
 800dfd2:	7561      	strb	r1, [r4, #21]
 800dfd4:	b002      	add	sp, #8
 800dfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfda:	2102      	movs	r1, #2
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f001 fb8d 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800dfe2:	b190      	cbz	r0, 800e00a <ucdr_serialize_uint16_t+0xae>
 800dfe4:	7d23      	ldrb	r3, [r4, #20]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	68a3      	ldr	r3, [r4, #8]
 800dfea:	d014      	beq.n	800e016 <ucdr_serialize_uint16_t+0xba>
 800dfec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dff0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dff4:	7019      	strb	r1, [r3, #0]
 800dff6:	68a3      	ldr	r3, [r4, #8]
 800dff8:	705a      	strb	r2, [r3, #1]
 800dffa:	2102      	movs	r1, #2
 800dffc:	68a2      	ldr	r2, [r4, #8]
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	440a      	add	r2, r1
 800e002:	440b      	add	r3, r1
 800e004:	60a2      	str	r2, [r4, #8]
 800e006:	6123      	str	r3, [r4, #16]
 800e008:	7561      	strb	r1, [r4, #21]
 800e00a:	7da0      	ldrb	r0, [r4, #22]
 800e00c:	f080 0001 	eor.w	r0, r0, #1
 800e010:	b002      	add	sp, #8
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e016:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e01a:	801a      	strh	r2, [r3, #0]
 800e01c:	e7ed      	b.n	800dffa <ucdr_serialize_uint16_t+0x9e>
 800e01e:	68a2      	ldr	r2, [r4, #8]
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	7da0      	ldrb	r0, [r4, #22]
 800e024:	1b92      	subs	r2, r2, r6
 800e026:	f080 0001 	eor.w	r0, r0, #1
 800e02a:	1b9e      	subs	r6, r3, r6
 800e02c:	7567      	strb	r7, [r4, #21]
 800e02e:	60a2      	str	r2, [r4, #8]
 800e030:	6126      	str	r6, [r4, #16]
 800e032:	b002      	add	sp, #8
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	68a3      	ldr	r3, [r4, #8]
 800e03a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e03e:	701a      	strb	r2, [r3, #0]
 800e040:	e7bc      	b.n	800dfbc <ucdr_serialize_uint16_t+0x60>
 800e042:	4628      	mov	r0, r5
 800e044:	f10d 0506 	add.w	r5, sp, #6
 800e048:	4629      	mov	r1, r5
 800e04a:	4632      	mov	r2, r6
 800e04c:	f009 f802 	bl	8017054 <memcpy>
 800e050:	4642      	mov	r2, r8
 800e052:	68a0      	ldr	r0, [r4, #8]
 800e054:	19a9      	adds	r1, r5, r6
 800e056:	f008 fffd 	bl	8017054 <memcpy>
 800e05a:	e7af      	b.n	800dfbc <ucdr_serialize_uint16_t+0x60>

0800e05c <ucdr_serialize_endian_uint16_t>:
 800e05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e060:	460d      	mov	r5, r1
 800e062:	b083      	sub	sp, #12
 800e064:	2102      	movs	r1, #2
 800e066:	4604      	mov	r4, r0
 800e068:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e06c:	f001 fb98 	bl	800f7a0 <ucdr_buffer_alignment>
 800e070:	4601      	mov	r1, r0
 800e072:	4620      	mov	r0, r4
 800e074:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e078:	f001 fbd8 	bl	800f82c <ucdr_advance_buffer>
 800e07c:	4620      	mov	r0, r4
 800e07e:	2102      	movs	r1, #2
 800e080:	f001 fb30 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e084:	bb70      	cbnz	r0, 800e0e4 <ucdr_serialize_endian_uint16_t+0x88>
 800e086:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e08a:	42b3      	cmp	r3, r6
 800e08c:	d925      	bls.n	800e0da <ucdr_serialize_endian_uint16_t+0x7e>
 800e08e:	6922      	ldr	r2, [r4, #16]
 800e090:	1b9f      	subs	r7, r3, r6
 800e092:	443a      	add	r2, r7
 800e094:	f1c7 0902 	rsb	r9, r7, #2
 800e098:	4649      	mov	r1, r9
 800e09a:	4620      	mov	r0, r4
 800e09c:	60a3      	str	r3, [r4, #8]
 800e09e:	6122      	str	r2, [r4, #16]
 800e0a0:	f001 fb2c 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	d039      	beq.n	800e11c <ucdr_serialize_endian_uint16_t+0xc0>
 800e0a8:	2d01      	cmp	r5, #1
 800e0aa:	d04a      	beq.n	800e142 <ucdr_serialize_endian_uint16_t+0xe6>
 800e0ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0b0:	7033      	strb	r3, [r6, #0]
 800e0b2:	2f00      	cmp	r7, #0
 800e0b4:	d040      	beq.n	800e138 <ucdr_serialize_endian_uint16_t+0xdc>
 800e0b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0ba:	7073      	strb	r3, [r6, #1]
 800e0bc:	2102      	movs	r1, #2
 800e0be:	6923      	ldr	r3, [r4, #16]
 800e0c0:	68a2      	ldr	r2, [r4, #8]
 800e0c2:	7da0      	ldrb	r0, [r4, #22]
 800e0c4:	440b      	add	r3, r1
 800e0c6:	1bdf      	subs	r7, r3, r7
 800e0c8:	444a      	add	r2, r9
 800e0ca:	f080 0001 	eor.w	r0, r0, #1
 800e0ce:	6127      	str	r7, [r4, #16]
 800e0d0:	60a2      	str	r2, [r4, #8]
 800e0d2:	7561      	strb	r1, [r4, #21]
 800e0d4:	b003      	add	sp, #12
 800e0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0da:	2102      	movs	r1, #2
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f001 fb0d 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e0e2:	b188      	cbz	r0, 800e108 <ucdr_serialize_endian_uint16_t+0xac>
 800e0e4:	2d01      	cmp	r5, #1
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	d014      	beq.n	800e114 <ucdr_serialize_endian_uint16_t+0xb8>
 800e0ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e0ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0f2:	7019      	strb	r1, [r3, #0]
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	705a      	strb	r2, [r3, #1]
 800e0f8:	2102      	movs	r1, #2
 800e0fa:	68a2      	ldr	r2, [r4, #8]
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	440a      	add	r2, r1
 800e100:	440b      	add	r3, r1
 800e102:	60a2      	str	r2, [r4, #8]
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	7561      	strb	r1, [r4, #21]
 800e108:	7da0      	ldrb	r0, [r4, #22]
 800e10a:	f080 0001 	eor.w	r0, r0, #1
 800e10e:	b003      	add	sp, #12
 800e110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e114:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e118:	801a      	strh	r2, [r3, #0]
 800e11a:	e7ed      	b.n	800e0f8 <ucdr_serialize_endian_uint16_t+0x9c>
 800e11c:	68a2      	ldr	r2, [r4, #8]
 800e11e:	6923      	ldr	r3, [r4, #16]
 800e120:	7da0      	ldrb	r0, [r4, #22]
 800e122:	1bd2      	subs	r2, r2, r7
 800e124:	f080 0001 	eor.w	r0, r0, #1
 800e128:	1bdf      	subs	r7, r3, r7
 800e12a:	f884 8015 	strb.w	r8, [r4, #21]
 800e12e:	60a2      	str	r2, [r4, #8]
 800e130:	6127      	str	r7, [r4, #16]
 800e132:	b003      	add	sp, #12
 800e134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e138:	68a3      	ldr	r3, [r4, #8]
 800e13a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e13e:	701a      	strb	r2, [r3, #0]
 800e140:	e7bc      	b.n	800e0bc <ucdr_serialize_endian_uint16_t+0x60>
 800e142:	f10d 0506 	add.w	r5, sp, #6
 800e146:	4629      	mov	r1, r5
 800e148:	463a      	mov	r2, r7
 800e14a:	4630      	mov	r0, r6
 800e14c:	f008 ff82 	bl	8017054 <memcpy>
 800e150:	464a      	mov	r2, r9
 800e152:	68a0      	ldr	r0, [r4, #8]
 800e154:	19e9      	adds	r1, r5, r7
 800e156:	f008 ff7d 	bl	8017054 <memcpy>
 800e15a:	e7af      	b.n	800e0bc <ucdr_serialize_endian_uint16_t+0x60>

0800e15c <ucdr_deserialize_uint16_t>:
 800e15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e160:	460d      	mov	r5, r1
 800e162:	2102      	movs	r1, #2
 800e164:	4604      	mov	r4, r0
 800e166:	f001 fb1b 	bl	800f7a0 <ucdr_buffer_alignment>
 800e16a:	4601      	mov	r1, r0
 800e16c:	4620      	mov	r0, r4
 800e16e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e172:	f001 fb5b 	bl	800f82c <ucdr_advance_buffer>
 800e176:	4620      	mov	r0, r4
 800e178:	2102      	movs	r1, #2
 800e17a:	f001 fab3 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e17e:	bb60      	cbnz	r0, 800e1da <ucdr_deserialize_uint16_t+0x7e>
 800e180:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e184:	42b3      	cmp	r3, r6
 800e186:	d923      	bls.n	800e1d0 <ucdr_deserialize_uint16_t+0x74>
 800e188:	6922      	ldr	r2, [r4, #16]
 800e18a:	1b9f      	subs	r7, r3, r6
 800e18c:	443a      	add	r2, r7
 800e18e:	f1c7 0902 	rsb	r9, r7, #2
 800e192:	4649      	mov	r1, r9
 800e194:	4620      	mov	r0, r4
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	6122      	str	r2, [r4, #16]
 800e19a:	f001 faaf 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d034      	beq.n	800e20c <ucdr_deserialize_uint16_t+0xb0>
 800e1a2:	7d23      	ldrb	r3, [r4, #20]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d042      	beq.n	800e22e <ucdr_deserialize_uint16_t+0xd2>
 800e1a8:	7873      	ldrb	r3, [r6, #1]
 800e1aa:	702b      	strb	r3, [r5, #0]
 800e1ac:	2f00      	cmp	r7, #0
 800e1ae:	d03a      	beq.n	800e226 <ucdr_deserialize_uint16_t+0xca>
 800e1b0:	7833      	ldrb	r3, [r6, #0]
 800e1b2:	706b      	strb	r3, [r5, #1]
 800e1b4:	2102      	movs	r1, #2
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	68a2      	ldr	r2, [r4, #8]
 800e1ba:	7da0      	ldrb	r0, [r4, #22]
 800e1bc:	440b      	add	r3, r1
 800e1be:	1bdf      	subs	r7, r3, r7
 800e1c0:	444a      	add	r2, r9
 800e1c2:	7561      	strb	r1, [r4, #21]
 800e1c4:	6127      	str	r7, [r4, #16]
 800e1c6:	60a2      	str	r2, [r4, #8]
 800e1c8:	f080 0001 	eor.w	r0, r0, #1
 800e1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d0:	2102      	movs	r1, #2
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f001 fa92 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e1d8:	b180      	cbz	r0, 800e1fc <ucdr_deserialize_uint16_t+0xa0>
 800e1da:	7d23      	ldrb	r3, [r4, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	68a3      	ldr	r3, [r4, #8]
 800e1e0:	d011      	beq.n	800e206 <ucdr_deserialize_uint16_t+0xaa>
 800e1e2:	785b      	ldrb	r3, [r3, #1]
 800e1e4:	702b      	strb	r3, [r5, #0]
 800e1e6:	68a3      	ldr	r3, [r4, #8]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	706b      	strb	r3, [r5, #1]
 800e1ec:	2102      	movs	r1, #2
 800e1ee:	68a2      	ldr	r2, [r4, #8]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	440a      	add	r2, r1
 800e1f4:	440b      	add	r3, r1
 800e1f6:	60a2      	str	r2, [r4, #8]
 800e1f8:	6123      	str	r3, [r4, #16]
 800e1fa:	7561      	strb	r1, [r4, #21]
 800e1fc:	7da0      	ldrb	r0, [r4, #22]
 800e1fe:	f080 0001 	eor.w	r0, r0, #1
 800e202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	802b      	strh	r3, [r5, #0]
 800e20a:	e7ef      	b.n	800e1ec <ucdr_deserialize_uint16_t+0x90>
 800e20c:	68a2      	ldr	r2, [r4, #8]
 800e20e:	6923      	ldr	r3, [r4, #16]
 800e210:	7da0      	ldrb	r0, [r4, #22]
 800e212:	1bd2      	subs	r2, r2, r7
 800e214:	f884 8015 	strb.w	r8, [r4, #21]
 800e218:	1bdf      	subs	r7, r3, r7
 800e21a:	60a2      	str	r2, [r4, #8]
 800e21c:	6127      	str	r7, [r4, #16]
 800e21e:	f080 0001 	eor.w	r0, r0, #1
 800e222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e226:	68a3      	ldr	r3, [r4, #8]
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	706b      	strb	r3, [r5, #1]
 800e22c:	e7c2      	b.n	800e1b4 <ucdr_deserialize_uint16_t+0x58>
 800e22e:	4631      	mov	r1, r6
 800e230:	463a      	mov	r2, r7
 800e232:	4628      	mov	r0, r5
 800e234:	f008 ff0e 	bl	8017054 <memcpy>
 800e238:	464a      	mov	r2, r9
 800e23a:	68a1      	ldr	r1, [r4, #8]
 800e23c:	19e8      	adds	r0, r5, r7
 800e23e:	f008 ff09 	bl	8017054 <memcpy>
 800e242:	e7b7      	b.n	800e1b4 <ucdr_deserialize_uint16_t+0x58>

0800e244 <ucdr_deserialize_endian_uint16_t>:
 800e244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e248:	460e      	mov	r6, r1
 800e24a:	2102      	movs	r1, #2
 800e24c:	4604      	mov	r4, r0
 800e24e:	4615      	mov	r5, r2
 800e250:	f001 faa6 	bl	800f7a0 <ucdr_buffer_alignment>
 800e254:	4601      	mov	r1, r0
 800e256:	4620      	mov	r0, r4
 800e258:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e25c:	f001 fae6 	bl	800f82c <ucdr_advance_buffer>
 800e260:	4620      	mov	r0, r4
 800e262:	2102      	movs	r1, #2
 800e264:	f001 fa3e 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e268:	bb70      	cbnz	r0, 800e2c8 <ucdr_deserialize_endian_uint16_t+0x84>
 800e26a:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e26e:	42bb      	cmp	r3, r7
 800e270:	d925      	bls.n	800e2be <ucdr_deserialize_endian_uint16_t+0x7a>
 800e272:	6922      	ldr	r2, [r4, #16]
 800e274:	eba3 0807 	sub.w	r8, r3, r7
 800e278:	4442      	add	r2, r8
 800e27a:	f1c8 0a02 	rsb	sl, r8, #2
 800e27e:	4651      	mov	r1, sl
 800e280:	4620      	mov	r0, r4
 800e282:	60a3      	str	r3, [r4, #8]
 800e284:	6122      	str	r2, [r4, #16]
 800e286:	f001 fa39 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d034      	beq.n	800e2f8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e28e:	2e01      	cmp	r6, #1
 800e290:	d045      	beq.n	800e31e <ucdr_deserialize_endian_uint16_t+0xda>
 800e292:	787b      	ldrb	r3, [r7, #1]
 800e294:	702b      	strb	r3, [r5, #0]
 800e296:	f1b8 0f00 	cmp.w	r8, #0
 800e29a:	d03c      	beq.n	800e316 <ucdr_deserialize_endian_uint16_t+0xd2>
 800e29c:	783b      	ldrb	r3, [r7, #0]
 800e29e:	706b      	strb	r3, [r5, #1]
 800e2a0:	2102      	movs	r1, #2
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	68a2      	ldr	r2, [r4, #8]
 800e2a6:	7da0      	ldrb	r0, [r4, #22]
 800e2a8:	440b      	add	r3, r1
 800e2aa:	eba3 0308 	sub.w	r3, r3, r8
 800e2ae:	4452      	add	r2, sl
 800e2b0:	7561      	strb	r1, [r4, #21]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	60a2      	str	r2, [r4, #8]
 800e2b6:	f080 0001 	eor.w	r0, r0, #1
 800e2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2be:	2102      	movs	r1, #2
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f001 fa1b 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e2c6:	b178      	cbz	r0, 800e2e8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e2c8:	2e01      	cmp	r6, #1
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	d011      	beq.n	800e2f2 <ucdr_deserialize_endian_uint16_t+0xae>
 800e2ce:	785b      	ldrb	r3, [r3, #1]
 800e2d0:	702b      	strb	r3, [r5, #0]
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	706b      	strb	r3, [r5, #1]
 800e2d8:	2102      	movs	r1, #2
 800e2da:	68a2      	ldr	r2, [r4, #8]
 800e2dc:	6923      	ldr	r3, [r4, #16]
 800e2de:	440a      	add	r2, r1
 800e2e0:	440b      	add	r3, r1
 800e2e2:	60a2      	str	r2, [r4, #8]
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	7561      	strb	r1, [r4, #21]
 800e2e8:	7da0      	ldrb	r0, [r4, #22]
 800e2ea:	f080 0001 	eor.w	r0, r0, #1
 800e2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	802b      	strh	r3, [r5, #0]
 800e2f6:	e7ef      	b.n	800e2d8 <ucdr_deserialize_endian_uint16_t+0x94>
 800e2f8:	68a2      	ldr	r2, [r4, #8]
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	7da0      	ldrb	r0, [r4, #22]
 800e2fe:	eba2 0208 	sub.w	r2, r2, r8
 800e302:	eba3 0308 	sub.w	r3, r3, r8
 800e306:	f884 9015 	strb.w	r9, [r4, #21]
 800e30a:	60a2      	str	r2, [r4, #8]
 800e30c:	6123      	str	r3, [r4, #16]
 800e30e:	f080 0001 	eor.w	r0, r0, #1
 800e312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e316:	68a3      	ldr	r3, [r4, #8]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	706b      	strb	r3, [r5, #1]
 800e31c:	e7c0      	b.n	800e2a0 <ucdr_deserialize_endian_uint16_t+0x5c>
 800e31e:	4639      	mov	r1, r7
 800e320:	4642      	mov	r2, r8
 800e322:	4628      	mov	r0, r5
 800e324:	f008 fe96 	bl	8017054 <memcpy>
 800e328:	4652      	mov	r2, sl
 800e32a:	68a1      	ldr	r1, [r4, #8]
 800e32c:	eb05 0008 	add.w	r0, r5, r8
 800e330:	f008 fe90 	bl	8017054 <memcpy>
 800e334:	e7b4      	b.n	800e2a0 <ucdr_deserialize_endian_uint16_t+0x5c>
 800e336:	bf00      	nop

0800e338 <ucdr_serialize_uint32_t>:
 800e338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	9101      	str	r1, [sp, #4]
 800e340:	2104      	movs	r1, #4
 800e342:	4604      	mov	r4, r0
 800e344:	f001 fa2c 	bl	800f7a0 <ucdr_buffer_alignment>
 800e348:	4601      	mov	r1, r0
 800e34a:	4620      	mov	r0, r4
 800e34c:	7d67      	ldrb	r7, [r4, #21]
 800e34e:	f001 fa6d 	bl	800f82c <ucdr_advance_buffer>
 800e352:	4620      	mov	r0, r4
 800e354:	2104      	movs	r1, #4
 800e356:	f001 f9c5 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d139      	bne.n	800e3d2 <ucdr_serialize_uint32_t+0x9a>
 800e35e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e362:	42ab      	cmp	r3, r5
 800e364:	d930      	bls.n	800e3c8 <ucdr_serialize_uint32_t+0x90>
 800e366:	6922      	ldr	r2, [r4, #16]
 800e368:	1b5e      	subs	r6, r3, r5
 800e36a:	4432      	add	r2, r6
 800e36c:	f1c6 0804 	rsb	r8, r6, #4
 800e370:	4641      	mov	r1, r8
 800e372:	4620      	mov	r0, r4
 800e374:	60a3      	str	r3, [r4, #8]
 800e376:	6122      	str	r2, [r4, #16]
 800e378:	f001 f9c0 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d04c      	beq.n	800e41a <ucdr_serialize_uint32_t+0xe2>
 800e380:	7d23      	ldrb	r3, [r4, #20]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d063      	beq.n	800e44e <ucdr_serialize_uint32_t+0x116>
 800e386:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e38a:	702b      	strb	r3, [r5, #0]
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	d051      	beq.n	800e434 <ucdr_serialize_uint32_t+0xfc>
 800e390:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e394:	2e01      	cmp	r6, #1
 800e396:	706b      	strb	r3, [r5, #1]
 800e398:	d050      	beq.n	800e43c <ucdr_serialize_uint32_t+0x104>
 800e39a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e39e:	2e02      	cmp	r6, #2
 800e3a0:	70ab      	strb	r3, [r5, #2]
 800e3a2:	d04f      	beq.n	800e444 <ucdr_serialize_uint32_t+0x10c>
 800e3a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e3a8:	70eb      	strb	r3, [r5, #3]
 800e3aa:	2104      	movs	r1, #4
 800e3ac:	6923      	ldr	r3, [r4, #16]
 800e3ae:	68a2      	ldr	r2, [r4, #8]
 800e3b0:	7da0      	ldrb	r0, [r4, #22]
 800e3b2:	440b      	add	r3, r1
 800e3b4:	1b9e      	subs	r6, r3, r6
 800e3b6:	4442      	add	r2, r8
 800e3b8:	f080 0001 	eor.w	r0, r0, #1
 800e3bc:	6126      	str	r6, [r4, #16]
 800e3be:	60a2      	str	r2, [r4, #8]
 800e3c0:	7561      	strb	r1, [r4, #21]
 800e3c2:	b002      	add	sp, #8
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	2104      	movs	r1, #4
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f001 f996 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e3d0:	b1d0      	cbz	r0, 800e408 <ucdr_serialize_uint32_t+0xd0>
 800e3d2:	7d23      	ldrb	r3, [r4, #20]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	68a3      	ldr	r3, [r4, #8]
 800e3d8:	d01c      	beq.n	800e414 <ucdr_serialize_uint32_t+0xdc>
 800e3da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e3de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e3e2:	7019      	strb	r1, [r3, #0]
 800e3e4:	68a3      	ldr	r3, [r4, #8]
 800e3e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e3ea:	705a      	strb	r2, [r3, #1]
 800e3ec:	68a3      	ldr	r3, [r4, #8]
 800e3ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e3f2:	7099      	strb	r1, [r3, #2]
 800e3f4:	68a3      	ldr	r3, [r4, #8]
 800e3f6:	70da      	strb	r2, [r3, #3]
 800e3f8:	2104      	movs	r1, #4
 800e3fa:	68a2      	ldr	r2, [r4, #8]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	440a      	add	r2, r1
 800e400:	440b      	add	r3, r1
 800e402:	60a2      	str	r2, [r4, #8]
 800e404:	6123      	str	r3, [r4, #16]
 800e406:	7561      	strb	r1, [r4, #21]
 800e408:	7da0      	ldrb	r0, [r4, #22]
 800e40a:	f080 0001 	eor.w	r0, r0, #1
 800e40e:	b002      	add	sp, #8
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	9a01      	ldr	r2, [sp, #4]
 800e416:	601a      	str	r2, [r3, #0]
 800e418:	e7ee      	b.n	800e3f8 <ucdr_serialize_uint32_t+0xc0>
 800e41a:	68a2      	ldr	r2, [r4, #8]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	7da0      	ldrb	r0, [r4, #22]
 800e420:	1b92      	subs	r2, r2, r6
 800e422:	f080 0001 	eor.w	r0, r0, #1
 800e426:	1b9e      	subs	r6, r3, r6
 800e428:	7567      	strb	r7, [r4, #21]
 800e42a:	60a2      	str	r2, [r4, #8]
 800e42c:	6126      	str	r6, [r4, #16]
 800e42e:	b002      	add	sp, #8
 800e430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e434:	68a3      	ldr	r3, [r4, #8]
 800e436:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e43a:	701a      	strb	r2, [r3, #0]
 800e43c:	68a3      	ldr	r3, [r4, #8]
 800e43e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e442:	701a      	strb	r2, [r3, #0]
 800e444:	68a3      	ldr	r3, [r4, #8]
 800e446:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	e7ad      	b.n	800e3aa <ucdr_serialize_uint32_t+0x72>
 800e44e:	4628      	mov	r0, r5
 800e450:	ad01      	add	r5, sp, #4
 800e452:	4629      	mov	r1, r5
 800e454:	4632      	mov	r2, r6
 800e456:	f008 fdfd 	bl	8017054 <memcpy>
 800e45a:	4642      	mov	r2, r8
 800e45c:	68a0      	ldr	r0, [r4, #8]
 800e45e:	19a9      	adds	r1, r5, r6
 800e460:	f008 fdf8 	bl	8017054 <memcpy>
 800e464:	e7a1      	b.n	800e3aa <ucdr_serialize_uint32_t+0x72>
 800e466:	bf00      	nop

0800e468 <ucdr_serialize_endian_uint32_t>:
 800e468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e46c:	460d      	mov	r5, r1
 800e46e:	b083      	sub	sp, #12
 800e470:	2104      	movs	r1, #4
 800e472:	4604      	mov	r4, r0
 800e474:	9201      	str	r2, [sp, #4]
 800e476:	f001 f993 	bl	800f7a0 <ucdr_buffer_alignment>
 800e47a:	4601      	mov	r1, r0
 800e47c:	4620      	mov	r0, r4
 800e47e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e482:	f001 f9d3 	bl	800f82c <ucdr_advance_buffer>
 800e486:	4620      	mov	r0, r4
 800e488:	2104      	movs	r1, #4
 800e48a:	f001 f92b 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e48e:	2800      	cmp	r0, #0
 800e490:	d138      	bne.n	800e504 <ucdr_serialize_endian_uint32_t+0x9c>
 800e492:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e496:	42b3      	cmp	r3, r6
 800e498:	d92f      	bls.n	800e4fa <ucdr_serialize_endian_uint32_t+0x92>
 800e49a:	6922      	ldr	r2, [r4, #16]
 800e49c:	1b9f      	subs	r7, r3, r6
 800e49e:	443a      	add	r2, r7
 800e4a0:	f1c7 0904 	rsb	r9, r7, #4
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	60a3      	str	r3, [r4, #8]
 800e4aa:	6122      	str	r2, [r4, #16]
 800e4ac:	f001 f926 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d04a      	beq.n	800e54a <ucdr_serialize_endian_uint32_t+0xe2>
 800e4b4:	2d01      	cmp	r5, #1
 800e4b6:	d063      	beq.n	800e580 <ucdr_serialize_endian_uint32_t+0x118>
 800e4b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4bc:	7033      	strb	r3, [r6, #0]
 800e4be:	2f00      	cmp	r7, #0
 800e4c0:	d051      	beq.n	800e566 <ucdr_serialize_endian_uint32_t+0xfe>
 800e4c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4c6:	2f01      	cmp	r7, #1
 800e4c8:	7073      	strb	r3, [r6, #1]
 800e4ca:	d050      	beq.n	800e56e <ucdr_serialize_endian_uint32_t+0x106>
 800e4cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4d0:	2f02      	cmp	r7, #2
 800e4d2:	70b3      	strb	r3, [r6, #2]
 800e4d4:	d04f      	beq.n	800e576 <ucdr_serialize_endian_uint32_t+0x10e>
 800e4d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e4da:	70f3      	strb	r3, [r6, #3]
 800e4dc:	2104      	movs	r1, #4
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	68a2      	ldr	r2, [r4, #8]
 800e4e2:	7da0      	ldrb	r0, [r4, #22]
 800e4e4:	440b      	add	r3, r1
 800e4e6:	1bdf      	subs	r7, r3, r7
 800e4e8:	444a      	add	r2, r9
 800e4ea:	f080 0001 	eor.w	r0, r0, #1
 800e4ee:	6127      	str	r7, [r4, #16]
 800e4f0:	60a2      	str	r2, [r4, #8]
 800e4f2:	7561      	strb	r1, [r4, #21]
 800e4f4:	b003      	add	sp, #12
 800e4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	2104      	movs	r1, #4
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f001 f8fd 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e502:	b1c8      	cbz	r0, 800e538 <ucdr_serialize_endian_uint32_t+0xd0>
 800e504:	2d01      	cmp	r5, #1
 800e506:	68a3      	ldr	r3, [r4, #8]
 800e508:	d01c      	beq.n	800e544 <ucdr_serialize_endian_uint32_t+0xdc>
 800e50a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e50e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e512:	7019      	strb	r1, [r3, #0]
 800e514:	68a3      	ldr	r3, [r4, #8]
 800e516:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e51a:	705a      	strb	r2, [r3, #1]
 800e51c:	68a3      	ldr	r3, [r4, #8]
 800e51e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e522:	7099      	strb	r1, [r3, #2]
 800e524:	68a3      	ldr	r3, [r4, #8]
 800e526:	70da      	strb	r2, [r3, #3]
 800e528:	2104      	movs	r1, #4
 800e52a:	68a2      	ldr	r2, [r4, #8]
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	440a      	add	r2, r1
 800e530:	440b      	add	r3, r1
 800e532:	60a2      	str	r2, [r4, #8]
 800e534:	6123      	str	r3, [r4, #16]
 800e536:	7561      	strb	r1, [r4, #21]
 800e538:	7da0      	ldrb	r0, [r4, #22]
 800e53a:	f080 0001 	eor.w	r0, r0, #1
 800e53e:	b003      	add	sp, #12
 800e540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e544:	9a01      	ldr	r2, [sp, #4]
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	e7ee      	b.n	800e528 <ucdr_serialize_endian_uint32_t+0xc0>
 800e54a:	68a2      	ldr	r2, [r4, #8]
 800e54c:	6923      	ldr	r3, [r4, #16]
 800e54e:	7da0      	ldrb	r0, [r4, #22]
 800e550:	1bd2      	subs	r2, r2, r7
 800e552:	f080 0001 	eor.w	r0, r0, #1
 800e556:	1bdf      	subs	r7, r3, r7
 800e558:	f884 8015 	strb.w	r8, [r4, #21]
 800e55c:	60a2      	str	r2, [r4, #8]
 800e55e:	6127      	str	r7, [r4, #16]
 800e560:	b003      	add	sp, #12
 800e562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	68a3      	ldr	r3, [r4, #8]
 800e570:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	68a3      	ldr	r3, [r4, #8]
 800e578:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e57c:	701a      	strb	r2, [r3, #0]
 800e57e:	e7ad      	b.n	800e4dc <ucdr_serialize_endian_uint32_t+0x74>
 800e580:	ad01      	add	r5, sp, #4
 800e582:	4629      	mov	r1, r5
 800e584:	463a      	mov	r2, r7
 800e586:	4630      	mov	r0, r6
 800e588:	f008 fd64 	bl	8017054 <memcpy>
 800e58c:	464a      	mov	r2, r9
 800e58e:	68a0      	ldr	r0, [r4, #8]
 800e590:	19e9      	adds	r1, r5, r7
 800e592:	f008 fd5f 	bl	8017054 <memcpy>
 800e596:	e7a1      	b.n	800e4dc <ucdr_serialize_endian_uint32_t+0x74>

0800e598 <ucdr_deserialize_uint32_t>:
 800e598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	460d      	mov	r5, r1
 800e59e:	2104      	movs	r1, #4
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	f001 f8fd 	bl	800f7a0 <ucdr_buffer_alignment>
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e5ae:	f001 f93d 	bl	800f82c <ucdr_advance_buffer>
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	2104      	movs	r1, #4
 800e5b6:	f001 f895 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d138      	bne.n	800e630 <ucdr_deserialize_uint32_t+0x98>
 800e5be:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e5c2:	42b3      	cmp	r3, r6
 800e5c4:	d92f      	bls.n	800e626 <ucdr_deserialize_uint32_t+0x8e>
 800e5c6:	6922      	ldr	r2, [r4, #16]
 800e5c8:	1b9f      	subs	r7, r3, r6
 800e5ca:	443a      	add	r2, r7
 800e5cc:	f1c7 0904 	rsb	r9, r7, #4
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	60a3      	str	r3, [r4, #8]
 800e5d6:	6122      	str	r2, [r4, #16]
 800e5d8:	f001 f890 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d046      	beq.n	800e66e <ucdr_deserialize_uint32_t+0xd6>
 800e5e0:	7d23      	ldrb	r3, [r4, #20]
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d05c      	beq.n	800e6a0 <ucdr_deserialize_uint32_t+0x108>
 800e5e6:	78f3      	ldrb	r3, [r6, #3]
 800e5e8:	702b      	strb	r3, [r5, #0]
 800e5ea:	2f00      	cmp	r7, #0
 800e5ec:	d04c      	beq.n	800e688 <ucdr_deserialize_uint32_t+0xf0>
 800e5ee:	78b2      	ldrb	r2, [r6, #2]
 800e5f0:	2f01      	cmp	r7, #1
 800e5f2:	f105 0302 	add.w	r3, r5, #2
 800e5f6:	706a      	strb	r2, [r5, #1]
 800e5f8:	d04a      	beq.n	800e690 <ucdr_deserialize_uint32_t+0xf8>
 800e5fa:	7872      	ldrb	r2, [r6, #1]
 800e5fc:	2f02      	cmp	r7, #2
 800e5fe:	f105 0303 	add.w	r3, r5, #3
 800e602:	70aa      	strb	r2, [r5, #2]
 800e604:	d048      	beq.n	800e698 <ucdr_deserialize_uint32_t+0x100>
 800e606:	7833      	ldrb	r3, [r6, #0]
 800e608:	70eb      	strb	r3, [r5, #3]
 800e60a:	2104      	movs	r1, #4
 800e60c:	6923      	ldr	r3, [r4, #16]
 800e60e:	68a2      	ldr	r2, [r4, #8]
 800e610:	7da0      	ldrb	r0, [r4, #22]
 800e612:	440b      	add	r3, r1
 800e614:	1bdf      	subs	r7, r3, r7
 800e616:	444a      	add	r2, r9
 800e618:	7561      	strb	r1, [r4, #21]
 800e61a:	6127      	str	r7, [r4, #16]
 800e61c:	60a2      	str	r2, [r4, #8]
 800e61e:	f080 0001 	eor.w	r0, r0, #1
 800e622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e626:	2104      	movs	r1, #4
 800e628:	4620      	mov	r0, r4
 800e62a:	f001 f867 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e62e:	b1b0      	cbz	r0, 800e65e <ucdr_deserialize_uint32_t+0xc6>
 800e630:	7d23      	ldrb	r3, [r4, #20]
 800e632:	2b01      	cmp	r3, #1
 800e634:	68a3      	ldr	r3, [r4, #8]
 800e636:	d017      	beq.n	800e668 <ucdr_deserialize_uint32_t+0xd0>
 800e638:	78db      	ldrb	r3, [r3, #3]
 800e63a:	702b      	strb	r3, [r5, #0]
 800e63c:	68a3      	ldr	r3, [r4, #8]
 800e63e:	789b      	ldrb	r3, [r3, #2]
 800e640:	706b      	strb	r3, [r5, #1]
 800e642:	68a3      	ldr	r3, [r4, #8]
 800e644:	785b      	ldrb	r3, [r3, #1]
 800e646:	70ab      	strb	r3, [r5, #2]
 800e648:	68a3      	ldr	r3, [r4, #8]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	70eb      	strb	r3, [r5, #3]
 800e64e:	2104      	movs	r1, #4
 800e650:	68a2      	ldr	r2, [r4, #8]
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	440a      	add	r2, r1
 800e656:	440b      	add	r3, r1
 800e658:	60a2      	str	r2, [r4, #8]
 800e65a:	6123      	str	r3, [r4, #16]
 800e65c:	7561      	strb	r1, [r4, #21]
 800e65e:	7da0      	ldrb	r0, [r4, #22]
 800e660:	f080 0001 	eor.w	r0, r0, #1
 800e664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	e7ef      	b.n	800e64e <ucdr_deserialize_uint32_t+0xb6>
 800e66e:	68a2      	ldr	r2, [r4, #8]
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	7da0      	ldrb	r0, [r4, #22]
 800e674:	1bd2      	subs	r2, r2, r7
 800e676:	f884 8015 	strb.w	r8, [r4, #21]
 800e67a:	1bdf      	subs	r7, r3, r7
 800e67c:	60a2      	str	r2, [r4, #8]
 800e67e:	6127      	str	r7, [r4, #16]
 800e680:	f080 0001 	eor.w	r0, r0, #1
 800e684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e688:	68a2      	ldr	r2, [r4, #8]
 800e68a:	1cab      	adds	r3, r5, #2
 800e68c:	7892      	ldrb	r2, [r2, #2]
 800e68e:	706a      	strb	r2, [r5, #1]
 800e690:	68a2      	ldr	r2, [r4, #8]
 800e692:	7852      	ldrb	r2, [r2, #1]
 800e694:	f803 2b01 	strb.w	r2, [r3], #1
 800e698:	68a2      	ldr	r2, [r4, #8]
 800e69a:	7812      	ldrb	r2, [r2, #0]
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	e7b4      	b.n	800e60a <ucdr_deserialize_uint32_t+0x72>
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	463a      	mov	r2, r7
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	f008 fcd5 	bl	8017054 <memcpy>
 800e6aa:	464a      	mov	r2, r9
 800e6ac:	68a1      	ldr	r1, [r4, #8]
 800e6ae:	19e8      	adds	r0, r5, r7
 800e6b0:	f008 fcd0 	bl	8017054 <memcpy>
 800e6b4:	e7a9      	b.n	800e60a <ucdr_deserialize_uint32_t+0x72>
 800e6b6:	bf00      	nop

0800e6b8 <ucdr_deserialize_endian_uint32_t>:
 800e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	460e      	mov	r6, r1
 800e6be:	2104      	movs	r1, #4
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	4615      	mov	r5, r2
 800e6c4:	f001 f86c 	bl	800f7a0 <ucdr_buffer_alignment>
 800e6c8:	4601      	mov	r1, r0
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e6d0:	f001 f8ac 	bl	800f82c <ucdr_advance_buffer>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	f001 f804 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d13c      	bne.n	800e75a <ucdr_deserialize_endian_uint32_t+0xa2>
 800e6e0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e6e4:	42bb      	cmp	r3, r7
 800e6e6:	d933      	bls.n	800e750 <ucdr_deserialize_endian_uint32_t+0x98>
 800e6e8:	6922      	ldr	r2, [r4, #16]
 800e6ea:	eba3 0807 	sub.w	r8, r3, r7
 800e6ee:	4442      	add	r2, r8
 800e6f0:	f1c8 0a04 	rsb	sl, r8, #4
 800e6f4:	4651      	mov	r1, sl
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	60a3      	str	r3, [r4, #8]
 800e6fa:	6122      	str	r2, [r4, #16]
 800e6fc:	f000 fffe 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e700:	2800      	cmp	r0, #0
 800e702:	d048      	beq.n	800e796 <ucdr_deserialize_endian_uint32_t+0xde>
 800e704:	2e01      	cmp	r6, #1
 800e706:	d061      	beq.n	800e7cc <ucdr_deserialize_endian_uint32_t+0x114>
 800e708:	78fb      	ldrb	r3, [r7, #3]
 800e70a:	702b      	strb	r3, [r5, #0]
 800e70c:	f1b8 0f00 	cmp.w	r8, #0
 800e710:	d050      	beq.n	800e7b4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800e712:	78ba      	ldrb	r2, [r7, #2]
 800e714:	f1b8 0f01 	cmp.w	r8, #1
 800e718:	f105 0302 	add.w	r3, r5, #2
 800e71c:	706a      	strb	r2, [r5, #1]
 800e71e:	d04d      	beq.n	800e7bc <ucdr_deserialize_endian_uint32_t+0x104>
 800e720:	787a      	ldrb	r2, [r7, #1]
 800e722:	f1b8 0f02 	cmp.w	r8, #2
 800e726:	f105 0303 	add.w	r3, r5, #3
 800e72a:	70aa      	strb	r2, [r5, #2]
 800e72c:	d04a      	beq.n	800e7c4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800e72e:	783b      	ldrb	r3, [r7, #0]
 800e730:	70eb      	strb	r3, [r5, #3]
 800e732:	2104      	movs	r1, #4
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	68a2      	ldr	r2, [r4, #8]
 800e738:	7da0      	ldrb	r0, [r4, #22]
 800e73a:	440b      	add	r3, r1
 800e73c:	eba3 0308 	sub.w	r3, r3, r8
 800e740:	4452      	add	r2, sl
 800e742:	7561      	strb	r1, [r4, #21]
 800e744:	6123      	str	r3, [r4, #16]
 800e746:	60a2      	str	r2, [r4, #8]
 800e748:	f080 0001 	eor.w	r0, r0, #1
 800e74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e750:	2104      	movs	r1, #4
 800e752:	4620      	mov	r0, r4
 800e754:	f000 ffd2 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e758:	b1a8      	cbz	r0, 800e786 <ucdr_deserialize_endian_uint32_t+0xce>
 800e75a:	2e01      	cmp	r6, #1
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	d017      	beq.n	800e790 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e760:	78db      	ldrb	r3, [r3, #3]
 800e762:	702b      	strb	r3, [r5, #0]
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	789b      	ldrb	r3, [r3, #2]
 800e768:	706b      	strb	r3, [r5, #1]
 800e76a:	68a3      	ldr	r3, [r4, #8]
 800e76c:	785b      	ldrb	r3, [r3, #1]
 800e76e:	70ab      	strb	r3, [r5, #2]
 800e770:	68a3      	ldr	r3, [r4, #8]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	70eb      	strb	r3, [r5, #3]
 800e776:	2104      	movs	r1, #4
 800e778:	68a2      	ldr	r2, [r4, #8]
 800e77a:	6923      	ldr	r3, [r4, #16]
 800e77c:	440a      	add	r2, r1
 800e77e:	440b      	add	r3, r1
 800e780:	60a2      	str	r2, [r4, #8]
 800e782:	6123      	str	r3, [r4, #16]
 800e784:	7561      	strb	r1, [r4, #21]
 800e786:	7da0      	ldrb	r0, [r4, #22]
 800e788:	f080 0001 	eor.w	r0, r0, #1
 800e78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	602b      	str	r3, [r5, #0]
 800e794:	e7ef      	b.n	800e776 <ucdr_deserialize_endian_uint32_t+0xbe>
 800e796:	68a2      	ldr	r2, [r4, #8]
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	7da0      	ldrb	r0, [r4, #22]
 800e79c:	eba2 0208 	sub.w	r2, r2, r8
 800e7a0:	eba3 0308 	sub.w	r3, r3, r8
 800e7a4:	f884 9015 	strb.w	r9, [r4, #21]
 800e7a8:	60a2      	str	r2, [r4, #8]
 800e7aa:	6123      	str	r3, [r4, #16]
 800e7ac:	f080 0001 	eor.w	r0, r0, #1
 800e7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b4:	68a2      	ldr	r2, [r4, #8]
 800e7b6:	1cab      	adds	r3, r5, #2
 800e7b8:	7892      	ldrb	r2, [r2, #2]
 800e7ba:	706a      	strb	r2, [r5, #1]
 800e7bc:	68a2      	ldr	r2, [r4, #8]
 800e7be:	7852      	ldrb	r2, [r2, #1]
 800e7c0:	f803 2b01 	strb.w	r2, [r3], #1
 800e7c4:	68a2      	ldr	r2, [r4, #8]
 800e7c6:	7812      	ldrb	r2, [r2, #0]
 800e7c8:	701a      	strb	r2, [r3, #0]
 800e7ca:	e7b2      	b.n	800e732 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	4642      	mov	r2, r8
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	f008 fc3f 	bl	8017054 <memcpy>
 800e7d6:	4652      	mov	r2, sl
 800e7d8:	68a1      	ldr	r1, [r4, #8]
 800e7da:	eb05 0008 	add.w	r0, r5, r8
 800e7de:	f008 fc39 	bl	8017054 <memcpy>
 800e7e2:	e7a6      	b.n	800e732 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e7e4 <ucdr_serialize_uint64_t>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	2108      	movs	r1, #8
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	e9cd 2300 	strd	r2, r3, [sp]
 800e7f2:	f000 ffd5 	bl	800f7a0 <ucdr_buffer_alignment>
 800e7f6:	4601      	mov	r1, r0
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	7d67      	ldrb	r7, [r4, #21]
 800e7fc:	f001 f816 	bl	800f82c <ucdr_advance_buffer>
 800e800:	4620      	mov	r0, r4
 800e802:	2108      	movs	r1, #8
 800e804:	f000 ff6e 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d14e      	bne.n	800e8aa <ucdr_serialize_uint64_t+0xc6>
 800e80c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e810:	42ab      	cmp	r3, r5
 800e812:	d945      	bls.n	800e8a0 <ucdr_serialize_uint64_t+0xbc>
 800e814:	6922      	ldr	r2, [r4, #16]
 800e816:	1b5e      	subs	r6, r3, r5
 800e818:	4432      	add	r2, r6
 800e81a:	f1c6 0808 	rsb	r8, r6, #8
 800e81e:	4641      	mov	r1, r8
 800e820:	4620      	mov	r0, r4
 800e822:	60a3      	str	r3, [r4, #8]
 800e824:	6122      	str	r2, [r4, #16]
 800e826:	f000 ff69 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d074      	beq.n	800e918 <ucdr_serialize_uint64_t+0x134>
 800e82e:	7d23      	ldrb	r3, [r4, #20]
 800e830:	2b01      	cmp	r3, #1
 800e832:	f000 809b 	beq.w	800e96c <ucdr_serialize_uint64_t+0x188>
 800e836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e83a:	702b      	strb	r3, [r5, #0]
 800e83c:	2e00      	cmp	r6, #0
 800e83e:	d078      	beq.n	800e932 <ucdr_serialize_uint64_t+0x14e>
 800e840:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e844:	2e01      	cmp	r6, #1
 800e846:	706b      	strb	r3, [r5, #1]
 800e848:	d077      	beq.n	800e93a <ucdr_serialize_uint64_t+0x156>
 800e84a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e84e:	2e02      	cmp	r6, #2
 800e850:	70ab      	strb	r3, [r5, #2]
 800e852:	d076      	beq.n	800e942 <ucdr_serialize_uint64_t+0x15e>
 800e854:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e858:	2e03      	cmp	r6, #3
 800e85a:	70eb      	strb	r3, [r5, #3]
 800e85c:	d075      	beq.n	800e94a <ucdr_serialize_uint64_t+0x166>
 800e85e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e862:	2e04      	cmp	r6, #4
 800e864:	712b      	strb	r3, [r5, #4]
 800e866:	d074      	beq.n	800e952 <ucdr_serialize_uint64_t+0x16e>
 800e868:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e86c:	2e05      	cmp	r6, #5
 800e86e:	716b      	strb	r3, [r5, #5]
 800e870:	d073      	beq.n	800e95a <ucdr_serialize_uint64_t+0x176>
 800e872:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e876:	2e06      	cmp	r6, #6
 800e878:	71ab      	strb	r3, [r5, #6]
 800e87a:	d072      	beq.n	800e962 <ucdr_serialize_uint64_t+0x17e>
 800e87c:	f89d 3000 	ldrb.w	r3, [sp]
 800e880:	71eb      	strb	r3, [r5, #7]
 800e882:	2108      	movs	r1, #8
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	68a2      	ldr	r2, [r4, #8]
 800e888:	7da0      	ldrb	r0, [r4, #22]
 800e88a:	440b      	add	r3, r1
 800e88c:	1b9e      	subs	r6, r3, r6
 800e88e:	4442      	add	r2, r8
 800e890:	f080 0001 	eor.w	r0, r0, #1
 800e894:	6126      	str	r6, [r4, #16]
 800e896:	60a2      	str	r2, [r4, #8]
 800e898:	7561      	strb	r1, [r4, #21]
 800e89a:	b002      	add	sp, #8
 800e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a0:	2108      	movs	r1, #8
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 ff2a 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e8a8:	b350      	cbz	r0, 800e900 <ucdr_serialize_uint64_t+0x11c>
 800e8aa:	7d23      	ldrb	r3, [r4, #20]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d02d      	beq.n	800e90c <ucdr_serialize_uint64_t+0x128>
 800e8b0:	68a3      	ldr	r3, [r4, #8]
 800e8b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e8b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e8ba:	7019      	strb	r1, [r3, #0]
 800e8bc:	68a3      	ldr	r3, [r4, #8]
 800e8be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e8c2:	705a      	strb	r2, [r3, #1]
 800e8c4:	68a3      	ldr	r3, [r4, #8]
 800e8c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e8ca:	7099      	strb	r1, [r3, #2]
 800e8cc:	68a3      	ldr	r3, [r4, #8]
 800e8ce:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800e8d2:	70da      	strb	r2, [r3, #3]
 800e8d4:	68a3      	ldr	r3, [r4, #8]
 800e8d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e8da:	7119      	strb	r1, [r3, #4]
 800e8dc:	68a3      	ldr	r3, [r4, #8]
 800e8de:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e8e2:	715a      	strb	r2, [r3, #5]
 800e8e4:	68a3      	ldr	r3, [r4, #8]
 800e8e6:	f89d 2000 	ldrb.w	r2, [sp]
 800e8ea:	7199      	strb	r1, [r3, #6]
 800e8ec:	68a3      	ldr	r3, [r4, #8]
 800e8ee:	71da      	strb	r2, [r3, #7]
 800e8f0:	2108      	movs	r1, #8
 800e8f2:	68a2      	ldr	r2, [r4, #8]
 800e8f4:	6923      	ldr	r3, [r4, #16]
 800e8f6:	440a      	add	r2, r1
 800e8f8:	440b      	add	r3, r1
 800e8fa:	60a2      	str	r2, [r4, #8]
 800e8fc:	6123      	str	r3, [r4, #16]
 800e8fe:	7561      	strb	r1, [r4, #21]
 800e900:	7da0      	ldrb	r0, [r4, #22]
 800e902:	f080 0001 	eor.w	r0, r0, #1
 800e906:	b002      	add	sp, #8
 800e908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90c:	466b      	mov	r3, sp
 800e90e:	68a2      	ldr	r2, [r4, #8]
 800e910:	cb03      	ldmia	r3!, {r0, r1}
 800e912:	6010      	str	r0, [r2, #0]
 800e914:	6051      	str	r1, [r2, #4]
 800e916:	e7eb      	b.n	800e8f0 <ucdr_serialize_uint64_t+0x10c>
 800e918:	68a2      	ldr	r2, [r4, #8]
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	7da0      	ldrb	r0, [r4, #22]
 800e91e:	1b92      	subs	r2, r2, r6
 800e920:	f080 0001 	eor.w	r0, r0, #1
 800e924:	1b9e      	subs	r6, r3, r6
 800e926:	7567      	strb	r7, [r4, #21]
 800e928:	60a2      	str	r2, [r4, #8]
 800e92a:	6126      	str	r6, [r4, #16]
 800e92c:	b002      	add	sp, #8
 800e92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e938:	701a      	strb	r2, [r3, #0]
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e948:	701a      	strb	r2, [r3, #0]
 800e94a:	68a3      	ldr	r3, [r4, #8]
 800e94c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e950:	701a      	strb	r2, [r3, #0]
 800e952:	68a3      	ldr	r3, [r4, #8]
 800e954:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	68a3      	ldr	r3, [r4, #8]
 800e95c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	68a3      	ldr	r3, [r4, #8]
 800e964:	f89d 2000 	ldrb.w	r2, [sp]
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	e78a      	b.n	800e882 <ucdr_serialize_uint64_t+0x9e>
 800e96c:	4628      	mov	r0, r5
 800e96e:	466d      	mov	r5, sp
 800e970:	4632      	mov	r2, r6
 800e972:	4629      	mov	r1, r5
 800e974:	f008 fb6e 	bl	8017054 <memcpy>
 800e978:	4642      	mov	r2, r8
 800e97a:	68a0      	ldr	r0, [r4, #8]
 800e97c:	19a9      	adds	r1, r5, r6
 800e97e:	f008 fb69 	bl	8017054 <memcpy>
 800e982:	e77e      	b.n	800e882 <ucdr_serialize_uint64_t+0x9e>

0800e984 <ucdr_serialize_int8_t>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	460d      	mov	r5, r1
 800e988:	2101      	movs	r1, #1
 800e98a:	4604      	mov	r4, r0
 800e98c:	f000 feb6 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e990:	b148      	cbz	r0, 800e9a6 <ucdr_serialize_int8_t+0x22>
 800e992:	2101      	movs	r1, #1
 800e994:	68a3      	ldr	r3, [r4, #8]
 800e996:	701d      	strb	r5, [r3, #0]
 800e998:	68a2      	ldr	r2, [r4, #8]
 800e99a:	6923      	ldr	r3, [r4, #16]
 800e99c:	440a      	add	r2, r1
 800e99e:	440b      	add	r3, r1
 800e9a0:	60a2      	str	r2, [r4, #8]
 800e9a2:	6123      	str	r3, [r4, #16]
 800e9a4:	7561      	strb	r1, [r4, #21]
 800e9a6:	7da0      	ldrb	r0, [r4, #22]
 800e9a8:	f080 0001 	eor.w	r0, r0, #1
 800e9ac:	bd38      	pop	{r3, r4, r5, pc}
 800e9ae:	bf00      	nop

0800e9b0 <ucdr_deserialize_int8_t>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	2101      	movs	r1, #1
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	f000 fea0 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800e9bc:	b150      	cbz	r0, 800e9d4 <ucdr_deserialize_int8_t+0x24>
 800e9be:	2101      	movs	r1, #1
 800e9c0:	68a3      	ldr	r3, [r4, #8]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	702b      	strb	r3, [r5, #0]
 800e9c6:	68a2      	ldr	r2, [r4, #8]
 800e9c8:	6923      	ldr	r3, [r4, #16]
 800e9ca:	440a      	add	r2, r1
 800e9cc:	440b      	add	r3, r1
 800e9ce:	60a2      	str	r2, [r4, #8]
 800e9d0:	6123      	str	r3, [r4, #16]
 800e9d2:	7561      	strb	r1, [r4, #21]
 800e9d4:	7da0      	ldrb	r0, [r4, #22]
 800e9d6:	f080 0001 	eor.w	r0, r0, #1
 800e9da:	bd38      	pop	{r3, r4, r5, pc}

0800e9dc <ucdr_serialize_int16_t>:
 800e9dc:	460b      	mov	r3, r1
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	2102      	movs	r1, #2
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e9ec:	f000 fed8 	bl	800f7a0 <ucdr_buffer_alignment>
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	7d67      	ldrb	r7, [r4, #21]
 800e9f6:	f000 ff19 	bl	800f82c <ucdr_advance_buffer>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	2102      	movs	r1, #2
 800e9fe:	f000 fe71 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800ea02:	bb78      	cbnz	r0, 800ea64 <ucdr_serialize_int16_t+0x88>
 800ea04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea08:	42ab      	cmp	r3, r5
 800ea0a:	d926      	bls.n	800ea5a <ucdr_serialize_int16_t+0x7e>
 800ea0c:	6922      	ldr	r2, [r4, #16]
 800ea0e:	1b5e      	subs	r6, r3, r5
 800ea10:	4432      	add	r2, r6
 800ea12:	f1c6 0802 	rsb	r8, r6, #2
 800ea16:	4641      	mov	r1, r8
 800ea18:	4620      	mov	r0, r4
 800ea1a:	60a3      	str	r3, [r4, #8]
 800ea1c:	6122      	str	r2, [r4, #16]
 800ea1e:	f000 fe6d 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d03b      	beq.n	800ea9e <ucdr_serialize_int16_t+0xc2>
 800ea26:	7d23      	ldrb	r3, [r4, #20]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d04a      	beq.n	800eac2 <ucdr_serialize_int16_t+0xe6>
 800ea2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea30:	702b      	strb	r3, [r5, #0]
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	d040      	beq.n	800eab8 <ucdr_serialize_int16_t+0xdc>
 800ea36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea3a:	706b      	strb	r3, [r5, #1]
 800ea3c:	2102      	movs	r1, #2
 800ea3e:	6923      	ldr	r3, [r4, #16]
 800ea40:	68a2      	ldr	r2, [r4, #8]
 800ea42:	7da0      	ldrb	r0, [r4, #22]
 800ea44:	440b      	add	r3, r1
 800ea46:	1b9e      	subs	r6, r3, r6
 800ea48:	4442      	add	r2, r8
 800ea4a:	f080 0001 	eor.w	r0, r0, #1
 800ea4e:	6126      	str	r6, [r4, #16]
 800ea50:	60a2      	str	r2, [r4, #8]
 800ea52:	7561      	strb	r1, [r4, #21]
 800ea54:	b002      	add	sp, #8
 800ea56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5a:	2102      	movs	r1, #2
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fe4d 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ea62:	b190      	cbz	r0, 800ea8a <ucdr_serialize_int16_t+0xae>
 800ea64:	7d23      	ldrb	r3, [r4, #20]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	d014      	beq.n	800ea96 <ucdr_serialize_int16_t+0xba>
 800ea6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea74:	7019      	strb	r1, [r3, #0]
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	705a      	strb	r2, [r3, #1]
 800ea7a:	2102      	movs	r1, #2
 800ea7c:	68a2      	ldr	r2, [r4, #8]
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	440a      	add	r2, r1
 800ea82:	440b      	add	r3, r1
 800ea84:	60a2      	str	r2, [r4, #8]
 800ea86:	6123      	str	r3, [r4, #16]
 800ea88:	7561      	strb	r1, [r4, #21]
 800ea8a:	7da0      	ldrb	r0, [r4, #22]
 800ea8c:	f080 0001 	eor.w	r0, r0, #1
 800ea90:	b002      	add	sp, #8
 800ea92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea9a:	801a      	strh	r2, [r3, #0]
 800ea9c:	e7ed      	b.n	800ea7a <ucdr_serialize_int16_t+0x9e>
 800ea9e:	68a2      	ldr	r2, [r4, #8]
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	7da0      	ldrb	r0, [r4, #22]
 800eaa4:	1b92      	subs	r2, r2, r6
 800eaa6:	f080 0001 	eor.w	r0, r0, #1
 800eaaa:	1b9e      	subs	r6, r3, r6
 800eaac:	7567      	strb	r7, [r4, #21]
 800eaae:	60a2      	str	r2, [r4, #8]
 800eab0:	6126      	str	r6, [r4, #16]
 800eab2:	b002      	add	sp, #8
 800eab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab8:	68a3      	ldr	r3, [r4, #8]
 800eaba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eabe:	701a      	strb	r2, [r3, #0]
 800eac0:	e7bc      	b.n	800ea3c <ucdr_serialize_int16_t+0x60>
 800eac2:	4628      	mov	r0, r5
 800eac4:	f10d 0506 	add.w	r5, sp, #6
 800eac8:	4629      	mov	r1, r5
 800eaca:	4632      	mov	r2, r6
 800eacc:	f008 fac2 	bl	8017054 <memcpy>
 800ead0:	4642      	mov	r2, r8
 800ead2:	68a0      	ldr	r0, [r4, #8]
 800ead4:	19a9      	adds	r1, r5, r6
 800ead6:	f008 fabd 	bl	8017054 <memcpy>
 800eada:	e7af      	b.n	800ea3c <ucdr_serialize_int16_t+0x60>

0800eadc <ucdr_deserialize_int16_t>:
 800eadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae0:	460d      	mov	r5, r1
 800eae2:	2102      	movs	r1, #2
 800eae4:	4604      	mov	r4, r0
 800eae6:	f000 fe5b 	bl	800f7a0 <ucdr_buffer_alignment>
 800eaea:	4601      	mov	r1, r0
 800eaec:	4620      	mov	r0, r4
 800eaee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eaf2:	f000 fe9b 	bl	800f82c <ucdr_advance_buffer>
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	2102      	movs	r1, #2
 800eafa:	f000 fdf3 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800eafe:	bb60      	cbnz	r0, 800eb5a <ucdr_deserialize_int16_t+0x7e>
 800eb00:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800eb04:	42b3      	cmp	r3, r6
 800eb06:	d923      	bls.n	800eb50 <ucdr_deserialize_int16_t+0x74>
 800eb08:	6922      	ldr	r2, [r4, #16]
 800eb0a:	1b9f      	subs	r7, r3, r6
 800eb0c:	443a      	add	r2, r7
 800eb0e:	f1c7 0902 	rsb	r9, r7, #2
 800eb12:	4649      	mov	r1, r9
 800eb14:	4620      	mov	r0, r4
 800eb16:	60a3      	str	r3, [r4, #8]
 800eb18:	6122      	str	r2, [r4, #16]
 800eb1a:	f000 fdef 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d034      	beq.n	800eb8c <ucdr_deserialize_int16_t+0xb0>
 800eb22:	7d23      	ldrb	r3, [r4, #20]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d042      	beq.n	800ebae <ucdr_deserialize_int16_t+0xd2>
 800eb28:	7873      	ldrb	r3, [r6, #1]
 800eb2a:	702b      	strb	r3, [r5, #0]
 800eb2c:	2f00      	cmp	r7, #0
 800eb2e:	d03a      	beq.n	800eba6 <ucdr_deserialize_int16_t+0xca>
 800eb30:	7833      	ldrb	r3, [r6, #0]
 800eb32:	706b      	strb	r3, [r5, #1]
 800eb34:	2102      	movs	r1, #2
 800eb36:	6923      	ldr	r3, [r4, #16]
 800eb38:	68a2      	ldr	r2, [r4, #8]
 800eb3a:	7da0      	ldrb	r0, [r4, #22]
 800eb3c:	440b      	add	r3, r1
 800eb3e:	1bdf      	subs	r7, r3, r7
 800eb40:	444a      	add	r2, r9
 800eb42:	7561      	strb	r1, [r4, #21]
 800eb44:	6127      	str	r7, [r4, #16]
 800eb46:	60a2      	str	r2, [r4, #8]
 800eb48:	f080 0001 	eor.w	r0, r0, #1
 800eb4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb50:	2102      	movs	r1, #2
 800eb52:	4620      	mov	r0, r4
 800eb54:	f000 fdd2 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800eb58:	b180      	cbz	r0, 800eb7c <ucdr_deserialize_int16_t+0xa0>
 800eb5a:	7d23      	ldrb	r3, [r4, #20]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	d011      	beq.n	800eb86 <ucdr_deserialize_int16_t+0xaa>
 800eb62:	785b      	ldrb	r3, [r3, #1]
 800eb64:	702b      	strb	r3, [r5, #0]
 800eb66:	68a3      	ldr	r3, [r4, #8]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	706b      	strb	r3, [r5, #1]
 800eb6c:	2102      	movs	r1, #2
 800eb6e:	68a2      	ldr	r2, [r4, #8]
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	440a      	add	r2, r1
 800eb74:	440b      	add	r3, r1
 800eb76:	60a2      	str	r2, [r4, #8]
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	7561      	strb	r1, [r4, #21]
 800eb7c:	7da0      	ldrb	r0, [r4, #22]
 800eb7e:	f080 0001 	eor.w	r0, r0, #1
 800eb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	802b      	strh	r3, [r5, #0]
 800eb8a:	e7ef      	b.n	800eb6c <ucdr_deserialize_int16_t+0x90>
 800eb8c:	68a2      	ldr	r2, [r4, #8]
 800eb8e:	6923      	ldr	r3, [r4, #16]
 800eb90:	7da0      	ldrb	r0, [r4, #22]
 800eb92:	1bd2      	subs	r2, r2, r7
 800eb94:	f884 8015 	strb.w	r8, [r4, #21]
 800eb98:	1bdf      	subs	r7, r3, r7
 800eb9a:	60a2      	str	r2, [r4, #8]
 800eb9c:	6127      	str	r7, [r4, #16]
 800eb9e:	f080 0001 	eor.w	r0, r0, #1
 800eba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	706b      	strb	r3, [r5, #1]
 800ebac:	e7c2      	b.n	800eb34 <ucdr_deserialize_int16_t+0x58>
 800ebae:	4631      	mov	r1, r6
 800ebb0:	463a      	mov	r2, r7
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f008 fa4e 	bl	8017054 <memcpy>
 800ebb8:	464a      	mov	r2, r9
 800ebba:	68a1      	ldr	r1, [r4, #8]
 800ebbc:	19e8      	adds	r0, r5, r7
 800ebbe:	f008 fa49 	bl	8017054 <memcpy>
 800ebc2:	e7b7      	b.n	800eb34 <ucdr_deserialize_int16_t+0x58>

0800ebc4 <ucdr_serialize_int32_t>:
 800ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	9101      	str	r1, [sp, #4]
 800ebcc:	2104      	movs	r1, #4
 800ebce:	4604      	mov	r4, r0
 800ebd0:	f000 fde6 	bl	800f7a0 <ucdr_buffer_alignment>
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	7d67      	ldrb	r7, [r4, #21]
 800ebda:	f000 fe27 	bl	800f82c <ucdr_advance_buffer>
 800ebde:	4620      	mov	r0, r4
 800ebe0:	2104      	movs	r1, #4
 800ebe2:	f000 fd7f 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d139      	bne.n	800ec5e <ucdr_serialize_int32_t+0x9a>
 800ebea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ebee:	42ab      	cmp	r3, r5
 800ebf0:	d930      	bls.n	800ec54 <ucdr_serialize_int32_t+0x90>
 800ebf2:	6922      	ldr	r2, [r4, #16]
 800ebf4:	1b5e      	subs	r6, r3, r5
 800ebf6:	4432      	add	r2, r6
 800ebf8:	f1c6 0804 	rsb	r8, r6, #4
 800ebfc:	4641      	mov	r1, r8
 800ebfe:	4620      	mov	r0, r4
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	6122      	str	r2, [r4, #16]
 800ec04:	f000 fd7a 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d04c      	beq.n	800eca6 <ucdr_serialize_int32_t+0xe2>
 800ec0c:	7d23      	ldrb	r3, [r4, #20]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d063      	beq.n	800ecda <ucdr_serialize_int32_t+0x116>
 800ec12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec16:	702b      	strb	r3, [r5, #0]
 800ec18:	2e00      	cmp	r6, #0
 800ec1a:	d051      	beq.n	800ecc0 <ucdr_serialize_int32_t+0xfc>
 800ec1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec20:	2e01      	cmp	r6, #1
 800ec22:	706b      	strb	r3, [r5, #1]
 800ec24:	d050      	beq.n	800ecc8 <ucdr_serialize_int32_t+0x104>
 800ec26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ec2a:	2e02      	cmp	r6, #2
 800ec2c:	70ab      	strb	r3, [r5, #2]
 800ec2e:	d04f      	beq.n	800ecd0 <ucdr_serialize_int32_t+0x10c>
 800ec30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec34:	70eb      	strb	r3, [r5, #3]
 800ec36:	2104      	movs	r1, #4
 800ec38:	6923      	ldr	r3, [r4, #16]
 800ec3a:	68a2      	ldr	r2, [r4, #8]
 800ec3c:	7da0      	ldrb	r0, [r4, #22]
 800ec3e:	440b      	add	r3, r1
 800ec40:	1b9e      	subs	r6, r3, r6
 800ec42:	4442      	add	r2, r8
 800ec44:	f080 0001 	eor.w	r0, r0, #1
 800ec48:	6126      	str	r6, [r4, #16]
 800ec4a:	60a2      	str	r2, [r4, #8]
 800ec4c:	7561      	strb	r1, [r4, #21]
 800ec4e:	b002      	add	sp, #8
 800ec50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec54:	2104      	movs	r1, #4
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 fd50 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ec5c:	b1d0      	cbz	r0, 800ec94 <ucdr_serialize_int32_t+0xd0>
 800ec5e:	7d23      	ldrb	r3, [r4, #20]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	d01c      	beq.n	800eca0 <ucdr_serialize_int32_t+0xdc>
 800ec66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ec6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec6e:	7019      	strb	r1, [r3, #0]
 800ec70:	68a3      	ldr	r3, [r4, #8]
 800ec72:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ec76:	705a      	strb	r2, [r3, #1]
 800ec78:	68a3      	ldr	r3, [r4, #8]
 800ec7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec7e:	7099      	strb	r1, [r3, #2]
 800ec80:	68a3      	ldr	r3, [r4, #8]
 800ec82:	70da      	strb	r2, [r3, #3]
 800ec84:	2104      	movs	r1, #4
 800ec86:	68a2      	ldr	r2, [r4, #8]
 800ec88:	6923      	ldr	r3, [r4, #16]
 800ec8a:	440a      	add	r2, r1
 800ec8c:	440b      	add	r3, r1
 800ec8e:	60a2      	str	r2, [r4, #8]
 800ec90:	6123      	str	r3, [r4, #16]
 800ec92:	7561      	strb	r1, [r4, #21]
 800ec94:	7da0      	ldrb	r0, [r4, #22]
 800ec96:	f080 0001 	eor.w	r0, r0, #1
 800ec9a:	b002      	add	sp, #8
 800ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca0:	9a01      	ldr	r2, [sp, #4]
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	e7ee      	b.n	800ec84 <ucdr_serialize_int32_t+0xc0>
 800eca6:	68a2      	ldr	r2, [r4, #8]
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	7da0      	ldrb	r0, [r4, #22]
 800ecac:	1b92      	subs	r2, r2, r6
 800ecae:	f080 0001 	eor.w	r0, r0, #1
 800ecb2:	1b9e      	subs	r6, r3, r6
 800ecb4:	7567      	strb	r7, [r4, #21]
 800ecb6:	60a2      	str	r2, [r4, #8]
 800ecb8:	6126      	str	r6, [r4, #16]
 800ecba:	b002      	add	sp, #8
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc0:	68a3      	ldr	r3, [r4, #8]
 800ecc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecc6:	701a      	strb	r2, [r3, #0]
 800ecc8:	68a3      	ldr	r3, [r4, #8]
 800ecca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ecce:	701a      	strb	r2, [r3, #0]
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ecd6:	701a      	strb	r2, [r3, #0]
 800ecd8:	e7ad      	b.n	800ec36 <ucdr_serialize_int32_t+0x72>
 800ecda:	4628      	mov	r0, r5
 800ecdc:	ad01      	add	r5, sp, #4
 800ecde:	4629      	mov	r1, r5
 800ece0:	4632      	mov	r2, r6
 800ece2:	f008 f9b7 	bl	8017054 <memcpy>
 800ece6:	4642      	mov	r2, r8
 800ece8:	68a0      	ldr	r0, [r4, #8]
 800ecea:	19a9      	adds	r1, r5, r6
 800ecec:	f008 f9b2 	bl	8017054 <memcpy>
 800ecf0:	e7a1      	b.n	800ec36 <ucdr_serialize_int32_t+0x72>
 800ecf2:	bf00      	nop

0800ecf4 <ucdr_deserialize_int32_t>:
 800ecf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	2104      	movs	r1, #4
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	f000 fd4f 	bl	800f7a0 <ucdr_buffer_alignment>
 800ed02:	4601      	mov	r1, r0
 800ed04:	4620      	mov	r0, r4
 800ed06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed0a:	f000 fd8f 	bl	800f82c <ucdr_advance_buffer>
 800ed0e:	4620      	mov	r0, r4
 800ed10:	2104      	movs	r1, #4
 800ed12:	f000 fce7 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d138      	bne.n	800ed8c <ucdr_deserialize_int32_t+0x98>
 800ed1a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ed1e:	42b3      	cmp	r3, r6
 800ed20:	d92f      	bls.n	800ed82 <ucdr_deserialize_int32_t+0x8e>
 800ed22:	6922      	ldr	r2, [r4, #16]
 800ed24:	1b9f      	subs	r7, r3, r6
 800ed26:	443a      	add	r2, r7
 800ed28:	f1c7 0904 	rsb	r9, r7, #4
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	4620      	mov	r0, r4
 800ed30:	60a3      	str	r3, [r4, #8]
 800ed32:	6122      	str	r2, [r4, #16]
 800ed34:	f000 fce2 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d046      	beq.n	800edca <ucdr_deserialize_int32_t+0xd6>
 800ed3c:	7d23      	ldrb	r3, [r4, #20]
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d05c      	beq.n	800edfc <ucdr_deserialize_int32_t+0x108>
 800ed42:	78f3      	ldrb	r3, [r6, #3]
 800ed44:	702b      	strb	r3, [r5, #0]
 800ed46:	2f00      	cmp	r7, #0
 800ed48:	d04c      	beq.n	800ede4 <ucdr_deserialize_int32_t+0xf0>
 800ed4a:	78b2      	ldrb	r2, [r6, #2]
 800ed4c:	2f01      	cmp	r7, #1
 800ed4e:	f105 0302 	add.w	r3, r5, #2
 800ed52:	706a      	strb	r2, [r5, #1]
 800ed54:	d04a      	beq.n	800edec <ucdr_deserialize_int32_t+0xf8>
 800ed56:	7872      	ldrb	r2, [r6, #1]
 800ed58:	2f02      	cmp	r7, #2
 800ed5a:	f105 0303 	add.w	r3, r5, #3
 800ed5e:	70aa      	strb	r2, [r5, #2]
 800ed60:	d048      	beq.n	800edf4 <ucdr_deserialize_int32_t+0x100>
 800ed62:	7833      	ldrb	r3, [r6, #0]
 800ed64:	70eb      	strb	r3, [r5, #3]
 800ed66:	2104      	movs	r1, #4
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	68a2      	ldr	r2, [r4, #8]
 800ed6c:	7da0      	ldrb	r0, [r4, #22]
 800ed6e:	440b      	add	r3, r1
 800ed70:	1bdf      	subs	r7, r3, r7
 800ed72:	444a      	add	r2, r9
 800ed74:	7561      	strb	r1, [r4, #21]
 800ed76:	6127      	str	r7, [r4, #16]
 800ed78:	60a2      	str	r2, [r4, #8]
 800ed7a:	f080 0001 	eor.w	r0, r0, #1
 800ed7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed82:	2104      	movs	r1, #4
 800ed84:	4620      	mov	r0, r4
 800ed86:	f000 fcb9 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ed8a:	b1b0      	cbz	r0, 800edba <ucdr_deserialize_int32_t+0xc6>
 800ed8c:	7d23      	ldrb	r3, [r4, #20]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	68a3      	ldr	r3, [r4, #8]
 800ed92:	d017      	beq.n	800edc4 <ucdr_deserialize_int32_t+0xd0>
 800ed94:	78db      	ldrb	r3, [r3, #3]
 800ed96:	702b      	strb	r3, [r5, #0]
 800ed98:	68a3      	ldr	r3, [r4, #8]
 800ed9a:	789b      	ldrb	r3, [r3, #2]
 800ed9c:	706b      	strb	r3, [r5, #1]
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	785b      	ldrb	r3, [r3, #1]
 800eda2:	70ab      	strb	r3, [r5, #2]
 800eda4:	68a3      	ldr	r3, [r4, #8]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	70eb      	strb	r3, [r5, #3]
 800edaa:	2104      	movs	r1, #4
 800edac:	68a2      	ldr	r2, [r4, #8]
 800edae:	6923      	ldr	r3, [r4, #16]
 800edb0:	440a      	add	r2, r1
 800edb2:	440b      	add	r3, r1
 800edb4:	60a2      	str	r2, [r4, #8]
 800edb6:	6123      	str	r3, [r4, #16]
 800edb8:	7561      	strb	r1, [r4, #21]
 800edba:	7da0      	ldrb	r0, [r4, #22]
 800edbc:	f080 0001 	eor.w	r0, r0, #1
 800edc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	602b      	str	r3, [r5, #0]
 800edc8:	e7ef      	b.n	800edaa <ucdr_deserialize_int32_t+0xb6>
 800edca:	68a2      	ldr	r2, [r4, #8]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	7da0      	ldrb	r0, [r4, #22]
 800edd0:	1bd2      	subs	r2, r2, r7
 800edd2:	f884 8015 	strb.w	r8, [r4, #21]
 800edd6:	1bdf      	subs	r7, r3, r7
 800edd8:	60a2      	str	r2, [r4, #8]
 800edda:	6127      	str	r7, [r4, #16]
 800eddc:	f080 0001 	eor.w	r0, r0, #1
 800ede0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede4:	68a2      	ldr	r2, [r4, #8]
 800ede6:	1cab      	adds	r3, r5, #2
 800ede8:	7892      	ldrb	r2, [r2, #2]
 800edea:	706a      	strb	r2, [r5, #1]
 800edec:	68a2      	ldr	r2, [r4, #8]
 800edee:	7852      	ldrb	r2, [r2, #1]
 800edf0:	f803 2b01 	strb.w	r2, [r3], #1
 800edf4:	68a2      	ldr	r2, [r4, #8]
 800edf6:	7812      	ldrb	r2, [r2, #0]
 800edf8:	701a      	strb	r2, [r3, #0]
 800edfa:	e7b4      	b.n	800ed66 <ucdr_deserialize_int32_t+0x72>
 800edfc:	4631      	mov	r1, r6
 800edfe:	463a      	mov	r2, r7
 800ee00:	4628      	mov	r0, r5
 800ee02:	f008 f927 	bl	8017054 <memcpy>
 800ee06:	464a      	mov	r2, r9
 800ee08:	68a1      	ldr	r1, [r4, #8]
 800ee0a:	19e8      	adds	r0, r5, r7
 800ee0c:	f008 f922 	bl	8017054 <memcpy>
 800ee10:	e7a9      	b.n	800ed66 <ucdr_deserialize_int32_t+0x72>
 800ee12:	bf00      	nop

0800ee14 <ucdr_serialize_endian_float>:
 800ee14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee18:	460d      	mov	r5, r1
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	2104      	movs	r1, #4
 800ee1e:	4604      	mov	r4, r0
 800ee20:	9201      	str	r2, [sp, #4]
 800ee22:	f000 fcbd 	bl	800f7a0 <ucdr_buffer_alignment>
 800ee26:	4601      	mov	r1, r0
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee2e:	f000 fcfd 	bl	800f82c <ucdr_advance_buffer>
 800ee32:	4620      	mov	r0, r4
 800ee34:	2104      	movs	r1, #4
 800ee36:	f000 fc55 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d138      	bne.n	800eeb0 <ucdr_serialize_endian_float+0x9c>
 800ee3e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ee42:	42b3      	cmp	r3, r6
 800ee44:	d92f      	bls.n	800eea6 <ucdr_serialize_endian_float+0x92>
 800ee46:	6922      	ldr	r2, [r4, #16]
 800ee48:	1b9f      	subs	r7, r3, r6
 800ee4a:	443a      	add	r2, r7
 800ee4c:	f1c7 0904 	rsb	r9, r7, #4
 800ee50:	4649      	mov	r1, r9
 800ee52:	4620      	mov	r0, r4
 800ee54:	60a3      	str	r3, [r4, #8]
 800ee56:	6122      	str	r2, [r4, #16]
 800ee58:	f000 fc50 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d04a      	beq.n	800eef6 <ucdr_serialize_endian_float+0xe2>
 800ee60:	2d01      	cmp	r5, #1
 800ee62:	d063      	beq.n	800ef2c <ucdr_serialize_endian_float+0x118>
 800ee64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee68:	7033      	strb	r3, [r6, #0]
 800ee6a:	2f00      	cmp	r7, #0
 800ee6c:	d051      	beq.n	800ef12 <ucdr_serialize_endian_float+0xfe>
 800ee6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee72:	2f01      	cmp	r7, #1
 800ee74:	7073      	strb	r3, [r6, #1]
 800ee76:	d050      	beq.n	800ef1a <ucdr_serialize_endian_float+0x106>
 800ee78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee7c:	2f02      	cmp	r7, #2
 800ee7e:	70b3      	strb	r3, [r6, #2]
 800ee80:	d04f      	beq.n	800ef22 <ucdr_serialize_endian_float+0x10e>
 800ee82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee86:	70f3      	strb	r3, [r6, #3]
 800ee88:	2104      	movs	r1, #4
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	68a2      	ldr	r2, [r4, #8]
 800ee8e:	7da0      	ldrb	r0, [r4, #22]
 800ee90:	440b      	add	r3, r1
 800ee92:	1bdf      	subs	r7, r3, r7
 800ee94:	444a      	add	r2, r9
 800ee96:	f080 0001 	eor.w	r0, r0, #1
 800ee9a:	6127      	str	r7, [r4, #16]
 800ee9c:	60a2      	str	r2, [r4, #8]
 800ee9e:	7561      	strb	r1, [r4, #21]
 800eea0:	b003      	add	sp, #12
 800eea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea6:	2104      	movs	r1, #4
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f000 fc27 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800eeae:	b1c8      	cbz	r0, 800eee4 <ucdr_serialize_endian_float+0xd0>
 800eeb0:	2d01      	cmp	r5, #1
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	d01c      	beq.n	800eef0 <ucdr_serialize_endian_float+0xdc>
 800eeb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eeba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eebe:	7019      	strb	r1, [r3, #0]
 800eec0:	68a3      	ldr	r3, [r4, #8]
 800eec2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eec6:	705a      	strb	r2, [r3, #1]
 800eec8:	68a3      	ldr	r3, [r4, #8]
 800eeca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eece:	7099      	strb	r1, [r3, #2]
 800eed0:	68a3      	ldr	r3, [r4, #8]
 800eed2:	70da      	strb	r2, [r3, #3]
 800eed4:	2104      	movs	r1, #4
 800eed6:	68a2      	ldr	r2, [r4, #8]
 800eed8:	6923      	ldr	r3, [r4, #16]
 800eeda:	440a      	add	r2, r1
 800eedc:	440b      	add	r3, r1
 800eede:	60a2      	str	r2, [r4, #8]
 800eee0:	6123      	str	r3, [r4, #16]
 800eee2:	7561      	strb	r1, [r4, #21]
 800eee4:	7da0      	ldrb	r0, [r4, #22]
 800eee6:	f080 0001 	eor.w	r0, r0, #1
 800eeea:	b003      	add	sp, #12
 800eeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eef0:	9a01      	ldr	r2, [sp, #4]
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	e7ee      	b.n	800eed4 <ucdr_serialize_endian_float+0xc0>
 800eef6:	68a2      	ldr	r2, [r4, #8]
 800eef8:	6923      	ldr	r3, [r4, #16]
 800eefa:	7da0      	ldrb	r0, [r4, #22]
 800eefc:	1bd2      	subs	r2, r2, r7
 800eefe:	f080 0001 	eor.w	r0, r0, #1
 800ef02:	1bdf      	subs	r7, r3, r7
 800ef04:	f884 8015 	strb.w	r8, [r4, #21]
 800ef08:	60a2      	str	r2, [r4, #8]
 800ef0a:	6127      	str	r7, [r4, #16]
 800ef0c:	b003      	add	sp, #12
 800ef0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef12:	68a3      	ldr	r3, [r4, #8]
 800ef14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef18:	701a      	strb	r2, [r3, #0]
 800ef1a:	68a3      	ldr	r3, [r4, #8]
 800ef1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef20:	701a      	strb	r2, [r3, #0]
 800ef22:	68a3      	ldr	r3, [r4, #8]
 800ef24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef28:	701a      	strb	r2, [r3, #0]
 800ef2a:	e7ad      	b.n	800ee88 <ucdr_serialize_endian_float+0x74>
 800ef2c:	ad01      	add	r5, sp, #4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	463a      	mov	r2, r7
 800ef32:	4630      	mov	r0, r6
 800ef34:	f008 f88e 	bl	8017054 <memcpy>
 800ef38:	464a      	mov	r2, r9
 800ef3a:	68a0      	ldr	r0, [r4, #8]
 800ef3c:	19e9      	adds	r1, r5, r7
 800ef3e:	f008 f889 	bl	8017054 <memcpy>
 800ef42:	e7a1      	b.n	800ee88 <ucdr_serialize_endian_float+0x74>

0800ef44 <ucdr_deserialize_endian_float>:
 800ef44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef48:	460e      	mov	r6, r1
 800ef4a:	2104      	movs	r1, #4
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	4615      	mov	r5, r2
 800ef50:	f000 fc26 	bl	800f7a0 <ucdr_buffer_alignment>
 800ef54:	4601      	mov	r1, r0
 800ef56:	4620      	mov	r0, r4
 800ef58:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ef5c:	f000 fc66 	bl	800f82c <ucdr_advance_buffer>
 800ef60:	4620      	mov	r0, r4
 800ef62:	2104      	movs	r1, #4
 800ef64:	f000 fbbe 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d13c      	bne.n	800efe6 <ucdr_deserialize_endian_float+0xa2>
 800ef6c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ef70:	42bb      	cmp	r3, r7
 800ef72:	d933      	bls.n	800efdc <ucdr_deserialize_endian_float+0x98>
 800ef74:	6922      	ldr	r2, [r4, #16]
 800ef76:	eba3 0807 	sub.w	r8, r3, r7
 800ef7a:	4442      	add	r2, r8
 800ef7c:	f1c8 0a04 	rsb	sl, r8, #4
 800ef80:	4651      	mov	r1, sl
 800ef82:	4620      	mov	r0, r4
 800ef84:	60a3      	str	r3, [r4, #8]
 800ef86:	6122      	str	r2, [r4, #16]
 800ef88:	f000 fbb8 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d048      	beq.n	800f022 <ucdr_deserialize_endian_float+0xde>
 800ef90:	2e01      	cmp	r6, #1
 800ef92:	d061      	beq.n	800f058 <ucdr_deserialize_endian_float+0x114>
 800ef94:	78fb      	ldrb	r3, [r7, #3]
 800ef96:	702b      	strb	r3, [r5, #0]
 800ef98:	f1b8 0f00 	cmp.w	r8, #0
 800ef9c:	d050      	beq.n	800f040 <ucdr_deserialize_endian_float+0xfc>
 800ef9e:	78ba      	ldrb	r2, [r7, #2]
 800efa0:	f1b8 0f01 	cmp.w	r8, #1
 800efa4:	f105 0302 	add.w	r3, r5, #2
 800efa8:	706a      	strb	r2, [r5, #1]
 800efaa:	d04d      	beq.n	800f048 <ucdr_deserialize_endian_float+0x104>
 800efac:	787a      	ldrb	r2, [r7, #1]
 800efae:	f1b8 0f02 	cmp.w	r8, #2
 800efb2:	f105 0303 	add.w	r3, r5, #3
 800efb6:	70aa      	strb	r2, [r5, #2]
 800efb8:	d04a      	beq.n	800f050 <ucdr_deserialize_endian_float+0x10c>
 800efba:	783b      	ldrb	r3, [r7, #0]
 800efbc:	70eb      	strb	r3, [r5, #3]
 800efbe:	2104      	movs	r1, #4
 800efc0:	6923      	ldr	r3, [r4, #16]
 800efc2:	68a2      	ldr	r2, [r4, #8]
 800efc4:	7da0      	ldrb	r0, [r4, #22]
 800efc6:	440b      	add	r3, r1
 800efc8:	eba3 0308 	sub.w	r3, r3, r8
 800efcc:	4452      	add	r2, sl
 800efce:	7561      	strb	r1, [r4, #21]
 800efd0:	6123      	str	r3, [r4, #16]
 800efd2:	60a2      	str	r2, [r4, #8]
 800efd4:	f080 0001 	eor.w	r0, r0, #1
 800efd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efdc:	2104      	movs	r1, #4
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 fb8c 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800efe4:	b1a8      	cbz	r0, 800f012 <ucdr_deserialize_endian_float+0xce>
 800efe6:	2e01      	cmp	r6, #1
 800efe8:	68a3      	ldr	r3, [r4, #8]
 800efea:	d017      	beq.n	800f01c <ucdr_deserialize_endian_float+0xd8>
 800efec:	78db      	ldrb	r3, [r3, #3]
 800efee:	702b      	strb	r3, [r5, #0]
 800eff0:	68a3      	ldr	r3, [r4, #8]
 800eff2:	789b      	ldrb	r3, [r3, #2]
 800eff4:	706b      	strb	r3, [r5, #1]
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	785b      	ldrb	r3, [r3, #1]
 800effa:	70ab      	strb	r3, [r5, #2]
 800effc:	68a3      	ldr	r3, [r4, #8]
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	70eb      	strb	r3, [r5, #3]
 800f002:	2104      	movs	r1, #4
 800f004:	68a2      	ldr	r2, [r4, #8]
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	440a      	add	r2, r1
 800f00a:	440b      	add	r3, r1
 800f00c:	60a2      	str	r2, [r4, #8]
 800f00e:	6123      	str	r3, [r4, #16]
 800f010:	7561      	strb	r1, [r4, #21]
 800f012:	7da0      	ldrb	r0, [r4, #22]
 800f014:	f080 0001 	eor.w	r0, r0, #1
 800f018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	e7ef      	b.n	800f002 <ucdr_deserialize_endian_float+0xbe>
 800f022:	68a2      	ldr	r2, [r4, #8]
 800f024:	6923      	ldr	r3, [r4, #16]
 800f026:	7da0      	ldrb	r0, [r4, #22]
 800f028:	eba2 0208 	sub.w	r2, r2, r8
 800f02c:	eba3 0308 	sub.w	r3, r3, r8
 800f030:	f884 9015 	strb.w	r9, [r4, #21]
 800f034:	60a2      	str	r2, [r4, #8]
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	f080 0001 	eor.w	r0, r0, #1
 800f03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f040:	68a2      	ldr	r2, [r4, #8]
 800f042:	1cab      	adds	r3, r5, #2
 800f044:	7892      	ldrb	r2, [r2, #2]
 800f046:	706a      	strb	r2, [r5, #1]
 800f048:	68a2      	ldr	r2, [r4, #8]
 800f04a:	7852      	ldrb	r2, [r2, #1]
 800f04c:	f803 2b01 	strb.w	r2, [r3], #1
 800f050:	68a2      	ldr	r2, [r4, #8]
 800f052:	7812      	ldrb	r2, [r2, #0]
 800f054:	701a      	strb	r2, [r3, #0]
 800f056:	e7b2      	b.n	800efbe <ucdr_deserialize_endian_float+0x7a>
 800f058:	4639      	mov	r1, r7
 800f05a:	4642      	mov	r2, r8
 800f05c:	4628      	mov	r0, r5
 800f05e:	f007 fff9 	bl	8017054 <memcpy>
 800f062:	4652      	mov	r2, sl
 800f064:	68a1      	ldr	r1, [r4, #8]
 800f066:	eb05 0008 	add.w	r0, r5, r8
 800f06a:	f007 fff3 	bl	8017054 <memcpy>
 800f06e:	e7a6      	b.n	800efbe <ucdr_deserialize_endian_float+0x7a>

0800f070 <ucdr_serialize_double>:
 800f070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f074:	2108      	movs	r1, #8
 800f076:	b082      	sub	sp, #8
 800f078:	4604      	mov	r4, r0
 800f07a:	e9cd 2300 	strd	r2, r3, [sp]
 800f07e:	f000 fb8f 	bl	800f7a0 <ucdr_buffer_alignment>
 800f082:	4601      	mov	r1, r0
 800f084:	4620      	mov	r0, r4
 800f086:	7d67      	ldrb	r7, [r4, #21]
 800f088:	f000 fbd0 	bl	800f82c <ucdr_advance_buffer>
 800f08c:	4620      	mov	r0, r4
 800f08e:	2108      	movs	r1, #8
 800f090:	f000 fb28 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800f094:	2800      	cmp	r0, #0
 800f096:	d14e      	bne.n	800f136 <ucdr_serialize_double+0xc6>
 800f098:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f09c:	42ab      	cmp	r3, r5
 800f09e:	d945      	bls.n	800f12c <ucdr_serialize_double+0xbc>
 800f0a0:	6922      	ldr	r2, [r4, #16]
 800f0a2:	1b5e      	subs	r6, r3, r5
 800f0a4:	4432      	add	r2, r6
 800f0a6:	f1c6 0808 	rsb	r8, r6, #8
 800f0aa:	4641      	mov	r1, r8
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	60a3      	str	r3, [r4, #8]
 800f0b0:	6122      	str	r2, [r4, #16]
 800f0b2:	f000 fb23 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d074      	beq.n	800f1a4 <ucdr_serialize_double+0x134>
 800f0ba:	7d23      	ldrb	r3, [r4, #20]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	f000 809b 	beq.w	800f1f8 <ucdr_serialize_double+0x188>
 800f0c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0c6:	702b      	strb	r3, [r5, #0]
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	d078      	beq.n	800f1be <ucdr_serialize_double+0x14e>
 800f0cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f0d0:	2e01      	cmp	r6, #1
 800f0d2:	706b      	strb	r3, [r5, #1]
 800f0d4:	d077      	beq.n	800f1c6 <ucdr_serialize_double+0x156>
 800f0d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0da:	2e02      	cmp	r6, #2
 800f0dc:	70ab      	strb	r3, [r5, #2]
 800f0de:	d076      	beq.n	800f1ce <ucdr_serialize_double+0x15e>
 800f0e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0e4:	2e03      	cmp	r6, #3
 800f0e6:	70eb      	strb	r3, [r5, #3]
 800f0e8:	d075      	beq.n	800f1d6 <ucdr_serialize_double+0x166>
 800f0ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f0ee:	2e04      	cmp	r6, #4
 800f0f0:	712b      	strb	r3, [r5, #4]
 800f0f2:	d074      	beq.n	800f1de <ucdr_serialize_double+0x16e>
 800f0f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f0f8:	2e05      	cmp	r6, #5
 800f0fa:	716b      	strb	r3, [r5, #5]
 800f0fc:	d073      	beq.n	800f1e6 <ucdr_serialize_double+0x176>
 800f0fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f102:	2e06      	cmp	r6, #6
 800f104:	71ab      	strb	r3, [r5, #6]
 800f106:	d072      	beq.n	800f1ee <ucdr_serialize_double+0x17e>
 800f108:	f89d 3000 	ldrb.w	r3, [sp]
 800f10c:	71eb      	strb	r3, [r5, #7]
 800f10e:	2108      	movs	r1, #8
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	68a2      	ldr	r2, [r4, #8]
 800f114:	7da0      	ldrb	r0, [r4, #22]
 800f116:	440b      	add	r3, r1
 800f118:	1b9e      	subs	r6, r3, r6
 800f11a:	4442      	add	r2, r8
 800f11c:	f080 0001 	eor.w	r0, r0, #1
 800f120:	6126      	str	r6, [r4, #16]
 800f122:	60a2      	str	r2, [r4, #8]
 800f124:	7561      	strb	r1, [r4, #21]
 800f126:	b002      	add	sp, #8
 800f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12c:	2108      	movs	r1, #8
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 fae4 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f134:	b350      	cbz	r0, 800f18c <ucdr_serialize_double+0x11c>
 800f136:	7d23      	ldrb	r3, [r4, #20]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d02d      	beq.n	800f198 <ucdr_serialize_double+0x128>
 800f13c:	68a3      	ldr	r3, [r4, #8]
 800f13e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f146:	7019      	strb	r1, [r3, #0]
 800f148:	68a3      	ldr	r3, [r4, #8]
 800f14a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f14e:	705a      	strb	r2, [r3, #1]
 800f150:	68a3      	ldr	r3, [r4, #8]
 800f152:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f156:	7099      	strb	r1, [r3, #2]
 800f158:	68a3      	ldr	r3, [r4, #8]
 800f15a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f15e:	70da      	strb	r2, [r3, #3]
 800f160:	68a3      	ldr	r3, [r4, #8]
 800f162:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f166:	7119      	strb	r1, [r3, #4]
 800f168:	68a3      	ldr	r3, [r4, #8]
 800f16a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f16e:	715a      	strb	r2, [r3, #5]
 800f170:	68a3      	ldr	r3, [r4, #8]
 800f172:	f89d 2000 	ldrb.w	r2, [sp]
 800f176:	7199      	strb	r1, [r3, #6]
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	71da      	strb	r2, [r3, #7]
 800f17c:	2108      	movs	r1, #8
 800f17e:	68a2      	ldr	r2, [r4, #8]
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	440a      	add	r2, r1
 800f184:	440b      	add	r3, r1
 800f186:	60a2      	str	r2, [r4, #8]
 800f188:	6123      	str	r3, [r4, #16]
 800f18a:	7561      	strb	r1, [r4, #21]
 800f18c:	7da0      	ldrb	r0, [r4, #22]
 800f18e:	f080 0001 	eor.w	r0, r0, #1
 800f192:	b002      	add	sp, #8
 800f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f198:	466b      	mov	r3, sp
 800f19a:	68a2      	ldr	r2, [r4, #8]
 800f19c:	cb03      	ldmia	r3!, {r0, r1}
 800f19e:	6010      	str	r0, [r2, #0]
 800f1a0:	6051      	str	r1, [r2, #4]
 800f1a2:	e7eb      	b.n	800f17c <ucdr_serialize_double+0x10c>
 800f1a4:	68a2      	ldr	r2, [r4, #8]
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	7da0      	ldrb	r0, [r4, #22]
 800f1aa:	1b92      	subs	r2, r2, r6
 800f1ac:	f080 0001 	eor.w	r0, r0, #1
 800f1b0:	1b9e      	subs	r6, r3, r6
 800f1b2:	7567      	strb	r7, [r4, #21]
 800f1b4:	60a2      	str	r2, [r4, #8]
 800f1b6:	6126      	str	r6, [r4, #16]
 800f1b8:	b002      	add	sp, #8
 800f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1be:	68a3      	ldr	r3, [r4, #8]
 800f1c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1c4:	701a      	strb	r2, [r3, #0]
 800f1c6:	68a3      	ldr	r3, [r4, #8]
 800f1c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1d4:	701a      	strb	r2, [r3, #0]
 800f1d6:	68a3      	ldr	r3, [r4, #8]
 800f1d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	68a3      	ldr	r3, [r4, #8]
 800f1e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	68a3      	ldr	r3, [r4, #8]
 800f1e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f1ec:	701a      	strb	r2, [r3, #0]
 800f1ee:	68a3      	ldr	r3, [r4, #8]
 800f1f0:	f89d 2000 	ldrb.w	r2, [sp]
 800f1f4:	701a      	strb	r2, [r3, #0]
 800f1f6:	e78a      	b.n	800f10e <ucdr_serialize_double+0x9e>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	466d      	mov	r5, sp
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	4629      	mov	r1, r5
 800f200:	f007 ff28 	bl	8017054 <memcpy>
 800f204:	4642      	mov	r2, r8
 800f206:	68a0      	ldr	r0, [r4, #8]
 800f208:	19a9      	adds	r1, r5, r6
 800f20a:	f007 ff23 	bl	8017054 <memcpy>
 800f20e:	e77e      	b.n	800f10e <ucdr_serialize_double+0x9e>

0800f210 <ucdr_serialize_endian_double>:
 800f210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f214:	460d      	mov	r5, r1
 800f216:	b083      	sub	sp, #12
 800f218:	2108      	movs	r1, #8
 800f21a:	4604      	mov	r4, r0
 800f21c:	e9cd 2300 	strd	r2, r3, [sp]
 800f220:	f000 fabe 	bl	800f7a0 <ucdr_buffer_alignment>
 800f224:	4601      	mov	r1, r0
 800f226:	4620      	mov	r0, r4
 800f228:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f22c:	f000 fafe 	bl	800f82c <ucdr_advance_buffer>
 800f230:	4620      	mov	r0, r4
 800f232:	2108      	movs	r1, #8
 800f234:	f000 fa56 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d14d      	bne.n	800f2d8 <ucdr_serialize_endian_double+0xc8>
 800f23c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f240:	42b3      	cmp	r3, r6
 800f242:	d944      	bls.n	800f2ce <ucdr_serialize_endian_double+0xbe>
 800f244:	6922      	ldr	r2, [r4, #16]
 800f246:	1b9f      	subs	r7, r3, r6
 800f248:	443a      	add	r2, r7
 800f24a:	f1c7 0908 	rsb	r9, r7, #8
 800f24e:	4649      	mov	r1, r9
 800f250:	4620      	mov	r0, r4
 800f252:	60a3      	str	r3, [r4, #8]
 800f254:	6122      	str	r2, [r4, #16]
 800f256:	f000 fa51 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d072      	beq.n	800f344 <ucdr_serialize_endian_double+0x134>
 800f25e:	2d01      	cmp	r5, #1
 800f260:	f000 809b 	beq.w	800f39a <ucdr_serialize_endian_double+0x18a>
 800f264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f268:	7033      	strb	r3, [r6, #0]
 800f26a:	2f00      	cmp	r7, #0
 800f26c:	d078      	beq.n	800f360 <ucdr_serialize_endian_double+0x150>
 800f26e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f272:	2f01      	cmp	r7, #1
 800f274:	7073      	strb	r3, [r6, #1]
 800f276:	d077      	beq.n	800f368 <ucdr_serialize_endian_double+0x158>
 800f278:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f27c:	2f02      	cmp	r7, #2
 800f27e:	70b3      	strb	r3, [r6, #2]
 800f280:	d076      	beq.n	800f370 <ucdr_serialize_endian_double+0x160>
 800f282:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f286:	2f03      	cmp	r7, #3
 800f288:	70f3      	strb	r3, [r6, #3]
 800f28a:	d075      	beq.n	800f378 <ucdr_serialize_endian_double+0x168>
 800f28c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f290:	2f04      	cmp	r7, #4
 800f292:	7133      	strb	r3, [r6, #4]
 800f294:	d074      	beq.n	800f380 <ucdr_serialize_endian_double+0x170>
 800f296:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f29a:	2f05      	cmp	r7, #5
 800f29c:	7173      	strb	r3, [r6, #5]
 800f29e:	d073      	beq.n	800f388 <ucdr_serialize_endian_double+0x178>
 800f2a0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f2a4:	2f06      	cmp	r7, #6
 800f2a6:	71b3      	strb	r3, [r6, #6]
 800f2a8:	d072      	beq.n	800f390 <ucdr_serialize_endian_double+0x180>
 800f2aa:	f89d 3000 	ldrb.w	r3, [sp]
 800f2ae:	71f3      	strb	r3, [r6, #7]
 800f2b0:	2108      	movs	r1, #8
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	68a2      	ldr	r2, [r4, #8]
 800f2b6:	7da0      	ldrb	r0, [r4, #22]
 800f2b8:	440b      	add	r3, r1
 800f2ba:	1bdf      	subs	r7, r3, r7
 800f2bc:	444a      	add	r2, r9
 800f2be:	f080 0001 	eor.w	r0, r0, #1
 800f2c2:	6127      	str	r7, [r4, #16]
 800f2c4:	60a2      	str	r2, [r4, #8]
 800f2c6:	7561      	strb	r1, [r4, #21]
 800f2c8:	b003      	add	sp, #12
 800f2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ce:	2108      	movs	r1, #8
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fa13 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f2d6:	b348      	cbz	r0, 800f32c <ucdr_serialize_endian_double+0x11c>
 800f2d8:	2d01      	cmp	r5, #1
 800f2da:	d02d      	beq.n	800f338 <ucdr_serialize_endian_double+0x128>
 800f2dc:	68a3      	ldr	r3, [r4, #8]
 800f2de:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f2e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2e6:	7019      	strb	r1, [r3, #0]
 800f2e8:	68a3      	ldr	r3, [r4, #8]
 800f2ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f2ee:	705a      	strb	r2, [r3, #1]
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2f6:	7099      	strb	r1, [r3, #2]
 800f2f8:	68a3      	ldr	r3, [r4, #8]
 800f2fa:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f2fe:	70da      	strb	r2, [r3, #3]
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f306:	7119      	strb	r1, [r3, #4]
 800f308:	68a3      	ldr	r3, [r4, #8]
 800f30a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f30e:	715a      	strb	r2, [r3, #5]
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	f89d 2000 	ldrb.w	r2, [sp]
 800f316:	7199      	strb	r1, [r3, #6]
 800f318:	68a3      	ldr	r3, [r4, #8]
 800f31a:	71da      	strb	r2, [r3, #7]
 800f31c:	2108      	movs	r1, #8
 800f31e:	68a2      	ldr	r2, [r4, #8]
 800f320:	6923      	ldr	r3, [r4, #16]
 800f322:	440a      	add	r2, r1
 800f324:	440b      	add	r3, r1
 800f326:	60a2      	str	r2, [r4, #8]
 800f328:	6123      	str	r3, [r4, #16]
 800f32a:	7561      	strb	r1, [r4, #21]
 800f32c:	7da0      	ldrb	r0, [r4, #22]
 800f32e:	f080 0001 	eor.w	r0, r0, #1
 800f332:	b003      	add	sp, #12
 800f334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f338:	466b      	mov	r3, sp
 800f33a:	68a2      	ldr	r2, [r4, #8]
 800f33c:	cb03      	ldmia	r3!, {r0, r1}
 800f33e:	6010      	str	r0, [r2, #0]
 800f340:	6051      	str	r1, [r2, #4]
 800f342:	e7eb      	b.n	800f31c <ucdr_serialize_endian_double+0x10c>
 800f344:	68a2      	ldr	r2, [r4, #8]
 800f346:	6923      	ldr	r3, [r4, #16]
 800f348:	7da0      	ldrb	r0, [r4, #22]
 800f34a:	1bd2      	subs	r2, r2, r7
 800f34c:	f080 0001 	eor.w	r0, r0, #1
 800f350:	1bdf      	subs	r7, r3, r7
 800f352:	f884 8015 	strb.w	r8, [r4, #21]
 800f356:	60a2      	str	r2, [r4, #8]
 800f358:	6127      	str	r7, [r4, #16]
 800f35a:	b003      	add	sp, #12
 800f35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f366:	701a      	strb	r2, [r3, #0]
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f36e:	701a      	strb	r2, [r3, #0]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f376:	701a      	strb	r2, [r3, #0]
 800f378:	68a3      	ldr	r3, [r4, #8]
 800f37a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f37e:	701a      	strb	r2, [r3, #0]
 800f380:	68a3      	ldr	r3, [r4, #8]
 800f382:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f386:	701a      	strb	r2, [r3, #0]
 800f388:	68a3      	ldr	r3, [r4, #8]
 800f38a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f38e:	701a      	strb	r2, [r3, #0]
 800f390:	68a3      	ldr	r3, [r4, #8]
 800f392:	f89d 2000 	ldrb.w	r2, [sp]
 800f396:	701a      	strb	r2, [r3, #0]
 800f398:	e78a      	b.n	800f2b0 <ucdr_serialize_endian_double+0xa0>
 800f39a:	466d      	mov	r5, sp
 800f39c:	463a      	mov	r2, r7
 800f39e:	4629      	mov	r1, r5
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	f007 fe57 	bl	8017054 <memcpy>
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	68a0      	ldr	r0, [r4, #8]
 800f3aa:	19e9      	adds	r1, r5, r7
 800f3ac:	f007 fe52 	bl	8017054 <memcpy>
 800f3b0:	e77e      	b.n	800f2b0 <ucdr_serialize_endian_double+0xa0>
 800f3b2:	bf00      	nop

0800f3b4 <ucdr_deserialize_double>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	460d      	mov	r5, r1
 800f3ba:	2108      	movs	r1, #8
 800f3bc:	4604      	mov	r4, r0
 800f3be:	f000 f9ef 	bl	800f7a0 <ucdr_buffer_alignment>
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f3ca:	f000 fa2f 	bl	800f82c <ucdr_advance_buffer>
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	2108      	movs	r1, #8
 800f3d2:	f000 f987 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d151      	bne.n	800f47e <ucdr_deserialize_double+0xca>
 800f3da:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f3de:	42b3      	cmp	r3, r6
 800f3e0:	d948      	bls.n	800f474 <ucdr_deserialize_double+0xc0>
 800f3e2:	6922      	ldr	r2, [r4, #16]
 800f3e4:	1b9f      	subs	r7, r3, r6
 800f3e6:	443a      	add	r2, r7
 800f3e8:	f1c7 0808 	rsb	r8, r7, #8
 800f3ec:	4641      	mov	r1, r8
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	60a3      	str	r3, [r4, #8]
 800f3f2:	6122      	str	r2, [r4, #16]
 800f3f4:	f000 f982 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d06d      	beq.n	800f4d8 <ucdr_deserialize_double+0x124>
 800f3fc:	7d23      	ldrb	r3, [r4, #20]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	f000 8093 	beq.w	800f52a <ucdr_deserialize_double+0x176>
 800f404:	79f3      	ldrb	r3, [r6, #7]
 800f406:	702b      	strb	r3, [r5, #0]
 800f408:	2f00      	cmp	r7, #0
 800f40a:	d072      	beq.n	800f4f2 <ucdr_deserialize_double+0x13e>
 800f40c:	79b2      	ldrb	r2, [r6, #6]
 800f40e:	2f01      	cmp	r7, #1
 800f410:	f105 0302 	add.w	r3, r5, #2
 800f414:	706a      	strb	r2, [r5, #1]
 800f416:	d070      	beq.n	800f4fa <ucdr_deserialize_double+0x146>
 800f418:	7972      	ldrb	r2, [r6, #5]
 800f41a:	2f02      	cmp	r7, #2
 800f41c:	f105 0303 	add.w	r3, r5, #3
 800f420:	70aa      	strb	r2, [r5, #2]
 800f422:	d06e      	beq.n	800f502 <ucdr_deserialize_double+0x14e>
 800f424:	7932      	ldrb	r2, [r6, #4]
 800f426:	2f03      	cmp	r7, #3
 800f428:	f105 0304 	add.w	r3, r5, #4
 800f42c:	70ea      	strb	r2, [r5, #3]
 800f42e:	d06c      	beq.n	800f50a <ucdr_deserialize_double+0x156>
 800f430:	78f2      	ldrb	r2, [r6, #3]
 800f432:	2f04      	cmp	r7, #4
 800f434:	f105 0305 	add.w	r3, r5, #5
 800f438:	712a      	strb	r2, [r5, #4]
 800f43a:	d06a      	beq.n	800f512 <ucdr_deserialize_double+0x15e>
 800f43c:	78b2      	ldrb	r2, [r6, #2]
 800f43e:	2f05      	cmp	r7, #5
 800f440:	f105 0306 	add.w	r3, r5, #6
 800f444:	716a      	strb	r2, [r5, #5]
 800f446:	d068      	beq.n	800f51a <ucdr_deserialize_double+0x166>
 800f448:	7872      	ldrb	r2, [r6, #1]
 800f44a:	2f06      	cmp	r7, #6
 800f44c:	f105 0307 	add.w	r3, r5, #7
 800f450:	71aa      	strb	r2, [r5, #6]
 800f452:	d066      	beq.n	800f522 <ucdr_deserialize_double+0x16e>
 800f454:	7833      	ldrb	r3, [r6, #0]
 800f456:	71eb      	strb	r3, [r5, #7]
 800f458:	2108      	movs	r1, #8
 800f45a:	6923      	ldr	r3, [r4, #16]
 800f45c:	68a2      	ldr	r2, [r4, #8]
 800f45e:	7da0      	ldrb	r0, [r4, #22]
 800f460:	440b      	add	r3, r1
 800f462:	1bdf      	subs	r7, r3, r7
 800f464:	4442      	add	r2, r8
 800f466:	7561      	strb	r1, [r4, #21]
 800f468:	6127      	str	r7, [r4, #16]
 800f46a:	60a2      	str	r2, [r4, #8]
 800f46c:	f080 0001 	eor.w	r0, r0, #1
 800f470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f474:	2108      	movs	r1, #8
 800f476:	4620      	mov	r0, r4
 800f478:	f000 f940 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f47c:	b310      	cbz	r0, 800f4c4 <ucdr_deserialize_double+0x110>
 800f47e:	7d23      	ldrb	r3, [r4, #20]
 800f480:	2b01      	cmp	r3, #1
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	d023      	beq.n	800f4ce <ucdr_deserialize_double+0x11a>
 800f486:	79db      	ldrb	r3, [r3, #7]
 800f488:	702b      	strb	r3, [r5, #0]
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	799b      	ldrb	r3, [r3, #6]
 800f48e:	706b      	strb	r3, [r5, #1]
 800f490:	68a3      	ldr	r3, [r4, #8]
 800f492:	795b      	ldrb	r3, [r3, #5]
 800f494:	70ab      	strb	r3, [r5, #2]
 800f496:	68a3      	ldr	r3, [r4, #8]
 800f498:	791b      	ldrb	r3, [r3, #4]
 800f49a:	70eb      	strb	r3, [r5, #3]
 800f49c:	68a3      	ldr	r3, [r4, #8]
 800f49e:	78db      	ldrb	r3, [r3, #3]
 800f4a0:	712b      	strb	r3, [r5, #4]
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	789b      	ldrb	r3, [r3, #2]
 800f4a6:	716b      	strb	r3, [r5, #5]
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	785b      	ldrb	r3, [r3, #1]
 800f4ac:	71ab      	strb	r3, [r5, #6]
 800f4ae:	68a3      	ldr	r3, [r4, #8]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	71eb      	strb	r3, [r5, #7]
 800f4b4:	2108      	movs	r1, #8
 800f4b6:	68a2      	ldr	r2, [r4, #8]
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	440a      	add	r2, r1
 800f4bc:	440b      	add	r3, r1
 800f4be:	60a2      	str	r2, [r4, #8]
 800f4c0:	6123      	str	r3, [r4, #16]
 800f4c2:	7561      	strb	r1, [r4, #21]
 800f4c4:	7da0      	ldrb	r0, [r4, #22]
 800f4c6:	f080 0001 	eor.w	r0, r0, #1
 800f4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	602a      	str	r2, [r5, #0]
 800f4d4:	606b      	str	r3, [r5, #4]
 800f4d6:	e7ed      	b.n	800f4b4 <ucdr_deserialize_double+0x100>
 800f4d8:	68a2      	ldr	r2, [r4, #8]
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	7da0      	ldrb	r0, [r4, #22]
 800f4de:	1bd2      	subs	r2, r2, r7
 800f4e0:	f884 9015 	strb.w	r9, [r4, #21]
 800f4e4:	1bdf      	subs	r7, r3, r7
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	6127      	str	r7, [r4, #16]
 800f4ea:	f080 0001 	eor.w	r0, r0, #1
 800f4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4f2:	68a2      	ldr	r2, [r4, #8]
 800f4f4:	1cab      	adds	r3, r5, #2
 800f4f6:	7992      	ldrb	r2, [r2, #6]
 800f4f8:	706a      	strb	r2, [r5, #1]
 800f4fa:	68a2      	ldr	r2, [r4, #8]
 800f4fc:	7952      	ldrb	r2, [r2, #5]
 800f4fe:	f803 2b01 	strb.w	r2, [r3], #1
 800f502:	68a2      	ldr	r2, [r4, #8]
 800f504:	7912      	ldrb	r2, [r2, #4]
 800f506:	f803 2b01 	strb.w	r2, [r3], #1
 800f50a:	68a2      	ldr	r2, [r4, #8]
 800f50c:	78d2      	ldrb	r2, [r2, #3]
 800f50e:	f803 2b01 	strb.w	r2, [r3], #1
 800f512:	68a2      	ldr	r2, [r4, #8]
 800f514:	7892      	ldrb	r2, [r2, #2]
 800f516:	f803 2b01 	strb.w	r2, [r3], #1
 800f51a:	68a2      	ldr	r2, [r4, #8]
 800f51c:	7852      	ldrb	r2, [r2, #1]
 800f51e:	f803 2b01 	strb.w	r2, [r3], #1
 800f522:	68a2      	ldr	r2, [r4, #8]
 800f524:	7812      	ldrb	r2, [r2, #0]
 800f526:	701a      	strb	r2, [r3, #0]
 800f528:	e796      	b.n	800f458 <ucdr_deserialize_double+0xa4>
 800f52a:	4631      	mov	r1, r6
 800f52c:	463a      	mov	r2, r7
 800f52e:	4628      	mov	r0, r5
 800f530:	f007 fd90 	bl	8017054 <memcpy>
 800f534:	4642      	mov	r2, r8
 800f536:	68a1      	ldr	r1, [r4, #8]
 800f538:	19e8      	adds	r0, r5, r7
 800f53a:	f007 fd8b 	bl	8017054 <memcpy>
 800f53e:	e78b      	b.n	800f458 <ucdr_deserialize_double+0xa4>

0800f540 <ucdr_deserialize_endian_double>:
 800f540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f544:	460e      	mov	r6, r1
 800f546:	2108      	movs	r1, #8
 800f548:	4604      	mov	r4, r0
 800f54a:	4615      	mov	r5, r2
 800f54c:	f000 f928 	bl	800f7a0 <ucdr_buffer_alignment>
 800f550:	4601      	mov	r1, r0
 800f552:	4620      	mov	r0, r4
 800f554:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f558:	f000 f968 	bl	800f82c <ucdr_advance_buffer>
 800f55c:	4620      	mov	r0, r4
 800f55e:	2108      	movs	r1, #8
 800f560:	f000 f8c0 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800f564:	2800      	cmp	r0, #0
 800f566:	d159      	bne.n	800f61c <ucdr_deserialize_endian_double+0xdc>
 800f568:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f56c:	42bb      	cmp	r3, r7
 800f56e:	d950      	bls.n	800f612 <ucdr_deserialize_endian_double+0xd2>
 800f570:	6922      	ldr	r2, [r4, #16]
 800f572:	eba3 0807 	sub.w	r8, r3, r7
 800f576:	4442      	add	r2, r8
 800f578:	f1c8 0a08 	rsb	sl, r8, #8
 800f57c:	4651      	mov	r1, sl
 800f57e:	4620      	mov	r0, r4
 800f580:	60a3      	str	r3, [r4, #8]
 800f582:	6122      	str	r2, [r4, #16]
 800f584:	f000 f8ba 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d073      	beq.n	800f674 <ucdr_deserialize_endian_double+0x134>
 800f58c:	2e01      	cmp	r6, #1
 800f58e:	f000 809c 	beq.w	800f6ca <ucdr_deserialize_endian_double+0x18a>
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	702b      	strb	r3, [r5, #0]
 800f596:	f1b8 0f00 	cmp.w	r8, #0
 800f59a:	d07a      	beq.n	800f692 <ucdr_deserialize_endian_double+0x152>
 800f59c:	79ba      	ldrb	r2, [r7, #6]
 800f59e:	f1b8 0f01 	cmp.w	r8, #1
 800f5a2:	f105 0302 	add.w	r3, r5, #2
 800f5a6:	706a      	strb	r2, [r5, #1]
 800f5a8:	d077      	beq.n	800f69a <ucdr_deserialize_endian_double+0x15a>
 800f5aa:	797a      	ldrb	r2, [r7, #5]
 800f5ac:	f1b8 0f02 	cmp.w	r8, #2
 800f5b0:	f105 0303 	add.w	r3, r5, #3
 800f5b4:	70aa      	strb	r2, [r5, #2]
 800f5b6:	d074      	beq.n	800f6a2 <ucdr_deserialize_endian_double+0x162>
 800f5b8:	793a      	ldrb	r2, [r7, #4]
 800f5ba:	f1b8 0f03 	cmp.w	r8, #3
 800f5be:	f105 0304 	add.w	r3, r5, #4
 800f5c2:	70ea      	strb	r2, [r5, #3]
 800f5c4:	d071      	beq.n	800f6aa <ucdr_deserialize_endian_double+0x16a>
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	f1b8 0f04 	cmp.w	r8, #4
 800f5cc:	f105 0305 	add.w	r3, r5, #5
 800f5d0:	712a      	strb	r2, [r5, #4]
 800f5d2:	d06e      	beq.n	800f6b2 <ucdr_deserialize_endian_double+0x172>
 800f5d4:	78ba      	ldrb	r2, [r7, #2]
 800f5d6:	f1b8 0f05 	cmp.w	r8, #5
 800f5da:	f105 0306 	add.w	r3, r5, #6
 800f5de:	716a      	strb	r2, [r5, #5]
 800f5e0:	d06b      	beq.n	800f6ba <ucdr_deserialize_endian_double+0x17a>
 800f5e2:	787a      	ldrb	r2, [r7, #1]
 800f5e4:	f1b8 0f06 	cmp.w	r8, #6
 800f5e8:	f105 0307 	add.w	r3, r5, #7
 800f5ec:	71aa      	strb	r2, [r5, #6]
 800f5ee:	d068      	beq.n	800f6c2 <ucdr_deserialize_endian_double+0x182>
 800f5f0:	783b      	ldrb	r3, [r7, #0]
 800f5f2:	71eb      	strb	r3, [r5, #7]
 800f5f4:	2108      	movs	r1, #8
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	68a2      	ldr	r2, [r4, #8]
 800f5fa:	7da0      	ldrb	r0, [r4, #22]
 800f5fc:	440b      	add	r3, r1
 800f5fe:	eba3 0308 	sub.w	r3, r3, r8
 800f602:	4452      	add	r2, sl
 800f604:	7561      	strb	r1, [r4, #21]
 800f606:	6123      	str	r3, [r4, #16]
 800f608:	60a2      	str	r2, [r4, #8]
 800f60a:	f080 0001 	eor.w	r0, r0, #1
 800f60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f612:	2108      	movs	r1, #8
 800f614:	4620      	mov	r0, r4
 800f616:	f000 f871 	bl	800f6fc <ucdr_check_final_buffer_behavior>
 800f61a:	b308      	cbz	r0, 800f660 <ucdr_deserialize_endian_double+0x120>
 800f61c:	2e01      	cmp	r6, #1
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	d023      	beq.n	800f66a <ucdr_deserialize_endian_double+0x12a>
 800f622:	79db      	ldrb	r3, [r3, #7]
 800f624:	702b      	strb	r3, [r5, #0]
 800f626:	68a3      	ldr	r3, [r4, #8]
 800f628:	799b      	ldrb	r3, [r3, #6]
 800f62a:	706b      	strb	r3, [r5, #1]
 800f62c:	68a3      	ldr	r3, [r4, #8]
 800f62e:	795b      	ldrb	r3, [r3, #5]
 800f630:	70ab      	strb	r3, [r5, #2]
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	791b      	ldrb	r3, [r3, #4]
 800f636:	70eb      	strb	r3, [r5, #3]
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	78db      	ldrb	r3, [r3, #3]
 800f63c:	712b      	strb	r3, [r5, #4]
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	789b      	ldrb	r3, [r3, #2]
 800f642:	716b      	strb	r3, [r5, #5]
 800f644:	68a3      	ldr	r3, [r4, #8]
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	71ab      	strb	r3, [r5, #6]
 800f64a:	68a3      	ldr	r3, [r4, #8]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	71eb      	strb	r3, [r5, #7]
 800f650:	2108      	movs	r1, #8
 800f652:	68a2      	ldr	r2, [r4, #8]
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	440a      	add	r2, r1
 800f658:	440b      	add	r3, r1
 800f65a:	60a2      	str	r2, [r4, #8]
 800f65c:	6123      	str	r3, [r4, #16]
 800f65e:	7561      	strb	r1, [r4, #21]
 800f660:	7da0      	ldrb	r0, [r4, #22]
 800f662:	f080 0001 	eor.w	r0, r0, #1
 800f666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	602a      	str	r2, [r5, #0]
 800f670:	606b      	str	r3, [r5, #4]
 800f672:	e7ed      	b.n	800f650 <ucdr_deserialize_endian_double+0x110>
 800f674:	68a2      	ldr	r2, [r4, #8]
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	7da0      	ldrb	r0, [r4, #22]
 800f67a:	eba2 0208 	sub.w	r2, r2, r8
 800f67e:	eba3 0308 	sub.w	r3, r3, r8
 800f682:	f884 9015 	strb.w	r9, [r4, #21]
 800f686:	60a2      	str	r2, [r4, #8]
 800f688:	6123      	str	r3, [r4, #16]
 800f68a:	f080 0001 	eor.w	r0, r0, #1
 800f68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f692:	68a2      	ldr	r2, [r4, #8]
 800f694:	1cab      	adds	r3, r5, #2
 800f696:	7992      	ldrb	r2, [r2, #6]
 800f698:	706a      	strb	r2, [r5, #1]
 800f69a:	68a2      	ldr	r2, [r4, #8]
 800f69c:	7952      	ldrb	r2, [r2, #5]
 800f69e:	f803 2b01 	strb.w	r2, [r3], #1
 800f6a2:	68a2      	ldr	r2, [r4, #8]
 800f6a4:	7912      	ldrb	r2, [r2, #4]
 800f6a6:	f803 2b01 	strb.w	r2, [r3], #1
 800f6aa:	68a2      	ldr	r2, [r4, #8]
 800f6ac:	78d2      	ldrb	r2, [r2, #3]
 800f6ae:	f803 2b01 	strb.w	r2, [r3], #1
 800f6b2:	68a2      	ldr	r2, [r4, #8]
 800f6b4:	7892      	ldrb	r2, [r2, #2]
 800f6b6:	f803 2b01 	strb.w	r2, [r3], #1
 800f6ba:	68a2      	ldr	r2, [r4, #8]
 800f6bc:	7852      	ldrb	r2, [r2, #1]
 800f6be:	f803 2b01 	strb.w	r2, [r3], #1
 800f6c2:	68a2      	ldr	r2, [r4, #8]
 800f6c4:	7812      	ldrb	r2, [r2, #0]
 800f6c6:	701a      	strb	r2, [r3, #0]
 800f6c8:	e794      	b.n	800f5f4 <ucdr_deserialize_endian_double+0xb4>
 800f6ca:	4639      	mov	r1, r7
 800f6cc:	4642      	mov	r2, r8
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	f007 fcc0 	bl	8017054 <memcpy>
 800f6d4:	4652      	mov	r2, sl
 800f6d6:	68a1      	ldr	r1, [r4, #8]
 800f6d8:	eb05 0008 	add.w	r0, r5, r8
 800f6dc:	f007 fcba 	bl	8017054 <memcpy>
 800f6e0:	e788      	b.n	800f5f4 <ucdr_deserialize_endian_double+0xb4>
 800f6e2:	bf00      	nop

0800f6e4 <ucdr_check_buffer_available_for>:
 800f6e4:	7d83      	ldrb	r3, [r0, #22]
 800f6e6:	b93b      	cbnz	r3, 800f6f8 <ucdr_check_buffer_available_for+0x14>
 800f6e8:	6883      	ldr	r3, [r0, #8]
 800f6ea:	6840      	ldr	r0, [r0, #4]
 800f6ec:	4419      	add	r1, r3
 800f6ee:	4288      	cmp	r0, r1
 800f6f0:	bf34      	ite	cc
 800f6f2:	2000      	movcc	r0, #0
 800f6f4:	2001      	movcs	r0, #1
 800f6f6:	4770      	bx	lr
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	4770      	bx	lr

0800f6fc <ucdr_check_final_buffer_behavior>:
 800f6fc:	7d83      	ldrb	r3, [r0, #22]
 800f6fe:	b943      	cbnz	r3, 800f712 <ucdr_check_final_buffer_behavior+0x16>
 800f700:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f704:	4291      	cmp	r1, r2
 800f706:	b510      	push	{r4, lr}
 800f708:	4604      	mov	r4, r0
 800f70a:	d205      	bcs.n	800f718 <ucdr_check_final_buffer_behavior+0x1c>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4618      	mov	r0, r3
 800f710:	bd10      	pop	{r4, pc}
 800f712:	2300      	movs	r3, #0
 800f714:	4618      	mov	r0, r3
 800f716:	4770      	bx	lr
 800f718:	6982      	ldr	r2, [r0, #24]
 800f71a:	b13a      	cbz	r2, 800f72c <ucdr_check_final_buffer_behavior+0x30>
 800f71c:	69c1      	ldr	r1, [r0, #28]
 800f71e:	4790      	blx	r2
 800f720:	f080 0301 	eor.w	r3, r0, #1
 800f724:	b2db      	uxtb	r3, r3
 800f726:	75a0      	strb	r0, [r4, #22]
 800f728:	4618      	mov	r0, r3
 800f72a:	bd10      	pop	{r4, pc}
 800f72c:	2001      	movs	r0, #1
 800f72e:	75a0      	strb	r0, [r4, #22]
 800f730:	e7fa      	b.n	800f728 <ucdr_check_final_buffer_behavior+0x2c>
 800f732:	bf00      	nop

0800f734 <ucdr_set_on_full_buffer_callback>:
 800f734:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop

0800f73c <ucdr_init_buffer_origin_offset_endian>:
 800f73c:	b430      	push	{r4, r5}
 800f73e:	2400      	movs	r4, #0
 800f740:	9d02      	ldr	r5, [sp, #8]
 800f742:	440a      	add	r2, r1
 800f744:	6001      	str	r1, [r0, #0]
 800f746:	60c3      	str	r3, [r0, #12]
 800f748:	4429      	add	r1, r5
 800f74a:	441d      	add	r5, r3
 800f74c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f750:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800f754:	6105      	str	r5, [r0, #16]
 800f756:	7544      	strb	r4, [r0, #21]
 800f758:	7584      	strb	r4, [r0, #22]
 800f75a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f75e:	bc30      	pop	{r4, r5}
 800f760:	7503      	strb	r3, [r0, #20]
 800f762:	4770      	bx	lr

0800f764 <ucdr_init_buffer_origin_offset>:
 800f764:	b530      	push	{r4, r5, lr}
 800f766:	2501      	movs	r5, #1
 800f768:	b083      	sub	sp, #12
 800f76a:	9c06      	ldr	r4, [sp, #24]
 800f76c:	e9cd 4500 	strd	r4, r5, [sp]
 800f770:	f7ff ffe4 	bl	800f73c <ucdr_init_buffer_origin_offset_endian>
 800f774:	b003      	add	sp, #12
 800f776:	bd30      	pop	{r4, r5, pc}

0800f778 <ucdr_init_buffer_origin>:
 800f778:	b510      	push	{r4, lr}
 800f77a:	2400      	movs	r4, #0
 800f77c:	b082      	sub	sp, #8
 800f77e:	9400      	str	r4, [sp, #0]
 800f780:	f7ff fff0 	bl	800f764 <ucdr_init_buffer_origin_offset>
 800f784:	b002      	add	sp, #8
 800f786:	bd10      	pop	{r4, pc}

0800f788 <ucdr_init_buffer>:
 800f788:	2300      	movs	r3, #0
 800f78a:	f7ff bff5 	b.w	800f778 <ucdr_init_buffer_origin>
 800f78e:	bf00      	nop

0800f790 <ucdr_alignment>:
 800f790:	fbb0 f3f1 	udiv	r3, r0, r1
 800f794:	fb03 0311 	mls	r3, r3, r1, r0
 800f798:	1e48      	subs	r0, r1, #1
 800f79a:	1ac9      	subs	r1, r1, r3
 800f79c:	4008      	ands	r0, r1
 800f79e:	4770      	bx	lr

0800f7a0 <ucdr_buffer_alignment>:
 800f7a0:	7d43      	ldrb	r3, [r0, #21]
 800f7a2:	428b      	cmp	r3, r1
 800f7a4:	d209      	bcs.n	800f7ba <ucdr_buffer_alignment+0x1a>
 800f7a6:	6903      	ldr	r3, [r0, #16]
 800f7a8:	1e4a      	subs	r2, r1, #1
 800f7aa:	fbb3 f0f1 	udiv	r0, r3, r1
 800f7ae:	fb01 3010 	mls	r0, r1, r0, r3
 800f7b2:	1a09      	subs	r1, r1, r0
 800f7b4:	ea01 0002 	and.w	r0, r1, r2
 800f7b8:	4770      	bx	lr
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop

0800f7c0 <ucdr_align_to>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	f7ff ffeb 	bl	800f7a0 <ucdr_buffer_alignment>
 800f7ca:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800f7ce:	4402      	add	r2, r0
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	bf28      	it	cs
 800f7d4:	4613      	movcs	r3, r2
 800f7d6:	6922      	ldr	r2, [r4, #16]
 800f7d8:	7565      	strb	r5, [r4, #21]
 800f7da:	4410      	add	r0, r2
 800f7dc:	6120      	str	r0, [r4, #16]
 800f7de:	60a3      	str	r3, [r4, #8]
 800f7e0:	bd38      	pop	{r3, r4, r5, pc}
 800f7e2:	bf00      	nop

0800f7e4 <ucdr_buffer_length>:
 800f7e4:	6882      	ldr	r2, [r0, #8]
 800f7e6:	6800      	ldr	r0, [r0, #0]
 800f7e8:	1a10      	subs	r0, r2, r0
 800f7ea:	4770      	bx	lr

0800f7ec <ucdr_buffer_remaining>:
 800f7ec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f7f0:	1a10      	subs	r0, r2, r0
 800f7f2:	4770      	bx	lr

0800f7f4 <ucdr_check_final_buffer_behavior_array>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	7d83      	ldrb	r3, [r0, #22]
 800f7f8:	b963      	cbnz	r3, 800f814 <ucdr_check_final_buffer_behavior_array+0x20>
 800f7fa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	d308      	bcc.n	800f818 <ucdr_check_final_buffer_behavior_array+0x24>
 800f806:	b139      	cbz	r1, 800f818 <ucdr_check_final_buffer_behavior_array+0x24>
 800f808:	6983      	ldr	r3, [r0, #24]
 800f80a:	b163      	cbz	r3, 800f826 <ucdr_check_final_buffer_behavior_array+0x32>
 800f80c:	69c1      	ldr	r1, [r0, #28]
 800f80e:	4798      	blx	r3
 800f810:	75a0      	strb	r0, [r4, #22]
 800f812:	b108      	cbz	r0, 800f818 <ucdr_check_final_buffer_behavior_array+0x24>
 800f814:	2000      	movs	r0, #0
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	4620      	mov	r0, r4
 800f81a:	f7ff ffe7 	bl	800f7ec <ucdr_buffer_remaining>
 800f81e:	42a8      	cmp	r0, r5
 800f820:	bf28      	it	cs
 800f822:	4628      	movcs	r0, r5
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	2301      	movs	r3, #1
 800f828:	7583      	strb	r3, [r0, #22]
 800f82a:	e7f3      	b.n	800f814 <ucdr_check_final_buffer_behavior_array+0x20>

0800f82c <ucdr_advance_buffer>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4604      	mov	r4, r0
 800f830:	460d      	mov	r5, r1
 800f832:	f7ff ff57 	bl	800f6e4 <ucdr_check_buffer_available_for>
 800f836:	b178      	cbz	r0, 800f858 <ucdr_advance_buffer+0x2c>
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	6921      	ldr	r1, [r4, #16]
 800f83c:	442b      	add	r3, r5
 800f83e:	60a3      	str	r3, [r4, #8]
 800f840:	2301      	movs	r3, #1
 800f842:	4429      	add	r1, r5
 800f844:	7563      	strb	r3, [r4, #21]
 800f846:	6121      	str	r1, [r4, #16]
 800f848:	bd38      	pop	{r3, r4, r5, pc}
 800f84a:	68a2      	ldr	r2, [r4, #8]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	4402      	add	r2, r0
 800f850:	4403      	add	r3, r0
 800f852:	1a2d      	subs	r5, r5, r0
 800f854:	60a2      	str	r2, [r4, #8]
 800f856:	6123      	str	r3, [r4, #16]
 800f858:	2201      	movs	r2, #1
 800f85a:	4629      	mov	r1, r5
 800f85c:	4620      	mov	r0, r4
 800f85e:	f7ff ffc9 	bl	800f7f4 <ucdr_check_final_buffer_behavior_array>
 800f862:	2800      	cmp	r0, #0
 800f864:	d1f1      	bne.n	800f84a <ucdr_advance_buffer+0x1e>
 800f866:	2301      	movs	r3, #1
 800f868:	7563      	strb	r3, [r4, #21]
 800f86a:	bd38      	pop	{r3, r4, r5, pc}

0800f86c <ucdr_serialize_sequence_char>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	4615      	mov	r5, r2
 800f870:	460e      	mov	r6, r1
 800f872:	7d01      	ldrb	r1, [r0, #20]
 800f874:	4604      	mov	r4, r0
 800f876:	f7fe fdf7 	bl	800e468 <ucdr_serialize_endian_uint32_t>
 800f87a:	b90d      	cbnz	r5, 800f880 <ucdr_serialize_sequence_char+0x14>
 800f87c:	2001      	movs	r0, #1
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	462b      	mov	r3, r5
 800f882:	4632      	mov	r2, r6
 800f884:	4620      	mov	r0, r4
 800f886:	7d21      	ldrb	r1, [r4, #20]
 800f888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f88c:	f7fd bf32 	b.w	800d6f4 <ucdr_serialize_endian_array_char>

0800f890 <ucdr_deserialize_sequence_char>:
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	461d      	mov	r5, r3
 800f896:	4616      	mov	r6, r2
 800f898:	460f      	mov	r7, r1
 800f89a:	461a      	mov	r2, r3
 800f89c:	7d01      	ldrb	r1, [r0, #20]
 800f89e:	4604      	mov	r4, r0
 800f8a0:	f7fe ff0a 	bl	800e6b8 <ucdr_deserialize_endian_uint32_t>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	429e      	cmp	r6, r3
 800f8a8:	bf3c      	itt	cc
 800f8aa:	2201      	movcc	r2, #1
 800f8ac:	75a2      	strbcc	r2, [r4, #22]
 800f8ae:	b913      	cbnz	r3, 800f8b6 <ucdr_deserialize_sequence_char+0x26>
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b6:	463a      	mov	r2, r7
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	7d21      	ldrb	r1, [r4, #20]
 800f8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	f7fd bf4a 	b.w	800d758 <ucdr_deserialize_endian_array_char>

0800f8c4 <ucdr_serialize_sequence_uint8_t>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	4615      	mov	r5, r2
 800f8c8:	460e      	mov	r6, r1
 800f8ca:	7d01      	ldrb	r1, [r0, #20]
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	f7fe fdcb 	bl	800e468 <ucdr_serialize_endian_uint32_t>
 800f8d2:	b90d      	cbnz	r5, 800f8d8 <ucdr_serialize_sequence_uint8_t+0x14>
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}
 800f8d8:	462b      	mov	r3, r5
 800f8da:	4632      	mov	r2, r6
 800f8dc:	4620      	mov	r0, r4
 800f8de:	7d21      	ldrb	r1, [r4, #20]
 800f8e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8e4:	f7fd bf9c 	b.w	800d820 <ucdr_serialize_endian_array_uint8_t>

0800f8e8 <ucdr_deserialize_sequence_uint8_t>:
 800f8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ec:	461d      	mov	r5, r3
 800f8ee:	4616      	mov	r6, r2
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	7d01      	ldrb	r1, [r0, #20]
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	f7fe fede 	bl	800e6b8 <ucdr_deserialize_endian_uint32_t>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	429e      	cmp	r6, r3
 800f900:	bf3c      	itt	cc
 800f902:	2201      	movcc	r2, #1
 800f904:	75a2      	strbcc	r2, [r4, #22]
 800f906:	b913      	cbnz	r3, 800f90e <ucdr_deserialize_sequence_uint8_t+0x26>
 800f908:	2001      	movs	r0, #1
 800f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90e:	463a      	mov	r2, r7
 800f910:	4620      	mov	r0, r4
 800f912:	7d21      	ldrb	r1, [r4, #20]
 800f914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f918:	f7fd bfe6 	b.w	800d8e8 <ucdr_deserialize_endian_array_uint8_t>

0800f91c <ucdr_serialize_sequence_uint16_t>:
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	4615      	mov	r5, r2
 800f920:	460e      	mov	r6, r1
 800f922:	7d01      	ldrb	r1, [r0, #20]
 800f924:	4604      	mov	r4, r0
 800f926:	f7fe fd9f 	bl	800e468 <ucdr_serialize_endian_uint32_t>
 800f92a:	b90d      	cbnz	r5, 800f930 <ucdr_serialize_sequence_uint16_t+0x14>
 800f92c:	2001      	movs	r0, #1
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	462b      	mov	r3, r5
 800f932:	4632      	mov	r2, r6
 800f934:	4620      	mov	r0, r4
 800f936:	7d21      	ldrb	r1, [r4, #20]
 800f938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f93c:	f7fe b806 	b.w	800d94c <ucdr_serialize_endian_array_uint16_t>

0800f940 <ucdr_deserialize_sequence_uint16_t>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	461d      	mov	r5, r3
 800f946:	4616      	mov	r6, r2
 800f948:	460f      	mov	r7, r1
 800f94a:	461a      	mov	r2, r3
 800f94c:	7d01      	ldrb	r1, [r0, #20]
 800f94e:	4604      	mov	r4, r0
 800f950:	f7fe feb2 	bl	800e6b8 <ucdr_deserialize_endian_uint32_t>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	429e      	cmp	r6, r3
 800f958:	bf3c      	itt	cc
 800f95a:	2201      	movcc	r2, #1
 800f95c:	75a2      	strbcc	r2, [r4, #22]
 800f95e:	b913      	cbnz	r3, 800f966 <ucdr_deserialize_sequence_uint16_t+0x26>
 800f960:	2001      	movs	r0, #1
 800f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f966:	463a      	mov	r2, r7
 800f968:	4620      	mov	r0, r4
 800f96a:	7d21      	ldrb	r1, [r4, #20]
 800f96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	f7fe b842 	b.w	800d9f8 <ucdr_deserialize_endian_array_uint16_t>

0800f974 <ucdr_serialize_sequence_float>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	4615      	mov	r5, r2
 800f978:	460e      	mov	r6, r1
 800f97a:	7d01      	ldrb	r1, [r0, #20]
 800f97c:	4604      	mov	r4, r0
 800f97e:	f7fe fd73 	bl	800e468 <ucdr_serialize_endian_uint32_t>
 800f982:	b90d      	cbnz	r5, 800f988 <ucdr_serialize_sequence_float+0x14>
 800f984:	2001      	movs	r0, #1
 800f986:	bd70      	pop	{r4, r5, r6, pc}
 800f988:	462b      	mov	r3, r5
 800f98a:	4632      	mov	r2, r6
 800f98c:	4620      	mov	r0, r4
 800f98e:	7d21      	ldrb	r1, [r4, #20]
 800f990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f994:	f7fe b886 	b.w	800daa4 <ucdr_serialize_endian_array_float>

0800f998 <ucdr_deserialize_sequence_float>:
 800f998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99c:	461d      	mov	r5, r3
 800f99e:	4616      	mov	r6, r2
 800f9a0:	460f      	mov	r7, r1
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	7d01      	ldrb	r1, [r0, #20]
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	f7fe fe86 	bl	800e6b8 <ucdr_deserialize_endian_uint32_t>
 800f9ac:	682b      	ldr	r3, [r5, #0]
 800f9ae:	429e      	cmp	r6, r3
 800f9b0:	bf3c      	itt	cc
 800f9b2:	2201      	movcc	r2, #1
 800f9b4:	75a2      	strbcc	r2, [r4, #22]
 800f9b6:	b913      	cbnz	r3, 800f9be <ucdr_deserialize_sequence_float+0x26>
 800f9b8:	2001      	movs	r0, #1
 800f9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9be:	463a      	mov	r2, r7
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	7d21      	ldrb	r1, [r4, #20]
 800f9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c8:	f7fe b8c2 	b.w	800db50 <ucdr_deserialize_endian_array_float>

0800f9cc <ucdr_serialize_sequence_double>:
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	4615      	mov	r5, r2
 800f9d0:	460e      	mov	r6, r1
 800f9d2:	7d01      	ldrb	r1, [r0, #20]
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	f7fe fd47 	bl	800e468 <ucdr_serialize_endian_uint32_t>
 800f9da:	b90d      	cbnz	r5, 800f9e0 <ucdr_serialize_sequence_double+0x14>
 800f9dc:	2001      	movs	r0, #1
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	462b      	mov	r3, r5
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	7d21      	ldrb	r1, [r4, #20]
 800f9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9ec:	f7fe b95c 	b.w	800dca8 <ucdr_serialize_endian_array_double>

0800f9f0 <ucdr_deserialize_sequence_double>:
 800f9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f4:	461d      	mov	r5, r3
 800f9f6:	4616      	mov	r6, r2
 800f9f8:	460f      	mov	r7, r1
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	7d01      	ldrb	r1, [r0, #20]
 800f9fe:	4604      	mov	r4, r0
 800fa00:	f7fe fe5a 	bl	800e6b8 <ucdr_deserialize_endian_uint32_t>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	429e      	cmp	r6, r3
 800fa08:	bf3c      	itt	cc
 800fa0a:	2201      	movcc	r2, #1
 800fa0c:	75a2      	strbcc	r2, [r4, #22]
 800fa0e:	b913      	cbnz	r3, 800fa16 <ucdr_deserialize_sequence_double+0x26>
 800fa10:	2001      	movs	r0, #1
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	463a      	mov	r2, r7
 800fa18:	4620      	mov	r0, r4
 800fa1a:	7d21      	ldrb	r1, [r4, #20]
 800fa1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	f7fe b9ec 	b.w	800ddfc <ucdr_deserialize_endian_array_double>

0800fa24 <uxr_buffer_delete_entity>:
 800fa24:	b510      	push	{r4, lr}
 800fa26:	2303      	movs	r3, #3
 800fa28:	2400      	movs	r4, #0
 800fa2a:	b08e      	sub	sp, #56	; 0x38
 800fa2c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	2204      	movs	r2, #4
 800fa34:	ab06      	add	r3, sp, #24
 800fa36:	4604      	mov	r4, r0
 800fa38:	9103      	str	r1, [sp, #12]
 800fa3a:	f001 fa15 	bl	8010e68 <uxr_prepare_stream_to_write_submessage>
 800fa3e:	b918      	cbnz	r0, 800fa48 <uxr_buffer_delete_entity+0x24>
 800fa40:	4604      	mov	r4, r0
 800fa42:	4620      	mov	r0, r4
 800fa44:	b00e      	add	sp, #56	; 0x38
 800fa46:	bd10      	pop	{r4, pc}
 800fa48:	9902      	ldr	r1, [sp, #8]
 800fa4a:	aa05      	add	r2, sp, #20
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f001 fb3d 	bl	80110cc <uxr_init_base_object_request>
 800fa52:	4604      	mov	r4, r0
 800fa54:	a905      	add	r1, sp, #20
 800fa56:	a806      	add	r0, sp, #24
 800fa58:	f003 f888 	bl	8012b6c <uxr_serialize_DELETE_Payload>
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	b00e      	add	sp, #56	; 0x38
 800fa60:	bd10      	pop	{r4, pc}
 800fa62:	bf00      	nop

0800fa64 <uxr_common_create_entity>:
 800fa64:	b530      	push	{r4, r5, lr}
 800fa66:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800fa6a:	b08d      	sub	sp, #52	; 0x34
 800fa6c:	2d01      	cmp	r5, #1
 800fa6e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa72:	bf18      	it	ne
 800fa74:	2200      	movne	r2, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	f04f 0101 	mov.w	r1, #1
 800fa7c:	bf08      	it	eq
 800fa7e:	f003 0201 	andeq.w	r2, r3, #1
 800fa82:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800fa86:	330e      	adds	r3, #14
 800fa88:	441a      	add	r2, r3
 800fa8a:	e9cd 1000 	strd	r1, r0, [sp]
 800fa8e:	b292      	uxth	r2, r2
 800fa90:	4620      	mov	r0, r4
 800fa92:	9903      	ldr	r1, [sp, #12]
 800fa94:	ab04      	add	r3, sp, #16
 800fa96:	f001 f9e7 	bl	8010e68 <uxr_prepare_stream_to_write_submessage>
 800fa9a:	b918      	cbnz	r0, 800faa4 <uxr_common_create_entity+0x40>
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	4620      	mov	r0, r4
 800faa0:	b00d      	add	sp, #52	; 0x34
 800faa2:	bd30      	pop	{r4, r5, pc}
 800faa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800faa6:	9902      	ldr	r1, [sp, #8]
 800faa8:	4620      	mov	r0, r4
 800faaa:	f001 fb0f 	bl	80110cc <uxr_init_base_object_request>
 800faae:	4604      	mov	r4, r0
 800fab0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fab2:	a804      	add	r0, sp, #16
 800fab4:	f002 ffc2 	bl	8012a3c <uxr_serialize_CREATE_Payload>
 800fab8:	4620      	mov	r0, r4
 800faba:	b00d      	add	sp, #52	; 0x34
 800fabc:	bd30      	pop	{r4, r5, pc}
 800fabe:	bf00      	nop

0800fac0 <uxr_buffer_create_participant_bin>:
 800fac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac4:	f04f 0c00 	mov.w	ip, #0
 800fac8:	f04f 0e03 	mov.w	lr, #3
 800facc:	2701      	movs	r7, #1
 800face:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800fad2:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800fad4:	ac11      	add	r4, sp, #68	; 0x44
 800fad6:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fada:	f884 e008 	strb.w	lr, [r4, #8]
 800fade:	7127      	strb	r7, [r4, #4]
 800fae0:	4605      	mov	r5, r0
 800fae2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fae6:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 800faea:	f88d c014 	strb.w	ip, [sp, #20]
 800faee:	b1de      	cbz	r6, 800fb28 <uxr_buffer_create_participant_bin+0x68>
 800faf0:	f88d 701c 	strb.w	r7, [sp, #28]
 800faf4:	9608      	str	r6, [sp, #32]
 800faf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fafa:	a809      	add	r0, sp, #36	; 0x24
 800fafc:	a915      	add	r1, sp, #84	; 0x54
 800fafe:	f7ff fe43 	bl	800f788 <ucdr_init_buffer>
 800fb02:	a905      	add	r1, sp, #20
 800fb04:	a809      	add	r0, sp, #36	; 0x24
 800fb06:	f002 fc2b 	bl	8012360 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fb0a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb0e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800fb10:	9401      	str	r4, [sp, #4]
 800fb12:	f8cd 8000 	str.w	r8, [sp]
 800fb16:	4628      	mov	r0, r5
 800fb18:	b2b3      	uxth	r3, r6
 800fb1a:	60e6      	str	r6, [r4, #12]
 800fb1c:	f7ff ffa2 	bl	800fa64 <uxr_common_create_entity>
 800fb20:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800fb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb28:	f88d 601c 	strb.w	r6, [sp, #28]
 800fb2c:	e7e3      	b.n	800faf6 <uxr_buffer_create_participant_bin+0x36>
 800fb2e:	bf00      	nop

0800fb30 <uxr_buffer_create_topic_bin>:
 800fb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb32:	2602      	movs	r6, #2
 800fb34:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fb38:	4605      	mov	r5, r0
 800fb3a:	9105      	str	r1, [sp, #20]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	a997      	add	r1, sp, #604	; 0x25c
 800fb40:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb44:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fb48:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fb4c:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fb4e:	f000 fa61 	bl	8010014 <uxr_object_id_to_raw>
 800fb52:	2203      	movs	r2, #3
 800fb54:	2101      	movs	r1, #1
 800fb56:	2300      	movs	r3, #0
 800fb58:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 800fb5c:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fb5e:	a80b      	add	r0, sp, #44	; 0x2c
 800fb60:	9206      	str	r2, [sp, #24]
 800fb62:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fb66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb6a:	a917      	add	r1, sp, #92	; 0x5c
 800fb6c:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb70:	960a      	str	r6, [sp, #40]	; 0x28
 800fb72:	f7ff fe09 	bl	800f788 <ucdr_init_buffer>
 800fb76:	a906      	add	r1, sp, #24
 800fb78:	a80b      	add	r0, sp, #44	; 0x2c
 800fb7a:	f002 fc13 	bl	80123a4 <uxr_serialize_OBJK_Topic_Binary>
 800fb7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb82:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fb84:	ac13      	add	r4, sp, #76	; 0x4c
 800fb86:	e9cd 7400 	strd	r7, r4, [sp]
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	b2b3      	uxth	r3, r6
 800fb8e:	60e6      	str	r6, [r4, #12]
 800fb90:	f7ff ff68 	bl	800fa64 <uxr_common_create_entity>
 800fb94:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb9a:	bf00      	nop

0800fb9c <uxr_buffer_create_publisher_bin>:
 800fb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb9e:	2603      	movs	r6, #3
 800fba0:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fba4:	4605      	mov	r5, r0
 800fba6:	9105      	str	r1, [sp, #20]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	a992      	add	r1, sp, #584	; 0x248
 800fbac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fbb0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fbb4:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fbb8:	f000 fa2c 	bl	8010014 <uxr_object_id_to_raw>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbc2:	a806      	add	r0, sp, #24
 800fbc4:	a912      	add	r1, sp, #72	; 0x48
 800fbc6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fbca:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fbce:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800fbd2:	f7ff fdd9 	bl	800f788 <ucdr_init_buffer>
 800fbd6:	a993      	add	r1, sp, #588	; 0x24c
 800fbd8:	a806      	add	r0, sp, #24
 800fbda:	f002 fc97 	bl	801250c <uxr_serialize_OBJK_Publisher_Binary>
 800fbde:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbe2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fbe4:	ac0e      	add	r4, sp, #56	; 0x38
 800fbe6:	9700      	str	r7, [sp, #0]
 800fbe8:	9401      	str	r4, [sp, #4]
 800fbea:	4628      	mov	r0, r5
 800fbec:	b2b3      	uxth	r3, r6
 800fbee:	60e6      	str	r6, [r4, #12]
 800fbf0:	f7ff ff38 	bl	800fa64 <uxr_common_create_entity>
 800fbf4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfa:	bf00      	nop

0800fbfc <uxr_buffer_create_subscriber_bin>:
 800fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbfe:	2604      	movs	r6, #4
 800fc00:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fc04:	4605      	mov	r5, r0
 800fc06:	9105      	str	r1, [sp, #20]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	a992      	add	r1, sp, #584	; 0x248
 800fc0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc10:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fc14:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fc18:	f000 f9fc 	bl	8010014 <uxr_object_id_to_raw>
 800fc1c:	2103      	movs	r1, #3
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc24:	a806      	add	r0, sp, #24
 800fc26:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800fc2a:	a912      	add	r1, sp, #72	; 0x48
 800fc2c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fc30:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fc34:	f7ff fda8 	bl	800f788 <ucdr_init_buffer>
 800fc38:	a993      	add	r1, sp, #588	; 0x24c
 800fc3a:	a806      	add	r0, sp, #24
 800fc3c:	f002 fd16 	bl	801266c <uxr_serialize_OBJK_Subscriber_Binary>
 800fc40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fc46:	ac0e      	add	r4, sp, #56	; 0x38
 800fc48:	9700      	str	r7, [sp, #0]
 800fc4a:	9401      	str	r4, [sp, #4]
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	b2b3      	uxth	r3, r6
 800fc50:	60e6      	str	r6, [r4, #12]
 800fc52:	f7ff ff07 	bl	800fa64 <uxr_common_create_entity>
 800fc56:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc5c <uxr_buffer_create_datawriter_bin>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	2705      	movs	r7, #5
 800fc62:	2603      	movs	r6, #3
 800fc64:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fc68:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 800fc6c:	9105      	str	r1, [sp, #20]
 800fc6e:	4605      	mov	r5, r0
 800fc70:	a9a1      	add	r1, sp, #644	; 0x284
 800fc72:	4618      	mov	r0, r3
 800fc74:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 800fc78:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc7c:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 800fc80:	f000 f9c8 	bl	8010014 <uxr_object_id_to_raw>
 800fc84:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fc86:	a90e      	add	r1, sp, #56	; 0x38
 800fc88:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 800fc8c:	f000 f9c2 	bl	8010014 <uxr_object_id_to_raw>
 800fc90:	f1b8 0000 	subs.w	r0, r8, #0
 800fc94:	f04f 0300 	mov.w	r3, #0
 800fc98:	bf18      	it	ne
 800fc9a:	2001      	movne	r0, #1
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800fca2:	ac1d      	add	r4, sp, #116	; 0x74
 800fca4:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 800fca8:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 800fcac:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fcb0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fcb4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fcb8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fcbc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fcc0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fcc4:	bb89      	cbnz	r1, 800fd2a <uxr_buffer_create_datawriter_bin+0xce>
 800fcc6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fcca:	f04f 0823 	mov.w	r8, #35	; 0x23
 800fcce:	f04f 0e13 	mov.w	lr, #19
 800fcd2:	f04f 0c0b 	mov.w	ip, #11
 800fcd6:	2221      	movs	r2, #33	; 0x21
 800fcd8:	2111      	movs	r1, #17
 800fcda:	2009      	movs	r0, #9
 800fcdc:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fce0:	b923      	cbnz	r3, 800fcec <uxr_buffer_create_datawriter_bin+0x90>
 800fce2:	4642      	mov	r2, r8
 800fce4:	4671      	mov	r1, lr
 800fce6:	4660      	mov	r0, ip
 800fce8:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800fcec:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d025      	beq.n	800fd40 <uxr_buffer_create_datawriter_bin+0xe4>
 800fcf4:	2b03      	cmp	r3, #3
 800fcf6:	d029      	beq.n	800fd4c <uxr_buffer_create_datawriter_bin+0xf0>
 800fcf8:	b32b      	cbz	r3, 800fd46 <uxr_buffer_create_datawriter_bin+0xea>
 800fcfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcfe:	a806      	add	r0, sp, #24
 800fd00:	a921      	add	r1, sp, #132	; 0x84
 800fd02:	f7ff fd41 	bl	800f788 <ucdr_init_buffer>
 800fd06:	a90e      	add	r1, sp, #56	; 0x38
 800fd08:	a806      	add	r0, sp, #24
 800fd0a:	f002 fd51 	bl	80127b0 <uxr_serialize_OBJK_DataWriter_Binary>
 800fd0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd14:	9401      	str	r4, [sp, #4]
 800fd16:	9700      	str	r7, [sp, #0]
 800fd18:	4628      	mov	r0, r5
 800fd1a:	b2b3      	uxth	r3, r6
 800fd1c:	60e6      	str	r6, [r4, #12]
 800fd1e:	f7ff fea1 	bl	800fa64 <uxr_common_create_entity>
 800fd22:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2a:	f04f 0822 	mov.w	r8, #34	; 0x22
 800fd2e:	f04f 0e12 	mov.w	lr, #18
 800fd32:	f04f 0c0a 	mov.w	ip, #10
 800fd36:	2220      	movs	r2, #32
 800fd38:	2110      	movs	r1, #16
 800fd3a:	2008      	movs	r0, #8
 800fd3c:	2602      	movs	r6, #2
 800fd3e:	e7cd      	b.n	800fcdc <uxr_buffer_create_datawriter_bin+0x80>
 800fd40:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fd44:	e7d9      	b.n	800fcfa <uxr_buffer_create_datawriter_bin+0x9e>
 800fd46:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fd4a:	e7d6      	b.n	800fcfa <uxr_buffer_create_datawriter_bin+0x9e>
 800fd4c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fd50:	e7d3      	b.n	800fcfa <uxr_buffer_create_datawriter_bin+0x9e>
 800fd52:	bf00      	nop

0800fd54 <uxr_buffer_create_datareader_bin>:
 800fd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd58:	2706      	movs	r7, #6
 800fd5a:	2603      	movs	r6, #3
 800fd5c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fd60:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 800fd64:	9105      	str	r1, [sp, #20]
 800fd66:	4605      	mov	r5, r0
 800fd68:	a9a3      	add	r1, sp, #652	; 0x28c
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 800fd70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd74:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 800fd78:	f000 f94c 	bl	8010014 <uxr_object_id_to_raw>
 800fd7c:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800fd7e:	a90e      	add	r1, sp, #56	; 0x38
 800fd80:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 800fd84:	f000 f946 	bl	8010014 <uxr_object_id_to_raw>
 800fd88:	f1b8 0000 	subs.w	r0, r8, #0
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	bf18      	it	ne
 800fd92:	2001      	movne	r0, #1
 800fd94:	2201      	movs	r2, #1
 800fd96:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800fd9a:	ac1f      	add	r4, sp, #124	; 0x7c
 800fd9c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 800fda0:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 800fda4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fda8:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fdac:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fdb0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fdb4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fdb8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fdbc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fdc0:	bb89      	cbnz	r1, 800fe26 <uxr_buffer_create_datareader_bin+0xd2>
 800fdc2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fdc6:	f04f 0823 	mov.w	r8, #35	; 0x23
 800fdca:	f04f 0e13 	mov.w	lr, #19
 800fdce:	f04f 0c0b 	mov.w	ip, #11
 800fdd2:	2221      	movs	r2, #33	; 0x21
 800fdd4:	2111      	movs	r1, #17
 800fdd6:	2009      	movs	r0, #9
 800fdd8:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800fddc:	b923      	cbnz	r3, 800fde8 <uxr_buffer_create_datareader_bin+0x94>
 800fdde:	4642      	mov	r2, r8
 800fde0:	4671      	mov	r1, lr
 800fde2:	4660      	mov	r0, ip
 800fde4:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800fde8:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d025      	beq.n	800fe3c <uxr_buffer_create_datareader_bin+0xe8>
 800fdf0:	2b03      	cmp	r3, #3
 800fdf2:	d029      	beq.n	800fe48 <uxr_buffer_create_datareader_bin+0xf4>
 800fdf4:	b32b      	cbz	r3, 800fe42 <uxr_buffer_create_datareader_bin+0xee>
 800fdf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdfa:	a806      	add	r0, sp, #24
 800fdfc:	a923      	add	r1, sp, #140	; 0x8c
 800fdfe:	f7ff fcc3 	bl	800f788 <ucdr_init_buffer>
 800fe02:	a90e      	add	r1, sp, #56	; 0x38
 800fe04:	a806      	add	r0, sp, #24
 800fe06:	f002 fc97 	bl	8012738 <uxr_serialize_OBJK_DataReader_Binary>
 800fe0a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fe10:	9401      	str	r4, [sp, #4]
 800fe12:	9700      	str	r7, [sp, #0]
 800fe14:	4628      	mov	r0, r5
 800fe16:	b2b3      	uxth	r3, r6
 800fe18:	60e6      	str	r6, [r4, #12]
 800fe1a:	f7ff fe23 	bl	800fa64 <uxr_common_create_entity>
 800fe1e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fe22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe26:	f04f 0822 	mov.w	r8, #34	; 0x22
 800fe2a:	f04f 0e12 	mov.w	lr, #18
 800fe2e:	f04f 0c0a 	mov.w	ip, #10
 800fe32:	2220      	movs	r2, #32
 800fe34:	2110      	movs	r1, #16
 800fe36:	2008      	movs	r0, #8
 800fe38:	2602      	movs	r6, #2
 800fe3a:	e7cd      	b.n	800fdd8 <uxr_buffer_create_datareader_bin+0x84>
 800fe3c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fe40:	e7d9      	b.n	800fdf6 <uxr_buffer_create_datareader_bin+0xa2>
 800fe42:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fe46:	e7d6      	b.n	800fdf6 <uxr_buffer_create_datareader_bin+0xa2>
 800fe48:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe4c:	e7d3      	b.n	800fdf6 <uxr_buffer_create_datareader_bin+0xa2>
 800fe4e:	bf00      	nop

0800fe50 <get_custom_error>:
 800fe50:	4b01      	ldr	r3, [pc, #4]	; (800fe58 <get_custom_error+0x8>)
 800fe52:	7818      	ldrb	r0, [r3, #0]
 800fe54:	4770      	bx	lr
 800fe56:	bf00      	nop
 800fe58:	20006774 	.word	0x20006774

0800fe5c <recv_custom_msg>:
 800fe5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe60:	2600      	movs	r6, #0
 800fe62:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800fe66:	b089      	sub	sp, #36	; 0x24
 800fe68:	4604      	mov	r4, r0
 800fe6a:	468a      	mov	sl, r1
 800fe6c:	4693      	mov	fp, r2
 800fe6e:	9305      	str	r3, [sp, #20]
 800fe70:	f88d 601e 	strb.w	r6, [sp, #30]
 800fe74:	b325      	cbz	r5, 800fec0 <recv_custom_msg+0x64>
 800fe76:	f44f 7900 	mov.w	r9, #512	; 0x200
 800fe7a:	f200 2802 	addw	r8, r0, #514	; 0x202
 800fe7e:	f10d 071f 	add.w	r7, sp, #31
 800fe82:	ae05      	add	r6, sp, #20
 800fe84:	f10d 051e 	add.w	r5, sp, #30
 800fe88:	e002      	b.n	800fe90 <recv_custom_msg+0x34>
 800fe8a:	9b05      	ldr	r3, [sp, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	dd0f      	ble.n	800feb0 <recv_custom_msg+0x54>
 800fe90:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fe94:	e9cd 9500 	strd	r9, r5, [sp]
 800fe98:	4623      	mov	r3, r4
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	4640      	mov	r0, r8
 800fe9e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800fea2:	f001 fb3b 	bl	801151c <uxr_read_framed_msg>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d0ef      	beq.n	800fe8a <recv_custom_msg+0x2e>
 800feaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800feae:	b1b3      	cbz	r3, 800fede <recv_custom_msg+0x82>
 800feb0:	2000      	movs	r0, #0
 800feb2:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <recv_custom_msg+0x94>)
 800feb4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800feb8:	701a      	strb	r2, [r3, #0]
 800feba:	b009      	add	sp, #36	; 0x24
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	f10d 021f 	add.w	r2, sp, #31
 800fec4:	9200      	str	r2, [sp, #0]
 800fec6:	4601      	mov	r1, r0
 800fec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fecc:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800fed0:	47a8      	blx	r5
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d0ec      	beq.n	800feb0 <recv_custom_msg+0x54>
 800fed6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1e8      	bne.n	800feb0 <recv_custom_msg+0x54>
 800fede:	f8cb 0000 	str.w	r0, [fp]
 800fee2:	2001      	movs	r0, #1
 800fee4:	f8ca 4000 	str.w	r4, [sl]
 800fee8:	b009      	add	sp, #36	; 0x24
 800feea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feee:	bf00      	nop
 800fef0:	20006774 	.word	0x20006774

0800fef4 <send_custom_msg>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800fefa:	4616      	mov	r6, r2
 800fefc:	b086      	sub	sp, #24
 800fefe:	b975      	cbnz	r5, 800ff1e <send_custom_msg+0x2a>
 800ff00:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800ff04:	f10d 0317 	add.w	r3, sp, #23
 800ff08:	47a0      	blx	r4
 800ff0a:	b108      	cbz	r0, 800ff10 <send_custom_msg+0x1c>
 800ff0c:	42b0      	cmp	r0, r6
 800ff0e:	d015      	beq.n	800ff3c <send_custom_msg+0x48>
 800ff10:	2000      	movs	r0, #0
 800ff12:	4b0c      	ldr	r3, [pc, #48]	; (800ff44 <send_custom_msg+0x50>)
 800ff14:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	b006      	add	sp, #24
 800ff1c:	bd70      	pop	{r4, r5, r6, pc}
 800ff1e:	460b      	mov	r3, r1
 800ff20:	2100      	movs	r1, #0
 800ff22:	e9cd 6100 	strd	r6, r1, [sp]
 800ff26:	f10d 0217 	add.w	r2, sp, #23
 800ff2a:	9202      	str	r2, [sp, #8]
 800ff2c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800ff30:	4602      	mov	r2, r0
 800ff32:	f200 2002 	addw	r0, r0, #514	; 0x202
 800ff36:	f001 f8ff 	bl	8011138 <uxr_write_framed_msg>
 800ff3a:	e7e6      	b.n	800ff0a <send_custom_msg+0x16>
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	b006      	add	sp, #24
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	bf00      	nop
 800ff44:	20006774 	.word	0x20006774

0800ff48 <uxr_set_custom_transport_callbacks>:
 800ff48:	b430      	push	{r4, r5}
 800ff4a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800ff4e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800ff52:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800ff56:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 800ff5a:	bc30      	pop	{r4, r5}
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop

0800ff60 <uxr_init_custom_transport>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800ff66:	b303      	cbz	r3, 800ffaa <uxr_init_custom_transport+0x4a>
 800ff68:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	b1e2      	cbz	r2, 800ffaa <uxr_init_custom_transport+0x4a>
 800ff70:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800ff74:	b1ca      	cbz	r2, 800ffaa <uxr_init_custom_transport+0x4a>
 800ff76:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800ff7a:	b1b2      	cbz	r2, 800ffaa <uxr_init_custom_transport+0x4a>
 800ff7c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800ff80:	4798      	blx	r3
 800ff82:	4605      	mov	r5, r0
 800ff84:	b188      	cbz	r0, 800ffaa <uxr_init_custom_transport+0x4a>
 800ff86:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800ff8a:	b98b      	cbnz	r3, 800ffb0 <uxr_init_custom_transport+0x50>
 800ff8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ff90:	490a      	ldr	r1, [pc, #40]	; (800ffbc <uxr_init_custom_transport+0x5c>)
 800ff92:	4a0b      	ldr	r2, [pc, #44]	; (800ffc0 <uxr_init_custom_transport+0x60>)
 800ff94:	4b0b      	ldr	r3, [pc, #44]	; (800ffc4 <uxr_init_custom_transport+0x64>)
 800ff96:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 800ff9a:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 800ffa4:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 800ffa8:	bd38      	pop	{r3, r4, r5, pc}
 800ffaa:	2500      	movs	r5, #0
 800ffac:	4628      	mov	r0, r5
 800ffae:	bd38      	pop	{r3, r4, r5, pc}
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	f204 2002 	addw	r0, r4, #514	; 0x202
 800ffb6:	f001 f8b9 	bl	801112c <uxr_init_framing_io>
 800ffba:	e7e7      	b.n	800ff8c <uxr_init_custom_transport+0x2c>
 800ffbc:	0800fef5 	.word	0x0800fef5
 800ffc0:	0800fe5d 	.word	0x0800fe5d
 800ffc4:	0800fe51 	.word	0x0800fe51

0800ffc8 <uxr_close_custom_transport>:
 800ffc8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800ffcc:	4718      	bx	r3
 800ffce:	bf00      	nop

0800ffd0 <uxr_object_id>:
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	f88d 1006 	strb.w	r1, [sp, #6]
 800ffd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffdc:	f360 030f 	bfi	r3, r0, #0, #16
 800ffe0:	f362 431f 	bfi	r3, r2, #16, #16
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	b002      	add	sp, #8
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <uxr_object_id_from_raw>:
 800ffec:	4602      	mov	r2, r0
 800ffee:	2000      	movs	r0, #0
 800fff0:	7853      	ldrb	r3, [r2, #1]
 800fff2:	b082      	sub	sp, #8
 800fff4:	7812      	ldrb	r2, [r2, #0]
 800fff6:	f003 010f 	and.w	r1, r3, #15
 800fffa:	f88d 1006 	strb.w	r1, [sp, #6]
 800fffe:	091b      	lsrs	r3, r3, #4
 8010000:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010004:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010008:	f363 000f 	bfi	r0, r3, #0, #16
 801000c:	f362 401f 	bfi	r0, r2, #16, #16
 8010010:	b002      	add	sp, #8
 8010012:	4770      	bx	lr

08010014 <uxr_object_id_to_raw>:
 8010014:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010018:	b082      	sub	sp, #8
 801001a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801001e:	f3c0 100b 	ubfx	r0, r0, #4, #12
 8010022:	7008      	strb	r0, [r1, #0]
 8010024:	704b      	strb	r3, [r1, #1]
 8010026:	b002      	add	sp, #8
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop

0801002c <uxr_buffer_request_data>:
 801002c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801002e:	b095      	sub	sp, #84	; 0x54
 8010030:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8010032:	2600      	movs	r6, #0
 8010034:	2d00      	cmp	r5, #0
 8010036:	bf14      	ite	ne
 8010038:	2701      	movne	r7, #1
 801003a:	2700      	moveq	r7, #0
 801003c:	4604      	mov	r4, r0
 801003e:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010042:	9303      	str	r3, [sp, #12]
 8010044:	f88d 301c 	strb.w	r3, [sp, #28]
 8010048:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801004c:	f88d 601d 	strb.w	r6, [sp, #29]
 8010050:	f88d 601e 	strb.w	r6, [sp, #30]
 8010054:	d021      	beq.n	801009a <uxr_buffer_request_data+0x6e>
 8010056:	686a      	ldr	r2, [r5, #4]
 8010058:	682b      	ldr	r3, [r5, #0]
 801005a:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 801005e:	2210      	movs	r2, #16
 8010060:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8010064:	2308      	movs	r3, #8
 8010066:	2100      	movs	r1, #0
 8010068:	4620      	mov	r0, r4
 801006a:	e9cd 3100 	strd	r3, r1, [sp]
 801006e:	9905      	ldr	r1, [sp, #20]
 8010070:	ab0c      	add	r3, sp, #48	; 0x30
 8010072:	f000 fef9 	bl	8010e68 <uxr_prepare_stream_to_write_submessage>
 8010076:	b918      	cbnz	r0, 8010080 <uxr_buffer_request_data+0x54>
 8010078:	4604      	mov	r4, r0
 801007a:	4620      	mov	r0, r4
 801007c:	b015      	add	sp, #84	; 0x54
 801007e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010080:	9904      	ldr	r1, [sp, #16]
 8010082:	aa06      	add	r2, sp, #24
 8010084:	4620      	mov	r0, r4
 8010086:	f001 f821 	bl	80110cc <uxr_init_base_object_request>
 801008a:	4604      	mov	r4, r0
 801008c:	a906      	add	r1, sp, #24
 801008e:	a80c      	add	r0, sp, #48	; 0x30
 8010090:	f002 fdca 	bl	8012c28 <uxr_serialize_READ_DATA_Payload>
 8010094:	4620      	mov	r0, r4
 8010096:	b015      	add	sp, #84	; 0x54
 8010098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801009a:	2208      	movs	r2, #8
 801009c:	e7e2      	b.n	8010064 <uxr_buffer_request_data+0x38>
 801009e:	bf00      	nop

080100a0 <uxr_buffer_cancel_data>:
 80100a0:	b530      	push	{r4, r5, lr}
 80100a2:	2308      	movs	r3, #8
 80100a4:	2400      	movs	r4, #0
 80100a6:	2501      	movs	r5, #1
 80100a8:	b095      	sub	sp, #84	; 0x54
 80100aa:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	9205      	str	r2, [sp, #20]
 80100b2:	ab0c      	add	r3, sp, #48	; 0x30
 80100b4:	2210      	movs	r2, #16
 80100b6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80100ba:	f88d 401e 	strb.w	r4, [sp, #30]
 80100be:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 80100c2:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 80100c6:	9103      	str	r1, [sp, #12]
 80100c8:	4604      	mov	r4, r0
 80100ca:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80100ce:	f000 fecb 	bl	8010e68 <uxr_prepare_stream_to_write_submessage>
 80100d2:	b918      	cbnz	r0, 80100dc <uxr_buffer_cancel_data+0x3c>
 80100d4:	4604      	mov	r4, r0
 80100d6:	4620      	mov	r0, r4
 80100d8:	b015      	add	sp, #84	; 0x54
 80100da:	bd30      	pop	{r4, r5, pc}
 80100dc:	9905      	ldr	r1, [sp, #20]
 80100de:	aa06      	add	r2, sp, #24
 80100e0:	4620      	mov	r0, r4
 80100e2:	f000 fff3 	bl	80110cc <uxr_init_base_object_request>
 80100e6:	4604      	mov	r4, r0
 80100e8:	a906      	add	r1, sp, #24
 80100ea:	a80c      	add	r0, sp, #48	; 0x30
 80100ec:	f002 fd9c 	bl	8012c28 <uxr_serialize_READ_DATA_Payload>
 80100f0:	4620      	mov	r0, r4
 80100f2:	b015      	add	sp, #84	; 0x54
 80100f4:	bd30      	pop	{r4, r5, pc}
 80100f6:	bf00      	nop

080100f8 <read_submessage_format>:
 80100f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100fc:	b095      	sub	sp, #84	; 0x54
 80100fe:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8010102:	b113      	cbz	r3, 801010a <read_submessage_format+0x12>
 8010104:	b015      	add	sp, #84	; 0x54
 8010106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801010a:	460c      	mov	r4, r1
 801010c:	4606      	mov	r6, r0
 801010e:	4690      	mov	r8, r2
 8010110:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010114:	a80c      	add	r0, sp, #48	; 0x30
 8010116:	1a52      	subs	r2, r2, r1
 8010118:	461d      	mov	r5, r3
 801011a:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 801011e:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8010122:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 8010126:	f7ff fb2f 	bl	800f788 <ucdr_init_buffer>
 801012a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801012e:	a80c      	add	r0, sp, #48	; 0x30
 8010130:	f7ff fb00 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8010134:	69e3      	ldr	r3, [r4, #28]
 8010136:	b17b      	cbz	r3, 8010158 <read_submessage_format+0x60>
 8010138:	2f07      	cmp	r7, #7
 801013a:	751d      	strb	r5, [r3, #20]
 801013c:	d03a      	beq.n	80101b4 <read_submessage_format+0xbc>
 801013e:	2f08      	cmp	r7, #8
 8010140:	d029      	beq.n	8010196 <read_submessage_format+0x9e>
 8010142:	2f06      	cmp	r7, #6
 8010144:	d00e      	beq.n	8010164 <read_submessage_format+0x6c>
 8010146:	2201      	movs	r2, #1
 8010148:	751a      	strb	r2, [r3, #20]
 801014a:	4641      	mov	r1, r8
 801014c:	4620      	mov	r0, r4
 801014e:	f7ff fb6d 	bl	800f82c <ucdr_advance_buffer>
 8010152:	b015      	add	sp, #84	; 0x54
 8010154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010158:	2f07      	cmp	r7, #7
 801015a:	d02b      	beq.n	80101b4 <read_submessage_format+0xbc>
 801015c:	2f08      	cmp	r7, #8
 801015e:	d01a      	beq.n	8010196 <read_submessage_format+0x9e>
 8010160:	2f06      	cmp	r7, #6
 8010162:	d1f2      	bne.n	801014a <read_submessage_format+0x52>
 8010164:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 8010168:	b195      	cbz	r5, 8010190 <read_submessage_format+0x98>
 801016a:	2206      	movs	r2, #6
 801016c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8010170:	f88d 2016 	strb.w	r2, [sp, #22]
 8010174:	aa0c      	add	r2, sp, #48	; 0x30
 8010176:	9200      	str	r2, [sp, #0]
 8010178:	9302      	str	r3, [sp, #8]
 801017a:	464a      	mov	r2, r9
 801017c:	9b04      	ldr	r3, [sp, #16]
 801017e:	4630      	mov	r0, r6
 8010180:	9905      	ldr	r1, [sp, #20]
 8010182:	f8cd 8004 	str.w	r8, [sp, #4]
 8010186:	47a8      	blx	r5
 8010188:	2201      	movs	r2, #1
 801018a:	69e3      	ldr	r3, [r4, #28]
 801018c:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1d8      	bne.n	8010146 <read_submessage_format+0x4e>
 8010194:	e7d9      	b.n	801014a <read_submessage_format+0x52>
 8010196:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801019a:	2a00      	cmp	r2, #0
 801019c:	d0f8      	beq.n	8010190 <read_submessage_format+0x98>
 801019e:	a906      	add	r1, sp, #24
 80101a0:	a80c      	add	r0, sp, #48	; 0x30
 80101a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80101a4:	f002 fe14 	bl	8012dd0 <uxr_deserialize_SampleIdentity>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d13c      	bne.n	8010226 <read_submessage_format+0x12e>
 80101ac:	69e3      	ldr	r3, [r4, #28]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1c9      	bne.n	8010146 <read_submessage_format+0x4e>
 80101b2:	e7ca      	b.n	801014a <read_submessage_format+0x52>
 80101b4:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 80101b8:	b132      	cbz	r2, 80101c8 <read_submessage_format+0xd0>
 80101ba:	a906      	add	r1, sp, #24
 80101bc:	a80c      	add	r0, sp, #48	; 0x30
 80101be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80101c0:	f002 fbd0 	bl	8012964 <uxr_deserialize_BaseObjectRequest>
 80101c4:	b930      	cbnz	r0, 80101d4 <read_submessage_format+0xdc>
 80101c6:	69e3      	ldr	r3, [r4, #28]
 80101c8:	68a2      	ldr	r2, [r4, #8]
 80101ca:	4442      	add	r2, r8
 80101cc:	60a2      	str	r2, [r4, #8]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1b9      	bne.n	8010146 <read_submessage_format+0x4e>
 80101d2:	e7ba      	b.n	801014a <read_submessage_format+0x52>
 80101d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101d6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80101da:	a80c      	add	r0, sp, #48	; 0x30
 80101dc:	1a52      	subs	r2, r2, r1
 80101de:	1aed      	subs	r5, r5, r3
 80101e0:	f7ff fad2 	bl	800f788 <ucdr_init_buffer>
 80101e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80101e8:	a80c      	add	r0, sp, #48	; 0x30
 80101ea:	f7ff faa3 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 80101ee:	2107      	movs	r1, #7
 80101f0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80101f4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80101f8:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 80101fc:	4445      	add	r5, r8
 80101fe:	b2ad      	uxth	r5, r5
 8010200:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010204:	aa0c      	add	r2, sp, #48	; 0x30
 8010206:	9200      	str	r2, [sp, #0]
 8010208:	9002      	str	r0, [sp, #8]
 801020a:	f88d 1016 	strb.w	r1, [sp, #22]
 801020e:	9501      	str	r5, [sp, #4]
 8010210:	b29b      	uxth	r3, r3
 8010212:	464a      	mov	r2, r9
 8010214:	4630      	mov	r0, r6
 8010216:	9905      	ldr	r1, [sp, #20]
 8010218:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 801021c:	47a8      	blx	r5
 801021e:	2301      	movs	r3, #1
 8010220:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8010224:	e7cf      	b.n	80101c6 <read_submessage_format+0xce>
 8010226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010228:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801022c:	a80c      	add	r0, sp, #48	; 0x30
 801022e:	1a52      	subs	r2, r2, r1
 8010230:	1aed      	subs	r5, r5, r3
 8010232:	f7ff faa9 	bl	800f788 <ucdr_init_buffer>
 8010236:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801023a:	a80c      	add	r0, sp, #48	; 0x30
 801023c:	f7ff fa7a 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8010240:	2308      	movs	r3, #8
 8010242:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8010246:	4445      	add	r5, r8
 8010248:	f88d 3016 	strb.w	r3, [sp, #22]
 801024c:	b2ad      	uxth	r5, r5
 801024e:	ab0c      	add	r3, sp, #48	; 0x30
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	9002      	str	r0, [sp, #8]
 8010254:	9501      	str	r5, [sp, #4]
 8010256:	ab06      	add	r3, sp, #24
 8010258:	464a      	mov	r2, r9
 801025a:	4630      	mov	r0, r6
 801025c:	9905      	ldr	r1, [sp, #20]
 801025e:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 8010262:	47a8      	blx	r5
 8010264:	2301      	movs	r3, #1
 8010266:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801026a:	e79f      	b.n	80101ac <read_submessage_format+0xb4>

0801026c <on_get_fragmentation_info>:
 801026c:	b500      	push	{lr}
 801026e:	b08b      	sub	sp, #44	; 0x2c
 8010270:	4601      	mov	r1, r0
 8010272:	2204      	movs	r2, #4
 8010274:	a802      	add	r0, sp, #8
 8010276:	f7ff fa87 	bl	800f788 <ucdr_init_buffer>
 801027a:	f10d 0305 	add.w	r3, sp, #5
 801027e:	a802      	add	r0, sp, #8
 8010280:	f10d 0206 	add.w	r2, sp, #6
 8010284:	a901      	add	r1, sp, #4
 8010286:	f001 fd1d 	bl	8011cc4 <uxr_read_submessage_header>
 801028a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801028e:	2b0d      	cmp	r3, #13
 8010290:	d003      	beq.n	801029a <on_get_fragmentation_info+0x2e>
 8010292:	2000      	movs	r0, #0
 8010294:	b00b      	add	sp, #44	; 0x2c
 8010296:	f85d fb04 	ldr.w	pc, [sp], #4
 801029a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801029e:	f013 0f02 	tst.w	r3, #2
 80102a2:	bf14      	ite	ne
 80102a4:	2002      	movne	r0, #2
 80102a6:	2001      	moveq	r0, #1
 80102a8:	b00b      	add	sp, #44	; 0x2c
 80102aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80102ae:	bf00      	nop

080102b0 <write_submessage_acknack.isra.0>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	4614      	mov	r4, r2
 80102b4:	b092      	sub	sp, #72	; 0x48
 80102b6:	4605      	mov	r5, r0
 80102b8:	460e      	mov	r6, r1
 80102ba:	f000 feff 	bl	80110bc <uxr_session_header_offset>
 80102be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80102c2:	9000      	str	r0, [sp, #0]
 80102c4:	a905      	add	r1, sp, #20
 80102c6:	a80a      	add	r0, sp, #40	; 0x28
 80102c8:	2300      	movs	r3, #0
 80102ca:	2211      	movs	r2, #17
 80102cc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80102d0:	f7ff fa48 	bl	800f764 <ucdr_init_buffer_origin_offset>
 80102d4:	3450      	adds	r4, #80	; 0x50
 80102d6:	2205      	movs	r2, #5
 80102d8:	2300      	movs	r3, #0
 80102da:	210a      	movs	r1, #10
 80102dc:	a80a      	add	r0, sp, #40	; 0x28
 80102de:	f001 fcd7 	bl	8011c90 <uxr_buffer_submessage_header>
 80102e2:	a903      	add	r1, sp, #12
 80102e4:	4620      	mov	r0, r4
 80102e6:	f006 f90b 	bl	8016500 <uxr_compute_acknack>
 80102ea:	a903      	add	r1, sp, #12
 80102ec:	ba43      	rev16	r3, r0
 80102ee:	a80a      	add	r0, sp, #40	; 0x28
 80102f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102f4:	f88d 6010 	strb.w	r6, [sp, #16]
 80102f8:	f002 fcba 	bl	8012c70 <uxr_serialize_ACKNACK_Payload>
 80102fc:	2200      	movs	r2, #0
 80102fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010300:	4611      	mov	r1, r2
 8010302:	4628      	mov	r0, r5
 8010304:	f000 fe86 	bl	8011014 <uxr_stamp_session_header>
 8010308:	a80a      	add	r0, sp, #40	; 0x28
 801030a:	f7ff fa6b 	bl	800f7e4 <ucdr_buffer_length>
 801030e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010310:	4602      	mov	r2, r0
 8010312:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010316:	a905      	add	r1, sp, #20
 8010318:	47a0      	blx	r4
 801031a:	b012      	add	sp, #72	; 0x48
 801031c:	bd70      	pop	{r4, r5, r6, pc}
 801031e:	bf00      	nop

08010320 <uxr_acknack_pong.part.0>:
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	2400      	movs	r4, #0
 8010324:	4605      	mov	r5, r0
 8010326:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 801032a:	f10d 0306 	add.w	r3, sp, #6
 801032e:	a901      	add	r1, sp, #4
 8010330:	f10d 0205 	add.w	r2, sp, #5
 8010334:	f88d 4004 	strb.w	r4, [sp, #4]
 8010338:	f88d 4005 	strb.w	r4, [sp, #5]
 801033c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010340:	f001 fef6 	bl	8012130 <uxr_deserialize_submessage_header>
 8010344:	4628      	mov	r0, r5
 8010346:	f7ff fa51 	bl	800f7ec <ucdr_buffer_remaining>
 801034a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801034e:	4298      	cmp	r0, r3
 8010350:	d31d      	bcc.n	801038e <uxr_acknack_pong.part.0+0x6e>
 8010352:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010356:	2b06      	cmp	r3, #6
 8010358:	d003      	beq.n	8010362 <uxr_acknack_pong.part.0+0x42>
 801035a:	4620      	mov	r0, r4
 801035c:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8010360:	bd70      	pop	{r4, r5, r6, pc}
 8010362:	a902      	add	r1, sp, #8
 8010364:	4628      	mov	r0, r5
 8010366:	f002 fb0d 	bl	8012984 <uxr_deserialize_BaseObjectReply>
 801036a:	a904      	add	r1, sp, #16
 801036c:	4604      	mov	r4, r0
 801036e:	4628      	mov	r0, r5
 8010370:	f7fd fdb0 	bl	800ded4 <ucdr_deserialize_bool>
 8010374:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010378:	4004      	ands	r4, r0
 801037a:	b2e4      	uxtb	r4, r4
 801037c:	bb23      	cbnz	r3, 80103c8 <uxr_acknack_pong.part.0+0xa8>
 801037e:	4628      	mov	r0, r5
 8010380:	a989      	add	r1, sp, #548	; 0x224
 8010382:	f7fd fda7 	bl	800ded4 <ucdr_deserialize_bool>
 8010386:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 801038a:	4606      	mov	r6, r0
 801038c:	b91b      	cbnz	r3, 8010396 <uxr_acknack_pong.part.0+0x76>
 801038e:	2000      	movs	r0, #0
 8010390:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8010394:	bd70      	pop	{r4, r5, r6, pc}
 8010396:	4628      	mov	r0, r5
 8010398:	a98a      	add	r1, sp, #552	; 0x228
 801039a:	f7fd fdc9 	bl	800df30 <ucdr_deserialize_uint8_t>
 801039e:	4226      	tst	r6, r4
 80103a0:	d0f5      	beq.n	801038e <uxr_acknack_pong.part.0+0x6e>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d0f3      	beq.n	801038e <uxr_acknack_pong.part.0+0x6e>
 80103a6:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 80103aa:	2b0d      	cmp	r3, #13
 80103ac:	d1ef      	bne.n	801038e <uxr_acknack_pong.part.0+0x6e>
 80103ae:	4628      	mov	r0, r5
 80103b0:	a98c      	add	r1, sp, #560	; 0x230
 80103b2:	f7fe fb93 	bl	800eadc <ucdr_deserialize_int16_t>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d0ea      	beq.n	8010390 <uxr_acknack_pong.part.0+0x70>
 80103ba:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 80103be:	2c00      	cmp	r4, #0
 80103c0:	bfd4      	ite	le
 80103c2:	2000      	movle	r0, #0
 80103c4:	2001      	movgt	r0, #1
 80103c6:	e7e3      	b.n	8010390 <uxr_acknack_pong.part.0+0x70>
 80103c8:	4628      	mov	r0, r5
 80103ca:	a905      	add	r1, sp, #20
 80103cc:	f002 fa1c 	bl	8012808 <uxr_deserialize_ObjectVariant>
 80103d0:	4004      	ands	r4, r0
 80103d2:	e7d4      	b.n	801037e <uxr_acknack_pong.part.0+0x5e>

080103d4 <read_submessage_list>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	4604      	mov	r4, r0
 80103da:	460d      	mov	r5, r1
 80103dc:	b099      	sub	sp, #100	; 0x64
 80103de:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80106d4 <read_submessage_list+0x300>
 80103e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80103e4:	4628      	mov	r0, r5
 80103e6:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80103ea:	aa0e      	add	r2, sp, #56	; 0x38
 80103ec:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80103f0:	f001 fc68 	bl	8011cc4 <uxr_read_submessage_header>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f000 810d 	beq.w	8010614 <read_submessage_list+0x240>
 80103fa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80103fe:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8010402:	3b04      	subs	r3, #4
 8010404:	2b0b      	cmp	r3, #11
 8010406:	d8ed      	bhi.n	80103e4 <read_submessage_list+0x10>
 8010408:	a101      	add	r1, pc, #4	; (adr r1, 8010410 <read_submessage_list+0x3c>)
 801040a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801040e:	bf00      	nop
 8010410:	08010605 	.word	0x08010605
 8010414:	080105f9 	.word	0x080105f9
 8010418:	080103e5 	.word	0x080103e5
 801041c:	080103e5 	.word	0x080103e5
 8010420:	080103e5 	.word	0x080103e5
 8010424:	08010559 	.word	0x08010559
 8010428:	080104e9 	.word	0x080104e9
 801042c:	080104a7 	.word	0x080104a7
 8010430:	080103e5 	.word	0x080103e5
 8010434:	080103e5 	.word	0x080103e5
 8010438:	080103e5 	.word	0x080103e5
 801043c:	08010441 	.word	0x08010441
 8010440:	4628      	mov	r0, r5
 8010442:	a912      	add	r1, sp, #72	; 0x48
 8010444:	f002 fc72 	bl	8012d2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010448:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 801044c:	2e00      	cmp	r6, #0
 801044e:	f000 8112 	beq.w	8010676 <read_submessage_list+0x2a2>
 8010452:	f001 fc7f 	bl	8011d54 <uxr_nanos>
 8010456:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8010458:	f04f 0900 	mov.w	r9, #0
 801045c:	46b8      	mov	r8, r7
 801045e:	4602      	mov	r2, r0
 8010460:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010462:	f04f 0c00 	mov.w	ip, #0
 8010466:	4683      	mov	fp, r0
 8010468:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801046a:	460b      	mov	r3, r1
 801046c:	fbca 8907 	smlal	r8, r9, sl, r7
 8010470:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010474:	46d8      	mov	r8, fp
 8010476:	46e1      	mov	r9, ip
 8010478:	9915      	ldr	r1, [sp, #84]	; 0x54
 801047a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801047c:	4608      	mov	r0, r1
 801047e:	2100      	movs	r1, #0
 8010480:	fbca 8907 	smlal	r8, r9, sl, r7
 8010484:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010486:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801048a:	fbca 0107 	smlal	r0, r1, sl, r7
 801048e:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 8010492:	e9cd 0100 	strd	r0, r1, [sp]
 8010496:	9706      	str	r7, [sp, #24]
 8010498:	4620      	mov	r0, r4
 801049a:	47b0      	blx	r6
 801049c:	f04f 0301 	mov.w	r3, #1
 80104a0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80104a4:	e79e      	b.n	80103e4 <read_submessage_list+0x10>
 80104a6:	a912      	add	r1, sp, #72	; 0x48
 80104a8:	4628      	mov	r0, r5
 80104aa:	f002 fc1f 	bl	8012cec <uxr_deserialize_HEARTBEAT_Payload>
 80104ae:	2100      	movs	r1, #0
 80104b0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80104b4:	f001 fadc 	bl	8011a70 <uxr_stream_id_from_raw>
 80104b8:	4603      	mov	r3, r0
 80104ba:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80104be:	4631      	mov	r1, r6
 80104c0:	f104 0008 	add.w	r0, r4, #8
 80104c4:	9311      	str	r3, [sp, #68]	; 0x44
 80104c6:	f001 fbc1 	bl	8011c4c <uxr_get_input_reliable_stream>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d08a      	beq.n	80103e4 <read_submessage_list+0x10>
 80104ce:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80104d2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80104d6:	f006 f807 	bl	80164e8 <uxr_process_heartbeat>
 80104da:	4632      	mov	r2, r6
 80104dc:	4620      	mov	r0, r4
 80104de:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80104e2:	f7ff fee5 	bl	80102b0 <write_submessage_acknack.isra.0>
 80104e6:	e77d      	b.n	80103e4 <read_submessage_list+0x10>
 80104e8:	a912      	add	r1, sp, #72	; 0x48
 80104ea:	4628      	mov	r0, r5
 80104ec:	f002 fbd6 	bl	8012c9c <uxr_deserialize_ACKNACK_Payload>
 80104f0:	2100      	movs	r1, #0
 80104f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80104f6:	f001 fabb 	bl	8011a70 <uxr_stream_id_from_raw>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f104 0008 	add.w	r0, r4, #8
 8010500:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010504:	930f      	str	r3, [sp, #60]	; 0x3c
 8010506:	f001 fb8b 	bl	8011c20 <uxr_get_output_reliable_stream>
 801050a:	4606      	mov	r6, r0
 801050c:	2800      	cmp	r0, #0
 801050e:	f43f af69 	beq.w	80103e4 <read_submessage_list+0x10>
 8010512:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8010516:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 801051a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801051e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010522:	b289      	uxth	r1, r1
 8010524:	f006 fb20 	bl	8016b68 <uxr_process_acknack>
 8010528:	4630      	mov	r0, r6
 801052a:	f006 fae3 	bl	8016af4 <uxr_begin_output_nack_buffer_it>
 801052e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010532:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010536:	e005      	b.n	8010544 <read_submessage_list+0x170>
 8010538:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801053a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801053c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801053e:	e9d3 0700 	ldrd	r0, r7, [r3]
 8010542:	47b8      	blx	r7
 8010544:	4641      	mov	r1, r8
 8010546:	4630      	mov	r0, r6
 8010548:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801054c:	aa11      	add	r2, sp, #68	; 0x44
 801054e:	f006 fad3 	bl	8016af8 <uxr_next_reliable_nack_buffer_to_send>
 8010552:	2800      	cmp	r0, #0
 8010554:	d1f0      	bne.n	8010538 <read_submessage_list+0x164>
 8010556:	e745      	b.n	80103e4 <read_submessage_list+0x10>
 8010558:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 801055c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8010560:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010564:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010568:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 801056c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8010570:	4641      	mov	r1, r8
 8010572:	4628      	mov	r0, r5
 8010574:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 8010578:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801057c:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8010580:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010584:	f002 f9ee 	bl	8012964 <uxr_deserialize_BaseObjectRequest>
 8010588:	4640      	mov	r0, r8
 801058a:	a911      	add	r1, sp, #68	; 0x44
 801058c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010590:	f000 fdba 	bl	8011108 <uxr_parse_base_object_request>
 8010594:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010596:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 801059a:	3e04      	subs	r6, #4
 801059c:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 80105a0:	f007 070e 	and.w	r7, r7, #14
 80105a4:	b2b6      	uxth	r6, r6
 80105a6:	9112      	str	r1, [sp, #72]	; 0x48
 80105a8:	f1b9 0f00 	cmp.w	r9, #0
 80105ac:	d006      	beq.n	80105bc <read_submessage_list+0x1e8>
 80105ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80105b2:	4642      	mov	r2, r8
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	4620      	mov	r0, r4
 80105b8:	2300      	movs	r3, #0
 80105ba:	47c8      	blx	r9
 80105bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80105be:	b168      	cbz	r0, 80105dc <read_submessage_list+0x208>
 80105c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80105c2:	2300      	movs	r3, #0
 80105c4:	3902      	subs	r1, #2
 80105c6:	e002      	b.n	80105ce <read_submessage_list+0x1fa>
 80105c8:	3301      	adds	r3, #1
 80105ca:	4283      	cmp	r3, r0
 80105cc:	d006      	beq.n	80105dc <read_submessage_list+0x208>
 80105ce:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80105d2:	4542      	cmp	r2, r8
 80105d4:	d1f8      	bne.n	80105c8 <read_submessage_list+0x1f4>
 80105d6:	2100      	movs	r1, #0
 80105d8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80105da:	54d1      	strb	r1, [r2, r3]
 80105dc:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 80105e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80105e2:	463b      	mov	r3, r7
 80105e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80105e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105ea:	4632      	mov	r2, r6
 80105ec:	9100      	str	r1, [sp, #0]
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7ff fd81 	bl	80100f8 <read_submessage_format>
 80105f6:	e6f5      	b.n	80103e4 <read_submessage_list+0x10>
 80105f8:	b97a      	cbnz	r2, 801061a <read_submessage_list+0x246>
 80105fa:	4629      	mov	r1, r5
 80105fc:	4620      	mov	r0, r4
 80105fe:	f000 fcd7 	bl	8010fb0 <uxr_read_delete_session_status>
 8010602:	e6ef      	b.n	80103e4 <read_submessage_list+0x10>
 8010604:	2a00      	cmp	r2, #0
 8010606:	f47f aeed 	bne.w	80103e4 <read_submessage_list+0x10>
 801060a:	4629      	mov	r1, r5
 801060c:	4620      	mov	r0, r4
 801060e:	f000 fcc3 	bl	8010f98 <uxr_read_create_session_status>
 8010612:	e6e7      	b.n	80103e4 <read_submessage_list+0x10>
 8010614:	b019      	add	sp, #100	; 0x64
 8010616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801061a:	a912      	add	r1, sp, #72	; 0x48
 801061c:	4628      	mov	r0, r5
 801061e:	f002 fae5 	bl	8012bec <uxr_deserialize_STATUS_Payload>
 8010622:	a910      	add	r1, sp, #64	; 0x40
 8010624:	aa0f      	add	r2, sp, #60	; 0x3c
 8010626:	a812      	add	r0, sp, #72	; 0x48
 8010628:	f000 fd6e 	bl	8011108 <uxr_parse_base_object_request>
 801062c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801062e:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 8010632:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8010636:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801063a:	9111      	str	r1, [sp, #68]	; 0x44
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	d006      	beq.n	8010650 <read_submessage_list+0x27c>
 8010642:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010646:	4632      	mov	r2, r6
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	4620      	mov	r0, r4
 801064c:	463b      	mov	r3, r7
 801064e:	47c0      	blx	r8
 8010650:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010652:	2a00      	cmp	r2, #0
 8010654:	f43f aec6 	beq.w	80103e4 <read_submessage_list+0x10>
 8010658:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801065a:	2100      	movs	r1, #0
 801065c:	3802      	subs	r0, #2
 801065e:	e003      	b.n	8010668 <read_submessage_list+0x294>
 8010660:	3101      	adds	r1, #1
 8010662:	4291      	cmp	r1, r2
 8010664:	f43f aebe 	beq.w	80103e4 <read_submessage_list+0x10>
 8010668:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801066c:	42b3      	cmp	r3, r6
 801066e:	d1f7      	bne.n	8010660 <read_submessage_list+0x28c>
 8010670:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010672:	545f      	strb	r7, [r3, r1]
 8010674:	e6b6      	b.n	80103e4 <read_submessage_list+0x10>
 8010676:	f001 fb6d 	bl	8011d54 <uxr_nanos>
 801067a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801067c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801067e:	4693      	mov	fp, r2
 8010680:	f04f 0c00 	mov.w	ip, #0
 8010684:	46b8      	mov	r8, r7
 8010686:	f04f 0900 	mov.w	r9, #0
 801068a:	2700      	movs	r7, #0
 801068c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801068e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010690:	fbca bc03 	smlal	fp, ip, sl, r3
 8010694:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010698:	fbca 6702 	smlal	r6, r7, sl, r2
 801069c:	fbca 8903 	smlal	r8, r9, sl, r3
 80106a0:	eb1b 0000 	adds.w	r0, fp, r0
 80106a4:	eb4c 0101 	adc.w	r1, ip, r1
 80106a8:	eb18 0306 	adds.w	r3, r8, r6
 80106ac:	eb49 0207 	adc.w	r2, r9, r7
 80106b0:	1ac3      	subs	r3, r0, r3
 80106b2:	9308      	str	r3, [sp, #32]
 80106b4:	eb61 0302 	sbc.w	r3, r1, r2
 80106b8:	9309      	str	r3, [sp, #36]	; 0x24
 80106ba:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80106be:	0fd3      	lsrs	r3, r2, #31
 80106c0:	18c9      	adds	r1, r1, r3
 80106c2:	f142 0200 	adc.w	r2, r2, #0
 80106c6:	084b      	lsrs	r3, r1, #1
 80106c8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80106cc:	1052      	asrs	r2, r2, #1
 80106ce:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80106d2:	e6e3      	b.n	801049c <read_submessage_list+0xc8>
 80106d4:	3b9aca00 	.word	0x3b9aca00

080106d8 <listen_message>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80106de:	b099      	sub	sp, #100	; 0x64
 80106e0:	6894      	ldr	r4, [r2, #8]
 80106e2:	460b      	mov	r3, r1
 80106e4:	4605      	mov	r5, r0
 80106e6:	a904      	add	r1, sp, #16
 80106e8:	6810      	ldr	r0, [r2, #0]
 80106ea:	aa05      	add	r2, sp, #20
 80106ec:	47a0      	blx	r4
 80106ee:	4604      	mov	r4, r0
 80106f0:	b918      	cbnz	r0, 80106fa <listen_message+0x22>
 80106f2:	4620      	mov	r0, r4
 80106f4:	b019      	add	sp, #100	; 0x64
 80106f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fa:	2600      	movs	r6, #0
 80106fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8010700:	a808      	add	r0, sp, #32
 8010702:	f7ff f841 	bl	800f788 <ucdr_init_buffer>
 8010706:	4628      	mov	r0, r5
 8010708:	a908      	add	r1, sp, #32
 801070a:	f10d 030e 	add.w	r3, sp, #14
 801070e:	aa03      	add	r2, sp, #12
 8010710:	f88d 600c 	strb.w	r6, [sp, #12]
 8010714:	f000 fc92 	bl	801103c <uxr_read_session_header>
 8010718:	b1e8      	cbz	r0, 8010756 <listen_message+0x7e>
 801071a:	4631      	mov	r1, r6
 801071c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8010720:	f001 f9a6 	bl	8011a70 <uxr_stream_id_from_raw>
 8010724:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010728:	2f01      	cmp	r7, #1
 801072a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 801072e:	9007      	str	r0, [sp, #28]
 8010730:	fa5f f880 	uxtb.w	r8, r0
 8010734:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010738:	d01b      	beq.n	8010772 <listen_message+0x9a>
 801073a:	2f02      	cmp	r7, #2
 801073c:	d031      	beq.n	80107a2 <listen_message+0xca>
 801073e:	2f00      	cmp	r7, #0
 8010740:	d1d7      	bne.n	80106f2 <listen_message+0x1a>
 8010742:	4639      	mov	r1, r7
 8010744:	4638      	mov	r0, r7
 8010746:	f001 f993 	bl	8011a70 <uxr_stream_id_from_raw>
 801074a:	a908      	add	r1, sp, #32
 801074c:	4602      	mov	r2, r0
 801074e:	4628      	mov	r0, r5
 8010750:	f7ff fe40 	bl	80103d4 <read_submessage_list>
 8010754:	e7cd      	b.n	80106f2 <listen_message+0x1a>
 8010756:	a808      	add	r0, sp, #32
 8010758:	f7ff f848 	bl	800f7ec <ucdr_buffer_remaining>
 801075c:	2804      	cmp	r0, #4
 801075e:	d9c8      	bls.n	80106f2 <listen_message+0x1a>
 8010760:	a808      	add	r0, sp, #32
 8010762:	f7ff fddd 	bl	8010320 <uxr_acknack_pong.part.0>
 8010766:	2800      	cmp	r0, #0
 8010768:	d0c3      	beq.n	80106f2 <listen_message+0x1a>
 801076a:	2301      	movs	r3, #1
 801076c:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8010770:	e7bf      	b.n	80106f2 <listen_message+0x1a>
 8010772:	4631      	mov	r1, r6
 8010774:	f105 0008 	add.w	r0, r5, #8
 8010778:	f001 fa5e 	bl	8011c38 <uxr_get_input_best_effort_stream>
 801077c:	2800      	cmp	r0, #0
 801077e:	d0b8      	beq.n	80106f2 <listen_message+0x1a>
 8010780:	4651      	mov	r1, sl
 8010782:	f005 fd2d 	bl	80161e0 <uxr_receive_best_effort_message>
 8010786:	2800      	cmp	r0, #0
 8010788:	d0b3      	beq.n	80106f2 <listen_message+0x1a>
 801078a:	f88d 801c 	strb.w	r8, [sp, #28]
 801078e:	f88d 601d 	strb.w	r6, [sp, #29]
 8010792:	f88d 701e 	strb.w	r7, [sp, #30]
 8010796:	4628      	mov	r0, r5
 8010798:	9a07      	ldr	r2, [sp, #28]
 801079a:	a908      	add	r1, sp, #32
 801079c:	f7ff fe1a 	bl	80103d4 <read_submessage_list>
 80107a0:	e7a7      	b.n	80106f2 <listen_message+0x1a>
 80107a2:	4631      	mov	r1, r6
 80107a4:	f105 0008 	add.w	r0, r5, #8
 80107a8:	f001 fa50 	bl	8011c4c <uxr_get_input_reliable_stream>
 80107ac:	4681      	mov	r9, r0
 80107ae:	b328      	cbz	r0, 80107fc <listen_message+0x124>
 80107b0:	a808      	add	r0, sp, #32
 80107b2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80107b6:	f7ff f819 	bl	800f7ec <ucdr_buffer_remaining>
 80107ba:	4603      	mov	r3, r0
 80107bc:	f10d 000d 	add.w	r0, sp, #13
 80107c0:	9000      	str	r0, [sp, #0]
 80107c2:	465a      	mov	r2, fp
 80107c4:	4651      	mov	r1, sl
 80107c6:	4648      	mov	r0, r9
 80107c8:	f005 fd8e 	bl	80162e8 <uxr_receive_reliable_message>
 80107cc:	b1b0      	cbz	r0, 80107fc <listen_message+0x124>
 80107ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80107d2:	b1cb      	cbz	r3, 8010808 <listen_message+0x130>
 80107d4:	2702      	movs	r7, #2
 80107d6:	e00a      	b.n	80107ee <listen_message+0x116>
 80107d8:	f88d 801c 	strb.w	r8, [sp, #28]
 80107dc:	f88d 601d 	strb.w	r6, [sp, #29]
 80107e0:	f88d 701e 	strb.w	r7, [sp, #30]
 80107e4:	4628      	mov	r0, r5
 80107e6:	9a07      	ldr	r2, [sp, #28]
 80107e8:	a910      	add	r1, sp, #64	; 0x40
 80107ea:	f7ff fdf3 	bl	80103d4 <read_submessage_list>
 80107ee:	2204      	movs	r2, #4
 80107f0:	4648      	mov	r0, r9
 80107f2:	a910      	add	r1, sp, #64	; 0x40
 80107f4:	f005 fdf8 	bl	80163e8 <uxr_next_input_reliable_buffer_available>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d1ed      	bne.n	80107d8 <listen_message+0x100>
 80107fc:	4632      	mov	r2, r6
 80107fe:	4641      	mov	r1, r8
 8010800:	4628      	mov	r0, r5
 8010802:	f7ff fd55 	bl	80102b0 <write_submessage_acknack.isra.0>
 8010806:	e774      	b.n	80106f2 <listen_message+0x1a>
 8010808:	f88d 801c 	strb.w	r8, [sp, #28]
 801080c:	f88d 601d 	strb.w	r6, [sp, #29]
 8010810:	f88d 701e 	strb.w	r7, [sp, #30]
 8010814:	4628      	mov	r0, r5
 8010816:	9a07      	ldr	r2, [sp, #28]
 8010818:	a908      	add	r1, sp, #32
 801081a:	f7ff fddb 	bl	80103d4 <read_submessage_list>
 801081e:	e7d9      	b.n	80107d4 <listen_message+0xfc>

08010820 <listen_message_reliably>:
 8010820:	1e0b      	subs	r3, r1, #0
 8010822:	bfb8      	it	lt
 8010824:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801082c:	4683      	mov	fp, r0
 801082e:	b095      	sub	sp, #84	; 0x54
 8010830:	9303      	str	r3, [sp, #12]
 8010832:	f001 fa73 	bl	8011d1c <uxr_millis>
 8010836:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801083a:	4688      	mov	r8, r1
 801083c:	4607      	mov	r7, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	f000 8093 	beq.w	801096a <listen_message_reliably+0x14a>
 8010844:	2600      	movs	r6, #0
 8010846:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801084a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801084e:	4630      	mov	r0, r6
 8010850:	e00f      	b.n	8010872 <listen_message_reliably+0x52>
 8010852:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010856:	454a      	cmp	r2, r9
 8010858:	eb73 010a 	sbcs.w	r1, r3, sl
 801085c:	bfb8      	it	lt
 801085e:	469a      	movlt	sl, r3
 8010860:	f106 0601 	add.w	r6, r6, #1
 8010864:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010868:	b2f0      	uxtb	r0, r6
 801086a:	bfb8      	it	lt
 801086c:	4691      	movlt	r9, r2
 801086e:	4283      	cmp	r3, r0
 8010870:	d953      	bls.n	801091a <listen_message_reliably+0xfa>
 8010872:	2201      	movs	r2, #1
 8010874:	2102      	movs	r1, #2
 8010876:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801087a:	f001 f8cf 	bl	8011a1c <uxr_stream_id>
 801087e:	4601      	mov	r1, r0
 8010880:	00e4      	lsls	r4, r4, #3
 8010882:	f104 0520 	add.w	r5, r4, #32
 8010886:	445d      	add	r5, fp
 8010888:	4643      	mov	r3, r8
 801088a:	463a      	mov	r2, r7
 801088c:	4628      	mov	r0, r5
 801088e:	9104      	str	r1, [sp, #16]
 8010890:	f006 f904 	bl	8016a9c <uxr_update_output_stream_heartbeat_timestamp>
 8010894:	eb0b 0304 	add.w	r3, fp, r4
 8010898:	2800      	cmp	r0, #0
 801089a:	d0da      	beq.n	8010852 <listen_message_reliably+0x32>
 801089c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80108a0:	4658      	mov	r0, fp
 80108a2:	f89d 5011 	ldrb.w	r5, [sp, #17]
 80108a6:	9302      	str	r3, [sp, #8]
 80108a8:	f000 fc08 	bl	80110bc <uxr_session_header_offset>
 80108ac:	3501      	adds	r5, #1
 80108ae:	2300      	movs	r3, #0
 80108b0:	2211      	movs	r2, #17
 80108b2:	9000      	str	r0, [sp, #0]
 80108b4:	a907      	add	r1, sp, #28
 80108b6:	a80c      	add	r0, sp, #48	; 0x30
 80108b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80108bc:	f7fe ff52 	bl	800f764 <ucdr_init_buffer_origin_offset>
 80108c0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80108c4:	2300      	movs	r3, #0
 80108c6:	2205      	movs	r2, #5
 80108c8:	210b      	movs	r1, #11
 80108ca:	a80c      	add	r0, sp, #48	; 0x30
 80108cc:	f001 f9e0 	bl	8011c90 <uxr_buffer_submessage_header>
 80108d0:	2101      	movs	r1, #1
 80108d2:	8968      	ldrh	r0, [r5, #10]
 80108d4:	f006 f9a2 	bl	8016c1c <uxr_seq_num_add>
 80108d8:	4603      	mov	r3, r0
 80108da:	892a      	ldrh	r2, [r5, #8]
 80108dc:	9d02      	ldr	r5, [sp, #8]
 80108de:	a905      	add	r1, sp, #20
 80108e0:	a80c      	add	r0, sp, #48	; 0x30
 80108e2:	f88d 5018 	strb.w	r5, [sp, #24]
 80108e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80108ea:	f8ad 3014 	strh.w	r3, [sp, #20]
 80108ee:	f002 f9e9 	bl	8012cc4 <uxr_serialize_HEARTBEAT_Payload>
 80108f2:	2200      	movs	r2, #0
 80108f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108f6:	4611      	mov	r1, r2
 80108f8:	4658      	mov	r0, fp
 80108fa:	f000 fb8b 	bl	8011014 <uxr_stamp_session_header>
 80108fe:	a80c      	add	r0, sp, #48	; 0x30
 8010900:	f7fe ff70 	bl	800f7e4 <ucdr_buffer_length>
 8010904:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8010908:	4602      	mov	r2, r0
 801090a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801090e:	a907      	add	r1, sp, #28
 8010910:	445c      	add	r4, fp
 8010912:	47a8      	blx	r5
 8010914:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010918:	e79d      	b.n	8010856 <listen_message_reliably+0x36>
 801091a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010922:	45a2      	cmp	sl, r4
 8010924:	bf08      	it	eq
 8010926:	4599      	cmpeq	r9, r3
 8010928:	d01f      	beq.n	801096a <listen_message_reliably+0x14a>
 801092a:	eba9 0107 	sub.w	r1, r9, r7
 801092e:	2900      	cmp	r1, #0
 8010930:	bf08      	it	eq
 8010932:	2101      	moveq	r1, #1
 8010934:	9c03      	ldr	r4, [sp, #12]
 8010936:	4658      	mov	r0, fp
 8010938:	428c      	cmp	r4, r1
 801093a:	4623      	mov	r3, r4
 801093c:	bfa8      	it	ge
 801093e:	460b      	movge	r3, r1
 8010940:	4619      	mov	r1, r3
 8010942:	461f      	mov	r7, r3
 8010944:	f7ff fec8 	bl	80106d8 <listen_message>
 8010948:	b110      	cbz	r0, 8010950 <listen_message_reliably+0x130>
 801094a:	b015      	add	sp, #84	; 0x54
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010950:	1be3      	subs	r3, r4, r7
 8010952:	2b00      	cmp	r3, #0
 8010954:	9303      	str	r3, [sp, #12]
 8010956:	ddf8      	ble.n	801094a <listen_message_reliably+0x12a>
 8010958:	f001 f9e0 	bl	8011d1c <uxr_millis>
 801095c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010960:	4688      	mov	r8, r1
 8010962:	4607      	mov	r7, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	f47f af6d 	bne.w	8010844 <listen_message_reliably+0x24>
 801096a:	9903      	ldr	r1, [sp, #12]
 801096c:	e7df      	b.n	801092e <listen_message_reliably+0x10e>
 801096e:	bf00      	nop

08010970 <uxr_init_session>:
 8010970:	b5d0      	push	{r4, r6, r7, lr}
 8010972:	2300      	movs	r3, #0
 8010974:	2600      	movs	r6, #0
 8010976:	2700      	movs	r7, #0
 8010978:	4604      	mov	r4, r0
 801097a:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801097e:	6701      	str	r1, [r0, #112]	; 0x70
 8010980:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8010984:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010988:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 801098c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8010990:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010994:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010998:	2181      	movs	r1, #129	; 0x81
 801099a:	f000 faa9 	bl	8010ef0 <uxr_init_session_info>
 801099e:	f104 0008 	add.w	r0, r4, #8
 80109a2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80109a6:	f001 b88f 	b.w	8011ac8 <uxr_init_stream_storage>
 80109aa:	bf00      	nop

080109ac <uxr_set_status_callback>:
 80109ac:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop

080109b4 <uxr_set_topic_callback>:
 80109b4:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <uxr_set_request_callback>:
 80109bc:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop

080109c4 <uxr_set_reply_callback>:
 80109c4:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <uxr_create_session>:
 80109cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d0:	4604      	mov	r4, r0
 80109d2:	f100 0708 	add.w	r7, r0, #8
 80109d6:	b092      	sub	sp, #72	; 0x48
 80109d8:	4638      	mov	r0, r7
 80109da:	f001 f87f 	bl	8011adc <uxr_reset_stream_storage>
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 fb6c 	bl	80110bc <uxr_session_header_offset>
 80109e4:	2300      	movs	r3, #0
 80109e6:	221c      	movs	r2, #28
 80109e8:	9000      	str	r0, [sp, #0]
 80109ea:	a903      	add	r1, sp, #12
 80109ec:	a80a      	add	r0, sp, #40	; 0x28
 80109ee:	f7fe feb9 	bl	800f764 <ucdr_init_buffer_origin_offset>
 80109f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80109f4:	4620      	mov	r0, r4
 80109f6:	8a1a      	ldrh	r2, [r3, #16]
 80109f8:	a90a      	add	r1, sp, #40	; 0x28
 80109fa:	3a04      	subs	r2, #4
 80109fc:	b292      	uxth	r2, r2
 80109fe:	f000 fa89 	bl	8010f14 <uxr_buffer_create_session>
 8010a02:	4620      	mov	r0, r4
 8010a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010a06:	f000 faf1 	bl	8010fec <uxr_stamp_create_session_header>
 8010a0a:	a80a      	add	r0, sp, #40	; 0x28
 8010a0c:	f7fe feea 	bl	800f7e4 <ucdr_buffer_length>
 8010a10:	23ff      	movs	r3, #255	; 0xff
 8010a12:	4606      	mov	r6, r0
 8010a14:	250a      	movs	r5, #10
 8010a16:	7163      	strb	r3, [r4, #5]
 8010a18:	e001      	b.n	8010a1e <uxr_create_session+0x52>
 8010a1a:	2bff      	cmp	r3, #255	; 0xff
 8010a1c:	d10d      	bne.n	8010a3a <uxr_create_session+0x6e>
 8010a1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010a20:	4632      	mov	r2, r6
 8010a22:	e9d3 0800 	ldrd	r0, r8, [r3]
 8010a26:	a903      	add	r1, sp, #12
 8010a28:	47c0      	blx	r8
 8010a2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f7ff fe52 	bl	80106d8 <listen_message>
 8010a34:	3d01      	subs	r5, #1
 8010a36:	7963      	ldrb	r3, [r4, #5]
 8010a38:	d1ef      	bne.n	8010a1a <uxr_create_session+0x4e>
 8010a3a:	b11b      	cbz	r3, 8010a44 <uxr_create_session+0x78>
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	b012      	add	sp, #72	; 0x48
 8010a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a44:	4638      	mov	r0, r7
 8010a46:	f001 f849 	bl	8011adc <uxr_reset_stream_storage>
 8010a4a:	2001      	movs	r0, #1
 8010a4c:	b012      	add	sp, #72	; 0x48
 8010a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a52:	bf00      	nop

08010a54 <uxr_delete_session_retries>:
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	b08e      	sub	sp, #56	; 0x38
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	460d      	mov	r5, r1
 8010a5e:	f000 fb2d 	bl	80110bc <uxr_session_header_offset>
 8010a62:	2300      	movs	r3, #0
 8010a64:	2210      	movs	r2, #16
 8010a66:	9000      	str	r0, [sp, #0]
 8010a68:	a902      	add	r1, sp, #8
 8010a6a:	a806      	add	r0, sp, #24
 8010a6c:	f7fe fe7a 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8010a70:	4620      	mov	r0, r4
 8010a72:	a906      	add	r1, sp, #24
 8010a74:	f000 fa74 	bl	8010f60 <uxr_buffer_delete_session>
 8010a78:	2200      	movs	r2, #0
 8010a7a:	9b06      	ldr	r3, [sp, #24]
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	4611      	mov	r1, r2
 8010a80:	f000 fac8 	bl	8011014 <uxr_stamp_session_header>
 8010a84:	a806      	add	r0, sp, #24
 8010a86:	f7fe fead 	bl	800f7e4 <ucdr_buffer_length>
 8010a8a:	23ff      	movs	r3, #255	; 0xff
 8010a8c:	4606      	mov	r6, r0
 8010a8e:	7163      	strb	r3, [r4, #5]
 8010a90:	b1f5      	cbz	r5, 8010ad0 <uxr_delete_session_retries+0x7c>
 8010a92:	2700      	movs	r7, #0
 8010a94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010a96:	4632      	mov	r2, r6
 8010a98:	e9d3 0800 	ldrd	r0, r8, [r3]
 8010a9c:	a902      	add	r1, sp, #8
 8010a9e:	47c0      	blx	r8
 8010aa0:	3701      	adds	r7, #1
 8010aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f7ff fe16 	bl	80106d8 <listen_message>
 8010aac:	42bd      	cmp	r5, r7
 8010aae:	7963      	ldrb	r3, [r4, #5]
 8010ab0:	d007      	beq.n	8010ac2 <uxr_delete_session_retries+0x6e>
 8010ab2:	2bff      	cmp	r3, #255	; 0xff
 8010ab4:	d0ee      	beq.n	8010a94 <uxr_delete_session_retries+0x40>
 8010ab6:	fab3 f083 	clz	r0, r3
 8010aba:	0940      	lsrs	r0, r0, #5
 8010abc:	b00e      	add	sp, #56	; 0x38
 8010abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac2:	2bff      	cmp	r3, #255	; 0xff
 8010ac4:	bf08      	it	eq
 8010ac6:	2000      	moveq	r0, #0
 8010ac8:	d1f5      	bne.n	8010ab6 <uxr_delete_session_retries+0x62>
 8010aca:	b00e      	add	sp, #56	; 0x38
 8010acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ad8:	a902      	add	r1, sp, #8
 8010ada:	47a8      	blx	r5
 8010adc:	7963      	ldrb	r3, [r4, #5]
 8010ade:	fab3 f083 	clz	r0, r3
 8010ae2:	0940      	lsrs	r0, r0, #5
 8010ae4:	e7ea      	b.n	8010abc <uxr_delete_session_retries+0x68>
 8010ae6:	bf00      	nop

08010ae8 <uxr_create_output_best_effort_stream>:
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	4604      	mov	r4, r0
 8010aee:	460d      	mov	r5, r1
 8010af0:	4616      	mov	r6, r2
 8010af2:	f000 fae3 	bl	80110bc <uxr_session_header_offset>
 8010af6:	4632      	mov	r2, r6
 8010af8:	4603      	mov	r3, r0
 8010afa:	4629      	mov	r1, r5
 8010afc:	f104 0008 	add.w	r0, r4, #8
 8010b00:	b002      	add	sp, #8
 8010b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b06:	f001 b829 	b.w	8011b5c <uxr_add_output_best_effort_buffer>
 8010b0a:	bf00      	nop

08010b0c <uxr_create_output_reliable_stream>:
 8010b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	460d      	mov	r5, r1
 8010b12:	4616      	mov	r6, r2
 8010b14:	461f      	mov	r7, r3
 8010b16:	4604      	mov	r4, r0
 8010b18:	f000 fad0 	bl	80110bc <uxr_session_header_offset>
 8010b1c:	4684      	mov	ip, r0
 8010b1e:	463b      	mov	r3, r7
 8010b20:	4632      	mov	r2, r6
 8010b22:	4629      	mov	r1, r5
 8010b24:	f104 0008 	add.w	r0, r4, #8
 8010b28:	f8cd c000 	str.w	ip, [sp]
 8010b2c:	f001 f828 	bl	8011b80 <uxr_add_output_reliable_buffer>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2000      	movs	r0, #0
 8010b34:	b2da      	uxtb	r2, r3
 8010b36:	f362 0007 	bfi	r0, r2, #0, #8
 8010b3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b3e:	f362 200f 	bfi	r0, r2, #8, #8
 8010b42:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b46:	f362 4017 	bfi	r0, r2, #16, #8
 8010b4a:	0e1b      	lsrs	r3, r3, #24
 8010b4c:	f363 601f 	bfi	r0, r3, #24, #8
 8010b50:	b005      	add	sp, #20
 8010b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b54 <uxr_create_input_best_effort_stream>:
 8010b54:	b082      	sub	sp, #8
 8010b56:	3008      	adds	r0, #8
 8010b58:	b002      	add	sp, #8
 8010b5a:	f001 b82b 	b.w	8011bb4 <uxr_add_input_best_effort_buffer>
 8010b5e:	bf00      	nop

08010b60 <uxr_create_input_reliable_stream>:
 8010b60:	b510      	push	{r4, lr}
 8010b62:	4c0c      	ldr	r4, [pc, #48]	; (8010b94 <uxr_create_input_reliable_stream+0x34>)
 8010b64:	b084      	sub	sp, #16
 8010b66:	9400      	str	r4, [sp, #0]
 8010b68:	3008      	adds	r0, #8
 8010b6a:	f001 f839 	bl	8011be0 <uxr_add_input_reliable_buffer>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2000      	movs	r0, #0
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	f362 0007 	bfi	r0, r2, #0, #8
 8010b78:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b7c:	f362 200f 	bfi	r0, r2, #8, #8
 8010b80:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b84:	f362 4017 	bfi	r0, r2, #16, #8
 8010b88:	0e1b      	lsrs	r3, r3, #24
 8010b8a:	f363 601f 	bfi	r0, r3, #24, #8
 8010b8e:	b004      	add	sp, #16
 8010b90:	bd10      	pop	{r4, pc}
 8010b92:	bf00      	nop
 8010b94:	0801026d 	.word	0x0801026d

08010b98 <uxr_sync_session>:
 8010b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b9a:	b093      	sub	sp, #76	; 0x4c
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	460d      	mov	r5, r1
 8010ba0:	f000 fa8c 	bl	80110bc <uxr_session_header_offset>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	2214      	movs	r2, #20
 8010ba8:	9000      	str	r0, [sp, #0]
 8010baa:	a905      	add	r1, sp, #20
 8010bac:	a80a      	add	r0, sp, #40	; 0x28
 8010bae:	f7fe fdd9 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	2208      	movs	r2, #8
 8010bb6:	210e      	movs	r1, #14
 8010bb8:	a80a      	add	r0, sp, #40	; 0x28
 8010bba:	f001 f869 	bl	8011c90 <uxr_buffer_submessage_header>
 8010bbe:	f001 f8c9 	bl	8011d54 <uxr_nanos>
 8010bc2:	a31d      	add	r3, pc, #116	; (adr r3, 8010c38 <uxr_sync_session+0xa0>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	4606      	mov	r6, r0
 8010bca:	460f      	mov	r7, r1
 8010bcc:	f7ef fdc6 	bl	800075c <__aeabi_ldivmod>
 8010bd0:	a319      	add	r3, pc, #100	; (adr r3, 8010c38 <uxr_sync_session+0xa0>)
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	4684      	mov	ip, r0
 8010bd8:	4639      	mov	r1, r7
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f8cd c00c 	str.w	ip, [sp, #12]
 8010be0:	f7ef fdbc 	bl	800075c <__aeabi_ldivmod>
 8010be4:	a903      	add	r1, sp, #12
 8010be6:	a80a      	add	r0, sp, #40	; 0x28
 8010be8:	9204      	str	r2, [sp, #16]
 8010bea:	f002 f891 	bl	8012d10 <uxr_serialize_TIMESTAMP_Payload>
 8010bee:	2200      	movs	r2, #0
 8010bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bf2:	4611      	mov	r1, r2
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f000 fa0d 	bl	8011014 <uxr_stamp_session_header>
 8010bfa:	a80a      	add	r0, sp, #40	; 0x28
 8010bfc:	f7fe fdf2 	bl	800f7e4 <ucdr_buffer_length>
 8010c00:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c02:	4602      	mov	r2, r0
 8010c04:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010c08:	a905      	add	r1, sp, #20
 8010c0a:	47b0      	blx	r6
 8010c0c:	f001 f886 	bl	8011d1c <uxr_millis>
 8010c10:	2300      	movs	r3, #0
 8010c12:	4606      	mov	r6, r0
 8010c14:	4629      	mov	r1, r5
 8010c16:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010c1a:	e000      	b.n	8010c1e <uxr_sync_session+0x86>
 8010c1c:	b950      	cbnz	r0, 8010c34 <uxr_sync_session+0x9c>
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f7ff fdfe 	bl	8010820 <listen_message_reliably>
 8010c24:	f001 f87a 	bl	8011d1c <uxr_millis>
 8010c28:	1b83      	subs	r3, r0, r6
 8010c2a:	1ae9      	subs	r1, r5, r3
 8010c2c:	2900      	cmp	r1, #0
 8010c2e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8010c32:	dcf3      	bgt.n	8010c1c <uxr_sync_session+0x84>
 8010c34:	b013      	add	sp, #76	; 0x4c
 8010c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c38:	3b9aca00 	.word	0x3b9aca00
 8010c3c:	00000000 	.word	0x00000000

08010c40 <uxr_epoch_nanos>:
 8010c40:	b510      	push	{r4, lr}
 8010c42:	4604      	mov	r4, r0
 8010c44:	f001 f886 	bl	8011d54 <uxr_nanos>
 8010c48:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010c4c:	1ac0      	subs	r0, r0, r3
 8010c4e:	eb61 0102 	sbc.w	r1, r1, r2
 8010c52:	bd10      	pop	{r4, pc}

08010c54 <uxr_flash_output_streams>:
 8010c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c58:	7e03      	ldrb	r3, [r0, #24]
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	b1fb      	cbz	r3, 8010ca0 <uxr_flash_output_streams+0x4c>
 8010c60:	f04f 0900 	mov.w	r9, #0
 8010c64:	4648      	mov	r0, r9
 8010c66:	f10d 0802 	add.w	r8, sp, #2
 8010c6a:	af03      	add	r7, sp, #12
 8010c6c:	ae02      	add	r6, sp, #8
 8010c6e:	2201      	movs	r2, #1
 8010c70:	4611      	mov	r1, r2
 8010c72:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010c76:	f000 fed1 	bl	8011a1c <uxr_stream_id>
 8010c7a:	4684      	mov	ip, r0
 8010c7c:	3508      	adds	r5, #8
 8010c7e:	4643      	mov	r3, r8
 8010c80:	4628      	mov	r0, r5
 8010c82:	463a      	mov	r2, r7
 8010c84:	4631      	mov	r1, r6
 8010c86:	f8cd c004 	str.w	ip, [sp, #4]
 8010c8a:	f005 fcbf 	bl	801660c <uxr_prepare_best_effort_buffer_to_send>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d13c      	bne.n	8010d0c <uxr_flash_output_streams+0xb8>
 8010c92:	7e23      	ldrb	r3, [r4, #24]
 8010c94:	f109 0901 	add.w	r9, r9, #1
 8010c98:	fa5f f089 	uxtb.w	r0, r9
 8010c9c:	4283      	cmp	r3, r0
 8010c9e:	d8e6      	bhi.n	8010c6e <uxr_flash_output_streams+0x1a>
 8010ca0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010ca4:	b37b      	cbz	r3, 8010d06 <uxr_flash_output_streams+0xb2>
 8010ca6:	f04f 0900 	mov.w	r9, #0
 8010caa:	4648      	mov	r0, r9
 8010cac:	f10d 0802 	add.w	r8, sp, #2
 8010cb0:	af03      	add	r7, sp, #12
 8010cb2:	ae02      	add	r6, sp, #8
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	2102      	movs	r1, #2
 8010cb8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010cbc:	f000 feae 	bl	8011a1c <uxr_stream_id>
 8010cc0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010cc4:	3520      	adds	r5, #32
 8010cc6:	9001      	str	r0, [sp, #4]
 8010cc8:	e00d      	b.n	8010ce6 <uxr_flash_output_streams+0x92>
 8010cca:	4620      	mov	r0, r4
 8010ccc:	9b02      	ldr	r3, [sp, #8]
 8010cce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010cd2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010cd6:	f000 f99d 	bl	8011014 <uxr_stamp_session_header>
 8010cda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cdc:	9a03      	ldr	r2, [sp, #12]
 8010cde:	9902      	ldr	r1, [sp, #8]
 8010ce0:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010ce4:	47d0      	blx	sl
 8010ce6:	4643      	mov	r3, r8
 8010ce8:	463a      	mov	r2, r7
 8010cea:	4631      	mov	r1, r6
 8010cec:	4628      	mov	r0, r5
 8010cee:	f005 fe8f 	bl	8016a10 <uxr_prepare_next_reliable_buffer_to_send>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d1e9      	bne.n	8010cca <uxr_flash_output_streams+0x76>
 8010cf6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010cfa:	f109 0901 	add.w	r9, r9, #1
 8010cfe:	fa5f f089 	uxtb.w	r0, r9
 8010d02:	4283      	cmp	r3, r0
 8010d04:	d8d6      	bhi.n	8010cb4 <uxr_flash_output_streams+0x60>
 8010d06:	b004      	add	sp, #16
 8010d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	9b02      	ldr	r3, [sp, #8]
 8010d10:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d14:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d18:	f000 f97c 	bl	8011014 <uxr_stamp_session_header>
 8010d1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d1e:	9a03      	ldr	r2, [sp, #12]
 8010d20:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d24:	9902      	ldr	r1, [sp, #8]
 8010d26:	47a8      	blx	r5
 8010d28:	f109 0901 	add.w	r9, r9, #1
 8010d2c:	7e23      	ldrb	r3, [r4, #24]
 8010d2e:	fa5f f089 	uxtb.w	r0, r9
 8010d32:	4283      	cmp	r3, r0
 8010d34:	d89b      	bhi.n	8010c6e <uxr_flash_output_streams+0x1a>
 8010d36:	e7b3      	b.n	8010ca0 <uxr_flash_output_streams+0x4c>

08010d38 <uxr_run_session_until_data>:
 8010d38:	b570      	push	{r4, r5, r6, lr}
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	460d      	mov	r5, r1
 8010d3e:	f000 ffed 	bl	8011d1c <uxr_millis>
 8010d42:	4606      	mov	r6, r0
 8010d44:	4620      	mov	r0, r4
 8010d46:	f7ff ff85 	bl	8010c54 <uxr_flash_output_streams>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010d52:	e005      	b.n	8010d60 <uxr_run_session_until_data+0x28>
 8010d54:	f000 ffe2 	bl	8011d1c <uxr_millis>
 8010d58:	1b81      	subs	r1, r0, r6
 8010d5a:	1a69      	subs	r1, r5, r1
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	dd07      	ble.n	8010d70 <uxr_run_session_until_data+0x38>
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7ff fd5d 	bl	8010820 <listen_message_reliably>
 8010d66:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	d0f2      	beq.n	8010d54 <uxr_run_session_until_data+0x1c>
 8010d6e:	bd70      	pop	{r4, r5, r6, pc}
 8010d70:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	bf00      	nop

08010d78 <uxr_run_session_until_confirm_delivery>:
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	460d      	mov	r5, r1
 8010d80:	f000 ffcc 	bl	8011d1c <uxr_millis>
 8010d84:	4607      	mov	r7, r0
 8010d86:	4630      	mov	r0, r6
 8010d88:	f7ff ff64 	bl	8010c54 <uxr_flash_output_streams>
 8010d8c:	2d00      	cmp	r5, #0
 8010d8e:	bfa8      	it	ge
 8010d90:	462c      	movge	r4, r5
 8010d92:	f106 0808 	add.w	r8, r6, #8
 8010d96:	da09      	bge.n	8010dac <uxr_run_session_until_confirm_delivery+0x34>
 8010d98:	e00d      	b.n	8010db6 <uxr_run_session_until_confirm_delivery+0x3e>
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f7ff fd3f 	bl	8010820 <listen_message_reliably>
 8010da2:	f000 ffbb 	bl	8011d1c <uxr_millis>
 8010da6:	1bc1      	subs	r1, r0, r7
 8010da8:	1a6c      	subs	r4, r5, r1
 8010daa:	d404      	bmi.n	8010db6 <uxr_run_session_until_confirm_delivery+0x3e>
 8010dac:	4640      	mov	r0, r8
 8010dae:	f000 ff59 	bl	8011c64 <uxr_output_streams_confirmed>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	d0f1      	beq.n	8010d9a <uxr_run_session_until_confirm_delivery+0x22>
 8010db6:	4640      	mov	r0, r8
 8010db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	f000 bf52 	b.w	8011c64 <uxr_output_streams_confirmed>

08010dc0 <uxr_run_session_until_all_status>:
 8010dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010dc6:	4688      	mov	r8, r1
 8010dc8:	4615      	mov	r5, r2
 8010dca:	461c      	mov	r4, r3
 8010dcc:	4607      	mov	r7, r0
 8010dce:	f7ff ff41 	bl	8010c54 <uxr_flash_output_streams>
 8010dd2:	b126      	cbz	r6, 8010dde <uxr_run_session_until_all_status+0x1e>
 8010dd4:	4632      	mov	r2, r6
 8010dd6:	21ff      	movs	r1, #255	; 0xff
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f006 f963 	bl	80170a4 <memset>
 8010dde:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 8010de2:	67fe      	str	r6, [r7, #124]	; 0x7c
 8010de4:	f000 ff9a 	bl	8011d1c <uxr_millis>
 8010de8:	4641      	mov	r1, r8
 8010dea:	4681      	mov	r9, r0
 8010dec:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8010df0:	f1a5 0a02 	sub.w	sl, r5, #2
 8010df4:	4638      	mov	r0, r7
 8010df6:	f7ff fd13 	bl	8010820 <listen_message_reliably>
 8010dfa:	f000 ff8f 	bl	8011d1c <uxr_millis>
 8010dfe:	eba0 0109 	sub.w	r1, r0, r9
 8010e02:	eba8 0101 	sub.w	r1, r8, r1
 8010e06:	b33e      	cbz	r6, 8010e58 <uxr_run_session_until_all_status+0x98>
 8010e08:	4658      	mov	r0, fp
 8010e0a:	465c      	mov	r4, fp
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e002      	b.n	8010e16 <uxr_run_session_until_all_status+0x56>
 8010e10:	42b3      	cmp	r3, r6
 8010e12:	d20c      	bcs.n	8010e2e <uxr_run_session_until_all_status+0x6e>
 8010e14:	3301      	adds	r3, #1
 8010e16:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8010e1a:	2dff      	cmp	r5, #255	; 0xff
 8010e1c:	d1f8      	bne.n	8010e10 <uxr_run_session_until_all_status+0x50>
 8010e1e:	42b3      	cmp	r3, r6
 8010e20:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 8010e24:	d213      	bcs.n	8010e4e <uxr_run_session_until_all_status+0x8e>
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	d0f4      	beq.n	8010e14 <uxr_run_session_until_all_status+0x54>
 8010e2a:	2900      	cmp	r1, #0
 8010e2c:	dce2      	bgt.n	8010df4 <uxr_run_session_until_all_status+0x34>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	445e      	add	r6, fp
 8010e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010e34:	e001      	b.n	8010e3a <uxr_run_session_until_all_status+0x7a>
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d812      	bhi.n	8010e60 <uxr_run_session_until_all_status+0xa0>
 8010e3a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010e3e:	4286      	cmp	r6, r0
 8010e40:	d1f9      	bne.n	8010e36 <uxr_run_session_until_all_status+0x76>
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	bf8c      	ite	hi
 8010e46:	2000      	movhi	r0, #0
 8010e48:	2001      	movls	r0, #1
 8010e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4e:	2900      	cmp	r1, #0
 8010e50:	dded      	ble.n	8010e2e <uxr_run_session_until_all_status+0x6e>
 8010e52:	2a00      	cmp	r2, #0
 8010e54:	d1ce      	bne.n	8010df4 <uxr_run_session_until_all_status+0x34>
 8010e56:	e7ea      	b.n	8010e2e <uxr_run_session_until_all_status+0x6e>
 8010e58:	2001      	movs	r0, #1
 8010e5a:	67fe      	str	r6, [r7, #124]	; 0x7c
 8010e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e60:	2000      	movs	r0, #0
 8010e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	bf00      	nop

08010e68 <uxr_prepare_stream_to_write_submessage>:
 8010e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e6c:	4615      	mov	r5, r2
 8010e6e:	b082      	sub	sp, #8
 8010e70:	4682      	mov	sl, r0
 8010e72:	4610      	mov	r0, r2
 8010e74:	461e      	mov	r6, r3
 8010e76:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010e7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010e7e:	9101      	str	r1, [sp, #4]
 8010e80:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010e84:	f000 ff44 	bl	8011d10 <uxr_submessage_padding>
 8010e88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e8c:	f105 0904 	add.w	r9, r5, #4
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	4481      	add	r9, r0
 8010e94:	d01d      	beq.n	8010ed2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	d116      	bne.n	8010ec8 <uxr_prepare_stream_to_write_submessage+0x60>
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	f10a 0008 	add.w	r0, sl, #8
 8010ea0:	f000 febe 	bl	8011c20 <uxr_get_output_reliable_stream>
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	b158      	cbz	r0, 8010ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8010ea8:	4649      	mov	r1, r9
 8010eaa:	4632      	mov	r2, r6
 8010eac:	f005 fc52 	bl	8016754 <uxr_prepare_reliable_buffer_to_write>
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	b12c      	cbz	r4, 8010ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8010eb4:	4643      	mov	r3, r8
 8010eb6:	4639      	mov	r1, r7
 8010eb8:	4630      	mov	r0, r6
 8010eba:	b2aa      	uxth	r2, r5
 8010ebc:	f000 fee8 	bl	8011c90 <uxr_buffer_submessage_header>
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	b002      	add	sp, #8
 8010ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec8:	2400      	movs	r4, #0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	b002      	add	sp, #8
 8010ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	f10a 0008 	add.w	r0, sl, #8
 8010ed8:	f000 fe9a 	bl	8011c10 <uxr_get_output_best_effort_stream>
 8010edc:	4604      	mov	r4, r0
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d0ee      	beq.n	8010ec0 <uxr_prepare_stream_to_write_submessage+0x58>
 8010ee2:	4649      	mov	r1, r9
 8010ee4:	4632      	mov	r2, r6
 8010ee6:	f005 fb71 	bl	80165cc <uxr_prepare_best_effort_buffer_to_write>
 8010eea:	4604      	mov	r4, r0
 8010eec:	e7e1      	b.n	8010eb2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8010eee:	bf00      	nop

08010ef0 <uxr_init_session_info>:
 8010ef0:	b430      	push	{r4, r5}
 8010ef2:	23ff      	movs	r3, #255	; 0xff
 8010ef4:	2409      	movs	r4, #9
 8010ef6:	0e15      	lsrs	r5, r2, #24
 8010ef8:	7102      	strb	r2, [r0, #4]
 8010efa:	7001      	strb	r1, [r0, #0]
 8010efc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8010f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010f04:	7045      	strb	r5, [r0, #1]
 8010f06:	80c4      	strh	r4, [r0, #6]
 8010f08:	7081      	strb	r1, [r0, #2]
 8010f0a:	70c2      	strb	r2, [r0, #3]
 8010f0c:	7143      	strb	r3, [r0, #5]
 8010f0e:	bc30      	pop	{r4, r5}
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop

08010f14 <uxr_buffer_create_session>:
 8010f14:	b570      	push	{r4, r5, r6, lr}
 8010f16:	460c      	mov	r4, r1
 8010f18:	2101      	movs	r1, #1
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	b088      	sub	sp, #32
 8010f1e:	4d0f      	ldr	r5, [pc, #60]	; (8010f5c <uxr_buffer_create_session+0x48>)
 8010f20:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010f24:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010f28:	80c1      	strh	r1, [r0, #6]
 8010f2a:	9202      	str	r2, [sp, #8]
 8010f2c:	7800      	ldrb	r0, [r0, #0]
 8010f2e:	88aa      	ldrh	r2, [r5, #4]
 8010f30:	682e      	ldr	r6, [r5, #0]
 8010f32:	f88d 000c 	strb.w	r0, [sp, #12]
 8010f36:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010f3a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	2210      	movs	r2, #16
 8010f42:	4620      	mov	r0, r4
 8010f44:	f88d 300d 	strb.w	r3, [sp, #13]
 8010f48:	9600      	str	r6, [sp, #0]
 8010f4a:	f000 fea1 	bl	8011c90 <uxr_buffer_submessage_header>
 8010f4e:	4620      	mov	r0, r4
 8010f50:	4669      	mov	r1, sp
 8010f52:	f001 fd71 	bl	8012a38 <uxr_serialize_CREATE_CLIENT_Payload>
 8010f56:	b008      	add	sp, #32
 8010f58:	bd70      	pop	{r4, r5, r6, pc}
 8010f5a:	bf00      	nop
 8010f5c:	080195f0 	.word	0x080195f0

08010f60 <uxr_buffer_delete_session>:
 8010f60:	b530      	push	{r4, r5, lr}
 8010f62:	2202      	movs	r2, #2
 8010f64:	460c      	mov	r4, r1
 8010f66:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010f6a:	4b0a      	ldr	r3, [pc, #40]	; (8010f94 <uxr_buffer_delete_session+0x34>)
 8010f6c:	b083      	sub	sp, #12
 8010f6e:	8919      	ldrh	r1, [r3, #8]
 8010f70:	80c2      	strh	r2, [r0, #6]
 8010f72:	2300      	movs	r3, #0
 8010f74:	2204      	movs	r2, #4
 8010f76:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	2103      	movs	r1, #3
 8010f7e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010f82:	f000 fe85 	bl	8011c90 <uxr_buffer_submessage_header>
 8010f86:	4620      	mov	r0, r4
 8010f88:	a901      	add	r1, sp, #4
 8010f8a:	f001 fdef 	bl	8012b6c <uxr_serialize_DELETE_Payload>
 8010f8e:	b003      	add	sp, #12
 8010f90:	bd30      	pop	{r4, r5, pc}
 8010f92:	bf00      	nop
 8010f94:	080195f0 	.word	0x080195f0

08010f98 <uxr_read_create_session_status>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	b088      	sub	sp, #32
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	4608      	mov	r0, r1
 8010fa0:	a901      	add	r1, sp, #4
 8010fa2:	f001 fdf3 	bl	8012b8c <uxr_deserialize_STATUS_AGENT_Payload>
 8010fa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010faa:	7163      	strb	r3, [r4, #5]
 8010fac:	b008      	add	sp, #32
 8010fae:	bd10      	pop	{r4, pc}

08010fb0 <uxr_read_delete_session_status>:
 8010fb0:	b510      	push	{r4, lr}
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	4608      	mov	r0, r1
 8010fb8:	a902      	add	r1, sp, #8
 8010fba:	f001 fe17 	bl	8012bec <uxr_deserialize_STATUS_Payload>
 8010fbe:	88e3      	ldrh	r3, [r4, #6]
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d001      	beq.n	8010fc8 <uxr_read_delete_session_status+0x18>
 8010fc4:	b004      	add	sp, #16
 8010fc6:	bd10      	pop	{r4, pc}
 8010fc8:	f10d 000a 	add.w	r0, sp, #10
 8010fcc:	f7ff f80e 	bl	800ffec <uxr_object_id_from_raw>
 8010fd0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010fd4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010fd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	bf04      	itt	eq
 8010fe2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010fe6:	7163      	strbeq	r3, [r4, #5]
 8010fe8:	b004      	add	sp, #16
 8010fea:	bd10      	pop	{r4, pc}

08010fec <uxr_stamp_create_session_header>:
 8010fec:	b510      	push	{r4, lr}
 8010fee:	4604      	mov	r4, r0
 8010ff0:	b08a      	sub	sp, #40	; 0x28
 8010ff2:	a802      	add	r0, sp, #8
 8010ff4:	2208      	movs	r2, #8
 8010ff6:	f7fe fbc7 	bl	800f788 <ucdr_init_buffer>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011000:	461a      	mov	r2, r3
 8011002:	a802      	add	r0, sp, #8
 8011004:	9400      	str	r4, [sp, #0]
 8011006:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801100a:	f001 f841 	bl	8012090 <uxr_serialize_message_header>
 801100e:	b00a      	add	sp, #40	; 0x28
 8011010:	bd10      	pop	{r4, pc}
 8011012:	bf00      	nop

08011014 <uxr_stamp_session_header>:
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	4604      	mov	r4, r0
 8011018:	460d      	mov	r5, r1
 801101a:	4616      	mov	r6, r2
 801101c:	b08a      	sub	sp, #40	; 0x28
 801101e:	4619      	mov	r1, r3
 8011020:	a802      	add	r0, sp, #8
 8011022:	2208      	movs	r2, #8
 8011024:	f7fe fbb0 	bl	800f788 <ucdr_init_buffer>
 8011028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801102c:	4633      	mov	r3, r6
 801102e:	462a      	mov	r2, r5
 8011030:	a802      	add	r0, sp, #8
 8011032:	9400      	str	r4, [sp, #0]
 8011034:	f001 f82c 	bl	8012090 <uxr_serialize_message_header>
 8011038:	b00a      	add	sp, #40	; 0x28
 801103a:	bd70      	pop	{r4, r5, r6, pc}

0801103c <uxr_read_session_header>:
 801103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011040:	4607      	mov	r7, r0
 8011042:	b084      	sub	sp, #16
 8011044:	4608      	mov	r0, r1
 8011046:	460c      	mov	r4, r1
 8011048:	4615      	mov	r5, r2
 801104a:	461e      	mov	r6, r3
 801104c:	f7fe fbce 	bl	800f7ec <ucdr_buffer_remaining>
 8011050:	2808      	cmp	r0, #8
 8011052:	d803      	bhi.n	801105c <uxr_read_session_header+0x20>
 8011054:	2000      	movs	r0, #0
 8011056:	b004      	add	sp, #16
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801105c:	f10d 080c 	add.w	r8, sp, #12
 8011060:	4633      	mov	r3, r6
 8011062:	462a      	mov	r2, r5
 8011064:	4620      	mov	r0, r4
 8011066:	f8cd 8000 	str.w	r8, [sp]
 801106a:	f10d 010b 	add.w	r1, sp, #11
 801106e:	f001 f82d 	bl	80120cc <uxr_deserialize_message_header>
 8011072:	783a      	ldrb	r2, [r7, #0]
 8011074:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011078:	4293      	cmp	r3, r2
 801107a:	d1eb      	bne.n	8011054 <uxr_read_session_header+0x18>
 801107c:	061b      	lsls	r3, r3, #24
 801107e:	d41b      	bmi.n	80110b8 <uxr_read_session_header+0x7c>
 8011080:	f898 2000 	ldrb.w	r2, [r8]
 8011084:	787b      	ldrb	r3, [r7, #1]
 8011086:	429a      	cmp	r2, r3
 8011088:	d003      	beq.n	8011092 <uxr_read_session_header+0x56>
 801108a:	2001      	movs	r0, #1
 801108c:	f080 0001 	eor.w	r0, r0, #1
 8011090:	e7e1      	b.n	8011056 <uxr_read_session_header+0x1a>
 8011092:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011096:	78bb      	ldrb	r3, [r7, #2]
 8011098:	1cb9      	adds	r1, r7, #2
 801109a:	429a      	cmp	r2, r3
 801109c:	d1f5      	bne.n	801108a <uxr_read_session_header+0x4e>
 801109e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80110a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d1ef      	bne.n	801108a <uxr_read_session_header+0x4e>
 80110aa:	784b      	ldrb	r3, [r1, #1]
 80110ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d1ea      	bne.n	801108a <uxr_read_session_header+0x4e>
 80110b4:	2000      	movs	r0, #0
 80110b6:	e7e9      	b.n	801108c <uxr_read_session_header+0x50>
 80110b8:	2001      	movs	r0, #1
 80110ba:	e7cc      	b.n	8011056 <uxr_read_session_header+0x1a>

080110bc <uxr_session_header_offset>:
 80110bc:	f990 3000 	ldrsb.w	r3, [r0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	bfac      	ite	ge
 80110c4:	2008      	movge	r0, #8
 80110c6:	2004      	movlt	r0, #4
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop

080110cc <uxr_init_base_object_request>:
 80110cc:	b530      	push	{r4, r5, lr}
 80110ce:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 80110d2:	88c3      	ldrh	r3, [r0, #6]
 80110d4:	b083      	sub	sp, #12
 80110d6:	f1a3 040a 	sub.w	r4, r3, #10
 80110da:	b2a4      	uxth	r4, r4
 80110dc:	42ac      	cmp	r4, r5
 80110de:	9101      	str	r1, [sp, #4]
 80110e0:	d80e      	bhi.n	8011100 <uxr_init_base_object_request+0x34>
 80110e2:	3301      	adds	r3, #1
 80110e4:	b29c      	uxth	r4, r3
 80110e6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	80c4      	strh	r4, [r0, #6]
 80110ee:	1c91      	adds	r1, r2, #2
 80110f0:	9801      	ldr	r0, [sp, #4]
 80110f2:	7015      	strb	r5, [r2, #0]
 80110f4:	7053      	strb	r3, [r2, #1]
 80110f6:	f7fe ff8d 	bl	8010014 <uxr_object_id_to_raw>
 80110fa:	4620      	mov	r0, r4
 80110fc:	b003      	add	sp, #12
 80110fe:	bd30      	pop	{r4, r5, pc}
 8011100:	230a      	movs	r3, #10
 8011102:	2500      	movs	r5, #0
 8011104:	461c      	mov	r4, r3
 8011106:	e7f1      	b.n	80110ec <uxr_init_base_object_request+0x20>

08011108 <uxr_parse_base_object_request>:
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	4604      	mov	r4, r0
 801110c:	3002      	adds	r0, #2
 801110e:	460d      	mov	r5, r1
 8011110:	4616      	mov	r6, r2
 8011112:	f7fe ff6b 	bl	800ffec <uxr_object_id_from_raw>
 8011116:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801111a:	8028      	strh	r0, [r5, #0]
 801111c:	806b      	strh	r3, [r5, #2]
 801111e:	7822      	ldrb	r2, [r4, #0]
 8011120:	7863      	ldrb	r3, [r4, #1]
 8011122:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011126:	8033      	strh	r3, [r6, #0]
 8011128:	bd70      	pop	{r4, r5, r6, pc}
 801112a:	bf00      	nop

0801112c <uxr_init_framing_io>:
 801112c:	2300      	movs	r3, #0
 801112e:	7041      	strb	r1, [r0, #1]
 8011130:	7003      	strb	r3, [r0, #0]
 8011132:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop

08011138 <uxr_write_framed_msg>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8011140:	4604      	mov	r4, r0
 8011142:	7840      	ldrb	r0, [r0, #1]
 8011144:	b085      	sub	sp, #20
 8011146:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 801114a:	2d01      	cmp	r5, #1
 801114c:	460e      	mov	r6, r1
 801114e:	4617      	mov	r7, r2
 8011150:	469b      	mov	fp, r3
 8011152:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011156:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801115a:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 801115e:	f240 8131 	bls.w	80113c4 <uxr_write_framed_msg+0x28c>
 8011162:	2302      	movs	r3, #2
 8011164:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011168:	2a01      	cmp	r2, #1
 801116a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 801116e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011172:	f240 8092 	bls.w	801129a <uxr_write_framed_msg+0x162>
 8011176:	2303      	movs	r3, #3
 8011178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801117a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 801117e:	b2d0      	uxtb	r0, r2
 8011180:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011184:	2a01      	cmp	r2, #1
 8011186:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801118a:	f240 809c 	bls.w	80112c6 <uxr_write_framed_msg+0x18e>
 801118e:	18e2      	adds	r2, r4, r3
 8011190:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8011194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011196:	3301      	adds	r3, #1
 8011198:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801119c:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 80111a0:	2a01      	cmp	r2, #1
 80111a2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80111a6:	f240 80a1 	bls.w	80112ec <uxr_write_framed_msg+0x1b4>
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	4423      	add	r3, r4
 80111ae:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80111b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111b4:	b2d2      	uxtb	r2, r2
 80111b6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 80a6 	beq.w	801130c <uxr_write_framed_msg+0x1d4>
 80111c0:	f04f 0a00 	mov.w	sl, #0
 80111c4:	46d1      	mov	r9, sl
 80111c6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80111ca:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80111ce:	2901      	cmp	r1, #1
 80111d0:	f240 80bf 	bls.w	8011352 <uxr_write_framed_msg+0x21a>
 80111d4:	2a29      	cmp	r2, #41	; 0x29
 80111d6:	f200 809c 	bhi.w	8011312 <uxr_write_framed_msg+0x1da>
 80111da:	1c50      	adds	r0, r2, #1
 80111dc:	18a1      	adds	r1, r4, r2
 80111de:	b2c2      	uxtb	r2, r0
 80111e0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80111e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80111e8:	ea8a 0303 	eor.w	r3, sl, r3
 80111ec:	4988      	ldr	r1, [pc, #544]	; (8011410 <uxr_write_framed_msg+0x2d8>)
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80111f4:	f109 0901 	add.w	r9, r9, #1
 80111f8:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80111fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111fe:	454b      	cmp	r3, r9
 8011200:	d8e1      	bhi.n	80111c6 <uxr_write_framed_msg+0x8e>
 8011202:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011206:	fa5f f98a 	uxtb.w	r9, sl
 801120a:	9301      	str	r3, [sp, #4]
 801120c:	f04f 0b00 	mov.w	fp, #0
 8011210:	f88d 900c 	strb.w	r9, [sp, #12]
 8011214:	f88d 300d 	strb.w	r3, [sp, #13]
 8011218:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 801121c:	fa5f f18a 	uxtb.w	r1, sl
 8011220:	2901      	cmp	r1, #1
 8011222:	d921      	bls.n	8011268 <uxr_write_framed_msg+0x130>
 8011224:	2a29      	cmp	r2, #41	; 0x29
 8011226:	f240 80a6 	bls.w	8011376 <uxr_write_framed_msg+0x23e>
 801122a:	2500      	movs	r5, #0
 801122c:	e000      	b.n	8011230 <uxr_write_framed_msg+0xf8>
 801122e:	b160      	cbz	r0, 801124a <uxr_write_framed_msg+0x112>
 8011230:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011234:	1b52      	subs	r2, r2, r5
 8011236:	4643      	mov	r3, r8
 8011238:	4638      	mov	r0, r7
 801123a:	4421      	add	r1, r4
 801123c:	47b0      	blx	r6
 801123e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011242:	4405      	add	r5, r0
 8011244:	4295      	cmp	r5, r2
 8011246:	d3f2      	bcc.n	801122e <uxr_write_framed_msg+0xf6>
 8011248:	d003      	beq.n	8011252 <uxr_write_framed_msg+0x11a>
 801124a:	2000      	movs	r0, #0
 801124c:	b005      	add	sp, #20
 801124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011252:	f04f 0300 	mov.w	r3, #0
 8011256:	fa5f f18a 	uxtb.w	r1, sl
 801125a:	2901      	cmp	r1, #1
 801125c:	f04f 0200 	mov.w	r2, #0
 8011260:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011264:	f200 8087 	bhi.w	8011376 <uxr_write_framed_msg+0x23e>
 8011268:	1c51      	adds	r1, r2, #1
 801126a:	b2c9      	uxtb	r1, r1
 801126c:	2929      	cmp	r1, #41	; 0x29
 801126e:	d8dc      	bhi.n	801122a <uxr_write_framed_msg+0xf2>
 8011270:	1c91      	adds	r1, r2, #2
 8011272:	18a0      	adds	r0, r4, r2
 8011274:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8011278:	b2ca      	uxtb	r2, r1
 801127a:	4659      	mov	r1, fp
 801127c:	f089 0920 	eor.w	r9, r9, #32
 8011280:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8011284:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011288:	f04f 0b01 	mov.w	fp, #1
 801128c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011290:	2900      	cmp	r1, #0
 8011292:	d17c      	bne.n	801138e <uxr_write_framed_msg+0x256>
 8011294:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011298:	e7be      	b.n	8011218 <uxr_write_framed_msg+0xe0>
 801129a:	461a      	mov	r2, r3
 801129c:	2503      	movs	r5, #3
 801129e:	2304      	movs	r3, #4
 80112a0:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80112a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80112a6:	4422      	add	r2, r4
 80112a8:	b2c0      	uxtb	r0, r0
 80112aa:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 80112ae:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80112b2:	4425      	add	r5, r4
 80112b4:	f081 0120 	eor.w	r1, r1, #32
 80112b8:	2a01      	cmp	r2, #1
 80112ba:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 80112be:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80112c2:	f63f af64 	bhi.w	801118e <uxr_write_framed_msg+0x56>
 80112c6:	217d      	movs	r1, #125	; 0x7d
 80112c8:	18e2      	adds	r2, r4, r3
 80112ca:	f080 0020 	eor.w	r0, r0, #32
 80112ce:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 80112d2:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 80112d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112d8:	3302      	adds	r3, #2
 80112da:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80112de:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 80112e2:	2a01      	cmp	r2, #1
 80112e4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80112e8:	f63f af5f 	bhi.w	80111aa <uxr_write_framed_msg+0x72>
 80112ec:	257d      	movs	r5, #125	; 0x7d
 80112ee:	18e0      	adds	r0, r4, r3
 80112f0:	3302      	adds	r3, #2
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112f6:	f081 0120 	eor.w	r1, r1, #32
 80112fa:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80112fe:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011302:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011306:	2b00      	cmp	r3, #0
 8011308:	f47f af5a 	bne.w	80111c0 <uxr_write_framed_msg+0x88>
 801130c:	4699      	mov	r9, r3
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	e77c      	b.n	801120c <uxr_write_framed_msg+0xd4>
 8011312:	2500      	movs	r5, #0
 8011314:	e001      	b.n	801131a <uxr_write_framed_msg+0x1e2>
 8011316:	2800      	cmp	r0, #0
 8011318:	d097      	beq.n	801124a <uxr_write_framed_msg+0x112>
 801131a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801131e:	1b52      	subs	r2, r2, r5
 8011320:	4643      	mov	r3, r8
 8011322:	4638      	mov	r0, r7
 8011324:	4421      	add	r1, r4
 8011326:	47b0      	blx	r6
 8011328:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801132c:	4405      	add	r5, r0
 801132e:	4295      	cmp	r5, r2
 8011330:	d3f1      	bcc.n	8011316 <uxr_write_framed_msg+0x1de>
 8011332:	d18a      	bne.n	801124a <uxr_write_framed_msg+0x112>
 8011334:	f04f 0300 	mov.w	r3, #0
 8011338:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801133c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801133e:	454b      	cmp	r3, r9
 8011340:	d95f      	bls.n	8011402 <uxr_write_framed_msg+0x2ca>
 8011342:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011346:	2200      	movs	r2, #0
 8011348:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801134c:	2901      	cmp	r1, #1
 801134e:	f63f af41 	bhi.w	80111d4 <uxr_write_framed_msg+0x9c>
 8011352:	1c51      	adds	r1, r2, #1
 8011354:	b2c9      	uxtb	r1, r1
 8011356:	2929      	cmp	r1, #41	; 0x29
 8011358:	d8db      	bhi.n	8011312 <uxr_write_framed_msg+0x1da>
 801135a:	1c95      	adds	r5, r2, #2
 801135c:	18a0      	adds	r0, r4, r2
 801135e:	b2ea      	uxtb	r2, r5
 8011360:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8011364:	f083 0120 	eor.w	r1, r3, #32
 8011368:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801136c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8011370:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011374:	e738      	b.n	80111e8 <uxr_write_framed_msg+0xb0>
 8011376:	4659      	mov	r1, fp
 8011378:	1c55      	adds	r5, r2, #1
 801137a:	18a0      	adds	r0, r4, r2
 801137c:	b2ea      	uxtb	r2, r5
 801137e:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8011382:	f04f 0b01 	mov.w	fp, #1
 8011386:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801138a:	2900      	cmp	r1, #0
 801138c:	d082      	beq.n	8011294 <uxr_write_framed_msg+0x15c>
 801138e:	2500      	movs	r5, #0
 8011390:	e002      	b.n	8011398 <uxr_write_framed_msg+0x260>
 8011392:	2800      	cmp	r0, #0
 8011394:	f43f af59 	beq.w	801124a <uxr_write_framed_msg+0x112>
 8011398:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801139c:	1b52      	subs	r2, r2, r5
 801139e:	4643      	mov	r3, r8
 80113a0:	4638      	mov	r0, r7
 80113a2:	4421      	add	r1, r4
 80113a4:	47b0      	blx	r6
 80113a6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80113aa:	4405      	add	r5, r0
 80113ac:	4295      	cmp	r5, r2
 80113ae:	d3f0      	bcc.n	8011392 <uxr_write_framed_msg+0x25a>
 80113b0:	f47f af4b 	bne.w	801124a <uxr_write_framed_msg+0x112>
 80113b4:	2300      	movs	r3, #0
 80113b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113b8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80113bc:	b290      	uxth	r0, r2
 80113be:	b005      	add	sp, #20
 80113c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c4:	2303      	movs	r3, #3
 80113c6:	257d      	movs	r5, #125	; 0x7d
 80113c8:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 80113cc:	f080 0020 	eor.w	r0, r0, #32
 80113d0:	2a01      	cmp	r2, #1
 80113d2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80113d6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80113da:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80113de:	d803      	bhi.n	80113e8 <uxr_write_framed_msg+0x2b0>
 80113e0:	461a      	mov	r2, r3
 80113e2:	2504      	movs	r5, #4
 80113e4:	2305      	movs	r3, #5
 80113e6:	e75b      	b.n	80112a0 <uxr_write_framed_msg+0x168>
 80113e8:	2304      	movs	r3, #4
 80113ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113ec:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 80113f0:	b2d0      	uxtb	r0, r2
 80113f2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80113f6:	2a01      	cmp	r2, #1
 80113f8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80113fc:	f63f aec7 	bhi.w	801118e <uxr_write_framed_msg+0x56>
 8011400:	e761      	b.n	80112c6 <uxr_write_framed_msg+0x18e>
 8011402:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011406:	2200      	movs	r2, #0
 8011408:	fa5f f98a 	uxtb.w	r9, sl
 801140c:	9301      	str	r3, [sp, #4]
 801140e:	e6fd      	b.n	801120c <uxr_write_framed_msg+0xd4>
 8011410:	080199e4 	.word	0x080199e4

08011414 <uxr_framing_read_transport>:
 8011414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	b083      	sub	sp, #12
 801141c:	461f      	mov	r7, r3
 801141e:	4689      	mov	r9, r1
 8011420:	4692      	mov	sl, r2
 8011422:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011426:	f000 fc79 	bl	8011d1c <uxr_millis>
 801142a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801142e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8011432:	4680      	mov	r8, r0
 8011434:	42b3      	cmp	r3, r6
 8011436:	d060      	beq.n	80114fa <uxr_framing_read_transport+0xe6>
 8011438:	d81c      	bhi.n	8011474 <uxr_framing_read_transport+0x60>
 801143a:	1e75      	subs	r5, r6, #1
 801143c:	2600      	movs	r6, #0
 801143e:	1aed      	subs	r5, r5, r3
 8011440:	b2ed      	uxtb	r5, r5
 8011442:	455d      	cmp	r5, fp
 8011444:	d81f      	bhi.n	8011486 <uxr_framing_read_transport+0x72>
 8011446:	19ab      	adds	r3, r5, r6
 8011448:	455b      	cmp	r3, fp
 801144a:	bf84      	itt	hi
 801144c:	ebab 0605 	subhi.w	r6, fp, r5
 8011450:	b2f6      	uxtbhi	r6, r6
 8011452:	b9ed      	cbnz	r5, 8011490 <uxr_framing_read_transport+0x7c>
 8011454:	f04f 0b00 	mov.w	fp, #0
 8011458:	f000 fc60 	bl	8011d1c <uxr_millis>
 801145c:	eba0 0808 	sub.w	r8, r0, r8
 8011460:	4658      	mov	r0, fp
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	eba3 0308 	sub.w	r3, r3, r8
 8011468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801146c:	603b      	str	r3, [r7, #0]
 801146e:	b003      	add	sp, #12
 8011470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011474:	2e00      	cmp	r6, #0
 8011476:	d048      	beq.n	801150a <uxr_framing_read_transport+0xf6>
 8011478:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801147c:	b2ed      	uxtb	r5, r5
 801147e:	3e01      	subs	r6, #1
 8011480:	455d      	cmp	r5, fp
 8011482:	b2f6      	uxtb	r6, r6
 8011484:	d9df      	bls.n	8011446 <uxr_framing_read_transport+0x32>
 8011486:	fa5f f58b 	uxtb.w	r5, fp
 801148a:	2600      	movs	r6, #0
 801148c:	2d00      	cmp	r5, #0
 801148e:	d0e1      	beq.n	8011454 <uxr_framing_read_transport+0x40>
 8011490:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011494:	3102      	adds	r1, #2
 8011496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011498:	462a      	mov	r2, r5
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	4421      	add	r1, r4
 80114a0:	4650      	mov	r0, sl
 80114a2:	47c8      	blx	r9
 80114a4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80114a8:	4a1b      	ldr	r2, [pc, #108]	; (8011518 <uxr_framing_read_transport+0x104>)
 80114aa:	4403      	add	r3, r0
 80114ac:	0859      	lsrs	r1, r3, #1
 80114ae:	fba2 2101 	umull	r2, r1, r2, r1
 80114b2:	222a      	movs	r2, #42	; 0x2a
 80114b4:	0889      	lsrs	r1, r1, #2
 80114b6:	fb02 3111 	mls	r1, r2, r1, r3
 80114ba:	4683      	mov	fp, r0
 80114bc:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80114c0:	2800      	cmp	r0, #0
 80114c2:	d0c7      	beq.n	8011454 <uxr_framing_read_transport+0x40>
 80114c4:	42a8      	cmp	r0, r5
 80114c6:	d1c7      	bne.n	8011458 <uxr_framing_read_transport+0x44>
 80114c8:	b31e      	cbz	r6, 8011512 <uxr_framing_read_transport+0xfe>
 80114ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114cc:	3102      	adds	r1, #2
 80114ce:	4632      	mov	r2, r6
 80114d0:	4421      	add	r1, r4
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	4650      	mov	r0, sl
 80114d6:	2300      	movs	r3, #0
 80114d8:	47c8      	blx	r9
 80114da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80114de:	4a0e      	ldr	r2, [pc, #56]	; (8011518 <uxr_framing_read_transport+0x104>)
 80114e0:	1819      	adds	r1, r3, r0
 80114e2:	084b      	lsrs	r3, r1, #1
 80114e4:	fba2 2303 	umull	r2, r3, r2, r3
 80114e8:	222a      	movs	r2, #42	; 0x2a
 80114ea:	089b      	lsrs	r3, r3, #2
 80114ec:	fb02 1313 	mls	r3, r2, r3, r1
 80114f0:	eb00 0b05 	add.w	fp, r0, r5
 80114f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80114f8:	e7ae      	b.n	8011458 <uxr_framing_read_transport+0x44>
 80114fa:	2600      	movs	r6, #0
 80114fc:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8011500:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8011502:	d9c0      	bls.n	8011486 <uxr_framing_read_transport+0x72>
 8011504:	2102      	movs	r1, #2
 8011506:	2529      	movs	r5, #41	; 0x29
 8011508:	e7c5      	b.n	8011496 <uxr_framing_read_transport+0x82>
 801150a:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 801150e:	b2ed      	uxtb	r5, r5
 8011510:	e797      	b.n	8011442 <uxr_framing_read_transport+0x2e>
 8011512:	46ab      	mov	fp, r5
 8011514:	e7a0      	b.n	8011458 <uxr_framing_read_transport+0x44>
 8011516:	bf00      	nop
 8011518:	30c30c31 	.word	0x30c30c31

0801151c <uxr_read_framed_msg>:
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8011524:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8011528:	4604      	mov	r4, r0
 801152a:	42ae      	cmp	r6, r5
 801152c:	461f      	mov	r7, r3
 801152e:	4689      	mov	r9, r1
 8011530:	4692      	mov	sl, r2
 8011532:	b083      	sub	sp, #12
 8011534:	f000 8176 	beq.w	8011824 <uxr_read_framed_msg+0x308>
 8011538:	7823      	ldrb	r3, [r4, #0]
 801153a:	4ec7      	ldr	r6, [pc, #796]	; (8011858 <uxr_read_framed_msg+0x33c>)
 801153c:	f8df 831c 	ldr.w	r8, [pc, #796]	; 801185c <uxr_read_framed_msg+0x340>
 8011540:	2b07      	cmp	r3, #7
 8011542:	d8fd      	bhi.n	8011540 <uxr_read_framed_msg+0x24>
 8011544:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011548:	00ee010d 	.word	0x00ee010d
 801154c:	00b100ce 	.word	0x00b100ce
 8011550:	004d0088 	.word	0x004d0088
 8011554:	00080030 	.word	0x00080030
 8011558:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801155c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011560:	429a      	cmp	r2, r3
 8011562:	f000 813a 	beq.w	80117da <uxr_read_framed_msg+0x2be>
 8011566:	18e1      	adds	r1, r4, r3
 8011568:	7889      	ldrb	r1, [r1, #2]
 801156a:	202a      	movs	r0, #42	; 0x2a
 801156c:	297d      	cmp	r1, #125	; 0x7d
 801156e:	f000 81b0 	beq.w	80118d2 <uxr_read_framed_msg+0x3b6>
 8011572:	3301      	adds	r3, #1
 8011574:	085a      	lsrs	r2, r3, #1
 8011576:	fba6 5202 	umull	r5, r2, r6, r2
 801157a:	0892      	lsrs	r2, r2, #2
 801157c:	fb00 3312 	mls	r3, r0, r2, r3
 8011580:	297e      	cmp	r1, #126	; 0x7e
 8011582:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011586:	f000 8244 	beq.w	8011a12 <uxr_read_framed_msg+0x4f6>
 801158a:	2000      	movs	r0, #0
 801158c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801158e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011590:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011594:	b29b      	uxth	r3, r3
 8011596:	429a      	cmp	r2, r3
 8011598:	86a3      	strh	r3, [r4, #52]	; 0x34
 801159a:	7020      	strb	r0, [r4, #0]
 801159c:	f000 8176 	beq.w	801188c <uxr_read_framed_msg+0x370>
 80115a0:	2000      	movs	r0, #0
 80115a2:	b003      	add	sp, #12
 80115a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80115ac:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80115b0:	429a      	cmp	r2, r3
 80115b2:	f000 8121 	beq.w	80117f8 <uxr_read_framed_msg+0x2dc>
 80115b6:	18e1      	adds	r1, r4, r3
 80115b8:	7889      	ldrb	r1, [r1, #2]
 80115ba:	202a      	movs	r0, #42	; 0x2a
 80115bc:	297d      	cmp	r1, #125	; 0x7d
 80115be:	f000 816d 	beq.w	801189c <uxr_read_framed_msg+0x380>
 80115c2:	3301      	adds	r3, #1
 80115c4:	085a      	lsrs	r2, r3, #1
 80115c6:	fba6 5202 	umull	r5, r2, r6, r2
 80115ca:	0892      	lsrs	r2, r2, #2
 80115cc:	fb00 3312 	mls	r3, r0, r2, r3
 80115d0:	297e      	cmp	r1, #126	; 0x7e
 80115d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80115d6:	f000 820c 	beq.w	80119f2 <uxr_read_framed_msg+0x4d6>
 80115da:	2307      	movs	r3, #7
 80115dc:	86a1      	strh	r1, [r4, #52]	; 0x34
 80115de:	7023      	strb	r3, [r4, #0]
 80115e0:	e7ae      	b.n	8011540 <uxr_read_framed_msg+0x24>
 80115e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80115e4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80115e8:	459e      	cmp	lr, r3
 80115ea:	d930      	bls.n	801164e <uxr_read_framed_msg+0x132>
 80115ec:	252a      	movs	r5, #42	; 0x2a
 80115ee:	e021      	b.n	8011634 <uxr_read_framed_msg+0x118>
 80115f0:	7889      	ldrb	r1, [r1, #2]
 80115f2:	297d      	cmp	r1, #125	; 0x7d
 80115f4:	f000 80d1 	beq.w	801179a <uxr_read_framed_msg+0x27e>
 80115f8:	fba6 2000 	umull	r2, r0, r6, r0
 80115fc:	0880      	lsrs	r0, r0, #2
 80115fe:	fb05 c010 	mls	r0, r5, r0, ip
 8011602:	297e      	cmp	r1, #126	; 0x7e
 8011604:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8011608:	f000 80c4 	beq.w	8011794 <uxr_read_framed_msg+0x278>
 801160c:	54f9      	strb	r1, [r7, r3]
 801160e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8011612:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011614:	ea8c 0001 	eor.w	r0, ip, r1
 8011618:	b2c0      	uxtb	r0, r0
 801161a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 801161e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8011622:	3301      	adds	r3, #1
 8011624:	b29b      	uxth	r3, r3
 8011626:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 801162a:	4573      	cmp	r3, lr
 801162c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801162e:	8663      	strh	r3, [r4, #50]	; 0x32
 8011630:	f080 8116 	bcs.w	8011860 <uxr_read_framed_msg+0x344>
 8011634:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011638:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 801163c:	f102 0c01 	add.w	ip, r2, #1
 8011640:	4593      	cmp	fp, r2
 8011642:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8011646:	eb04 0102 	add.w	r1, r4, r2
 801164a:	d1d1      	bne.n	80115f0 <uxr_read_framed_msg+0xd4>
 801164c:	459e      	cmp	lr, r3
 801164e:	f040 810b 	bne.w	8011868 <uxr_read_framed_msg+0x34c>
 8011652:	2306      	movs	r3, #6
 8011654:	7023      	strb	r3, [r4, #0]
 8011656:	e773      	b.n	8011540 <uxr_read_framed_msg+0x24>
 8011658:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801165c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011660:	429a      	cmp	r2, r3
 8011662:	f000 80ba 	beq.w	80117da <uxr_read_framed_msg+0x2be>
 8011666:	18e1      	adds	r1, r4, r3
 8011668:	7889      	ldrb	r1, [r1, #2]
 801166a:	202a      	movs	r0, #42	; 0x2a
 801166c:	297d      	cmp	r1, #125	; 0x7d
 801166e:	f000 818a 	beq.w	8011986 <uxr_read_framed_msg+0x46a>
 8011672:	3301      	adds	r3, #1
 8011674:	085a      	lsrs	r2, r3, #1
 8011676:	fba6 5202 	umull	r5, r2, r6, r2
 801167a:	0892      	lsrs	r2, r2, #2
 801167c:	fb00 3212 	mls	r2, r0, r2, r3
 8011680:	297e      	cmp	r1, #126	; 0x7e
 8011682:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011686:	f000 81c4 	beq.w	8011a12 <uxr_read_framed_msg+0x4f6>
 801168a:	2000      	movs	r0, #0
 801168c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801168e:	8660      	strh	r0, [r4, #50]	; 0x32
 8011690:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011694:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011696:	b29b      	uxth	r3, r3
 8011698:	428b      	cmp	r3, r1
 801169a:	8623      	strh	r3, [r4, #48]	; 0x30
 801169c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801169e:	f240 80d8 	bls.w	8011852 <uxr_read_framed_msg+0x336>
 80116a2:	7020      	strb	r0, [r4, #0]
 80116a4:	b003      	add	sp, #12
 80116a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116aa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80116ae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80116b2:	429a      	cmp	r2, r3
 80116b4:	f000 80a0 	beq.w	80117f8 <uxr_read_framed_msg+0x2dc>
 80116b8:	18e1      	adds	r1, r4, r3
 80116ba:	7889      	ldrb	r1, [r1, #2]
 80116bc:	202a      	movs	r0, #42	; 0x2a
 80116be:	297d      	cmp	r1, #125	; 0x7d
 80116c0:	f000 817c 	beq.w	80119bc <uxr_read_framed_msg+0x4a0>
 80116c4:	3301      	adds	r3, #1
 80116c6:	085a      	lsrs	r2, r3, #1
 80116c8:	fba6 5202 	umull	r5, r2, r6, r2
 80116cc:	0892      	lsrs	r2, r2, #2
 80116ce:	fb00 3312 	mls	r3, r0, r2, r3
 80116d2:	297e      	cmp	r1, #126	; 0x7e
 80116d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80116d8:	f000 818b 	beq.w	80119f2 <uxr_read_framed_msg+0x4d6>
 80116dc:	2304      	movs	r3, #4
 80116de:	8621      	strh	r1, [r4, #48]	; 0x30
 80116e0:	7023      	strb	r3, [r4, #0]
 80116e2:	e72d      	b.n	8011540 <uxr_read_framed_msg+0x24>
 80116e4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80116e8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80116ec:	4291      	cmp	r1, r2
 80116ee:	f000 80ae 	beq.w	801184e <uxr_read_framed_msg+0x332>
 80116f2:	18a3      	adds	r3, r4, r2
 80116f4:	7898      	ldrb	r0, [r3, #2]
 80116f6:	287d      	cmp	r0, #125	; 0x7d
 80116f8:	f000 8107 	beq.w	801190a <uxr_read_framed_msg+0x3ee>
 80116fc:	232a      	movs	r3, #42	; 0x2a
 80116fe:	3201      	adds	r2, #1
 8011700:	0851      	lsrs	r1, r2, #1
 8011702:	fba6 5101 	umull	r5, r1, r6, r1
 8011706:	0889      	lsrs	r1, r1, #2
 8011708:	fb03 2211 	mls	r2, r3, r1, r2
 801170c:	287e      	cmp	r0, #126	; 0x7e
 801170e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011712:	f000 8180 	beq.w	8011a16 <uxr_read_framed_msg+0x4fa>
 8011716:	7863      	ldrb	r3, [r4, #1]
 8011718:	4283      	cmp	r3, r0
 801171a:	bf0c      	ite	eq
 801171c:	2303      	moveq	r3, #3
 801171e:	2300      	movne	r3, #0
 8011720:	7023      	strb	r3, [r4, #0]
 8011722:	e70d      	b.n	8011540 <uxr_read_framed_msg+0x24>
 8011724:	2200      	movs	r2, #0
 8011726:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801172a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801172e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8011732:	4288      	cmp	r0, r1
 8011734:	d062      	beq.n	80117fc <uxr_read_framed_msg+0x2e0>
 8011736:	1862      	adds	r2, r4, r1
 8011738:	7892      	ldrb	r2, [r2, #2]
 801173a:	2a7d      	cmp	r2, #125	; 0x7d
 801173c:	f000 8100 	beq.w	8011940 <uxr_read_framed_msg+0x424>
 8011740:	202a      	movs	r0, #42	; 0x2a
 8011742:	3101      	adds	r1, #1
 8011744:	084b      	lsrs	r3, r1, #1
 8011746:	fba6 5303 	umull	r5, r3, r6, r3
 801174a:	089b      	lsrs	r3, r3, #2
 801174c:	fb00 1313 	mls	r3, r0, r3, r1
 8011750:	2a7e      	cmp	r2, #126	; 0x7e
 8011752:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8011756:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801175a:	d04f      	beq.n	80117fc <uxr_read_framed_msg+0x2e0>
 801175c:	2302      	movs	r3, #2
 801175e:	7023      	strb	r3, [r4, #0]
 8011760:	e6ee      	b.n	8011540 <uxr_read_framed_msg+0x24>
 8011762:	252a      	movs	r5, #42	; 0x2a
 8011764:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011768:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801176c:	f103 0c01 	add.w	ip, r3, #1
 8011770:	4298      	cmp	r0, r3
 8011772:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011776:	eb04 0103 	add.w	r1, r4, r3
 801177a:	f43f af11 	beq.w	80115a0 <uxr_read_framed_msg+0x84>
 801177e:	fba6 3202 	umull	r3, r2, r6, r2
 8011782:	0892      	lsrs	r2, r2, #2
 8011784:	fb05 c212 	mls	r2, r5, r2, ip
 8011788:	7889      	ldrb	r1, [r1, #2]
 801178a:	b2d3      	uxtb	r3, r2
 801178c:	297e      	cmp	r1, #126	; 0x7e
 801178e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011792:	d1eb      	bne.n	801176c <uxr_read_framed_msg+0x250>
 8011794:	2301      	movs	r3, #1
 8011796:	7023      	strb	r3, [r4, #0]
 8011798:	e6d2      	b.n	8011540 <uxr_read_framed_msg+0x24>
 801179a:	f102 0c01 	add.w	ip, r2, #1
 801179e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80117a2:	fba6 0101 	umull	r0, r1, r6, r1
 80117a6:	0889      	lsrs	r1, r1, #2
 80117a8:	fb05 c111 	mls	r1, r5, r1, ip
 80117ac:	eb04 0c01 	add.w	ip, r4, r1
 80117b0:	b2c9      	uxtb	r1, r1
 80117b2:	3202      	adds	r2, #2
 80117b4:	458b      	cmp	fp, r1
 80117b6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80117ba:	f43f af47 	beq.w	801164c <uxr_read_framed_msg+0x130>
 80117be:	fba6 1000 	umull	r1, r0, r6, r0
 80117c2:	0880      	lsrs	r0, r0, #2
 80117c4:	fb05 2210 	mls	r2, r5, r0, r2
 80117c8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80117cc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80117d0:	297e      	cmp	r1, #126	; 0x7e
 80117d2:	d036      	beq.n	8011842 <uxr_read_framed_msg+0x326>
 80117d4:	f081 0120 	eor.w	r1, r1, #32
 80117d8:	e718      	b.n	801160c <uxr_read_framed_msg+0xf0>
 80117da:	2301      	movs	r3, #1
 80117dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117de:	4649      	mov	r1, r9
 80117e0:	e9cd 2300 	strd	r2, r3, [sp]
 80117e4:	4620      	mov	r0, r4
 80117e6:	4652      	mov	r2, sl
 80117e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117ea:	f7ff fe13 	bl	8011414 <uxr_framing_read_transport>
 80117ee:	2800      	cmp	r0, #0
 80117f0:	f43f aed6 	beq.w	80115a0 <uxr_read_framed_msg+0x84>
 80117f4:	7823      	ldrb	r3, [r4, #0]
 80117f6:	e6a3      	b.n	8011540 <uxr_read_framed_msg+0x24>
 80117f8:	2302      	movs	r3, #2
 80117fa:	e7ef      	b.n	80117dc <uxr_read_framed_msg+0x2c0>
 80117fc:	2304      	movs	r3, #4
 80117fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011800:	4649      	mov	r1, r9
 8011802:	e9cd 2300 	strd	r2, r3, [sp]
 8011806:	4620      	mov	r0, r4
 8011808:	4652      	mov	r2, sl
 801180a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801180c:	f7ff fe02 	bl	8011414 <uxr_framing_read_transport>
 8011810:	2800      	cmp	r0, #0
 8011812:	d1ef      	bne.n	80117f4 <uxr_read_framed_msg+0x2d8>
 8011814:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8011818:	387e      	subs	r0, #126	; 0x7e
 801181a:	bf18      	it	ne
 801181c:	2001      	movne	r0, #1
 801181e:	2800      	cmp	r0, #0
 8011820:	d0e8      	beq.n	80117f4 <uxr_read_framed_msg+0x2d8>
 8011822:	e6bd      	b.n	80115a0 <uxr_read_framed_msg+0x84>
 8011824:	2305      	movs	r3, #5
 8011826:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011828:	e9cd 5300 	strd	r5, r3, [sp]
 801182c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801182e:	f7ff fdf1 	bl	8011414 <uxr_framing_read_transport>
 8011832:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011836:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801183a:	429a      	cmp	r2, r3
 801183c:	f43f aeb0 	beq.w	80115a0 <uxr_read_framed_msg+0x84>
 8011840:	e67a      	b.n	8011538 <uxr_read_framed_msg+0x1c>
 8011842:	459e      	cmp	lr, r3
 8011844:	f43f af05 	beq.w	8011652 <uxr_read_framed_msg+0x136>
 8011848:	2301      	movs	r3, #1
 801184a:	7023      	strb	r3, [r4, #0]
 801184c:	e678      	b.n	8011540 <uxr_read_framed_msg+0x24>
 801184e:	2303      	movs	r3, #3
 8011850:	e7c4      	b.n	80117dc <uxr_read_framed_msg+0x2c0>
 8011852:	2305      	movs	r3, #5
 8011854:	7023      	strb	r3, [r4, #0]
 8011856:	e673      	b.n	8011540 <uxr_read_framed_msg+0x24>
 8011858:	30c30c31 	.word	0x30c30c31
 801185c:	080199e4 	.word	0x080199e4
 8011860:	f43f aef7 	beq.w	8011652 <uxr_read_framed_msg+0x136>
 8011864:	297e      	cmp	r1, #126	; 0x7e
 8011866:	d095      	beq.n	8011794 <uxr_read_framed_msg+0x278>
 8011868:	ebae 0303 	sub.w	r3, lr, r3
 801186c:	3302      	adds	r3, #2
 801186e:	9301      	str	r3, [sp, #4]
 8011870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011872:	4652      	mov	r2, sl
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	4649      	mov	r1, r9
 8011878:	4620      	mov	r0, r4
 801187a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801187c:	f7ff fdca 	bl	8011414 <uxr_framing_read_transport>
 8011880:	fab0 f080 	clz	r0, r0
 8011884:	0940      	lsrs	r0, r0, #5
 8011886:	2800      	cmp	r0, #0
 8011888:	d0b4      	beq.n	80117f4 <uxr_read_framed_msg+0x2d8>
 801188a:	e689      	b.n	80115a0 <uxr_read_framed_msg+0x84>
 801188c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011892:	7013      	strb	r3, [r2, #0]
 8011894:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8011896:	b003      	add	sp, #12
 8011898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801189c:	1c5d      	adds	r5, r3, #1
 801189e:	0869      	lsrs	r1, r5, #1
 80118a0:	fba6 c101 	umull	ip, r1, r6, r1
 80118a4:	0889      	lsrs	r1, r1, #2
 80118a6:	fb00 5111 	mls	r1, r0, r1, r5
 80118aa:	b2cd      	uxtb	r5, r1
 80118ac:	42aa      	cmp	r2, r5
 80118ae:	d0a3      	beq.n	80117f8 <uxr_read_framed_msg+0x2dc>
 80118b0:	3302      	adds	r3, #2
 80118b2:	085a      	lsrs	r2, r3, #1
 80118b4:	fba6 5202 	umull	r5, r2, r6, r2
 80118b8:	0892      	lsrs	r2, r2, #2
 80118ba:	fb00 3212 	mls	r2, r0, r2, r3
 80118be:	1863      	adds	r3, r4, r1
 80118c0:	7899      	ldrb	r1, [r3, #2]
 80118c2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80118c6:	297e      	cmp	r1, #126	; 0x7e
 80118c8:	f000 8093 	beq.w	80119f2 <uxr_read_framed_msg+0x4d6>
 80118cc:	f081 0120 	eor.w	r1, r1, #32
 80118d0:	e683      	b.n	80115da <uxr_read_framed_msg+0xbe>
 80118d2:	1c5d      	adds	r5, r3, #1
 80118d4:	0869      	lsrs	r1, r5, #1
 80118d6:	fba6 c101 	umull	ip, r1, r6, r1
 80118da:	0889      	lsrs	r1, r1, #2
 80118dc:	fb00 5111 	mls	r1, r0, r1, r5
 80118e0:	b2cd      	uxtb	r5, r1
 80118e2:	42aa      	cmp	r2, r5
 80118e4:	f43f af79 	beq.w	80117da <uxr_read_framed_msg+0x2be>
 80118e8:	3302      	adds	r3, #2
 80118ea:	085a      	lsrs	r2, r3, #1
 80118ec:	fba6 5202 	umull	r5, r2, r6, r2
 80118f0:	0892      	lsrs	r2, r2, #2
 80118f2:	fb00 3212 	mls	r2, r0, r2, r3
 80118f6:	1863      	adds	r3, r4, r1
 80118f8:	789b      	ldrb	r3, [r3, #2]
 80118fa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80118fe:	2b7e      	cmp	r3, #126	; 0x7e
 8011900:	f000 8087 	beq.w	8011a12 <uxr_read_framed_msg+0x4f6>
 8011904:	f083 0120 	eor.w	r1, r3, #32
 8011908:	e63f      	b.n	801158a <uxr_read_framed_msg+0x6e>
 801190a:	202a      	movs	r0, #42	; 0x2a
 801190c:	1c55      	adds	r5, r2, #1
 801190e:	086b      	lsrs	r3, r5, #1
 8011910:	fba6 c303 	umull	ip, r3, r6, r3
 8011914:	089b      	lsrs	r3, r3, #2
 8011916:	fb00 5313 	mls	r3, r0, r3, r5
 801191a:	b2dd      	uxtb	r5, r3
 801191c:	42a9      	cmp	r1, r5
 801191e:	d096      	beq.n	801184e <uxr_read_framed_msg+0x332>
 8011920:	3202      	adds	r2, #2
 8011922:	0851      	lsrs	r1, r2, #1
 8011924:	fba6 5101 	umull	r5, r1, r6, r1
 8011928:	0889      	lsrs	r1, r1, #2
 801192a:	fb00 2211 	mls	r2, r0, r1, r2
 801192e:	4423      	add	r3, r4
 8011930:	789b      	ldrb	r3, [r3, #2]
 8011932:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011936:	2b7e      	cmp	r3, #126	; 0x7e
 8011938:	d06d      	beq.n	8011a16 <uxr_read_framed_msg+0x4fa>
 801193a:	f083 0020 	eor.w	r0, r3, #32
 801193e:	e6ea      	b.n	8011716 <uxr_read_framed_msg+0x1fa>
 8011940:	252a      	movs	r5, #42	; 0x2a
 8011942:	f101 0c01 	add.w	ip, r1, #1
 8011946:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801194a:	fba6 2303 	umull	r2, r3, r6, r3
 801194e:	089a      	lsrs	r2, r3, #2
 8011950:	fb05 c212 	mls	r2, r5, r2, ip
 8011954:	b2d3      	uxtb	r3, r2
 8011956:	4298      	cmp	r0, r3
 8011958:	f43f af50 	beq.w	80117fc <uxr_read_framed_msg+0x2e0>
 801195c:	1c8b      	adds	r3, r1, #2
 801195e:	0859      	lsrs	r1, r3, #1
 8011960:	fba6 0101 	umull	r0, r1, r6, r1
 8011964:	0889      	lsrs	r1, r1, #2
 8011966:	fb05 3111 	mls	r1, r5, r1, r3
 801196a:	18a3      	adds	r3, r4, r2
 801196c:	789b      	ldrb	r3, [r3, #2]
 801196e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8011972:	2b7e      	cmp	r3, #126	; 0x7e
 8011974:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8011978:	f43f af40 	beq.w	80117fc <uxr_read_framed_msg+0x2e0>
 801197c:	f083 0320 	eor.w	r3, r3, #32
 8011980:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8011984:	e6ea      	b.n	801175c <uxr_read_framed_msg+0x240>
 8011986:	1c5d      	adds	r5, r3, #1
 8011988:	0869      	lsrs	r1, r5, #1
 801198a:	fba6 c101 	umull	ip, r1, r6, r1
 801198e:	0889      	lsrs	r1, r1, #2
 8011990:	fb00 5111 	mls	r1, r0, r1, r5
 8011994:	b2cd      	uxtb	r5, r1
 8011996:	42aa      	cmp	r2, r5
 8011998:	f43f af1f 	beq.w	80117da <uxr_read_framed_msg+0x2be>
 801199c:	3302      	adds	r3, #2
 801199e:	085a      	lsrs	r2, r3, #1
 80119a0:	fba6 5202 	umull	r5, r2, r6, r2
 80119a4:	0892      	lsrs	r2, r2, #2
 80119a6:	fb00 3212 	mls	r2, r0, r2, r3
 80119aa:	1863      	adds	r3, r4, r1
 80119ac:	789b      	ldrb	r3, [r3, #2]
 80119ae:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80119b2:	2b7e      	cmp	r3, #126	; 0x7e
 80119b4:	d02d      	beq.n	8011a12 <uxr_read_framed_msg+0x4f6>
 80119b6:	f083 0120 	eor.w	r1, r3, #32
 80119ba:	e666      	b.n	801168a <uxr_read_framed_msg+0x16e>
 80119bc:	1c5d      	adds	r5, r3, #1
 80119be:	0869      	lsrs	r1, r5, #1
 80119c0:	fba6 c101 	umull	ip, r1, r6, r1
 80119c4:	0889      	lsrs	r1, r1, #2
 80119c6:	fb00 5111 	mls	r1, r0, r1, r5
 80119ca:	b2cd      	uxtb	r5, r1
 80119cc:	42aa      	cmp	r2, r5
 80119ce:	f43f af13 	beq.w	80117f8 <uxr_read_framed_msg+0x2dc>
 80119d2:	3302      	adds	r3, #2
 80119d4:	085a      	lsrs	r2, r3, #1
 80119d6:	fba6 5202 	umull	r5, r2, r6, r2
 80119da:	0892      	lsrs	r2, r2, #2
 80119dc:	fb00 3212 	mls	r2, r0, r2, r3
 80119e0:	1863      	adds	r3, r4, r1
 80119e2:	7899      	ldrb	r1, [r3, #2]
 80119e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80119e8:	297e      	cmp	r1, #126	; 0x7e
 80119ea:	d002      	beq.n	80119f2 <uxr_read_framed_msg+0x4d6>
 80119ec:	f081 0120 	eor.w	r1, r1, #32
 80119f0:	e674      	b.n	80116dc <uxr_read_framed_msg+0x1c0>
 80119f2:	2302      	movs	r3, #2
 80119f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119f6:	4649      	mov	r1, r9
 80119f8:	e9cd 2300 	strd	r2, r3, [sp]
 80119fc:	4620      	mov	r0, r4
 80119fe:	4652      	mov	r2, sl
 8011a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a02:	f7ff fd07 	bl	8011414 <uxr_framing_read_transport>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	f47f aef4 	bne.w	80117f4 <uxr_read_framed_msg+0x2d8>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	7023      	strb	r3, [r4, #0]
 8011a10:	e596      	b.n	8011540 <uxr_read_framed_msg+0x24>
 8011a12:	2301      	movs	r3, #1
 8011a14:	e7ee      	b.n	80119f4 <uxr_read_framed_msg+0x4d8>
 8011a16:	2303      	movs	r3, #3
 8011a18:	e7ec      	b.n	80119f4 <uxr_read_framed_msg+0x4d8>
 8011a1a:	bf00      	nop

08011a1c <uxr_stream_id>:
 8011a1c:	b430      	push	{r4, r5}
 8011a1e:	2901      	cmp	r1, #1
 8011a20:	4604      	mov	r4, r0
 8011a22:	b082      	sub	sp, #8
 8011a24:	d01e      	beq.n	8011a64 <uxr_stream_id+0x48>
 8011a26:	2902      	cmp	r1, #2
 8011a28:	f04f 0500 	mov.w	r5, #0
 8011a2c:	d01d      	beq.n	8011a6a <uxr_stream_id+0x4e>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	4618      	mov	r0, r3
 8011a32:	f365 0307 	bfi	r3, r5, #0, #8
 8011a36:	f364 230f 	bfi	r3, r4, #8, #8
 8011a3a:	f361 4317 	bfi	r3, r1, #16, #8
 8011a3e:	f362 631f 	bfi	r3, r2, #24, #8
 8011a42:	b2da      	uxtb	r2, r3
 8011a44:	f362 0007 	bfi	r0, r2, #0, #8
 8011a48:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011a4c:	f362 200f 	bfi	r0, r2, #8, #8
 8011a50:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011a54:	f362 4017 	bfi	r0, r2, #16, #8
 8011a58:	0e1b      	lsrs	r3, r3, #24
 8011a5a:	f363 601f 	bfi	r0, r3, #24, #8
 8011a5e:	b002      	add	sp, #8
 8011a60:	bc30      	pop	{r4, r5}
 8011a62:	4770      	bx	lr
 8011a64:	1c45      	adds	r5, r0, #1
 8011a66:	b2ed      	uxtb	r5, r5
 8011a68:	e7e1      	b.n	8011a2e <uxr_stream_id+0x12>
 8011a6a:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 8011a6e:	e7de      	b.n	8011a2e <uxr_stream_id+0x12>

08011a70 <uxr_stream_id_from_raw>:
 8011a70:	b430      	push	{r4, r5}
 8011a72:	4602      	mov	r2, r0
 8011a74:	b082      	sub	sp, #8
 8011a76:	b128      	cbz	r0, 8011a84 <uxr_stream_id_from_raw+0x14>
 8011a78:	0603      	lsls	r3, r0, #24
 8011a7a:	d420      	bmi.n	8011abe <uxr_stream_id_from_raw+0x4e>
 8011a7c:	1e44      	subs	r4, r0, #1
 8011a7e:	2501      	movs	r5, #1
 8011a80:	b2e4      	uxtb	r4, r4
 8011a82:	e001      	b.n	8011a88 <uxr_stream_id_from_raw+0x18>
 8011a84:	4605      	mov	r5, r0
 8011a86:	4604      	mov	r4, r0
 8011a88:	2300      	movs	r3, #0
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f362 0307 	bfi	r3, r2, #0, #8
 8011a90:	f364 230f 	bfi	r3, r4, #8, #8
 8011a94:	f365 4317 	bfi	r3, r5, #16, #8
 8011a98:	f361 631f 	bfi	r3, r1, #24, #8
 8011a9c:	b2da      	uxtb	r2, r3
 8011a9e:	f362 0007 	bfi	r0, r2, #0, #8
 8011aa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011aa6:	f362 200f 	bfi	r0, r2, #8, #8
 8011aaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011aae:	f362 4017 	bfi	r0, r2, #16, #8
 8011ab2:	0e1b      	lsrs	r3, r3, #24
 8011ab4:	f363 601f 	bfi	r0, r3, #24, #8
 8011ab8:	b002      	add	sp, #8
 8011aba:	bc30      	pop	{r4, r5}
 8011abc:	4770      	bx	lr
 8011abe:	2502      	movs	r5, #2
 8011ac0:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8011ac4:	e7e0      	b.n	8011a88 <uxr_stream_id_from_raw+0x18>
 8011ac6:	bf00      	nop

08011ac8 <uxr_init_stream_storage>:
 8011ac8:	2300      	movs	r3, #0
 8011aca:	7403      	strb	r3, [r0, #16]
 8011acc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011ad0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011ad4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop

08011adc <uxr_reset_stream_storage>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	7c03      	ldrb	r3, [r0, #16]
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	b153      	cbz	r3, 8011afa <uxr_reset_stream_storage+0x1e>
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	2500      	movs	r5, #0
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f004 fd69 	bl	80165c0 <uxr_reset_output_best_effort_stream>
 8011aee:	7c23      	ldrb	r3, [r4, #16]
 8011af0:	3501      	adds	r5, #1
 8011af2:	42ab      	cmp	r3, r5
 8011af4:	f106 0610 	add.w	r6, r6, #16
 8011af8:	d8f6      	bhi.n	8011ae8 <uxr_reset_stream_storage+0xc>
 8011afa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011afe:	b163      	cbz	r3, 8011b1a <uxr_reset_stream_storage+0x3e>
 8011b00:	2600      	movs	r6, #0
 8011b02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b06:	4628      	mov	r0, r5
 8011b08:	f004 fb66 	bl	80161d8 <uxr_reset_input_best_effort_stream>
 8011b0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011b10:	3601      	adds	r6, #1
 8011b12:	42b3      	cmp	r3, r6
 8011b14:	f105 0502 	add.w	r5, r5, #2
 8011b18:	d8f5      	bhi.n	8011b06 <uxr_reset_stream_storage+0x2a>
 8011b1a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011b1e:	b163      	cbz	r3, 8011b3a <uxr_reset_stream_storage+0x5e>
 8011b20:	2600      	movs	r6, #0
 8011b22:	f104 0518 	add.w	r5, r4, #24
 8011b26:	4628      	mov	r0, r5
 8011b28:	f004 fdea 	bl	8016700 <uxr_reset_output_reliable_stream>
 8011b2c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011b30:	3601      	adds	r6, #1
 8011b32:	42b3      	cmp	r3, r6
 8011b34:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8011b38:	d8f5      	bhi.n	8011b26 <uxr_reset_stream_storage+0x4a>
 8011b3a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011b3e:	b163      	cbz	r3, 8011b5a <uxr_reset_stream_storage+0x7e>
 8011b40:	2600      	movs	r6, #0
 8011b42:	f104 0548 	add.w	r5, r4, #72	; 0x48
 8011b46:	4628      	mov	r0, r5
 8011b48:	f004 fbae 	bl	80162a8 <uxr_reset_input_reliable_stream>
 8011b4c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011b50:	3601      	adds	r6, #1
 8011b52:	42b3      	cmp	r3, r6
 8011b54:	f105 0518 	add.w	r5, r5, #24
 8011b58:	d8f5      	bhi.n	8011b46 <uxr_reset_stream_storage+0x6a>
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}

08011b5c <uxr_add_output_best_effort_buffer>:
 8011b5c:	b530      	push	{r4, r5, lr}
 8011b5e:	7c04      	ldrb	r4, [r0, #16]
 8011b60:	b083      	sub	sp, #12
 8011b62:	1c65      	adds	r5, r4, #1
 8011b64:	7405      	strb	r5, [r0, #16]
 8011b66:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011b6a:	f004 fd1f 	bl	80165ac <uxr_init_output_best_effort_stream>
 8011b6e:	2201      	movs	r2, #1
 8011b70:	4620      	mov	r0, r4
 8011b72:	4611      	mov	r1, r2
 8011b74:	b003      	add	sp, #12
 8011b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b7a:	f7ff bf4f 	b.w	8011a1c <uxr_stream_id>
 8011b7e:	bf00      	nop

08011b80 <uxr_add_output_reliable_buffer>:
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8011b86:	b084      	sub	sp, #16
 8011b88:	1c66      	adds	r6, r4, #1
 8011b8a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8011b8e:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8011b92:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8011b96:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8011b9a:	3018      	adds	r0, #24
 8011b9c:	9500      	str	r5, [sp, #0]
 8011b9e:	f004 fd7d 	bl	801669c <uxr_init_output_reliable_stream>
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	2102      	movs	r1, #2
 8011ba8:	b004      	add	sp, #16
 8011baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bae:	f7ff bf35 	b.w	8011a1c <uxr_stream_id>
 8011bb2:	bf00      	nop

08011bb4 <uxr_add_input_best_effort_buffer>:
 8011bb4:	b510      	push	{r4, lr}
 8011bb6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011bba:	b082      	sub	sp, #8
 8011bbc:	1c62      	adds	r2, r4, #1
 8011bbe:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8011bc2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8011bc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011bca:	f004 fb01 	bl	80161d0 <uxr_init_input_best_effort_stream>
 8011bce:	4620      	mov	r0, r4
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	b002      	add	sp, #8
 8011bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bda:	f7ff bf1f 	b.w	8011a1c <uxr_stream_id>
 8011bde:	bf00      	nop

08011be0 <uxr_add_input_reliable_buffer>:
 8011be0:	b570      	push	{r4, r5, r6, lr}
 8011be2:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8011be6:	b084      	sub	sp, #16
 8011be8:	1c66      	adds	r6, r4, #1
 8011bea:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8011bee:	9d08      	ldr	r5, [sp, #32]
 8011bf0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8011bf4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8011bf8:	3048      	adds	r0, #72	; 0x48
 8011bfa:	9500      	str	r5, [sp, #0]
 8011bfc:	f004 fb30 	bl	8016260 <uxr_init_input_reliable_stream>
 8011c00:	4620      	mov	r0, r4
 8011c02:	2200      	movs	r2, #0
 8011c04:	2102      	movs	r1, #2
 8011c06:	b004      	add	sp, #16
 8011c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c0c:	f7ff bf06 	b.w	8011a1c <uxr_stream_id>

08011c10 <uxr_get_output_best_effort_stream>:
 8011c10:	7c03      	ldrb	r3, [r0, #16]
 8011c12:	428b      	cmp	r3, r1
 8011c14:	bf8c      	ite	hi
 8011c16:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011c1a:	2000      	movls	r0, #0
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <uxr_get_output_reliable_stream>:
 8011c20:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011c24:	428b      	cmp	r3, r1
 8011c26:	bf83      	ittte	hi
 8011c28:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 8011c2c:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 8011c30:	3018      	addhi	r0, #24
 8011c32:	2000      	movls	r0, #0
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <uxr_get_input_best_effort_stream>:
 8011c38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011c3c:	428b      	cmp	r3, r1
 8011c3e:	bf86      	itte	hi
 8011c40:	3121      	addhi	r1, #33	; 0x21
 8011c42:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011c46:	2000      	movls	r0, #0
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop

08011c4c <uxr_get_input_reliable_stream>:
 8011c4c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011c50:	428b      	cmp	r3, r1
 8011c52:	bf83      	ittte	hi
 8011c54:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 8011c58:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 8011c5c:	3048      	addhi	r0, #72	; 0x48
 8011c5e:	2000      	movls	r0, #0
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop

08011c64 <uxr_output_streams_confirmed>:
 8011c64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011c68:	b183      	cbz	r3, 8011c8c <uxr_output_streams_confirmed+0x28>
 8011c6a:	b570      	push	{r4, r5, r6, lr}
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	2400      	movs	r4, #0
 8011c70:	f100 0518 	add.w	r5, r0, #24
 8011c74:	e001      	b.n	8011c7a <uxr_output_streams_confirmed+0x16>
 8011c76:	3528      	adds	r5, #40	; 0x28
 8011c78:	b138      	cbz	r0, 8011c8a <uxr_output_streams_confirmed+0x26>
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	f004 ffa2 	bl	8016bc4 <uxr_is_output_up_to_date>
 8011c80:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011c84:	3401      	adds	r4, #1
 8011c86:	42a3      	cmp	r3, r4
 8011c88:	d8f5      	bhi.n	8011c76 <uxr_output_streams_confirmed+0x12>
 8011c8a:	bd70      	pop	{r4, r5, r6, pc}
 8011c8c:	2001      	movs	r0, #1
 8011c8e:	4770      	bx	lr

08011c90 <uxr_buffer_submessage_header>:
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c92:	460e      	mov	r6, r1
 8011c94:	2104      	movs	r1, #4
 8011c96:	4615      	mov	r5, r2
 8011c98:	4604      	mov	r4, r0
 8011c9a:	461f      	mov	r7, r3
 8011c9c:	f7fd fd90 	bl	800f7c0 <ucdr_align_to>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	4631      	mov	r1, r6
 8011ca4:	ea47 0203 	orr.w	r2, r7, r3
 8011ca8:	4620      	mov	r0, r4
 8011caa:	7523      	strb	r3, [r4, #20]
 8011cac:	462b      	mov	r3, r5
 8011cae:	f000 fa2d 	bl	801210c <uxr_serialize_submessage_header>
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7fd fd9a 	bl	800f7ec <ucdr_buffer_remaining>
 8011cb8:	42a8      	cmp	r0, r5
 8011cba:	bf34      	ite	cc
 8011cbc:	2000      	movcc	r0, #0
 8011cbe:	2001      	movcs	r0, #1
 8011cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc2:	bf00      	nop

08011cc4 <uxr_read_submessage_header>:
 8011cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc8:	4604      	mov	r4, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	2104      	movs	r1, #4
 8011cce:	4616      	mov	r6, r2
 8011cd0:	4698      	mov	r8, r3
 8011cd2:	f7fd fd75 	bl	800f7c0 <ucdr_align_to>
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f7fd fd88 	bl	800f7ec <ucdr_buffer_remaining>
 8011cdc:	2803      	cmp	r0, #3
 8011cde:	bf8c      	ite	hi
 8011ce0:	2701      	movhi	r7, #1
 8011ce2:	2700      	movls	r7, #0
 8011ce4:	d802      	bhi.n	8011cec <uxr_read_submessage_header+0x28>
 8011ce6:	4638      	mov	r0, r7
 8011ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cec:	4633      	mov	r3, r6
 8011cee:	4642      	mov	r2, r8
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	4629      	mov	r1, r5
 8011cf4:	f000 fa1c 	bl	8012130 <uxr_deserialize_submessage_header>
 8011cf8:	f898 3000 	ldrb.w	r3, [r8]
 8011cfc:	4638      	mov	r0, r7
 8011cfe:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	f888 2000 	strb.w	r2, [r8]
 8011d0a:	7523      	strb	r3, [r4, #20]
 8011d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d10 <uxr_submessage_padding>:
 8011d10:	f010 0003 	ands.w	r0, r0, #3
 8011d14:	bf18      	it	ne
 8011d16:	f1c0 0004 	rsbne	r0, r0, #4
 8011d1a:	4770      	bx	lr

08011d1c <uxr_millis>:
 8011d1c:	b510      	push	{r4, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	4669      	mov	r1, sp
 8011d22:	2001      	movs	r0, #1
 8011d24:	f7f0 fed0 	bl	8002ac8 <clock_gettime>
 8011d28:	e9dd 0200 	ldrd	r0, r2, [sp]
 8011d2c:	4b07      	ldr	r3, [pc, #28]	; (8011d4c <uxr_millis+0x30>)
 8011d2e:	9c02      	ldr	r4, [sp, #8]
 8011d30:	fba0 0103 	umull	r0, r1, r0, r3
 8011d34:	fb03 1102 	mla	r1, r3, r2, r1
 8011d38:	1900      	adds	r0, r0, r4
 8011d3a:	f04f 0300 	mov.w	r3, #0
 8011d3e:	4a04      	ldr	r2, [pc, #16]	; (8011d50 <uxr_millis+0x34>)
 8011d40:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011d44:	f7ee fd0a 	bl	800075c <__aeabi_ldivmod>
 8011d48:	b004      	add	sp, #16
 8011d4a:	bd10      	pop	{r4, pc}
 8011d4c:	3b9aca00 	.word	0x3b9aca00
 8011d50:	000f4240 	.word	0x000f4240

08011d54 <uxr_nanos>:
 8011d54:	b500      	push	{lr}
 8011d56:	b085      	sub	sp, #20
 8011d58:	4669      	mov	r1, sp
 8011d5a:	2001      	movs	r0, #1
 8011d5c:	f7f0 feb4 	bl	8002ac8 <clock_gettime>
 8011d60:	e9dd 2000 	ldrd	r2, r0, [sp]
 8011d64:	4906      	ldr	r1, [pc, #24]	; (8011d80 <uxr_nanos+0x2c>)
 8011d66:	fba2 2301 	umull	r2, r3, r2, r1
 8011d6a:	fb01 3300 	mla	r3, r1, r0, r3
 8011d6e:	9802      	ldr	r0, [sp, #8]
 8011d70:	4684      	mov	ip, r0
 8011d72:	1810      	adds	r0, r2, r0
 8011d74:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 8011d78:	b005      	add	sp, #20
 8011d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d7e:	bf00      	nop
 8011d80:	3b9aca00 	.word	0x3b9aca00

08011d84 <on_full_output_buffer_fragmented>:
 8011d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d88:	460c      	mov	r4, r1
 8011d8a:	b08a      	sub	sp, #40	; 0x28
 8011d8c:	4606      	mov	r6, r0
 8011d8e:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011d92:	f104 0008 	add.w	r0, r4, #8
 8011d96:	f7ff ff43 	bl	8011c20 <uxr_get_output_reliable_stream>
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	f004 ff1c 	bl	8016bd8 <get_available_free_slots>
 8011da0:	b968      	cbnz	r0, 8011dbe <on_full_output_buffer_fragmented+0x3a>
 8011da2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011da6:	4620      	mov	r0, r4
 8011da8:	4798      	blx	r3
 8011daa:	b918      	cbnz	r0, 8011db4 <on_full_output_buffer_fragmented+0x30>
 8011dac:	2001      	movs	r0, #1
 8011dae:	b00a      	add	sp, #40	; 0x28
 8011db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db4:	4628      	mov	r0, r5
 8011db6:	f004 ff0f 	bl	8016bd8 <get_available_free_slots>
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d0f6      	beq.n	8011dac <on_full_output_buffer_fragmented+0x28>
 8011dbe:	892a      	ldrh	r2, [r5, #8]
 8011dc0:	89e8      	ldrh	r0, [r5, #14]
 8011dc2:	686b      	ldr	r3, [r5, #4]
 8011dc4:	fbb0 f1f2 	udiv	r1, r0, r2
 8011dc8:	fbb3 f8f2 	udiv	r8, r3, r2
 8011dcc:	fb02 0111 	mls	r1, r2, r1, r0
 8011dd0:	7b2b      	ldrb	r3, [r5, #12]
 8011dd2:	b289      	uxth	r1, r1
 8011dd4:	fb08 f101 	mul.w	r1, r8, r1
 8011dd8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8011ddc:	f1a8 0804 	sub.w	r8, r8, #4
 8011de0:	33fc      	adds	r3, #252	; 0xfc
 8011de2:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8011de6:	4443      	add	r3, r8
 8011de8:	682a      	ldr	r2, [r5, #0]
 8011dea:	b29f      	uxth	r7, r3
 8011dec:	1bc0      	subs	r0, r0, r7
 8011dee:	3104      	adds	r1, #4
 8011df0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8011df4:	4411      	add	r1, r2
 8011df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dfa:	4642      	mov	r2, r8
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	a802      	add	r0, sp, #8
 8011e00:	2300      	movs	r3, #0
 8011e02:	f7fd fcaf 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8011e06:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011e0a:	f102 0308 	add.w	r3, r2, #8
 8011e0e:	4543      	cmp	r3, r8
 8011e10:	d928      	bls.n	8011e64 <on_full_output_buffer_fragmented+0xe0>
 8011e12:	463a      	mov	r2, r7
 8011e14:	2300      	movs	r3, #0
 8011e16:	210d      	movs	r1, #13
 8011e18:	a802      	add	r0, sp, #8
 8011e1a:	f7ff ff39 	bl	8011c90 <uxr_buffer_submessage_header>
 8011e1e:	8929      	ldrh	r1, [r5, #8]
 8011e20:	89e8      	ldrh	r0, [r5, #14]
 8011e22:	686b      	ldr	r3, [r5, #4]
 8011e24:	fbb0 f2f1 	udiv	r2, r0, r1
 8011e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e2c:	fb01 0212 	mls	r2, r1, r2, r0
 8011e30:	b292      	uxth	r2, r2
 8011e32:	fb03 f302 	mul.w	r3, r3, r2
 8011e36:	682a      	ldr	r2, [r5, #0]
 8011e38:	f842 8003 	str.w	r8, [r2, r3]
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	89e8      	ldrh	r0, [r5, #14]
 8011e40:	f004 feec 	bl	8016c1c <uxr_seq_num_add>
 8011e44:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011e48:	81e8      	strh	r0, [r5, #14]
 8011e4a:	1a52      	subs	r2, r2, r1
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7fd fc9b 	bl	800f788 <ucdr_init_buffer>
 8011e52:	4630      	mov	r0, r6
 8011e54:	4622      	mov	r2, r4
 8011e56:	490f      	ldr	r1, [pc, #60]	; (8011e94 <on_full_output_buffer_fragmented+0x110>)
 8011e58:	f7fd fc6c 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	b00a      	add	sp, #40	; 0x28
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	2302      	movs	r3, #2
 8011e66:	210d      	movs	r1, #13
 8011e68:	b292      	uxth	r2, r2
 8011e6a:	a802      	add	r0, sp, #8
 8011e6c:	f7ff ff10 	bl	8011c90 <uxr_buffer_submessage_header>
 8011e70:	8929      	ldrh	r1, [r5, #8]
 8011e72:	89e8      	ldrh	r0, [r5, #14]
 8011e74:	686b      	ldr	r3, [r5, #4]
 8011e76:	fbb0 f2f1 	udiv	r2, r0, r1
 8011e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e7e:	fb01 0212 	mls	r2, r1, r2, r0
 8011e82:	b292      	uxth	r2, r2
 8011e84:	fb03 f302 	mul.w	r3, r3, r2
 8011e88:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011e8c:	6829      	ldr	r1, [r5, #0]
 8011e8e:	3208      	adds	r2, #8
 8011e90:	50ca      	str	r2, [r1, r3]
 8011e92:	e7d3      	b.n	8011e3c <on_full_output_buffer_fragmented+0xb8>
 8011e94:	08011d85 	.word	0x08011d85

08011e98 <uxr_prepare_output_stream>:
 8011e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e9a:	2407      	movs	r4, #7
 8011e9c:	2500      	movs	r5, #0
 8011e9e:	b087      	sub	sp, #28
 8011ea0:	9202      	str	r2, [sp, #8]
 8011ea2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ea4:	e9cd 4500 	strd	r4, r5, [sp]
 8011ea8:	3204      	adds	r2, #4
 8011eaa:	461c      	mov	r4, r3
 8011eac:	4606      	mov	r6, r0
 8011eae:	9103      	str	r1, [sp, #12]
 8011eb0:	f7fe ffda 	bl	8010e68 <uxr_prepare_stream_to_write_submessage>
 8011eb4:	f080 0201 	eor.w	r2, r0, #1
 8011eb8:	b2d2      	uxtb	r2, r2
 8011eba:	75a2      	strb	r2, [r4, #22]
 8011ebc:	b112      	cbz	r2, 8011ec4 <uxr_prepare_output_stream+0x2c>
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	b007      	add	sp, #28
 8011ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ec4:	aa05      	add	r2, sp, #20
 8011ec6:	9902      	ldr	r1, [sp, #8]
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f7ff f8ff 	bl	80110cc <uxr_init_base_object_request>
 8011ece:	4605      	mov	r5, r0
 8011ed0:	a905      	add	r1, sp, #20
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 febc 	bl	8012c50 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011ed8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011edc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	1a52      	subs	r2, r2, r1
 8011ee4:	f7fd fc50 	bl	800f788 <ucdr_init_buffer>
 8011ee8:	4620      	mov	r0, r4
 8011eea:	463a      	mov	r2, r7
 8011eec:	4631      	mov	r1, r6
 8011eee:	f7fd fc21 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	b007      	add	sp, #28
 8011ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ef8 <uxr_prepare_output_stream_fragmented>:
 8011ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011efc:	b093      	sub	sp, #76	; 0x4c
 8011efe:	9107      	str	r1, [sp, #28]
 8011f00:	4605      	mov	r5, r0
 8011f02:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011f06:	3008      	adds	r0, #8
 8011f08:	9303      	str	r3, [sp, #12]
 8011f0a:	9206      	str	r2, [sp, #24]
 8011f0c:	f7ff fe88 	bl	8011c20 <uxr_get_output_reliable_stream>
 8011f10:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	f000 8094 	beq.w	8012042 <uxr_prepare_output_stream_fragmented+0x14a>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	f000 8090 	beq.w	8012042 <uxr_prepare_output_stream_fragmented+0x14a>
 8011f22:	f004 fe59 	bl	8016bd8 <get_available_free_slots>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f000 8086 	beq.w	8012038 <uxr_prepare_output_stream_fragmented+0x140>
 8011f2c:	8923      	ldrh	r3, [r4, #8]
 8011f2e:	89e7      	ldrh	r7, [r4, #14]
 8011f30:	6862      	ldr	r2, [r4, #4]
 8011f32:	fbb7 f8f3 	udiv	r8, r7, r3
 8011f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8011f3a:	fb03 7818 	mls	r8, r3, r8, r7
 8011f3e:	fa1f f888 	uxth.w	r8, r8
 8011f42:	fb02 f808 	mul.w	r8, r2, r8
 8011f46:	6823      	ldr	r3, [r4, #0]
 8011f48:	f108 0804 	add.w	r8, r8, #4
 8011f4c:	4498      	add	r8, r3
 8011f4e:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011f52:	7b23      	ldrb	r3, [r4, #12]
 8011f54:	9204      	str	r2, [sp, #16]
 8011f56:	4553      	cmp	r3, sl
 8011f58:	f1a2 0b04 	sub.w	fp, r2, #4
 8011f5c:	d37d      	bcc.n	801205a <uxr_prepare_output_stream_fragmented+0x162>
 8011f5e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011f60:	f1ab 0904 	sub.w	r9, fp, #4
 8011f64:	eba9 0903 	sub.w	r9, r9, r3
 8011f68:	3608      	adds	r6, #8
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	465a      	mov	r2, fp
 8011f6e:	4641      	mov	r1, r8
 8011f70:	a80a      	add	r0, sp, #40	; 0x28
 8011f72:	f8cd a000 	str.w	sl, [sp]
 8011f76:	fa1f f989 	uxth.w	r9, r9
 8011f7a:	9605      	str	r6, [sp, #20]
 8011f7c:	f7fd fbf2 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8011f80:	455e      	cmp	r6, fp
 8011f82:	bf34      	ite	cc
 8011f84:	2302      	movcc	r3, #2
 8011f86:	2300      	movcs	r3, #0
 8011f88:	464a      	mov	r2, r9
 8011f8a:	210d      	movs	r1, #13
 8011f8c:	a80a      	add	r0, sp, #40	; 0x28
 8011f8e:	f7ff fe7f 	bl	8011c90 <uxr_buffer_submessage_header>
 8011f92:	8921      	ldrh	r1, [r4, #8]
 8011f94:	6862      	ldr	r2, [r4, #4]
 8011f96:	fbb7 f3f1 	udiv	r3, r7, r1
 8011f9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8011f9e:	fb01 7313 	mls	r3, r1, r3, r7
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	fb03 f302 	mul.w	r3, r3, r2
 8011fa8:	6822      	ldr	r2, [r4, #0]
 8011faa:	4638      	mov	r0, r7
 8011fac:	f842 b003 	str.w	fp, [r2, r3]
 8011fb0:	2101      	movs	r1, #1
 8011fb2:	f004 fe33 	bl	8016c1c <uxr_seq_num_add>
 8011fb6:	9b04      	ldr	r3, [sp, #16]
 8011fb8:	9e03      	ldr	r6, [sp, #12]
 8011fba:	f1a3 0208 	sub.w	r2, r3, #8
 8011fbe:	f10a 0104 	add.w	r1, sl, #4
 8011fc2:	4607      	mov	r7, r0
 8011fc4:	eba2 020a 	sub.w	r2, r2, sl
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4441      	add	r1, r8
 8011fcc:	f7fd fbdc 	bl	800f788 <ucdr_init_buffer>
 8011fd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011fd2:	2107      	movs	r1, #7
 8011fd4:	1d1a      	adds	r2, r3, #4
 8011fd6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011fda:	bf28      	it	cs
 8011fdc:	2200      	movcs	r2, #0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	81e7      	strh	r7, [r4, #14]
 8011fe2:	b292      	uxth	r2, r2
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f7ff fe53 	bl	8011c90 <uxr_buffer_submessage_header>
 8011fea:	4628      	mov	r0, r5
 8011fec:	9906      	ldr	r1, [sp, #24]
 8011fee:	aa09      	add	r2, sp, #36	; 0x24
 8011ff0:	f7ff f86c 	bl	80110cc <uxr_init_base_object_request>
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	b328      	cbz	r0, 8012044 <uxr_prepare_output_stream_fragmented+0x14c>
 8011ff8:	9e03      	ldr	r6, [sp, #12]
 8011ffa:	a909      	add	r1, sp, #36	; 0x24
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f000 fe27 	bl	8012c50 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012002:	68b1      	ldr	r1, [r6, #8]
 8012004:	6872      	ldr	r2, [r6, #4]
 8012006:	4630      	mov	r0, r6
 8012008:	1a52      	subs	r2, r2, r1
 801200a:	f7fd fbbd 	bl	800f788 <ucdr_init_buffer>
 801200e:	9a05      	ldr	r2, [sp, #20]
 8012010:	9b07      	ldr	r3, [sp, #28]
 8012012:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012016:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012018:	4630      	mov	r0, r6
 801201a:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801201e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012020:	491a      	ldr	r1, [pc, #104]	; (801208c <uxr_prepare_output_stream_fragmented+0x194>)
 8012022:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8012026:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801202a:	462a      	mov	r2, r5
 801202c:	f7fd fb82 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8012030:	4620      	mov	r0, r4
 8012032:	b013      	add	sp, #76	; 0x4c
 8012034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012038:	4628      	mov	r0, r5
 801203a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801203c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801203e:	4798      	blx	r3
 8012040:	b920      	cbnz	r0, 801204c <uxr_prepare_output_stream_fragmented+0x154>
 8012042:	2400      	movs	r4, #0
 8012044:	4620      	mov	r0, r4
 8012046:	b013      	add	sp, #76	; 0x4c
 8012048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204c:	4620      	mov	r0, r4
 801204e:	f004 fdc3 	bl	8016bd8 <get_available_free_slots>
 8012052:	2800      	cmp	r0, #0
 8012054:	f47f af6a 	bne.w	8011f2c <uxr_prepare_output_stream_fragmented+0x34>
 8012058:	e7f3      	b.n	8012042 <uxr_prepare_output_stream_fragmented+0x14a>
 801205a:	4638      	mov	r0, r7
 801205c:	2101      	movs	r1, #1
 801205e:	f004 fddd 	bl	8016c1c <uxr_seq_num_add>
 8012062:	8922      	ldrh	r2, [r4, #8]
 8012064:	6863      	ldr	r3, [r4, #4]
 8012066:	fbb0 f8f2 	udiv	r8, r0, r2
 801206a:	fbb3 f3f2 	udiv	r3, r3, r2
 801206e:	fb02 0818 	mls	r8, r2, r8, r0
 8012072:	fa1f f888 	uxth.w	r8, r8
 8012076:	fb08 f803 	mul.w	r8, r8, r3
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	f108 0804 	add.w	r8, r8, #4
 8012080:	4498      	add	r8, r3
 8012082:	4607      	mov	r7, r0
 8012084:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012088:	7b23      	ldrb	r3, [r4, #12]
 801208a:	e768      	b.n	8011f5e <uxr_prepare_output_stream_fragmented+0x66>
 801208c:	08011d85 	.word	0x08011d85

08012090 <uxr_serialize_message_header>:
 8012090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012094:	4617      	mov	r7, r2
 8012096:	4604      	mov	r4, r0
 8012098:	461e      	mov	r6, r3
 801209a:	460d      	mov	r5, r1
 801209c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80120a0:	f7fb ff30 	bl	800df04 <ucdr_serialize_uint8_t>
 80120a4:	4639      	mov	r1, r7
 80120a6:	4620      	mov	r0, r4
 80120a8:	f7fb ff2c 	bl	800df04 <ucdr_serialize_uint8_t>
 80120ac:	4632      	mov	r2, r6
 80120ae:	4620      	mov	r0, r4
 80120b0:	2101      	movs	r1, #1
 80120b2:	f7fb ffd3 	bl	800e05c <ucdr_serialize_endian_uint16_t>
 80120b6:	062b      	lsls	r3, r5, #24
 80120b8:	d501      	bpl.n	80120be <uxr_serialize_message_header+0x2e>
 80120ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120be:	4641      	mov	r1, r8
 80120c0:	4620      	mov	r0, r4
 80120c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120c6:	2204      	movs	r2, #4
 80120c8:	f7fb bb78 	b.w	800d7bc <ucdr_serialize_array_uint8_t>

080120cc <uxr_deserialize_message_header>:
 80120cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d0:	4617      	mov	r7, r2
 80120d2:	4604      	mov	r4, r0
 80120d4:	461e      	mov	r6, r3
 80120d6:	460d      	mov	r5, r1
 80120d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80120dc:	f7fb ff28 	bl	800df30 <ucdr_deserialize_uint8_t>
 80120e0:	4639      	mov	r1, r7
 80120e2:	4620      	mov	r0, r4
 80120e4:	f7fb ff24 	bl	800df30 <ucdr_deserialize_uint8_t>
 80120e8:	4632      	mov	r2, r6
 80120ea:	4620      	mov	r0, r4
 80120ec:	2101      	movs	r1, #1
 80120ee:	f7fc f8a9 	bl	800e244 <ucdr_deserialize_endian_uint16_t>
 80120f2:	f995 3000 	ldrsb.w	r3, [r5]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	da01      	bge.n	80120fe <uxr_deserialize_message_header+0x32>
 80120fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120fe:	4641      	mov	r1, r8
 8012100:	4620      	mov	r0, r4
 8012102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012106:	2204      	movs	r2, #4
 8012108:	f7fb bbbc 	b.w	800d884 <ucdr_deserialize_array_uint8_t>

0801210c <uxr_serialize_submessage_header>:
 801210c:	b570      	push	{r4, r5, r6, lr}
 801210e:	4616      	mov	r6, r2
 8012110:	4604      	mov	r4, r0
 8012112:	461d      	mov	r5, r3
 8012114:	f7fb fef6 	bl	800df04 <ucdr_serialize_uint8_t>
 8012118:	4631      	mov	r1, r6
 801211a:	4620      	mov	r0, r4
 801211c:	f7fb fef2 	bl	800df04 <ucdr_serialize_uint8_t>
 8012120:	462a      	mov	r2, r5
 8012122:	4620      	mov	r0, r4
 8012124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012128:	2101      	movs	r1, #1
 801212a:	f7fb bf97 	b.w	800e05c <ucdr_serialize_endian_uint16_t>
 801212e:	bf00      	nop

08012130 <uxr_deserialize_submessage_header>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	4616      	mov	r6, r2
 8012134:	4604      	mov	r4, r0
 8012136:	461d      	mov	r5, r3
 8012138:	f7fb fefa 	bl	800df30 <ucdr_deserialize_uint8_t>
 801213c:	4631      	mov	r1, r6
 801213e:	4620      	mov	r0, r4
 8012140:	f7fb fef6 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012144:	462a      	mov	r2, r5
 8012146:	4620      	mov	r0, r4
 8012148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801214c:	2101      	movs	r1, #1
 801214e:	f7fc b879 	b.w	800e244 <ucdr_deserialize_endian_uint16_t>
 8012152:	bf00      	nop

08012154 <uxr_serialize_CLIENT_Representation>:
 8012154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012158:	2204      	movs	r2, #4
 801215a:	460c      	mov	r4, r1
 801215c:	4605      	mov	r5, r0
 801215e:	f7fb fb2d 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012162:	2202      	movs	r2, #2
 8012164:	4606      	mov	r6, r0
 8012166:	1d21      	adds	r1, r4, #4
 8012168:	4628      	mov	r0, r5
 801216a:	f7fb fb27 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 801216e:	2202      	movs	r2, #2
 8012170:	1da1      	adds	r1, r4, #6
 8012172:	4006      	ands	r6, r0
 8012174:	4628      	mov	r0, r5
 8012176:	f7fb fb21 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 801217a:	4603      	mov	r3, r0
 801217c:	2204      	movs	r2, #4
 801217e:	f104 0108 	add.w	r1, r4, #8
 8012182:	4628      	mov	r0, r5
 8012184:	b2f6      	uxtb	r6, r6
 8012186:	401e      	ands	r6, r3
 8012188:	f7fb fb18 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 801218c:	4603      	mov	r3, r0
 801218e:	7b21      	ldrb	r1, [r4, #12]
 8012190:	4628      	mov	r0, r5
 8012192:	401e      	ands	r6, r3
 8012194:	f7fb feb6 	bl	800df04 <ucdr_serialize_uint8_t>
 8012198:	4603      	mov	r3, r0
 801219a:	7b61      	ldrb	r1, [r4, #13]
 801219c:	4628      	mov	r0, r5
 801219e:	401e      	ands	r6, r3
 80121a0:	f7fb fe82 	bl	800dea8 <ucdr_serialize_bool>
 80121a4:	7b63      	ldrb	r3, [r4, #13]
 80121a6:	4006      	ands	r6, r0
 80121a8:	b933      	cbnz	r3, 80121b8 <uxr_serialize_CLIENT_Representation+0x64>
 80121aa:	4628      	mov	r0, r5
 80121ac:	8ba1      	ldrh	r1, [r4, #28]
 80121ae:	f7fb fed5 	bl	800df5c <ucdr_serialize_uint16_t>
 80121b2:	4030      	ands	r0, r6
 80121b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b8:	4628      	mov	r0, r5
 80121ba:	6921      	ldr	r1, [r4, #16]
 80121bc:	f7fc f8bc 	bl	800e338 <ucdr_serialize_uint32_t>
 80121c0:	6923      	ldr	r3, [r4, #16]
 80121c2:	b1cb      	cbz	r3, 80121f8 <uxr_serialize_CLIENT_Representation+0xa4>
 80121c4:	b1d0      	cbz	r0, 80121fc <uxr_serialize_CLIENT_Representation+0xa8>
 80121c6:	46a0      	mov	r8, r4
 80121c8:	f04f 0900 	mov.w	r9, #0
 80121cc:	e002      	b.n	80121d4 <uxr_serialize_CLIENT_Representation+0x80>
 80121ce:	f108 0808 	add.w	r8, r8, #8
 80121d2:	b198      	cbz	r0, 80121fc <uxr_serialize_CLIENT_Representation+0xa8>
 80121d4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80121d8:	4628      	mov	r0, r5
 80121da:	f003 ffe3 	bl	80161a4 <ucdr_serialize_string>
 80121de:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80121e2:	4607      	mov	r7, r0
 80121e4:	4628      	mov	r0, r5
 80121e6:	f003 ffdd 	bl	80161a4 <ucdr_serialize_string>
 80121ea:	6923      	ldr	r3, [r4, #16]
 80121ec:	f109 0901 	add.w	r9, r9, #1
 80121f0:	4038      	ands	r0, r7
 80121f2:	4599      	cmp	r9, r3
 80121f4:	b2c0      	uxtb	r0, r0
 80121f6:	d3ea      	bcc.n	80121ce <uxr_serialize_CLIENT_Representation+0x7a>
 80121f8:	4006      	ands	r6, r0
 80121fa:	e7d6      	b.n	80121aa <uxr_serialize_CLIENT_Representation+0x56>
 80121fc:	2600      	movs	r6, #0
 80121fe:	e7d4      	b.n	80121aa <uxr_serialize_CLIENT_Representation+0x56>

08012200 <uxr_deserialize_CLIENT_Representation>:
 8012200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012204:	2204      	movs	r2, #4
 8012206:	460c      	mov	r4, r1
 8012208:	4605      	mov	r5, r0
 801220a:	f7fb fb3b 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801220e:	2202      	movs	r2, #2
 8012210:	4606      	mov	r6, r0
 8012212:	1d21      	adds	r1, r4, #4
 8012214:	4628      	mov	r0, r5
 8012216:	f7fb fb35 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801221a:	2202      	movs	r2, #2
 801221c:	1da1      	adds	r1, r4, #6
 801221e:	4006      	ands	r6, r0
 8012220:	4628      	mov	r0, r5
 8012222:	f7fb fb2f 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012226:	4603      	mov	r3, r0
 8012228:	2204      	movs	r2, #4
 801222a:	f104 0108 	add.w	r1, r4, #8
 801222e:	4628      	mov	r0, r5
 8012230:	b2f6      	uxtb	r6, r6
 8012232:	401e      	ands	r6, r3
 8012234:	f7fb fb26 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012238:	4603      	mov	r3, r0
 801223a:	f104 010c 	add.w	r1, r4, #12
 801223e:	4628      	mov	r0, r5
 8012240:	401e      	ands	r6, r3
 8012242:	f7fb fe75 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012246:	4603      	mov	r3, r0
 8012248:	f104 010d 	add.w	r1, r4, #13
 801224c:	4628      	mov	r0, r5
 801224e:	401e      	ands	r6, r3
 8012250:	f7fb fe40 	bl	800ded4 <ucdr_deserialize_bool>
 8012254:	7b63      	ldrb	r3, [r4, #13]
 8012256:	4006      	ands	r6, r0
 8012258:	b93b      	cbnz	r3, 801226a <uxr_deserialize_CLIENT_Representation+0x6a>
 801225a:	4628      	mov	r0, r5
 801225c:	f104 011c 	add.w	r1, r4, #28
 8012260:	f7fb ff7c 	bl	800e15c <ucdr_deserialize_uint16_t>
 8012264:	4030      	ands	r0, r6
 8012266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226a:	4628      	mov	r0, r5
 801226c:	f104 0110 	add.w	r1, r4, #16
 8012270:	f7fc f992 	bl	800e598 <ucdr_deserialize_uint32_t>
 8012274:	6923      	ldr	r3, [r4, #16]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d903      	bls.n	8012282 <uxr_deserialize_CLIENT_Representation+0x82>
 801227a:	2301      	movs	r3, #1
 801227c:	2600      	movs	r6, #0
 801227e:	75ab      	strb	r3, [r5, #22]
 8012280:	e7eb      	b.n	801225a <uxr_deserialize_CLIENT_Representation+0x5a>
 8012282:	b1eb      	cbz	r3, 80122c0 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012284:	b1f0      	cbz	r0, 80122c4 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012286:	46a0      	mov	r8, r4
 8012288:	f04f 0900 	mov.w	r9, #0
 801228c:	e002      	b.n	8012294 <uxr_deserialize_CLIENT_Representation+0x94>
 801228e:	f108 0808 	add.w	r8, r8, #8
 8012292:	b1b8      	cbz	r0, 80122c4 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012298:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801229c:	4628      	mov	r0, r5
 801229e:	f003 ff8f 	bl	80161c0 <ucdr_deserialize_string>
 80122a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122a6:	4607      	mov	r7, r0
 80122a8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80122ac:	4628      	mov	r0, r5
 80122ae:	f003 ff87 	bl	80161c0 <ucdr_deserialize_string>
 80122b2:	6923      	ldr	r3, [r4, #16]
 80122b4:	f109 0901 	add.w	r9, r9, #1
 80122b8:	4038      	ands	r0, r7
 80122ba:	4599      	cmp	r9, r3
 80122bc:	b2c0      	uxtb	r0, r0
 80122be:	d3e6      	bcc.n	801228e <uxr_deserialize_CLIENT_Representation+0x8e>
 80122c0:	4006      	ands	r6, r0
 80122c2:	e7ca      	b.n	801225a <uxr_deserialize_CLIENT_Representation+0x5a>
 80122c4:	2600      	movs	r6, #0
 80122c6:	e7c8      	b.n	801225a <uxr_deserialize_CLIENT_Representation+0x5a>

080122c8 <uxr_serialize_AGENT_Representation>:
 80122c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122cc:	2204      	movs	r2, #4
 80122ce:	460c      	mov	r4, r1
 80122d0:	4605      	mov	r5, r0
 80122d2:	f7fb fa73 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 80122d6:	2202      	movs	r2, #2
 80122d8:	4606      	mov	r6, r0
 80122da:	1d21      	adds	r1, r4, #4
 80122dc:	4628      	mov	r0, r5
 80122de:	f7fb fa6d 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 80122e2:	2202      	movs	r2, #2
 80122e4:	1da1      	adds	r1, r4, #6
 80122e6:	4006      	ands	r6, r0
 80122e8:	4628      	mov	r0, r5
 80122ea:	f7fb fa67 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 80122ee:	4603      	mov	r3, r0
 80122f0:	7a21      	ldrb	r1, [r4, #8]
 80122f2:	4628      	mov	r0, r5
 80122f4:	b2f6      	uxtb	r6, r6
 80122f6:	401e      	ands	r6, r3
 80122f8:	f7fb fdd6 	bl	800dea8 <ucdr_serialize_bool>
 80122fc:	7a23      	ldrb	r3, [r4, #8]
 80122fe:	ea00 0706 	and.w	r7, r0, r6
 8012302:	b913      	cbnz	r3, 801230a <uxr_serialize_AGENT_Representation+0x42>
 8012304:	4638      	mov	r0, r7
 8012306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801230a:	4628      	mov	r0, r5
 801230c:	68e1      	ldr	r1, [r4, #12]
 801230e:	f7fc f813 	bl	800e338 <ucdr_serialize_uint32_t>
 8012312:	68e3      	ldr	r3, [r4, #12]
 8012314:	b313      	cbz	r3, 801235c <uxr_serialize_AGENT_Representation+0x94>
 8012316:	b1e8      	cbz	r0, 8012354 <uxr_serialize_AGENT_Representation+0x8c>
 8012318:	46a0      	mov	r8, r4
 801231a:	f04f 0900 	mov.w	r9, #0
 801231e:	e002      	b.n	8012326 <uxr_serialize_AGENT_Representation+0x5e>
 8012320:	f108 0808 	add.w	r8, r8, #8
 8012324:	b1b3      	cbz	r3, 8012354 <uxr_serialize_AGENT_Representation+0x8c>
 8012326:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801232a:	4628      	mov	r0, r5
 801232c:	f003 ff3a 	bl	80161a4 <ucdr_serialize_string>
 8012330:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012334:	4606      	mov	r6, r0
 8012336:	4628      	mov	r0, r5
 8012338:	f003 ff34 	bl	80161a4 <ucdr_serialize_string>
 801233c:	68e2      	ldr	r2, [r4, #12]
 801233e:	f109 0901 	add.w	r9, r9, #1
 8012342:	ea06 0300 	and.w	r3, r6, r0
 8012346:	4591      	cmp	r9, r2
 8012348:	b2db      	uxtb	r3, r3
 801234a:	d3e9      	bcc.n	8012320 <uxr_serialize_AGENT_Representation+0x58>
 801234c:	401f      	ands	r7, r3
 801234e:	4638      	mov	r0, r7
 8012350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012354:	2700      	movs	r7, #0
 8012356:	4638      	mov	r0, r7
 8012358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235c:	4007      	ands	r7, r0
 801235e:	e7d1      	b.n	8012304 <uxr_serialize_AGENT_Representation+0x3c>

08012360 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012360:	b570      	push	{r4, r5, r6, lr}
 8012362:	460d      	mov	r5, r1
 8012364:	7809      	ldrb	r1, [r1, #0]
 8012366:	4606      	mov	r6, r0
 8012368:	f7fb fd9e 	bl	800dea8 <ucdr_serialize_bool>
 801236c:	782b      	ldrb	r3, [r5, #0]
 801236e:	4604      	mov	r4, r0
 8012370:	b94b      	cbnz	r3, 8012386 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012372:	4630      	mov	r0, r6
 8012374:	7a29      	ldrb	r1, [r5, #8]
 8012376:	f7fb fd97 	bl	800dea8 <ucdr_serialize_bool>
 801237a:	7a2b      	ldrb	r3, [r5, #8]
 801237c:	4004      	ands	r4, r0
 801237e:	b2e4      	uxtb	r4, r4
 8012380:	b943      	cbnz	r3, 8012394 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012382:	4620      	mov	r0, r4
 8012384:	bd70      	pop	{r4, r5, r6, pc}
 8012386:	4630      	mov	r0, r6
 8012388:	6869      	ldr	r1, [r5, #4]
 801238a:	f003 ff0b 	bl	80161a4 <ucdr_serialize_string>
 801238e:	4004      	ands	r4, r0
 8012390:	b2e4      	uxtb	r4, r4
 8012392:	e7ee      	b.n	8012372 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012394:	4630      	mov	r0, r6
 8012396:	68e9      	ldr	r1, [r5, #12]
 8012398:	f003 ff04 	bl	80161a4 <ucdr_serialize_string>
 801239c:	4004      	ands	r4, r0
 801239e:	4620      	mov	r0, r4
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	bf00      	nop

080123a4 <uxr_serialize_OBJK_Topic_Binary>:
 80123a4:	b570      	push	{r4, r5, r6, lr}
 80123a6:	460d      	mov	r5, r1
 80123a8:	6809      	ldr	r1, [r1, #0]
 80123aa:	4606      	mov	r6, r0
 80123ac:	f003 fefa 	bl	80161a4 <ucdr_serialize_string>
 80123b0:	7929      	ldrb	r1, [r5, #4]
 80123b2:	4604      	mov	r4, r0
 80123b4:	4630      	mov	r0, r6
 80123b6:	f7fb fd77 	bl	800dea8 <ucdr_serialize_bool>
 80123ba:	792b      	ldrb	r3, [r5, #4]
 80123bc:	4004      	ands	r4, r0
 80123be:	b2e4      	uxtb	r4, r4
 80123c0:	b943      	cbnz	r3, 80123d4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80123c2:	4630      	mov	r0, r6
 80123c4:	7b29      	ldrb	r1, [r5, #12]
 80123c6:	f7fb fd6f 	bl	800dea8 <ucdr_serialize_bool>
 80123ca:	7b2b      	ldrb	r3, [r5, #12]
 80123cc:	4004      	ands	r4, r0
 80123ce:	b93b      	cbnz	r3, 80123e0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80123d0:	4620      	mov	r0, r4
 80123d2:	bd70      	pop	{r4, r5, r6, pc}
 80123d4:	4630      	mov	r0, r6
 80123d6:	68a9      	ldr	r1, [r5, #8]
 80123d8:	f003 fee4 	bl	80161a4 <ucdr_serialize_string>
 80123dc:	4004      	ands	r4, r0
 80123de:	e7f0      	b.n	80123c2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80123e0:	4630      	mov	r0, r6
 80123e2:	6929      	ldr	r1, [r5, #16]
 80123e4:	f003 fede 	bl	80161a4 <ucdr_serialize_string>
 80123e8:	4004      	ands	r4, r0
 80123ea:	b2e4      	uxtb	r4, r4
 80123ec:	4620      	mov	r0, r4
 80123ee:	bd70      	pop	{r4, r5, r6, pc}

080123f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	460c      	mov	r4, r1
 80123f6:	7809      	ldrb	r1, [r1, #0]
 80123f8:	4606      	mov	r6, r0
 80123fa:	f7fb fd55 	bl	800dea8 <ucdr_serialize_bool>
 80123fe:	7823      	ldrb	r3, [r4, #0]
 8012400:	4605      	mov	r5, r0
 8012402:	b96b      	cbnz	r3, 8012420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012404:	4630      	mov	r0, r6
 8012406:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801240a:	f7fb fd4d 	bl	800dea8 <ucdr_serialize_bool>
 801240e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012412:	4005      	ands	r5, r0
 8012414:	b2ed      	uxtb	r5, r5
 8012416:	2b00      	cmp	r3, #0
 8012418:	d169      	bne.n	80124ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801241a:	4628      	mov	r0, r5
 801241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012420:	4630      	mov	r0, r6
 8012422:	6861      	ldr	r1, [r4, #4]
 8012424:	f7fb ff88 	bl	800e338 <ucdr_serialize_uint32_t>
 8012428:	6863      	ldr	r3, [r4, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d06b      	beq.n	8012506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801242e:	2800      	cmp	r0, #0
 8012430:	d067      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012432:	4630      	mov	r0, r6
 8012434:	68a1      	ldr	r1, [r4, #8]
 8012436:	f003 feb5 	bl	80161a4 <ucdr_serialize_string>
 801243a:	6863      	ldr	r3, [r4, #4]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d953      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012440:	2800      	cmp	r0, #0
 8012442:	d05e      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012444:	4630      	mov	r0, r6
 8012446:	68e1      	ldr	r1, [r4, #12]
 8012448:	f003 feac 	bl	80161a4 <ucdr_serialize_string>
 801244c:	6863      	ldr	r3, [r4, #4]
 801244e:	2b02      	cmp	r3, #2
 8012450:	d94a      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012452:	2800      	cmp	r0, #0
 8012454:	d055      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012456:	4630      	mov	r0, r6
 8012458:	6921      	ldr	r1, [r4, #16]
 801245a:	f003 fea3 	bl	80161a4 <ucdr_serialize_string>
 801245e:	6863      	ldr	r3, [r4, #4]
 8012460:	2b03      	cmp	r3, #3
 8012462:	d941      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012464:	2800      	cmp	r0, #0
 8012466:	d04c      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012468:	4630      	mov	r0, r6
 801246a:	6961      	ldr	r1, [r4, #20]
 801246c:	f003 fe9a 	bl	80161a4 <ucdr_serialize_string>
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	2b04      	cmp	r3, #4
 8012474:	d938      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012476:	2800      	cmp	r0, #0
 8012478:	d043      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801247a:	4630      	mov	r0, r6
 801247c:	69a1      	ldr	r1, [r4, #24]
 801247e:	f003 fe91 	bl	80161a4 <ucdr_serialize_string>
 8012482:	6863      	ldr	r3, [r4, #4]
 8012484:	2b05      	cmp	r3, #5
 8012486:	d92f      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012488:	2800      	cmp	r0, #0
 801248a:	d03a      	beq.n	8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801248c:	4630      	mov	r0, r6
 801248e:	69e1      	ldr	r1, [r4, #28]
 8012490:	f003 fe88 	bl	80161a4 <ucdr_serialize_string>
 8012494:	6863      	ldr	r3, [r4, #4]
 8012496:	2b06      	cmp	r3, #6
 8012498:	d926      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801249a:	b390      	cbz	r0, 8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801249c:	4630      	mov	r0, r6
 801249e:	6a21      	ldr	r1, [r4, #32]
 80124a0:	f003 fe80 	bl	80161a4 <ucdr_serialize_string>
 80124a4:	6863      	ldr	r3, [r4, #4]
 80124a6:	2b07      	cmp	r3, #7
 80124a8:	d91e      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124aa:	b350      	cbz	r0, 8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124ac:	4630      	mov	r0, r6
 80124ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80124b0:	f003 fe78 	bl	80161a4 <ucdr_serialize_string>
 80124b4:	6863      	ldr	r3, [r4, #4]
 80124b6:	2b08      	cmp	r3, #8
 80124b8:	d916      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124ba:	b310      	cbz	r0, 8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124bc:	4630      	mov	r0, r6
 80124be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80124c0:	f003 fe70 	bl	80161a4 <ucdr_serialize_string>
 80124c4:	6863      	ldr	r3, [r4, #4]
 80124c6:	2b09      	cmp	r3, #9
 80124c8:	d90e      	bls.n	80124e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124ca:	b1d0      	cbz	r0, 8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124cc:	2709      	movs	r7, #9
 80124ce:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80124d2:	e000      	b.n	80124d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80124d4:	b1a8      	cbz	r0, 8012502 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124d6:	4630      	mov	r0, r6
 80124d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80124dc:	f003 fe62 	bl	80161a4 <ucdr_serialize_string>
 80124e0:	6862      	ldr	r2, [r4, #4]
 80124e2:	3701      	adds	r7, #1
 80124e4:	4297      	cmp	r7, r2
 80124e6:	d3f5      	bcc.n	80124d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80124e8:	4005      	ands	r5, r0
 80124ea:	b2ed      	uxtb	r5, r5
 80124ec:	e78a      	b.n	8012404 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80124ee:	4630      	mov	r0, r6
 80124f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80124f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80124f6:	f7fd f9e5 	bl	800f8c4 <ucdr_serialize_sequence_uint8_t>
 80124fa:	4005      	ands	r5, r0
 80124fc:	4628      	mov	r0, r5
 80124fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012502:	2500      	movs	r5, #0
 8012504:	e77e      	b.n	8012404 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012506:	4028      	ands	r0, r5
 8012508:	b2c5      	uxtb	r5, r0
 801250a:	e77b      	b.n	8012404 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801250c <uxr_serialize_OBJK_Publisher_Binary>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	460d      	mov	r5, r1
 8012510:	7809      	ldrb	r1, [r1, #0]
 8012512:	4606      	mov	r6, r0
 8012514:	f7fb fcc8 	bl	800dea8 <ucdr_serialize_bool>
 8012518:	782b      	ldrb	r3, [r5, #0]
 801251a:	4604      	mov	r4, r0
 801251c:	b94b      	cbnz	r3, 8012532 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801251e:	4630      	mov	r0, r6
 8012520:	7a29      	ldrb	r1, [r5, #8]
 8012522:	f7fb fcc1 	bl	800dea8 <ucdr_serialize_bool>
 8012526:	7a2b      	ldrb	r3, [r5, #8]
 8012528:	4004      	ands	r4, r0
 801252a:	b2e4      	uxtb	r4, r4
 801252c:	b943      	cbnz	r3, 8012540 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801252e:	4620      	mov	r0, r4
 8012530:	bd70      	pop	{r4, r5, r6, pc}
 8012532:	4630      	mov	r0, r6
 8012534:	6869      	ldr	r1, [r5, #4]
 8012536:	f003 fe35 	bl	80161a4 <ucdr_serialize_string>
 801253a:	4004      	ands	r4, r0
 801253c:	b2e4      	uxtb	r4, r4
 801253e:	e7ee      	b.n	801251e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012540:	4630      	mov	r0, r6
 8012542:	f105 010c 	add.w	r1, r5, #12
 8012546:	f7ff ff53 	bl	80123f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801254a:	4004      	ands	r4, r0
 801254c:	4620      	mov	r0, r4
 801254e:	bd70      	pop	{r4, r5, r6, pc}

08012550 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012554:	460c      	mov	r4, r1
 8012556:	7809      	ldrb	r1, [r1, #0]
 8012558:	4606      	mov	r6, r0
 801255a:	f7fb fca5 	bl	800dea8 <ucdr_serialize_bool>
 801255e:	7823      	ldrb	r3, [r4, #0]
 8012560:	4605      	mov	r5, r0
 8012562:	b96b      	cbnz	r3, 8012580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012564:	4630      	mov	r0, r6
 8012566:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801256a:	f7fb fc9d 	bl	800dea8 <ucdr_serialize_bool>
 801256e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012572:	4005      	ands	r5, r0
 8012574:	b2ed      	uxtb	r5, r5
 8012576:	2b00      	cmp	r3, #0
 8012578:	d169      	bne.n	801264e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801257a:	4628      	mov	r0, r5
 801257c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012580:	4630      	mov	r0, r6
 8012582:	6861      	ldr	r1, [r4, #4]
 8012584:	f7fb fed8 	bl	800e338 <ucdr_serialize_uint32_t>
 8012588:	6863      	ldr	r3, [r4, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d06b      	beq.n	8012666 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801258e:	2800      	cmp	r0, #0
 8012590:	d067      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012592:	4630      	mov	r0, r6
 8012594:	68a1      	ldr	r1, [r4, #8]
 8012596:	f003 fe05 	bl	80161a4 <ucdr_serialize_string>
 801259a:	6863      	ldr	r3, [r4, #4]
 801259c:	2b01      	cmp	r3, #1
 801259e:	d953      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	d05e      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125a4:	4630      	mov	r0, r6
 80125a6:	68e1      	ldr	r1, [r4, #12]
 80125a8:	f003 fdfc 	bl	80161a4 <ucdr_serialize_string>
 80125ac:	6863      	ldr	r3, [r4, #4]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d94a      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d055      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125b6:	4630      	mov	r0, r6
 80125b8:	6921      	ldr	r1, [r4, #16]
 80125ba:	f003 fdf3 	bl	80161a4 <ucdr_serialize_string>
 80125be:	6863      	ldr	r3, [r4, #4]
 80125c0:	2b03      	cmp	r3, #3
 80125c2:	d941      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d04c      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125c8:	4630      	mov	r0, r6
 80125ca:	6961      	ldr	r1, [r4, #20]
 80125cc:	f003 fdea 	bl	80161a4 <ucdr_serialize_string>
 80125d0:	6863      	ldr	r3, [r4, #4]
 80125d2:	2b04      	cmp	r3, #4
 80125d4:	d938      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d043      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125da:	4630      	mov	r0, r6
 80125dc:	69a1      	ldr	r1, [r4, #24]
 80125de:	f003 fde1 	bl	80161a4 <ucdr_serialize_string>
 80125e2:	6863      	ldr	r3, [r4, #4]
 80125e4:	2b05      	cmp	r3, #5
 80125e6:	d92f      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d03a      	beq.n	8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125ec:	4630      	mov	r0, r6
 80125ee:	69e1      	ldr	r1, [r4, #28]
 80125f0:	f003 fdd8 	bl	80161a4 <ucdr_serialize_string>
 80125f4:	6863      	ldr	r3, [r4, #4]
 80125f6:	2b06      	cmp	r3, #6
 80125f8:	d926      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80125fa:	b390      	cbz	r0, 8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80125fc:	4630      	mov	r0, r6
 80125fe:	6a21      	ldr	r1, [r4, #32]
 8012600:	f003 fdd0 	bl	80161a4 <ucdr_serialize_string>
 8012604:	6863      	ldr	r3, [r4, #4]
 8012606:	2b07      	cmp	r3, #7
 8012608:	d91e      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801260a:	b350      	cbz	r0, 8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801260c:	4630      	mov	r0, r6
 801260e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012610:	f003 fdc8 	bl	80161a4 <ucdr_serialize_string>
 8012614:	6863      	ldr	r3, [r4, #4]
 8012616:	2b08      	cmp	r3, #8
 8012618:	d916      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801261a:	b310      	cbz	r0, 8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801261c:	4630      	mov	r0, r6
 801261e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012620:	f003 fdc0 	bl	80161a4 <ucdr_serialize_string>
 8012624:	6863      	ldr	r3, [r4, #4]
 8012626:	2b09      	cmp	r3, #9
 8012628:	d90e      	bls.n	8012648 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801262a:	b1d0      	cbz	r0, 8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801262c:	2709      	movs	r7, #9
 801262e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012632:	e000      	b.n	8012636 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012634:	b1a8      	cbz	r0, 8012662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012636:	4630      	mov	r0, r6
 8012638:	f858 1b04 	ldr.w	r1, [r8], #4
 801263c:	f003 fdb2 	bl	80161a4 <ucdr_serialize_string>
 8012640:	6862      	ldr	r2, [r4, #4]
 8012642:	3701      	adds	r7, #1
 8012644:	4297      	cmp	r7, r2
 8012646:	d3f5      	bcc.n	8012634 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012648:	4005      	ands	r5, r0
 801264a:	b2ed      	uxtb	r5, r5
 801264c:	e78a      	b.n	8012564 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801264e:	4630      	mov	r0, r6
 8012650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012652:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012656:	f7fd f935 	bl	800f8c4 <ucdr_serialize_sequence_uint8_t>
 801265a:	4005      	ands	r5, r0
 801265c:	4628      	mov	r0, r5
 801265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012662:	2500      	movs	r5, #0
 8012664:	e77e      	b.n	8012564 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012666:	4028      	ands	r0, r5
 8012668:	b2c5      	uxtb	r5, r0
 801266a:	e77b      	b.n	8012564 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801266c <uxr_serialize_OBJK_Subscriber_Binary>:
 801266c:	b570      	push	{r4, r5, r6, lr}
 801266e:	460d      	mov	r5, r1
 8012670:	7809      	ldrb	r1, [r1, #0]
 8012672:	4606      	mov	r6, r0
 8012674:	f7fb fc18 	bl	800dea8 <ucdr_serialize_bool>
 8012678:	782b      	ldrb	r3, [r5, #0]
 801267a:	4604      	mov	r4, r0
 801267c:	b94b      	cbnz	r3, 8012692 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801267e:	4630      	mov	r0, r6
 8012680:	7a29      	ldrb	r1, [r5, #8]
 8012682:	f7fb fc11 	bl	800dea8 <ucdr_serialize_bool>
 8012686:	7a2b      	ldrb	r3, [r5, #8]
 8012688:	4004      	ands	r4, r0
 801268a:	b2e4      	uxtb	r4, r4
 801268c:	b943      	cbnz	r3, 80126a0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801268e:	4620      	mov	r0, r4
 8012690:	bd70      	pop	{r4, r5, r6, pc}
 8012692:	4630      	mov	r0, r6
 8012694:	6869      	ldr	r1, [r5, #4]
 8012696:	f003 fd85 	bl	80161a4 <ucdr_serialize_string>
 801269a:	4004      	ands	r4, r0
 801269c:	b2e4      	uxtb	r4, r4
 801269e:	e7ee      	b.n	801267e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80126a0:	4630      	mov	r0, r6
 80126a2:	f105 010c 	add.w	r1, r5, #12
 80126a6:	f7ff ff53 	bl	8012550 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80126aa:	4004      	ands	r4, r0
 80126ac:	4620      	mov	r0, r4
 80126ae:	bd70      	pop	{r4, r5, r6, pc}

080126b0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80126b0:	b570      	push	{r4, r5, r6, lr}
 80126b2:	460d      	mov	r5, r1
 80126b4:	8809      	ldrh	r1, [r1, #0]
 80126b6:	4606      	mov	r6, r0
 80126b8:	f7fb fc50 	bl	800df5c <ucdr_serialize_uint16_t>
 80126bc:	78a9      	ldrb	r1, [r5, #2]
 80126be:	4604      	mov	r4, r0
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7fb fbf1 	bl	800dea8 <ucdr_serialize_bool>
 80126c6:	78ab      	ldrb	r3, [r5, #2]
 80126c8:	4004      	ands	r4, r0
 80126ca:	b2e4      	uxtb	r4, r4
 80126cc:	b9b3      	cbnz	r3, 80126fc <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 80126ce:	4630      	mov	r0, r6
 80126d0:	79a9      	ldrb	r1, [r5, #6]
 80126d2:	f7fb fbe9 	bl	800dea8 <ucdr_serialize_bool>
 80126d6:	79ab      	ldrb	r3, [r5, #6]
 80126d8:	4004      	ands	r4, r0
 80126da:	bb33      	cbnz	r3, 801272a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 80126dc:	4630      	mov	r0, r6
 80126de:	7b29      	ldrb	r1, [r5, #12]
 80126e0:	f7fb fbe2 	bl	800dea8 <ucdr_serialize_bool>
 80126e4:	7b2b      	ldrb	r3, [r5, #12]
 80126e6:	4004      	ands	r4, r0
 80126e8:	b9c3      	cbnz	r3, 801271c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 80126ea:	4630      	mov	r0, r6
 80126ec:	7d29      	ldrb	r1, [r5, #20]
 80126ee:	f7fb fbdb 	bl	800dea8 <ucdr_serialize_bool>
 80126f2:	7d2b      	ldrb	r3, [r5, #20]
 80126f4:	4004      	ands	r4, r0
 80126f6:	b93b      	cbnz	r3, 8012708 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 80126f8:	4620      	mov	r0, r4
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	4630      	mov	r0, r6
 80126fe:	88a9      	ldrh	r1, [r5, #4]
 8012700:	f7fb fc2c 	bl	800df5c <ucdr_serialize_uint16_t>
 8012704:	4004      	ands	r4, r0
 8012706:	e7e2      	b.n	80126ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8012708:	4630      	mov	r0, r6
 801270a:	69aa      	ldr	r2, [r5, #24]
 801270c:	f105 011c 	add.w	r1, r5, #28
 8012710:	f7fd f8d8 	bl	800f8c4 <ucdr_serialize_sequence_uint8_t>
 8012714:	4004      	ands	r4, r0
 8012716:	b2e4      	uxtb	r4, r4
 8012718:	4620      	mov	r0, r4
 801271a:	bd70      	pop	{r4, r5, r6, pc}
 801271c:	4630      	mov	r0, r6
 801271e:	6929      	ldr	r1, [r5, #16]
 8012720:	f7fb fe0a 	bl	800e338 <ucdr_serialize_uint32_t>
 8012724:	4004      	ands	r4, r0
 8012726:	b2e4      	uxtb	r4, r4
 8012728:	e7df      	b.n	80126ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 801272a:	4630      	mov	r0, r6
 801272c:	68a9      	ldr	r1, [r5, #8]
 801272e:	f7fb fe03 	bl	800e338 <ucdr_serialize_uint32_t>
 8012732:	4004      	ands	r4, r0
 8012734:	b2e4      	uxtb	r4, r4
 8012736:	e7d1      	b.n	80126dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08012738 <uxr_serialize_OBJK_DataReader_Binary>:
 8012738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273a:	2202      	movs	r2, #2
 801273c:	460c      	mov	r4, r1
 801273e:	4606      	mov	r6, r0
 8012740:	f7fb f83c 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012744:	78a1      	ldrb	r1, [r4, #2]
 8012746:	4605      	mov	r5, r0
 8012748:	4630      	mov	r0, r6
 801274a:	f7fb fbad 	bl	800dea8 <ucdr_serialize_bool>
 801274e:	78a3      	ldrb	r3, [r4, #2]
 8012750:	4005      	ands	r5, r0
 8012752:	b2ed      	uxtb	r5, r5
 8012754:	b90b      	cbnz	r3, 801275a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012756:	4628      	mov	r0, r5
 8012758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801275a:	f104 0108 	add.w	r1, r4, #8
 801275e:	4630      	mov	r0, r6
 8012760:	f7ff ffa6 	bl	80126b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012764:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012768:	4607      	mov	r7, r0
 801276a:	4630      	mov	r0, r6
 801276c:	f7fb fb9c 	bl	800dea8 <ucdr_serialize_bool>
 8012770:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012774:	4007      	ands	r7, r0
 8012776:	b2ff      	uxtb	r7, r7
 8012778:	b95b      	cbnz	r3, 8012792 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801277a:	4630      	mov	r0, r6
 801277c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012780:	f7fb fb92 	bl	800dea8 <ucdr_serialize_bool>
 8012784:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012788:	4007      	ands	r7, r0
 801278a:	b94b      	cbnz	r3, 80127a0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801278c:	403d      	ands	r5, r7
 801278e:	4628      	mov	r0, r5
 8012790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012792:	4630      	mov	r0, r6
 8012794:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012798:	f7fc f824 	bl	800e7e4 <ucdr_serialize_uint64_t>
 801279c:	4007      	ands	r7, r0
 801279e:	e7ec      	b.n	801277a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80127a0:	4630      	mov	r0, r6
 80127a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80127a4:	f003 fcfe 	bl	80161a4 <ucdr_serialize_string>
 80127a8:	4007      	ands	r7, r0
 80127aa:	b2ff      	uxtb	r7, r7
 80127ac:	e7ee      	b.n	801278c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80127ae:	bf00      	nop

080127b0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80127b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127b2:	2202      	movs	r2, #2
 80127b4:	460d      	mov	r5, r1
 80127b6:	4606      	mov	r6, r0
 80127b8:	f7fb f800 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 80127bc:	78a9      	ldrb	r1, [r5, #2]
 80127be:	4604      	mov	r4, r0
 80127c0:	4630      	mov	r0, r6
 80127c2:	f7fb fb71 	bl	800dea8 <ucdr_serialize_bool>
 80127c6:	78ab      	ldrb	r3, [r5, #2]
 80127c8:	4004      	ands	r4, r0
 80127ca:	b2e4      	uxtb	r4, r4
 80127cc:	b90b      	cbnz	r3, 80127d2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80127ce:	4620      	mov	r0, r4
 80127d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d2:	f105 0108 	add.w	r1, r5, #8
 80127d6:	4630      	mov	r0, r6
 80127d8:	f7ff ff6a 	bl	80126b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80127dc:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80127e0:	4607      	mov	r7, r0
 80127e2:	4630      	mov	r0, r6
 80127e4:	f7fb fb60 	bl	800dea8 <ucdr_serialize_bool>
 80127e8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80127ec:	4007      	ands	r7, r0
 80127ee:	b2ff      	uxtb	r7, r7
 80127f0:	b913      	cbnz	r3, 80127f8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80127f2:	403c      	ands	r4, r7
 80127f4:	4620      	mov	r0, r4
 80127f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f8:	4630      	mov	r0, r6
 80127fa:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80127fe:	f7fb fff1 	bl	800e7e4 <ucdr_serialize_uint64_t>
 8012802:	4007      	ands	r7, r0
 8012804:	e7f5      	b.n	80127f2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012806:	bf00      	nop

08012808 <uxr_deserialize_ObjectVariant>:
 8012808:	b570      	push	{r4, r5, r6, lr}
 801280a:	4605      	mov	r5, r0
 801280c:	460e      	mov	r6, r1
 801280e:	f7fb fb8f 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012812:	b320      	cbz	r0, 801285e <uxr_deserialize_ObjectVariant+0x56>
 8012814:	7833      	ldrb	r3, [r6, #0]
 8012816:	4604      	mov	r4, r0
 8012818:	3b01      	subs	r3, #1
 801281a:	2b0d      	cmp	r3, #13
 801281c:	d81d      	bhi.n	801285a <uxr_deserialize_ObjectVariant+0x52>
 801281e:	e8df f003 	tbb	[pc, r3]
 8012822:	2107      	.short	0x2107
 8012824:	21214b4b 	.word	0x21214b4b
 8012828:	381c2121 	.word	0x381c2121
 801282c:	876a3838 	.word	0x876a3838
 8012830:	4628      	mov	r0, r5
 8012832:	1d31      	adds	r1, r6, #4
 8012834:	f7fb fb7c 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012838:	4604      	mov	r4, r0
 801283a:	b138      	cbz	r0, 801284c <uxr_deserialize_ObjectVariant+0x44>
 801283c:	7933      	ldrb	r3, [r6, #4]
 801283e:	2b02      	cmp	r3, #2
 8012840:	d07c      	beq.n	801293c <uxr_deserialize_ObjectVariant+0x134>
 8012842:	2b03      	cmp	r3, #3
 8012844:	f000 8082 	beq.w	801294c <uxr_deserialize_ObjectVariant+0x144>
 8012848:	2b01      	cmp	r3, #1
 801284a:	d077      	beq.n	801293c <uxr_deserialize_ObjectVariant+0x134>
 801284c:	4628      	mov	r0, r5
 801284e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012852:	f7fc f943 	bl	800eadc <ucdr_deserialize_int16_t>
 8012856:	4004      	ands	r4, r0
 8012858:	b2e4      	uxtb	r4, r4
 801285a:	4620      	mov	r0, r4
 801285c:	bd70      	pop	{r4, r5, r6, pc}
 801285e:	2400      	movs	r4, #0
 8012860:	4620      	mov	r0, r4
 8012862:	bd70      	pop	{r4, r5, r6, pc}
 8012864:	4628      	mov	r0, r5
 8012866:	1d31      	adds	r1, r6, #4
 8012868:	f7fb fb62 	bl	800df30 <ucdr_deserialize_uint8_t>
 801286c:	4604      	mov	r4, r0
 801286e:	b130      	cbz	r0, 801287e <uxr_deserialize_ObjectVariant+0x76>
 8012870:	7933      	ldrb	r3, [r6, #4]
 8012872:	2b02      	cmp	r3, #2
 8012874:	d037      	beq.n	80128e6 <uxr_deserialize_ObjectVariant+0xde>
 8012876:	2b03      	cmp	r3, #3
 8012878:	d02a      	beq.n	80128d0 <uxr_deserialize_ObjectVariant+0xc8>
 801287a:	2b01      	cmp	r3, #1
 801287c:	d033      	beq.n	80128e6 <uxr_deserialize_ObjectVariant+0xde>
 801287e:	4628      	mov	r0, r5
 8012880:	2202      	movs	r2, #2
 8012882:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012886:	f7fa fffd 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801288a:	4004      	ands	r4, r0
 801288c:	b2e4      	uxtb	r4, r4
 801288e:	4620      	mov	r0, r4
 8012890:	bd70      	pop	{r4, r5, r6, pc}
 8012892:	4628      	mov	r0, r5
 8012894:	1d31      	adds	r1, r6, #4
 8012896:	f7fb fb4b 	bl	800df30 <ucdr_deserialize_uint8_t>
 801289a:	2800      	cmp	r0, #0
 801289c:	d0df      	beq.n	801285e <uxr_deserialize_ObjectVariant+0x56>
 801289e:	7933      	ldrb	r3, [r6, #4]
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d001      	beq.n	80128a8 <uxr_deserialize_ObjectVariant+0xa0>
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	d1d8      	bne.n	801285a <uxr_deserialize_ObjectVariant+0x52>
 80128a8:	4628      	mov	r0, r5
 80128aa:	68b1      	ldr	r1, [r6, #8]
 80128ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128b4:	f003 bc84 	b.w	80161c0 <ucdr_deserialize_string>
 80128b8:	4628      	mov	r0, r5
 80128ba:	1d31      	adds	r1, r6, #4
 80128bc:	f7fb fb38 	bl	800df30 <ucdr_deserialize_uint8_t>
 80128c0:	4604      	mov	r4, r0
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d0db      	beq.n	801287e <uxr_deserialize_ObjectVariant+0x76>
 80128c6:	7933      	ldrb	r3, [r6, #4]
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	d00c      	beq.n	80128e6 <uxr_deserialize_ObjectVariant+0xde>
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	d1d6      	bne.n	801287e <uxr_deserialize_ObjectVariant+0x76>
 80128d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128d4:	4628      	mov	r0, r5
 80128d6:	f106 0308 	add.w	r3, r6, #8
 80128da:	f106 010c 	add.w	r1, r6, #12
 80128de:	f7fd f803 	bl	800f8e8 <ucdr_deserialize_sequence_uint8_t>
 80128e2:	4604      	mov	r4, r0
 80128e4:	e7cb      	b.n	801287e <uxr_deserialize_ObjectVariant+0x76>
 80128e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128ea:	4628      	mov	r0, r5
 80128ec:	68b1      	ldr	r1, [r6, #8]
 80128ee:	f003 fc67 	bl	80161c0 <ucdr_deserialize_string>
 80128f2:	4604      	mov	r4, r0
 80128f4:	e7c3      	b.n	801287e <uxr_deserialize_ObjectVariant+0x76>
 80128f6:	2204      	movs	r2, #4
 80128f8:	4628      	mov	r0, r5
 80128fa:	18b1      	adds	r1, r6, r2
 80128fc:	f7fa ffc2 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012900:	2202      	movs	r2, #2
 8012902:	4604      	mov	r4, r0
 8012904:	f106 0108 	add.w	r1, r6, #8
 8012908:	4628      	mov	r0, r5
 801290a:	f7fa ffbb 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801290e:	2202      	movs	r2, #2
 8012910:	4004      	ands	r4, r0
 8012912:	f106 010a 	add.w	r1, r6, #10
 8012916:	4628      	mov	r0, r5
 8012918:	f7fa ffb4 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801291c:	4603      	mov	r3, r0
 801291e:	b2e4      	uxtb	r4, r4
 8012920:	4628      	mov	r0, r5
 8012922:	f106 010c 	add.w	r1, r6, #12
 8012926:	401c      	ands	r4, r3
 8012928:	f7fb fad4 	bl	800ded4 <ucdr_deserialize_bool>
 801292c:	4004      	ands	r4, r0
 801292e:	e794      	b.n	801285a <uxr_deserialize_ObjectVariant+0x52>
 8012930:	4628      	mov	r0, r5
 8012932:	1d31      	adds	r1, r6, #4
 8012934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012938:	f7ff bc62 	b.w	8012200 <uxr_deserialize_CLIENT_Representation>
 801293c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012940:	4628      	mov	r0, r5
 8012942:	68b1      	ldr	r1, [r6, #8]
 8012944:	f003 fc3c 	bl	80161c0 <ucdr_deserialize_string>
 8012948:	4604      	mov	r4, r0
 801294a:	e77f      	b.n	801284c <uxr_deserialize_ObjectVariant+0x44>
 801294c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012950:	4628      	mov	r0, r5
 8012952:	f106 0308 	add.w	r3, r6, #8
 8012956:	f106 010c 	add.w	r1, r6, #12
 801295a:	f7fc ffc5 	bl	800f8e8 <ucdr_deserialize_sequence_uint8_t>
 801295e:	4604      	mov	r4, r0
 8012960:	e774      	b.n	801284c <uxr_deserialize_ObjectVariant+0x44>
 8012962:	bf00      	nop

08012964 <uxr_deserialize_BaseObjectRequest>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	2202      	movs	r2, #2
 8012968:	4605      	mov	r5, r0
 801296a:	460e      	mov	r6, r1
 801296c:	f7fa ff8a 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012970:	2202      	movs	r2, #2
 8012972:	4604      	mov	r4, r0
 8012974:	1cb1      	adds	r1, r6, #2
 8012976:	4628      	mov	r0, r5
 8012978:	f7fa ff84 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801297c:	4020      	ands	r0, r4
 801297e:	b2c0      	uxtb	r0, r0
 8012980:	bd70      	pop	{r4, r5, r6, pc}
 8012982:	bf00      	nop

08012984 <uxr_deserialize_BaseObjectReply>:
 8012984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	2202      	movs	r2, #2
 801298a:	4606      	mov	r6, r0
 801298c:	460f      	mov	r7, r1
 801298e:	f7fa ff79 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012992:	2202      	movs	r2, #2
 8012994:	1cb9      	adds	r1, r7, #2
 8012996:	4605      	mov	r5, r0
 8012998:	4630      	mov	r0, r6
 801299a:	f7fa ff73 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801299e:	1d39      	adds	r1, r7, #4
 80129a0:	4680      	mov	r8, r0
 80129a2:	4630      	mov	r0, r6
 80129a4:	f7fb fac4 	bl	800df30 <ucdr_deserialize_uint8_t>
 80129a8:	1d79      	adds	r1, r7, #5
 80129aa:	4604      	mov	r4, r0
 80129ac:	4630      	mov	r0, r6
 80129ae:	f7fb fabf 	bl	800df30 <ucdr_deserialize_uint8_t>
 80129b2:	ea05 0508 	and.w	r5, r5, r8
 80129b6:	402c      	ands	r4, r5
 80129b8:	4020      	ands	r0, r4
 80129ba:	b2c0      	uxtb	r0, r0
 80129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129c0 <uxr_serialize_ReadSpecification>:
 80129c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c2:	460d      	mov	r5, r1
 80129c4:	7809      	ldrb	r1, [r1, #0]
 80129c6:	4606      	mov	r6, r0
 80129c8:	f7fb fa9c 	bl	800df04 <ucdr_serialize_uint8_t>
 80129cc:	7869      	ldrb	r1, [r5, #1]
 80129ce:	4604      	mov	r4, r0
 80129d0:	4630      	mov	r0, r6
 80129d2:	f7fb fa97 	bl	800df04 <ucdr_serialize_uint8_t>
 80129d6:	78a9      	ldrb	r1, [r5, #2]
 80129d8:	4004      	ands	r4, r0
 80129da:	4630      	mov	r0, r6
 80129dc:	f7fb fa64 	bl	800dea8 <ucdr_serialize_bool>
 80129e0:	78ab      	ldrb	r3, [r5, #2]
 80129e2:	b2e4      	uxtb	r4, r4
 80129e4:	4004      	ands	r4, r0
 80129e6:	b943      	cbnz	r3, 80129fa <uxr_serialize_ReadSpecification+0x3a>
 80129e8:	4630      	mov	r0, r6
 80129ea:	7a29      	ldrb	r1, [r5, #8]
 80129ec:	f7fb fa5c 	bl	800dea8 <ucdr_serialize_bool>
 80129f0:	7a2b      	ldrb	r3, [r5, #8]
 80129f2:	4004      	ands	r4, r0
 80129f4:	b93b      	cbnz	r3, 8012a06 <uxr_serialize_ReadSpecification+0x46>
 80129f6:	4620      	mov	r0, r4
 80129f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129fa:	4630      	mov	r0, r6
 80129fc:	6869      	ldr	r1, [r5, #4]
 80129fe:	f003 fbd1 	bl	80161a4 <ucdr_serialize_string>
 8012a02:	4004      	ands	r4, r0
 8012a04:	e7f0      	b.n	80129e8 <uxr_serialize_ReadSpecification+0x28>
 8012a06:	8969      	ldrh	r1, [r5, #10]
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7fb faa7 	bl	800df5c <ucdr_serialize_uint16_t>
 8012a0e:	89a9      	ldrh	r1, [r5, #12]
 8012a10:	4607      	mov	r7, r0
 8012a12:	4630      	mov	r0, r6
 8012a14:	f7fb faa2 	bl	800df5c <ucdr_serialize_uint16_t>
 8012a18:	89e9      	ldrh	r1, [r5, #14]
 8012a1a:	4007      	ands	r7, r0
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f7fb fa9d 	bl	800df5c <ucdr_serialize_uint16_t>
 8012a22:	8a29      	ldrh	r1, [r5, #16]
 8012a24:	4605      	mov	r5, r0
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7fb fa98 	bl	800df5c <ucdr_serialize_uint16_t>
 8012a2c:	b2ff      	uxtb	r7, r7
 8012a2e:	403c      	ands	r4, r7
 8012a30:	402c      	ands	r4, r5
 8012a32:	4004      	ands	r4, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a38 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012a38:	f7ff bb8c 	b.w	8012154 <uxr_serialize_CLIENT_Representation>

08012a3c <uxr_serialize_CREATE_Payload>:
 8012a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3e:	2202      	movs	r2, #2
 8012a40:	4606      	mov	r6, r0
 8012a42:	460d      	mov	r5, r1
 8012a44:	f7fa feba 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012a48:	1ca9      	adds	r1, r5, #2
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	2202      	movs	r2, #2
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7fa feb4 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012a54:	7929      	ldrb	r1, [r5, #4]
 8012a56:	4607      	mov	r7, r0
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7fb fa53 	bl	800df04 <ucdr_serialize_uint8_t>
 8012a5e:	b328      	cbz	r0, 8012aac <uxr_serialize_CREATE_Payload+0x70>
 8012a60:	792b      	ldrb	r3, [r5, #4]
 8012a62:	403c      	ands	r4, r7
 8012a64:	3b01      	subs	r3, #1
 8012a66:	b2e4      	uxtb	r4, r4
 8012a68:	2b0d      	cmp	r3, #13
 8012a6a:	d81d      	bhi.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012a6c:	e8df f003 	tbb	[pc, r3]
 8012a70:	32320753 	.word	0x32320753
 8012a74:	07070707 	.word	0x07070707
 8012a78:	2121211c 	.word	0x2121211c
 8012a7c:	684c      	.short	0x684c
 8012a7e:	4630      	mov	r0, r6
 8012a80:	7a29      	ldrb	r1, [r5, #8]
 8012a82:	f7fb fa3f 	bl	800df04 <ucdr_serialize_uint8_t>
 8012a86:	4607      	mov	r7, r0
 8012a88:	b130      	cbz	r0, 8012a98 <uxr_serialize_CREATE_Payload+0x5c>
 8012a8a:	7a2b      	ldrb	r3, [r5, #8]
 8012a8c:	2b02      	cmp	r3, #2
 8012a8e:	d035      	beq.n	8012afc <uxr_serialize_CREATE_Payload+0xc0>
 8012a90:	2b03      	cmp	r3, #3
 8012a92:	d02b      	beq.n	8012aec <uxr_serialize_CREATE_Payload+0xb0>
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d031      	beq.n	8012afc <uxr_serialize_CREATE_Payload+0xc0>
 8012a98:	4630      	mov	r0, r6
 8012a9a:	2202      	movs	r2, #2
 8012a9c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012aa0:	f7fa fe8c 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012aa4:	4038      	ands	r0, r7
 8012aa6:	4004      	ands	r4, r0
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aac:	2400      	movs	r4, #0
 8012aae:	4620      	mov	r0, r4
 8012ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	7a29      	ldrb	r1, [r5, #8]
 8012ab6:	f7fb fa25 	bl	800df04 <ucdr_serialize_uint8_t>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d0f6      	beq.n	8012aac <uxr_serialize_CREATE_Payload+0x70>
 8012abe:	7a2b      	ldrb	r3, [r5, #8]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d001      	beq.n	8012ac8 <uxr_serialize_CREATE_Payload+0x8c>
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d1ef      	bne.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012ac8:	4630      	mov	r0, r6
 8012aca:	68e9      	ldr	r1, [r5, #12]
 8012acc:	f003 fb6a 	bl	80161a4 <ucdr_serialize_string>
 8012ad0:	4004      	ands	r4, r0
 8012ad2:	e7e9      	b.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	7a29      	ldrb	r1, [r5, #8]
 8012ad8:	f7fb fa14 	bl	800df04 <ucdr_serialize_uint8_t>
 8012adc:	4607      	mov	r7, r0
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0da      	beq.n	8012a98 <uxr_serialize_CREATE_Payload+0x5c>
 8012ae2:	7a2b      	ldrb	r3, [r5, #8]
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	d009      	beq.n	8012afc <uxr_serialize_CREATE_Payload+0xc0>
 8012ae8:	2b03      	cmp	r3, #3
 8012aea:	d1d5      	bne.n	8012a98 <uxr_serialize_CREATE_Payload+0x5c>
 8012aec:	4630      	mov	r0, r6
 8012aee:	68ea      	ldr	r2, [r5, #12]
 8012af0:	f105 0110 	add.w	r1, r5, #16
 8012af4:	f7fc fee6 	bl	800f8c4 <ucdr_serialize_sequence_uint8_t>
 8012af8:	4607      	mov	r7, r0
 8012afa:	e7cd      	b.n	8012a98 <uxr_serialize_CREATE_Payload+0x5c>
 8012afc:	4630      	mov	r0, r6
 8012afe:	68e9      	ldr	r1, [r5, #12]
 8012b00:	f003 fb50 	bl	80161a4 <ucdr_serialize_string>
 8012b04:	4607      	mov	r7, r0
 8012b06:	e7c7      	b.n	8012a98 <uxr_serialize_CREATE_Payload+0x5c>
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f105 0108 	add.w	r1, r5, #8
 8012b0e:	f7ff fbdb 	bl	80122c8 <uxr_serialize_AGENT_Representation>
 8012b12:	4004      	ands	r4, r0
 8012b14:	e7c8      	b.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012b16:	4630      	mov	r0, r6
 8012b18:	7a29      	ldrb	r1, [r5, #8]
 8012b1a:	f7fb f9f3 	bl	800df04 <ucdr_serialize_uint8_t>
 8012b1e:	4607      	mov	r7, r0
 8012b20:	b130      	cbz	r0, 8012b30 <uxr_serialize_CREATE_Payload+0xf4>
 8012b22:	7a2b      	ldrb	r3, [r5, #8]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d012      	beq.n	8012b4e <uxr_serialize_CREATE_Payload+0x112>
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d016      	beq.n	8012b5a <uxr_serialize_CREATE_Payload+0x11e>
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d00e      	beq.n	8012b4e <uxr_serialize_CREATE_Payload+0x112>
 8012b30:	4630      	mov	r0, r6
 8012b32:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8012b36:	f7fb ff51 	bl	800e9dc <ucdr_serialize_int16_t>
 8012b3a:	4038      	ands	r0, r7
 8012b3c:	4004      	ands	r4, r0
 8012b3e:	e7b3      	b.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012b40:	4630      	mov	r0, r6
 8012b42:	f105 0108 	add.w	r1, r5, #8
 8012b46:	f7ff fb05 	bl	8012154 <uxr_serialize_CLIENT_Representation>
 8012b4a:	4004      	ands	r4, r0
 8012b4c:	e7ac      	b.n	8012aa8 <uxr_serialize_CREATE_Payload+0x6c>
 8012b4e:	4630      	mov	r0, r6
 8012b50:	68e9      	ldr	r1, [r5, #12]
 8012b52:	f003 fb27 	bl	80161a4 <ucdr_serialize_string>
 8012b56:	4607      	mov	r7, r0
 8012b58:	e7ea      	b.n	8012b30 <uxr_serialize_CREATE_Payload+0xf4>
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	68ea      	ldr	r2, [r5, #12]
 8012b5e:	f105 0110 	add.w	r1, r5, #16
 8012b62:	f7fc feaf 	bl	800f8c4 <ucdr_serialize_sequence_uint8_t>
 8012b66:	4607      	mov	r7, r0
 8012b68:	e7e2      	b.n	8012b30 <uxr_serialize_CREATE_Payload+0xf4>
 8012b6a:	bf00      	nop

08012b6c <uxr_serialize_DELETE_Payload>:
 8012b6c:	b570      	push	{r4, r5, r6, lr}
 8012b6e:	2202      	movs	r2, #2
 8012b70:	4605      	mov	r5, r0
 8012b72:	460e      	mov	r6, r1
 8012b74:	f7fa fe22 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012b78:	2202      	movs	r2, #2
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	1cb1      	adds	r1, r6, #2
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f7fa fe1c 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012b84:	4020      	ands	r0, r4
 8012b86:	b2c0      	uxtb	r0, r0
 8012b88:	bd70      	pop	{r4, r5, r6, pc}
 8012b8a:	bf00      	nop

08012b8c <uxr_deserialize_STATUS_AGENT_Payload>:
 8012b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b90:	4606      	mov	r6, r0
 8012b92:	460f      	mov	r7, r1
 8012b94:	f7fb f9cc 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012b98:	1c79      	adds	r1, r7, #1
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	f7fb f9c7 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012ba2:	1d39      	adds	r1, r7, #4
 8012ba4:	4682      	mov	sl, r0
 8012ba6:	2204      	movs	r2, #4
 8012ba8:	4630      	mov	r0, r6
 8012baa:	f7fa fe6b 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012bae:	f107 0108 	add.w	r1, r7, #8
 8012bb2:	4681      	mov	r9, r0
 8012bb4:	2202      	movs	r2, #2
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f7fa fe64 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012bbc:	2202      	movs	r2, #2
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	f107 010a 	add.w	r1, r7, #10
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f7fa fe5d 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012bca:	ea05 050a 	and.w	r5, r5, sl
 8012bce:	b2ec      	uxtb	r4, r5
 8012bd0:	f107 010c 	add.w	r1, r7, #12
 8012bd4:	4605      	mov	r5, r0
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f7fb f97c 	bl	800ded4 <ucdr_deserialize_bool>
 8012bdc:	ea04 0409 	and.w	r4, r4, r9
 8012be0:	ea08 0404 	and.w	r4, r8, r4
 8012be4:	4025      	ands	r5, r4
 8012be6:	4028      	ands	r0, r5
 8012be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012bec <uxr_deserialize_STATUS_Payload>:
 8012bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	f7fa fe45 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	1cb9      	adds	r1, r7, #2
 8012bfe:	4605      	mov	r5, r0
 8012c00:	4630      	mov	r0, r6
 8012c02:	f7fa fe3f 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012c06:	1d39      	adds	r1, r7, #4
 8012c08:	4680      	mov	r8, r0
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f7fb f990 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012c10:	1d79      	adds	r1, r7, #5
 8012c12:	4604      	mov	r4, r0
 8012c14:	4630      	mov	r0, r6
 8012c16:	f7fb f98b 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012c1a:	ea05 0508 	and.w	r5, r5, r8
 8012c1e:	402c      	ands	r4, r5
 8012c20:	4020      	ands	r0, r4
 8012c22:	b2c0      	uxtb	r0, r0
 8012c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c28 <uxr_serialize_READ_DATA_Payload>:
 8012c28:	b570      	push	{r4, r5, r6, lr}
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	4605      	mov	r5, r0
 8012c2e:	460e      	mov	r6, r1
 8012c30:	f7fa fdc4 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012c34:	2202      	movs	r2, #2
 8012c36:	1cb1      	adds	r1, r6, #2
 8012c38:	4604      	mov	r4, r0
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	f7fa fdbe 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012c40:	1d31      	adds	r1, r6, #4
 8012c42:	4004      	ands	r4, r0
 8012c44:	4628      	mov	r0, r5
 8012c46:	f7ff febb 	bl	80129c0 <uxr_serialize_ReadSpecification>
 8012c4a:	b2e4      	uxtb	r4, r4
 8012c4c:	4020      	ands	r0, r4
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}

08012c50 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012c50:	b570      	push	{r4, r5, r6, lr}
 8012c52:	2202      	movs	r2, #2
 8012c54:	4605      	mov	r5, r0
 8012c56:	460e      	mov	r6, r1
 8012c58:	f7fa fdb0 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012c5c:	2202      	movs	r2, #2
 8012c5e:	4604      	mov	r4, r0
 8012c60:	1cb1      	adds	r1, r6, #2
 8012c62:	4628      	mov	r0, r5
 8012c64:	f7fa fdaa 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012c68:	4020      	ands	r0, r4
 8012c6a:	b2c0      	uxtb	r0, r0
 8012c6c:	bd70      	pop	{r4, r5, r6, pc}
 8012c6e:	bf00      	nop

08012c70 <uxr_serialize_ACKNACK_Payload>:
 8012c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c72:	460f      	mov	r7, r1
 8012c74:	460e      	mov	r6, r1
 8012c76:	f837 1b02 	ldrh.w	r1, [r7], #2
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	f7fb f96e 	bl	800df5c <ucdr_serialize_uint16_t>
 8012c80:	4639      	mov	r1, r7
 8012c82:	2202      	movs	r2, #2
 8012c84:	4604      	mov	r4, r0
 8012c86:	4628      	mov	r0, r5
 8012c88:	f7fa fd98 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012c8c:	7931      	ldrb	r1, [r6, #4]
 8012c8e:	4004      	ands	r4, r0
 8012c90:	4628      	mov	r0, r5
 8012c92:	f7fb f937 	bl	800df04 <ucdr_serialize_uint8_t>
 8012c96:	b2e4      	uxtb	r4, r4
 8012c98:	4020      	ands	r0, r4
 8012c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c9c <uxr_deserialize_ACKNACK_Payload>:
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	460e      	mov	r6, r1
 8012ca2:	f7fb fa5b 	bl	800e15c <ucdr_deserialize_uint16_t>
 8012ca6:	2202      	movs	r2, #2
 8012ca8:	1cb1      	adds	r1, r6, #2
 8012caa:	4604      	mov	r4, r0
 8012cac:	4628      	mov	r0, r5
 8012cae:	f7fa fde9 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012cb2:	1d31      	adds	r1, r6, #4
 8012cb4:	4004      	ands	r4, r0
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	f7fb f93a 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012cbc:	b2e4      	uxtb	r4, r4
 8012cbe:	4020      	ands	r0, r4
 8012cc0:	bd70      	pop	{r4, r5, r6, pc}
 8012cc2:	bf00      	nop

08012cc4 <uxr_serialize_HEARTBEAT_Payload>:
 8012cc4:	b570      	push	{r4, r5, r6, lr}
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	8809      	ldrh	r1, [r1, #0]
 8012cca:	4606      	mov	r6, r0
 8012ccc:	f7fb f946 	bl	800df5c <ucdr_serialize_uint16_t>
 8012cd0:	8869      	ldrh	r1, [r5, #2]
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f7fb f941 	bl	800df5c <ucdr_serialize_uint16_t>
 8012cda:	7929      	ldrb	r1, [r5, #4]
 8012cdc:	4004      	ands	r4, r0
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f7fb f910 	bl	800df04 <ucdr_serialize_uint8_t>
 8012ce4:	b2e4      	uxtb	r4, r4
 8012ce6:	4020      	ands	r0, r4
 8012ce8:	bd70      	pop	{r4, r5, r6, pc}
 8012cea:	bf00      	nop

08012cec <uxr_deserialize_HEARTBEAT_Payload>:
 8012cec:	b570      	push	{r4, r5, r6, lr}
 8012cee:	4605      	mov	r5, r0
 8012cf0:	460e      	mov	r6, r1
 8012cf2:	f7fb fa33 	bl	800e15c <ucdr_deserialize_uint16_t>
 8012cf6:	1cb1      	adds	r1, r6, #2
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f7fb fa2e 	bl	800e15c <ucdr_deserialize_uint16_t>
 8012d00:	1d31      	adds	r1, r6, #4
 8012d02:	4004      	ands	r4, r0
 8012d04:	4628      	mov	r0, r5
 8012d06:	f7fb f913 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012d0a:	b2e4      	uxtb	r4, r4
 8012d0c:	4020      	ands	r0, r4
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}

08012d10 <uxr_serialize_TIMESTAMP_Payload>:
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	460d      	mov	r5, r1
 8012d14:	6809      	ldr	r1, [r1, #0]
 8012d16:	4606      	mov	r6, r0
 8012d18:	f7fb ff54 	bl	800ebc4 <ucdr_serialize_int32_t>
 8012d1c:	6869      	ldr	r1, [r5, #4]
 8012d1e:	4604      	mov	r4, r0
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7fb fb09 	bl	800e338 <ucdr_serialize_uint32_t>
 8012d26:	4020      	ands	r0, r4
 8012d28:	b2c0      	uxtb	r0, r0
 8012d2a:	bd70      	pop	{r4, r5, r6, pc}

08012d2c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d30:	4605      	mov	r5, r0
 8012d32:	460e      	mov	r6, r1
 8012d34:	f7fb ffde 	bl	800ecf4 <ucdr_deserialize_int32_t>
 8012d38:	1d31      	adds	r1, r6, #4
 8012d3a:	4607      	mov	r7, r0
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f7fb fc2b 	bl	800e598 <ucdr_deserialize_uint32_t>
 8012d42:	f106 0108 	add.w	r1, r6, #8
 8012d46:	4680      	mov	r8, r0
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f7fb ffd3 	bl	800ecf4 <ucdr_deserialize_int32_t>
 8012d4e:	f106 010c 	add.w	r1, r6, #12
 8012d52:	4604      	mov	r4, r0
 8012d54:	4628      	mov	r0, r5
 8012d56:	f7fb fc1f 	bl	800e598 <ucdr_deserialize_uint32_t>
 8012d5a:	ea07 0708 	and.w	r7, r7, r8
 8012d5e:	403c      	ands	r4, r7
 8012d60:	f106 0110 	add.w	r1, r6, #16
 8012d64:	4004      	ands	r4, r0
 8012d66:	4628      	mov	r0, r5
 8012d68:	f7fb ffc4 	bl	800ecf4 <ucdr_deserialize_int32_t>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	f106 0114 	add.w	r1, r6, #20
 8012d72:	4628      	mov	r0, r5
 8012d74:	461d      	mov	r5, r3
 8012d76:	f7fb fc0f 	bl	800e598 <ucdr_deserialize_uint32_t>
 8012d7a:	b2e4      	uxtb	r4, r4
 8012d7c:	402c      	ands	r4, r5
 8012d7e:	4020      	ands	r0, r4
 8012d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d84 <uxr_serialize_SampleIdentity>:
 8012d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d88:	220c      	movs	r2, #12
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	f7fa fd15 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012d92:	2203      	movs	r2, #3
 8012d94:	f105 010c 	add.w	r1, r5, #12
 8012d98:	4607      	mov	r7, r0
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f7fa fd0e 	bl	800d7bc <ucdr_serialize_array_uint8_t>
 8012da0:	7be9      	ldrb	r1, [r5, #15]
 8012da2:	4680      	mov	r8, r0
 8012da4:	4620      	mov	r0, r4
 8012da6:	f7fb f8ad 	bl	800df04 <ucdr_serialize_uint8_t>
 8012daa:	6929      	ldr	r1, [r5, #16]
 8012dac:	4606      	mov	r6, r0
 8012dae:	4620      	mov	r0, r4
 8012db0:	f7fb ff08 	bl	800ebc4 <ucdr_serialize_int32_t>
 8012db4:	4603      	mov	r3, r0
 8012db6:	6969      	ldr	r1, [r5, #20]
 8012db8:	4620      	mov	r0, r4
 8012dba:	461c      	mov	r4, r3
 8012dbc:	f7fb fabc 	bl	800e338 <ucdr_serialize_uint32_t>
 8012dc0:	ea07 0708 	and.w	r7, r7, r8
 8012dc4:	403e      	ands	r6, r7
 8012dc6:	4034      	ands	r4, r6
 8012dc8:	4020      	ands	r0, r4
 8012dca:	b2c0      	uxtb	r0, r0
 8012dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dd0 <uxr_deserialize_SampleIdentity>:
 8012dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd4:	220c      	movs	r2, #12
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	460d      	mov	r5, r1
 8012dda:	f7fa fd53 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012dde:	2203      	movs	r2, #3
 8012de0:	f105 010c 	add.w	r1, r5, #12
 8012de4:	4607      	mov	r7, r0
 8012de6:	4620      	mov	r0, r4
 8012de8:	f7fa fd4c 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8012dec:	f105 010f 	add.w	r1, r5, #15
 8012df0:	4680      	mov	r8, r0
 8012df2:	4620      	mov	r0, r4
 8012df4:	f7fb f89c 	bl	800df30 <ucdr_deserialize_uint8_t>
 8012df8:	f105 0110 	add.w	r1, r5, #16
 8012dfc:	4606      	mov	r6, r0
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f7fb ff78 	bl	800ecf4 <ucdr_deserialize_int32_t>
 8012e04:	4603      	mov	r3, r0
 8012e06:	f105 0114 	add.w	r1, r5, #20
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	461c      	mov	r4, r3
 8012e0e:	f7fb fbc3 	bl	800e598 <ucdr_deserialize_uint32_t>
 8012e12:	ea07 0708 	and.w	r7, r7, r8
 8012e16:	403e      	ands	r6, r7
 8012e18:	4034      	ands	r4, r6
 8012e1a:	4020      	ands	r0, r4
 8012e1c:	b2c0      	uxtb	r0, r0
 8012e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e22:	bf00      	nop

08012e24 <rcl_client_get_rmw_handle>:
 8012e24:	b110      	cbz	r0, 8012e2c <rcl_client_get_rmw_handle+0x8>
 8012e26:	6800      	ldr	r0, [r0, #0]
 8012e28:	b100      	cbz	r0, 8012e2c <rcl_client_get_rmw_handle+0x8>
 8012e2a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop

08012e30 <rcl_take_response>:
 8012e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e32:	460e      	mov	r6, r1
 8012e34:	4607      	mov	r7, r0
 8012e36:	b08d      	sub	sp, #52	; 0x34
 8012e38:	ad06      	add	r5, sp, #24
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	4694      	mov	ip, r2
 8012e3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8012e4a:	b337      	cbz	r7, 8012e9a <rcl_take_response+0x6a>
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	b323      	cbz	r3, 8012e9a <rcl_take_response+0x6a>
 8012e50:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012e52:	b310      	cbz	r0, 8012e9a <rcl_take_response+0x6a>
 8012e54:	4662      	mov	r2, ip
 8012e56:	b31a      	cbz	r2, 8012ea0 <rcl_take_response+0x70>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	2600      	movs	r6, #0
 8012e5c:	2700      	movs	r7, #0
 8012e5e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012e62:	a902      	add	r1, sp, #8
 8012e64:	f10d 0307 	add.w	r3, sp, #7
 8012e68:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012e6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012e70:	f002 ff1c 	bl	8015cac <rmw_take_response>
 8012e74:	4606      	mov	r6, r0
 8012e76:	b9a8      	cbnz	r0, 8012ea4 <rcl_take_response+0x74>
 8012e78:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012e7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012e80:	2a00      	cmp	r2, #0
 8012e82:	bf08      	it	eq
 8012e84:	461e      	moveq	r6, r3
 8012e86:	ad06      	add	r5, sp, #24
 8012e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012e90:	e884 0003 	stmia.w	r4, {r0, r1}
 8012e94:	4630      	mov	r0, r6
 8012e96:	b00d      	add	sp, #52	; 0x34
 8012e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e9a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8012e9e:	e7f2      	b.n	8012e86 <rcl_take_response+0x56>
 8012ea0:	260b      	movs	r6, #11
 8012ea2:	e7f0      	b.n	8012e86 <rcl_take_response+0x56>
 8012ea4:	2601      	movs	r6, #1
 8012ea6:	e7ee      	b.n	8012e86 <rcl_take_response+0x56>

08012ea8 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012ea8:	280b      	cmp	r0, #11
 8012eaa:	dc0d      	bgt.n	8012ec8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	db09      	blt.n	8012ec4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012eb0:	280b      	cmp	r0, #11
 8012eb2:	d807      	bhi.n	8012ec4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012eb4:	e8df f000 	tbb	[pc, r0]
 8012eb8:	07060607 	.word	0x07060607
 8012ebc:	06060606 	.word	0x06060606
 8012ec0:	07070606 	.word	0x07070606
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	4770      	bx	lr
 8012ec8:	28cb      	cmp	r0, #203	; 0xcb
 8012eca:	bf18      	it	ne
 8012ecc:	2001      	movne	r0, #1
 8012ece:	4770      	bx	lr

08012ed0 <rcl_get_zero_initialized_context>:
 8012ed0:	b4d0      	push	{r4, r6, r7}
 8012ed2:	2600      	movs	r6, #0
 8012ed4:	2700      	movs	r7, #0
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	4b04      	ldr	r3, [pc, #16]	; (8012eec <rcl_get_zero_initialized_context+0x1c>)
 8012eda:	e9c3 6702 	strd	r6, r7, [r3, #8]
 8012ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	bcd0      	pop	{r4, r6, r7}
 8012ee8:	4770      	bx	lr
 8012eea:	bf00      	nop
 8012eec:	20006778 	.word	0x20006778

08012ef0 <rcl_context_is_valid>:
 8012ef0:	b150      	cbz	r0, 8012f08 <rcl_context_is_valid+0x18>
 8012ef2:	b508      	push	{r3, lr}
 8012ef4:	2105      	movs	r1, #5
 8012ef6:	3008      	adds	r0, #8
 8012ef8:	f002 f942 	bl	8015180 <__atomic_load_8>
 8012efc:	ea51 0300 	orrs.w	r3, r1, r0
 8012f00:	bf14      	ite	ne
 8012f02:	2001      	movne	r0, #1
 8012f04:	2000      	moveq	r0, #0
 8012f06:	bd08      	pop	{r3, pc}
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop

08012f0c <__cleanup_context>:
 8012f0c:	2305      	movs	r3, #5
 8012f0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f12:	4606      	mov	r6, r0
 8012f14:	b087      	sub	sp, #28
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	3008      	adds	r0, #8
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	f002 f963 	bl	80151e8 <__atomic_store_8>
 8012f22:	6830      	ldr	r0, [r6, #0]
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d052      	beq.n	8012fce <__cleanup_context+0xc2>
 8012f28:	6947      	ldr	r7, [r0, #20]
 8012f2a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012f2e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012f32:	b137      	cbz	r7, 8012f42 <__cleanup_context+0x36>
 8012f34:	3014      	adds	r0, #20
 8012f36:	f7f6 fde5 	bl	8009b04 <rcl_init_options_fini>
 8012f3a:	4607      	mov	r7, r0
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d148      	bne.n	8012fd2 <__cleanup_context+0xc6>
 8012f40:	6830      	ldr	r0, [r6, #0]
 8012f42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012f44:	b143      	cbz	r3, 8012f58 <__cleanup_context+0x4c>
 8012f46:	3028      	adds	r0, #40	; 0x28
 8012f48:	f7f8 fb98 	bl	800b67c <rmw_context_fini>
 8012f4c:	b118      	cbz	r0, 8012f56 <__cleanup_context+0x4a>
 8012f4e:	2f00      	cmp	r7, #0
 8012f50:	d042      	beq.n	8012fd8 <__cleanup_context+0xcc>
 8012f52:	f7f7 ff35 	bl	800adc0 <rcutils_reset_error>
 8012f56:	6830      	ldr	r0, [r6, #0]
 8012f58:	6a01      	ldr	r1, [r0, #32]
 8012f5a:	b1d9      	cbz	r1, 8012f94 <__cleanup_context+0x88>
 8012f5c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012f60:	2a01      	cmp	r2, #1
 8012f62:	f173 0000 	sbcs.w	r0, r3, #0
 8012f66:	db11      	blt.n	8012f8c <__cleanup_context+0x80>
 8012f68:	2400      	movs	r4, #0
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8012f70:	b308      	cbz	r0, 8012fb6 <__cleanup_context+0xaa>
 8012f72:	4649      	mov	r1, r9
 8012f74:	47c0      	blx	r8
 8012f76:	6831      	ldr	r1, [r6, #0]
 8012f78:	3401      	adds	r4, #1
 8012f7a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012f7e:	f145 0500 	adc.w	r5, r5, #0
 8012f82:	4294      	cmp	r4, r2
 8012f84:	eb75 0003 	sbcs.w	r0, r5, r3
 8012f88:	6a09      	ldr	r1, [r1, #32]
 8012f8a:	dbef      	blt.n	8012f6c <__cleanup_context+0x60>
 8012f8c:	4608      	mov	r0, r1
 8012f8e:	4649      	mov	r1, r9
 8012f90:	47c0      	blx	r8
 8012f92:	6830      	ldr	r0, [r6, #0]
 8012f94:	4649      	mov	r1, r9
 8012f96:	47c0      	blx	r8
 8012f98:	2000      	movs	r0, #0
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	4b10      	ldr	r3, [pc, #64]	; (8012fe0 <__cleanup_context+0xd4>)
 8012f9e:	ac02      	add	r4, sp, #8
 8012fa0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012faa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8012fae:	4638      	mov	r0, r7
 8012fb0:	b007      	add	sp, #28
 8012fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fb6:	3401      	adds	r4, #1
 8012fb8:	f145 0500 	adc.w	r5, r5, #0
 8012fbc:	4294      	cmp	r4, r2
 8012fbe:	eb75 0003 	sbcs.w	r0, r5, r3
 8012fc2:	dbd3      	blt.n	8012f6c <__cleanup_context+0x60>
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	47c0      	blx	r8
 8012fca:	6830      	ldr	r0, [r6, #0]
 8012fcc:	e7e2      	b.n	8012f94 <__cleanup_context+0x88>
 8012fce:	4607      	mov	r7, r0
 8012fd0:	e7e2      	b.n	8012f98 <__cleanup_context+0x8c>
 8012fd2:	f7f7 fef5 	bl	800adc0 <rcutils_reset_error>
 8012fd6:	e7b3      	b.n	8012f40 <__cleanup_context+0x34>
 8012fd8:	f7ff ff66 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8012fdc:	4607      	mov	r7, r0
 8012fde:	e7b8      	b.n	8012f52 <__cleanup_context+0x46>
 8012fe0:	20006778 	.word	0x20006778

08012fe4 <rcl_expand_topic_name>:
 8012fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe8:	b08b      	sub	sp, #44	; 0x2c
 8012fea:	9306      	str	r3, [sp, #24]
 8012fec:	2800      	cmp	r0, #0
 8012fee:	f000 80d6 	beq.w	801319e <rcl_expand_topic_name+0x1ba>
 8012ff2:	460e      	mov	r6, r1
 8012ff4:	2900      	cmp	r1, #0
 8012ff6:	f000 80d2 	beq.w	801319e <rcl_expand_topic_name+0x1ba>
 8012ffa:	4617      	mov	r7, r2
 8012ffc:	2a00      	cmp	r2, #0
 8012ffe:	f000 80ce 	beq.w	801319e <rcl_expand_topic_name+0x1ba>
 8013002:	2b00      	cmp	r3, #0
 8013004:	f000 80cb 	beq.w	801319e <rcl_expand_topic_name+0x1ba>
 8013008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 80c7 	beq.w	801319e <rcl_expand_topic_name+0x1ba>
 8013010:	2200      	movs	r2, #0
 8013012:	a909      	add	r1, sp, #36	; 0x24
 8013014:	4680      	mov	r8, r0
 8013016:	f001 f9cf 	bl	80143b8 <rcl_validate_topic_name>
 801301a:	4604      	mov	r4, r0
 801301c:	2800      	cmp	r0, #0
 801301e:	f040 80ba 	bne.w	8013196 <rcl_expand_topic_name+0x1b2>
 8013022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013024:	2b00      	cmp	r3, #0
 8013026:	f040 80c3 	bne.w	80131b0 <rcl_expand_topic_name+0x1cc>
 801302a:	4602      	mov	r2, r0
 801302c:	a909      	add	r1, sp, #36	; 0x24
 801302e:	4630      	mov	r0, r6
 8013030:	f002 fb5c 	bl	80156ec <rmw_validate_node_name>
 8013034:	2800      	cmp	r0, #0
 8013036:	f040 80b7 	bne.w	80131a8 <rcl_expand_topic_name+0x1c4>
 801303a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801303c:	2a00      	cmp	r2, #0
 801303e:	f040 80bc 	bne.w	80131ba <rcl_expand_topic_name+0x1d6>
 8013042:	4638      	mov	r0, r7
 8013044:	a909      	add	r1, sp, #36	; 0x24
 8013046:	f002 fb33 	bl	80156b0 <rmw_validate_namespace>
 801304a:	2800      	cmp	r0, #0
 801304c:	f040 80ac 	bne.w	80131a8 <rcl_expand_topic_name+0x1c4>
 8013050:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013052:	2c00      	cmp	r4, #0
 8013054:	f040 80f4 	bne.w	8013240 <rcl_expand_topic_name+0x25c>
 8013058:	217b      	movs	r1, #123	; 0x7b
 801305a:	4640      	mov	r0, r8
 801305c:	f004 f9d0 	bl	8017400 <strchr>
 8013060:	f898 3000 	ldrb.w	r3, [r8]
 8013064:	4683      	mov	fp, r0
 8013066:	2b2f      	cmp	r3, #47	; 0x2f
 8013068:	f000 80a9 	beq.w	80131be <rcl_expand_topic_name+0x1da>
 801306c:	2b7e      	cmp	r3, #126	; 0x7e
 801306e:	f040 80ad 	bne.w	80131cc <rcl_expand_topic_name+0x1e8>
 8013072:	4638      	mov	r0, r7
 8013074:	f7ed f8e6 	bl	8000244 <strlen>
 8013078:	4681      	mov	r9, r0
 801307a:	f8df e228 	ldr.w	lr, [pc, #552]	; 80132a4 <rcl_expand_topic_name+0x2c0>
 801307e:	f8df c228 	ldr.w	ip, [pc, #552]	; 80132a8 <rcl_expand_topic_name+0x2c4>
 8013082:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013084:	f1b9 0f01 	cmp.w	r9, #1
 8013088:	bf18      	it	ne
 801308a:	46f4      	movne	ip, lr
 801308c:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8013090:	ab14      	add	r3, sp, #80	; 0x50
 8013092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013094:	e9cd c702 	strd	ip, r7, [sp, #8]
 8013098:	f108 0c01 	add.w	ip, r8, #1
 801309c:	9500      	str	r5, [sp, #0]
 801309e:	9604      	str	r6, [sp, #16]
 80130a0:	f8cd e004 	str.w	lr, [sp, #4]
 80130a4:	f8cd c014 	str.w	ip, [sp, #20]
 80130a8:	f002 f954 	bl	8015354 <rcutils_format_string_limit>
 80130ac:	4605      	mov	r5, r0
 80130ae:	2800      	cmp	r0, #0
 80130b0:	f000 80c8 	beq.w	8013244 <rcl_expand_topic_name+0x260>
 80130b4:	465b      	mov	r3, fp
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f000 80a4 	beq.w	8013204 <rcl_expand_topic_name+0x220>
 80130bc:	217b      	movs	r1, #123	; 0x7b
 80130be:	f004 f99f 	bl	8017400 <strchr>
 80130c2:	46a9      	mov	r9, r5
 80130c4:	4683      	mov	fp, r0
 80130c6:	46aa      	mov	sl, r5
 80130c8:	9407      	str	r4, [sp, #28]
 80130ca:	465d      	mov	r5, fp
 80130cc:	464c      	mov	r4, r9
 80130ce:	2d00      	cmp	r5, #0
 80130d0:	f000 80bd 	beq.w	801324e <rcl_expand_topic_name+0x26a>
 80130d4:	217d      	movs	r1, #125	; 0x7d
 80130d6:	4620      	mov	r0, r4
 80130d8:	f004 f992 	bl	8017400 <strchr>
 80130dc:	eba0 0905 	sub.w	r9, r0, r5
 80130e0:	f109 0b01 	add.w	fp, r9, #1
 80130e4:	465a      	mov	r2, fp
 80130e6:	4629      	mov	r1, r5
 80130e8:	4869      	ldr	r0, [pc, #420]	; (8013290 <rcl_expand_topic_name+0x2ac>)
 80130ea:	f004 f99e 	bl	801742a <strncmp>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d06a      	beq.n	80131c8 <rcl_expand_topic_name+0x1e4>
 80130f2:	465a      	mov	r2, fp
 80130f4:	4629      	mov	r1, r5
 80130f6:	4867      	ldr	r0, [pc, #412]	; (8013294 <rcl_expand_topic_name+0x2b0>)
 80130f8:	f004 f997 	bl	801742a <strncmp>
 80130fc:	b128      	cbz	r0, 801310a <rcl_expand_topic_name+0x126>
 80130fe:	465a      	mov	r2, fp
 8013100:	4629      	mov	r1, r5
 8013102:	4865      	ldr	r0, [pc, #404]	; (8013298 <rcl_expand_topic_name+0x2b4>)
 8013104:	f004 f991 	bl	801742a <strncmp>
 8013108:	bb38      	cbnz	r0, 801315a <rcl_expand_topic_name+0x176>
 801310a:	46b9      	mov	r9, r7
 801310c:	ab16      	add	r3, sp, #88	; 0x58
 801310e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013112:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013116:	ab14      	add	r3, sp, #80	; 0x50
 8013118:	4628      	mov	r0, r5
 801311a:	cb0c      	ldmia	r3, {r2, r3}
 801311c:	4659      	mov	r1, fp
 801311e:	f002 fa55 	bl	80155cc <rcutils_strndup>
 8013122:	4605      	mov	r5, r0
 8013124:	2800      	cmp	r0, #0
 8013126:	f000 809c 	beq.w	8013262 <rcl_expand_topic_name+0x27e>
 801312a:	464a      	mov	r2, r9
 801312c:	4620      	mov	r0, r4
 801312e:	4629      	mov	r1, r5
 8013130:	ab14      	add	r3, sp, #80	; 0x50
 8013132:	f002 f961 	bl	80153f8 <rcutils_repl_str>
 8013136:	4604      	mov	r4, r0
 8013138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801313a:	4628      	mov	r0, r5
 801313c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801313e:	4798      	blx	r3
 8013140:	4650      	mov	r0, sl
 8013142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013144:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013146:	4798      	blx	r3
 8013148:	2c00      	cmp	r4, #0
 801314a:	d07b      	beq.n	8013244 <rcl_expand_topic_name+0x260>
 801314c:	217b      	movs	r1, #123	; 0x7b
 801314e:	4620      	mov	r0, r4
 8013150:	f004 f956 	bl	8017400 <strchr>
 8013154:	46a2      	mov	sl, r4
 8013156:	4605      	mov	r5, r0
 8013158:	e7b9      	b.n	80130ce <rcl_expand_topic_name+0xea>
 801315a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801315e:	9806      	ldr	r0, [sp, #24]
 8013160:	1c69      	adds	r1, r5, #1
 8013162:	f7f7 ff3f 	bl	800afe4 <rcutils_string_map_getn>
 8013166:	4681      	mov	r9, r0
 8013168:	2800      	cmp	r0, #0
 801316a:	d1cf      	bne.n	801310c <rcl_expand_topic_name+0x128>
 801316c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801316e:	ab16      	add	r3, sp, #88	; 0x58
 8013170:	6010      	str	r0, [r2, #0]
 8013172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013176:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801317a:	ab14      	add	r3, sp, #80	; 0x50
 801317c:	cb0c      	ldmia	r3, {r2, r3}
 801317e:	4659      	mov	r1, fp
 8013180:	4628      	mov	r0, r5
 8013182:	f002 fa23 	bl	80155cc <rcutils_strndup>
 8013186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013188:	9918      	ldr	r1, [sp, #96]	; 0x60
 801318a:	4798      	blx	r3
 801318c:	4650      	mov	r0, sl
 801318e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013190:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013192:	4798      	blx	r3
 8013194:	2469      	movs	r4, #105	; 0x69
 8013196:	4620      	mov	r0, r4
 8013198:	b00b      	add	sp, #44	; 0x2c
 801319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319e:	240b      	movs	r4, #11
 80131a0:	4620      	mov	r0, r4
 80131a2:	b00b      	add	sp, #44	; 0x2c
 80131a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a8:	f7ff fe7e 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 80131ac:	4604      	mov	r4, r0
 80131ae:	e7f2      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 80131b0:	2467      	movs	r4, #103	; 0x67
 80131b2:	4620      	mov	r0, r4
 80131b4:	b00b      	add	sp, #44	; 0x2c
 80131b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ba:	24c9      	movs	r4, #201	; 0xc9
 80131bc:	e7eb      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d057      	beq.n	8013272 <rcl_expand_topic_name+0x28e>
 80131c2:	46c1      	mov	r9, r8
 80131c4:	4625      	mov	r5, r4
 80131c6:	e77e      	b.n	80130c6 <rcl_expand_topic_name+0xe2>
 80131c8:	46b1      	mov	r9, r6
 80131ca:	e79f      	b.n	801310c <rcl_expand_topic_name+0x128>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d1f8      	bne.n	80131c2 <rcl_expand_topic_name+0x1de>
 80131d0:	4638      	mov	r0, r7
 80131d2:	f7ed f837 	bl	8000244 <strlen>
 80131d6:	4a31      	ldr	r2, [pc, #196]	; (801329c <rcl_expand_topic_name+0x2b8>)
 80131d8:	4b31      	ldr	r3, [pc, #196]	; (80132a0 <rcl_expand_topic_name+0x2bc>)
 80131da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80131de:	2801      	cmp	r0, #1
 80131e0:	bf18      	it	ne
 80131e2:	4613      	movne	r3, r2
 80131e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80131e6:	e9cd 3702 	strd	r3, r7, [sp, #8]
 80131ea:	e9cd 2100 	strd	r2, r1, [sp]
 80131ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80131f2:	ab14      	add	r3, sp, #80	; 0x50
 80131f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80131f6:	f002 f8ad 	bl	8015354 <rcutils_format_string_limit>
 80131fa:	4605      	mov	r5, r0
 80131fc:	b315      	cbz	r5, 8013244 <rcl_expand_topic_name+0x260>
 80131fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013200:	601d      	str	r5, [r3, #0]
 8013202:	e7c8      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 8013204:	782b      	ldrb	r3, [r5, #0]
 8013206:	2b2f      	cmp	r3, #47	; 0x2f
 8013208:	d0f9      	beq.n	80131fe <rcl_expand_topic_name+0x21a>
 801320a:	4638      	mov	r0, r7
 801320c:	f7ed f81a 	bl	8000244 <strlen>
 8013210:	4a22      	ldr	r2, [pc, #136]	; (801329c <rcl_expand_topic_name+0x2b8>)
 8013212:	4b23      	ldr	r3, [pc, #140]	; (80132a0 <rcl_expand_topic_name+0x2bc>)
 8013214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013218:	2801      	cmp	r0, #1
 801321a:	bf18      	it	ne
 801321c:	4613      	movne	r3, r2
 801321e:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8013222:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013226:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013228:	ab14      	add	r3, sp, #80	; 0x50
 801322a:	9200      	str	r2, [sp, #0]
 801322c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801322e:	f002 f891 	bl	8015354 <rcutils_format_string_limit>
 8013232:	4603      	mov	r3, r0
 8013234:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013236:	4628      	mov	r0, r5
 8013238:	9918      	ldr	r1, [sp, #96]	; 0x60
 801323a:	461d      	mov	r5, r3
 801323c:	4790      	blx	r2
 801323e:	e7dd      	b.n	80131fc <rcl_expand_topic_name+0x218>
 8013240:	24ca      	movs	r4, #202	; 0xca
 8013242:	e7a8      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 8013244:	2300      	movs	r3, #0
 8013246:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013248:	240a      	movs	r4, #10
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	e7a3      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 801324e:	4653      	mov	r3, sl
 8013250:	4655      	mov	r5, sl
 8013252:	9c07      	ldr	r4, [sp, #28]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1d5      	bne.n	8013204 <rcl_expand_topic_name+0x220>
 8013258:	f898 3000 	ldrb.w	r3, [r8]
 801325c:	2b2f      	cmp	r3, #47	; 0x2f
 801325e:	d0ce      	beq.n	80131fe <rcl_expand_topic_name+0x21a>
 8013260:	e7b6      	b.n	80131d0 <rcl_expand_topic_name+0x1ec>
 8013262:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013264:	4650      	mov	r0, sl
 8013266:	601d      	str	r5, [r3, #0]
 8013268:	9918      	ldr	r1, [sp, #96]	; 0x60
 801326a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801326c:	4798      	blx	r3
 801326e:	240a      	movs	r4, #10
 8013270:	e791      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 8013272:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8013276:	e88d 0003 	stmia.w	sp, {r0, r1}
 801327a:	ab14      	add	r3, sp, #80	; 0x50
 801327c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801327e:	4640      	mov	r0, r8
 8013280:	f002 f982 	bl	8015588 <rcutils_strdup>
 8013284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013286:	2800      	cmp	r0, #0
 8013288:	bf08      	it	eq
 801328a:	240a      	moveq	r4, #10
 801328c:	6018      	str	r0, [r3, #0]
 801328e:	e782      	b.n	8013196 <rcl_expand_topic_name+0x1b2>
 8013290:	08019bec 	.word	0x08019bec
 8013294:	08019bf4 	.word	0x08019bf4
 8013298:	08019bfc 	.word	0x08019bfc
 801329c:	080198a4 	.word	0x080198a4
 80132a0:	080198ec 	.word	0x080198ec
 80132a4:	08019be4 	.word	0x08019be4
 80132a8:	080198dc 	.word	0x080198dc

080132ac <rcl_get_default_topic_name_substitutions>:
 80132ac:	2800      	cmp	r0, #0
 80132ae:	bf0c      	ite	eq
 80132b0:	200b      	moveq	r0, #11
 80132b2:	2000      	movne	r0, #0
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop

080132b8 <rcl_init>:
 80132b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132bc:	1e07      	subs	r7, r0, #0
 80132be:	4688      	mov	r8, r1
 80132c0:	4692      	mov	sl, r2
 80132c2:	4699      	mov	r9, r3
 80132c4:	b09f      	sub	sp, #124	; 0x7c
 80132c6:	f340 8096 	ble.w	80133f6 <rcl_init+0x13e>
 80132ca:	2900      	cmp	r1, #0
 80132cc:	f000 8096 	beq.w	80133fc <rcl_init+0x144>
 80132d0:	2400      	movs	r4, #0
 80132d2:	1f0d      	subs	r5, r1, #4
 80132d4:	f855 6f04 	ldr.w	r6, [r5, #4]!
 80132d8:	3401      	adds	r4, #1
 80132da:	2e00      	cmp	r6, #0
 80132dc:	f000 808e 	beq.w	80133fc <rcl_init+0x144>
 80132e0:	42a7      	cmp	r7, r4
 80132e2:	d1f7      	bne.n	80132d4 <rcl_init+0x1c>
 80132e4:	f1ba 0f00 	cmp.w	sl, #0
 80132e8:	f000 8088 	beq.w	80133fc <rcl_init+0x144>
 80132ec:	f8da 4000 	ldr.w	r4, [sl]
 80132f0:	2c00      	cmp	r4, #0
 80132f2:	f000 8083 	beq.w	80133fc <rcl_init+0x144>
 80132f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132f8:	ad19      	add	r5, sp, #100	; 0x64
 80132fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132fc:	6823      	ldr	r3, [r4, #0]
 80132fe:	a819      	add	r0, sp, #100	; 0x64
 8013300:	602b      	str	r3, [r5, #0]
 8013302:	f7f7 fc6d 	bl	800abe0 <rcutils_allocator_is_valid>
 8013306:	2800      	cmp	r0, #0
 8013308:	d078      	beq.n	80133fc <rcl_init+0x144>
 801330a:	f1b9 0f00 	cmp.w	r9, #0
 801330e:	d075      	beq.n	80133fc <rcl_init+0x144>
 8013310:	f8d9 3000 	ldr.w	r3, [r9]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d176      	bne.n	8013406 <rcl_init+0x14e>
 8013318:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801331c:	2178      	movs	r1, #120	; 0x78
 801331e:	2001      	movs	r0, #1
 8013320:	4798      	blx	r3
 8013322:	4604      	mov	r4, r0
 8013324:	f8c9 0000 	str.w	r0, [r9]
 8013328:	2800      	cmp	r0, #0
 801332a:	f000 80c6 	beq.w	80134ba <rcl_init+0x202>
 801332e:	a802      	add	r0, sp, #8
 8013330:	f002 f968 	bl	8015604 <rmw_get_zero_initialized_context>
 8013334:	2250      	movs	r2, #80	; 0x50
 8013336:	a902      	add	r1, sp, #8
 8013338:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801333c:	f003 fe8a 	bl	8017054 <memcpy>
 8013340:	f8d9 6000 	ldr.w	r6, [r9]
 8013344:	ac19      	add	r4, sp, #100	; 0x64
 8013346:	4635      	mov	r5, r6
 8013348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801334a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801334c:	6823      	ldr	r3, [r4, #0]
 801334e:	f106 0114 	add.w	r1, r6, #20
 8013352:	4650      	mov	r0, sl
 8013354:	602b      	str	r3, [r5, #0]
 8013356:	f7f6 fbf9 	bl	8009b4c <rcl_init_options_copy>
 801335a:	4606      	mov	r6, r0
 801335c:	2800      	cmp	r0, #0
 801335e:	d143      	bne.n	80133e8 <rcl_init+0x130>
 8013360:	463c      	mov	r4, r7
 8013362:	f8d9 a000 	ldr.w	sl, [r9]
 8013366:	17fd      	asrs	r5, r7, #31
 8013368:	e9ca 4506 	strd	r4, r5, [sl, #24]
 801336c:	f8ca 0020 	str.w	r0, [sl, #32]
 8013370:	2f00      	cmp	r7, #0
 8013372:	d04d      	beq.n	8013410 <rcl_init+0x158>
 8013374:	f1b8 0f00 	cmp.w	r8, #0
 8013378:	d04a      	beq.n	8013410 <rcl_init+0x158>
 801337a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801337e:	4638      	mov	r0, r7
 8013380:	2104      	movs	r1, #4
 8013382:	4798      	blx	r3
 8013384:	f8d9 b000 	ldr.w	fp, [r9]
 8013388:	f8ca 0020 	str.w	r0, [sl, #32]
 801338c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8013390:	b34b      	cbz	r3, 80133e6 <rcl_init+0x12e>
 8013392:	2f01      	cmp	r7, #1
 8013394:	f175 0300 	sbcs.w	r3, r5, #0
 8013398:	db3a      	blt.n	8013410 <rcl_init+0x158>
 801339a:	2600      	movs	r6, #0
 801339c:	2700      	movs	r7, #0
 801339e:	f1a8 0804 	sub.w	r8, r8, #4
 80133a2:	e00d      	b.n	80133c0 <rcl_init+0x108>
 80133a4:	4652      	mov	r2, sl
 80133a6:	f8d8 1000 	ldr.w	r1, [r8]
 80133aa:	f003 fe53 	bl	8017054 <memcpy>
 80133ae:	3601      	adds	r6, #1
 80133b0:	f147 0700 	adc.w	r7, r7, #0
 80133b4:	42bd      	cmp	r5, r7
 80133b6:	bf08      	it	eq
 80133b8:	42b4      	cmpeq	r4, r6
 80133ba:	d029      	beq.n	8013410 <rcl_init+0x158>
 80133bc:	f8d9 b000 	ldr.w	fp, [r9]
 80133c0:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80133c4:	f7ec ff3e 	bl	8000244 <strlen>
 80133c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133ca:	991d      	ldr	r1, [sp, #116]	; 0x74
 80133cc:	f8db b020 	ldr.w	fp, [fp, #32]
 80133d0:	4682      	mov	sl, r0
 80133d2:	4798      	blx	r3
 80133d4:	f8d9 2000 	ldr.w	r2, [r9]
 80133d8:	00b3      	lsls	r3, r6, #2
 80133da:	6a12      	ldr	r2, [r2, #32]
 80133dc:	f84b 0003 	str.w	r0, [fp, r3]
 80133e0:	58d0      	ldr	r0, [r2, r3]
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d1de      	bne.n	80133a4 <rcl_init+0xec>
 80133e6:	260a      	movs	r6, #10
 80133e8:	4648      	mov	r0, r9
 80133ea:	f7ff fd8f 	bl	8012f0c <__cleanup_context>
 80133ee:	4630      	mov	r0, r6
 80133f0:	b01f      	add	sp, #124	; 0x7c
 80133f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f6:	2900      	cmp	r1, #0
 80133f8:	f43f af74 	beq.w	80132e4 <rcl_init+0x2c>
 80133fc:	260b      	movs	r6, #11
 80133fe:	4630      	mov	r0, r6
 8013400:	b01f      	add	sp, #124	; 0x7c
 8013402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013406:	2664      	movs	r6, #100	; 0x64
 8013408:	4630      	mov	r0, r6
 801340a:	b01f      	add	sp, #124	; 0x7c
 801340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013410:	2605      	movs	r6, #5
 8013412:	2300      	movs	r3, #0
 8013414:	2201      	movs	r2, #1
 8013416:	4832      	ldr	r0, [pc, #200]	; (80134e0 <rcl_init+0x228>)
 8013418:	9600      	str	r6, [sp, #0]
 801341a:	f001 ff51 	bl	80152c0 <__atomic_fetch_add_8>
 801341e:	4604      	mov	r4, r0
 8013420:	460d      	mov	r5, r1
 8013422:	ea54 0305 	orrs.w	r3, r4, r5
 8013426:	d03e      	beq.n	80134a6 <rcl_init+0x1ee>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	9600      	str	r6, [sp, #0]
 801342e:	f109 0008 	add.w	r0, r9, #8
 8013432:	f001 fed9 	bl	80151e8 <__atomic_store_8>
 8013436:	f8d9 3000 	ldr.w	r3, [r9]
 801343a:	695f      	ldr	r7, [r3, #20]
 801343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8013442:	3301      	adds	r3, #1
 8013444:	d03d      	beq.n	80134c2 <rcl_init+0x20a>
 8013446:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801344a:	b94b      	cbnz	r3, 8013460 <rcl_init+0x1a8>
 801344c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013450:	f000 f848 	bl	80134e4 <rcl_get_localhost_only>
 8013454:	4606      	mov	r6, r0
 8013456:	2800      	cmp	r0, #0
 8013458:	d1c6      	bne.n	80133e8 <rcl_init+0x130>
 801345a:	f8d9 3000 	ldr.w	r3, [r9]
 801345e:	695f      	ldr	r7, [r3, #20]
 8013460:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013462:	aa18      	add	r2, sp, #96	; 0x60
 8013464:	a917      	add	r1, sp, #92	; 0x5c
 8013466:	f000 ff95 	bl	8014394 <rcl_validate_enclave_name>
 801346a:	4606      	mov	r6, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	d1bb      	bne.n	80133e8 <rcl_init+0x130>
 8013470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013472:	bb23      	cbnz	r3, 80134be <rcl_init+0x206>
 8013474:	f8d9 1000 	ldr.w	r1, [r9]
 8013478:	694b      	ldr	r3, [r1, #20]
 801347a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801347c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013480:	f000 fad6 	bl	8013a30 <rcl_get_security_options_from_environment>
 8013484:	4606      	mov	r6, r0
 8013486:	2800      	cmp	r0, #0
 8013488:	d1ae      	bne.n	80133e8 <rcl_init+0x130>
 801348a:	f8d9 1000 	ldr.w	r1, [r9]
 801348e:	6948      	ldr	r0, [r1, #20]
 8013490:	3128      	adds	r1, #40	; 0x28
 8013492:	3018      	adds	r0, #24
 8013494:	f7f7 ffcc 	bl	800b430 <rmw_init>
 8013498:	4606      	mov	r6, r0
 801349a:	2800      	cmp	r0, #0
 801349c:	d0af      	beq.n	80133fe <rcl_init+0x146>
 801349e:	f7ff fd03 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 80134a2:	4606      	mov	r6, r0
 80134a4:	e7a0      	b.n	80133e8 <rcl_init+0x130>
 80134a6:	9600      	str	r6, [sp, #0]
 80134a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134b0:	480b      	ldr	r0, [pc, #44]	; (80134e0 <rcl_init+0x228>)
 80134b2:	f001 fe99 	bl	80151e8 <__atomic_store_8>
 80134b6:	2601      	movs	r6, #1
 80134b8:	e796      	b.n	80133e8 <rcl_init+0x130>
 80134ba:	260a      	movs	r6, #10
 80134bc:	e79f      	b.n	80133fe <rcl_init+0x146>
 80134be:	2601      	movs	r6, #1
 80134c0:	e792      	b.n	80133e8 <rcl_init+0x130>
 80134c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80134c6:	f003 fbc9 	bl	8016c5c <rcl_get_default_domain_id>
 80134ca:	4606      	mov	r6, r0
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d18b      	bne.n	80133e8 <rcl_init+0x130>
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	3301      	adds	r3, #1
 80134d4:	f8d9 3000 	ldr.w	r3, [r9]
 80134d8:	bf08      	it	eq
 80134da:	6278      	streq	r0, [r7, #36]	; 0x24
 80134dc:	695f      	ldr	r7, [r3, #20]
 80134de:	e7b2      	b.n	8013446 <rcl_init+0x18e>
 80134e0:	20000208 	.word	0x20000208

080134e4 <rcl_get_localhost_only>:
 80134e4:	2300      	movs	r3, #0
 80134e6:	b510      	push	{r4, lr}
 80134e8:	b082      	sub	sp, #8
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	b1b8      	cbz	r0, 801351e <rcl_get_localhost_only+0x3a>
 80134ee:	4604      	mov	r4, r0
 80134f0:	a901      	add	r1, sp, #4
 80134f2:	480c      	ldr	r0, [pc, #48]	; (8013524 <rcl_get_localhost_only+0x40>)
 80134f4:	f001 ff68 	bl	80153c8 <rcutils_get_env>
 80134f8:	b110      	cbz	r0, 8013500 <rcl_get_localhost_only+0x1c>
 80134fa:	2001      	movs	r0, #1
 80134fc:	b002      	add	sp, #8
 80134fe:	bd10      	pop	{r4, pc}
 8013500:	9b01      	ldr	r3, [sp, #4]
 8013502:	b113      	cbz	r3, 801350a <rcl_get_localhost_only+0x26>
 8013504:	781a      	ldrb	r2, [r3, #0]
 8013506:	2a31      	cmp	r2, #49	; 0x31
 8013508:	d004      	beq.n	8013514 <rcl_get_localhost_only+0x30>
 801350a:	2302      	movs	r3, #2
 801350c:	2000      	movs	r0, #0
 801350e:	7023      	strb	r3, [r4, #0]
 8013510:	b002      	add	sp, #8
 8013512:	bd10      	pop	{r4, pc}
 8013514:	785b      	ldrb	r3, [r3, #1]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d1f7      	bne.n	801350a <rcl_get_localhost_only+0x26>
 801351a:	2301      	movs	r3, #1
 801351c:	e7f6      	b.n	801350c <rcl_get_localhost_only+0x28>
 801351e:	200b      	movs	r0, #11
 8013520:	b002      	add	sp, #8
 8013522:	bd10      	pop	{r4, pc}
 8013524:	08019c08 	.word	0x08019c08

08013528 <rcl_get_zero_initialized_node>:
 8013528:	4603      	mov	r3, r0
 801352a:	4a03      	ldr	r2, [pc, #12]	; (8013538 <rcl_get_zero_initialized_node+0x10>)
 801352c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013530:	e883 0003 	stmia.w	r3, {r0, r1}
 8013534:	4618      	mov	r0, r3
 8013536:	4770      	bx	lr
 8013538:	08019c24 	.word	0x08019c24

0801353c <rcl_node_init>:
 801353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013540:	2700      	movs	r7, #0
 8013542:	b09b      	sub	sp, #108	; 0x6c
 8013544:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8013548:	4604      	mov	r4, r0
 801354a:	a815      	add	r0, sp, #84	; 0x54
 801354c:	460e      	mov	r6, r1
 801354e:	4615      	mov	r5, r2
 8013550:	4698      	mov	r8, r3
 8013552:	9713      	str	r7, [sp, #76]	; 0x4c
 8013554:	f003 fc90 	bl	8016e78 <rcl_guard_condition_get_default_options>
 8013558:	f1b9 0f00 	cmp.w	r9, #0
 801355c:	f000 80fa 	beq.w	8013754 <rcl_node_init+0x218>
 8013560:	f109 0a04 	add.w	sl, r9, #4
 8013564:	4650      	mov	r0, sl
 8013566:	f7f7 fb3b 	bl	800abe0 <rcutils_allocator_is_valid>
 801356a:	2800      	cmp	r0, #0
 801356c:	f000 80f2 	beq.w	8013754 <rcl_node_init+0x218>
 8013570:	2e00      	cmp	r6, #0
 8013572:	f000 80ef 	beq.w	8013754 <rcl_node_init+0x218>
 8013576:	2d00      	cmp	r5, #0
 8013578:	f000 80ec 	beq.w	8013754 <rcl_node_init+0x218>
 801357c:	2c00      	cmp	r4, #0
 801357e:	f000 80e9 	beq.w	8013754 <rcl_node_init+0x218>
 8013582:	6867      	ldr	r7, [r4, #4]
 8013584:	2f00      	cmp	r7, #0
 8013586:	f040 810f 	bne.w	80137a8 <rcl_node_init+0x26c>
 801358a:	f1b8 0f00 	cmp.w	r8, #0
 801358e:	f000 80e1 	beq.w	8013754 <rcl_node_init+0x218>
 8013592:	4640      	mov	r0, r8
 8013594:	f7ff fcac 	bl	8012ef0 <rcl_context_is_valid>
 8013598:	4683      	mov	fp, r0
 801359a:	2800      	cmp	r0, #0
 801359c:	f000 80df 	beq.w	801375e <rcl_node_init+0x222>
 80135a0:	463a      	mov	r2, r7
 80135a2:	4630      	mov	r0, r6
 80135a4:	a914      	add	r1, sp, #80	; 0x50
 80135a6:	9714      	str	r7, [sp, #80]	; 0x50
 80135a8:	f002 f8a0 	bl	80156ec <rmw_validate_node_name>
 80135ac:	4607      	mov	r7, r0
 80135ae:	2800      	cmp	r0, #0
 80135b0:	f040 80d1 	bne.w	8013756 <rcl_node_init+0x21a>
 80135b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80135b6:	2800      	cmp	r0, #0
 80135b8:	f040 8100 	bne.w	80137bc <rcl_node_init+0x280>
 80135bc:	4628      	mov	r0, r5
 80135be:	f7ec fe41 	bl	8000244 <strlen>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	f040 80cd 	bne.w	8013762 <rcl_node_init+0x226>
 80135c8:	4d8d      	ldr	r5, [pc, #564]	; (8013800 <rcl_node_init+0x2c4>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	4628      	mov	r0, r5
 80135ce:	a914      	add	r1, sp, #80	; 0x50
 80135d0:	f002 f86e 	bl	80156b0 <rmw_validate_namespace>
 80135d4:	4607      	mov	r7, r0
 80135d6:	2800      	cmp	r0, #0
 80135d8:	f040 80bd 	bne.w	8013756 <rcl_node_init+0x21a>
 80135dc:	4683      	mov	fp, r0
 80135de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f040 80ef 	bne.w	80137c4 <rcl_node_init+0x288>
 80135e6:	2030      	movs	r0, #48	; 0x30
 80135e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80135ec:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80135f0:	9307      	str	r3, [sp, #28]
 80135f2:	4790      	blx	r2
 80135f4:	4607      	mov	r7, r0
 80135f6:	6060      	str	r0, [r4, #4]
 80135f8:	2800      	cmp	r0, #0
 80135fa:	f000 80da 	beq.w	80137b2 <rcl_node_init+0x276>
 80135fe:	9b07      	ldr	r3, [sp, #28]
 8013600:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013604:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013608:	a80a      	add	r0, sp, #40	; 0x28
 801360a:	f000 f929 	bl	8013860 <rcl_node_get_default_options>
 801360e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8013612:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013616:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013618:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801361c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8013620:	4648      	mov	r0, r9
 8013622:	6861      	ldr	r1, [r4, #4]
 8013624:	f8c4 8000 	str.w	r8, [r4]
 8013628:	f000 f936 	bl	8013898 <rcl_node_options_copy>
 801362c:	2800      	cmp	r0, #0
 801362e:	d168      	bne.n	8013702 <rcl_node_init+0x1c6>
 8013630:	4628      	mov	r0, r5
 8013632:	f7ec fe07 	bl	8000244 <strlen>
 8013636:	4428      	add	r0, r5
 8013638:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801363c:	2b2f      	cmp	r3, #47	; 0x2f
 801363e:	f000 80c9 	beq.w	80137d4 <rcl_node_init+0x298>
 8013642:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8013646:	f44f 6700 	mov.w	r7, #2048	; 0x800
 801364a:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8013808 <rcl_node_init+0x2cc>
 801364e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013652:	9701      	str	r7, [sp, #4]
 8013654:	f8da 7010 	ldr.w	r7, [sl, #16]
 8013658:	f8cd c008 	str.w	ip, [sp, #8]
 801365c:	9700      	str	r7, [sp, #0]
 801365e:	6867      	ldr	r7, [r4, #4]
 8013660:	f001 fe78 	bl	8015354 <rcutils_format_string_limit>
 8013664:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013666:	6867      	ldr	r7, [r4, #4]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	1c59      	adds	r1, r3, #1
 801366c:	9313      	str	r3, [sp, #76]	; 0x4c
 801366e:	f000 80ba 	beq.w	80137e6 <rcl_node_init+0x2aa>
 8013672:	f8d8 2000 	ldr.w	r2, [r8]
 8013676:	61fb      	str	r3, [r7, #28]
 8013678:	6952      	ldr	r2, [r2, #20]
 801367a:	6821      	ldr	r1, [r4, #0]
 801367c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8013680:	6808      	ldr	r0, [r1, #0]
 8013682:	f1a2 0201 	sub.w	r2, r2, #1
 8013686:	fab2 f282 	clz	r2, r2
 801368a:	0952      	lsrs	r2, r2, #5
 801368c:	9200      	str	r2, [sp, #0]
 801368e:	4631      	mov	r1, r6
 8013690:	462a      	mov	r2, r5
 8013692:	3028      	adds	r0, #40	; 0x28
 8013694:	f7f8 f89e 	bl	800b7d4 <rmw_create_node>
 8013698:	6863      	ldr	r3, [r4, #4]
 801369a:	6238      	str	r0, [r7, #32]
 801369c:	6a18      	ldr	r0, [r3, #32]
 801369e:	2800      	cmp	r0, #0
 80136a0:	d031      	beq.n	8013706 <rcl_node_init+0x1ca>
 80136a2:	f7f8 f929 	bl	800b8f8 <rmw_node_get_graph_guard_condition>
 80136a6:	4607      	mov	r7, r0
 80136a8:	b358      	cbz	r0, 8013702 <rcl_node_init+0x1c6>
 80136aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80136ae:	2008      	movs	r0, #8
 80136b0:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80136b4:	6866      	ldr	r6, [r4, #4]
 80136b6:	4798      	blx	r3
 80136b8:	6863      	ldr	r3, [r4, #4]
 80136ba:	6270      	str	r0, [r6, #36]	; 0x24
 80136bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136be:	9207      	str	r2, [sp, #28]
 80136c0:	b30a      	cbz	r2, 8013706 <rcl_node_init+0x1ca>
 80136c2:	ae08      	add	r6, sp, #32
 80136c4:	4630      	mov	r0, r6
 80136c6:	f003 fafd 	bl	8016cc4 <rcl_get_zero_initialized_guard_condition>
 80136ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 80136ce:	9a07      	ldr	r2, [sp, #28]
 80136d0:	ae15      	add	r6, sp, #84	; 0x54
 80136d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80136d6:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80136da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80136dc:	6862      	ldr	r2, [r4, #4]
 80136de:	f8da 3000 	ldr.w	r3, [sl]
 80136e2:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 80136e6:	6033      	str	r3, [r6, #0]
 80136e8:	ab1a      	add	r3, sp, #104	; 0x68
 80136ea:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80136ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80136f2:	4639      	mov	r1, r7
 80136f4:	4660      	mov	r0, ip
 80136f6:	4642      	mov	r2, r8
 80136f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136fa:	f003 fb43 	bl	8016d84 <rcl_guard_condition_init_from_rmw>
 80136fe:	4607      	mov	r7, r0
 8013700:	b320      	cbz	r0, 801374c <rcl_node_init+0x210>
 8013702:	6863      	ldr	r3, [r4, #4]
 8013704:	b1f3      	cbz	r3, 8013744 <rcl_node_init+0x208>
 8013706:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013708:	b128      	cbz	r0, 8013716 <rcl_node_init+0x1da>
 801370a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801370e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013712:	4798      	blx	r3
 8013714:	6863      	ldr	r3, [r4, #4]
 8013716:	6a18      	ldr	r0, [r3, #32]
 8013718:	b110      	cbz	r0, 8013720 <rcl_node_init+0x1e4>
 801371a:	f7f8 f873 	bl	800b804 <rmw_destroy_node>
 801371e:	6863      	ldr	r3, [r4, #4]
 8013720:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013722:	b148      	cbz	r0, 8013738 <rcl_node_init+0x1fc>
 8013724:	f003 fb86 	bl	8016e34 <rcl_guard_condition_fini>
 8013728:	6862      	ldr	r2, [r4, #4]
 801372a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801372e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8013730:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013734:	4798      	blx	r3
 8013736:	6863      	ldr	r3, [r4, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801373e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013742:	4798      	blx	r3
 8013744:	2300      	movs	r3, #0
 8013746:	2701      	movs	r7, #1
 8013748:	e9c4 3300 	strd	r3, r3, [r4]
 801374c:	f1bb 0f00 	cmp.w	fp, #0
 8013750:	d123      	bne.n	801379a <rcl_node_init+0x25e>
 8013752:	e000      	b.n	8013756 <rcl_node_init+0x21a>
 8013754:	270b      	movs	r7, #11
 8013756:	4638      	mov	r0, r7
 8013758:	b01b      	add	sp, #108	; 0x6c
 801375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375e:	2765      	movs	r7, #101	; 0x65
 8013760:	e7f9      	b.n	8013756 <rcl_node_init+0x21a>
 8013762:	782b      	ldrb	r3, [r5, #0]
 8013764:	2b2f      	cmp	r3, #47	; 0x2f
 8013766:	f43f af30 	beq.w	80135ca <rcl_node_init+0x8e>
 801376a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801376e:	4a25      	ldr	r2, [pc, #148]	; (8013804 <rcl_node_init+0x2c8>)
 8013770:	f8da 3010 	ldr.w	r3, [sl, #16]
 8013774:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013778:	9503      	str	r5, [sp, #12]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8013780:	f001 fde8 	bl	8015354 <rcutils_format_string_limit>
 8013784:	4605      	mov	r5, r0
 8013786:	b360      	cbz	r0, 80137e2 <rcl_node_init+0x2a6>
 8013788:	2200      	movs	r2, #0
 801378a:	a914      	add	r1, sp, #80	; 0x50
 801378c:	9214      	str	r2, [sp, #80]	; 0x50
 801378e:	f001 ff8f 	bl	80156b0 <rmw_validate_namespace>
 8013792:	4607      	mov	r7, r0
 8013794:	2800      	cmp	r0, #0
 8013796:	f43f af22 	beq.w	80135de <rcl_node_init+0xa2>
 801379a:	4628      	mov	r0, r5
 801379c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80137a0:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80137a4:	4798      	blx	r3
 80137a6:	e7d6      	b.n	8013756 <rcl_node_init+0x21a>
 80137a8:	2764      	movs	r7, #100	; 0x64
 80137aa:	4638      	mov	r0, r7
 80137ac:	b01b      	add	sp, #108	; 0x6c
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	270a      	movs	r7, #10
 80137b4:	f1bb 0f00 	cmp.w	fp, #0
 80137b8:	d1ef      	bne.n	801379a <rcl_node_init+0x25e>
 80137ba:	e7cc      	b.n	8013756 <rcl_node_init+0x21a>
 80137bc:	f001 ffe8 	bl	8015790 <rmw_node_name_validation_result_string>
 80137c0:	27c9      	movs	r7, #201	; 0xc9
 80137c2:	e7c8      	b.n	8013756 <rcl_node_init+0x21a>
 80137c4:	4618      	mov	r0, r3
 80137c6:	f001 ff85 	bl	80156d4 <rmw_namespace_validation_result_string>
 80137ca:	27ca      	movs	r7, #202	; 0xca
 80137cc:	f1bb 0f00 	cmp.w	fp, #0
 80137d0:	d1e3      	bne.n	801379a <rcl_node_init+0x25e>
 80137d2:	e7c0      	b.n	8013756 <rcl_node_init+0x21a>
 80137d4:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80137d8:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80137dc:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801380c <rcl_node_init+0x2d0>
 80137e0:	e735      	b.n	801364e <rcl_node_init+0x112>
 80137e2:	270a      	movs	r7, #10
 80137e4:	e7b7      	b.n	8013756 <rcl_node_init+0x21a>
 80137e6:	a813      	add	r0, sp, #76	; 0x4c
 80137e8:	f003 fa38 	bl	8016c5c <rcl_get_default_domain_id>
 80137ec:	2800      	cmp	r0, #0
 80137ee:	d188      	bne.n	8013702 <rcl_node_init+0x1c6>
 80137f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137f2:	1c5a      	adds	r2, r3, #1
 80137f4:	bf09      	itett	eq
 80137f6:	4603      	moveq	r3, r0
 80137f8:	6867      	ldrne	r7, [r4, #4]
 80137fa:	6867      	ldreq	r7, [r4, #4]
 80137fc:	9013      	streq	r0, [sp, #76]	; 0x4c
 80137fe:	e738      	b.n	8013672 <rcl_node_init+0x136>
 8013800:	080198a0 	.word	0x080198a0
 8013804:	08019c20 	.word	0x08019c20
 8013808:	080198a4 	.word	0x080198a4
 801380c:	080198ec 	.word	0x080198ec

08013810 <rcl_node_is_valid>:
 8013810:	b130      	cbz	r0, 8013820 <rcl_node_is_valid+0x10>
 8013812:	6843      	ldr	r3, [r0, #4]
 8013814:	b123      	cbz	r3, 8013820 <rcl_node_is_valid+0x10>
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	b113      	cbz	r3, 8013820 <rcl_node_is_valid+0x10>
 801381a:	6800      	ldr	r0, [r0, #0]
 801381c:	f7ff bb68 	b.w	8012ef0 <rcl_context_is_valid>
 8013820:	2000      	movs	r0, #0
 8013822:	4770      	bx	lr

08013824 <rcl_node_get_name>:
 8013824:	b120      	cbz	r0, 8013830 <rcl_node_get_name+0xc>
 8013826:	6840      	ldr	r0, [r0, #4]
 8013828:	b110      	cbz	r0, 8013830 <rcl_node_get_name+0xc>
 801382a:	6a00      	ldr	r0, [r0, #32]
 801382c:	b100      	cbz	r0, 8013830 <rcl_node_get_name+0xc>
 801382e:	6880      	ldr	r0, [r0, #8]
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop

08013834 <rcl_node_get_namespace>:
 8013834:	b120      	cbz	r0, 8013840 <rcl_node_get_namespace+0xc>
 8013836:	6840      	ldr	r0, [r0, #4]
 8013838:	b110      	cbz	r0, 8013840 <rcl_node_get_namespace+0xc>
 801383a:	6a00      	ldr	r0, [r0, #32]
 801383c:	b100      	cbz	r0, 8013840 <rcl_node_get_namespace+0xc>
 801383e:	68c0      	ldr	r0, [r0, #12]
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop

08013844 <rcl_node_get_options>:
 8013844:	b128      	cbz	r0, 8013852 <rcl_node_get_options+0xe>
 8013846:	6840      	ldr	r0, [r0, #4]
 8013848:	b118      	cbz	r0, 8013852 <rcl_node_get_options+0xe>
 801384a:	6a03      	ldr	r3, [r0, #32]
 801384c:	2b00      	cmp	r3, #0
 801384e:	bf08      	it	eq
 8013850:	2000      	moveq	r0, #0
 8013852:	4770      	bx	lr

08013854 <rcl_node_get_rmw_handle>:
 8013854:	b110      	cbz	r0, 801385c <rcl_node_get_rmw_handle+0x8>
 8013856:	6840      	ldr	r0, [r0, #4]
 8013858:	b100      	cbz	r0, 801385c <rcl_node_get_rmw_handle+0x8>
 801385a:	6a00      	ldr	r0, [r0, #32]
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop

08013860 <rcl_node_get_default_options>:
 8013860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013864:	4680      	mov	r8, r0
 8013866:	b086      	sub	sp, #24
 8013868:	466d      	mov	r5, sp
 801386a:	4c0a      	ldr	r4, [pc, #40]	; (8013894 <rcl_node_get_default_options+0x34>)
 801386c:	4646      	mov	r6, r8
 801386e:	4627      	mov	r7, r4
 8013870:	4668      	mov	r0, sp
 8013872:	3404      	adds	r4, #4
 8013874:	f7f7 f9a6 	bl	800abc4 <rcutils_get_default_allocator>
 8013878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801387a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801387c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801387e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013880:	682b      	ldr	r3, [r5, #0]
 8013882:	6023      	str	r3, [r4, #0]
 8013884:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013888:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801388c:	4640      	mov	r0, r8
 801388e:	b006      	add	sp, #24
 8013890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013894:	20000210 	.word	0x20000210

08013898 <rcl_node_options_copy>:
 8013898:	b1d8      	cbz	r0, 80138d2 <rcl_node_options_copy+0x3a>
 801389a:	b4f0      	push	{r4, r5, r6, r7}
 801389c:	460f      	mov	r7, r1
 801389e:	b1a9      	cbz	r1, 80138cc <rcl_node_options_copy+0x34>
 80138a0:	4288      	cmp	r0, r1
 80138a2:	4606      	mov	r6, r0
 80138a4:	d012      	beq.n	80138cc <rcl_node_options_copy+0x34>
 80138a6:	4605      	mov	r5, r0
 80138a8:	460c      	mov	r4, r1
 80138aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ae:	f890 c018 	ldrb.w	ip, [r0, #24]
 80138b2:	f844 3b04 	str.w	r3, [r4], #4
 80138b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138ba:	7e73      	ldrb	r3, [r6, #25]
 80138bc:	682a      	ldr	r2, [r5, #0]
 80138be:	2000      	movs	r0, #0
 80138c0:	6022      	str	r2, [r4, #0]
 80138c2:	f887 c018 	strb.w	ip, [r7, #24]
 80138c6:	767b      	strb	r3, [r7, #25]
 80138c8:	bcf0      	pop	{r4, r5, r6, r7}
 80138ca:	4770      	bx	lr
 80138cc:	200b      	movs	r0, #11
 80138ce:	bcf0      	pop	{r4, r5, r6, r7}
 80138d0:	4770      	bx	lr
 80138d2:	200b      	movs	r0, #11
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop

080138d8 <exact_match_lookup>:
 80138d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138da:	460d      	mov	r5, r1
 80138dc:	4614      	mov	r4, r2
 80138de:	b085      	sub	sp, #20
 80138e0:	f102 0608 	add.w	r6, r2, #8
 80138e4:	4607      	mov	r7, r0
 80138e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80138ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80138ee:	4628      	mov	r0, r5
 80138f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80138f4:	4917      	ldr	r1, [pc, #92]	; (8013954 <exact_match_lookup+0x7c>)
 80138f6:	f001 fd1f 	bl	8015338 <rcutils_join_path>
 80138fa:	783b      	ldrb	r3, [r7, #0]
 80138fc:	4605      	mov	r5, r0
 80138fe:	2b2f      	cmp	r3, #47	; 0x2f
 8013900:	d021      	beq.n	8013946 <exact_match_lookup+0x6e>
 8013902:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013906:	e88d 0003 	stmia.w	sp, {r0, r1}
 801390a:	1c78      	adds	r0, r7, #1
 801390c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013910:	f001 fd18 	bl	8015344 <rcutils_to_native_path>
 8013914:	4603      	mov	r3, r0
 8013916:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801391a:	461e      	mov	r6, r3
 801391c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013920:	4631      	mov	r1, r6
 8013922:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013926:	4628      	mov	r0, r5
 8013928:	f001 fd06 	bl	8015338 <rcutils_join_path>
 801392c:	4607      	mov	r7, r0
 801392e:	6863      	ldr	r3, [r4, #4]
 8013930:	4630      	mov	r0, r6
 8013932:	6921      	ldr	r1, [r4, #16]
 8013934:	4798      	blx	r3
 8013936:	4628      	mov	r0, r5
 8013938:	463d      	mov	r5, r7
 801393a:	6863      	ldr	r3, [r4, #4]
 801393c:	6921      	ldr	r1, [r4, #16]
 801393e:	4798      	blx	r3
 8013940:	4628      	mov	r0, r5
 8013942:	b005      	add	sp, #20
 8013944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013946:	787b      	ldrb	r3, [r7, #1]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1da      	bne.n	8013902 <exact_match_lookup+0x2a>
 801394c:	4628      	mov	r0, r5
 801394e:	b005      	add	sp, #20
 8013950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013952:	bf00      	nop
 8013954:	08019c68 	.word	0x08019c68

08013958 <rcl_get_secure_root>:
 8013958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801395c:	b085      	sub	sp, #20
 801395e:	b168      	cbz	r0, 801397c <rcl_get_secure_root+0x24>
 8013960:	4607      	mov	r7, r0
 8013962:	4608      	mov	r0, r1
 8013964:	460c      	mov	r4, r1
 8013966:	f7f7 f93b 	bl	800abe0 <rcutils_allocator_is_valid>
 801396a:	b138      	cbz	r0, 801397c <rcl_get_secure_root+0x24>
 801396c:	2300      	movs	r3, #0
 801396e:	482e      	ldr	r0, [pc, #184]	; (8013a28 <rcl_get_secure_root+0xd0>)
 8013970:	a903      	add	r1, sp, #12
 8013972:	9303      	str	r3, [sp, #12]
 8013974:	f001 fd28 	bl	80153c8 <rcutils_get_env>
 8013978:	4605      	mov	r5, r0
 801397a:	b120      	cbz	r0, 8013986 <rcl_get_secure_root+0x2e>
 801397c:	2500      	movs	r5, #0
 801397e:	4628      	mov	r0, r5
 8013980:	b005      	add	sp, #20
 8013982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013986:	9e03      	ldr	r6, [sp, #12]
 8013988:	7833      	ldrb	r3, [r6, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d0f6      	beq.n	801397c <rcl_get_secure_root+0x24>
 801398e:	f104 090c 	add.w	r9, r4, #12
 8013992:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013996:	e88d 0003 	stmia.w	sp, {r0, r1}
 801399a:	4630      	mov	r0, r6
 801399c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80139a0:	f001 fdf2 	bl	8015588 <rcutils_strdup>
 80139a4:	4680      	mov	r8, r0
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d0e8      	beq.n	801397c <rcl_get_secure_root+0x24>
 80139aa:	4820      	ldr	r0, [pc, #128]	; (8013a2c <rcl_get_secure_root+0xd4>)
 80139ac:	a903      	add	r1, sp, #12
 80139ae:	9503      	str	r5, [sp, #12]
 80139b0:	f001 fd0a 	bl	80153c8 <rcutils_get_env>
 80139b4:	b160      	cbz	r0, 80139d0 <rcl_get_secure_root+0x78>
 80139b6:	2600      	movs	r6, #0
 80139b8:	4630      	mov	r0, r6
 80139ba:	6863      	ldr	r3, [r4, #4]
 80139bc:	6921      	ldr	r1, [r4, #16]
 80139be:	4798      	blx	r3
 80139c0:	4640      	mov	r0, r8
 80139c2:	6863      	ldr	r3, [r4, #4]
 80139c4:	6921      	ldr	r1, [r4, #16]
 80139c6:	4798      	blx	r3
 80139c8:	4628      	mov	r0, r5
 80139ca:	b005      	add	sp, #20
 80139cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80139d4:	f89c 6000 	ldrb.w	r6, [ip]
 80139d8:	b1f6      	cbz	r6, 8013a18 <rcl_get_secure_root+0xc0>
 80139da:	e899 0003 	ldmia.w	r9, {r0, r1}
 80139de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80139e2:	4660      	mov	r0, ip
 80139e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80139e8:	f001 fdce 	bl	8015588 <rcutils_strdup>
 80139ec:	4606      	mov	r6, r0
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d0e1      	beq.n	80139b6 <rcl_get_secure_root+0x5e>
 80139f2:	4622      	mov	r2, r4
 80139f4:	4641      	mov	r1, r8
 80139f6:	f7ff ff6f 	bl	80138d8 <exact_match_lookup>
 80139fa:	4605      	mov	r5, r0
 80139fc:	2d00      	cmp	r5, #0
 80139fe:	d0db      	beq.n	80139b8 <rcl_get_secure_root+0x60>
 8013a00:	4628      	mov	r0, r5
 8013a02:	f001 fc97 	bl	8015334 <rcutils_is_directory>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d1d5      	bne.n	80139b8 <rcl_get_secure_root+0x60>
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	6862      	ldr	r2, [r4, #4]
 8013a10:	6921      	ldr	r1, [r4, #16]
 8013a12:	461d      	mov	r5, r3
 8013a14:	4790      	blx	r2
 8013a16:	e7cf      	b.n	80139b8 <rcl_get_secure_root+0x60>
 8013a18:	4638      	mov	r0, r7
 8013a1a:	4622      	mov	r2, r4
 8013a1c:	4641      	mov	r1, r8
 8013a1e:	f7ff ff5b 	bl	80138d8 <exact_match_lookup>
 8013a22:	4605      	mov	r5, r0
 8013a24:	e7ea      	b.n	80139fc <rcl_get_secure_root+0xa4>
 8013a26:	bf00      	nop
 8013a28:	08019c74 	.word	0x08019c74
 8013a2c:	08019c8c 	.word	0x08019c8c

08013a30 <rcl_get_security_options_from_environment>:
 8013a30:	2300      	movs	r3, #0
 8013a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	4606      	mov	r6, r0
 8013a3a:	460f      	mov	r7, r1
 8013a3c:	4820      	ldr	r0, [pc, #128]	; (8013ac0 <rcl_get_security_options_from_environment+0x90>)
 8013a3e:	a901      	add	r1, sp, #4
 8013a40:	4690      	mov	r8, r2
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	f001 fcc0 	bl	80153c8 <rcutils_get_env>
 8013a48:	b120      	cbz	r0, 8013a54 <rcl_get_security_options_from_environment+0x24>
 8013a4a:	2501      	movs	r5, #1
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	b002      	add	sp, #8
 8013a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a54:	4604      	mov	r4, r0
 8013a56:	491b      	ldr	r1, [pc, #108]	; (8013ac4 <rcl_get_security_options_from_environment+0x94>)
 8013a58:	9801      	ldr	r0, [sp, #4]
 8013a5a:	f7ec fbe9 	bl	8000230 <strcmp>
 8013a5e:	4605      	mov	r5, r0
 8013a60:	b9e8      	cbnz	r0, 8013a9e <rcl_get_security_options_from_environment+0x6e>
 8013a62:	9001      	str	r0, [sp, #4]
 8013a64:	f1b8 0f00 	cmp.w	r8, #0
 8013a68:	d020      	beq.n	8013aac <rcl_get_security_options_from_environment+0x7c>
 8013a6a:	4817      	ldr	r0, [pc, #92]	; (8013ac8 <rcl_get_security_options_from_environment+0x98>)
 8013a6c:	a901      	add	r1, sp, #4
 8013a6e:	f001 fcab 	bl	80153c8 <rcutils_get_env>
 8013a72:	2800      	cmp	r0, #0
 8013a74:	d1e9      	bne.n	8013a4a <rcl_get_security_options_from_environment+0x1a>
 8013a76:	4915      	ldr	r1, [pc, #84]	; (8013acc <rcl_get_security_options_from_environment+0x9c>)
 8013a78:	9801      	ldr	r0, [sp, #4]
 8013a7a:	f7ec fbd9 	bl	8000230 <strcmp>
 8013a7e:	fab0 f080 	clz	r0, r0
 8013a82:	0940      	lsrs	r0, r0, #5
 8013a84:	f888 0000 	strb.w	r0, [r8]
 8013a88:	4639      	mov	r1, r7
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f7ff ff64 	bl	8013958 <rcl_get_secure_root>
 8013a90:	b170      	cbz	r0, 8013ab0 <rcl_get_security_options_from_environment+0x80>
 8013a92:	f8c8 0004 	str.w	r0, [r8, #4]
 8013a96:	4628      	mov	r0, r5
 8013a98:	b002      	add	sp, #8
 8013a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a9e:	4625      	mov	r5, r4
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f888 4000 	strb.w	r4, [r8]
 8013aa6:	b002      	add	sp, #8
 8013aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aac:	250b      	movs	r5, #11
 8013aae:	e7cd      	b.n	8013a4c <rcl_get_security_options_from_environment+0x1c>
 8013ab0:	f898 5000 	ldrb.w	r5, [r8]
 8013ab4:	f1a5 0501 	sub.w	r5, r5, #1
 8013ab8:	fab5 f585 	clz	r5, r5
 8013abc:	096d      	lsrs	r5, r5, #5
 8013abe:	e7c5      	b.n	8013a4c <rcl_get_security_options_from_environment+0x1c>
 8013ac0:	08019c2c 	.word	0x08019c2c
 8013ac4:	08019c40 	.word	0x08019c40
 8013ac8:	08019c48 	.word	0x08019c48
 8013acc:	08019c60 	.word	0x08019c60

08013ad0 <rcl_service_get_rmw_handle>:
 8013ad0:	b110      	cbz	r0, 8013ad8 <rcl_service_get_rmw_handle+0x8>
 8013ad2:	6800      	ldr	r0, [r0, #0]
 8013ad4:	b100      	cbz	r0, 8013ad8 <rcl_service_get_rmw_handle+0x8>
 8013ad6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop

08013adc <rcl_take_request>:
 8013adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ade:	460e      	mov	r6, r1
 8013ae0:	4607      	mov	r7, r0
 8013ae2:	b08d      	sub	sp, #52	; 0x34
 8013ae4:	ad06      	add	r5, sp, #24
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	4694      	mov	ip, r2
 8013aea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013aee:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8013af6:	b1e7      	cbz	r7, 8013b32 <rcl_take_request+0x56>
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	b1d3      	cbz	r3, 8013b32 <rcl_take_request+0x56>
 8013afc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013afe:	b1c0      	cbz	r0, 8013b32 <rcl_take_request+0x56>
 8013b00:	4662      	mov	r2, ip
 8013b02:	b30a      	cbz	r2, 8013b48 <rcl_take_request+0x6c>
 8013b04:	2500      	movs	r5, #0
 8013b06:	f10d 0307 	add.w	r3, sp, #7
 8013b0a:	a902      	add	r1, sp, #8
 8013b0c:	f88d 5007 	strb.w	r5, [sp, #7]
 8013b10:	f002 f810 	bl	8015b34 <rmw_take_request>
 8013b14:	4606      	mov	r6, r0
 8013b16:	b178      	cbz	r0, 8013b38 <rcl_take_request+0x5c>
 8013b18:	280a      	cmp	r0, #10
 8013b1a:	bf18      	it	ne
 8013b1c:	2601      	movne	r6, #1
 8013b1e:	ad06      	add	r5, sp, #24
 8013b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013b28:	e884 0003 	stmia.w	r4, {r0, r1}
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	b00d      	add	sp, #52	; 0x34
 8013b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b32:	f44f 7616 	mov.w	r6, #600	; 0x258
 8013b36:	e7f2      	b.n	8013b1e <rcl_take_request+0x42>
 8013b38:	f240 2359 	movw	r3, #601	; 0x259
 8013b3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013b40:	2a00      	cmp	r2, #0
 8013b42:	bf08      	it	eq
 8013b44:	461e      	moveq	r6, r3
 8013b46:	e7ea      	b.n	8013b1e <rcl_take_request+0x42>
 8013b48:	260b      	movs	r6, #11
 8013b4a:	e7e8      	b.n	8013b1e <rcl_take_request+0x42>

08013b4c <rcl_send_response>:
 8013b4c:	b160      	cbz	r0, 8013b68 <rcl_send_response+0x1c>
 8013b4e:	6800      	ldr	r0, [r0, #0]
 8013b50:	b150      	cbz	r0, 8013b68 <rcl_send_response+0x1c>
 8013b52:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013b54:	b140      	cbz	r0, 8013b68 <rcl_send_response+0x1c>
 8013b56:	b151      	cbz	r1, 8013b6e <rcl_send_response+0x22>
 8013b58:	b510      	push	{r4, lr}
 8013b5a:	b152      	cbz	r2, 8013b72 <rcl_send_response+0x26>
 8013b5c:	f002 f848 	bl	8015bf0 <rmw_send_response>
 8013b60:	3800      	subs	r0, #0
 8013b62:	bf18      	it	ne
 8013b64:	2001      	movne	r0, #1
 8013b66:	bd10      	pop	{r4, pc}
 8013b68:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013b6c:	4770      	bx	lr
 8013b6e:	200b      	movs	r0, #11
 8013b70:	4770      	bx	lr
 8013b72:	200b      	movs	r0, #11
 8013b74:	bd10      	pop	{r4, pc}
 8013b76:	bf00      	nop

08013b78 <rcl_get_system_time>:
 8013b78:	4608      	mov	r0, r1
 8013b7a:	f7f7 ba63 	b.w	800b044 <rcutils_system_time_now>
 8013b7e:	bf00      	nop

08013b80 <rcl_get_steady_time>:
 8013b80:	4608      	mov	r0, r1
 8013b82:	f7f7 ba87 	b.w	800b094 <rcutils_steady_time_now>
 8013b86:	bf00      	nop

08013b88 <rcl_get_ros_time>:
 8013b88:	7a03      	ldrb	r3, [r0, #8]
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	460c      	mov	r4, r1
 8013b8e:	b143      	cbz	r3, 8013ba2 <rcl_get_ros_time+0x1a>
 8013b90:	2105      	movs	r1, #5
 8013b92:	f001 faf5 	bl	8015180 <__atomic_load_8>
 8013b96:	4602      	mov	r2, r0
 8013b98:	460b      	mov	r3, r1
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	e9c4 2300 	strd	r2, r3, [r4]
 8013ba0:	bd10      	pop	{r4, pc}
 8013ba2:	4608      	mov	r0, r1
 8013ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba8:	f7f7 ba4c 	b.w	800b044 <rcutils_system_time_now>

08013bac <rcl_clock_init>:
 8013bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	4610      	mov	r0, r2
 8013bb4:	4614      	mov	r4, r2
 8013bb6:	460e      	mov	r6, r1
 8013bb8:	f7f7 f812 	bl	800abe0 <rcutils_allocator_is_valid>
 8013bbc:	b128      	cbz	r0, 8013bca <rcl_clock_init+0x1e>
 8013bbe:	2d03      	cmp	r5, #3
 8013bc0:	d803      	bhi.n	8013bca <rcl_clock_init+0x1e>
 8013bc2:	e8df f005 	tbb	[pc, r5]
 8013bc6:	2e1d      	.short	0x2e1d
 8013bc8:	0555      	.short	0x0555
 8013bca:	200b      	movs	r0, #11
 8013bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd0:	2e00      	cmp	r6, #0
 8013bd2:	d0fa      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013bd4:	2c00      	cmp	r4, #0
 8013bd6:	d0f8      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013bd8:	2700      	movs	r7, #0
 8013bda:	f04f 0c03 	mov.w	ip, #3
 8013bde:	7037      	strb	r7, [r6, #0]
 8013be0:	f106 0514 	add.w	r5, r6, #20
 8013be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013be6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013bea:	6137      	str	r7, [r6, #16]
 8013bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bee:	4b2a      	ldr	r3, [pc, #168]	; (8013c98 <rcl_clock_init+0xec>)
 8013bf0:	6822      	ldr	r2, [r4, #0]
 8013bf2:	4638      	mov	r0, r7
 8013bf4:	602a      	str	r2, [r5, #0]
 8013bf6:	f886 c000 	strb.w	ip, [r6]
 8013bfa:	60f3      	str	r3, [r6, #12]
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	2e00      	cmp	r6, #0
 8013c02:	d0e2      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013c04:	2700      	movs	r7, #0
 8013c06:	f106 0514 	add.w	r5, r6, #20
 8013c0a:	7037      	strb	r7, [r6, #0]
 8013c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c0e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013c12:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c18:	6823      	ldr	r3, [r4, #0]
 8013c1a:	4638      	mov	r0, r7
 8013c1c:	602b      	str	r3, [r5, #0]
 8013c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c22:	2e00      	cmp	r6, #0
 8013c24:	d0d1      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013c26:	2c00      	cmp	r4, #0
 8013c28:	d0cf      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013c2a:	f04f 0800 	mov.w	r8, #0
 8013c2e:	4627      	mov	r7, r4
 8013c30:	f886 8000 	strb.w	r8, [r6]
 8013c34:	f106 0514 	add.w	r5, r6, #20
 8013c38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013c3a:	e9c6 8801 	strd	r8, r8, [r6, #4]
 8013c3e:	e9c6 8803 	strd	r8, r8, [r6, #12]
 8013c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	6823      	ldr	r3, [r4, #0]
 8013c48:	602a      	str	r2, [r5, #0]
 8013c4a:	2010      	movs	r0, #16
 8013c4c:	6921      	ldr	r1, [r4, #16]
 8013c4e:	4798      	blx	r3
 8013c50:	4603      	mov	r3, r0
 8013c52:	6130      	str	r0, [r6, #16]
 8013c54:	b1e8      	cbz	r0, 8013c92 <rcl_clock_init+0xe6>
 8013c56:	2400      	movs	r4, #0
 8013c58:	2500      	movs	r5, #0
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	f880 8008 	strb.w	r8, [r0, #8]
 8013c60:	e9c3 4500 	strd	r4, r5, [r3]
 8013c64:	4b0d      	ldr	r3, [pc, #52]	; (8013c9c <rcl_clock_init+0xf0>)
 8013c66:	7032      	strb	r2, [r6, #0]
 8013c68:	4640      	mov	r0, r8
 8013c6a:	60f3      	str	r3, [r6, #12]
 8013c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c70:	2e00      	cmp	r6, #0
 8013c72:	d0aa      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013c74:	2c00      	cmp	r4, #0
 8013c76:	d0a8      	beq.n	8013bca <rcl_clock_init+0x1e>
 8013c78:	2700      	movs	r7, #0
 8013c7a:	f106 0514 	add.w	r5, r6, #20
 8013c7e:	7037      	strb	r7, [r6, #0]
 8013c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c82:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013c86:	6137      	str	r7, [r6, #16]
 8013c88:	f04f 0c02 	mov.w	ip, #2
 8013c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c8e:	4b04      	ldr	r3, [pc, #16]	; (8013ca0 <rcl_clock_init+0xf4>)
 8013c90:	e7ae      	b.n	8013bf0 <rcl_clock_init+0x44>
 8013c92:	200a      	movs	r0, #10
 8013c94:	e79a      	b.n	8013bcc <rcl_clock_init+0x20>
 8013c96:	bf00      	nop
 8013c98:	08013b81 	.word	0x08013b81
 8013c9c:	08013b89 	.word	0x08013b89
 8013ca0:	08013b79 	.word	0x08013b79

08013ca4 <rcl_clock_get_now>:
 8013ca4:	b140      	cbz	r0, 8013cb8 <rcl_clock_get_now+0x14>
 8013ca6:	b139      	cbz	r1, 8013cb8 <rcl_clock_get_now+0x14>
 8013ca8:	7803      	ldrb	r3, [r0, #0]
 8013caa:	b11b      	cbz	r3, 8013cb4 <rcl_clock_get_now+0x10>
 8013cac:	68c3      	ldr	r3, [r0, #12]
 8013cae:	b10b      	cbz	r3, 8013cb4 <rcl_clock_get_now+0x10>
 8013cb0:	6900      	ldr	r0, [r0, #16]
 8013cb2:	4718      	bx	r3
 8013cb4:	2001      	movs	r0, #1
 8013cb6:	4770      	bx	lr
 8013cb8:	200b      	movs	r0, #11
 8013cba:	4770      	bx	lr

08013cbc <rcl_clock_add_jump_callback>:
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc2:	a906      	add	r1, sp, #24
 8013cc4:	e881 000c 	stmia.w	r1, {r2, r3}
 8013cc8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8013ccc:	b338      	cbz	r0, 8013d1e <rcl_clock_add_jump_callback+0x62>
 8013cce:	4604      	mov	r4, r0
 8013cd0:	3014      	adds	r0, #20
 8013cd2:	f7f6 ff85 	bl	800abe0 <rcutils_allocator_is_valid>
 8013cd6:	b310      	cbz	r0, 8013d1e <rcl_clock_add_jump_callback+0x62>
 8013cd8:	b30e      	cbz	r6, 8013d1e <rcl_clock_add_jump_callback+0x62>
 8013cda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013cde:	2a00      	cmp	r2, #0
 8013ce0:	f173 0300 	sbcs.w	r3, r3, #0
 8013ce4:	db1b      	blt.n	8013d1e <rcl_clock_add_jump_callback+0x62>
 8013ce6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013cea:	2a01      	cmp	r2, #1
 8013cec:	f173 0300 	sbcs.w	r3, r3, #0
 8013cf0:	da15      	bge.n	8013d1e <rcl_clock_add_jump_callback+0x62>
 8013cf2:	68a7      	ldr	r7, [r4, #8]
 8013cf4:	2f00      	cmp	r7, #0
 8013cf6:	d03f      	beq.n	8013d78 <rcl_clock_add_jump_callback+0xbc>
 8013cf8:	6860      	ldr	r0, [r4, #4]
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f100 0220 	add.w	r2, r0, #32
 8013d00:	e003      	b.n	8013d0a <rcl_clock_add_jump_callback+0x4e>
 8013d02:	42bb      	cmp	r3, r7
 8013d04:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8013d08:	d00e      	beq.n	8013d28 <rcl_clock_add_jump_callback+0x6c>
 8013d0a:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	42b1      	cmp	r1, r6
 8013d12:	d1f6      	bne.n	8013d02 <rcl_clock_add_jump_callback+0x46>
 8013d14:	6811      	ldr	r1, [r2, #0]
 8013d16:	42a9      	cmp	r1, r5
 8013d18:	d1f3      	bne.n	8013d02 <rcl_clock_add_jump_callback+0x46>
 8013d1a:	2001      	movs	r0, #1
 8013d1c:	e000      	b.n	8013d20 <rcl_clock_add_jump_callback+0x64>
 8013d1e:	200b      	movs	r0, #11
 8013d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d24:	b002      	add	sp, #8
 8013d26:	4770      	bx	lr
 8013d28:	3301      	adds	r3, #1
 8013d2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013d2e:	00d9      	lsls	r1, r3, #3
 8013d30:	69e3      	ldr	r3, [r4, #28]
 8013d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013d34:	4798      	blx	r3
 8013d36:	b1e8      	cbz	r0, 8013d74 <rcl_clock_add_jump_callback+0xb8>
 8013d38:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8013d3c:	f10d 0c18 	add.w	ip, sp, #24
 8013d40:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8013d44:	eb00 08c3 	add.w	r8, r0, r3, lsl #3
 8013d48:	f108 0708 	add.w	r7, r8, #8
 8013d4c:	6060      	str	r0, [r4, #4]
 8013d4e:	f840 6033 	str.w	r6, [r0, r3, lsl #3]
 8013d52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013d58:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013d5c:	f10e 0301 	add.w	r3, lr, #1
 8013d60:	e887 0003 	stmia.w	r7, {r0, r1}
 8013d64:	f8c8 5020 	str.w	r5, [r8, #32]
 8013d68:	2000      	movs	r0, #0
 8013d6a:	60a3      	str	r3, [r4, #8]
 8013d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	b002      	add	sp, #8
 8013d72:	4770      	bx	lr
 8013d74:	200a      	movs	r0, #10
 8013d76:	e7d3      	b.n	8013d20 <rcl_clock_add_jump_callback+0x64>
 8013d78:	2128      	movs	r1, #40	; 0x28
 8013d7a:	6860      	ldr	r0, [r4, #4]
 8013d7c:	e7d8      	b.n	8013d30 <rcl_clock_add_jump_callback+0x74>
 8013d7e:	bf00      	nop

08013d80 <rcl_clock_remove_jump_callback>:
 8013d80:	2800      	cmp	r0, #0
 8013d82:	d057      	beq.n	8013e34 <rcl_clock_remove_jump_callback+0xb4>
 8013d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d88:	4607      	mov	r7, r0
 8013d8a:	3014      	adds	r0, #20
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	4615      	mov	r5, r2
 8013d90:	f7f6 ff26 	bl	800abe0 <rcutils_allocator_is_valid>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d03a      	beq.n	8013e0e <rcl_clock_remove_jump_callback+0x8e>
 8013d98:	2c00      	cmp	r4, #0
 8013d9a:	d038      	beq.n	8013e0e <rcl_clock_remove_jump_callback+0x8e>
 8013d9c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8013da0:	f1b8 0f00 	cmp.w	r8, #0
 8013da4:	d00c      	beq.n	8013dc0 <rcl_clock_remove_jump_callback+0x40>
 8013da6:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8013daa:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8013dae:	4676      	mov	r6, lr
 8013db0:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8013db4:	6833      	ldr	r3, [r6, #0]
 8013db6:	42a3      	cmp	r3, r4
 8013db8:	d005      	beq.n	8013dc6 <rcl_clock_remove_jump_callback+0x46>
 8013dba:	3628      	adds	r6, #40	; 0x28
 8013dbc:	45b4      	cmp	ip, r6
 8013dbe:	d1f9      	bne.n	8013db4 <rcl_clock_remove_jump_callback+0x34>
 8013dc0:	2001      	movs	r0, #1
 8013dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc6:	6a33      	ldr	r3, [r6, #32]
 8013dc8:	3628      	adds	r6, #40	; 0x28
 8013dca:	4566      	cmp	r6, ip
 8013dcc:	d02a      	beq.n	8013e24 <rcl_clock_remove_jump_callback+0xa4>
 8013dce:	42ab      	cmp	r3, r5
 8013dd0:	d1f0      	bne.n	8013db4 <rcl_clock_remove_jump_callback+0x34>
 8013dd2:	4635      	mov	r5, r6
 8013dd4:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8013dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013de0:	3628      	adds	r6, #40	; 0x28
 8013de2:	4566      	cmp	r6, ip
 8013de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013de8:	e884 0003 	stmia.w	r4, {r0, r1}
 8013dec:	d1f1      	bne.n	8013dd2 <rcl_clock_remove_jump_callback+0x52>
 8013dee:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8013df2:	60bc      	str	r4, [r7, #8]
 8013df4:	b174      	cbz	r4, 8013e14 <rcl_clock_remove_jump_callback+0x94>
 8013df6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8013dfa:	4670      	mov	r0, lr
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e00:	00e1      	lsls	r1, r4, #3
 8013e02:	4798      	blx	r3
 8013e04:	b1c0      	cbz	r0, 8013e38 <rcl_clock_remove_jump_callback+0xb8>
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	2000      	movs	r0, #0
 8013e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0e:	200b      	movs	r0, #11
 8013e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e14:	4670      	mov	r0, lr
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e1a:	4798      	blx	r3
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	607c      	str	r4, [r7, #4]
 8013e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e24:	42ab      	cmp	r3, r5
 8013e26:	d1cb      	bne.n	8013dc0 <rcl_clock_remove_jump_callback+0x40>
 8013e28:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8013e2c:	60bc      	str	r4, [r7, #8]
 8013e2e:	2c00      	cmp	r4, #0
 8013e30:	d1e1      	bne.n	8013df6 <rcl_clock_remove_jump_callback+0x76>
 8013e32:	e7ef      	b.n	8013e14 <rcl_clock_remove_jump_callback+0x94>
 8013e34:	200b      	movs	r0, #11
 8013e36:	4770      	bx	lr
 8013e38:	200a      	movs	r0, #10
 8013e3a:	e7e9      	b.n	8013e10 <rcl_clock_remove_jump_callback+0x90>

08013e3c <_rcl_timer_time_jump>:
 8013e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e40:	4683      	mov	fp, r0
 8013e42:	4614      	mov	r4, r2
 8013e44:	b085      	sub	sp, #20
 8013e46:	b131      	cbz	r1, 8013e56 <_rcl_timer_time_jump+0x1a>
 8013e48:	7803      	ldrb	r3, [r0, #0]
 8013e4a:	3b02      	subs	r3, #2
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	d940      	bls.n	8013ed2 <_rcl_timer_time_jump+0x96>
 8013e50:	b005      	add	sp, #20
 8013e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e56:	6813      	ldr	r3, [r2, #0]
 8013e58:	a902      	add	r1, sp, #8
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	f7ff ff22 	bl	8013ca4 <rcl_clock_get_now>
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d1f5      	bne.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013e64:	6820      	ldr	r0, [r4, #0]
 8013e66:	2105      	movs	r1, #5
 8013e68:	3020      	adds	r0, #32
 8013e6a:	f001 f989 	bl	8015180 <__atomic_load_8>
 8013e6e:	460b      	mov	r3, r1
 8013e70:	4680      	mov	r8, r0
 8013e72:	6820      	ldr	r0, [r4, #0]
 8013e74:	2105      	movs	r1, #5
 8013e76:	3028      	adds	r0, #40	; 0x28
 8013e78:	4699      	mov	r9, r3
 8013e7a:	f001 f981 	bl	8015180 <__atomic_load_8>
 8013e7e:	460b      	mov	r3, r1
 8013e80:	4606      	mov	r6, r0
 8013e82:	6820      	ldr	r0, [r4, #0]
 8013e84:	2105      	movs	r1, #5
 8013e86:	3018      	adds	r0, #24
 8013e88:	461f      	mov	r7, r3
 8013e8a:	f001 f979 	bl	8015180 <__atomic_load_8>
 8013e8e:	f89b 3000 	ldrb.w	r3, [fp]
 8013e92:	4605      	mov	r5, r0
 8013e94:	3b02      	subs	r3, #2
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	468a      	mov	sl, r1
 8013e9a:	d937      	bls.n	8013f0c <_rcl_timer_time_jump+0xd0>
 8013e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ea0:	42b0      	cmp	r0, r6
 8013ea2:	eb71 0307 	sbcs.w	r3, r1, r7
 8013ea6:	da5f      	bge.n	8013f68 <_rcl_timer_time_jump+0x12c>
 8013ea8:	4540      	cmp	r0, r8
 8013eaa:	eb71 0309 	sbcs.w	r3, r1, r9
 8013eae:	dacf      	bge.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013eb0:	2605      	movs	r6, #5
 8013eb2:	182a      	adds	r2, r5, r0
 8013eb4:	6820      	ldr	r0, [r4, #0]
 8013eb6:	eb4a 0301 	adc.w	r3, sl, r1
 8013eba:	9600      	str	r6, [sp, #0]
 8013ebc:	3028      	adds	r0, #40	; 0x28
 8013ebe:	f001 f993 	bl	80151e8 <__atomic_store_8>
 8013ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ec6:	6820      	ldr	r0, [r4, #0]
 8013ec8:	9600      	str	r6, [sp, #0]
 8013eca:	3020      	adds	r0, #32
 8013ecc:	f001 f98c 	bl	80151e8 <__atomic_store_8>
 8013ed0:	e7be      	b.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013ed2:	6813      	ldr	r3, [r2, #0]
 8013ed4:	a902      	add	r1, sp, #8
 8013ed6:	6818      	ldr	r0, [r3, #0]
 8013ed8:	f7ff fee4 	bl	8013ca4 <rcl_clock_get_now>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d1b7      	bne.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	d0b3      	beq.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013ee8:	6820      	ldr	r0, [r4, #0]
 8013eea:	2105      	movs	r1, #5
 8013eec:	3028      	adds	r0, #40	; 0x28
 8013eee:	f001 f947 	bl	8015180 <__atomic_load_8>
 8013ef2:	2505      	movs	r5, #5
 8013ef4:	9a02      	ldr	r2, [sp, #8]
 8013ef6:	6824      	ldr	r4, [r4, #0]
 8013ef8:	9b03      	ldr	r3, [sp, #12]
 8013efa:	1a82      	subs	r2, r0, r2
 8013efc:	eb61 0303 	sbc.w	r3, r1, r3
 8013f00:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013f04:	9500      	str	r5, [sp, #0]
 8013f06:	f001 f96f 	bl	80151e8 <__atomic_store_8>
 8013f0a:	e7a1      	b.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f10:	4313      	orrs	r3, r2
 8013f12:	d09d      	beq.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013f14:	f04f 0805 	mov.w	r8, #5
 8013f18:	6820      	ldr	r0, [r4, #0]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f8cd 8000 	str.w	r8, [sp]
 8013f22:	3030      	adds	r0, #48	; 0x30
 8013f24:	f001 f994 	bl	8015250 <__atomic_exchange_8>
 8013f28:	4606      	mov	r6, r0
 8013f2a:	460f      	mov	r7, r1
 8013f2c:	ea56 0307 	orrs.w	r3, r6, r7
 8013f30:	d08e      	beq.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f36:	1a12      	subs	r2, r2, r0
 8013f38:	6820      	ldr	r0, [r4, #0]
 8013f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8013f3e:	1952      	adds	r2, r2, r5
 8013f40:	eb43 030a 	adc.w	r3, r3, sl
 8013f44:	f8cd 8000 	str.w	r8, [sp]
 8013f48:	3028      	adds	r0, #40	; 0x28
 8013f4a:	f001 f94d 	bl	80151e8 <__atomic_store_8>
 8013f4e:	9a02      	ldr	r2, [sp, #8]
 8013f50:	6820      	ldr	r0, [r4, #0]
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	1b92      	subs	r2, r2, r6
 8013f56:	f100 0020 	add.w	r0, r0, #32
 8013f5a:	f8cd 8000 	str.w	r8, [sp]
 8013f5e:	eb63 0307 	sbc.w	r3, r3, r7
 8013f62:	f001 f941 	bl	80151e8 <__atomic_store_8>
 8013f66:	e773      	b.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013f68:	6820      	ldr	r0, [r4, #0]
 8013f6a:	3008      	adds	r0, #8
 8013f6c:	f002 ff9c 	bl	8016ea8 <rcl_trigger_guard_condition>
 8013f70:	e76e      	b.n	8013e50 <_rcl_timer_time_jump+0x14>
 8013f72:	bf00      	nop

08013f74 <rcl_get_zero_initialized_timer>:
 8013f74:	4b01      	ldr	r3, [pc, #4]	; (8013f7c <rcl_get_zero_initialized_timer+0x8>)
 8013f76:	6818      	ldr	r0, [r3, #0]
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	08019cac 	.word	0x08019cac

08013f80 <rcl_timer_init>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	b0ab      	sub	sp, #172	; 0xac
 8013f86:	4604      	mov	r4, r0
 8013f88:	a837      	add	r0, sp, #220	; 0xdc
 8013f8a:	460d      	mov	r5, r1
 8013f8c:	4617      	mov	r7, r2
 8013f8e:	f7f6 fe27 	bl	800abe0 <rcutils_allocator_is_valid>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d06a      	beq.n	801406c <rcl_timer_init+0xec>
 8013f96:	2c00      	cmp	r4, #0
 8013f98:	d068      	beq.n	801406c <rcl_timer_init+0xec>
 8013f9a:	2d00      	cmp	r5, #0
 8013f9c:	d066      	beq.n	801406c <rcl_timer_init+0xec>
 8013f9e:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8013fa2:	2a00      	cmp	r2, #0
 8013fa4:	f173 0300 	sbcs.w	r3, r3, #0
 8013fa8:	db60      	blt.n	801406c <rcl_timer_init+0xec>
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	b123      	cbz	r3, 8013fb8 <rcl_timer_init+0x38>
 8013fae:	2664      	movs	r6, #100	; 0x64
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	b02b      	add	sp, #172	; 0xac
 8013fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb8:	4628      	mov	r0, r5
 8013fba:	a908      	add	r1, sp, #32
 8013fbc:	f7ff fe72 	bl	8013ca4 <rcl_clock_get_now>
 8013fc0:	4606      	mov	r6, r0
 8013fc2:	2800      	cmp	r0, #0
 8013fc4:	d1f4      	bne.n	8013fb0 <rcl_timer_init+0x30>
 8013fc6:	f10d 0b18 	add.w	fp, sp, #24
 8013fca:	ae0b      	add	r6, sp, #44	; 0x2c
 8013fcc:	4658      	mov	r0, fp
 8013fce:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8013fd2:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
 8013fd6:	f002 fe75 	bl	8016cc4 <rcl_get_zero_initialized_guard_condition>
 8013fda:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8013fde:	e88a 0003 	stmia.w	sl, {r0, r1}
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f002 ff48 	bl	8016e78 <rcl_guard_condition_get_default_options>
 8013fe8:	ab0d      	add	r3, sp, #52	; 0x34
 8013fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013fee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013ff2:	4639      	mov	r1, r7
 8013ff4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013ff8:	4650      	mov	r0, sl
 8013ffa:	f002 fe6d 	bl	8016cd8 <rcl_guard_condition_init>
 8013ffe:	4606      	mov	r6, r0
 8014000:	2800      	cmp	r0, #0
 8014002:	d1d5      	bne.n	8013fb0 <rcl_timer_init+0x30>
 8014004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014006:	781f      	ldrb	r7, [r3, #0]
 8014008:	2f01      	cmp	r7, #1
 801400a:	d034      	beq.n	8014076 <rcl_timer_init+0xf6>
 801400c:	9b08      	ldr	r3, [sp, #32]
 801400e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8014010:	af37      	add	r7, sp, #220	; 0xdc
 8014012:	eb13 0802 	adds.w	r8, r3, r2
 8014016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014018:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801401a:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 801401e:	eb43 0902 	adc.w	r9, r3, r2
 8014022:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801402c:	f04f 0e00 	mov.w	lr, #0
 8014030:	921a      	str	r2, [sp, #104]	; 0x68
 8014032:	2100      	movs	r1, #0
 8014034:	f8cc 3000 	str.w	r3, [ip]
 8014038:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801403c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8014040:	2200      	movs	r2, #0
 8014042:	4603      	mov	r3, r0
 8014044:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
 8014048:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801404c:	2050      	movs	r0, #80	; 0x50
 801404e:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 8014052:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8014056:	993b      	ldr	r1, [sp, #236]	; 0xec
 8014058:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
 801405c:	4798      	blx	r3
 801405e:	6020      	str	r0, [r4, #0]
 8014060:	b358      	cbz	r0, 80140ba <rcl_timer_init+0x13a>
 8014062:	2250      	movs	r2, #80	; 0x50
 8014064:	a916      	add	r1, sp, #88	; 0x58
 8014066:	f002 fff5 	bl	8017054 <memcpy>
 801406a:	e7a1      	b.n	8013fb0 <rcl_timer_init+0x30>
 801406c:	260b      	movs	r6, #11
 801406e:	4630      	mov	r0, r6
 8014070:	b02b      	add	sp, #172	; 0xac
 8014072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014076:	2001      	movs	r0, #1
 8014078:	2100      	movs	r1, #0
 801407a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801407e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014082:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8014086:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801408a:	f8df c044 	ldr.w	ip, [pc, #68]	; 80140d0 <rcl_timer_init+0x150>
 801408e:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
 8014092:	9405      	str	r4, [sp, #20]
 8014094:	ab12      	add	r3, sp, #72	; 0x48
 8014096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014098:	f8cd c010 	str.w	ip, [sp, #16]
 801409c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80140a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80140a4:	4628      	mov	r0, r5
 80140a6:	f7ff fe09 	bl	8013cbc <rcl_clock_add_jump_callback>
 80140aa:	4607      	mov	r7, r0
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d0ad      	beq.n	801400c <rcl_timer_init+0x8c>
 80140b0:	4650      	mov	r0, sl
 80140b2:	f002 febf 	bl	8016e34 <rcl_guard_condition_fini>
 80140b6:	463e      	mov	r6, r7
 80140b8:	e77a      	b.n	8013fb0 <rcl_timer_init+0x30>
 80140ba:	4650      	mov	r0, sl
 80140bc:	f002 feba 	bl	8016e34 <rcl_guard_condition_fini>
 80140c0:	4622      	mov	r2, r4
 80140c2:	4628      	mov	r0, r5
 80140c4:	4902      	ldr	r1, [pc, #8]	; (80140d0 <rcl_timer_init+0x150>)
 80140c6:	f7ff fe5b 	bl	8013d80 <rcl_clock_remove_jump_callback>
 80140ca:	260a      	movs	r6, #10
 80140cc:	e770      	b.n	8013fb0 <rcl_timer_init+0x30>
 80140ce:	bf00      	nop
 80140d0:	08013e3d 	.word	0x08013e3d

080140d4 <rcl_timer_call>:
 80140d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d8:	b08b      	sub	sp, #44	; 0x2c
 80140da:	2800      	cmp	r0, #0
 80140dc:	d070      	beq.n	80141c0 <rcl_timer_call+0xec>
 80140de:	6803      	ldr	r3, [r0, #0]
 80140e0:	f3bf 8f5b 	dmb	ish
 80140e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80140e8:	4604      	mov	r4, r0
 80140ea:	f3bf 8f5b 	dmb	ish
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d15b      	bne.n	80141aa <rcl_timer_call+0xd6>
 80140f2:	6803      	ldr	r3, [r0, #0]
 80140f4:	a908      	add	r1, sp, #32
 80140f6:	6818      	ldr	r0, [r3, #0]
 80140f8:	f7ff fdd4 	bl	8013ca4 <rcl_clock_get_now>
 80140fc:	4605      	mov	r5, r0
 80140fe:	2800      	cmp	r0, #0
 8014100:	d14f      	bne.n	80141a2 <rcl_timer_call+0xce>
 8014102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014106:	2a00      	cmp	r2, #0
 8014108:	f173 0100 	sbcs.w	r1, r3, #0
 801410c:	db53      	blt.n	80141b6 <rcl_timer_call+0xe2>
 801410e:	2605      	movs	r6, #5
 8014110:	6820      	ldr	r0, [r4, #0]
 8014112:	9600      	str	r6, [sp, #0]
 8014114:	3020      	adds	r0, #32
 8014116:	f001 f89b 	bl	8015250 <__atomic_exchange_8>
 801411a:	6822      	ldr	r2, [r4, #0]
 801411c:	f3bf 8f5b 	dmb	ish
 8014120:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014124:	f3bf 8f5b 	dmb	ish
 8014128:	460b      	mov	r3, r1
 801412a:	4682      	mov	sl, r0
 801412c:	6820      	ldr	r0, [r4, #0]
 801412e:	4631      	mov	r1, r6
 8014130:	3028      	adds	r0, #40	; 0x28
 8014132:	9305      	str	r3, [sp, #20]
 8014134:	f001 f824 	bl	8015180 <__atomic_load_8>
 8014138:	4603      	mov	r3, r0
 801413a:	460a      	mov	r2, r1
 801413c:	6820      	ldr	r0, [r4, #0]
 801413e:	4631      	mov	r1, r6
 8014140:	3018      	adds	r0, #24
 8014142:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014146:	f001 f81b 	bl	8015180 <__atomic_load_8>
 801414a:	4684      	mov	ip, r0
 801414c:	468e      	mov	lr, r1
 801414e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014152:	9b04      	ldr	r3, [sp, #16]
 8014154:	9a03      	ldr	r2, [sp, #12]
 8014156:	eb13 080c 	adds.w	r8, r3, ip
 801415a:	eb42 090e 	adc.w	r9, r2, lr
 801415e:	4580      	cmp	r8, r0
 8014160:	eb79 0301 	sbcs.w	r3, r9, r1
 8014164:	4666      	mov	r6, ip
 8014166:	4677      	mov	r7, lr
 8014168:	460a      	mov	r2, r1
 801416a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801416e:	da04      	bge.n	801417a <rcl_timer_call+0xa6>
 8014170:	ea56 0307 	orrs.w	r3, r6, r7
 8014174:	d129      	bne.n	80141ca <rcl_timer_call+0xf6>
 8014176:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801417a:	2105      	movs	r1, #5
 801417c:	6820      	ldr	r0, [r4, #0]
 801417e:	4642      	mov	r2, r8
 8014180:	464b      	mov	r3, r9
 8014182:	9100      	str	r1, [sp, #0]
 8014184:	3028      	adds	r0, #40	; 0x28
 8014186:	f001 f82f 	bl	80151e8 <__atomic_store_8>
 801418a:	f1bb 0f00 	cmp.w	fp, #0
 801418e:	d008      	beq.n	80141a2 <rcl_timer_call+0xce>
 8014190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014194:	9905      	ldr	r1, [sp, #20]
 8014196:	ebb2 020a 	subs.w	r2, r2, sl
 801419a:	4620      	mov	r0, r4
 801419c:	eb63 0301 	sbc.w	r3, r3, r1
 80141a0:	47d8      	blx	fp
 80141a2:	4628      	mov	r0, r5
 80141a4:	b00b      	add	sp, #44	; 0x2c
 80141a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141aa:	f240 3521 	movw	r5, #801	; 0x321
 80141ae:	4628      	mov	r0, r5
 80141b0:	b00b      	add	sp, #44	; 0x2c
 80141b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b6:	2501      	movs	r5, #1
 80141b8:	4628      	mov	r0, r5
 80141ba:	b00b      	add	sp, #44	; 0x2c
 80141bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c0:	250b      	movs	r5, #11
 80141c2:	4628      	mov	r0, r5
 80141c4:	b00b      	add	sp, #44	; 0x2c
 80141c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ca:	ebb0 0008 	subs.w	r0, r0, r8
 80141ce:	eb62 0109 	sbc.w	r1, r2, r9
 80141d2:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80141d6:	4673      	mov	r3, lr
 80141d8:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80141dc:	4662      	mov	r2, ip
 80141de:	f7ec fabd 	bl	800075c <__aeabi_ldivmod>
 80141e2:	fb00 7307 	mla	r3, r0, r7, r7
 80141e6:	3001      	adds	r0, #1
 80141e8:	f141 0100 	adc.w	r1, r1, #0
 80141ec:	fb06 3101 	mla	r1, r6, r1, r3
 80141f0:	fba0 6706 	umull	r6, r7, r0, r6
 80141f4:	440f      	add	r7, r1
 80141f6:	eb18 0806 	adds.w	r8, r8, r6
 80141fa:	eb49 0907 	adc.w	r9, r9, r7
 80141fe:	e7bc      	b.n	801417a <rcl_timer_call+0xa6>

08014200 <rcl_timer_is_ready>:
 8014200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014204:	b082      	sub	sp, #8
 8014206:	b310      	cbz	r0, 801424e <rcl_timer_is_ready+0x4e>
 8014208:	4688      	mov	r8, r1
 801420a:	b301      	cbz	r1, 801424e <rcl_timer_is_ready+0x4e>
 801420c:	6803      	ldr	r3, [r0, #0]
 801420e:	4604      	mov	r4, r0
 8014210:	4669      	mov	r1, sp
 8014212:	6818      	ldr	r0, [r3, #0]
 8014214:	f7ff fd46 	bl	8013ca4 <rcl_clock_get_now>
 8014218:	4605      	mov	r5, r0
 801421a:	b118      	cbz	r0, 8014224 <rcl_timer_is_ready+0x24>
 801421c:	4628      	mov	r0, r5
 801421e:	b002      	add	sp, #8
 8014220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014224:	6820      	ldr	r0, [r4, #0]
 8014226:	2105      	movs	r1, #5
 8014228:	3028      	adds	r0, #40	; 0x28
 801422a:	f000 ffa9 	bl	8015180 <__atomic_load_8>
 801422e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014232:	1ac6      	subs	r6, r0, r3
 8014234:	eb61 0702 	sbc.w	r7, r1, r2
 8014238:	2e01      	cmp	r6, #1
 801423a:	f177 0300 	sbcs.w	r3, r7, #0
 801423e:	db0b      	blt.n	8014258 <rcl_timer_is_ready+0x58>
 8014240:	462b      	mov	r3, r5
 8014242:	4628      	mov	r0, r5
 8014244:	f888 3000 	strb.w	r3, [r8]
 8014248:	b002      	add	sp, #8
 801424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424e:	250b      	movs	r5, #11
 8014250:	4628      	mov	r0, r5
 8014252:	b002      	add	sp, #8
 8014254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014258:	6823      	ldr	r3, [r4, #0]
 801425a:	f3bf 8f5b 	dmb	ish
 801425e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014262:	f3bf 8f5b 	dmb	ish
 8014266:	fab3 f383 	clz	r3, r3
 801426a:	095b      	lsrs	r3, r3, #5
 801426c:	e7e9      	b.n	8014242 <rcl_timer_is_ready+0x42>
 801426e:	bf00      	nop

08014270 <rcl_timer_get_time_until_next_call>:
 8014270:	b570      	push	{r4, r5, r6, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	b1d8      	cbz	r0, 80142ae <rcl_timer_get_time_until_next_call+0x3e>
 8014276:	460d      	mov	r5, r1
 8014278:	b1c9      	cbz	r1, 80142ae <rcl_timer_get_time_until_next_call+0x3e>
 801427a:	6803      	ldr	r3, [r0, #0]
 801427c:	4604      	mov	r4, r0
 801427e:	4669      	mov	r1, sp
 8014280:	6818      	ldr	r0, [r3, #0]
 8014282:	f7ff fd0f 	bl	8013ca4 <rcl_clock_get_now>
 8014286:	4606      	mov	r6, r0
 8014288:	b110      	cbz	r0, 8014290 <rcl_timer_get_time_until_next_call+0x20>
 801428a:	4630      	mov	r0, r6
 801428c:	b002      	add	sp, #8
 801428e:	bd70      	pop	{r4, r5, r6, pc}
 8014290:	6820      	ldr	r0, [r4, #0]
 8014292:	2105      	movs	r1, #5
 8014294:	3028      	adds	r0, #40	; 0x28
 8014296:	f000 ff73 	bl	8015180 <__atomic_load_8>
 801429a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801429e:	1ac0      	subs	r0, r0, r3
 80142a0:	eb61 0102 	sbc.w	r1, r1, r2
 80142a4:	e9c5 0100 	strd	r0, r1, [r5]
 80142a8:	4630      	mov	r0, r6
 80142aa:	b002      	add	sp, #8
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
 80142ae:	260b      	movs	r6, #11
 80142b0:	4630      	mov	r0, r6
 80142b2:	b002      	add	sp, #8
 80142b4:	bd70      	pop	{r4, r5, r6, pc}
 80142b6:	bf00      	nop

080142b8 <rcl_timer_is_canceled>:
 80142b8:	b168      	cbz	r0, 80142d6 <rcl_timer_is_canceled+0x1e>
 80142ba:	b161      	cbz	r1, 80142d6 <rcl_timer_is_canceled+0x1e>
 80142bc:	6803      	ldr	r3, [r0, #0]
 80142be:	f3bf 8f5b 	dmb	ish
 80142c2:	2000      	movs	r0, #0
 80142c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80142c8:	f3bf 8f5b 	dmb	ish
 80142cc:	1a1b      	subs	r3, r3, r0
 80142ce:	bf18      	it	ne
 80142d0:	2301      	movne	r3, #1
 80142d2:	700b      	strb	r3, [r1, #0]
 80142d4:	4770      	bx	lr
 80142d6:	200b      	movs	r0, #11
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop

080142dc <rcl_timer_get_guard_condition>:
 80142dc:	b130      	cbz	r0, 80142ec <rcl_timer_get_guard_condition+0x10>
 80142de:	6800      	ldr	r0, [r0, #0]
 80142e0:	b120      	cbz	r0, 80142ec <rcl_timer_get_guard_condition+0x10>
 80142e2:	68c3      	ldr	r3, [r0, #12]
 80142e4:	b10b      	cbz	r3, 80142ea <rcl_timer_get_guard_condition+0xe>
 80142e6:	3008      	adds	r0, #8
 80142e8:	4770      	bx	lr
 80142ea:	4618      	mov	r0, r3
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop

080142f0 <rcl_validate_enclave_name_with_size>:
 80142f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142f2:	b0c3      	sub	sp, #268	; 0x10c
 80142f4:	b1d0      	cbz	r0, 801432c <rcl_validate_enclave_name_with_size+0x3c>
 80142f6:	4615      	mov	r5, r2
 80142f8:	b1c2      	cbz	r2, 801432c <rcl_validate_enclave_name_with_size+0x3c>
 80142fa:	461f      	mov	r7, r3
 80142fc:	466a      	mov	r2, sp
 80142fe:	ab01      	add	r3, sp, #4
 8014300:	460e      	mov	r6, r1
 8014302:	f001 f987 	bl	8015614 <rmw_validate_namespace_with_size>
 8014306:	4604      	mov	r4, r0
 8014308:	b9e0      	cbnz	r0, 8014344 <rcl_validate_enclave_name_with_size+0x54>
 801430a:	9b00      	ldr	r3, [sp, #0]
 801430c:	b923      	cbnz	r3, 8014318 <rcl_validate_enclave_name_with_size+0x28>
 801430e:	2300      	movs	r3, #0
 8014310:	602b      	str	r3, [r5, #0]
 8014312:	4620      	mov	r0, r4
 8014314:	b043      	add	sp, #268	; 0x10c
 8014316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014318:	2b07      	cmp	r3, #7
 801431a:	d00b      	beq.n	8014334 <rcl_validate_enclave_name_with_size+0x44>
 801431c:	1e5a      	subs	r2, r3, #1
 801431e:	2a05      	cmp	r2, #5
 8014320:	d82e      	bhi.n	8014380 <rcl_validate_enclave_name_with_size+0x90>
 8014322:	e8df f002 	tbb	[pc, r2]
 8014326:	211e      	.short	0x211e
 8014328:	152a2724 	.word	0x152a2724
 801432c:	240b      	movs	r4, #11
 801432e:	4620      	mov	r0, r4
 8014330:	b043      	add	sp, #268	; 0x10c
 8014332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014334:	2eff      	cmp	r6, #255	; 0xff
 8014336:	d9ea      	bls.n	801430e <rcl_validate_enclave_name_with_size+0x1e>
 8014338:	602b      	str	r3, [r5, #0]
 801433a:	2f00      	cmp	r7, #0
 801433c:	d0e9      	beq.n	8014312 <rcl_validate_enclave_name_with_size+0x22>
 801433e:	23fe      	movs	r3, #254	; 0xfe
 8014340:	603b      	str	r3, [r7, #0]
 8014342:	e7e6      	b.n	8014312 <rcl_validate_enclave_name_with_size+0x22>
 8014344:	f7fe fdb0 	bl	8012ea8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014348:	4604      	mov	r4, r0
 801434a:	4620      	mov	r0, r4
 801434c:	b043      	add	sp, #268	; 0x10c
 801434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014350:	2306      	movs	r3, #6
 8014352:	602b      	str	r3, [r5, #0]
 8014354:	2f00      	cmp	r7, #0
 8014356:	d0dc      	beq.n	8014312 <rcl_validate_enclave_name_with_size+0x22>
 8014358:	4620      	mov	r0, r4
 801435a:	9b01      	ldr	r3, [sp, #4]
 801435c:	603b      	str	r3, [r7, #0]
 801435e:	b043      	add	sp, #268	; 0x10c
 8014360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014362:	2301      	movs	r3, #1
 8014364:	602b      	str	r3, [r5, #0]
 8014366:	e7f5      	b.n	8014354 <rcl_validate_enclave_name_with_size+0x64>
 8014368:	2302      	movs	r3, #2
 801436a:	602b      	str	r3, [r5, #0]
 801436c:	e7f2      	b.n	8014354 <rcl_validate_enclave_name_with_size+0x64>
 801436e:	2303      	movs	r3, #3
 8014370:	602b      	str	r3, [r5, #0]
 8014372:	e7ef      	b.n	8014354 <rcl_validate_enclave_name_with_size+0x64>
 8014374:	2304      	movs	r3, #4
 8014376:	602b      	str	r3, [r5, #0]
 8014378:	e7ec      	b.n	8014354 <rcl_validate_enclave_name_with_size+0x64>
 801437a:	2305      	movs	r3, #5
 801437c:	602b      	str	r3, [r5, #0]
 801437e:	e7e9      	b.n	8014354 <rcl_validate_enclave_name_with_size+0x64>
 8014380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014384:	4a02      	ldr	r2, [pc, #8]	; (8014390 <rcl_validate_enclave_name_with_size+0xa0>)
 8014386:	a802      	add	r0, sp, #8
 8014388:	f001 f8d0 	bl	801552c <rcutils_snprintf>
 801438c:	2401      	movs	r4, #1
 801438e:	e7c0      	b.n	8014312 <rcl_validate_enclave_name_with_size+0x22>
 8014390:	08019cb0 	.word	0x08019cb0

08014394 <rcl_validate_enclave_name>:
 8014394:	b168      	cbz	r0, 80143b2 <rcl_validate_enclave_name+0x1e>
 8014396:	b570      	push	{r4, r5, r6, lr}
 8014398:	460d      	mov	r5, r1
 801439a:	4616      	mov	r6, r2
 801439c:	4604      	mov	r4, r0
 801439e:	f7eb ff51 	bl	8000244 <strlen>
 80143a2:	4633      	mov	r3, r6
 80143a4:	4601      	mov	r1, r0
 80143a6:	462a      	mov	r2, r5
 80143a8:	4620      	mov	r0, r4
 80143aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143ae:	f7ff bf9f 	b.w	80142f0 <rcl_validate_enclave_name_with_size>
 80143b2:	200b      	movs	r0, #11
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop

080143b8 <rcl_validate_topic_name>:
 80143b8:	2800      	cmp	r0, #0
 80143ba:	f000 808c 	beq.w	80144d6 <rcl_validate_topic_name+0x11e>
 80143be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143c2:	460e      	mov	r6, r1
 80143c4:	2900      	cmp	r1, #0
 80143c6:	f000 808d 	beq.w	80144e4 <rcl_validate_topic_name+0x12c>
 80143ca:	4617      	mov	r7, r2
 80143cc:	4605      	mov	r5, r0
 80143ce:	f7eb ff39 	bl	8000244 <strlen>
 80143d2:	b1b0      	cbz	r0, 8014402 <rcl_validate_topic_name+0x4a>
 80143d4:	f895 9000 	ldrb.w	r9, [r5]
 80143d8:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8014580 <rcl_validate_topic_name+0x1c8>
 80143dc:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80143e0:	f013 0304 	ands.w	r3, r3, #4
 80143e4:	d179      	bne.n	80144da <rcl_validate_topic_name+0x122>
 80143e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80143ea:	f815 2008 	ldrb.w	r2, [r5, r8]
 80143ee:	2a2f      	cmp	r2, #47	; 0x2f
 80143f0:	d10e      	bne.n	8014410 <rcl_validate_topic_name+0x58>
 80143f2:	2202      	movs	r2, #2
 80143f4:	6032      	str	r2, [r6, #0]
 80143f6:	b377      	cbz	r7, 8014456 <rcl_validate_topic_name+0x9e>
 80143f8:	4618      	mov	r0, r3
 80143fa:	f8c7 8000 	str.w	r8, [r7]
 80143fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014402:	2301      	movs	r3, #1
 8014404:	6033      	str	r3, [r6, #0]
 8014406:	b337      	cbz	r7, 8014456 <rcl_validate_topic_name+0x9e>
 8014408:	2000      	movs	r0, #0
 801440a:	6038      	str	r0, [r7, #0]
 801440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014410:	461c      	mov	r4, r3
 8014412:	4619      	mov	r1, r3
 8014414:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8014418:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801441c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014420:	f1be 0f09 	cmp.w	lr, #9
 8014424:	d947      	bls.n	80144b6 <rcl_validate_topic_name+0xfe>
 8014426:	f022 0e20 	bic.w	lr, r2, #32
 801442a:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801442e:	f1be 0f19 	cmp.w	lr, #25
 8014432:	d940      	bls.n	80144b6 <rcl_validate_topic_name+0xfe>
 8014434:	2a5f      	cmp	r2, #95	; 0x5f
 8014436:	d015      	beq.n	8014464 <rcl_validate_topic_name+0xac>
 8014438:	2a2f      	cmp	r2, #47	; 0x2f
 801443a:	d072      	beq.n	8014522 <rcl_validate_topic_name+0x16a>
 801443c:	2a7e      	cmp	r2, #126	; 0x7e
 801443e:	d053      	beq.n	80144e8 <rcl_validate_topic_name+0x130>
 8014440:	2a7b      	cmp	r2, #123	; 0x7b
 8014442:	d00b      	beq.n	801445c <rcl_validate_topic_name+0xa4>
 8014444:	2a7d      	cmp	r2, #125	; 0x7d
 8014446:	f040 808a 	bne.w	801455e <rcl_validate_topic_name+0x1a6>
 801444a:	2c00      	cmp	r4, #0
 801444c:	d174      	bne.n	8014538 <rcl_validate_topic_name+0x180>
 801444e:	2305      	movs	r3, #5
 8014450:	6033      	str	r3, [r6, #0]
 8014452:	b107      	cbz	r7, 8014456 <rcl_validate_topic_name+0x9e>
 8014454:	6039      	str	r1, [r7, #0]
 8014456:	2000      	movs	r0, #0
 8014458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801445c:	2c00      	cmp	r4, #0
 801445e:	d162      	bne.n	8014526 <rcl_validate_topic_name+0x16e>
 8014460:	460b      	mov	r3, r1
 8014462:	2401      	movs	r4, #1
 8014464:	3101      	adds	r1, #1
 8014466:	4288      	cmp	r0, r1
 8014468:	d1d6      	bne.n	8014418 <rcl_validate_topic_name+0x60>
 801446a:	2c00      	cmp	r4, #0
 801446c:	d16c      	bne.n	8014548 <rcl_validate_topic_name+0x190>
 801446e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014472:	4620      	mov	r0, r4
 8014474:	f108 0401 	add.w	r4, r8, #1
 8014478:	d108      	bne.n	801448c <rcl_validate_topic_name+0xd4>
 801447a:	e044      	b.n	8014506 <rcl_validate_topic_name+0x14e>
 801447c:	2801      	cmp	r0, #1
 801447e:	d05d      	beq.n	801453c <rcl_validate_topic_name+0x184>
 8014480:	461a      	mov	r2, r3
 8014482:	4291      	cmp	r1, r2
 8014484:	4618      	mov	r0, r3
 8014486:	f105 0501 	add.w	r5, r5, #1
 801448a:	d95a      	bls.n	8014542 <rcl_validate_topic_name+0x18a>
 801448c:	4580      	cmp	r8, r0
 801448e:	f100 0301 	add.w	r3, r0, #1
 8014492:	d04d      	beq.n	8014530 <rcl_validate_topic_name+0x178>
 8014494:	782a      	ldrb	r2, [r5, #0]
 8014496:	2a2f      	cmp	r2, #47	; 0x2f
 8014498:	d1f0      	bne.n	801447c <rcl_validate_topic_name+0xc4>
 801449a:	786a      	ldrb	r2, [r5, #1]
 801449c:	1c43      	adds	r3, r0, #1
 801449e:	f81c 0002 	ldrb.w	r0, [ip, r2]
 80144a2:	461a      	mov	r2, r3
 80144a4:	0740      	lsls	r0, r0, #29
 80144a6:	d5ec      	bpl.n	8014482 <rcl_validate_topic_name+0xca>
 80144a8:	2304      	movs	r3, #4
 80144aa:	6033      	str	r3, [r6, #0]
 80144ac:	2f00      	cmp	r7, #0
 80144ae:	d0d2      	beq.n	8014456 <rcl_validate_topic_name+0x9e>
 80144b0:	2000      	movs	r0, #0
 80144b2:	603a      	str	r2, [r7, #0]
 80144b4:	e7aa      	b.n	801440c <rcl_validate_topic_name+0x54>
 80144b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80144ba:	0752      	lsls	r2, r2, #29
 80144bc:	d5d2      	bpl.n	8014464 <rcl_validate_topic_name+0xac>
 80144be:	2c00      	cmp	r4, #0
 80144c0:	d0d0      	beq.n	8014464 <rcl_validate_topic_name+0xac>
 80144c2:	2900      	cmp	r1, #0
 80144c4:	d0ce      	beq.n	8014464 <rcl_validate_topic_name+0xac>
 80144c6:	1e4a      	subs	r2, r1, #1
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d1cb      	bne.n	8014464 <rcl_validate_topic_name+0xac>
 80144cc:	2309      	movs	r3, #9
 80144ce:	6033      	str	r3, [r6, #0]
 80144d0:	2f00      	cmp	r7, #0
 80144d2:	d1bf      	bne.n	8014454 <rcl_validate_topic_name+0x9c>
 80144d4:	e7bf      	b.n	8014456 <rcl_validate_topic_name+0x9e>
 80144d6:	200b      	movs	r0, #11
 80144d8:	4770      	bx	lr
 80144da:	2304      	movs	r3, #4
 80144dc:	6033      	str	r3, [r6, #0]
 80144de:	2f00      	cmp	r7, #0
 80144e0:	d192      	bne.n	8014408 <rcl_validate_topic_name+0x50>
 80144e2:	e7b8      	b.n	8014456 <rcl_validate_topic_name+0x9e>
 80144e4:	200b      	movs	r0, #11
 80144e6:	e791      	b.n	801440c <rcl_validate_topic_name+0x54>
 80144e8:	2900      	cmp	r1, #0
 80144ea:	d0bb      	beq.n	8014464 <rcl_validate_topic_name+0xac>
 80144ec:	2306      	movs	r3, #6
 80144ee:	6033      	str	r3, [r6, #0]
 80144f0:	2f00      	cmp	r7, #0
 80144f2:	d1af      	bne.n	8014454 <rcl_validate_topic_name+0x9c>
 80144f4:	e7af      	b.n	8014456 <rcl_validate_topic_name+0x9e>
 80144f6:	2801      	cmp	r0, #1
 80144f8:	d03a      	beq.n	8014570 <rcl_validate_topic_name+0x1b8>
 80144fa:	461a      	mov	r2, r3
 80144fc:	4291      	cmp	r1, r2
 80144fe:	4618      	mov	r0, r3
 8014500:	f105 0501 	add.w	r5, r5, #1
 8014504:	d91d      	bls.n	8014542 <rcl_validate_topic_name+0x18a>
 8014506:	4580      	cmp	r8, r0
 8014508:	f100 0301 	add.w	r3, r0, #1
 801450c:	d023      	beq.n	8014556 <rcl_validate_topic_name+0x19e>
 801450e:	782a      	ldrb	r2, [r5, #0]
 8014510:	2a2f      	cmp	r2, #47	; 0x2f
 8014512:	d1f0      	bne.n	80144f6 <rcl_validate_topic_name+0x13e>
 8014514:	786a      	ldrb	r2, [r5, #1]
 8014516:	f81c 0002 	ldrb.w	r0, [ip, r2]
 801451a:	461a      	mov	r2, r3
 801451c:	0740      	lsls	r0, r0, #29
 801451e:	d5ed      	bpl.n	80144fc <rcl_validate_topic_name+0x144>
 8014520:	e7c2      	b.n	80144a8 <rcl_validate_topic_name+0xf0>
 8014522:	2c00      	cmp	r4, #0
 8014524:	d09e      	beq.n	8014464 <rcl_validate_topic_name+0xac>
 8014526:	2308      	movs	r3, #8
 8014528:	6033      	str	r3, [r6, #0]
 801452a:	2f00      	cmp	r7, #0
 801452c:	d192      	bne.n	8014454 <rcl_validate_topic_name+0x9c>
 801452e:	e792      	b.n	8014456 <rcl_validate_topic_name+0x9e>
 8014530:	4622      	mov	r2, r4
 8014532:	f108 0301 	add.w	r3, r8, #1
 8014536:	e7a4      	b.n	8014482 <rcl_validate_topic_name+0xca>
 8014538:	2400      	movs	r4, #0
 801453a:	e793      	b.n	8014464 <rcl_validate_topic_name+0xac>
 801453c:	2202      	movs	r2, #2
 801453e:	4613      	mov	r3, r2
 8014540:	e79f      	b.n	8014482 <rcl_validate_topic_name+0xca>
 8014542:	2000      	movs	r0, #0
 8014544:	6030      	str	r0, [r6, #0]
 8014546:	e761      	b.n	801440c <rcl_validate_topic_name+0x54>
 8014548:	2205      	movs	r2, #5
 801454a:	6032      	str	r2, [r6, #0]
 801454c:	2f00      	cmp	r7, #0
 801454e:	d082      	beq.n	8014456 <rcl_validate_topic_name+0x9e>
 8014550:	2000      	movs	r0, #0
 8014552:	603b      	str	r3, [r7, #0]
 8014554:	e75a      	b.n	801440c <rcl_validate_topic_name+0x54>
 8014556:	4622      	mov	r2, r4
 8014558:	f108 0301 	add.w	r3, r8, #1
 801455c:	e7ce      	b.n	80144fc <rcl_validate_topic_name+0x144>
 801455e:	2c00      	cmp	r4, #0
 8014560:	bf14      	ite	ne
 8014562:	2308      	movne	r3, #8
 8014564:	2303      	moveq	r3, #3
 8014566:	6033      	str	r3, [r6, #0]
 8014568:	2f00      	cmp	r7, #0
 801456a:	f47f af73 	bne.w	8014454 <rcl_validate_topic_name+0x9c>
 801456e:	e772      	b.n	8014456 <rcl_validate_topic_name+0x9e>
 8014570:	2307      	movs	r3, #7
 8014572:	6033      	str	r3, [r6, #0]
 8014574:	2f00      	cmp	r7, #0
 8014576:	f43f af6e 	beq.w	8014456 <rcl_validate_topic_name+0x9e>
 801457a:	6038      	str	r0, [r7, #0]
 801457c:	2000      	movs	r0, #0
 801457e:	e745      	b.n	801440c <rcl_validate_topic_name+0x54>
 8014580:	0801a0dd 	.word	0x0801a0dd

08014584 <rcl_get_zero_initialized_wait_set>:
 8014584:	b470      	push	{r4, r5, r6}
 8014586:	4604      	mov	r4, r0
 8014588:	4606      	mov	r6, r0
 801458a:	4d06      	ldr	r5, [pc, #24]	; (80145a4 <rcl_get_zero_initialized_wait_set+0x20>)
 801458c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801458e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014598:	682b      	ldr	r3, [r5, #0]
 801459a:	4630      	mov	r0, r6
 801459c:	6023      	str	r3, [r4, #0]
 801459e:	bc70      	pop	{r4, r5, r6}
 80145a0:	4770      	bx	lr
 80145a2:	bf00      	nop
 80145a4:	08019d10 	.word	0x08019d10

080145a8 <rcl_wait_set_is_valid>:
 80145a8:	b118      	cbz	r0, 80145b2 <rcl_wait_set_is_valid+0xa>
 80145aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80145ac:	3800      	subs	r0, #0
 80145ae:	bf18      	it	ne
 80145b0:	2001      	movne	r0, #1
 80145b2:	4770      	bx	lr

080145b4 <rcl_wait_set_fini>:
 80145b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145b8:	b083      	sub	sp, #12
 80145ba:	2800      	cmp	r0, #0
 80145bc:	f000 8098 	beq.w	80146f0 <rcl_wait_set_fini+0x13c>
 80145c0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80145c2:	4604      	mov	r4, r0
 80145c4:	2e00      	cmp	r6, #0
 80145c6:	f000 808f 	beq.w	80146e8 <rcl_wait_set_fini+0x134>
 80145ca:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80145cc:	f001 fd44 	bl	8016058 <rmw_destroy_wait_set>
 80145d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145d2:	1e06      	subs	r6, r0, #0
 80145d4:	bf18      	it	ne
 80145d6:	f44f 7661 	movne.w	r6, #900	; 0x384
 80145da:	2d00      	cmp	r5, #0
 80145dc:	f000 8084 	beq.w	80146e8 <rcl_wait_set_fini+0x134>
 80145e0:	2700      	movs	r7, #0
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80145e8:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 80145ec:	6067      	str	r7, [r4, #4]
 80145ee:	602f      	str	r7, [r5, #0]
 80145f0:	b118      	cbz	r0, 80145fa <rcl_wait_set_fini+0x46>
 80145f2:	4649      	mov	r1, r9
 80145f4:	47c0      	blx	r8
 80145f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145f8:	6027      	str	r7, [r4, #0]
 80145fa:	68a8      	ldr	r0, [r5, #8]
 80145fc:	b128      	cbz	r0, 801460a <rcl_wait_set_fini+0x56>
 80145fe:	4649      	mov	r1, r9
 8014600:	47c0      	blx	r8
 8014602:	2300      	movs	r3, #0
 8014604:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014606:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801460a:	f04f 0800 	mov.w	r8, #0
 801460e:	68a0      	ldr	r0, [r4, #8]
 8014610:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014612:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014614:	f8c4 800c 	str.w	r8, [r4, #12]
 8014618:	f8c5 800c 	str.w	r8, [r5, #12]
 801461c:	b128      	cbz	r0, 801462a <rcl_wait_set_fini+0x76>
 801461e:	47b8      	blx	r7
 8014620:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014622:	f8c4 8008 	str.w	r8, [r4, #8]
 8014626:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014628:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801462a:	f04f 0800 	mov.w	r8, #0
 801462e:	6968      	ldr	r0, [r5, #20]
 8014630:	f8c5 8010 	str.w	r8, [r5, #16]
 8014634:	b128      	cbz	r0, 8014642 <rcl_wait_set_fini+0x8e>
 8014636:	47b8      	blx	r7
 8014638:	f8c5 8014 	str.w	r8, [r5, #20]
 801463c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801463e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014640:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014642:	f04f 0800 	mov.w	r8, #0
 8014646:	6920      	ldr	r0, [r4, #16]
 8014648:	f8c4 8014 	str.w	r8, [r4, #20]
 801464c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8014650:	b128      	cbz	r0, 801465e <rcl_wait_set_fini+0xaa>
 8014652:	47b8      	blx	r7
 8014654:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014656:	f8c4 8010 	str.w	r8, [r4, #16]
 801465a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801465c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801465e:	f04f 0800 	mov.w	r8, #0
 8014662:	69a0      	ldr	r0, [r4, #24]
 8014664:	f8c4 801c 	str.w	r8, [r4, #28]
 8014668:	f8c5 8018 	str.w	r8, [r5, #24]
 801466c:	b128      	cbz	r0, 801467a <rcl_wait_set_fini+0xc6>
 801466e:	9101      	str	r1, [sp, #4]
 8014670:	47b8      	blx	r7
 8014672:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014674:	9901      	ldr	r1, [sp, #4]
 8014676:	f8c4 8018 	str.w	r8, [r4, #24]
 801467a:	6a28      	ldr	r0, [r5, #32]
 801467c:	b120      	cbz	r0, 8014688 <rcl_wait_set_fini+0xd4>
 801467e:	47b8      	blx	r7
 8014680:	2300      	movs	r3, #0
 8014682:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014684:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014688:	2700      	movs	r7, #0
 801468a:	6a20      	ldr	r0, [r4, #32]
 801468c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014690:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8014694:	6267      	str	r7, [r4, #36]	; 0x24
 8014696:	626f      	str	r7, [r5, #36]	; 0x24
 8014698:	b118      	cbz	r0, 80146a2 <rcl_wait_set_fini+0xee>
 801469a:	4649      	mov	r1, r9
 801469c:	47c0      	blx	r8
 801469e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80146a0:	6227      	str	r7, [r4, #32]
 80146a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80146a4:	b128      	cbz	r0, 80146b2 <rcl_wait_set_fini+0xfe>
 80146a6:	4649      	mov	r1, r9
 80146a8:	47c0      	blx	r8
 80146aa:	2300      	movs	r3, #0
 80146ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80146ae:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80146b2:	2700      	movs	r7, #0
 80146b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80146b6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80146ba:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 80146be:	62e7      	str	r7, [r4, #44]	; 0x2c
 80146c0:	632f      	str	r7, [r5, #48]	; 0x30
 80146c2:	b118      	cbz	r0, 80146cc <rcl_wait_set_fini+0x118>
 80146c4:	4649      	mov	r1, r9
 80146c6:	47c0      	blx	r8
 80146c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80146ca:	62a7      	str	r7, [r4, #40]	; 0x28
 80146cc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80146ce:	b128      	cbz	r0, 80146dc <rcl_wait_set_fini+0x128>
 80146d0:	4649      	mov	r1, r9
 80146d2:	47c0      	blx	r8
 80146d4:	2300      	movs	r3, #0
 80146d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80146d8:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80146dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80146de:	4628      	mov	r0, r5
 80146e0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80146e2:	4798      	blx	r3
 80146e4:	2300      	movs	r3, #0
 80146e6:	6323      	str	r3, [r4, #48]	; 0x30
 80146e8:	4630      	mov	r0, r6
 80146ea:	b003      	add	sp, #12
 80146ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f0:	260b      	movs	r6, #11
 80146f2:	4630      	mov	r0, r6
 80146f4:	b003      	add	sp, #12
 80146f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146fa:	bf00      	nop

080146fc <rcl_wait_set_add_subscription>:
 80146fc:	b320      	cbz	r0, 8014748 <rcl_wait_set_add_subscription+0x4c>
 80146fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014700:	b570      	push	{r4, r5, r6, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	b1d3      	cbz	r3, 801473c <rcl_wait_set_add_subscription+0x40>
 8014706:	b319      	cbz	r1, 8014750 <rcl_wait_set_add_subscription+0x54>
 8014708:	681d      	ldr	r5, [r3, #0]
 801470a:	6860      	ldr	r0, [r4, #4]
 801470c:	4285      	cmp	r5, r0
 801470e:	d218      	bcs.n	8014742 <rcl_wait_set_add_subscription+0x46>
 8014710:	6820      	ldr	r0, [r4, #0]
 8014712:	1c6e      	adds	r6, r5, #1
 8014714:	601e      	str	r6, [r3, #0]
 8014716:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801471a:	b102      	cbz	r2, 801471e <rcl_wait_set_add_subscription+0x22>
 801471c:	6015      	str	r5, [r2, #0]
 801471e:	4608      	mov	r0, r1
 8014720:	f7f5 fd88 	bl	800a234 <rcl_subscription_get_rmw_handle>
 8014724:	b190      	cbz	r0, 801474c <rcl_wait_set_add_subscription+0x50>
 8014726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014728:	6842      	ldr	r2, [r0, #4]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	2000      	movs	r0, #0
 801472e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014732:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014734:	6853      	ldr	r3, [r2, #4]
 8014736:	3301      	adds	r3, #1
 8014738:	6053      	str	r3, [r2, #4]
 801473a:	bd70      	pop	{r4, r5, r6, pc}
 801473c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014740:	bd70      	pop	{r4, r5, r6, pc}
 8014742:	f240 3086 	movw	r0, #902	; 0x386
 8014746:	bd70      	pop	{r4, r5, r6, pc}
 8014748:	200b      	movs	r0, #11
 801474a:	4770      	bx	lr
 801474c:	2001      	movs	r0, #1
 801474e:	bd70      	pop	{r4, r5, r6, pc}
 8014750:	200b      	movs	r0, #11
 8014752:	bd70      	pop	{r4, r5, r6, pc}

08014754 <rcl_wait_set_clear>:
 8014754:	2800      	cmp	r0, #0
 8014756:	d074      	beq.n	8014842 <rcl_wait_set_clear+0xee>
 8014758:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801475a:	b510      	push	{r4, lr}
 801475c:	4604      	mov	r4, r0
 801475e:	2b00      	cmp	r3, #0
 8014760:	d071      	beq.n	8014846 <rcl_wait_set_clear+0xf2>
 8014762:	6800      	ldr	r0, [r0, #0]
 8014764:	b138      	cbz	r0, 8014776 <rcl_wait_set_clear+0x22>
 8014766:	6862      	ldr	r2, [r4, #4]
 8014768:	2100      	movs	r1, #0
 801476a:	0092      	lsls	r2, r2, #2
 801476c:	f002 fc9a 	bl	80170a4 <memset>
 8014770:	2200      	movs	r2, #0
 8014772:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	68a0      	ldr	r0, [r4, #8]
 8014778:	b138      	cbz	r0, 801478a <rcl_wait_set_clear+0x36>
 801477a:	68e2      	ldr	r2, [r4, #12]
 801477c:	2100      	movs	r1, #0
 801477e:	0092      	lsls	r2, r2, #2
 8014780:	f002 fc90 	bl	80170a4 <memset>
 8014784:	2200      	movs	r2, #0
 8014786:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014788:	60da      	str	r2, [r3, #12]
 801478a:	69a0      	ldr	r0, [r4, #24]
 801478c:	b138      	cbz	r0, 801479e <rcl_wait_set_clear+0x4a>
 801478e:	69e2      	ldr	r2, [r4, #28]
 8014790:	2100      	movs	r1, #0
 8014792:	0092      	lsls	r2, r2, #2
 8014794:	f002 fc86 	bl	80170a4 <memset>
 8014798:	2200      	movs	r2, #0
 801479a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801479c:	619a      	str	r2, [r3, #24]
 801479e:	6a20      	ldr	r0, [r4, #32]
 80147a0:	b138      	cbz	r0, 80147b2 <rcl_wait_set_clear+0x5e>
 80147a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80147a4:	2100      	movs	r1, #0
 80147a6:	0092      	lsls	r2, r2, #2
 80147a8:	f002 fc7c 	bl	80170a4 <memset>
 80147ac:	2200      	movs	r2, #0
 80147ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147b0:	625a      	str	r2, [r3, #36]	; 0x24
 80147b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80147b4:	b138      	cbz	r0, 80147c6 <rcl_wait_set_clear+0x72>
 80147b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80147b8:	2100      	movs	r1, #0
 80147ba:	0092      	lsls	r2, r2, #2
 80147bc:	f002 fc72 	bl	80170a4 <memset>
 80147c0:	2200      	movs	r2, #0
 80147c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147c4:	631a      	str	r2, [r3, #48]	; 0x30
 80147c6:	6920      	ldr	r0, [r4, #16]
 80147c8:	b138      	cbz	r0, 80147da <rcl_wait_set_clear+0x86>
 80147ca:	6962      	ldr	r2, [r4, #20]
 80147cc:	2100      	movs	r1, #0
 80147ce:	0092      	lsls	r2, r2, #2
 80147d0:	f002 fc68 	bl	80170a4 <memset>
 80147d4:	2200      	movs	r2, #0
 80147d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147d8:	641a      	str	r2, [r3, #64]	; 0x40
 80147da:	6898      	ldr	r0, [r3, #8]
 80147dc:	b138      	cbz	r0, 80147ee <rcl_wait_set_clear+0x9a>
 80147de:	685a      	ldr	r2, [r3, #4]
 80147e0:	2100      	movs	r1, #0
 80147e2:	0092      	lsls	r2, r2, #2
 80147e4:	f002 fc5e 	bl	80170a4 <memset>
 80147e8:	2200      	movs	r2, #0
 80147ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147ec:	605a      	str	r2, [r3, #4]
 80147ee:	6958      	ldr	r0, [r3, #20]
 80147f0:	b138      	cbz	r0, 8014802 <rcl_wait_set_clear+0xae>
 80147f2:	691a      	ldr	r2, [r3, #16]
 80147f4:	2100      	movs	r1, #0
 80147f6:	0092      	lsls	r2, r2, #2
 80147f8:	f002 fc54 	bl	80170a4 <memset>
 80147fc:	2200      	movs	r2, #0
 80147fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014800:	611a      	str	r2, [r3, #16]
 8014802:	6a18      	ldr	r0, [r3, #32]
 8014804:	b138      	cbz	r0, 8014816 <rcl_wait_set_clear+0xc2>
 8014806:	69da      	ldr	r2, [r3, #28]
 8014808:	2100      	movs	r1, #0
 801480a:	0092      	lsls	r2, r2, #2
 801480c:	f002 fc4a 	bl	80170a4 <memset>
 8014810:	2200      	movs	r2, #0
 8014812:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014814:	61da      	str	r2, [r3, #28]
 8014816:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014818:	b138      	cbz	r0, 801482a <rcl_wait_set_clear+0xd6>
 801481a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801481c:	2100      	movs	r1, #0
 801481e:	0092      	lsls	r2, r2, #2
 8014820:	f002 fc40 	bl	80170a4 <memset>
 8014824:	2200      	movs	r2, #0
 8014826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014828:	629a      	str	r2, [r3, #40]	; 0x28
 801482a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801482c:	b140      	cbz	r0, 8014840 <rcl_wait_set_clear+0xec>
 801482e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014830:	2100      	movs	r1, #0
 8014832:	0092      	lsls	r2, r2, #2
 8014834:	f002 fc36 	bl	80170a4 <memset>
 8014838:	2300      	movs	r3, #0
 801483a:	4618      	mov	r0, r3
 801483c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801483e:	6353      	str	r3, [r2, #52]	; 0x34
 8014840:	bd10      	pop	{r4, pc}
 8014842:	200b      	movs	r0, #11
 8014844:	4770      	bx	lr
 8014846:	f44f 7061 	mov.w	r0, #900	; 0x384
 801484a:	bd10      	pop	{r4, pc}

0801484c <rcl_wait_set_resize>:
 801484c:	2800      	cmp	r0, #0
 801484e:	f000 81a7 	beq.w	8014ba0 <rcl_wait_set_resize+0x354>
 8014852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014856:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801485a:	4604      	mov	r4, r0
 801485c:	b083      	sub	sp, #12
 801485e:	f1ba 0f00 	cmp.w	sl, #0
 8014862:	f000 819f 	beq.w	8014ba4 <rcl_wait_set_resize+0x358>
 8014866:	f04f 0800 	mov.w	r8, #0
 801486a:	461e      	mov	r6, r3
 801486c:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014870:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8014874:	460f      	mov	r7, r1
 8014876:	f8c0 8004 	str.w	r8, [r0, #4]
 801487a:	4615      	mov	r5, r2
 801487c:	9300      	str	r3, [sp, #0]
 801487e:	f8ca 8000 	str.w	r8, [sl]
 8014882:	2900      	cmp	r1, #0
 8014884:	f000 80ca 	beq.w	8014a1c <rcl_wait_set_resize+0x1d0>
 8014888:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 801488c:	4651      	mov	r1, sl
 801488e:	464a      	mov	r2, r9
 8014890:	6800      	ldr	r0, [r0, #0]
 8014892:	4798      	blx	r3
 8014894:	6020      	str	r0, [r4, #0]
 8014896:	2800      	cmp	r0, #0
 8014898:	f000 80d9 	beq.w	8014a4e <rcl_wait_set_resize+0x202>
 801489c:	4652      	mov	r2, sl
 801489e:	4641      	mov	r1, r8
 80148a0:	f002 fc00 	bl	80170a4 <memset>
 80148a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80148a6:	6067      	str	r7, [r4, #4]
 80148a8:	464a      	mov	r2, r9
 80148aa:	6898      	ldr	r0, [r3, #8]
 80148ac:	f8c3 8004 	str.w	r8, [r3, #4]
 80148b0:	9301      	str	r3, [sp, #4]
 80148b2:	4651      	mov	r1, sl
 80148b4:	9b00      	ldr	r3, [sp, #0]
 80148b6:	4798      	blx	r3
 80148b8:	9b01      	ldr	r3, [sp, #4]
 80148ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80148bc:	6098      	str	r0, [r3, #8]
 80148be:	6897      	ldr	r7, [r2, #8]
 80148c0:	2f00      	cmp	r7, #0
 80148c2:	f000 80bf 	beq.w	8014a44 <rcl_wait_set_resize+0x1f8>
 80148c6:	4652      	mov	r2, sl
 80148c8:	4641      	mov	r1, r8
 80148ca:	4638      	mov	r0, r7
 80148cc:	f002 fbea 	bl	80170a4 <memset>
 80148d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80148d4:	2700      	movs	r7, #0
 80148d6:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80148da:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80148de:	60e7      	str	r7, [r4, #12]
 80148e0:	f8ca 700c 	str.w	r7, [sl, #12]
 80148e4:	2d00      	cmp	r5, #0
 80148e6:	f040 80b6 	bne.w	8014a56 <rcl_wait_set_resize+0x20a>
 80148ea:	68a0      	ldr	r0, [r4, #8]
 80148ec:	b130      	cbz	r0, 80148fc <rcl_wait_set_resize+0xb0>
 80148ee:	4641      	mov	r1, r8
 80148f0:	4790      	blx	r2
 80148f2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80148f6:	60a5      	str	r5, [r4, #8]
 80148f8:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80148fc:	2700      	movs	r7, #0
 80148fe:	19ad      	adds	r5, r5, r6
 8014900:	f8ca 7010 	str.w	r7, [sl, #16]
 8014904:	f040 80bf 	bne.w	8014a86 <rcl_wait_set_resize+0x23a>
 8014908:	f8da 0014 	ldr.w	r0, [sl, #20]
 801490c:	b148      	cbz	r0, 8014922 <rcl_wait_set_resize+0xd6>
 801490e:	4641      	mov	r1, r8
 8014910:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8014914:	4798      	blx	r3
 8014916:	f8ca 5014 	str.w	r5, [sl, #20]
 801491a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801491e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014922:	2500      	movs	r5, #0
 8014924:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014928:	6165      	str	r5, [r4, #20]
 801492a:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 801492e:	2e00      	cmp	r6, #0
 8014930:	f040 80c0 	bne.w	8014ab4 <rcl_wait_set_resize+0x268>
 8014934:	6920      	ldr	r0, [r4, #16]
 8014936:	b140      	cbz	r0, 801494a <rcl_wait_set_resize+0xfe>
 8014938:	4641      	mov	r1, r8
 801493a:	47c8      	blx	r9
 801493c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014940:	6126      	str	r6, [r4, #16]
 8014942:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014946:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801494a:	2500      	movs	r5, #0
 801494c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801494e:	61e5      	str	r5, [r4, #28]
 8014950:	f8ca 5018 	str.w	r5, [sl, #24]
 8014954:	2b00      	cmp	r3, #0
 8014956:	f040 80c2 	bne.w	8014ade <rcl_wait_set_resize+0x292>
 801495a:	69a0      	ldr	r0, [r4, #24]
 801495c:	b128      	cbz	r0, 801496a <rcl_wait_set_resize+0x11e>
 801495e:	4641      	mov	r1, r8
 8014960:	47c8      	blx	r9
 8014962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014964:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014968:	61a3      	str	r3, [r4, #24]
 801496a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801496e:	b130      	cbz	r0, 801497e <rcl_wait_set_resize+0x132>
 8014970:	4641      	mov	r1, r8
 8014972:	47c8      	blx	r9
 8014974:	2300      	movs	r3, #0
 8014976:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801497a:	e9ca 3307 	strd	r3, r3, [sl, #28]
 801497e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014982:	2600      	movs	r6, #0
 8014984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014986:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801498a:	6266      	str	r6, [r4, #36]	; 0x24
 801498c:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8014990:	2b00      	cmp	r3, #0
 8014992:	f000 80c9 	beq.w	8014b28 <rcl_wait_set_resize+0x2dc>
 8014996:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801499a:	4651      	mov	r1, sl
 801499c:	463a      	mov	r2, r7
 801499e:	6a20      	ldr	r0, [r4, #32]
 80149a0:	47c8      	blx	r9
 80149a2:	6220      	str	r0, [r4, #32]
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d052      	beq.n	8014a4e <rcl_wait_set_resize+0x202>
 80149a8:	4652      	mov	r2, sl
 80149aa:	4631      	mov	r1, r6
 80149ac:	f002 fb7a 	bl	80170a4 <memset>
 80149b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80149b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80149b6:	6263      	str	r3, [r4, #36]	; 0x24
 80149b8:	463a      	mov	r2, r7
 80149ba:	62ae      	str	r6, [r5, #40]	; 0x28
 80149bc:	4651      	mov	r1, sl
 80149be:	47c8      	blx	r9
 80149c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149c2:	62e8      	str	r0, [r5, #44]	; 0x2c
 80149c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80149c6:	2d00      	cmp	r5, #0
 80149c8:	f000 8106 	beq.w	8014bd8 <rcl_wait_set_resize+0x38c>
 80149cc:	4652      	mov	r2, sl
 80149ce:	4631      	mov	r1, r6
 80149d0:	4628      	mov	r0, r5
 80149d2:	f002 fb67 	bl	80170a4 <memset>
 80149d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80149da:	2500      	movs	r5, #0
 80149dc:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80149e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149e2:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80149e6:	62e5      	str	r5, [r4, #44]	; 0x2c
 80149e8:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f040 80b0 	bne.w	8014b52 <rcl_wait_set_resize+0x306>
 80149f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80149f4:	b128      	cbz	r0, 8014a02 <rcl_wait_set_resize+0x1b6>
 80149f6:	4631      	mov	r1, r6
 80149f8:	47b8      	blx	r7
 80149fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a02:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014a06:	b318      	cbz	r0, 8014a50 <rcl_wait_set_resize+0x204>
 8014a08:	4631      	mov	r1, r6
 8014a0a:	47b8      	blx	r7
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	4618      	mov	r0, r3
 8014a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014a12:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8014a16:	b003      	add	sp, #12
 8014a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a1c:	6800      	ldr	r0, [r0, #0]
 8014a1e:	b120      	cbz	r0, 8014a2a <rcl_wait_set_resize+0x1de>
 8014a20:	4649      	mov	r1, r9
 8014a22:	47d8      	blx	fp
 8014a24:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014a28:	6027      	str	r7, [r4, #0]
 8014a2a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	f43f af50 	beq.w	80148d4 <rcl_wait_set_resize+0x88>
 8014a34:	4649      	mov	r1, r9
 8014a36:	47d8      	blx	fp
 8014a38:	2300      	movs	r3, #0
 8014a3a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014a3e:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8014a42:	e747      	b.n	80148d4 <rcl_wait_set_resize+0x88>
 8014a44:	4649      	mov	r1, r9
 8014a46:	6820      	ldr	r0, [r4, #0]
 8014a48:	47d8      	blx	fp
 8014a4a:	e9c4 7700 	strd	r7, r7, [r4]
 8014a4e:	200a      	movs	r0, #10
 8014a50:	b003      	add	sp, #12
 8014a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a56:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8014a5a:	4642      	mov	r2, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	68a0      	ldr	r0, [r4, #8]
 8014a60:	4798      	blx	r3
 8014a62:	60a0      	str	r0, [r4, #8]
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d0f2      	beq.n	8014a4e <rcl_wait_set_resize+0x202>
 8014a68:	4639      	mov	r1, r7
 8014a6a:	2700      	movs	r7, #0
 8014a6c:	464a      	mov	r2, r9
 8014a6e:	f002 fb19 	bl	80170a4 <memset>
 8014a72:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014a76:	60e5      	str	r5, [r4, #12]
 8014a78:	19ad      	adds	r5, r5, r6
 8014a7a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014a7e:	f8ca 7010 	str.w	r7, [sl, #16]
 8014a82:	f43f af41 	beq.w	8014908 <rcl_wait_set_resize+0xbc>
 8014a86:	00ad      	lsls	r5, r5, #2
 8014a88:	4642      	mov	r2, r8
 8014a8a:	4629      	mov	r1, r5
 8014a8c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014a90:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014a94:	4798      	blx	r3
 8014a96:	4680      	mov	r8, r0
 8014a98:	f8ca 0014 	str.w	r0, [sl, #20]
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	f000 8084 	beq.w	8014baa <rcl_wait_set_resize+0x35e>
 8014aa2:	462a      	mov	r2, r5
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f002 fafd 	bl	80170a4 <memset>
 8014aaa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014aae:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014ab2:	e736      	b.n	8014922 <rcl_wait_set_resize+0xd6>
 8014ab4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8014ab8:	4642      	mov	r2, r8
 8014aba:	4649      	mov	r1, r9
 8014abc:	6920      	ldr	r0, [r4, #16]
 8014abe:	47b8      	blx	r7
 8014ac0:	6120      	str	r0, [r4, #16]
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d0c3      	beq.n	8014a4e <rcl_wait_set_resize+0x202>
 8014ac6:	464a      	mov	r2, r9
 8014ac8:	4629      	mov	r1, r5
 8014aca:	f002 faeb 	bl	80170a4 <memset>
 8014ace:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014ad2:	6166      	str	r6, [r4, #20]
 8014ad4:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014ad8:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014adc:	e735      	b.n	801494a <rcl_wait_set_resize+0xfe>
 8014ade:	009e      	lsls	r6, r3, #2
 8014ae0:	4631      	mov	r1, r6
 8014ae2:	4642      	mov	r2, r8
 8014ae4:	69a0      	ldr	r0, [r4, #24]
 8014ae6:	47b8      	blx	r7
 8014ae8:	61a0      	str	r0, [r4, #24]
 8014aea:	2800      	cmp	r0, #0
 8014aec:	d0af      	beq.n	8014a4e <rcl_wait_set_resize+0x202>
 8014aee:	4632      	mov	r2, r6
 8014af0:	4629      	mov	r1, r5
 8014af2:	f002 fad7 	bl	80170a4 <memset>
 8014af6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014afc:	4642      	mov	r2, r8
 8014afe:	61e3      	str	r3, [r4, #28]
 8014b00:	4631      	mov	r1, r6
 8014b02:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014b06:	f8ca 501c 	str.w	r5, [sl, #28]
 8014b0a:	47b8      	blx	r7
 8014b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014b0e:	f8ca 0020 	str.w	r0, [sl, #32]
 8014b12:	6a1f      	ldr	r7, [r3, #32]
 8014b14:	2f00      	cmp	r7, #0
 8014b16:	d058      	beq.n	8014bca <rcl_wait_set_resize+0x37e>
 8014b18:	4632      	mov	r2, r6
 8014b1a:	4629      	mov	r1, r5
 8014b1c:	4638      	mov	r0, r7
 8014b1e:	f002 fac1 	bl	80170a4 <memset>
 8014b22:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014b26:	e72a      	b.n	801497e <rcl_wait_set_resize+0x132>
 8014b28:	6a20      	ldr	r0, [r4, #32]
 8014b2a:	b128      	cbz	r0, 8014b38 <rcl_wait_set_resize+0x2ec>
 8014b2c:	4639      	mov	r1, r7
 8014b2e:	47c0      	blx	r8
 8014b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b32:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014b36:	6223      	str	r3, [r4, #32]
 8014b38:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	f43f af4c 	beq.w	80149da <rcl_wait_set_resize+0x18e>
 8014b42:	4639      	mov	r1, r7
 8014b44:	47c0      	blx	r8
 8014b46:	2300      	movs	r3, #0
 8014b48:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014b4c:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8014b50:	e743      	b.n	80149da <rcl_wait_set_resize+0x18e>
 8014b52:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8014b56:	4641      	mov	r1, r8
 8014b58:	4632      	mov	r2, r6
 8014b5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014b5c:	47c8      	blx	r9
 8014b5e:	62a0      	str	r0, [r4, #40]	; 0x28
 8014b60:	2800      	cmp	r0, #0
 8014b62:	f43f af74 	beq.w	8014a4e <rcl_wait_set_resize+0x202>
 8014b66:	4642      	mov	r2, r8
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f002 fa9b 	bl	80170a4 <memset>
 8014b6e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b74:	4632      	mov	r2, r6
 8014b76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b78:	4641      	mov	r1, r8
 8014b7a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014b7e:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8014b82:	47c8      	blx	r9
 8014b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014b86:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8014b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b8c:	b35b      	cbz	r3, 8014be6 <rcl_wait_set_resize+0x39a>
 8014b8e:	4642      	mov	r2, r8
 8014b90:	4618      	mov	r0, r3
 8014b92:	4629      	mov	r1, r5
 8014b94:	f002 fa86 	bl	80170a4 <memset>
 8014b98:	4628      	mov	r0, r5
 8014b9a:	b003      	add	sp, #12
 8014b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba0:	200b      	movs	r0, #11
 8014ba2:	4770      	bx	lr
 8014ba4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014ba8:	e752      	b.n	8014a50 <rcl_wait_set_resize+0x204>
 8014baa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014bac:	68a0      	ldr	r0, [r4, #8]
 8014bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bb0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014bb2:	4790      	blx	r2
 8014bb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014bb6:	6920      	ldr	r0, [r4, #16]
 8014bb8:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8014bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bbe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014bc0:	4790      	blx	r2
 8014bc2:	200a      	movs	r0, #10
 8014bc4:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8014bc8:	e742      	b.n	8014a50 <rcl_wait_set_resize+0x204>
 8014bca:	69a0      	ldr	r0, [r4, #24]
 8014bcc:	4641      	mov	r1, r8
 8014bce:	47c8      	blx	r9
 8014bd0:	200a      	movs	r0, #10
 8014bd2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8014bd6:	e73b      	b.n	8014a50 <rcl_wait_set_resize+0x204>
 8014bd8:	6a20      	ldr	r0, [r4, #32]
 8014bda:	4639      	mov	r1, r7
 8014bdc:	47c0      	blx	r8
 8014bde:	200a      	movs	r0, #10
 8014be0:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8014be4:	e734      	b.n	8014a50 <rcl_wait_set_resize+0x204>
 8014be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014be8:	4631      	mov	r1, r6
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	47b8      	blx	r7
 8014bee:	9b00      	ldr	r3, [sp, #0]
 8014bf0:	200a      	movs	r0, #10
 8014bf2:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014bf6:	e72b      	b.n	8014a50 <rcl_wait_set_resize+0x204>

08014bf8 <rcl_wait_set_init>:
 8014bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	4604      	mov	r4, r0
 8014c00:	a810      	add	r0, sp, #64	; 0x40
 8014c02:	460f      	mov	r7, r1
 8014c04:	4690      	mov	r8, r2
 8014c06:	4699      	mov	r9, r3
 8014c08:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8014c0c:	f7f5 ffe8 	bl	800abe0 <rcutils_allocator_is_valid>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	d06b      	beq.n	8014cec <rcl_wait_set_init+0xf4>
 8014c14:	2c00      	cmp	r4, #0
 8014c16:	d069      	beq.n	8014cec <rcl_wait_set_init+0xf4>
 8014c18:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014c1a:	b125      	cbz	r5, 8014c26 <rcl_wait_set_init+0x2e>
 8014c1c:	2564      	movs	r5, #100	; 0x64
 8014c1e:	4628      	mov	r0, r5
 8014c20:	b004      	add	sp, #16
 8014c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c26:	f1ba 0f00 	cmp.w	sl, #0
 8014c2a:	d05f      	beq.n	8014cec <rcl_wait_set_init+0xf4>
 8014c2c:	4650      	mov	r0, sl
 8014c2e:	f7fe f95f 	bl	8012ef0 <rcl_context_is_valid>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d067      	beq.n	8014d06 <rcl_wait_set_init+0x10e>
 8014c36:	205c      	movs	r0, #92	; 0x5c
 8014c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014c3c:	4798      	blx	r3
 8014c3e:	6320      	str	r0, [r4, #48]	; 0x30
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d062      	beq.n	8014d0a <rcl_wait_set_init+0x112>
 8014c44:	225c      	movs	r2, #92	; 0x5c
 8014c46:	4629      	mov	r1, r5
 8014c48:	f002 fa2c 	bl	80170a4 <memset>
 8014c4c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8014c4e:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 8014c52:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8014c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c5a:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8014c5e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014c62:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014c66:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014c6a:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8014c6e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8014c72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c76:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014c7a:	1899      	adds	r1, r3, r2
 8014c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c7e:	f8de 3000 	ldr.w	r3, [lr]
 8014c82:	f8da 0000 	ldr.w	r0, [sl]
 8014c86:	4411      	add	r1, r2
 8014c88:	4441      	add	r1, r8
 8014c8a:	f8cc 3000 	str.w	r3, [ip]
 8014c8e:	3028      	adds	r0, #40	; 0x28
 8014c90:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8014c94:	f001 f9d6 	bl	8016044 <rmw_create_wait_set>
 8014c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014c9a:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014c9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014c9e:	b350      	cbz	r0, 8014cf6 <rcl_wait_set_init+0xfe>
 8014ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ca2:	4642      	mov	r2, r8
 8014ca4:	9302      	str	r3, [sp, #8]
 8014ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ca8:	4639      	mov	r1, r7
 8014caa:	9301      	str	r3, [sp, #4]
 8014cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cae:	4620      	mov	r0, r4
 8014cb0:	9300      	str	r3, [sp, #0]
 8014cb2:	464b      	mov	r3, r9
 8014cb4:	f7ff fdca 	bl	801484c <rcl_wait_set_resize>
 8014cb8:	4605      	mov	r5, r0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d0af      	beq.n	8014c1e <rcl_wait_set_init+0x26>
 8014cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014cc0:	bb2b      	cbnz	r3, 8014d0e <rcl_wait_set_init+0x116>
 8014cc2:	2600      	movs	r6, #0
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	4633      	mov	r3, r6
 8014cc8:	4632      	mov	r2, r6
 8014cca:	4631      	mov	r1, r6
 8014ccc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014cd0:	9600      	str	r6, [sp, #0]
 8014cd2:	f7ff fdbb 	bl	801484c <rcl_wait_set_resize>
 8014cd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	d0a0      	beq.n	8014c1e <rcl_wait_set_init+0x26>
 8014cdc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014cde:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8014ce0:	4798      	blx	r3
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	6326      	str	r6, [r4, #48]	; 0x30
 8014ce6:	b004      	add	sp, #16
 8014ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cec:	250b      	movs	r5, #11
 8014cee:	4628      	mov	r0, r5
 8014cf0:	b004      	add	sp, #16
 8014cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cf6:	2501      	movs	r5, #1
 8014cf8:	f001 f9ae 	bl	8016058 <rmw_destroy_wait_set>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	bf18      	it	ne
 8014d00:	f44f 7561 	movne.w	r5, #900	; 0x384
 8014d04:	e7dd      	b.n	8014cc2 <rcl_wait_set_init+0xca>
 8014d06:	2565      	movs	r5, #101	; 0x65
 8014d08:	e789      	b.n	8014c1e <rcl_wait_set_init+0x26>
 8014d0a:	250a      	movs	r5, #10
 8014d0c:	e787      	b.n	8014c1e <rcl_wait_set_init+0x26>
 8014d0e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014d10:	e7f2      	b.n	8014cf8 <rcl_wait_set_init+0x100>
 8014d12:	bf00      	nop

08014d14 <rcl_wait_set_add_guard_condition>:
 8014d14:	b320      	cbz	r0, 8014d60 <rcl_wait_set_add_guard_condition+0x4c>
 8014d16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014d18:	b570      	push	{r4, r5, r6, lr}
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	b1d3      	cbz	r3, 8014d54 <rcl_wait_set_add_guard_condition+0x40>
 8014d1e:	b319      	cbz	r1, 8014d68 <rcl_wait_set_add_guard_condition+0x54>
 8014d20:	68dd      	ldr	r5, [r3, #12]
 8014d22:	68e0      	ldr	r0, [r4, #12]
 8014d24:	4285      	cmp	r5, r0
 8014d26:	d218      	bcs.n	8014d5a <rcl_wait_set_add_guard_condition+0x46>
 8014d28:	68a0      	ldr	r0, [r4, #8]
 8014d2a:	1c6e      	adds	r6, r5, #1
 8014d2c:	60de      	str	r6, [r3, #12]
 8014d2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014d32:	b102      	cbz	r2, 8014d36 <rcl_wait_set_add_guard_condition+0x22>
 8014d34:	6015      	str	r5, [r2, #0]
 8014d36:	4608      	mov	r0, r1
 8014d38:	f002 f8c6 	bl	8016ec8 <rcl_guard_condition_get_rmw_handle>
 8014d3c:	b190      	cbz	r0, 8014d64 <rcl_wait_set_add_guard_condition+0x50>
 8014d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014d40:	6842      	ldr	r2, [r0, #4]
 8014d42:	695b      	ldr	r3, [r3, #20]
 8014d44:	2000      	movs	r0, #0
 8014d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014d4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014d4c:	6913      	ldr	r3, [r2, #16]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	6113      	str	r3, [r2, #16]
 8014d52:	bd70      	pop	{r4, r5, r6, pc}
 8014d54:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014d58:	bd70      	pop	{r4, r5, r6, pc}
 8014d5a:	f240 3086 	movw	r0, #902	; 0x386
 8014d5e:	bd70      	pop	{r4, r5, r6, pc}
 8014d60:	200b      	movs	r0, #11
 8014d62:	4770      	bx	lr
 8014d64:	2001      	movs	r0, #1
 8014d66:	bd70      	pop	{r4, r5, r6, pc}
 8014d68:	200b      	movs	r0, #11
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}

08014d6c <rcl_wait_set_add_timer>:
 8014d6c:	b340      	cbz	r0, 8014dc0 <rcl_wait_set_add_timer+0x54>
 8014d6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	4604      	mov	r4, r0
 8014d74:	b1f3      	cbz	r3, 8014db4 <rcl_wait_set_add_timer+0x48>
 8014d76:	b329      	cbz	r1, 8014dc4 <rcl_wait_set_add_timer+0x58>
 8014d78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014d7a:	6965      	ldr	r5, [r4, #20]
 8014d7c:	42a8      	cmp	r0, r5
 8014d7e:	d21c      	bcs.n	8014dba <rcl_wait_set_add_timer+0x4e>
 8014d80:	6925      	ldr	r5, [r4, #16]
 8014d82:	1c46      	adds	r6, r0, #1
 8014d84:	641e      	str	r6, [r3, #64]	; 0x40
 8014d86:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014d8a:	b102      	cbz	r2, 8014d8e <rcl_wait_set_add_timer+0x22>
 8014d8c:	6010      	str	r0, [r2, #0]
 8014d8e:	4608      	mov	r0, r1
 8014d90:	f7ff faa4 	bl	80142dc <rcl_timer_get_guard_condition>
 8014d94:	b168      	cbz	r0, 8014db2 <rcl_wait_set_add_timer+0x46>
 8014d96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014d98:	68e3      	ldr	r3, [r4, #12]
 8014d9a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	441d      	add	r5, r3
 8014da0:	f002 f892 	bl	8016ec8 <rcl_guard_condition_get_rmw_handle>
 8014da4:	b180      	cbz	r0, 8014dc8 <rcl_wait_set_add_timer+0x5c>
 8014da6:	6842      	ldr	r2, [r0, #4]
 8014da8:	2000      	movs	r0, #0
 8014daa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014dac:	695b      	ldr	r3, [r3, #20]
 8014dae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
 8014db4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014db8:	bd70      	pop	{r4, r5, r6, pc}
 8014dba:	f240 3086 	movw	r0, #902	; 0x386
 8014dbe:	bd70      	pop	{r4, r5, r6, pc}
 8014dc0:	200b      	movs	r0, #11
 8014dc2:	4770      	bx	lr
 8014dc4:	200b      	movs	r0, #11
 8014dc6:	bd70      	pop	{r4, r5, r6, pc}
 8014dc8:	2001      	movs	r0, #1
 8014dca:	bd70      	pop	{r4, r5, r6, pc}

08014dcc <rcl_wait_set_add_client>:
 8014dcc:	b320      	cbz	r0, 8014e18 <rcl_wait_set_add_client+0x4c>
 8014dce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	b1d3      	cbz	r3, 8014e0c <rcl_wait_set_add_client+0x40>
 8014dd6:	b319      	cbz	r1, 8014e20 <rcl_wait_set_add_client+0x54>
 8014dd8:	699d      	ldr	r5, [r3, #24]
 8014dda:	69e0      	ldr	r0, [r4, #28]
 8014ddc:	4285      	cmp	r5, r0
 8014dde:	d218      	bcs.n	8014e12 <rcl_wait_set_add_client+0x46>
 8014de0:	69a0      	ldr	r0, [r4, #24]
 8014de2:	1c6e      	adds	r6, r5, #1
 8014de4:	619e      	str	r6, [r3, #24]
 8014de6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014dea:	b102      	cbz	r2, 8014dee <rcl_wait_set_add_client+0x22>
 8014dec:	6015      	str	r5, [r2, #0]
 8014dee:	4608      	mov	r0, r1
 8014df0:	f7fe f818 	bl	8012e24 <rcl_client_get_rmw_handle>
 8014df4:	b190      	cbz	r0, 8014e1c <rcl_wait_set_add_client+0x50>
 8014df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014df8:	6842      	ldr	r2, [r0, #4]
 8014dfa:	6a1b      	ldr	r3, [r3, #32]
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014e04:	69d3      	ldr	r3, [r2, #28]
 8014e06:	3301      	adds	r3, #1
 8014e08:	61d3      	str	r3, [r2, #28]
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}
 8014e0c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014e10:	bd70      	pop	{r4, r5, r6, pc}
 8014e12:	f240 3086 	movw	r0, #902	; 0x386
 8014e16:	bd70      	pop	{r4, r5, r6, pc}
 8014e18:	200b      	movs	r0, #11
 8014e1a:	4770      	bx	lr
 8014e1c:	2001      	movs	r0, #1
 8014e1e:	bd70      	pop	{r4, r5, r6, pc}
 8014e20:	200b      	movs	r0, #11
 8014e22:	bd70      	pop	{r4, r5, r6, pc}

08014e24 <rcl_wait_set_add_service>:
 8014e24:	b320      	cbz	r0, 8014e70 <rcl_wait_set_add_service+0x4c>
 8014e26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	b1d3      	cbz	r3, 8014e64 <rcl_wait_set_add_service+0x40>
 8014e2e:	b319      	cbz	r1, 8014e78 <rcl_wait_set_add_service+0x54>
 8014e30:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8014e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014e34:	4285      	cmp	r5, r0
 8014e36:	d218      	bcs.n	8014e6a <rcl_wait_set_add_service+0x46>
 8014e38:	6a20      	ldr	r0, [r4, #32]
 8014e3a:	1c6e      	adds	r6, r5, #1
 8014e3c:	625e      	str	r6, [r3, #36]	; 0x24
 8014e3e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e42:	b102      	cbz	r2, 8014e46 <rcl_wait_set_add_service+0x22>
 8014e44:	6015      	str	r5, [r2, #0]
 8014e46:	4608      	mov	r0, r1
 8014e48:	f7fe fe42 	bl	8013ad0 <rcl_service_get_rmw_handle>
 8014e4c:	b190      	cbz	r0, 8014e74 <rcl_wait_set_add_service+0x50>
 8014e4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e50:	6842      	ldr	r2, [r0, #4]
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	2000      	movs	r0, #0
 8014e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014e5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8014e5e:	3301      	adds	r3, #1
 8014e60:	6293      	str	r3, [r2, #40]	; 0x28
 8014e62:	bd70      	pop	{r4, r5, r6, pc}
 8014e64:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	f240 3086 	movw	r0, #902	; 0x386
 8014e6e:	bd70      	pop	{r4, r5, r6, pc}
 8014e70:	200b      	movs	r0, #11
 8014e72:	4770      	bx	lr
 8014e74:	2001      	movs	r0, #1
 8014e76:	bd70      	pop	{r4, r5, r6, pc}
 8014e78:	200b      	movs	r0, #11
 8014e7a:	bd70      	pop	{r4, r5, r6, pc}
 8014e7c:	0000      	movs	r0, r0
	...

08014e80 <rcl_wait>:
 8014e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e84:	b08f      	sub	sp, #60	; 0x3c
 8014e86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	f000 8152 	beq.w	8015134 <rcl_wait+0x2b4>
 8014e90:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8014e92:	4604      	mov	r4, r0
 8014e94:	2d00      	cmp	r5, #0
 8014e96:	f000 80c0 	beq.w	801501a <rcl_wait+0x19a>
 8014e9a:	6843      	ldr	r3, [r0, #4]
 8014e9c:	b973      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014e9e:	68e3      	ldr	r3, [r4, #12]
 8014ea0:	b963      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014ea2:	6963      	ldr	r3, [r4, #20]
 8014ea4:	b953      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014ea6:	69e3      	ldr	r3, [r4, #28]
 8014ea8:	b943      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014eac:	b933      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014eb0:	b923      	cbnz	r3, 8014ebc <rcl_wait+0x3c>
 8014eb2:	f240 3085 	movw	r0, #901	; 0x385
 8014eb6:	b00f      	add	sp, #60	; 0x3c
 8014eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ec0:	2a01      	cmp	r2, #1
 8014ec2:	f173 0300 	sbcs.w	r3, r3, #0
 8014ec6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014ec8:	db56      	blt.n	8014f78 <rcl_wait+0xf8>
 8014eca:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8014ece:	2900      	cmp	r1, #0
 8014ed0:	f000 814f 	beq.w	8015172 <rcl_wait+0x2f2>
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	f04f 0800 	mov.w	r8, #0
 8014eda:	f04f 0900 	mov.w	r9, #0
 8014ede:	469b      	mov	fp, r3
 8014ee0:	9307      	str	r3, [sp, #28]
 8014ee2:	e00d      	b.n	8014f00 <rcl_wait+0x80>
 8014ee4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014ee6:	6922      	ldr	r2, [r4, #16]
 8014ee8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014eea:	f842 000a 	str.w	r0, [r2, sl]
 8014eee:	2300      	movs	r3, #0
 8014ef0:	f118 0801 	adds.w	r8, r8, #1
 8014ef4:	f149 0900 	adc.w	r9, r9, #0
 8014ef8:	4599      	cmp	r9, r3
 8014efa:	bf08      	it	eq
 8014efc:	4588      	cmpeq	r8, r1
 8014efe:	d243      	bcs.n	8014f88 <rcl_wait+0x108>
 8014f00:	6922      	ldr	r2, [r4, #16]
 8014f02:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8014f06:	f852 000a 	ldr.w	r0, [r2, sl]
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d0ef      	beq.n	8014eee <rcl_wait+0x6e>
 8014f0e:	68e2      	ldr	r2, [r4, #12]
 8014f10:	6969      	ldr	r1, [r5, #20]
 8014f12:	4442      	add	r2, r8
 8014f14:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8014f18:	b13b      	cbz	r3, 8014f2a <rcl_wait+0xaa>
 8014f1a:	692a      	ldr	r2, [r5, #16]
 8014f1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014f20:	6921      	ldr	r1, [r4, #16]
 8014f22:	3201      	adds	r2, #1
 8014f24:	f851 000a 	ldr.w	r0, [r1, sl]
 8014f28:	612a      	str	r2, [r5, #16]
 8014f2a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014f2e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8014f32:	f7ff f9c1 	bl	80142b8 <rcl_timer_is_canceled>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	d1bd      	bne.n	8014eb6 <rcl_wait+0x36>
 8014f3a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014f3e:	2a00      	cmp	r2, #0
 8014f40:	d1d0      	bne.n	8014ee4 <rcl_wait+0x64>
 8014f42:	6922      	ldr	r2, [r4, #16]
 8014f44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f48:	f852 000a 	ldr.w	r0, [r2, sl]
 8014f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f50:	a90a      	add	r1, sp, #40	; 0x28
 8014f52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014f56:	f7ff f98b 	bl	8014270 <rcl_timer_get_time_until_next_call>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	d1ab      	bne.n	8014eb6 <rcl_wait+0x36>
 8014f5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014f62:	42b2      	cmp	r2, r6
 8014f64:	eb73 0107 	sbcs.w	r1, r3, r7
 8014f68:	da03      	bge.n	8014f72 <rcl_wait+0xf2>
 8014f6a:	461f      	mov	r7, r3
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	4616      	mov	r6, r2
 8014f70:	9307      	str	r3, [sp, #28]
 8014f72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014f74:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014f76:	e7ba      	b.n	8014eee <rcl_wait+0x6e>
 8014f78:	2900      	cmp	r1, #0
 8014f7a:	f000 80e4 	beq.w	8015146 <rcl_wait+0x2c6>
 8014f7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014f82:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014f86:	e7a5      	b.n	8014ed4 <rcl_wait+0x54>
 8014f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f8c:	4313      	orrs	r3, r2
 8014f8e:	d149      	bne.n	8015024 <rcl_wait+0x1a4>
 8014f90:	2300      	movs	r3, #0
 8014f92:	2200      	movs	r2, #0
 8014f94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014f98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014f9c:	ab0a      	add	r3, sp, #40	; 0x28
 8014f9e:	9302      	str	r3, [sp, #8]
 8014fa0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8014fa2:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014fa6:	e9cd 3200 	strd	r3, r2, [sp]
 8014faa:	f105 0110 	add.w	r1, r5, #16
 8014fae:	f105 031c 	add.w	r3, r5, #28
 8014fb2:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8014fb6:	1d28      	adds	r0, r5, #4
 8014fb8:	f000 fec4 	bl	8015d44 <rmw_wait>
 8014fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014fbe:	4607      	mov	r7, r0
 8014fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014fc2:	b32a      	cbz	r2, 8015010 <rcl_wait+0x190>
 8014fc4:	f04f 0800 	mov.w	r8, #0
 8014fc8:	4646      	mov	r6, r8
 8014fca:	e005      	b.n	8014fd8 <rcl_wait+0x158>
 8014fcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014fd0:	f108 0801 	add.w	r8, r8, #1
 8014fd4:	4542      	cmp	r2, r8
 8014fd6:	d91b      	bls.n	8015010 <rcl_wait+0x190>
 8014fd8:	6922      	ldr	r2, [r4, #16]
 8014fda:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8014fde:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	d0f3      	beq.n	8014fce <rcl_wait+0x14e>
 8014fe6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014fea:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8014fee:	f7ff f907 	bl	8014200 <rcl_timer_is_ready>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	f47f af5f 	bne.w	8014eb6 <rcl_wait+0x36>
 8014ff8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014ffc:	2a00      	cmp	r2, #0
 8014ffe:	d1e5      	bne.n	8014fcc <rcl_wait+0x14c>
 8015000:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015002:	6921      	ldr	r1, [r4, #16]
 8015004:	f108 0801 	add.w	r8, r8, #1
 8015008:	514a      	str	r2, [r1, r5]
 801500a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801500c:	4542      	cmp	r2, r8
 801500e:	d8e3      	bhi.n	8014fd8 <rcl_wait+0x158>
 8015010:	f037 0002 	bics.w	r0, r7, #2
 8015014:	d02c      	beq.n	8015070 <rcl_wait+0x1f0>
 8015016:	2001      	movs	r0, #1
 8015018:	e74d      	b.n	8014eb6 <rcl_wait+0x36>
 801501a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801501e:	b00f      	add	sp, #60	; 0x3c
 8015020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015028:	2a01      	cmp	r2, #1
 801502a:	f173 0300 	sbcs.w	r3, r3, #0
 801502e:	f2c0 8085 	blt.w	801513c <rcl_wait+0x2bc>
 8015032:	2e00      	cmp	r6, #0
 8015034:	f177 0300 	sbcs.w	r3, r7, #0
 8015038:	bfb8      	it	lt
 801503a:	2600      	movlt	r6, #0
 801503c:	a34e      	add	r3, pc, #312	; (adr r3, 8015178 <rcl_wait+0x2f8>)
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	bfb8      	it	lt
 8015044:	2700      	movlt	r7, #0
 8015046:	4630      	mov	r0, r6
 8015048:	4639      	mov	r1, r7
 801504a:	f7eb fb87 	bl	800075c <__aeabi_ldivmod>
 801504e:	a34a      	add	r3, pc, #296	; (adr r3, 8015178 <rcl_wait+0x2f8>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	4680      	mov	r8, r0
 8015056:	4689      	mov	r9, r1
 8015058:	4630      	mov	r0, r6
 801505a:	4639      	mov	r1, r7
 801505c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8015060:	f7eb fb7c 	bl	800075c <__aeabi_ldivmod>
 8015064:	4619      	mov	r1, r3
 8015066:	4610      	mov	r0, r2
 8015068:	ab0a      	add	r3, sp, #40	; 0x28
 801506a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801506e:	e796      	b.n	8014f9e <rcl_wait+0x11e>
 8015070:	6866      	ldr	r6, [r4, #4]
 8015072:	4602      	mov	r2, r0
 8015074:	b91e      	cbnz	r6, 801507e <rcl_wait+0x1fe>
 8015076:	e00d      	b.n	8015094 <rcl_wait+0x214>
 8015078:	3201      	adds	r2, #1
 801507a:	42b2      	cmp	r2, r6
 801507c:	d00a      	beq.n	8015094 <rcl_wait+0x214>
 801507e:	6899      	ldr	r1, [r3, #8]
 8015080:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015084:	2900      	cmp	r1, #0
 8015086:	d1f7      	bne.n	8015078 <rcl_wait+0x1f8>
 8015088:	6825      	ldr	r5, [r4, #0]
 801508a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801508e:	3201      	adds	r2, #1
 8015090:	42b2      	cmp	r2, r6
 8015092:	d1f4      	bne.n	801507e <rcl_wait+0x1fe>
 8015094:	68e6      	ldr	r6, [r4, #12]
 8015096:	2200      	movs	r2, #0
 8015098:	b91e      	cbnz	r6, 80150a2 <rcl_wait+0x222>
 801509a:	e00d      	b.n	80150b8 <rcl_wait+0x238>
 801509c:	3201      	adds	r2, #1
 801509e:	42b2      	cmp	r2, r6
 80150a0:	d00a      	beq.n	80150b8 <rcl_wait+0x238>
 80150a2:	6959      	ldr	r1, [r3, #20]
 80150a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80150a8:	2900      	cmp	r1, #0
 80150aa:	d1f7      	bne.n	801509c <rcl_wait+0x21c>
 80150ac:	68a5      	ldr	r5, [r4, #8]
 80150ae:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80150b2:	3201      	adds	r2, #1
 80150b4:	42b2      	cmp	r2, r6
 80150b6:	d1f4      	bne.n	80150a2 <rcl_wait+0x222>
 80150b8:	69e6      	ldr	r6, [r4, #28]
 80150ba:	2200      	movs	r2, #0
 80150bc:	b91e      	cbnz	r6, 80150c6 <rcl_wait+0x246>
 80150be:	e00d      	b.n	80150dc <rcl_wait+0x25c>
 80150c0:	3201      	adds	r2, #1
 80150c2:	42b2      	cmp	r2, r6
 80150c4:	d00a      	beq.n	80150dc <rcl_wait+0x25c>
 80150c6:	6a19      	ldr	r1, [r3, #32]
 80150c8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80150cc:	2900      	cmp	r1, #0
 80150ce:	d1f7      	bne.n	80150c0 <rcl_wait+0x240>
 80150d0:	69a5      	ldr	r5, [r4, #24]
 80150d2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80150d6:	3201      	adds	r2, #1
 80150d8:	42b2      	cmp	r2, r6
 80150da:	d1f4      	bne.n	80150c6 <rcl_wait+0x246>
 80150dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80150de:	2200      	movs	r2, #0
 80150e0:	b91e      	cbnz	r6, 80150ea <rcl_wait+0x26a>
 80150e2:	e00d      	b.n	8015100 <rcl_wait+0x280>
 80150e4:	3201      	adds	r2, #1
 80150e6:	4296      	cmp	r6, r2
 80150e8:	d00a      	beq.n	8015100 <rcl_wait+0x280>
 80150ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80150ec:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80150f0:	2900      	cmp	r1, #0
 80150f2:	d1f7      	bne.n	80150e4 <rcl_wait+0x264>
 80150f4:	6a25      	ldr	r5, [r4, #32]
 80150f6:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80150fa:	3201      	adds	r2, #1
 80150fc:	4296      	cmp	r6, r2
 80150fe:	d1f4      	bne.n	80150ea <rcl_wait+0x26a>
 8015100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015102:	2200      	movs	r2, #0
 8015104:	b91e      	cbnz	r6, 801510e <rcl_wait+0x28e>
 8015106:	e00d      	b.n	8015124 <rcl_wait+0x2a4>
 8015108:	3201      	adds	r2, #1
 801510a:	42b2      	cmp	r2, r6
 801510c:	d00a      	beq.n	8015124 <rcl_wait+0x2a4>
 801510e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015110:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015114:	2900      	cmp	r1, #0
 8015116:	d1f7      	bne.n	8015108 <rcl_wait+0x288>
 8015118:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801511a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801511e:	3201      	adds	r2, #1
 8015120:	42b2      	cmp	r2, r6
 8015122:	d1f4      	bne.n	801510e <rcl_wait+0x28e>
 8015124:	2f02      	cmp	r7, #2
 8015126:	f47f aec6 	bne.w	8014eb6 <rcl_wait+0x36>
 801512a:	9b07      	ldr	r3, [sp, #28]
 801512c:	2b00      	cmp	r3, #0
 801512e:	bf08      	it	eq
 8015130:	2002      	moveq	r0, #2
 8015132:	e6c0      	b.n	8014eb6 <rcl_wait+0x36>
 8015134:	200b      	movs	r0, #11
 8015136:	b00f      	add	sp, #60	; 0x3c
 8015138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513c:	9b07      	ldr	r3, [sp, #28]
 801513e:	2b00      	cmp	r3, #0
 8015140:	f47f af77 	bne.w	8015032 <rcl_wait+0x1b2>
 8015144:	e72b      	b.n	8014f9e <rcl_wait+0x11e>
 8015146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801514a:	4313      	orrs	r3, r2
 801514c:	bf08      	it	eq
 801514e:	9107      	streq	r1, [sp, #28]
 8015150:	f43f af1e 	beq.w	8014f90 <rcl_wait+0x110>
 8015154:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801515c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015160:	2a01      	cmp	r2, #1
 8015162:	f173 0300 	sbcs.w	r3, r3, #0
 8015166:	f04f 0300 	mov.w	r3, #0
 801516a:	9307      	str	r3, [sp, #28]
 801516c:	f6bf af61 	bge.w	8015032 <rcl_wait+0x1b2>
 8015170:	e715      	b.n	8014f9e <rcl_wait+0x11e>
 8015172:	4632      	mov	r2, r6
 8015174:	463b      	mov	r3, r7
 8015176:	e7f3      	b.n	8015160 <rcl_wait+0x2e0>
 8015178:	3b9aca00 	.word	0x3b9aca00
 801517c:	00000000 	.word	0x00000000

08015180 <__atomic_load_8>:
 8015180:	f04f 0101 	mov.w	r1, #1
 8015184:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 8015188:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 801518c:	4b13      	ldr	r3, [pc, #76]	; (80151dc <__atomic_load_8+0x5c>)
 801518e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8015192:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8015196:	fb03 f302 	mul.w	r3, r3, r2
 801519a:	4a11      	ldr	r2, [pc, #68]	; (80151e0 <__atomic_load_8+0x60>)
 801519c:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80151a0:	b430      	push	{r4, r5}
 80151a2:	fba2 4203 	umull	r4, r2, r2, r3
 80151a6:	0912      	lsrs	r2, r2, #4
 80151a8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80151ac:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 80151b0:	4c0c      	ldr	r4, [pc, #48]	; (80151e4 <__atomic_load_8+0x64>)
 80151b2:	1a9b      	subs	r3, r3, r2
 80151b4:	18e5      	adds	r5, r4, r3
 80151b6:	e8d5 2f4f 	ldrexb	r2, [r5]
 80151ba:	e8c5 1f4c 	strexb	ip, r1, [r5]
 80151be:	f1bc 0f00 	cmp.w	ip, #0
 80151c2:	d1f8      	bne.n	80151b6 <__atomic_load_8+0x36>
 80151c4:	b2d2      	uxtb	r2, r2
 80151c6:	f3bf 8f5b 	dmb	ish
 80151ca:	2a00      	cmp	r2, #0
 80151cc:	d1f3      	bne.n	80151b6 <__atomic_load_8+0x36>
 80151ce:	c803      	ldmia	r0, {r0, r1}
 80151d0:	f3bf 8f5b 	dmb	ish
 80151d4:	54e2      	strb	r2, [r4, r3]
 80151d6:	bc30      	pop	{r4, r5}
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	27d4eb2d 	.word	0x27d4eb2d
 80151e0:	b21642c9 	.word	0xb21642c9
 80151e4:	20006788 	.word	0x20006788

080151e8 <__atomic_store_8>:
 80151e8:	b4f0      	push	{r4, r5, r6, r7}
 80151ea:	f04f 0501 	mov.w	r5, #1
 80151ee:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 80151f2:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 80151f6:	4913      	ldr	r1, [pc, #76]	; (8015244 <__atomic_store_8+0x5c>)
 80151f8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80151fc:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 8015200:	fb01 f104 	mul.w	r1, r1, r4
 8015204:	4c10      	ldr	r4, [pc, #64]	; (8015248 <__atomic_store_8+0x60>)
 8015206:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801520a:	fba4 6401 	umull	r6, r4, r4, r1
 801520e:	0924      	lsrs	r4, r4, #4
 8015210:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8015214:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 8015218:	4e0c      	ldr	r6, [pc, #48]	; (801524c <__atomic_store_8+0x64>)
 801521a:	1b09      	subs	r1, r1, r4
 801521c:	1877      	adds	r7, r6, r1
 801521e:	e8d7 4f4f 	ldrexb	r4, [r7]
 8015222:	e8c7 5f4c 	strexb	ip, r5, [r7]
 8015226:	f1bc 0f00 	cmp.w	ip, #0
 801522a:	d1f8      	bne.n	801521e <__atomic_store_8+0x36>
 801522c:	b2e4      	uxtb	r4, r4
 801522e:	f3bf 8f5b 	dmb	ish
 8015232:	2c00      	cmp	r4, #0
 8015234:	d1f3      	bne.n	801521e <__atomic_store_8+0x36>
 8015236:	e9c0 2300 	strd	r2, r3, [r0]
 801523a:	f3bf 8f5b 	dmb	ish
 801523e:	5474      	strb	r4, [r6, r1]
 8015240:	bcf0      	pop	{r4, r5, r6, r7}
 8015242:	4770      	bx	lr
 8015244:	27d4eb2d 	.word	0x27d4eb2d
 8015248:	b21642c9 	.word	0xb21642c9
 801524c:	20006788 	.word	0x20006788

08015250 <__atomic_exchange_8>:
 8015250:	b4f0      	push	{r4, r5, r6, r7}
 8015252:	4605      	mov	r5, r0
 8015254:	f04f 0001 	mov.w	r0, #1
 8015258:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 801525c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8015260:	4c14      	ldr	r4, [pc, #80]	; (80152b4 <__atomic_exchange_8+0x64>)
 8015262:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015266:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801526a:	fb04 f401 	mul.w	r4, r4, r1
 801526e:	4912      	ldr	r1, [pc, #72]	; (80152b8 <__atomic_exchange_8+0x68>)
 8015270:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8015274:	fba1 6104 	umull	r6, r1, r1, r4
 8015278:	0909      	lsrs	r1, r1, #4
 801527a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 801527e:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8015282:	4f0e      	ldr	r7, [pc, #56]	; (80152bc <__atomic_exchange_8+0x6c>)
 8015284:	1a64      	subs	r4, r4, r1
 8015286:	1939      	adds	r1, r7, r4
 8015288:	e8d1 6f4f 	ldrexb	r6, [r1]
 801528c:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015290:	f1bc 0f00 	cmp.w	ip, #0
 8015294:	d1f8      	bne.n	8015288 <__atomic_exchange_8+0x38>
 8015296:	b2f6      	uxtb	r6, r6
 8015298:	f3bf 8f5b 	dmb	ish
 801529c:	2e00      	cmp	r6, #0
 801529e:	d1f3      	bne.n	8015288 <__atomic_exchange_8+0x38>
 80152a0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80152a4:	e9c5 2300 	strd	r2, r3, [r5]
 80152a8:	f3bf 8f5b 	dmb	ish
 80152ac:	553e      	strb	r6, [r7, r4]
 80152ae:	bcf0      	pop	{r4, r5, r6, r7}
 80152b0:	4770      	bx	lr
 80152b2:	bf00      	nop
 80152b4:	27d4eb2d 	.word	0x27d4eb2d
 80152b8:	b21642c9 	.word	0xb21642c9
 80152bc:	20006788 	.word	0x20006788

080152c0 <__atomic_fetch_add_8>:
 80152c0:	b4f0      	push	{r4, r5, r6, r7}
 80152c2:	4605      	mov	r5, r0
 80152c4:	f04f 0001 	mov.w	r0, #1
 80152c8:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 80152cc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80152d0:	4c15      	ldr	r4, [pc, #84]	; (8015328 <__atomic_fetch_add_8+0x68>)
 80152d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80152d6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80152da:	fb04 f401 	mul.w	r4, r4, r1
 80152de:	4913      	ldr	r1, [pc, #76]	; (801532c <__atomic_fetch_add_8+0x6c>)
 80152e0:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 80152e4:	fba1 6104 	umull	r6, r1, r1, r4
 80152e8:	0909      	lsrs	r1, r1, #4
 80152ea:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80152ee:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 80152f2:	4f0f      	ldr	r7, [pc, #60]	; (8015330 <__atomic_fetch_add_8+0x70>)
 80152f4:	1a64      	subs	r4, r4, r1
 80152f6:	1939      	adds	r1, r7, r4
 80152f8:	e8d1 6f4f 	ldrexb	r6, [r1]
 80152fc:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015300:	f1bc 0f00 	cmp.w	ip, #0
 8015304:	d1f8      	bne.n	80152f8 <__atomic_fetch_add_8+0x38>
 8015306:	b2f6      	uxtb	r6, r6
 8015308:	f3bf 8f5b 	dmb	ish
 801530c:	2e00      	cmp	r6, #0
 801530e:	d1f3      	bne.n	80152f8 <__atomic_fetch_add_8+0x38>
 8015310:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015314:	1882      	adds	r2, r0, r2
 8015316:	eb41 0303 	adc.w	r3, r1, r3
 801531a:	e9c5 2300 	strd	r2, r3, [r5]
 801531e:	f3bf 8f5b 	dmb	ish
 8015322:	553e      	strb	r6, [r7, r4]
 8015324:	bcf0      	pop	{r4, r5, r6, r7}
 8015326:	4770      	bx	lr
 8015328:	27d4eb2d 	.word	0x27d4eb2d
 801532c:	b21642c9 	.word	0xb21642c9
 8015330:	20006788 	.word	0x20006788

08015334 <rcutils_is_directory>:
 8015334:	2000      	movs	r0, #0
 8015336:	4770      	bx	lr

08015338 <rcutils_join_path>:
 8015338:	b082      	sub	sp, #8
 801533a:	2000      	movs	r0, #0
 801533c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015340:	b002      	add	sp, #8
 8015342:	4770      	bx	lr

08015344 <rcutils_to_native_path>:
 8015344:	b084      	sub	sp, #16
 8015346:	a801      	add	r0, sp, #4
 8015348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801534c:	b004      	add	sp, #16
 801534e:	2000      	movs	r0, #0
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop

08015354 <rcutils_format_string_limit>:
 8015354:	b40f      	push	{r0, r1, r2, r3}
 8015356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015358:	b083      	sub	sp, #12
 801535a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801535c:	ac08      	add	r4, sp, #32
 801535e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015362:	b34e      	cbz	r6, 80153b8 <rcutils_format_string_limit+0x64>
 8015364:	a808      	add	r0, sp, #32
 8015366:	f7f5 fc3b 	bl	800abe0 <rcutils_allocator_is_valid>
 801536a:	b328      	cbz	r0, 80153b8 <rcutils_format_string_limit+0x64>
 801536c:	2100      	movs	r1, #0
 801536e:	ab0f      	add	r3, sp, #60	; 0x3c
 8015370:	4608      	mov	r0, r1
 8015372:	4632      	mov	r2, r6
 8015374:	e9cd 3300 	strd	r3, r3, [sp]
 8015378:	f000 f8f4 	bl	8015564 <rcutils_vsnprintf>
 801537c:	1c43      	adds	r3, r0, #1
 801537e:	4605      	mov	r5, r0
 8015380:	d01a      	beq.n	80153b8 <rcutils_format_string_limit+0x64>
 8015382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015384:	1c47      	adds	r7, r0, #1
 8015386:	429f      	cmp	r7, r3
 8015388:	bf84      	itt	hi
 801538a:	461f      	movhi	r7, r3
 801538c:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8015390:	4638      	mov	r0, r7
 8015392:	9b08      	ldr	r3, [sp, #32]
 8015394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015396:	4798      	blx	r3
 8015398:	4604      	mov	r4, r0
 801539a:	b168      	cbz	r0, 80153b8 <rcutils_format_string_limit+0x64>
 801539c:	4632      	mov	r2, r6
 801539e:	4639      	mov	r1, r7
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	f000 f8df 	bl	8015564 <rcutils_vsnprintf>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	db02      	blt.n	80153b0 <rcutils_format_string_limit+0x5c>
 80153aa:	2300      	movs	r3, #0
 80153ac:	5563      	strb	r3, [r4, r5]
 80153ae:	e004      	b.n	80153ba <rcutils_format_string_limit+0x66>
 80153b0:	4620      	mov	r0, r4
 80153b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80153b6:	4798      	blx	r3
 80153b8:	2400      	movs	r4, #0
 80153ba:	4620      	mov	r0, r4
 80153bc:	b003      	add	sp, #12
 80153be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80153c2:	b004      	add	sp, #16
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop

080153c8 <rcutils_get_env>:
 80153c8:	b168      	cbz	r0, 80153e6 <rcutils_get_env+0x1e>
 80153ca:	b510      	push	{r4, lr}
 80153cc:	460c      	mov	r4, r1
 80153ce:	b129      	cbz	r1, 80153dc <rcutils_get_env+0x14>
 80153d0:	f001 fdc6 	bl	8016f60 <getenv>
 80153d4:	b120      	cbz	r0, 80153e0 <rcutils_get_env+0x18>
 80153d6:	6020      	str	r0, [r4, #0]
 80153d8:	2000      	movs	r0, #0
 80153da:	bd10      	pop	{r4, pc}
 80153dc:	4803      	ldr	r0, [pc, #12]	; (80153ec <rcutils_get_env+0x24>)
 80153de:	bd10      	pop	{r4, pc}
 80153e0:	4b03      	ldr	r3, [pc, #12]	; (80153f0 <rcutils_get_env+0x28>)
 80153e2:	6023      	str	r3, [r4, #0]
 80153e4:	bd10      	pop	{r4, pc}
 80153e6:	4803      	ldr	r0, [pc, #12]	; (80153f4 <rcutils_get_env+0x2c>)
 80153e8:	4770      	bx	lr
 80153ea:	bf00      	nop
 80153ec:	08019d60 	.word	0x08019d60
 80153f0:	08019e84 	.word	0x08019e84
 80153f4:	08019d44 	.word	0x08019d44

080153f8 <rcutils_repl_str>:
 80153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fc:	4680      	mov	r8, r0
 80153fe:	b089      	sub	sp, #36	; 0x24
 8015400:	4608      	mov	r0, r1
 8015402:	2600      	movs	r6, #0
 8015404:	468a      	mov	sl, r1
 8015406:	4699      	mov	r9, r3
 8015408:	f8cd 8004 	str.w	r8, [sp, #4]
 801540c:	9206      	str	r2, [sp, #24]
 801540e:	f7ea ff19 	bl	8000244 <strlen>
 8015412:	4637      	mov	r7, r6
 8015414:	46b3      	mov	fp, r6
 8015416:	2510      	movs	r5, #16
 8015418:	9002      	str	r0, [sp, #8]
 801541a:	e01e      	b.n	801545a <rcutils_repl_str+0x62>
 801541c:	f10b 0b01 	add.w	fp, fp, #1
 8015420:	455e      	cmp	r6, fp
 8015422:	d211      	bcs.n	8015448 <rcutils_repl_str+0x50>
 8015424:	442e      	add	r6, r5
 8015426:	4638      	mov	r0, r7
 8015428:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801542c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015430:	00b1      	lsls	r1, r6, #2
 8015432:	4798      	blx	r3
 8015434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015438:	2800      	cmp	r0, #0
 801543a:	d074      	beq.n	8015526 <rcutils_repl_str+0x12e>
 801543c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015440:	bf28      	it	cs
 8015442:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015446:	4607      	mov	r7, r0
 8015448:	9a01      	ldr	r2, [sp, #4]
 801544a:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801544e:	1aa2      	subs	r2, r4, r2
 8015450:	f843 2c04 	str.w	r2, [r3, #-4]
 8015454:	9b02      	ldr	r3, [sp, #8]
 8015456:	eb04 0803 	add.w	r8, r4, r3
 801545a:	4651      	mov	r1, sl
 801545c:	4640      	mov	r0, r8
 801545e:	f002 f803 	bl	8017468 <strstr>
 8015462:	4604      	mov	r4, r0
 8015464:	2800      	cmp	r0, #0
 8015466:	d1d9      	bne.n	801541c <rcutils_repl_str+0x24>
 8015468:	4640      	mov	r0, r8
 801546a:	f7ea feeb 	bl	8000244 <strlen>
 801546e:	9b01      	ldr	r3, [sp, #4]
 8015470:	eba8 0303 	sub.w	r3, r8, r3
 8015474:	181d      	adds	r5, r3, r0
 8015476:	9505      	str	r5, [sp, #20]
 8015478:	f1bb 0f00 	cmp.w	fp, #0
 801547c:	d03d      	beq.n	80154fa <rcutils_repl_str+0x102>
 801547e:	9806      	ldr	r0, [sp, #24]
 8015480:	f7ea fee0 	bl	8000244 <strlen>
 8015484:	9b02      	ldr	r3, [sp, #8]
 8015486:	4682      	mov	sl, r0
 8015488:	1ac3      	subs	r3, r0, r3
 801548a:	fb0b 5303 	mla	r3, fp, r3, r5
 801548e:	461a      	mov	r2, r3
 8015490:	9307      	str	r3, [sp, #28]
 8015492:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015496:	f8d9 3000 	ldr.w	r3, [r9]
 801549a:	1c50      	adds	r0, r2, #1
 801549c:	4798      	blx	r3
 801549e:	9004      	str	r0, [sp, #16]
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d040      	beq.n	8015526 <rcutils_repl_str+0x12e>
 80154a4:	463e      	mov	r6, r7
 80154a6:	683a      	ldr	r2, [r7, #0]
 80154a8:	9901      	ldr	r1, [sp, #4]
 80154aa:	f001 fdd3 	bl	8017054 <memcpy>
 80154ae:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80154b2:	683d      	ldr	r5, [r7, #0]
 80154b4:	9303      	str	r3, [sp, #12]
 80154b6:	9b04      	ldr	r3, [sp, #16]
 80154b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80154bc:	441d      	add	r5, r3
 80154be:	4652      	mov	r2, sl
 80154c0:	4641      	mov	r1, r8
 80154c2:	4628      	mov	r0, r5
 80154c4:	f001 fdc6 	bl	8017054 <memcpy>
 80154c8:	f856 2b04 	ldr.w	r2, [r6], #4
 80154cc:	9b02      	ldr	r3, [sp, #8]
 80154ce:	eb05 000a 	add.w	r0, r5, sl
 80154d2:	441a      	add	r2, r3
 80154d4:	9b01      	ldr	r3, [sp, #4]
 80154d6:	1899      	adds	r1, r3, r2
 80154d8:	9b03      	ldr	r3, [sp, #12]
 80154da:	429c      	cmp	r4, r3
 80154dc:	bf0c      	ite	eq
 80154de:	9b05      	ldreq	r3, [sp, #20]
 80154e0:	6833      	ldrne	r3, [r6, #0]
 80154e2:	3401      	adds	r4, #1
 80154e4:	1a9a      	subs	r2, r3, r2
 80154e6:	1885      	adds	r5, r0, r2
 80154e8:	f001 fdb4 	bl	8017054 <memcpy>
 80154ec:	455c      	cmp	r4, fp
 80154ee:	d3e6      	bcc.n	80154be <rcutils_repl_str+0xc6>
 80154f0:	2300      	movs	r3, #0
 80154f2:	9a04      	ldr	r2, [sp, #16]
 80154f4:	9907      	ldr	r1, [sp, #28]
 80154f6:	5453      	strb	r3, [r2, r1]
 80154f8:	e00b      	b.n	8015512 <rcutils_repl_str+0x11a>
 80154fa:	4628      	mov	r0, r5
 80154fc:	f8d9 3000 	ldr.w	r3, [r9]
 8015500:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015504:	3001      	adds	r0, #1
 8015506:	4798      	blx	r3
 8015508:	9004      	str	r0, [sp, #16]
 801550a:	b110      	cbz	r0, 8015512 <rcutils_repl_str+0x11a>
 801550c:	9901      	ldr	r1, [sp, #4]
 801550e:	f001 ff84 	bl	801741a <strcpy>
 8015512:	4638      	mov	r0, r7
 8015514:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015518:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801551c:	4798      	blx	r3
 801551e:	9804      	ldr	r0, [sp, #16]
 8015520:	b009      	add	sp, #36	; 0x24
 8015522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015526:	2300      	movs	r3, #0
 8015528:	9304      	str	r3, [sp, #16]
 801552a:	e7f2      	b.n	8015512 <rcutils_repl_str+0x11a>

0801552c <rcutils_snprintf>:
 801552c:	b40c      	push	{r2, r3}
 801552e:	b530      	push	{r4, r5, lr}
 8015530:	b083      	sub	sp, #12
 8015532:	ab06      	add	r3, sp, #24
 8015534:	f853 2b04 	ldr.w	r2, [r3], #4
 8015538:	9301      	str	r3, [sp, #4]
 801553a:	b152      	cbz	r2, 8015552 <rcutils_snprintf+0x26>
 801553c:	b138      	cbz	r0, 801554e <rcutils_snprintf+0x22>
 801553e:	b141      	cbz	r1, 8015552 <rcutils_snprintf+0x26>
 8015540:	f002 f85c 	bl	80175fc <vsniprintf>
 8015544:	b003      	add	sp, #12
 8015546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801554a:	b002      	add	sp, #8
 801554c:	4770      	bx	lr
 801554e:	2900      	cmp	r1, #0
 8015550:	d0f6      	beq.n	8015540 <rcutils_snprintf+0x14>
 8015552:	f001 fcff 	bl	8016f54 <__errno>
 8015556:	2216      	movs	r2, #22
 8015558:	4603      	mov	r3, r0
 801555a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801555e:	601a      	str	r2, [r3, #0]
 8015560:	e7f0      	b.n	8015544 <rcutils_snprintf+0x18>
 8015562:	bf00      	nop

08015564 <rcutils_vsnprintf>:
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	b13a      	cbz	r2, 8015578 <rcutils_vsnprintf+0x14>
 8015568:	b120      	cbz	r0, 8015574 <rcutils_vsnprintf+0x10>
 801556a:	b129      	cbz	r1, 8015578 <rcutils_vsnprintf+0x14>
 801556c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015570:	f002 b844 	b.w	80175fc <vsniprintf>
 8015574:	2900      	cmp	r1, #0
 8015576:	d0f9      	beq.n	801556c <rcutils_vsnprintf+0x8>
 8015578:	f001 fcec 	bl	8016f54 <__errno>
 801557c:	2316      	movs	r3, #22
 801557e:	6003      	str	r3, [r0, #0]
 8015580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015584:	bd70      	pop	{r4, r5, r6, pc}
 8015586:	bf00      	nop

08015588 <rcutils_strdup>:
 8015588:	b084      	sub	sp, #16
 801558a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801558c:	ac07      	add	r4, sp, #28
 801558e:	4605      	mov	r5, r0
 8015590:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015594:	b1a0      	cbz	r0, 80155c0 <rcutils_strdup+0x38>
 8015596:	f7ea fe55 	bl	8000244 <strlen>
 801559a:	1c47      	adds	r7, r0, #1
 801559c:	4606      	mov	r6, r0
 801559e:	9b07      	ldr	r3, [sp, #28]
 80155a0:	4638      	mov	r0, r7
 80155a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155a4:	4798      	blx	r3
 80155a6:	4604      	mov	r4, r0
 80155a8:	b128      	cbz	r0, 80155b6 <rcutils_strdup+0x2e>
 80155aa:	463a      	mov	r2, r7
 80155ac:	4629      	mov	r1, r5
 80155ae:	f001 fd51 	bl	8017054 <memcpy>
 80155b2:	2300      	movs	r3, #0
 80155b4:	55a3      	strb	r3, [r4, r6]
 80155b6:	4620      	mov	r0, r4
 80155b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80155bc:	b004      	add	sp, #16
 80155be:	4770      	bx	lr
 80155c0:	4604      	mov	r4, r0
 80155c2:	4620      	mov	r0, r4
 80155c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80155c8:	b004      	add	sp, #16
 80155ca:	4770      	bx	lr

080155cc <rcutils_strndup>:
 80155cc:	b082      	sub	sp, #8
 80155ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155d0:	ac06      	add	r4, sp, #24
 80155d2:	4605      	mov	r5, r0
 80155d4:	e884 000c 	stmia.w	r4, {r2, r3}
 80155d8:	b188      	cbz	r0, 80155fe <rcutils_strndup+0x32>
 80155da:	1c4f      	adds	r7, r1, #1
 80155dc:	460e      	mov	r6, r1
 80155de:	4638      	mov	r0, r7
 80155e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80155e2:	4790      	blx	r2
 80155e4:	4604      	mov	r4, r0
 80155e6:	b128      	cbz	r0, 80155f4 <rcutils_strndup+0x28>
 80155e8:	463a      	mov	r2, r7
 80155ea:	4629      	mov	r1, r5
 80155ec:	f001 fd32 	bl	8017054 <memcpy>
 80155f0:	2300      	movs	r3, #0
 80155f2:	55a3      	strb	r3, [r4, r6]
 80155f4:	4620      	mov	r0, r4
 80155f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80155fa:	b002      	add	sp, #8
 80155fc:	4770      	bx	lr
 80155fe:	4604      	mov	r4, r0
 8015600:	e7f8      	b.n	80155f4 <rcutils_strndup+0x28>
 8015602:	bf00      	nop

08015604 <rmw_get_zero_initialized_context>:
 8015604:	b510      	push	{r4, lr}
 8015606:	4604      	mov	r4, r0
 8015608:	2250      	movs	r2, #80	; 0x50
 801560a:	2100      	movs	r1, #0
 801560c:	f001 fd4a 	bl	80170a4 <memset>
 8015610:	4620      	mov	r0, r4
 8015612:	bd10      	pop	{r4, pc}

08015614 <rmw_validate_namespace_with_size>:
 8015614:	b340      	cbz	r0, 8015668 <rmw_validate_namespace_with_size+0x54>
 8015616:	b5d0      	push	{r4, r6, r7, lr}
 8015618:	4614      	mov	r4, r2
 801561a:	b0c2      	sub	sp, #264	; 0x108
 801561c:	b332      	cbz	r2, 801566c <rmw_validate_namespace_with_size+0x58>
 801561e:	2901      	cmp	r1, #1
 8015620:	460f      	mov	r7, r1
 8015622:	461e      	mov	r6, r3
 8015624:	d102      	bne.n	801562c <rmw_validate_namespace_with_size+0x18>
 8015626:	7803      	ldrb	r3, [r0, #0]
 8015628:	2b2f      	cmp	r3, #47	; 0x2f
 801562a:	d019      	beq.n	8015660 <rmw_validate_namespace_with_size+0x4c>
 801562c:	4669      	mov	r1, sp
 801562e:	aa01      	add	r2, sp, #4
 8015630:	f7f5 fd84 	bl	800b13c <rmw_validate_full_topic_name>
 8015634:	b990      	cbnz	r0, 801565c <rmw_validate_namespace_with_size+0x48>
 8015636:	9b00      	ldr	r3, [sp, #0]
 8015638:	b14b      	cbz	r3, 801564e <rmw_validate_namespace_with_size+0x3a>
 801563a:	2b07      	cmp	r3, #7
 801563c:	d007      	beq.n	801564e <rmw_validate_namespace_with_size+0x3a>
 801563e:	1e5a      	subs	r2, r3, #1
 8015640:	2a05      	cmp	r2, #5
 8015642:	d82b      	bhi.n	801569c <rmw_validate_namespace_with_size+0x88>
 8015644:	e8df f002 	tbb	[pc, r2]
 8015648:	24211e1b 	.word	0x24211e1b
 801564c:	1427      	.short	0x1427
 801564e:	2ff5      	cmp	r7, #245	; 0xf5
 8015650:	d906      	bls.n	8015660 <rmw_validate_namespace_with_size+0x4c>
 8015652:	2307      	movs	r3, #7
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	b10e      	cbz	r6, 801565c <rmw_validate_namespace_with_size+0x48>
 8015658:	23f4      	movs	r3, #244	; 0xf4
 801565a:	6033      	str	r3, [r6, #0]
 801565c:	b042      	add	sp, #264	; 0x108
 801565e:	bdd0      	pop	{r4, r6, r7, pc}
 8015660:	2000      	movs	r0, #0
 8015662:	6020      	str	r0, [r4, #0]
 8015664:	b042      	add	sp, #264	; 0x108
 8015666:	bdd0      	pop	{r4, r6, r7, pc}
 8015668:	200b      	movs	r0, #11
 801566a:	4770      	bx	lr
 801566c:	200b      	movs	r0, #11
 801566e:	e7f5      	b.n	801565c <rmw_validate_namespace_with_size+0x48>
 8015670:	2306      	movs	r3, #6
 8015672:	6023      	str	r3, [r4, #0]
 8015674:	2e00      	cmp	r6, #0
 8015676:	d0f1      	beq.n	801565c <rmw_validate_namespace_with_size+0x48>
 8015678:	9b01      	ldr	r3, [sp, #4]
 801567a:	6033      	str	r3, [r6, #0]
 801567c:	e7ee      	b.n	801565c <rmw_validate_namespace_with_size+0x48>
 801567e:	2301      	movs	r3, #1
 8015680:	6023      	str	r3, [r4, #0]
 8015682:	e7f7      	b.n	8015674 <rmw_validate_namespace_with_size+0x60>
 8015684:	2302      	movs	r3, #2
 8015686:	6023      	str	r3, [r4, #0]
 8015688:	e7f4      	b.n	8015674 <rmw_validate_namespace_with_size+0x60>
 801568a:	2303      	movs	r3, #3
 801568c:	6023      	str	r3, [r4, #0]
 801568e:	e7f1      	b.n	8015674 <rmw_validate_namespace_with_size+0x60>
 8015690:	2304      	movs	r3, #4
 8015692:	6023      	str	r3, [r4, #0]
 8015694:	e7ee      	b.n	8015674 <rmw_validate_namespace_with_size+0x60>
 8015696:	2305      	movs	r3, #5
 8015698:	6023      	str	r3, [r4, #0]
 801569a:	e7eb      	b.n	8015674 <rmw_validate_namespace_with_size+0x60>
 801569c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80156a0:	4a02      	ldr	r2, [pc, #8]	; (80156ac <rmw_validate_namespace_with_size+0x98>)
 80156a2:	a802      	add	r0, sp, #8
 80156a4:	f7ff ff42 	bl	801552c <rcutils_snprintf>
 80156a8:	2001      	movs	r0, #1
 80156aa:	e7d7      	b.n	801565c <rmw_validate_namespace_with_size+0x48>
 80156ac:	08019d7c 	.word	0x08019d7c

080156b0 <rmw_validate_namespace>:
 80156b0:	b168      	cbz	r0, 80156ce <rmw_validate_namespace+0x1e>
 80156b2:	b570      	push	{r4, r5, r6, lr}
 80156b4:	460d      	mov	r5, r1
 80156b6:	4616      	mov	r6, r2
 80156b8:	4604      	mov	r4, r0
 80156ba:	f7ea fdc3 	bl	8000244 <strlen>
 80156be:	4633      	mov	r3, r6
 80156c0:	4601      	mov	r1, r0
 80156c2:	462a      	mov	r2, r5
 80156c4:	4620      	mov	r0, r4
 80156c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156ca:	f7ff bfa3 	b.w	8015614 <rmw_validate_namespace_with_size>
 80156ce:	200b      	movs	r0, #11
 80156d0:	4770      	bx	lr
 80156d2:	bf00      	nop

080156d4 <rmw_namespace_validation_result_string>:
 80156d4:	2807      	cmp	r0, #7
 80156d6:	bf9a      	itte	ls
 80156d8:	4b02      	ldrls	r3, [pc, #8]	; (80156e4 <rmw_namespace_validation_result_string+0x10>)
 80156da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80156de:	4802      	ldrhi	r0, [pc, #8]	; (80156e8 <rmw_namespace_validation_result_string+0x14>)
 80156e0:	4770      	bx	lr
 80156e2:	bf00      	nop
 80156e4:	08019f74 	.word	0x08019f74
 80156e8:	08019dcc 	.word	0x08019dcc

080156ec <rmw_validate_node_name>:
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d03b      	beq.n	8015768 <rmw_validate_node_name+0x7c>
 80156f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f4:	460f      	mov	r7, r1
 80156f6:	2900      	cmp	r1, #0
 80156f8:	d038      	beq.n	801576c <rmw_validate_node_name+0x80>
 80156fa:	4615      	mov	r5, r2
 80156fc:	4604      	mov	r4, r0
 80156fe:	f7ea fda1 	bl	8000244 <strlen>
 8015702:	b1e0      	cbz	r0, 801573e <rmw_validate_node_name+0x52>
 8015704:	1e63      	subs	r3, r4, #1
 8015706:	eb03 0e00 	add.w	lr, r3, r0
 801570a:	f1c4 0c01 	rsb	ip, r4, #1
 801570e:	eb0c 0803 	add.w	r8, ip, r3
 8015712:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8015716:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801571a:	f026 0220 	bic.w	r2, r6, #32
 801571e:	2909      	cmp	r1, #9
 8015720:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8015724:	d913      	bls.n	801574e <rmw_validate_node_name+0x62>
 8015726:	2a19      	cmp	r2, #25
 8015728:	d911      	bls.n	801574e <rmw_validate_node_name+0x62>
 801572a:	2e5f      	cmp	r6, #95	; 0x5f
 801572c:	d00f      	beq.n	801574e <rmw_validate_node_name+0x62>
 801572e:	2302      	movs	r3, #2
 8015730:	603b      	str	r3, [r7, #0]
 8015732:	b10d      	cbz	r5, 8015738 <rmw_validate_node_name+0x4c>
 8015734:	f8c5 8000 	str.w	r8, [r5]
 8015738:	2000      	movs	r0, #0
 801573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801573e:	2301      	movs	r3, #1
 8015740:	603b      	str	r3, [r7, #0]
 8015742:	2d00      	cmp	r5, #0
 8015744:	d0f8      	beq.n	8015738 <rmw_validate_node_name+0x4c>
 8015746:	2000      	movs	r0, #0
 8015748:	6028      	str	r0, [r5, #0]
 801574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801574e:	4573      	cmp	r3, lr
 8015750:	d1dd      	bne.n	801570e <rmw_validate_node_name+0x22>
 8015752:	7822      	ldrb	r2, [r4, #0]
 8015754:	4b0d      	ldr	r3, [pc, #52]	; (801578c <rmw_validate_node_name+0xa0>)
 8015756:	5cd3      	ldrb	r3, [r2, r3]
 8015758:	f013 0304 	ands.w	r3, r3, #4
 801575c:	d110      	bne.n	8015780 <rmw_validate_node_name+0x94>
 801575e:	28ff      	cmp	r0, #255	; 0xff
 8015760:	d806      	bhi.n	8015770 <rmw_validate_node_name+0x84>
 8015762:	4618      	mov	r0, r3
 8015764:	603b      	str	r3, [r7, #0]
 8015766:	e7e8      	b.n	801573a <rmw_validate_node_name+0x4e>
 8015768:	200b      	movs	r0, #11
 801576a:	4770      	bx	lr
 801576c:	200b      	movs	r0, #11
 801576e:	e7e4      	b.n	801573a <rmw_validate_node_name+0x4e>
 8015770:	2204      	movs	r2, #4
 8015772:	603a      	str	r2, [r7, #0]
 8015774:	2d00      	cmp	r5, #0
 8015776:	d0df      	beq.n	8015738 <rmw_validate_node_name+0x4c>
 8015778:	22fe      	movs	r2, #254	; 0xfe
 801577a:	4618      	mov	r0, r3
 801577c:	602a      	str	r2, [r5, #0]
 801577e:	e7dc      	b.n	801573a <rmw_validate_node_name+0x4e>
 8015780:	2303      	movs	r3, #3
 8015782:	603b      	str	r3, [r7, #0]
 8015784:	2d00      	cmp	r5, #0
 8015786:	d1de      	bne.n	8015746 <rmw_validate_node_name+0x5a>
 8015788:	e7d6      	b.n	8015738 <rmw_validate_node_name+0x4c>
 801578a:	bf00      	nop
 801578c:	0801a0dd 	.word	0x0801a0dd

08015790 <rmw_node_name_validation_result_string>:
 8015790:	2804      	cmp	r0, #4
 8015792:	bf9a      	itte	ls
 8015794:	4b02      	ldrls	r3, [pc, #8]	; (80157a0 <rmw_node_name_validation_result_string+0x10>)
 8015796:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801579a:	4802      	ldrhi	r0, [pc, #8]	; (80157a4 <rmw_node_name_validation_result_string+0x14>)
 801579c:	4770      	bx	lr
 801579e:	bf00      	nop
 80157a0:	0801a080 	.word	0x0801a080
 80157a4:	08019f94 	.word	0x08019f94

080157a8 <on_status>:
 80157a8:	b082      	sub	sp, #8
 80157aa:	b002      	add	sp, #8
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop

080157b0 <on_topic>:
 80157b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157b4:	4a21      	ldr	r2, [pc, #132]	; (801583c <on_topic+0x8c>)
 80157b6:	b094      	sub	sp, #80	; 0x50
 80157b8:	6812      	ldr	r2, [r2, #0]
 80157ba:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80157bc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80157c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80157c2:	9312      	str	r3, [sp, #72]	; 0x48
 80157c4:	b3ba      	cbz	r2, 8015836 <on_topic+0x86>
 80157c6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80157ca:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80157ce:	e001      	b.n	80157d4 <on_topic+0x24>
 80157d0:	6892      	ldr	r2, [r2, #8]
 80157d2:	b382      	cbz	r2, 8015836 <on_topic+0x86>
 80157d4:	68d4      	ldr	r4, [r2, #12]
 80157d6:	8aa3      	ldrh	r3, [r4, #20]
 80157d8:	428b      	cmp	r3, r1
 80157da:	d1f9      	bne.n	80157d0 <on_topic+0x20>
 80157dc:	7da3      	ldrb	r3, [r4, #22]
 80157de:	4283      	cmp	r3, r0
 80157e0:	d1f6      	bne.n	80157d0 <on_topic+0x20>
 80157e2:	2248      	movs	r2, #72	; 0x48
 80157e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80157e8:	4668      	mov	r0, sp
 80157ea:	f001 fc33 	bl	8017054 <memcpy>
 80157ee:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80157f2:	4620      	mov	r0, r4
 80157f4:	f7f6 fdda 	bl	800c3ac <rmw_uxrce_get_static_input_buffer_for_entity>
 80157f8:	4607      	mov	r7, r0
 80157fa:	b1e0      	cbz	r0, 8015836 <on_topic+0x86>
 80157fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015800:	462a      	mov	r2, r5
 8015802:	4630      	mov	r0, r6
 8015804:	f108 0110 	add.w	r1, r8, #16
 8015808:	f7f8 f83c 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 801580c:	b930      	cbnz	r0, 801581c <on_topic+0x6c>
 801580e:	4639      	mov	r1, r7
 8015810:	480b      	ldr	r0, [pc, #44]	; (8015840 <on_topic+0x90>)
 8015812:	b014      	add	sp, #80	; 0x50
 8015814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015818:	f000 b8be 	b.w	8015998 <put_memory>
 801581c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8015820:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8015824:	f7f6 fbf4 	bl	800c010 <rmw_uros_epoch_nanos>
 8015828:	2305      	movs	r3, #5
 801582a:	f608 0218 	addw	r2, r8, #2072	; 0x818
 801582e:	e9c2 0100 	strd	r0, r1, [r2]
 8015832:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8015836:	b014      	add	sp, #80	; 0x50
 8015838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801583c:	2000bf0c 	.word	0x2000bf0c
 8015840:	20008ca0 	.word	0x20008ca0

08015844 <on_request>:
 8015844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015848:	4823      	ldr	r0, [pc, #140]	; (80158d8 <on_request+0x94>)
 801584a:	b095      	sub	sp, #84	; 0x54
 801584c:	6800      	ldr	r0, [r0, #0]
 801584e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8015852:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8015856:	9113      	str	r1, [sp, #76]	; 0x4c
 8015858:	2800      	cmp	r0, #0
 801585a:	d039      	beq.n	80158d0 <on_request+0x8c>
 801585c:	461d      	mov	r5, r3
 801585e:	e001      	b.n	8015864 <on_request+0x20>
 8015860:	6880      	ldr	r0, [r0, #8]
 8015862:	b3a8      	cbz	r0, 80158d0 <on_request+0x8c>
 8015864:	68c4      	ldr	r4, [r0, #12]
 8015866:	8b21      	ldrh	r1, [r4, #24]
 8015868:	4291      	cmp	r1, r2
 801586a:	d1f9      	bne.n	8015860 <on_request+0x1c>
 801586c:	2248      	movs	r2, #72	; 0x48
 801586e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015872:	4668      	mov	r0, sp
 8015874:	f001 fbee 	bl	8017054 <memcpy>
 8015878:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801587c:	4620      	mov	r0, r4
 801587e:	f7f6 fd95 	bl	800c3ac <rmw_uxrce_get_static_input_buffer_for_entity>
 8015882:	4606      	mov	r6, r0
 8015884:	b320      	cbz	r0, 80158d0 <on_request+0x8c>
 8015886:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801588a:	463a      	mov	r2, r7
 801588c:	4640      	mov	r0, r8
 801588e:	f109 0110 	add.w	r1, r9, #16
 8015892:	f7f7 fff7 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8015896:	b930      	cbnz	r0, 80158a6 <on_request+0x62>
 8015898:	4631      	mov	r1, r6
 801589a:	4810      	ldr	r0, [pc, #64]	; (80158dc <on_request+0x98>)
 801589c:	b015      	add	sp, #84	; 0x54
 801589e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158a2:	f000 b879 	b.w	8015998 <put_memory>
 80158a6:	f609 0628 	addw	r6, r9, #2088	; 0x828
 80158aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158ac:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80158b0:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 80158b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80158b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80158ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80158be:	f7f6 fba7 	bl	800c010 <rmw_uros_epoch_nanos>
 80158c2:	2303      	movs	r3, #3
 80158c4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80158c8:	e9c2 0100 	strd	r0, r1, [r2]
 80158cc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80158d0:	b015      	add	sp, #84	; 0x54
 80158d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158d6:	bf00      	nop
 80158d8:	2000befc 	.word	0x2000befc
 80158dc:	20008ca0 	.word	0x20008ca0

080158e0 <on_reply>:
 80158e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158e4:	4822      	ldr	r0, [pc, #136]	; (8015970 <on_reply+0x90>)
 80158e6:	b095      	sub	sp, #84	; 0x54
 80158e8:	6800      	ldr	r0, [r0, #0]
 80158ea:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80158ee:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 80158f2:	9113      	str	r1, [sp, #76]	; 0x4c
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d037      	beq.n	8015968 <on_reply+0x88>
 80158f8:	461d      	mov	r5, r3
 80158fa:	e001      	b.n	8015900 <on_reply+0x20>
 80158fc:	6880      	ldr	r0, [r0, #8]
 80158fe:	b398      	cbz	r0, 8015968 <on_reply+0x88>
 8015900:	68c4      	ldr	r4, [r0, #12]
 8015902:	8b21      	ldrh	r1, [r4, #24]
 8015904:	4291      	cmp	r1, r2
 8015906:	d1f9      	bne.n	80158fc <on_reply+0x1c>
 8015908:	2248      	movs	r2, #72	; 0x48
 801590a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801590e:	4668      	mov	r0, sp
 8015910:	f001 fba0 	bl	8017054 <memcpy>
 8015914:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015918:	4620      	mov	r0, r4
 801591a:	f7f6 fd47 	bl	800c3ac <rmw_uxrce_get_static_input_buffer_for_entity>
 801591e:	4606      	mov	r6, r0
 8015920:	b310      	cbz	r0, 8015968 <on_reply+0x88>
 8015922:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8015926:	463a      	mov	r2, r7
 8015928:	4640      	mov	r0, r8
 801592a:	f109 0110 	add.w	r1, r9, #16
 801592e:	f7f7 ffa9 	bl	800d884 <ucdr_deserialize_array_uint8_t>
 8015932:	b930      	cbnz	r0, 8015942 <on_reply+0x62>
 8015934:	4631      	mov	r1, r6
 8015936:	480f      	ldr	r0, [pc, #60]	; (8015974 <on_reply+0x94>)
 8015938:	b015      	add	sp, #84	; 0x54
 801593a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801593e:	f000 b82b 	b.w	8015998 <put_memory>
 8015942:	2300      	movs	r3, #0
 8015944:	b2aa      	uxth	r2, r5
 8015946:	f609 0128 	addw	r1, r9, #2088	; 0x828
 801594a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801594e:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8015952:	e9c1 2300 	strd	r2, r3, [r1]
 8015956:	f7f6 fb5b 	bl	800c010 <rmw_uros_epoch_nanos>
 801595a:	2304      	movs	r3, #4
 801595c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015960:	e9c2 0100 	strd	r0, r1, [r2]
 8015964:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015968:	b015      	add	sp, #84	; 0x54
 801596a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801596e:	bf00      	nop
 8015970:	20009530 	.word	0x20009530
 8015974:	20008ca0 	.word	0x20008ca0

08015978 <get_memory>:
 8015978:	4603      	mov	r3, r0
 801597a:	6840      	ldr	r0, [r0, #4]
 801597c:	b158      	cbz	r0, 8015996 <get_memory+0x1e>
 801597e:	6882      	ldr	r2, [r0, #8]
 8015980:	605a      	str	r2, [r3, #4]
 8015982:	b10a      	cbz	r2, 8015988 <get_memory+0x10>
 8015984:	2100      	movs	r1, #0
 8015986:	6051      	str	r1, [r2, #4]
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	6082      	str	r2, [r0, #8]
 801598c:	b102      	cbz	r2, 8015990 <get_memory+0x18>
 801598e:	6050      	str	r0, [r2, #4]
 8015990:	2200      	movs	r2, #0
 8015992:	6042      	str	r2, [r0, #4]
 8015994:	6018      	str	r0, [r3, #0]
 8015996:	4770      	bx	lr

08015998 <put_memory>:
 8015998:	684b      	ldr	r3, [r1, #4]
 801599a:	b10b      	cbz	r3, 80159a0 <put_memory+0x8>
 801599c:	688a      	ldr	r2, [r1, #8]
 801599e:	609a      	str	r2, [r3, #8]
 80159a0:	688a      	ldr	r2, [r1, #8]
 80159a2:	b102      	cbz	r2, 80159a6 <put_memory+0xe>
 80159a4:	6053      	str	r3, [r2, #4]
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	428b      	cmp	r3, r1
 80159aa:	6843      	ldr	r3, [r0, #4]
 80159ac:	bf08      	it	eq
 80159ae:	6002      	streq	r2, [r0, #0]
 80159b0:	608b      	str	r3, [r1, #8]
 80159b2:	b103      	cbz	r3, 80159b6 <put_memory+0x1e>
 80159b4:	6059      	str	r1, [r3, #4]
 80159b6:	2300      	movs	r3, #0
 80159b8:	604b      	str	r3, [r1, #4]
 80159ba:	6041      	str	r1, [r0, #4]
 80159bc:	4770      	bx	lr
 80159be:	bf00      	nop

080159c0 <rmw_destroy_client>:
 80159c0:	b570      	push	{r4, r5, r6, lr}
 80159c2:	b128      	cbz	r0, 80159d0 <rmw_destroy_client+0x10>
 80159c4:	4604      	mov	r4, r0
 80159c6:	6800      	ldr	r0, [r0, #0]
 80159c8:	460d      	mov	r5, r1
 80159ca:	f7f6 fe61 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 80159ce:	b910      	cbnz	r0, 80159d6 <rmw_destroy_client+0x16>
 80159d0:	2401      	movs	r4, #1
 80159d2:	4620      	mov	r0, r4
 80159d4:	bd70      	pop	{r4, r5, r6, pc}
 80159d6:	6863      	ldr	r3, [r4, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d0f9      	beq.n	80159d0 <rmw_destroy_client+0x10>
 80159dc:	2d00      	cmp	r5, #0
 80159de:	d0f7      	beq.n	80159d0 <rmw_destroy_client+0x10>
 80159e0:	6828      	ldr	r0, [r5, #0]
 80159e2:	f7f6 fe55 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d0f2      	beq.n	80159d0 <rmw_destroy_client+0x10>
 80159ea:	686e      	ldr	r6, [r5, #4]
 80159ec:	2e00      	cmp	r6, #0
 80159ee:	d0ef      	beq.n	80159d0 <rmw_destroy_client+0x10>
 80159f0:	6864      	ldr	r4, [r4, #4]
 80159f2:	6932      	ldr	r2, [r6, #16]
 80159f4:	6920      	ldr	r0, [r4, #16]
 80159f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80159fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80159fe:	6819      	ldr	r1, [r3, #0]
 8015a00:	f7fa fb4e 	bl	80100a0 <uxr_buffer_cancel_data>
 8015a04:	4602      	mov	r2, r0
 8015a06:	6920      	ldr	r0, [r4, #16]
 8015a08:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015a0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015a10:	f7f6 fdba 	bl	800c588 <run_xrce_session>
 8015a14:	6920      	ldr	r0, [r4, #16]
 8015a16:	6932      	ldr	r2, [r6, #16]
 8015a18:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015a1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a20:	6819      	ldr	r1, [r3, #0]
 8015a22:	f7f9 ffff 	bl	800fa24 <uxr_buffer_delete_entity>
 8015a26:	4602      	mov	r2, r0
 8015a28:	6920      	ldr	r0, [r4, #16]
 8015a2a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015a2e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015a32:	f7f6 fda9 	bl	800c588 <run_xrce_session>
 8015a36:	4603      	mov	r3, r0
 8015a38:	4628      	mov	r0, r5
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	bf14      	ite	ne
 8015a3e:	2400      	movne	r4, #0
 8015a40:	2402      	moveq	r4, #2
 8015a42:	f7f6 fc91 	bl	800c368 <rmw_uxrce_fini_client_memory>
 8015a46:	e7c4      	b.n	80159d2 <rmw_destroy_client+0x12>

08015a48 <rmw_get_implementation_identifier>:
 8015a48:	4b01      	ldr	r3, [pc, #4]	; (8015a50 <rmw_get_implementation_identifier+0x8>)
 8015a4a:	6818      	ldr	r0, [r3, #0]
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop
 8015a50:	0801a0ac 	.word	0x0801a0ac

08015a54 <create_topic>:
 8015a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a58:	4605      	mov	r5, r0
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	4821      	ldr	r0, [pc, #132]	; (8015ae4 <create_topic+0x90>)
 8015a5e:	460f      	mov	r7, r1
 8015a60:	4616      	mov	r6, r2
 8015a62:	f7ff ff89 	bl	8015978 <get_memory>
 8015a66:	4604      	mov	r4, r0
 8015a68:	b390      	cbz	r0, 8015ad0 <create_topic+0x7c>
 8015a6a:	f241 5396 	movw	r3, #5526	; 0x1596
 8015a6e:	692a      	ldr	r2, [r5, #16]
 8015a70:	68c4      	ldr	r4, [r0, #12]
 8015a72:	5ad0      	ldrh	r0, [r2, r3]
 8015a74:	61a5      	str	r5, [r4, #24]
 8015a76:	1c41      	adds	r1, r0, #1
 8015a78:	6166      	str	r6, [r4, #20]
 8015a7a:	52d1      	strh	r1, [r2, r3]
 8015a7c:	2102      	movs	r1, #2
 8015a7e:	f7fa faa7 	bl	800ffd0 <uxr_object_id>
 8015a82:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8015ae8 <create_topic+0x94>
 8015a86:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8015aec <create_topic+0x98>
 8015a8a:	4641      	mov	r1, r8
 8015a8c:	223c      	movs	r2, #60	; 0x3c
 8015a8e:	6120      	str	r0, [r4, #16]
 8015a90:	4638      	mov	r0, r7
 8015a92:	f7f6 fde7 	bl	800c664 <generate_topic_name>
 8015a96:	4649      	mov	r1, r9
 8015a98:	2264      	movs	r2, #100	; 0x64
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7f6 fda8 	bl	800c5f0 <generate_type_name>
 8015aa0:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8015aa4:	2106      	movs	r1, #6
 8015aa6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015aaa:	e9cd 8900 	strd	r8, r9, [sp]
 8015aae:	9102      	str	r1, [sp, #8]
 8015ab0:	6811      	ldr	r1, [r2, #0]
 8015ab2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ab6:	6922      	ldr	r2, [r4, #16]
 8015ab8:	f7fa f83a 	bl	800fb30 <uxr_buffer_create_topic_bin>
 8015abc:	4602      	mov	r2, r0
 8015abe:	6928      	ldr	r0, [r5, #16]
 8015ac0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015ac4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015ac8:	f7f6 fd5e 	bl	800c588 <run_xrce_session>
 8015acc:	4605      	mov	r5, r0
 8015ace:	b118      	cbz	r0, 8015ad8 <create_topic+0x84>
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	b005      	add	sp, #20
 8015ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ad8:	4620      	mov	r0, r4
 8015ada:	f7f6 fc5b 	bl	800c394 <rmw_uxrce_fini_topic_memory>
 8015ade:	462c      	mov	r4, r5
 8015ae0:	e7f6      	b.n	8015ad0 <create_topic+0x7c>
 8015ae2:	bf00      	nop
 8015ae4:	2000be38 	.word	0x2000be38
 8015ae8:	200067a0 	.word	0x200067a0
 8015aec:	200067dc 	.word	0x200067dc

08015af0 <destroy_topic>:
 8015af0:	b538      	push	{r3, r4, r5, lr}
 8015af2:	6985      	ldr	r5, [r0, #24]
 8015af4:	b1dd      	cbz	r5, 8015b2e <destroy_topic+0x3e>
 8015af6:	4604      	mov	r4, r0
 8015af8:	6928      	ldr	r0, [r5, #16]
 8015afa:	6922      	ldr	r2, [r4, #16]
 8015afc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015b00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b04:	6819      	ldr	r1, [r3, #0]
 8015b06:	f7f9 ff8d 	bl	800fa24 <uxr_buffer_delete_entity>
 8015b0a:	4602      	mov	r2, r0
 8015b0c:	6928      	ldr	r0, [r5, #16]
 8015b0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015b12:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015b16:	f7f6 fd37 	bl	800c588 <run_xrce_session>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	4620      	mov	r0, r4
 8015b20:	bf14      	ite	ne
 8015b22:	2400      	movne	r4, #0
 8015b24:	2402      	moveq	r4, #2
 8015b26:	f7f6 fc35 	bl	800c394 <rmw_uxrce_fini_topic_memory>
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	bd38      	pop	{r3, r4, r5, pc}
 8015b2e:	2401      	movs	r4, #1
 8015b30:	4620      	mov	r0, r4
 8015b32:	bd38      	pop	{r3, r4, r5, pc}

08015b34 <rmw_take_request>:
 8015b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b38:	4605      	mov	r5, r0
 8015b3a:	6800      	ldr	r0, [r0, #0]
 8015b3c:	460c      	mov	r4, r1
 8015b3e:	4690      	mov	r8, r2
 8015b40:	461e      	mov	r6, r3
 8015b42:	b089      	sub	sp, #36	; 0x24
 8015b44:	b128      	cbz	r0, 8015b52 <rmw_take_request+0x1e>
 8015b46:	4b28      	ldr	r3, [pc, #160]	; (8015be8 <rmw_take_request+0xb4>)
 8015b48:	6819      	ldr	r1, [r3, #0]
 8015b4a:	f7ea fb71 	bl	8000230 <strcmp>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	d146      	bne.n	8015be0 <rmw_take_request+0xac>
 8015b52:	b10e      	cbz	r6, 8015b58 <rmw_take_request+0x24>
 8015b54:	2300      	movs	r3, #0
 8015b56:	7033      	strb	r3, [r6, #0]
 8015b58:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015b5c:	f7f6 fc9c 	bl	800c498 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b60:	4648      	mov	r0, r9
 8015b62:	f7f6 fc6f 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b66:	4607      	mov	r7, r0
 8015b68:	b3b0      	cbz	r0, 8015bd8 <rmw_take_request+0xa4>
 8015b6a:	68c5      	ldr	r5, [r0, #12]
 8015b6c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8015b70:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8015b74:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015b78:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8015b7c:	7423      	strb	r3, [r4, #16]
 8015b7e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8015b82:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8015b86:	f8a4 2011 	strh.w	r2, [r4, #17]
 8015b8a:	74e3      	strb	r3, [r4, #19]
 8015b8c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8015b90:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8015b94:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8015b98:	6161      	str	r1, [r4, #20]
 8015b9a:	61a2      	str	r2, [r4, #24]
 8015b9c:	61e3      	str	r3, [r4, #28]
 8015b9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015ba2:	689b      	ldr	r3, [r3, #8]
 8015ba4:	4798      	blx	r3
 8015ba6:	6844      	ldr	r4, [r0, #4]
 8015ba8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015bac:	4668      	mov	r0, sp
 8015bae:	f105 0110 	add.w	r1, r5, #16
 8015bb2:	f7f9 fde9 	bl	800f788 <ucdr_init_buffer>
 8015bb6:	4641      	mov	r1, r8
 8015bb8:	68e3      	ldr	r3, [r4, #12]
 8015bba:	4668      	mov	r0, sp
 8015bbc:	4798      	blx	r3
 8015bbe:	4639      	mov	r1, r7
 8015bc0:	4604      	mov	r4, r0
 8015bc2:	480a      	ldr	r0, [pc, #40]	; (8015bec <rmw_take_request+0xb8>)
 8015bc4:	f7ff fee8 	bl	8015998 <put_memory>
 8015bc8:	b106      	cbz	r6, 8015bcc <rmw_take_request+0x98>
 8015bca:	7034      	strb	r4, [r6, #0]
 8015bcc:	f084 0001 	eor.w	r0, r4, #1
 8015bd0:	b2c0      	uxtb	r0, r0
 8015bd2:	b009      	add	sp, #36	; 0x24
 8015bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bd8:	2001      	movs	r0, #1
 8015bda:	b009      	add	sp, #36	; 0x24
 8015bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be0:	200c      	movs	r0, #12
 8015be2:	b009      	add	sp, #36	; 0x24
 8015be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be8:	0801a0ac 	.word	0x0801a0ac
 8015bec:	20008ca0 	.word	0x20008ca0

08015bf0 <rmw_send_response>:
 8015bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	6800      	ldr	r0, [r0, #0]
 8015bf6:	460c      	mov	r4, r1
 8015bf8:	4617      	mov	r7, r2
 8015bfa:	b091      	sub	sp, #68	; 0x44
 8015bfc:	b128      	cbz	r0, 8015c0a <rmw_send_response+0x1a>
 8015bfe:	4b2a      	ldr	r3, [pc, #168]	; (8015ca8 <rmw_send_response+0xb8>)
 8015c00:	6819      	ldr	r1, [r3, #0]
 8015c02:	f7ea fb15 	bl	8000230 <strcmp>
 8015c06:	2800      	cmp	r0, #0
 8015c08:	d143      	bne.n	8015c92 <rmw_send_response+0xa2>
 8015c0a:	4621      	mov	r1, r4
 8015c0c:	4622      	mov	r2, r4
 8015c0e:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 8015c12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015c16:	f891 c002 	ldrb.w	ip, [r1, #2]
 8015c1a:	686d      	ldr	r5, [r5, #4]
 8015c1c:	6851      	ldr	r1, [r2, #4]
 8015c1e:	6966      	ldr	r6, [r4, #20]
 8015c20:	f88d c016 	strb.w	ip, [sp, #22]
 8015c24:	6892      	ldr	r2, [r2, #8]
 8015c26:	f894 c000 	ldrb.w	ip, [r4]
 8015c2a:	ab02      	add	r3, sp, #8
 8015c2c:	f8ad e014 	strh.w	lr, [sp, #20]
 8015c30:	f88d c017 	strb.w	ip, [sp, #23]
 8015c34:	9606      	str	r6, [sp, #24]
 8015c36:	c307      	stmia	r3!, {r0, r1, r2}
 8015c38:	6922      	ldr	r2, [r4, #16]
 8015c3a:	696b      	ldr	r3, [r5, #20]
 8015c3c:	9207      	str	r2, [sp, #28]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8015c42:	4798      	blx	r3
 8015c44:	6844      	ldr	r4, [r0, #4]
 8015c46:	4638      	mov	r0, r7
 8015c48:	6923      	ldr	r3, [r4, #16]
 8015c4a:	4798      	blx	r3
 8015c4c:	6932      	ldr	r2, [r6, #16]
 8015c4e:	3018      	adds	r0, #24
 8015c50:	9000      	str	r0, [sp, #0]
 8015c52:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015c54:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8015c58:	ab08      	add	r3, sp, #32
 8015c5a:	692a      	ldr	r2, [r5, #16]
 8015c5c:	f7fc f91c 	bl	8011e98 <uxr_prepare_output_stream>
 8015c60:	b910      	cbnz	r0, 8015c68 <rmw_send_response+0x78>
 8015c62:	2001      	movs	r0, #1
 8015c64:	b011      	add	sp, #68	; 0x44
 8015c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c68:	a902      	add	r1, sp, #8
 8015c6a:	a808      	add	r0, sp, #32
 8015c6c:	f7fd f88a 	bl	8012d84 <uxr_serialize_SampleIdentity>
 8015c70:	68a3      	ldr	r3, [r4, #8]
 8015c72:	4638      	mov	r0, r7
 8015c74:	a908      	add	r1, sp, #32
 8015c76:	4798      	blx	r3
 8015c78:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015c7c:	6930      	ldr	r0, [r6, #16]
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d00a      	beq.n	8015c98 <rmw_send_response+0xa8>
 8015c82:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015c84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c88:	f7fb f876 	bl	8010d78 <uxr_run_session_until_confirm_delivery>
 8015c8c:	2000      	movs	r0, #0
 8015c8e:	b011      	add	sp, #68	; 0x44
 8015c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c92:	200c      	movs	r0, #12
 8015c94:	b011      	add	sp, #68	; 0x44
 8015c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c9c:	f7fa ffda 	bl	8010c54 <uxr_flash_output_streams>
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	b011      	add	sp, #68	; 0x44
 8015ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	0801a0ac 	.word	0x0801a0ac

08015cac <rmw_take_response>:
 8015cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cb0:	4604      	mov	r4, r0
 8015cb2:	6800      	ldr	r0, [r0, #0]
 8015cb4:	4688      	mov	r8, r1
 8015cb6:	4617      	mov	r7, r2
 8015cb8:	461d      	mov	r5, r3
 8015cba:	b089      	sub	sp, #36	; 0x24
 8015cbc:	b120      	cbz	r0, 8015cc8 <rmw_take_response+0x1c>
 8015cbe:	4b1f      	ldr	r3, [pc, #124]	; (8015d3c <rmw_take_response+0x90>)
 8015cc0:	6819      	ldr	r1, [r3, #0]
 8015cc2:	f7ea fab5 	bl	8000230 <strcmp>
 8015cc6:	bb88      	cbnz	r0, 8015d2c <rmw_take_response+0x80>
 8015cc8:	b10d      	cbz	r5, 8015cce <rmw_take_response+0x22>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	702b      	strb	r3, [r5, #0]
 8015cce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015cd2:	f7f6 fbe1 	bl	800c498 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cd6:	4648      	mov	r0, r9
 8015cd8:	f7f6 fbb4 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cdc:	4606      	mov	r6, r0
 8015cde:	b348      	cbz	r0, 8015d34 <rmw_take_response+0x88>
 8015ce0:	68c4      	ldr	r4, [r0, #12]
 8015ce2:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8015ce6:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8015cea:	68d1      	ldr	r1, [r2, #12]
 8015cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf0:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8015cf4:	4788      	blx	r1
 8015cf6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015cfa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8015cfe:	f104 0110 	add.w	r1, r4, #16
 8015d02:	4668      	mov	r0, sp
 8015d04:	f7f9 fd40 	bl	800f788 <ucdr_init_buffer>
 8015d08:	4639      	mov	r1, r7
 8015d0a:	4668      	mov	r0, sp
 8015d0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d10:	4798      	blx	r3
 8015d12:	4631      	mov	r1, r6
 8015d14:	4604      	mov	r4, r0
 8015d16:	480a      	ldr	r0, [pc, #40]	; (8015d40 <rmw_take_response+0x94>)
 8015d18:	f7ff fe3e 	bl	8015998 <put_memory>
 8015d1c:	b105      	cbz	r5, 8015d20 <rmw_take_response+0x74>
 8015d1e:	702c      	strb	r4, [r5, #0]
 8015d20:	f084 0001 	eor.w	r0, r4, #1
 8015d24:	b2c0      	uxtb	r0, r0
 8015d26:	b009      	add	sp, #36	; 0x24
 8015d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d2c:	200c      	movs	r0, #12
 8015d2e:	b009      	add	sp, #36	; 0x24
 8015d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d34:	2001      	movs	r0, #1
 8015d36:	b009      	add	sp, #36	; 0x24
 8015d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d3c:	0801a0ac 	.word	0x0801a0ac
 8015d40:	20008ca0 	.word	0x20008ca0

08015d44 <rmw_wait>:
 8015d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d48:	4698      	mov	r8, r3
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	460e      	mov	r6, r1
 8015d4e:	4691      	mov	r9, r2
 8015d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d52:	2a00      	cmp	r2, #0
 8015d54:	f000 8123 	beq.w	8015f9e <rmw_wait+0x25a>
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	f000 812c 	beq.w	8015fb6 <rmw_wait+0x272>
 8015d5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d66:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8015d6a:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8015d6e:	ebbb 0b02 	subs.w	fp, fp, r2
 8015d72:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 8015d76:	eb6a 0a03 	sbc.w	sl, sl, r3
 8015d7a:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 8015d7e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8015d82:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 8015d86:	eb1c 0b02 	adds.w	fp, ip, r2
 8015d8a:	eb4a 0a03 	adc.w	sl, sl, r3
 8015d8e:	4aab      	ldr	r2, [pc, #684]	; (801603c <rmw_wait+0x2f8>)
 8015d90:	2300      	movs	r3, #0
 8015d92:	f7ea fd33 	bl	80007fc <__aeabi_uldivmod>
 8015d96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8015da0:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 8015da4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015da8:	eb1b 0400 	adds.w	r4, fp, r0
 8015dac:	eb4a 0501 	adc.w	r5, sl, r1
 8015db0:	42a2      	cmp	r2, r4
 8015db2:	eb73 0105 	sbcs.w	r1, r3, r5
 8015db6:	f2c0 80f0 	blt.w	8015f9a <rmw_wait+0x256>
 8015dba:	f7f6 fb6d 	bl	800c498 <rmw_uxrce_clean_expired_static_input_buffer>
 8015dbe:	4ba0      	ldr	r3, [pc, #640]	; (8016040 <rmw_wait+0x2fc>)
 8015dc0:	681d      	ldr	r5, [r3, #0]
 8015dc2:	b145      	cbz	r5, 8015dd6 <rmw_wait+0x92>
 8015dc4:	462b      	mov	r3, r5
 8015dc6:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015dca:	2100      	movs	r1, #0
 8015dcc:	68da      	ldr	r2, [r3, #12]
 8015dce:	689b      	ldr	r3, [r3, #8]
 8015dd0:	5411      	strb	r1, [r2, r0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1fa      	bne.n	8015dcc <rmw_wait+0x88>
 8015dd6:	f1b9 0f00 	cmp.w	r9, #0
 8015dda:	d012      	beq.n	8015e02 <rmw_wait+0xbe>
 8015ddc:	f8d9 1000 	ldr.w	r1, [r9]
 8015de0:	b179      	cbz	r1, 8015e02 <rmw_wait+0xbe>
 8015de2:	2300      	movs	r3, #0
 8015de4:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8015de8:	f04f 0c01 	mov.w	ip, #1
 8015dec:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8015df0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015df4:	3301      	adds	r3, #1
 8015df6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015df8:	4299      	cmp	r1, r3
 8015dfa:	6912      	ldr	r2, [r2, #16]
 8015dfc:	f802 c00e 	strb.w	ip, [r2, lr]
 8015e00:	d1f6      	bne.n	8015df0 <rmw_wait+0xac>
 8015e02:	f1b8 0f00 	cmp.w	r8, #0
 8015e06:	d012      	beq.n	8015e2e <rmw_wait+0xea>
 8015e08:	f8d8 1000 	ldr.w	r1, [r8]
 8015e0c:	b179      	cbz	r1, 8015e2e <rmw_wait+0xea>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8015e14:	f04f 0c01 	mov.w	ip, #1
 8015e18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e1c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015e20:	3301      	adds	r3, #1
 8015e22:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015e24:	4299      	cmp	r1, r3
 8015e26:	6912      	ldr	r2, [r2, #16]
 8015e28:	f802 c00e 	strb.w	ip, [r2, lr]
 8015e2c:	d1f6      	bne.n	8015e1c <rmw_wait+0xd8>
 8015e2e:	b187      	cbz	r7, 8015e52 <rmw_wait+0x10e>
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	b171      	cbz	r1, 8015e52 <rmw_wait+0x10e>
 8015e34:	2300      	movs	r3, #0
 8015e36:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8015e3a:	f04f 0c01 	mov.w	ip, #1
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015e44:	3301      	adds	r3, #1
 8015e46:	6a12      	ldr	r2, [r2, #32]
 8015e48:	4299      	cmp	r1, r3
 8015e4a:	6912      	ldr	r2, [r2, #16]
 8015e4c:	f802 c00e 	strb.w	ip, [r2, lr]
 8015e50:	d1f6      	bne.n	8015e40 <rmw_wait+0xfc>
 8015e52:	b355      	cbz	r5, 8015eaa <rmw_wait+0x166>
 8015e54:	462b      	mov	r3, r5
 8015e56:	f04f 0a00 	mov.w	sl, #0
 8015e5a:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8015e5e:	68da      	ldr	r2, [r3, #12]
 8015e60:	689b      	ldr	r3, [r3, #8]
 8015e62:	5c50      	ldrb	r0, [r2, r1]
 8015e64:	4450      	add	r0, sl
 8015e66:	fa5f fa80 	uxtb.w	sl, r0
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d1f7      	bne.n	8015e5e <rmw_wait+0x11a>
 8015e6e:	f1ba 0f00 	cmp.w	sl, #0
 8015e72:	d01a      	beq.n	8015eaa <rmw_wait+0x166>
 8015e74:	1c63      	adds	r3, r4, #1
 8015e76:	d00d      	beq.n	8015e94 <rmw_wait+0x150>
 8015e78:	4620      	mov	r0, r4
 8015e7a:	f7ea faa5 	bl	80003c8 <__aeabi_i2f>
 8015e7e:	4604      	mov	r4, r0
 8015e80:	4650      	mov	r0, sl
 8015e82:	f7ea fa9d 	bl	80003c0 <__aeabi_ui2f>
 8015e86:	4601      	mov	r1, r0
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f7ea fba5 	bl	80005d8 <__aeabi_fdiv>
 8015e8e:	f7ea fc3f 	bl	8000710 <__aeabi_f2iz>
 8015e92:	4604      	mov	r4, r0
 8015e94:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8015e98:	68e8      	ldr	r0, [r5, #12]
 8015e9a:	f810 300a 	ldrb.w	r3, [r0, sl]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	f040 808c 	bne.w	8015fbc <rmw_wait+0x278>
 8015ea4:	68ad      	ldr	r5, [r5, #8]
 8015ea6:	2d00      	cmp	r5, #0
 8015ea8:	d1f6      	bne.n	8015e98 <rmw_wait+0x154>
 8015eaa:	f1b9 0f00 	cmp.w	r9, #0
 8015eae:	f000 80a3 	beq.w	8015ff8 <rmw_wait+0x2b4>
 8015eb2:	f8d9 5000 	ldr.w	r5, [r9]
 8015eb6:	2d00      	cmp	r5, #0
 8015eb8:	f000 808a 	beq.w	8015fd0 <rmw_wait+0x28c>
 8015ebc:	2400      	movs	r4, #0
 8015ebe:	4625      	mov	r5, r4
 8015ec0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015ec4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ec8:	f7f6 fabc 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d054      	beq.n	8015f7a <rmw_wait+0x236>
 8015ed0:	f8d9 3000 	ldr.w	r3, [r9]
 8015ed4:	3401      	adds	r4, #1
 8015ed6:	42a3      	cmp	r3, r4
 8015ed8:	f04f 0501 	mov.w	r5, #1
 8015edc:	d8f0      	bhi.n	8015ec0 <rmw_wait+0x17c>
 8015ede:	f1b8 0f00 	cmp.w	r8, #0
 8015ee2:	d012      	beq.n	8015f0a <rmw_wait+0x1c6>
 8015ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8015ee8:	b17b      	cbz	r3, 8015f0a <rmw_wait+0x1c6>
 8015eea:	2400      	movs	r4, #0
 8015eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ef0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ef4:	f7f6 faa6 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ef8:	2800      	cmp	r0, #0
 8015efa:	d046      	beq.n	8015f8a <rmw_wait+0x246>
 8015efc:	f8d8 3000 	ldr.w	r3, [r8]
 8015f00:	3401      	adds	r4, #1
 8015f02:	42a3      	cmp	r3, r4
 8015f04:	f04f 0501 	mov.w	r5, #1
 8015f08:	d8f0      	bhi.n	8015eec <rmw_wait+0x1a8>
 8015f0a:	b1df      	cbz	r7, 8015f44 <rmw_wait+0x200>
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	b1cb      	cbz	r3, 8015f44 <rmw_wait+0x200>
 8015f10:	2400      	movs	r4, #0
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015f18:	f7f6 fa94 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015f1c:	b158      	cbz	r0, 8015f36 <rmw_wait+0x1f2>
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	3401      	adds	r4, #1
 8015f22:	42a3      	cmp	r3, r4
 8015f24:	d961      	bls.n	8015fea <rmw_wait+0x2a6>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2501      	movs	r5, #1
 8015f2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015f2e:	f7f6 fa89 	bl	800c444 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d1f3      	bne.n	8015f1e <rmw_wait+0x1da>
 8015f36:	e9d7 3200 	ldrd	r3, r2, [r7]
 8015f3a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f3e:	3401      	adds	r4, #1
 8015f40:	42a3      	cmp	r3, r4
 8015f42:	d8e6      	bhi.n	8015f12 <rmw_wait+0x1ce>
 8015f44:	b1a6      	cbz	r6, 8015f70 <rmw_wait+0x22c>
 8015f46:	6834      	ldr	r4, [r6, #0]
 8015f48:	b194      	cbz	r4, 8015f70 <rmw_wait+0x22c>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	461f      	mov	r7, r3
 8015f4e:	e004      	b.n	8015f5a <rmw_wait+0x216>
 8015f50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015f54:	3301      	adds	r3, #1
 8015f56:	42a3      	cmp	r3, r4
 8015f58:	d00a      	beq.n	8015f70 <rmw_wait+0x22c>
 8015f5a:	6870      	ldr	r0, [r6, #4]
 8015f5c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015f60:	7c0a      	ldrb	r2, [r1, #16]
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	d0f4      	beq.n	8015f50 <rmw_wait+0x20c>
 8015f66:	3301      	adds	r3, #1
 8015f68:	42a3      	cmp	r3, r4
 8015f6a:	4615      	mov	r5, r2
 8015f6c:	740f      	strb	r7, [r1, #16]
 8015f6e:	d1f4      	bne.n	8015f5a <rmw_wait+0x216>
 8015f70:	2d00      	cmp	r5, #0
 8015f72:	d037      	beq.n	8015fe4 <rmw_wait+0x2a0>
 8015f74:	2000      	movs	r0, #0
 8015f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7a:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015f7e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f82:	3401      	adds	r4, #1
 8015f84:	42a3      	cmp	r3, r4
 8015f86:	d89b      	bhi.n	8015ec0 <rmw_wait+0x17c>
 8015f88:	e7a9      	b.n	8015ede <rmw_wait+0x19a>
 8015f8a:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015f8e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f92:	3401      	adds	r4, #1
 8015f94:	429c      	cmp	r4, r3
 8015f96:	d3a9      	bcc.n	8015eec <rmw_wait+0x1a8>
 8015f98:	e7b7      	b.n	8015f0a <rmw_wait+0x1c6>
 8015f9a:	4614      	mov	r4, r2
 8015f9c:	e70d      	b.n	8015dba <rmw_wait+0x76>
 8015f9e:	f1b8 0f00 	cmp.w	r8, #0
 8015fa2:	f47f aed9 	bne.w	8015d58 <rmw_wait+0x14>
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	f47f aed6 	bne.w	8015d58 <rmw_wait+0x14>
 8015fac:	2900      	cmp	r1, #0
 8015fae:	d0e1      	beq.n	8015f74 <rmw_wait+0x230>
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	f47f aed4 	bne.w	8015d5e <rmw_wait+0x1a>
 8015fb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015fba:	e6fe      	b.n	8015dba <rmw_wait+0x76>
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fc2:	f7fa feb9 	bl	8010d38 <uxr_run_session_until_data>
 8015fc6:	68ad      	ldr	r5, [r5, #8]
 8015fc8:	2d00      	cmp	r5, #0
 8015fca:	f47f af65 	bne.w	8015e98 <rmw_wait+0x154>
 8015fce:	e76c      	b.n	8015eaa <rmw_wait+0x166>
 8015fd0:	f1b8 0f00 	cmp.w	r8, #0
 8015fd4:	d11d      	bne.n	8016012 <rmw_wait+0x2ce>
 8015fd6:	b34f      	cbz	r7, 801602c <rmw_wait+0x2e8>
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	4645      	mov	r5, r8
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d197      	bne.n	8015f10 <rmw_wait+0x1cc>
 8015fe0:	2e00      	cmp	r6, #0
 8015fe2:	d1b0      	bne.n	8015f46 <rmw_wait+0x202>
 8015fe4:	2002      	movs	r0, #2
 8015fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fea:	2e00      	cmp	r6, #0
 8015fec:	d0c2      	beq.n	8015f74 <rmw_wait+0x230>
 8015fee:	6834      	ldr	r4, [r6, #0]
 8015ff0:	2501      	movs	r5, #1
 8015ff2:	2c00      	cmp	r4, #0
 8015ff4:	d1a9      	bne.n	8015f4a <rmw_wait+0x206>
 8015ff6:	e7bd      	b.n	8015f74 <rmw_wait+0x230>
 8015ff8:	f1b8 0f00 	cmp.w	r8, #0
 8015ffc:	d0eb      	beq.n	8015fd6 <rmw_wait+0x292>
 8015ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8016002:	464d      	mov	r5, r9
 8016004:	2b00      	cmp	r3, #0
 8016006:	f47f af70 	bne.w	8015eea <rmw_wait+0x1a6>
 801600a:	2f00      	cmp	r7, #0
 801600c:	f47f af7e 	bne.w	8015f0c <rmw_wait+0x1c8>
 8016010:	e008      	b.n	8016024 <rmw_wait+0x2e0>
 8016012:	f8d8 3000 	ldr.w	r3, [r8]
 8016016:	2b00      	cmp	r3, #0
 8016018:	f47f af67 	bne.w	8015eea <rmw_wait+0x1a6>
 801601c:	461d      	mov	r5, r3
 801601e:	2f00      	cmp	r7, #0
 8016020:	f47f af74 	bne.w	8015f0c <rmw_wait+0x1c8>
 8016024:	463d      	mov	r5, r7
 8016026:	2e00      	cmp	r6, #0
 8016028:	d18d      	bne.n	8015f46 <rmw_wait+0x202>
 801602a:	e7db      	b.n	8015fe4 <rmw_wait+0x2a0>
 801602c:	2e00      	cmp	r6, #0
 801602e:	d0d9      	beq.n	8015fe4 <rmw_wait+0x2a0>
 8016030:	6834      	ldr	r4, [r6, #0]
 8016032:	463d      	mov	r5, r7
 8016034:	2c00      	cmp	r4, #0
 8016036:	d188      	bne.n	8015f4a <rmw_wait+0x206>
 8016038:	e7d4      	b.n	8015fe4 <rmw_wait+0x2a0>
 801603a:	bf00      	nop
 801603c:	000f4240 	.word	0x000f4240
 8016040:	2000be48 	.word	0x2000be48

08016044 <rmw_create_wait_set>:
 8016044:	b508      	push	{r3, lr}
 8016046:	4803      	ldr	r0, [pc, #12]	; (8016054 <rmw_create_wait_set+0x10>)
 8016048:	f7ff fc96 	bl	8015978 <get_memory>
 801604c:	b108      	cbz	r0, 8016052 <rmw_create_wait_set+0xe>
 801604e:	68c0      	ldr	r0, [r0, #12]
 8016050:	3010      	adds	r0, #16
 8016052:	bd08      	pop	{r3, pc}
 8016054:	2000d620 	.word	0x2000d620

08016058 <rmw_destroy_wait_set>:
 8016058:	b508      	push	{r3, lr}
 801605a:	4b08      	ldr	r3, [pc, #32]	; (801607c <rmw_destroy_wait_set+0x24>)
 801605c:	6819      	ldr	r1, [r3, #0]
 801605e:	b911      	cbnz	r1, 8016066 <rmw_destroy_wait_set+0xe>
 8016060:	e00a      	b.n	8016078 <rmw_destroy_wait_set+0x20>
 8016062:	6889      	ldr	r1, [r1, #8]
 8016064:	b141      	cbz	r1, 8016078 <rmw_destroy_wait_set+0x20>
 8016066:	68cb      	ldr	r3, [r1, #12]
 8016068:	3310      	adds	r3, #16
 801606a:	4298      	cmp	r0, r3
 801606c:	d1f9      	bne.n	8016062 <rmw_destroy_wait_set+0xa>
 801606e:	4803      	ldr	r0, [pc, #12]	; (801607c <rmw_destroy_wait_set+0x24>)
 8016070:	f7ff fc92 	bl	8015998 <put_memory>
 8016074:	2000      	movs	r0, #0
 8016076:	bd08      	pop	{r3, pc}
 8016078:	2001      	movs	r0, #1
 801607a:	bd08      	pop	{r3, pc}
 801607c:	2000d620 	.word	0x2000d620

08016080 <_MultiArrayDimension__cdr_serialize>:
 8016080:	b1d0      	cbz	r0, 80160b8 <_MultiArrayDimension__cdr_serialize+0x38>
 8016082:	b570      	push	{r4, r5, r6, lr}
 8016084:	6806      	ldr	r6, [r0, #0]
 8016086:	460d      	mov	r5, r1
 8016088:	4604      	mov	r4, r0
 801608a:	b196      	cbz	r6, 80160b2 <_MultiArrayDimension__cdr_serialize+0x32>
 801608c:	4630      	mov	r0, r6
 801608e:	f7ea f8d9 	bl	8000244 <strlen>
 8016092:	1c42      	adds	r2, r0, #1
 8016094:	4631      	mov	r1, r6
 8016096:	6060      	str	r0, [r4, #4]
 8016098:	4628      	mov	r0, r5
 801609a:	f7f9 fbe7 	bl	800f86c <ucdr_serialize_sequence_char>
 801609e:	68e1      	ldr	r1, [r4, #12]
 80160a0:	4628      	mov	r0, r5
 80160a2:	f7f8 f949 	bl	800e338 <ucdr_serialize_uint32_t>
 80160a6:	4628      	mov	r0, r5
 80160a8:	6921      	ldr	r1, [r4, #16]
 80160aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160ae:	f7f8 b943 	b.w	800e338 <ucdr_serialize_uint32_t>
 80160b2:	4632      	mov	r2, r6
 80160b4:	4630      	mov	r0, r6
 80160b6:	e7ed      	b.n	8016094 <_MultiArrayDimension__cdr_serialize+0x14>
 80160b8:	4770      	bx	lr
 80160ba:	bf00      	nop

080160bc <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	4604      	mov	r4, r0
 80160c0:	b1b0      	cbz	r0, 80160f0 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80160c2:	460d      	mov	r5, r1
 80160c4:	2104      	movs	r1, #4
 80160c6:	4628      	mov	r0, r5
 80160c8:	f7f9 fb62 	bl	800f790 <ucdr_alignment>
 80160cc:	6866      	ldr	r6, [r4, #4]
 80160ce:	1d6c      	adds	r4, r5, #5
 80160d0:	4434      	add	r4, r6
 80160d2:	1826      	adds	r6, r4, r0
 80160d4:	2104      	movs	r1, #4
 80160d6:	4630      	mov	r0, r6
 80160d8:	f7f9 fb5a 	bl	800f790 <ucdr_alignment>
 80160dc:	1d04      	adds	r4, r0, #4
 80160de:	4434      	add	r4, r6
 80160e0:	4620      	mov	r0, r4
 80160e2:	2104      	movs	r1, #4
 80160e4:	f7f9 fb54 	bl	800f790 <ucdr_alignment>
 80160e8:	f1c5 0504 	rsb	r5, r5, #4
 80160ec:	4428      	add	r0, r5
 80160ee:	4420      	add	r0, r4
 80160f0:	bd70      	pop	{r4, r5, r6, pc}
 80160f2:	bf00      	nop

080160f4 <_MultiArrayDimension__cdr_deserialize>:
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	460c      	mov	r4, r1
 80160f8:	b082      	sub	sp, #8
 80160fa:	b1d1      	cbz	r1, 8016132 <_MultiArrayDimension__cdr_deserialize+0x3e>
 80160fc:	688e      	ldr	r6, [r1, #8]
 80160fe:	ab01      	add	r3, sp, #4
 8016100:	4632      	mov	r2, r6
 8016102:	6809      	ldr	r1, [r1, #0]
 8016104:	4605      	mov	r5, r0
 8016106:	f7f9 fbc3 	bl	800f890 <ucdr_deserialize_sequence_char>
 801610a:	9b01      	ldr	r3, [sp, #4]
 801610c:	b968      	cbnz	r0, 801612a <_MultiArrayDimension__cdr_deserialize+0x36>
 801610e:	429e      	cmp	r6, r3
 8016110:	d312      	bcc.n	8016138 <_MultiArrayDimension__cdr_deserialize+0x44>
 8016112:	f104 010c 	add.w	r1, r4, #12
 8016116:	4628      	mov	r0, r5
 8016118:	f7f8 fa3e 	bl	800e598 <ucdr_deserialize_uint32_t>
 801611c:	4628      	mov	r0, r5
 801611e:	f104 0110 	add.w	r1, r4, #16
 8016122:	f7f8 fa39 	bl	800e598 <ucdr_deserialize_uint32_t>
 8016126:	b002      	add	sp, #8
 8016128:	bd70      	pop	{r4, r5, r6, pc}
 801612a:	b103      	cbz	r3, 801612e <_MultiArrayDimension__cdr_deserialize+0x3a>
 801612c:	3b01      	subs	r3, #1
 801612e:	6063      	str	r3, [r4, #4]
 8016130:	e7ef      	b.n	8016112 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8016132:	4608      	mov	r0, r1
 8016134:	b002      	add	sp, #8
 8016136:	bd70      	pop	{r4, r5, r6, pc}
 8016138:	2101      	movs	r1, #1
 801613a:	75a8      	strb	r0, [r5, #22]
 801613c:	7569      	strb	r1, [r5, #21]
 801613e:	6060      	str	r0, [r4, #4]
 8016140:	4628      	mov	r0, r5
 8016142:	f7f9 fb3d 	bl	800f7c0 <ucdr_align_to>
 8016146:	4628      	mov	r0, r5
 8016148:	9901      	ldr	r1, [sp, #4]
 801614a:	f7f9 fb6f 	bl	800f82c <ucdr_advance_buffer>
 801614e:	e7e0      	b.n	8016112 <_MultiArrayDimension__cdr_deserialize+0x1e>

08016150 <_MultiArrayDimension__max_serialized_size>:
 8016150:	b510      	push	{r4, lr}
 8016152:	2104      	movs	r1, #4
 8016154:	2000      	movs	r0, #0
 8016156:	f7f9 fb1b 	bl	800f790 <ucdr_alignment>
 801615a:	1d04      	adds	r4, r0, #4
 801615c:	4620      	mov	r0, r4
 801615e:	2104      	movs	r1, #4
 8016160:	f7f9 fb16 	bl	800f790 <ucdr_alignment>
 8016164:	3004      	adds	r0, #4
 8016166:	4420      	add	r0, r4
 8016168:	bd10      	pop	{r4, pc}
 801616a:	bf00      	nop

0801616c <_MultiArrayDimension__get_serialized_size>:
 801616c:	b510      	push	{r4, lr}
 801616e:	4604      	mov	r4, r0
 8016170:	b190      	cbz	r0, 8016198 <_MultiArrayDimension__get_serialized_size+0x2c>
 8016172:	2104      	movs	r1, #4
 8016174:	2000      	movs	r0, #0
 8016176:	f7f9 fb0b 	bl	800f790 <ucdr_alignment>
 801617a:	6864      	ldr	r4, [r4, #4]
 801617c:	2104      	movs	r1, #4
 801617e:	3405      	adds	r4, #5
 8016180:	4404      	add	r4, r0
 8016182:	4620      	mov	r0, r4
 8016184:	f7f9 fb04 	bl	800f790 <ucdr_alignment>
 8016188:	3004      	adds	r0, #4
 801618a:	4404      	add	r4, r0
 801618c:	4620      	mov	r0, r4
 801618e:	2104      	movs	r1, #4
 8016190:	f7f9 fafe 	bl	800f790 <ucdr_alignment>
 8016194:	3004      	adds	r0, #4
 8016196:	4420      	add	r0, r4
 8016198:	bd10      	pop	{r4, pc}
 801619a:	bf00      	nop

0801619c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801619c:	4800      	ldr	r0, [pc, #0]	; (80161a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801619e:	4770      	bx	lr
 80161a0:	2000022c 	.word	0x2000022c

080161a4 <ucdr_serialize_string>:
 80161a4:	b538      	push	{r3, r4, r5, lr}
 80161a6:	4605      	mov	r5, r0
 80161a8:	4608      	mov	r0, r1
 80161aa:	460c      	mov	r4, r1
 80161ac:	f7ea f84a 	bl	8000244 <strlen>
 80161b0:	4602      	mov	r2, r0
 80161b2:	4621      	mov	r1, r4
 80161b4:	4628      	mov	r0, r5
 80161b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161ba:	3201      	adds	r2, #1
 80161bc:	f7f9 bb56 	b.w	800f86c <ucdr_serialize_sequence_char>

080161c0 <ucdr_deserialize_string>:
 80161c0:	b500      	push	{lr}
 80161c2:	b083      	sub	sp, #12
 80161c4:	ab01      	add	r3, sp, #4
 80161c6:	f7f9 fb63 	bl	800f890 <ucdr_deserialize_sequence_char>
 80161ca:	b003      	add	sp, #12
 80161cc:	f85d fb04 	ldr.w	pc, [sp], #4

080161d0 <uxr_init_input_best_effort_stream>:
 80161d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161d4:	8003      	strh	r3, [r0, #0]
 80161d6:	4770      	bx	lr

080161d8 <uxr_reset_input_best_effort_stream>:
 80161d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161dc:	8003      	strh	r3, [r0, #0]
 80161de:	4770      	bx	lr

080161e0 <uxr_receive_best_effort_message>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4604      	mov	r4, r0
 80161e4:	8800      	ldrh	r0, [r0, #0]
 80161e6:	460d      	mov	r5, r1
 80161e8:	f000 fd20 	bl	8016c2c <uxr_seq_num_cmp>
 80161ec:	4603      	mov	r3, r0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80161f4:	bfb8      	it	lt
 80161f6:	8025      	strhlt	r5, [r4, #0]
 80161f8:	bd38      	pop	{r3, r4, r5, pc}
 80161fa:	bf00      	nop

080161fc <on_full_input_buffer>:
 80161fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fe:	890f      	ldrh	r7, [r1, #8]
 8016200:	460d      	mov	r5, r1
 8016202:	c912      	ldmia	r1, {r1, r4}
 8016204:	fbb4 f4f7 	udiv	r4, r4, r7
 8016208:	6802      	ldr	r2, [r0, #0]
 801620a:	4606      	mov	r6, r0
 801620c:	1a53      	subs	r3, r2, r1
 801620e:	fbb3 f3f4 	udiv	r3, r3, r4
 8016212:	3301      	adds	r3, #1
 8016214:	b29b      	uxth	r3, r3
 8016216:	fbb3 f2f7 	udiv	r2, r3, r7
 801621a:	fb07 3312 	mls	r3, r7, r2, r3
 801621e:	b29b      	uxth	r3, r3
 8016220:	fb04 f403 	mul.w	r4, r4, r3
 8016224:	7d28      	ldrb	r0, [r5, #20]
 8016226:	1d23      	adds	r3, r4, #4
 8016228:	440b      	add	r3, r1
 801622a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801622e:	b110      	cbz	r0, 8016236 <on_full_input_buffer+0x3a>
 8016230:	2000      	movs	r0, #0
 8016232:	f843 0c04 	str.w	r0, [r3, #-4]
 8016236:	2a03      	cmp	r2, #3
 8016238:	d801      	bhi.n	801623e <on_full_input_buffer+0x42>
 801623a:	2001      	movs	r0, #1
 801623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801623e:	3408      	adds	r4, #8
 8016240:	4630      	mov	r0, r6
 8016242:	6933      	ldr	r3, [r6, #16]
 8016244:	4421      	add	r1, r4
 8016246:	3a04      	subs	r2, #4
 8016248:	f7f9 fa96 	bl	800f778 <ucdr_init_buffer_origin>
 801624c:	4630      	mov	r0, r6
 801624e:	462a      	mov	r2, r5
 8016250:	4902      	ldr	r1, [pc, #8]	; (801625c <on_full_input_buffer+0x60>)
 8016252:	f7f9 fa6f 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8016256:	2000      	movs	r0, #0
 8016258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801625a:	bf00      	nop
 801625c:	080161fd 	.word	0x080161fd

08016260 <uxr_init_input_reliable_stream>:
 8016260:	b430      	push	{r4, r5}
 8016262:	2500      	movs	r5, #0
 8016264:	9c02      	ldr	r4, [sp, #8]
 8016266:	6001      	str	r1, [r0, #0]
 8016268:	8103      	strh	r3, [r0, #8]
 801626a:	6042      	str	r2, [r0, #4]
 801626c:	6104      	str	r4, [r0, #16]
 801626e:	7505      	strb	r5, [r0, #20]
 8016270:	b1ab      	cbz	r3, 801629e <uxr_init_input_reliable_stream+0x3e>
 8016272:	600d      	str	r5, [r1, #0]
 8016274:	8901      	ldrh	r1, [r0, #8]
 8016276:	2901      	cmp	r1, #1
 8016278:	d911      	bls.n	801629e <uxr_init_input_reliable_stream+0x3e>
 801627a:	2201      	movs	r2, #1
 801627c:	fbb2 f3f1 	udiv	r3, r2, r1
 8016280:	6844      	ldr	r4, [r0, #4]
 8016282:	fb01 2313 	mls	r3, r1, r3, r2
 8016286:	fbb4 f1f1 	udiv	r1, r4, r1
 801628a:	b29b      	uxth	r3, r3
 801628c:	fb03 f301 	mul.w	r3, r3, r1
 8016290:	6801      	ldr	r1, [r0, #0]
 8016292:	3201      	adds	r2, #1
 8016294:	50cd      	str	r5, [r1, r3]
 8016296:	8901      	ldrh	r1, [r0, #8]
 8016298:	b292      	uxth	r2, r2
 801629a:	4291      	cmp	r1, r2
 801629c:	d8ee      	bhi.n	801627c <uxr_init_input_reliable_stream+0x1c>
 801629e:	bc30      	pop	{r4, r5}
 80162a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162a4:	60c3      	str	r3, [r0, #12]
 80162a6:	4770      	bx	lr

080162a8 <uxr_reset_input_reliable_stream>:
 80162a8:	8902      	ldrh	r2, [r0, #8]
 80162aa:	b1ca      	cbz	r2, 80162e0 <uxr_reset_input_reliable_stream+0x38>
 80162ac:	b470      	push	{r4, r5, r6}
 80162ae:	2500      	movs	r5, #0
 80162b0:	4629      	mov	r1, r5
 80162b2:	462e      	mov	r6, r5
 80162b4:	fbb1 f3f2 	udiv	r3, r1, r2
 80162b8:	6844      	ldr	r4, [r0, #4]
 80162ba:	fb02 1313 	mls	r3, r2, r3, r1
 80162be:	fbb4 f2f2 	udiv	r2, r4, r2
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	fb03 f302 	mul.w	r3, r3, r2
 80162c8:	6802      	ldr	r2, [r0, #0]
 80162ca:	3501      	adds	r5, #1
 80162cc:	50d6      	str	r6, [r2, r3]
 80162ce:	8902      	ldrh	r2, [r0, #8]
 80162d0:	b2a9      	uxth	r1, r5
 80162d2:	428a      	cmp	r2, r1
 80162d4:	d8ee      	bhi.n	80162b4 <uxr_reset_input_reliable_stream+0xc>
 80162d6:	bc70      	pop	{r4, r5, r6}
 80162d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162dc:	60c3      	str	r3, [r0, #12]
 80162de:	4770      	bx	lr
 80162e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162e4:	60c3      	str	r3, [r0, #12]
 80162e6:	4770      	bx	lr

080162e8 <uxr_receive_reliable_message>:
 80162e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162ec:	4604      	mov	r4, r0
 80162ee:	460d      	mov	r5, r1
 80162f0:	8901      	ldrh	r1, [r0, #8]
 80162f2:	8980      	ldrh	r0, [r0, #12]
 80162f4:	4690      	mov	r8, r2
 80162f6:	461f      	mov	r7, r3
 80162f8:	f000 fc90 	bl	8016c1c <uxr_seq_num_add>
 80162fc:	4629      	mov	r1, r5
 80162fe:	4606      	mov	r6, r0
 8016300:	89a0      	ldrh	r0, [r4, #12]
 8016302:	f000 fc93 	bl	8016c2c <uxr_seq_num_cmp>
 8016306:	2800      	cmp	r0, #0
 8016308:	db0a      	blt.n	8016320 <uxr_receive_reliable_message+0x38>
 801630a:	2600      	movs	r6, #0
 801630c:	4629      	mov	r1, r5
 801630e:	89e0      	ldrh	r0, [r4, #14]
 8016310:	f000 fc8c 	bl	8016c2c <uxr_seq_num_cmp>
 8016314:	2800      	cmp	r0, #0
 8016316:	bfb8      	it	lt
 8016318:	81e5      	strhlt	r5, [r4, #14]
 801631a:	4630      	mov	r0, r6
 801631c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016320:	4630      	mov	r0, r6
 8016322:	4629      	mov	r1, r5
 8016324:	f000 fc82 	bl	8016c2c <uxr_seq_num_cmp>
 8016328:	2800      	cmp	r0, #0
 801632a:	dbee      	blt.n	801630a <uxr_receive_reliable_message+0x22>
 801632c:	4640      	mov	r0, r8
 801632e:	6923      	ldr	r3, [r4, #16]
 8016330:	4798      	blx	r3
 8016332:	4681      	mov	r9, r0
 8016334:	2101      	movs	r1, #1
 8016336:	89a0      	ldrh	r0, [r4, #12]
 8016338:	f000 fc70 	bl	8016c1c <uxr_seq_num_add>
 801633c:	f1b9 0f00 	cmp.w	r9, #0
 8016340:	d101      	bne.n	8016346 <uxr_receive_reliable_message+0x5e>
 8016342:	4285      	cmp	r5, r0
 8016344:	d049      	beq.n	80163da <uxr_receive_reliable_message+0xf2>
 8016346:	8921      	ldrh	r1, [r4, #8]
 8016348:	6862      	ldr	r2, [r4, #4]
 801634a:	fbb5 f3f1 	udiv	r3, r5, r1
 801634e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016352:	fb01 5313 	mls	r3, r1, r3, r5
 8016356:	b29b      	uxth	r3, r3
 8016358:	fb03 f302 	mul.w	r3, r3, r2
 801635c:	6820      	ldr	r0, [r4, #0]
 801635e:	3304      	adds	r3, #4
 8016360:	4418      	add	r0, r3
 8016362:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1cf      	bne.n	801630a <uxr_receive_reliable_message+0x22>
 801636a:	4641      	mov	r1, r8
 801636c:	463a      	mov	r2, r7
 801636e:	f000 fe71 	bl	8017054 <memcpy>
 8016372:	8921      	ldrh	r1, [r4, #8]
 8016374:	6862      	ldr	r2, [r4, #4]
 8016376:	fbb5 f3f1 	udiv	r3, r5, r1
 801637a:	fbb2 f2f1 	udiv	r2, r2, r1
 801637e:	2001      	movs	r0, #1
 8016380:	fb01 5313 	mls	r3, r1, r3, r5
 8016384:	b29b      	uxth	r3, r3
 8016386:	fb03 f302 	mul.w	r3, r3, r2
 801638a:	6822      	ldr	r2, [r4, #0]
 801638c:	50d7      	str	r7, [r2, r3]
 801638e:	9b08      	ldr	r3, [sp, #32]
 8016390:	7018      	strb	r0, [r3, #0]
 8016392:	f1b9 0f00 	cmp.w	r9, #0
 8016396:	d0b8      	beq.n	801630a <uxr_receive_reliable_message+0x22>
 8016398:	89a6      	ldrh	r6, [r4, #12]
 801639a:	e001      	b.n	80163a0 <uxr_receive_reliable_message+0xb8>
 801639c:	2801      	cmp	r0, #1
 801639e:	d1b4      	bne.n	801630a <uxr_receive_reliable_message+0x22>
 80163a0:	4630      	mov	r0, r6
 80163a2:	2101      	movs	r1, #1
 80163a4:	f000 fc3a 	bl	8016c1c <uxr_seq_num_add>
 80163a8:	8921      	ldrh	r1, [r4, #8]
 80163aa:	6862      	ldr	r2, [r4, #4]
 80163ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80163b0:	fbb2 f2f1 	udiv	r2, r2, r1
 80163b4:	fb01 0313 	mls	r3, r1, r3, r0
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	fb03 f302 	mul.w	r3, r3, r2
 80163be:	4606      	mov	r6, r0
 80163c0:	6820      	ldr	r0, [r4, #0]
 80163c2:	3304      	adds	r3, #4
 80163c4:	4418      	add	r0, r3
 80163c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d09d      	beq.n	801630a <uxr_receive_reliable_message+0x22>
 80163ce:	6923      	ldr	r3, [r4, #16]
 80163d0:	4798      	blx	r3
 80163d2:	2802      	cmp	r0, #2
 80163d4:	d1e2      	bne.n	801639c <uxr_receive_reliable_message+0xb4>
 80163d6:	2601      	movs	r6, #1
 80163d8:	e798      	b.n	801630c <uxr_receive_reliable_message+0x24>
 80163da:	9b08      	ldr	r3, [sp, #32]
 80163dc:	81a5      	strh	r5, [r4, #12]
 80163de:	2601      	movs	r6, #1
 80163e0:	f883 9000 	strb.w	r9, [r3]
 80163e4:	e792      	b.n	801630c <uxr_receive_reliable_message+0x24>
 80163e6:	bf00      	nop

080163e8 <uxr_next_input_reliable_buffer_available>:
 80163e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163ec:	4604      	mov	r4, r0
 80163ee:	460e      	mov	r6, r1
 80163f0:	8980      	ldrh	r0, [r0, #12]
 80163f2:	2101      	movs	r1, #1
 80163f4:	4617      	mov	r7, r2
 80163f6:	f000 fc11 	bl	8016c1c <uxr_seq_num_add>
 80163fa:	8921      	ldrh	r1, [r4, #8]
 80163fc:	6862      	ldr	r2, [r4, #4]
 80163fe:	fbb0 f3f1 	udiv	r3, r0, r1
 8016402:	fbb2 f2f1 	udiv	r2, r2, r1
 8016406:	fb01 0313 	mls	r3, r1, r3, r0
 801640a:	b29b      	uxth	r3, r3
 801640c:	fb03 f302 	mul.w	r3, r3, r2
 8016410:	6822      	ldr	r2, [r4, #0]
 8016412:	3304      	adds	r3, #4
 8016414:	eb02 0803 	add.w	r8, r2, r3
 8016418:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801641c:	f1b9 0f00 	cmp.w	r9, #0
 8016420:	d025      	beq.n	801646e <uxr_next_input_reliable_buffer_available+0x86>
 8016422:	4605      	mov	r5, r0
 8016424:	6923      	ldr	r3, [r4, #16]
 8016426:	4640      	mov	r0, r8
 8016428:	4798      	blx	r3
 801642a:	4682      	mov	sl, r0
 801642c:	b310      	cbz	r0, 8016474 <uxr_next_input_reliable_buffer_available+0x8c>
 801642e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016432:	e005      	b.n	8016440 <uxr_next_input_reliable_buffer_available+0x58>
 8016434:	6923      	ldr	r3, [r4, #16]
 8016436:	4798      	blx	r3
 8016438:	2802      	cmp	r0, #2
 801643a:	d032      	beq.n	80164a2 <uxr_next_input_reliable_buffer_available+0xba>
 801643c:	2801      	cmp	r0, #1
 801643e:	d116      	bne.n	801646e <uxr_next_input_reliable_buffer_available+0x86>
 8016440:	4650      	mov	r0, sl
 8016442:	2101      	movs	r1, #1
 8016444:	f000 fbea 	bl	8016c1c <uxr_seq_num_add>
 8016448:	4682      	mov	sl, r0
 801644a:	8922      	ldrh	r2, [r4, #8]
 801644c:	6860      	ldr	r0, [r4, #4]
 801644e:	fbba f3f2 	udiv	r3, sl, r2
 8016452:	fbb0 f0f2 	udiv	r0, r0, r2
 8016456:	fb02 a313 	mls	r3, r2, r3, sl
 801645a:	b29b      	uxth	r3, r3
 801645c:	fb03 f300 	mul.w	r3, r3, r0
 8016460:	6820      	ldr	r0, [r4, #0]
 8016462:	3304      	adds	r3, #4
 8016464:	4418      	add	r0, r3
 8016466:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1e2      	bne.n	8016434 <uxr_next_input_reliable_buffer_available+0x4c>
 801646e:	2000      	movs	r0, #0
 8016470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016474:	464a      	mov	r2, r9
 8016476:	4641      	mov	r1, r8
 8016478:	4630      	mov	r0, r6
 801647a:	f7f9 f985 	bl	800f788 <ucdr_init_buffer>
 801647e:	8921      	ldrh	r1, [r4, #8]
 8016480:	6862      	ldr	r2, [r4, #4]
 8016482:	fbb5 f3f1 	udiv	r3, r5, r1
 8016486:	fbb2 f2f1 	udiv	r2, r2, r1
 801648a:	fb01 5313 	mls	r3, r1, r3, r5
 801648e:	b29b      	uxth	r3, r3
 8016490:	fb03 f302 	mul.w	r3, r3, r2
 8016494:	6822      	ldr	r2, [r4, #0]
 8016496:	2001      	movs	r0, #1
 8016498:	f842 a003 	str.w	sl, [r2, r3]
 801649c:	81a5      	strh	r5, [r4, #12]
 801649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a2:	8922      	ldrh	r2, [r4, #8]
 80164a4:	6863      	ldr	r3, [r4, #4]
 80164a6:	fbb5 f0f2 	udiv	r0, r5, r2
 80164aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80164ae:	f04f 0c00 	mov.w	ip, #0
 80164b2:	fb02 5510 	mls	r5, r2, r0, r5
 80164b6:	b2ad      	uxth	r5, r5
 80164b8:	fb05 f503 	mul.w	r5, r5, r3
 80164bc:	6823      	ldr	r3, [r4, #0]
 80164be:	4630      	mov	r0, r6
 80164c0:	eba9 0207 	sub.w	r2, r9, r7
 80164c4:	eb08 0107 	add.w	r1, r8, r7
 80164c8:	f843 c005 	str.w	ip, [r3, r5]
 80164cc:	f7f9 f95c 	bl	800f788 <ucdr_init_buffer>
 80164d0:	4630      	mov	r0, r6
 80164d2:	4622      	mov	r2, r4
 80164d4:	4903      	ldr	r1, [pc, #12]	; (80164e4 <uxr_next_input_reliable_buffer_available+0xfc>)
 80164d6:	f7f9 f92d 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 80164da:	2001      	movs	r0, #1
 80164dc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80164e0:	e7c6      	b.n	8016470 <uxr_next_input_reliable_buffer_available+0x88>
 80164e2:	bf00      	nop
 80164e4:	080161fd 	.word	0x080161fd

080164e8 <uxr_process_heartbeat>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	4611      	mov	r1, r2
 80164ec:	4604      	mov	r4, r0
 80164ee:	89c0      	ldrh	r0, [r0, #14]
 80164f0:	4615      	mov	r5, r2
 80164f2:	f000 fb9b 	bl	8016c2c <uxr_seq_num_cmp>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	bfb8      	it	lt
 80164fa:	81e5      	strhlt	r5, [r4, #14]
 80164fc:	bd38      	pop	{r3, r4, r5, pc}
 80164fe:	bf00      	nop

08016500 <uxr_compute_acknack>:
 8016500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016504:	8903      	ldrh	r3, [r0, #8]
 8016506:	4604      	mov	r4, r0
 8016508:	460d      	mov	r5, r1
 801650a:	8986      	ldrh	r6, [r0, #12]
 801650c:	b1d3      	cbz	r3, 8016544 <uxr_compute_acknack+0x44>
 801650e:	4630      	mov	r0, r6
 8016510:	2701      	movs	r7, #1
 8016512:	e003      	b.n	801651c <uxr_compute_acknack+0x1c>
 8016514:	4567      	cmp	r7, ip
 8016516:	d215      	bcs.n	8016544 <uxr_compute_acknack+0x44>
 8016518:	89a0      	ldrh	r0, [r4, #12]
 801651a:	3701      	adds	r7, #1
 801651c:	b2b9      	uxth	r1, r7
 801651e:	f000 fb7d 	bl	8016c1c <uxr_seq_num_add>
 8016522:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016526:	6863      	ldr	r3, [r4, #4]
 8016528:	fbb0 f2fc 	udiv	r2, r0, ip
 801652c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016530:	fb0c 0212 	mls	r2, ip, r2, r0
 8016534:	6821      	ldr	r1, [r4, #0]
 8016536:	b292      	uxth	r2, r2
 8016538:	fb02 1303 	mla	r3, r2, r3, r1
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d1e8      	bne.n	8016514 <uxr_compute_acknack+0x14>
 8016542:	4606      	mov	r6, r0
 8016544:	4630      	mov	r0, r6
 8016546:	2101      	movs	r1, #1
 8016548:	802e      	strh	r6, [r5, #0]
 801654a:	89e6      	ldrh	r6, [r4, #14]
 801654c:	f000 fb6a 	bl	8016c24 <uxr_seq_num_sub>
 8016550:	4601      	mov	r1, r0
 8016552:	4630      	mov	r0, r6
 8016554:	f000 fb66 	bl	8016c24 <uxr_seq_num_sub>
 8016558:	4606      	mov	r6, r0
 801655a:	b310      	cbz	r0, 80165a2 <uxr_compute_acknack+0xa2>
 801655c:	f04f 0900 	mov.w	r9, #0
 8016560:	f04f 0801 	mov.w	r8, #1
 8016564:	464f      	mov	r7, r9
 8016566:	fa1f f189 	uxth.w	r1, r9
 801656a:	8828      	ldrh	r0, [r5, #0]
 801656c:	f000 fb56 	bl	8016c1c <uxr_seq_num_add>
 8016570:	8923      	ldrh	r3, [r4, #8]
 8016572:	6862      	ldr	r2, [r4, #4]
 8016574:	fbb0 fcf3 	udiv	ip, r0, r3
 8016578:	fbb2 f1f3 	udiv	r1, r2, r3
 801657c:	fb0c 0313 	mls	r3, ip, r3, r0
 8016580:	6822      	ldr	r2, [r4, #0]
 8016582:	b29b      	uxth	r3, r3
 8016584:	fb03 2201 	mla	r2, r3, r1, r2
 8016588:	6812      	ldr	r2, [r2, #0]
 801658a:	fa08 f309 	lsl.w	r3, r8, r9
 801658e:	f109 0901 	add.w	r9, r9, #1
 8016592:	b90a      	cbnz	r2, 8016598 <uxr_compute_acknack+0x98>
 8016594:	431f      	orrs	r7, r3
 8016596:	b2bf      	uxth	r7, r7
 8016598:	454e      	cmp	r6, r9
 801659a:	d1e4      	bne.n	8016566 <uxr_compute_acknack+0x66>
 801659c:	4638      	mov	r0, r7
 801659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a2:	4607      	mov	r7, r0
 80165a4:	4638      	mov	r0, r7
 80165a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165aa:	bf00      	nop

080165ac <uxr_init_output_best_effort_stream>:
 80165ac:	b410      	push	{r4}
 80165ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80165b2:	e9c0 1300 	strd	r1, r3, [r0]
 80165b6:	81c4      	strh	r4, [r0, #14]
 80165b8:	7303      	strb	r3, [r0, #12]
 80165ba:	bc10      	pop	{r4}
 80165bc:	6082      	str	r2, [r0, #8]
 80165be:	4770      	bx	lr

080165c0 <uxr_reset_output_best_effort_stream>:
 80165c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165c4:	7b03      	ldrb	r3, [r0, #12]
 80165c6:	81c2      	strh	r2, [r0, #14]
 80165c8:	6043      	str	r3, [r0, #4]
 80165ca:	4770      	bx	lr

080165cc <uxr_prepare_best_effort_buffer_to_write>:
 80165cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ce:	4604      	mov	r4, r0
 80165d0:	b083      	sub	sp, #12
 80165d2:	6840      	ldr	r0, [r0, #4]
 80165d4:	460d      	mov	r5, r1
 80165d6:	4616      	mov	r6, r2
 80165d8:	f7fb fb9a 	bl	8011d10 <uxr_submessage_padding>
 80165dc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80165e0:	4410      	add	r0, r2
 80165e2:	1942      	adds	r2, r0, r5
 80165e4:	4293      	cmp	r3, r2
 80165e6:	bf2c      	ite	cs
 80165e8:	2701      	movcs	r7, #1
 80165ea:	2700      	movcc	r7, #0
 80165ec:	d202      	bcs.n	80165f4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80165ee:	4638      	mov	r0, r7
 80165f0:	b003      	add	sp, #12
 80165f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165f4:	9000      	str	r0, [sp, #0]
 80165f6:	6821      	ldr	r1, [r4, #0]
 80165f8:	4630      	mov	r0, r6
 80165fa:	2300      	movs	r3, #0
 80165fc:	f7f9 f8b2 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8016600:	4638      	mov	r0, r7
 8016602:	6861      	ldr	r1, [r4, #4]
 8016604:	4429      	add	r1, r5
 8016606:	6061      	str	r1, [r4, #4]
 8016608:	b003      	add	sp, #12
 801660a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801660c <uxr_prepare_best_effort_buffer_to_send>:
 801660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016610:	6845      	ldr	r5, [r0, #4]
 8016612:	4604      	mov	r4, r0
 8016614:	7b00      	ldrb	r0, [r0, #12]
 8016616:	4285      	cmp	r5, r0
 8016618:	bf8c      	ite	hi
 801661a:	2701      	movhi	r7, #1
 801661c:	2700      	movls	r7, #0
 801661e:	d802      	bhi.n	8016626 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8016620:	4638      	mov	r0, r7
 8016622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016626:	4688      	mov	r8, r1
 8016628:	89e0      	ldrh	r0, [r4, #14]
 801662a:	2101      	movs	r1, #1
 801662c:	4615      	mov	r5, r2
 801662e:	461e      	mov	r6, r3
 8016630:	f000 faf4 	bl	8016c1c <uxr_seq_num_add>
 8016634:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016638:	81e0      	strh	r0, [r4, #14]
 801663a:	8030      	strh	r0, [r6, #0]
 801663c:	f8c8 2000 	str.w	r2, [r8]
 8016640:	602b      	str	r3, [r5, #0]
 8016642:	7b23      	ldrb	r3, [r4, #12]
 8016644:	4638      	mov	r0, r7
 8016646:	6063      	str	r3, [r4, #4]
 8016648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801664c <on_full_output_buffer>:
 801664c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8016650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016652:	460d      	mov	r5, r1
 8016654:	c90a      	ldmia	r1, {r1, r3}
 8016656:	fbb3 f7fc 	udiv	r7, r3, ip
 801665a:	6804      	ldr	r4, [r0, #0]
 801665c:	4606      	mov	r6, r0
 801665e:	1a63      	subs	r3, r4, r1
 8016660:	fbb3 f3f7 	udiv	r3, r3, r7
 8016664:	3301      	adds	r3, #1
 8016666:	b29b      	uxth	r3, r3
 8016668:	fbb3 f4fc 	udiv	r4, r3, ip
 801666c:	fb0c 3314 	mls	r3, ip, r4, r3
 8016670:	b29b      	uxth	r3, r3
 8016672:	fb07 f303 	mul.w	r3, r7, r3
 8016676:	7b2a      	ldrb	r2, [r5, #12]
 8016678:	58cc      	ldr	r4, [r1, r3]
 801667a:	4413      	add	r3, r2
 801667c:	3308      	adds	r3, #8
 801667e:	1aa2      	subs	r2, r4, r2
 8016680:	4419      	add	r1, r3
 8016682:	3a04      	subs	r2, #4
 8016684:	6903      	ldr	r3, [r0, #16]
 8016686:	f7f9 f877 	bl	800f778 <ucdr_init_buffer_origin>
 801668a:	4630      	mov	r0, r6
 801668c:	462a      	mov	r2, r5
 801668e:	4902      	ldr	r1, [pc, #8]	; (8016698 <on_full_output_buffer+0x4c>)
 8016690:	f7f9 f850 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 8016694:	2000      	movs	r0, #0
 8016696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016698:	0801664d 	.word	0x0801664d

0801669c <uxr_init_output_reliable_stream>:
 801669c:	b430      	push	{r4, r5}
 801669e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80166a2:	6001      	str	r1, [r0, #0]
 80166a4:	8103      	strh	r3, [r0, #8]
 80166a6:	6042      	str	r2, [r0, #4]
 80166a8:	7304      	strb	r4, [r0, #12]
 80166aa:	b1b3      	cbz	r3, 80166da <uxr_init_output_reliable_stream+0x3e>
 80166ac:	600c      	str	r4, [r1, #0]
 80166ae:	8901      	ldrh	r1, [r0, #8]
 80166b0:	2901      	cmp	r1, #1
 80166b2:	d912      	bls.n	80166da <uxr_init_output_reliable_stream+0x3e>
 80166b4:	2201      	movs	r2, #1
 80166b6:	fbb2 f3f1 	udiv	r3, r2, r1
 80166ba:	6844      	ldr	r4, [r0, #4]
 80166bc:	fb01 2313 	mls	r3, r1, r3, r2
 80166c0:	fbb4 f1f1 	udiv	r1, r4, r1
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	fb03 f301 	mul.w	r3, r3, r1
 80166ca:	7b04      	ldrb	r4, [r0, #12]
 80166cc:	6801      	ldr	r1, [r0, #0]
 80166ce:	3201      	adds	r2, #1
 80166d0:	50cc      	str	r4, [r1, r3]
 80166d2:	8901      	ldrh	r1, [r0, #8]
 80166d4:	b292      	uxth	r2, r2
 80166d6:	4291      	cmp	r1, r2
 80166d8:	d8ed      	bhi.n	80166b6 <uxr_init_output_reliable_stream+0x1a>
 80166da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80166de:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80166e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80166e6:	2200      	movs	r2, #0
 80166e8:	4b04      	ldr	r3, [pc, #16]	; (80166fc <uxr_init_output_reliable_stream+0x60>)
 80166ea:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80166ee:	bc30      	pop	{r4, r5}
 80166f0:	8241      	strh	r1, [r0, #18]
 80166f2:	8402      	strh	r2, [r0, #32]
 80166f4:	f8c0 300e 	str.w	r3, [r0, #14]
 80166f8:	4770      	bx	lr
 80166fa:	bf00      	nop
 80166fc:	ffff0000 	.word	0xffff0000

08016700 <uxr_reset_output_reliable_stream>:
 8016700:	8902      	ldrh	r2, [r0, #8]
 8016702:	b430      	push	{r4, r5}
 8016704:	b19a      	cbz	r2, 801672e <uxr_reset_output_reliable_stream+0x2e>
 8016706:	2500      	movs	r5, #0
 8016708:	4629      	mov	r1, r5
 801670a:	fbb1 f3f2 	udiv	r3, r1, r2
 801670e:	6844      	ldr	r4, [r0, #4]
 8016710:	fb02 1313 	mls	r3, r2, r3, r1
 8016714:	fbb4 f2f2 	udiv	r2, r4, r2
 8016718:	b29b      	uxth	r3, r3
 801671a:	fb03 f302 	mul.w	r3, r3, r2
 801671e:	7b01      	ldrb	r1, [r0, #12]
 8016720:	6802      	ldr	r2, [r0, #0]
 8016722:	3501      	adds	r5, #1
 8016724:	50d1      	str	r1, [r2, r3]
 8016726:	8902      	ldrh	r2, [r0, #8]
 8016728:	b2a9      	uxth	r1, r5
 801672a:	428a      	cmp	r2, r1
 801672c:	d8ed      	bhi.n	801670a <uxr_reset_output_reliable_stream+0xa>
 801672e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016732:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8016736:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801673a:	2200      	movs	r2, #0
 801673c:	4b04      	ldr	r3, [pc, #16]	; (8016750 <uxr_reset_output_reliable_stream+0x50>)
 801673e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8016742:	bc30      	pop	{r4, r5}
 8016744:	8241      	strh	r1, [r0, #18]
 8016746:	8402      	strh	r2, [r0, #32]
 8016748:	f8c0 300e 	str.w	r3, [r0, #14]
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	ffff0000 	.word	0xffff0000

08016754 <uxr_prepare_reliable_buffer_to_write>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	4604      	mov	r4, r0
 801675a:	89c5      	ldrh	r5, [r0, #14]
 801675c:	8900      	ldrh	r0, [r0, #8]
 801675e:	6866      	ldr	r6, [r4, #4]
 8016760:	fbb5 f3f0 	udiv	r3, r5, r0
 8016764:	fbb6 f6f0 	udiv	r6, r6, r0
 8016768:	fb00 5313 	mls	r3, r0, r3, r5
 801676c:	b29b      	uxth	r3, r3
 801676e:	fb06 f303 	mul.w	r3, r6, r3
 8016772:	4688      	mov	r8, r1
 8016774:	6821      	ldr	r1, [r4, #0]
 8016776:	3304      	adds	r3, #4
 8016778:	b091      	sub	sp, #68	; 0x44
 801677a:	18cb      	adds	r3, r1, r3
 801677c:	9604      	str	r6, [sp, #16]
 801677e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016782:	2104      	movs	r1, #4
 8016784:	4630      	mov	r0, r6
 8016786:	9305      	str	r3, [sp, #20]
 8016788:	9206      	str	r2, [sp, #24]
 801678a:	f7f9 f801 	bl	800f790 <ucdr_alignment>
 801678e:	1833      	adds	r3, r6, r0
 8016790:	9e04      	ldr	r6, [sp, #16]
 8016792:	eb03 0708 	add.w	r7, r3, r8
 8016796:	3e04      	subs	r6, #4
 8016798:	42b7      	cmp	r7, r6
 801679a:	9303      	str	r3, [sp, #12]
 801679c:	f240 80dd 	bls.w	801695a <uxr_prepare_reliable_buffer_to_write+0x206>
 80167a0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80167a4:	eb0e 0308 	add.w	r3, lr, r8
 80167a8:	42b3      	cmp	r3, r6
 80167aa:	f240 80c3 	bls.w	8016934 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80167ae:	9b03      	ldr	r3, [sp, #12]
 80167b0:	3304      	adds	r3, #4
 80167b2:	42b3      	cmp	r3, r6
 80167b4:	f080 810d 	bcs.w	80169d2 <uxr_prepare_reliable_buffer_to_write+0x27e>
 80167b8:	8920      	ldrh	r0, [r4, #8]
 80167ba:	2800      	cmp	r0, #0
 80167bc:	f000 8123 	beq.w	8016a06 <uxr_prepare_reliable_buffer_to_write+0x2b2>
 80167c0:	f04f 0c00 	mov.w	ip, #0
 80167c4:	6862      	ldr	r2, [r4, #4]
 80167c6:	4661      	mov	r1, ip
 80167c8:	fbb2 f9f0 	udiv	r9, r2, r0
 80167cc:	4662      	mov	r2, ip
 80167ce:	6827      	ldr	r7, [r4, #0]
 80167d0:	fbb2 f3f0 	udiv	r3, r2, r0
 80167d4:	fb00 2313 	mls	r3, r0, r3, r2
 80167d8:	b29b      	uxth	r3, r3
 80167da:	fb09 7303 	mla	r3, r9, r3, r7
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f10c 0c01 	add.w	ip, ip, #1
 80167e4:	459e      	cmp	lr, r3
 80167e6:	bf08      	it	eq
 80167e8:	3101      	addeq	r1, #1
 80167ea:	fa1f f28c 	uxth.w	r2, ip
 80167ee:	bf08      	it	eq
 80167f0:	b289      	uxtheq	r1, r1
 80167f2:	4282      	cmp	r2, r0
 80167f4:	d3ec      	bcc.n	80167d0 <uxr_prepare_reliable_buffer_to_write+0x7c>
 80167f6:	9b03      	ldr	r3, [sp, #12]
 80167f8:	1f37      	subs	r7, r6, #4
 80167fa:	b2bf      	uxth	r7, r7
 80167fc:	eba7 0903 	sub.w	r9, r7, r3
 8016800:	fa1f f989 	uxth.w	r9, r9
 8016804:	eba7 070e 	sub.w	r7, r7, lr
 8016808:	b2bf      	uxth	r7, r7
 801680a:	eba8 0809 	sub.w	r8, r8, r9
 801680e:	fbb8 faf7 	udiv	sl, r8, r7
 8016812:	fb07 831a 	mls	r3, r7, sl, r8
 8016816:	9707      	str	r7, [sp, #28]
 8016818:	b113      	cbz	r3, 8016820 <uxr_prepare_reliable_buffer_to_write+0xcc>
 801681a:	9307      	str	r3, [sp, #28]
 801681c:	f10a 0a01 	add.w	sl, sl, #1
 8016820:	fa1f fa8a 	uxth.w	sl, sl
 8016824:	458a      	cmp	sl, r1
 8016826:	f200 8094 	bhi.w	8016952 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801682a:	f10d 0b20 	add.w	fp, sp, #32
 801682e:	f1ba 0f00 	cmp.w	sl, #0
 8016832:	d039      	beq.n	80168a8 <uxr_prepare_reliable_buffer_to_write+0x154>
 8016834:	f04f 0800 	mov.w	r8, #0
 8016838:	f10d 0b20 	add.w	fp, sp, #32
 801683c:	e000      	b.n	8016840 <uxr_prepare_reliable_buffer_to_write+0xec>
 801683e:	46b9      	mov	r9, r7
 8016840:	fbb5 f1f0 	udiv	r1, r5, r0
 8016844:	6863      	ldr	r3, [r4, #4]
 8016846:	fb00 5111 	mls	r1, r0, r1, r5
 801684a:	fbb3 f3f0 	udiv	r3, r3, r0
 801684e:	b289      	uxth	r1, r1
 8016850:	fb01 f103 	mul.w	r1, r1, r3
 8016854:	6823      	ldr	r3, [r4, #0]
 8016856:	3104      	adds	r1, #4
 8016858:	4419      	add	r1, r3
 801685a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801685e:	4632      	mov	r2, r6
 8016860:	4658      	mov	r0, fp
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	2300      	movs	r3, #0
 8016866:	f7f8 ff7d 	bl	800f764 <ucdr_init_buffer_origin_offset>
 801686a:	464a      	mov	r2, r9
 801686c:	2300      	movs	r3, #0
 801686e:	210d      	movs	r1, #13
 8016870:	4658      	mov	r0, fp
 8016872:	f7fb fa0d 	bl	8011c90 <uxr_buffer_submessage_header>
 8016876:	8921      	ldrh	r1, [r4, #8]
 8016878:	6862      	ldr	r2, [r4, #4]
 801687a:	fbb5 f3f1 	udiv	r3, r5, r1
 801687e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016882:	fb01 5313 	mls	r3, r1, r3, r5
 8016886:	b29b      	uxth	r3, r3
 8016888:	fb03 f302 	mul.w	r3, r3, r2
 801688c:	6822      	ldr	r2, [r4, #0]
 801688e:	4628      	mov	r0, r5
 8016890:	50d6      	str	r6, [r2, r3]
 8016892:	2101      	movs	r1, #1
 8016894:	f000 f9c2 	bl	8016c1c <uxr_seq_num_add>
 8016898:	f108 0801 	add.w	r8, r8, #1
 801689c:	fa1f f388 	uxth.w	r3, r8
 80168a0:	459a      	cmp	sl, r3
 80168a2:	4605      	mov	r5, r0
 80168a4:	8920      	ldrh	r0, [r4, #8]
 80168a6:	d8ca      	bhi.n	801683e <uxr_prepare_reliable_buffer_to_write+0xea>
 80168a8:	fbb5 f1f0 	udiv	r1, r5, r0
 80168ac:	6863      	ldr	r3, [r4, #4]
 80168ae:	fb00 5111 	mls	r1, r0, r1, r5
 80168b2:	fbb3 f0f0 	udiv	r0, r3, r0
 80168b6:	b289      	uxth	r1, r1
 80168b8:	fb01 f100 	mul.w	r1, r1, r0
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	3104      	adds	r1, #4
 80168c0:	4419      	add	r1, r3
 80168c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168c6:	4632      	mov	r2, r6
 80168c8:	4658      	mov	r0, fp
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	2300      	movs	r3, #0
 80168ce:	f7f8 ff49 	bl	800f764 <ucdr_init_buffer_origin_offset>
 80168d2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80168d6:	4658      	mov	r0, fp
 80168d8:	fa1f f288 	uxth.w	r2, r8
 80168dc:	2302      	movs	r3, #2
 80168de:	210d      	movs	r1, #13
 80168e0:	f7fb f9d6 	bl	8011c90 <uxr_buffer_submessage_header>
 80168e4:	8922      	ldrh	r2, [r4, #8]
 80168e6:	6863      	ldr	r3, [r4, #4]
 80168e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80168ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80168f0:	fb02 5010 	mls	r0, r2, r0, r5
 80168f4:	b280      	uxth	r0, r0
 80168f6:	fb00 f003 	mul.w	r0, r0, r3
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	9f03      	ldr	r7, [sp, #12]
 80168fe:	9307      	str	r3, [sp, #28]
 8016900:	9b05      	ldr	r3, [sp, #20]
 8016902:	7b26      	ldrb	r6, [r4, #12]
 8016904:	1d39      	adds	r1, r7, #4
 8016906:	440b      	add	r3, r1
 8016908:	4619      	mov	r1, r3
 801690a:	3604      	adds	r6, #4
 801690c:	9b07      	ldr	r3, [sp, #28]
 801690e:	9a04      	ldr	r2, [sp, #16]
 8016910:	4446      	add	r6, r8
 8016912:	501e      	str	r6, [r3, r0]
 8016914:	9e06      	ldr	r6, [sp, #24]
 8016916:	3a08      	subs	r2, #8
 8016918:	4630      	mov	r0, r6
 801691a:	1bd2      	subs	r2, r2, r7
 801691c:	f7f8 ff34 	bl	800f788 <ucdr_init_buffer>
 8016920:	4630      	mov	r0, r6
 8016922:	4622      	mov	r2, r4
 8016924:	4939      	ldr	r1, [pc, #228]	; (8016a0c <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 8016926:	f7f8 ff05 	bl	800f734 <ucdr_set_on_full_buffer_callback>
 801692a:	2001      	movs	r0, #1
 801692c:	81e5      	strh	r5, [r4, #14]
 801692e:	b011      	add	sp, #68	; 0x44
 8016930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016934:	2101      	movs	r1, #1
 8016936:	89e0      	ldrh	r0, [r4, #14]
 8016938:	f000 f970 	bl	8016c1c <uxr_seq_num_add>
 801693c:	8921      	ldrh	r1, [r4, #8]
 801693e:	4605      	mov	r5, r0
 8016940:	8a60      	ldrh	r0, [r4, #18]
 8016942:	f000 f96b 	bl	8016c1c <uxr_seq_num_add>
 8016946:	4601      	mov	r1, r0
 8016948:	4628      	mov	r0, r5
 801694a:	f000 f96f 	bl	8016c2c <uxr_seq_num_cmp>
 801694e:	2800      	cmp	r0, #0
 8016950:	dd24      	ble.n	801699c <uxr_prepare_reliable_buffer_to_write+0x248>
 8016952:	2000      	movs	r0, #0
 8016954:	b011      	add	sp, #68	; 0x44
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695a:	8921      	ldrh	r1, [r4, #8]
 801695c:	8a60      	ldrh	r0, [r4, #18]
 801695e:	f000 f95d 	bl	8016c1c <uxr_seq_num_add>
 8016962:	4601      	mov	r1, r0
 8016964:	4628      	mov	r0, r5
 8016966:	f000 f961 	bl	8016c2c <uxr_seq_num_cmp>
 801696a:	2800      	cmp	r0, #0
 801696c:	dcf1      	bgt.n	8016952 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801696e:	8920      	ldrh	r0, [r4, #8]
 8016970:	6862      	ldr	r2, [r4, #4]
 8016972:	fbb5 f3f0 	udiv	r3, r5, r0
 8016976:	fbb2 f2f0 	udiv	r2, r2, r0
 801697a:	fb00 5313 	mls	r3, r0, r3, r5
 801697e:	b29b      	uxth	r3, r3
 8016980:	fb03 f302 	mul.w	r3, r3, r2
 8016984:	6822      	ldr	r2, [r4, #0]
 8016986:	9806      	ldr	r0, [sp, #24]
 8016988:	50d7      	str	r7, [r2, r3]
 801698a:	9b03      	ldr	r3, [sp, #12]
 801698c:	463a      	mov	r2, r7
 801698e:	9300      	str	r3, [sp, #0]
 8016990:	9905      	ldr	r1, [sp, #20]
 8016992:	2300      	movs	r3, #0
 8016994:	f7f8 fee6 	bl	800f764 <ucdr_init_buffer_origin_offset>
 8016998:	2001      	movs	r0, #1
 801699a:	e7db      	b.n	8016954 <uxr_prepare_reliable_buffer_to_write+0x200>
 801699c:	8921      	ldrh	r1, [r4, #8]
 801699e:	6862      	ldr	r2, [r4, #4]
 80169a0:	fbb5 f3f1 	udiv	r3, r5, r1
 80169a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80169a8:	fb01 5313 	mls	r3, r1, r3, r5
 80169ac:	b29b      	uxth	r3, r3
 80169ae:	fb03 f302 	mul.w	r3, r3, r2
 80169b2:	6821      	ldr	r1, [r4, #0]
 80169b4:	7b22      	ldrb	r2, [r4, #12]
 80169b6:	3304      	adds	r3, #4
 80169b8:	4419      	add	r1, r3
 80169ba:	4442      	add	r2, r8
 80169bc:	f841 2c04 	str.w	r2, [r1, #-4]
 80169c0:	7b23      	ldrb	r3, [r4, #12]
 80169c2:	9806      	ldr	r0, [sp, #24]
 80169c4:	9300      	str	r3, [sp, #0]
 80169c6:	2300      	movs	r3, #0
 80169c8:	f7f8 fecc 	bl	800f764 <ucdr_init_buffer_origin_offset>
 80169cc:	2001      	movs	r0, #1
 80169ce:	81e5      	strh	r5, [r4, #14]
 80169d0:	e7c0      	b.n	8016954 <uxr_prepare_reliable_buffer_to_write+0x200>
 80169d2:	4628      	mov	r0, r5
 80169d4:	2101      	movs	r1, #1
 80169d6:	f000 f921 	bl	8016c1c <uxr_seq_num_add>
 80169da:	4605      	mov	r5, r0
 80169dc:	8920      	ldrh	r0, [r4, #8]
 80169de:	6862      	ldr	r2, [r4, #4]
 80169e0:	fbb5 f3f0 	udiv	r3, r5, r0
 80169e4:	fbb2 f2f0 	udiv	r2, r2, r0
 80169e8:	fb00 5313 	mls	r3, r0, r3, r5
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	fb03 f302 	mul.w	r3, r3, r2
 80169f2:	6822      	ldr	r2, [r4, #0]
 80169f4:	3304      	adds	r3, #4
 80169f6:	18d3      	adds	r3, r2, r3
 80169f8:	9305      	str	r3, [sp, #20]
 80169fa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80169fe:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016a02:	9303      	str	r3, [sp, #12]
 8016a04:	e6d9      	b.n	80167ba <uxr_prepare_reliable_buffer_to_write+0x66>
 8016a06:	4601      	mov	r1, r0
 8016a08:	e6f5      	b.n	80167f6 <uxr_prepare_reliable_buffer_to_write+0xa2>
 8016a0a:	bf00      	nop
 8016a0c:	0801664d 	.word	0x0801664d

08016a10 <uxr_prepare_next_reliable_buffer_to_send>:
 8016a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a14:	4606      	mov	r6, r0
 8016a16:	4689      	mov	r9, r1
 8016a18:	8a00      	ldrh	r0, [r0, #16]
 8016a1a:	2101      	movs	r1, #1
 8016a1c:	4690      	mov	r8, r2
 8016a1e:	461f      	mov	r7, r3
 8016a20:	f000 f8fc 	bl	8016c1c <uxr_seq_num_add>
 8016a24:	8038      	strh	r0, [r7, #0]
 8016a26:	8932      	ldrh	r2, [r6, #8]
 8016a28:	6873      	ldr	r3, [r6, #4]
 8016a2a:	fbb0 f5f2 	udiv	r5, r0, r2
 8016a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a32:	fb02 0415 	mls	r4, r2, r5, r0
 8016a36:	b2a4      	uxth	r4, r4
 8016a38:	fb04 f403 	mul.w	r4, r4, r3
 8016a3c:	6833      	ldr	r3, [r6, #0]
 8016a3e:	3404      	adds	r4, #4
 8016a40:	4423      	add	r3, r4
 8016a42:	f8c9 3000 	str.w	r3, [r9]
 8016a46:	6833      	ldr	r3, [r6, #0]
 8016a48:	89f1      	ldrh	r1, [r6, #14]
 8016a4a:	441c      	add	r4, r3
 8016a4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016a50:	f8c8 3000 	str.w	r3, [r8]
 8016a54:	f000 f8ea 	bl	8016c2c <uxr_seq_num_cmp>
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	dd02      	ble.n	8016a62 <uxr_prepare_next_reliable_buffer_to_send+0x52>
 8016a5c:	2000      	movs	r0, #0
 8016a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a62:	f8d8 2000 	ldr.w	r2, [r8]
 8016a66:	7b33      	ldrb	r3, [r6, #12]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d9f7      	bls.n	8016a5c <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8016a6c:	8a71      	ldrh	r1, [r6, #18]
 8016a6e:	8a30      	ldrh	r0, [r6, #16]
 8016a70:	f000 f8d8 	bl	8016c24 <uxr_seq_num_sub>
 8016a74:	8933      	ldrh	r3, [r6, #8]
 8016a76:	4283      	cmp	r3, r0
 8016a78:	d0f0      	beq.n	8016a5c <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8016a7a:	8838      	ldrh	r0, [r7, #0]
 8016a7c:	89f3      	ldrh	r3, [r6, #14]
 8016a7e:	8230      	strh	r0, [r6, #16]
 8016a80:	4298      	cmp	r0, r3
 8016a82:	d002      	beq.n	8016a8a <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 8016a84:	2001      	movs	r0, #1
 8016a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	f000 f8c6 	bl	8016c1c <uxr_seq_num_add>
 8016a90:	4603      	mov	r3, r0
 8016a92:	2001      	movs	r0, #1
 8016a94:	81f3      	strh	r3, [r6, #14]
 8016a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a9a:	bf00      	nop

08016a9c <uxr_update_output_stream_heartbeat_timestamp>:
 8016a9c:	b5d0      	push	{r4, r6, r7, lr}
 8016a9e:	8a01      	ldrh	r1, [r0, #16]
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	8a40      	ldrh	r0, [r0, #18]
 8016aa4:	4616      	mov	r6, r2
 8016aa6:	461f      	mov	r7, r3
 8016aa8:	f000 f8c0 	bl	8016c2c <uxr_seq_num_cmp>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	db07      	blt.n	8016ac0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ab4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016ab8:	2000      	movs	r0, #0
 8016aba:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016abe:	bdd0      	pop	{r4, r6, r7, pc}
 8016ac0:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016ac4:	b948      	cbnz	r0, 8016ada <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	f884 3020 	strb.w	r3, [r4, #32]
 8016acc:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016ad0:	f147 0200 	adc.w	r2, r7, #0
 8016ad4:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8016ad8:	bdd0      	pop	{r4, r6, r7, pc}
 8016ada:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016ade:	4296      	cmp	r6, r2
 8016ae0:	eb77 0303 	sbcs.w	r3, r7, r3
 8016ae4:	bfa5      	ittet	ge
 8016ae6:	3001      	addge	r0, #1
 8016ae8:	f884 0020 	strbge.w	r0, [r4, #32]
 8016aec:	2000      	movlt	r0, #0
 8016aee:	2001      	movge	r0, #1
 8016af0:	e7ec      	b.n	8016acc <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016af2:	bf00      	nop

08016af4 <uxr_begin_output_nack_buffer_it>:
 8016af4:	8a40      	ldrh	r0, [r0, #18]
 8016af6:	4770      	bx	lr

08016af8 <uxr_next_reliable_nack_buffer_to_send>:
 8016af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016afc:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016b00:	f1b9 0f00 	cmp.w	r9, #0
 8016b04:	d011      	beq.n	8016b2a <uxr_next_reliable_nack_buffer_to_send+0x32>
 8016b06:	460f      	mov	r7, r1
 8016b08:	4690      	mov	r8, r2
 8016b0a:	461e      	mov	r6, r3
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	8818      	ldrh	r0, [r3, #0]
 8016b10:	2101      	movs	r1, #1
 8016b12:	f000 f883 	bl	8016c1c <uxr_seq_num_add>
 8016b16:	8030      	strh	r0, [r6, #0]
 8016b18:	8a29      	ldrh	r1, [r5, #16]
 8016b1a:	f000 f887 	bl	8016c2c <uxr_seq_num_cmp>
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	dd06      	ble.n	8016b30 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016b22:	2300      	movs	r3, #0
 8016b24:	4699      	mov	r9, r3
 8016b26:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8016b2a:	4648      	mov	r0, r9
 8016b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b30:	892a      	ldrh	r2, [r5, #8]
 8016b32:	8830      	ldrh	r0, [r6, #0]
 8016b34:	686b      	ldr	r3, [r5, #4]
 8016b36:	fbb0 f4f2 	udiv	r4, r0, r2
 8016b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b3e:	fb02 0414 	mls	r4, r2, r4, r0
 8016b42:	b2a4      	uxth	r4, r4
 8016b44:	fb04 f403 	mul.w	r4, r4, r3
 8016b48:	682b      	ldr	r3, [r5, #0]
 8016b4a:	3404      	adds	r4, #4
 8016b4c:	4423      	add	r3, r4
 8016b4e:	603b      	str	r3, [r7, #0]
 8016b50:	682b      	ldr	r3, [r5, #0]
 8016b52:	441c      	add	r4, r3
 8016b54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016b58:	f8c8 3000 	str.w	r3, [r8]
 8016b5c:	7b2a      	ldrb	r2, [r5, #12]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d0d6      	beq.n	8016b10 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016b62:	4648      	mov	r0, r9
 8016b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b68 <uxr_process_acknack>:
 8016b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	460e      	mov	r6, r1
 8016b6e:	4610      	mov	r0, r2
 8016b70:	2101      	movs	r1, #1
 8016b72:	f000 f857 	bl	8016c24 <uxr_seq_num_sub>
 8016b76:	8a61      	ldrh	r1, [r4, #18]
 8016b78:	f000 f854 	bl	8016c24 <uxr_seq_num_sub>
 8016b7c:	b1b8      	cbz	r0, 8016bae <uxr_process_acknack+0x46>
 8016b7e:	4605      	mov	r5, r0
 8016b80:	2700      	movs	r7, #0
 8016b82:	2101      	movs	r1, #1
 8016b84:	8a60      	ldrh	r0, [r4, #18]
 8016b86:	f000 f849 	bl	8016c1c <uxr_seq_num_add>
 8016b8a:	8921      	ldrh	r1, [r4, #8]
 8016b8c:	6862      	ldr	r2, [r4, #4]
 8016b8e:	fbb0 f3f1 	udiv	r3, r0, r1
 8016b92:	fbb2 f2f1 	udiv	r2, r2, r1
 8016b96:	fb01 0313 	mls	r3, r1, r3, r0
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	fb03 f302 	mul.w	r3, r3, r2
 8016ba0:	7b21      	ldrb	r1, [r4, #12]
 8016ba2:	6822      	ldr	r2, [r4, #0]
 8016ba4:	3701      	adds	r7, #1
 8016ba6:	42bd      	cmp	r5, r7
 8016ba8:	8260      	strh	r0, [r4, #18]
 8016baa:	50d1      	str	r1, [r2, r3]
 8016bac:	d1e9      	bne.n	8016b82 <uxr_process_acknack+0x1a>
 8016bae:	3e00      	subs	r6, #0
 8016bb0:	f04f 0300 	mov.w	r3, #0
 8016bb4:	bf18      	it	ne
 8016bb6:	2601      	movne	r6, #1
 8016bb8:	f884 3020 	strb.w	r3, [r4, #32]
 8016bbc:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc2:	bf00      	nop

08016bc4 <uxr_is_output_up_to_date>:
 8016bc4:	8a01      	ldrh	r1, [r0, #16]
 8016bc6:	b508      	push	{r3, lr}
 8016bc8:	8a40      	ldrh	r0, [r0, #18]
 8016bca:	f000 f82f 	bl	8016c2c <uxr_seq_num_cmp>
 8016bce:	fab0 f080 	clz	r0, r0
 8016bd2:	0940      	lsrs	r0, r0, #5
 8016bd4:	bd08      	pop	{r3, pc}
 8016bd6:	bf00      	nop

08016bd8 <get_available_free_slots>:
 8016bd8:	8901      	ldrh	r1, [r0, #8]
 8016bda:	b1e1      	cbz	r1, 8016c16 <get_available_free_slots+0x3e>
 8016bdc:	b4f0      	push	{r4, r5, r6, r7}
 8016bde:	2400      	movs	r4, #0
 8016be0:	4603      	mov	r3, r0
 8016be2:	6845      	ldr	r5, [r0, #4]
 8016be4:	4622      	mov	r2, r4
 8016be6:	4620      	mov	r0, r4
 8016be8:	fbb5 f5f1 	udiv	r5, r5, r1
 8016bec:	681f      	ldr	r7, [r3, #0]
 8016bee:	7b1e      	ldrb	r6, [r3, #12]
 8016bf0:	fbb2 f3f1 	udiv	r3, r2, r1
 8016bf4:	fb01 2313 	mls	r3, r1, r3, r2
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	fb05 7303 	mla	r3, r5, r3, r7
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	3401      	adds	r4, #1
 8016c02:	429e      	cmp	r6, r3
 8016c04:	bf08      	it	eq
 8016c06:	3001      	addeq	r0, #1
 8016c08:	b2a2      	uxth	r2, r4
 8016c0a:	bf08      	it	eq
 8016c0c:	b280      	uxtheq	r0, r0
 8016c0e:	428a      	cmp	r2, r1
 8016c10:	d3ee      	bcc.n	8016bf0 <get_available_free_slots+0x18>
 8016c12:	bcf0      	pop	{r4, r5, r6, r7}
 8016c14:	4770      	bx	lr
 8016c16:	4608      	mov	r0, r1
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop

08016c1c <uxr_seq_num_add>:
 8016c1c:	4408      	add	r0, r1
 8016c1e:	b280      	uxth	r0, r0
 8016c20:	4770      	bx	lr
 8016c22:	bf00      	nop

08016c24 <uxr_seq_num_sub>:
 8016c24:	1a40      	subs	r0, r0, r1
 8016c26:	b280      	uxth	r0, r0
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop

08016c2c <uxr_seq_num_cmp>:
 8016c2c:	4288      	cmp	r0, r1
 8016c2e:	d011      	beq.n	8016c54 <uxr_seq_num_cmp+0x28>
 8016c30:	d309      	bcc.n	8016c46 <uxr_seq_num_cmp+0x1a>
 8016c32:	4288      	cmp	r0, r1
 8016c34:	d910      	bls.n	8016c58 <uxr_seq_num_cmp+0x2c>
 8016c36:	1a40      	subs	r0, r0, r1
 8016c38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016c3c:	bfd4      	ite	le
 8016c3e:	2001      	movle	r0, #1
 8016c40:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016c44:	4770      	bx	lr
 8016c46:	1a0b      	subs	r3, r1, r0
 8016c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016c4c:	daf1      	bge.n	8016c32 <uxr_seq_num_cmp+0x6>
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c52:	4770      	bx	lr
 8016c54:	2000      	movs	r0, #0
 8016c56:	4770      	bx	lr
 8016c58:	2001      	movs	r0, #1
 8016c5a:	4770      	bx	lr

08016c5c <rcl_get_default_domain_id>:
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	b530      	push	{r4, r5, lr}
 8016c60:	b083      	sub	sp, #12
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	b1d0      	cbz	r0, 8016c9c <rcl_get_default_domain_id+0x40>
 8016c66:	4604      	mov	r4, r0
 8016c68:	4669      	mov	r1, sp
 8016c6a:	4815      	ldr	r0, [pc, #84]	; (8016cc0 <rcl_get_default_domain_id+0x64>)
 8016c6c:	f7fe fbac 	bl	80153c8 <rcutils_get_env>
 8016c70:	4602      	mov	r2, r0
 8016c72:	b110      	cbz	r0, 8016c7a <rcl_get_default_domain_id+0x1e>
 8016c74:	2001      	movs	r0, #1
 8016c76:	b003      	add	sp, #12
 8016c78:	bd30      	pop	{r4, r5, pc}
 8016c7a:	9b00      	ldr	r3, [sp, #0]
 8016c7c:	b18b      	cbz	r3, 8016ca2 <rcl_get_default_domain_id+0x46>
 8016c7e:	7818      	ldrb	r0, [r3, #0]
 8016c80:	2800      	cmp	r0, #0
 8016c82:	d0f8      	beq.n	8016c76 <rcl_get_default_domain_id+0x1a>
 8016c84:	4618      	mov	r0, r3
 8016c86:	a901      	add	r1, sp, #4
 8016c88:	9201      	str	r2, [sp, #4]
 8016c8a:	f000 fc81 	bl	8017590 <strtoul>
 8016c8e:	4605      	mov	r5, r0
 8016c90:	b150      	cbz	r0, 8016ca8 <rcl_get_default_domain_id+0x4c>
 8016c92:	1c43      	adds	r3, r0, #1
 8016c94:	d00d      	beq.n	8016cb2 <rcl_get_default_domain_id+0x56>
 8016c96:	2000      	movs	r0, #0
 8016c98:	6025      	str	r5, [r4, #0]
 8016c9a:	e7ec      	b.n	8016c76 <rcl_get_default_domain_id+0x1a>
 8016c9c:	200b      	movs	r0, #11
 8016c9e:	b003      	add	sp, #12
 8016ca0:	bd30      	pop	{r4, r5, pc}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	b003      	add	sp, #12
 8016ca6:	bd30      	pop	{r4, r5, pc}
 8016ca8:	9b01      	ldr	r3, [sp, #4]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d0f2      	beq.n	8016c96 <rcl_get_default_domain_id+0x3a>
 8016cb0:	e7e0      	b.n	8016c74 <rcl_get_default_domain_id+0x18>
 8016cb2:	f000 f94f 	bl	8016f54 <__errno>
 8016cb6:	6803      	ldr	r3, [r0, #0]
 8016cb8:	2b22      	cmp	r3, #34	; 0x22
 8016cba:	d1ec      	bne.n	8016c96 <rcl_get_default_domain_id+0x3a>
 8016cbc:	e7da      	b.n	8016c74 <rcl_get_default_domain_id+0x18>
 8016cbe:	bf00      	nop
 8016cc0:	0801a0c4 	.word	0x0801a0c4

08016cc4 <rcl_get_zero_initialized_guard_condition>:
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	4a03      	ldr	r2, [pc, #12]	; (8016cd4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ccc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	4770      	bx	lr
 8016cd4:	0801a0d4 	.word	0x0801a0d4

08016cd8 <rcl_guard_condition_init>:
 8016cd8:	b082      	sub	sp, #8
 8016cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cdc:	b087      	sub	sp, #28
 8016cde:	ad0c      	add	r5, sp, #48	; 0x30
 8016ce0:	e9c5 2300 	strd	r2, r3, [r5]
 8016ce4:	ac01      	add	r4, sp, #4
 8016ce6:	4607      	mov	r7, r0
 8016ce8:	460e      	mov	r6, r1
 8016cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cee:	682b      	ldr	r3, [r5, #0]
 8016cf0:	a801      	add	r0, sp, #4
 8016cf2:	6023      	str	r3, [r4, #0]
 8016cf4:	f7f3 ff74 	bl	800abe0 <rcutils_allocator_is_valid>
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d032      	beq.n	8016d62 <rcl_guard_condition_init+0x8a>
 8016cfc:	463d      	mov	r5, r7
 8016cfe:	2f00      	cmp	r7, #0
 8016d00:	d02f      	beq.n	8016d62 <rcl_guard_condition_init+0x8a>
 8016d02:	687f      	ldr	r7, [r7, #4]
 8016d04:	bb3f      	cbnz	r7, 8016d56 <rcl_guard_condition_init+0x7e>
 8016d06:	2e00      	cmp	r6, #0
 8016d08:	d02b      	beq.n	8016d62 <rcl_guard_condition_init+0x8a>
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	f7fc f8f0 	bl	8012ef0 <rcl_context_is_valid>
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d02c      	beq.n	8016d6e <rcl_guard_condition_init+0x96>
 8016d14:	201c      	movs	r0, #28
 8016d16:	9b01      	ldr	r3, [sp, #4]
 8016d18:	9905      	ldr	r1, [sp, #20]
 8016d1a:	4798      	blx	r3
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	6068      	str	r0, [r5, #4]
 8016d20:	2800      	cmp	r0, #0
 8016d22:	d02d      	beq.n	8016d80 <rcl_guard_condition_init+0xa8>
 8016d24:	6830      	ldr	r0, [r6, #0]
 8016d26:	3028      	adds	r0, #40	; 0x28
 8016d28:	f000 f8d4 	bl	8016ed4 <rmw_create_guard_condition>
 8016d2c:	686e      	ldr	r6, [r5, #4]
 8016d2e:	6020      	str	r0, [r4, #0]
 8016d30:	6834      	ldr	r4, [r6, #0]
 8016d32:	b1f4      	cbz	r4, 8016d72 <rcl_guard_condition_init+0x9a>
 8016d34:	f04f 0c01 	mov.w	ip, #1
 8016d38:	ac01      	add	r4, sp, #4
 8016d3a:	f106 0508 	add.w	r5, r6, #8
 8016d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d40:	f886 c004 	strb.w	ip, [r6, #4]
 8016d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016d46:	4638      	mov	r0, r7
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	602b      	str	r3, [r5, #0]
 8016d4c:	b007      	add	sp, #28
 8016d4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d52:	b002      	add	sp, #8
 8016d54:	4770      	bx	lr
 8016d56:	2064      	movs	r0, #100	; 0x64
 8016d58:	b007      	add	sp, #28
 8016d5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d5e:	b002      	add	sp, #8
 8016d60:	4770      	bx	lr
 8016d62:	200b      	movs	r0, #11
 8016d64:	b007      	add	sp, #28
 8016d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d6a:	b002      	add	sp, #8
 8016d6c:	4770      	bx	lr
 8016d6e:	2065      	movs	r0, #101	; 0x65
 8016d70:	e7f2      	b.n	8016d58 <rcl_guard_condition_init+0x80>
 8016d72:	4630      	mov	r0, r6
 8016d74:	9b02      	ldr	r3, [sp, #8]
 8016d76:	9905      	ldr	r1, [sp, #20]
 8016d78:	4798      	blx	r3
 8016d7a:	2001      	movs	r0, #1
 8016d7c:	606c      	str	r4, [r5, #4]
 8016d7e:	e7eb      	b.n	8016d58 <rcl_guard_condition_init+0x80>
 8016d80:	200a      	movs	r0, #10
 8016d82:	e7e9      	b.n	8016d58 <rcl_guard_condition_init+0x80>

08016d84 <rcl_guard_condition_init_from_rmw>:
 8016d84:	4684      	mov	ip, r0
 8016d86:	b082      	sub	sp, #8
 8016d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d8c:	b086      	sub	sp, #24
 8016d8e:	ac0c      	add	r4, sp, #48	; 0x30
 8016d90:	f844 3f04 	str.w	r3, [r4, #4]!
 8016d94:	ad01      	add	r5, sp, #4
 8016d96:	460f      	mov	r7, r1
 8016d98:	4616      	mov	r6, r2
 8016d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	a801      	add	r0, sp, #4
 8016da2:	4664      	mov	r4, ip
 8016da4:	602b      	str	r3, [r5, #0]
 8016da6:	f7f3 ff1b 	bl	800abe0 <rcutils_allocator_is_valid>
 8016daa:	b338      	cbz	r0, 8016dfc <rcl_guard_condition_init_from_rmw+0x78>
 8016dac:	b334      	cbz	r4, 8016dfc <rcl_guard_condition_init_from_rmw+0x78>
 8016dae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016db2:	f1b8 0f00 	cmp.w	r8, #0
 8016db6:	d11b      	bne.n	8016df0 <rcl_guard_condition_init_from_rmw+0x6c>
 8016db8:	b306      	cbz	r6, 8016dfc <rcl_guard_condition_init_from_rmw+0x78>
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7fc f898 	bl	8012ef0 <rcl_context_is_valid>
 8016dc0:	b310      	cbz	r0, 8016e08 <rcl_guard_condition_init_from_rmw+0x84>
 8016dc2:	201c      	movs	r0, #28
 8016dc4:	9b01      	ldr	r3, [sp, #4]
 8016dc6:	9905      	ldr	r1, [sp, #20]
 8016dc8:	4798      	blx	r3
 8016dca:	4605      	mov	r5, r0
 8016dcc:	6060      	str	r0, [r4, #4]
 8016dce:	b340      	cbz	r0, 8016e22 <rcl_guard_condition_init_from_rmw+0x9e>
 8016dd0:	b1e7      	cbz	r7, 8016e0c <rcl_guard_condition_init_from_rmw+0x88>
 8016dd2:	6007      	str	r7, [r0, #0]
 8016dd4:	f880 8004 	strb.w	r8, [r0, #4]
 8016dd8:	ac01      	add	r4, sp, #4
 8016dda:	3508      	adds	r5, #8
 8016ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016de0:	2000      	movs	r0, #0
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	602b      	str	r3, [r5, #0]
 8016de6:	b006      	add	sp, #24
 8016de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dec:	b002      	add	sp, #8
 8016dee:	4770      	bx	lr
 8016df0:	2064      	movs	r0, #100	; 0x64
 8016df2:	b006      	add	sp, #24
 8016df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016df8:	b002      	add	sp, #8
 8016dfa:	4770      	bx	lr
 8016dfc:	200b      	movs	r0, #11
 8016dfe:	b006      	add	sp, #24
 8016e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e04:	b002      	add	sp, #8
 8016e06:	4770      	bx	lr
 8016e08:	2065      	movs	r0, #101	; 0x65
 8016e0a:	e7f2      	b.n	8016df2 <rcl_guard_condition_init_from_rmw+0x6e>
 8016e0c:	6830      	ldr	r0, [r6, #0]
 8016e0e:	3028      	adds	r0, #40	; 0x28
 8016e10:	f000 f860 	bl	8016ed4 <rmw_create_guard_condition>
 8016e14:	6028      	str	r0, [r5, #0]
 8016e16:	6865      	ldr	r5, [r4, #4]
 8016e18:	682e      	ldr	r6, [r5, #0]
 8016e1a:	b126      	cbz	r6, 8016e26 <rcl_guard_condition_init_from_rmw+0xa2>
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	712b      	strb	r3, [r5, #4]
 8016e20:	e7da      	b.n	8016dd8 <rcl_guard_condition_init_from_rmw+0x54>
 8016e22:	200a      	movs	r0, #10
 8016e24:	e7e5      	b.n	8016df2 <rcl_guard_condition_init_from_rmw+0x6e>
 8016e26:	4628      	mov	r0, r5
 8016e28:	9b02      	ldr	r3, [sp, #8]
 8016e2a:	9905      	ldr	r1, [sp, #20]
 8016e2c:	4798      	blx	r3
 8016e2e:	2001      	movs	r0, #1
 8016e30:	6066      	str	r6, [r4, #4]
 8016e32:	e7de      	b.n	8016df2 <rcl_guard_condition_init_from_rmw+0x6e>

08016e34 <rcl_guard_condition_fini>:
 8016e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e36:	b1e0      	cbz	r0, 8016e72 <rcl_guard_condition_fini+0x3e>
 8016e38:	4604      	mov	r4, r0
 8016e3a:	6840      	ldr	r0, [r0, #4]
 8016e3c:	b158      	cbz	r0, 8016e56 <rcl_guard_condition_fini+0x22>
 8016e3e:	6803      	ldr	r3, [r0, #0]
 8016e40:	68c6      	ldr	r6, [r0, #12]
 8016e42:	6987      	ldr	r7, [r0, #24]
 8016e44:	b153      	cbz	r3, 8016e5c <rcl_guard_condition_fini+0x28>
 8016e46:	7905      	ldrb	r5, [r0, #4]
 8016e48:	b955      	cbnz	r5, 8016e60 <rcl_guard_condition_fini+0x2c>
 8016e4a:	4639      	mov	r1, r7
 8016e4c:	47b0      	blx	r6
 8016e4e:	2300      	movs	r3, #0
 8016e50:	4628      	mov	r0, r5
 8016e52:	6063      	str	r3, [r4, #4]
 8016e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e56:	4605      	mov	r5, r0
 8016e58:	4628      	mov	r0, r5
 8016e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e5c:	461d      	mov	r5, r3
 8016e5e:	e7f4      	b.n	8016e4a <rcl_guard_condition_fini+0x16>
 8016e60:	4618      	mov	r0, r3
 8016e62:	f000 f84b 	bl	8016efc <rmw_destroy_guard_condition>
 8016e66:	4605      	mov	r5, r0
 8016e68:	3d00      	subs	r5, #0
 8016e6a:	bf18      	it	ne
 8016e6c:	2501      	movne	r5, #1
 8016e6e:	6860      	ldr	r0, [r4, #4]
 8016e70:	e7eb      	b.n	8016e4a <rcl_guard_condition_fini+0x16>
 8016e72:	250b      	movs	r5, #11
 8016e74:	4628      	mov	r0, r5
 8016e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e78 <rcl_guard_condition_get_default_options>:
 8016e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e7c:	4680      	mov	r8, r0
 8016e7e:	b086      	sub	sp, #24
 8016e80:	466d      	mov	r5, sp
 8016e82:	4c08      	ldr	r4, [pc, #32]	; (8016ea4 <rcl_guard_condition_get_default_options+0x2c>)
 8016e84:	4646      	mov	r6, r8
 8016e86:	4627      	mov	r7, r4
 8016e88:	4668      	mov	r0, sp
 8016e8a:	f7f3 fe9b 	bl	800abc4 <rcutils_get_default_allocator>
 8016e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016e94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016e96:	4640      	mov	r0, r8
 8016e98:	682b      	ldr	r3, [r5, #0]
 8016e9a:	6023      	str	r3, [r4, #0]
 8016e9c:	6033      	str	r3, [r6, #0]
 8016e9e:	b006      	add	sp, #24
 8016ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ea4:	20006840 	.word	0x20006840

08016ea8 <rcl_trigger_guard_condition>:
 8016ea8:	b148      	cbz	r0, 8016ebe <rcl_trigger_guard_condition+0x16>
 8016eaa:	b508      	push	{r3, lr}
 8016eac:	6843      	ldr	r3, [r0, #4]
 8016eae:	b143      	cbz	r3, 8016ec2 <rcl_trigger_guard_condition+0x1a>
 8016eb0:	6818      	ldr	r0, [r3, #0]
 8016eb2:	f000 f837 	bl	8016f24 <rmw_trigger_guard_condition>
 8016eb6:	3800      	subs	r0, #0
 8016eb8:	bf18      	it	ne
 8016eba:	2001      	movne	r0, #1
 8016ebc:	bd08      	pop	{r3, pc}
 8016ebe:	200b      	movs	r0, #11
 8016ec0:	4770      	bx	lr
 8016ec2:	200b      	movs	r0, #11
 8016ec4:	bd08      	pop	{r3, pc}
 8016ec6:	bf00      	nop

08016ec8 <rcl_guard_condition_get_rmw_handle>:
 8016ec8:	b110      	cbz	r0, 8016ed0 <rcl_guard_condition_get_rmw_handle+0x8>
 8016eca:	6840      	ldr	r0, [r0, #4]
 8016ecc:	b100      	cbz	r0, 8016ed0 <rcl_guard_condition_get_rmw_handle+0x8>
 8016ece:	6800      	ldr	r0, [r0, #0]
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop

08016ed4 <rmw_create_guard_condition>:
 8016ed4:	b538      	push	{r3, r4, r5, lr}
 8016ed6:	4605      	mov	r5, r0
 8016ed8:	4807      	ldr	r0, [pc, #28]	; (8016ef8 <rmw_create_guard_condition+0x24>)
 8016eda:	f7fe fd4d 	bl	8015978 <get_memory>
 8016ede:	b148      	cbz	r0, 8016ef4 <rmw_create_guard_condition+0x20>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	68c4      	ldr	r4, [r0, #12]
 8016ee4:	61e5      	str	r5, [r4, #28]
 8016ee6:	7423      	strb	r3, [r4, #16]
 8016ee8:	f7fe fdae 	bl	8015a48 <rmw_get_implementation_identifier>
 8016eec:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016ef0:	f104 0014 	add.w	r0, r4, #20
 8016ef4:	bd38      	pop	{r3, r4, r5, pc}
 8016ef6:	bf00      	nop
 8016ef8:	2000be28 	.word	0x2000be28

08016efc <rmw_destroy_guard_condition>:
 8016efc:	b508      	push	{r3, lr}
 8016efe:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <rmw_destroy_guard_condition+0x24>)
 8016f00:	6819      	ldr	r1, [r3, #0]
 8016f02:	b911      	cbnz	r1, 8016f0a <rmw_destroy_guard_condition+0xe>
 8016f04:	e00a      	b.n	8016f1c <rmw_destroy_guard_condition+0x20>
 8016f06:	6889      	ldr	r1, [r1, #8]
 8016f08:	b141      	cbz	r1, 8016f1c <rmw_destroy_guard_condition+0x20>
 8016f0a:	68cb      	ldr	r3, [r1, #12]
 8016f0c:	3314      	adds	r3, #20
 8016f0e:	4298      	cmp	r0, r3
 8016f10:	d1f9      	bne.n	8016f06 <rmw_destroy_guard_condition+0xa>
 8016f12:	4803      	ldr	r0, [pc, #12]	; (8016f20 <rmw_destroy_guard_condition+0x24>)
 8016f14:	f7fe fd40 	bl	8015998 <put_memory>
 8016f18:	2000      	movs	r0, #0
 8016f1a:	bd08      	pop	{r3, pc}
 8016f1c:	2001      	movs	r0, #1
 8016f1e:	bd08      	pop	{r3, pc}
 8016f20:	2000be28 	.word	0x2000be28

08016f24 <rmw_trigger_guard_condition>:
 8016f24:	b160      	cbz	r0, 8016f40 <rmw_trigger_guard_condition+0x1c>
 8016f26:	b510      	push	{r4, lr}
 8016f28:	4604      	mov	r4, r0
 8016f2a:	6800      	ldr	r0, [r0, #0]
 8016f2c:	f7f5 fbb0 	bl	800c690 <is_uxrce_rmw_identifier_valid>
 8016f30:	b908      	cbnz	r0, 8016f36 <rmw_trigger_guard_condition+0x12>
 8016f32:	2001      	movs	r0, #1
 8016f34:	bd10      	pop	{r4, pc}
 8016f36:	2201      	movs	r2, #1
 8016f38:	6863      	ldr	r3, [r4, #4]
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	741a      	strb	r2, [r3, #16]
 8016f3e:	bd10      	pop	{r4, pc}
 8016f40:	2001      	movs	r0, #1
 8016f42:	4770      	bx	lr

08016f44 <calloc>:
 8016f44:	4b02      	ldr	r3, [pc, #8]	; (8016f50 <calloc+0xc>)
 8016f46:	460a      	mov	r2, r1
 8016f48:	4601      	mov	r1, r0
 8016f4a:	6818      	ldr	r0, [r3, #0]
 8016f4c:	f000 b8b2 	b.w	80170b4 <_calloc_r>
 8016f50:	20000254 	.word	0x20000254

08016f54 <__errno>:
 8016f54:	4b01      	ldr	r3, [pc, #4]	; (8016f5c <__errno+0x8>)
 8016f56:	6818      	ldr	r0, [r3, #0]
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop
 8016f5c:	20000254 	.word	0x20000254

08016f60 <getenv>:
 8016f60:	b507      	push	{r0, r1, r2, lr}
 8016f62:	4b04      	ldr	r3, [pc, #16]	; (8016f74 <getenv+0x14>)
 8016f64:	4601      	mov	r1, r0
 8016f66:	aa01      	add	r2, sp, #4
 8016f68:	6818      	ldr	r0, [r3, #0]
 8016f6a:	f000 f805 	bl	8016f78 <_findenv_r>
 8016f6e:	b003      	add	sp, #12
 8016f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f74:	20000254 	.word	0x20000254

08016f78 <_findenv_r>:
 8016f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7c:	4607      	mov	r7, r0
 8016f7e:	4689      	mov	r9, r1
 8016f80:	4616      	mov	r6, r2
 8016f82:	f000 fb67 	bl	8017654 <__env_lock>
 8016f86:	4b18      	ldr	r3, [pc, #96]	; (8016fe8 <_findenv_r+0x70>)
 8016f88:	681c      	ldr	r4, [r3, #0]
 8016f8a:	469a      	mov	sl, r3
 8016f8c:	b134      	cbz	r4, 8016f9c <_findenv_r+0x24>
 8016f8e:	464b      	mov	r3, r9
 8016f90:	4698      	mov	r8, r3
 8016f92:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016f96:	b139      	cbz	r1, 8016fa8 <_findenv_r+0x30>
 8016f98:	293d      	cmp	r1, #61	; 0x3d
 8016f9a:	d1f9      	bne.n	8016f90 <_findenv_r+0x18>
 8016f9c:	4638      	mov	r0, r7
 8016f9e:	f000 fb5f 	bl	8017660 <__env_unlock>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa8:	eba8 0809 	sub.w	r8, r8, r9
 8016fac:	46a3      	mov	fp, r4
 8016fae:	f854 0b04 	ldr.w	r0, [r4], #4
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d0f2      	beq.n	8016f9c <_findenv_r+0x24>
 8016fb6:	4642      	mov	r2, r8
 8016fb8:	4649      	mov	r1, r9
 8016fba:	f000 fa36 	bl	801742a <strncmp>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d1f4      	bne.n	8016fac <_findenv_r+0x34>
 8016fc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016fc6:	eb03 0508 	add.w	r5, r3, r8
 8016fca:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016fce:	2b3d      	cmp	r3, #61	; 0x3d
 8016fd0:	d1ec      	bne.n	8016fac <_findenv_r+0x34>
 8016fd2:	f8da 3000 	ldr.w	r3, [sl]
 8016fd6:	4638      	mov	r0, r7
 8016fd8:	ebab 0303 	sub.w	r3, fp, r3
 8016fdc:	109b      	asrs	r3, r3, #2
 8016fde:	6033      	str	r3, [r6, #0]
 8016fe0:	f000 fb3e 	bl	8017660 <__env_unlock>
 8016fe4:	1c68      	adds	r0, r5, #1
 8016fe6:	e7dd      	b.n	8016fa4 <_findenv_r+0x2c>
 8016fe8:	20000000 	.word	0x20000000

08016fec <__libc_init_array>:
 8016fec:	b570      	push	{r4, r5, r6, lr}
 8016fee:	2600      	movs	r6, #0
 8016ff0:	4d0c      	ldr	r5, [pc, #48]	; (8017024 <__libc_init_array+0x38>)
 8016ff2:	4c0d      	ldr	r4, [pc, #52]	; (8017028 <__libc_init_array+0x3c>)
 8016ff4:	1b64      	subs	r4, r4, r5
 8016ff6:	10a4      	asrs	r4, r4, #2
 8016ff8:	42a6      	cmp	r6, r4
 8016ffa:	d109      	bne.n	8017010 <__libc_init_array+0x24>
 8016ffc:	f001 fbb0 	bl	8018760 <_init>
 8017000:	2600      	movs	r6, #0
 8017002:	4d0a      	ldr	r5, [pc, #40]	; (801702c <__libc_init_array+0x40>)
 8017004:	4c0a      	ldr	r4, [pc, #40]	; (8017030 <__libc_init_array+0x44>)
 8017006:	1b64      	subs	r4, r4, r5
 8017008:	10a4      	asrs	r4, r4, #2
 801700a:	42a6      	cmp	r6, r4
 801700c:	d105      	bne.n	801701a <__libc_init_array+0x2e>
 801700e:	bd70      	pop	{r4, r5, r6, pc}
 8017010:	f855 3b04 	ldr.w	r3, [r5], #4
 8017014:	4798      	blx	r3
 8017016:	3601      	adds	r6, #1
 8017018:	e7ee      	b.n	8016ff8 <__libc_init_array+0xc>
 801701a:	f855 3b04 	ldr.w	r3, [r5], #4
 801701e:	4798      	blx	r3
 8017020:	3601      	adds	r6, #1
 8017022:	e7f2      	b.n	801700a <__libc_init_array+0x1e>
 8017024:	0801a334 	.word	0x0801a334
 8017028:	0801a334 	.word	0x0801a334
 801702c:	0801a334 	.word	0x0801a334
 8017030:	0801a338 	.word	0x0801a338

08017034 <malloc>:
 8017034:	4b02      	ldr	r3, [pc, #8]	; (8017040 <malloc+0xc>)
 8017036:	4601      	mov	r1, r0
 8017038:	6818      	ldr	r0, [r3, #0]
 801703a:	f000 b895 	b.w	8017168 <_malloc_r>
 801703e:	bf00      	nop
 8017040:	20000254 	.word	0x20000254

08017044 <free>:
 8017044:	4b02      	ldr	r3, [pc, #8]	; (8017050 <free+0xc>)
 8017046:	4601      	mov	r1, r0
 8017048:	6818      	ldr	r0, [r3, #0]
 801704a:	f000 b841 	b.w	80170d0 <_free_r>
 801704e:	bf00      	nop
 8017050:	20000254 	.word	0x20000254

08017054 <memcpy>:
 8017054:	440a      	add	r2, r1
 8017056:	4291      	cmp	r1, r2
 8017058:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801705c:	d100      	bne.n	8017060 <memcpy+0xc>
 801705e:	4770      	bx	lr
 8017060:	b510      	push	{r4, lr}
 8017062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017066:	4291      	cmp	r1, r2
 8017068:	f803 4f01 	strb.w	r4, [r3, #1]!
 801706c:	d1f9      	bne.n	8017062 <memcpy+0xe>
 801706e:	bd10      	pop	{r4, pc}

08017070 <memmove>:
 8017070:	4288      	cmp	r0, r1
 8017072:	b510      	push	{r4, lr}
 8017074:	eb01 0402 	add.w	r4, r1, r2
 8017078:	d902      	bls.n	8017080 <memmove+0x10>
 801707a:	4284      	cmp	r4, r0
 801707c:	4623      	mov	r3, r4
 801707e:	d807      	bhi.n	8017090 <memmove+0x20>
 8017080:	1e43      	subs	r3, r0, #1
 8017082:	42a1      	cmp	r1, r4
 8017084:	d008      	beq.n	8017098 <memmove+0x28>
 8017086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801708a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801708e:	e7f8      	b.n	8017082 <memmove+0x12>
 8017090:	4601      	mov	r1, r0
 8017092:	4402      	add	r2, r0
 8017094:	428a      	cmp	r2, r1
 8017096:	d100      	bne.n	801709a <memmove+0x2a>
 8017098:	bd10      	pop	{r4, pc}
 801709a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801709e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170a2:	e7f7      	b.n	8017094 <memmove+0x24>

080170a4 <memset>:
 80170a4:	4603      	mov	r3, r0
 80170a6:	4402      	add	r2, r0
 80170a8:	4293      	cmp	r3, r2
 80170aa:	d100      	bne.n	80170ae <memset+0xa>
 80170ac:	4770      	bx	lr
 80170ae:	f803 1b01 	strb.w	r1, [r3], #1
 80170b2:	e7f9      	b.n	80170a8 <memset+0x4>

080170b4 <_calloc_r>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	fb02 f501 	mul.w	r5, r2, r1
 80170ba:	4629      	mov	r1, r5
 80170bc:	f000 f854 	bl	8017168 <_malloc_r>
 80170c0:	4604      	mov	r4, r0
 80170c2:	b118      	cbz	r0, 80170cc <_calloc_r+0x18>
 80170c4:	462a      	mov	r2, r5
 80170c6:	2100      	movs	r1, #0
 80170c8:	f7ff ffec 	bl	80170a4 <memset>
 80170cc:	4620      	mov	r0, r4
 80170ce:	bd38      	pop	{r3, r4, r5, pc}

080170d0 <_free_r>:
 80170d0:	b538      	push	{r3, r4, r5, lr}
 80170d2:	4605      	mov	r5, r0
 80170d4:	2900      	cmp	r1, #0
 80170d6:	d043      	beq.n	8017160 <_free_r+0x90>
 80170d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170dc:	1f0c      	subs	r4, r1, #4
 80170de:	2b00      	cmp	r3, #0
 80170e0:	bfb8      	it	lt
 80170e2:	18e4      	addlt	r4, r4, r3
 80170e4:	f000 fbcc 	bl	8017880 <__malloc_lock>
 80170e8:	4a1e      	ldr	r2, [pc, #120]	; (8017164 <_free_r+0x94>)
 80170ea:	6813      	ldr	r3, [r2, #0]
 80170ec:	4610      	mov	r0, r2
 80170ee:	b933      	cbnz	r3, 80170fe <_free_r+0x2e>
 80170f0:	6063      	str	r3, [r4, #4]
 80170f2:	6014      	str	r4, [r2, #0]
 80170f4:	4628      	mov	r0, r5
 80170f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170fa:	f000 bbc7 	b.w	801788c <__malloc_unlock>
 80170fe:	42a3      	cmp	r3, r4
 8017100:	d90a      	bls.n	8017118 <_free_r+0x48>
 8017102:	6821      	ldr	r1, [r4, #0]
 8017104:	1862      	adds	r2, r4, r1
 8017106:	4293      	cmp	r3, r2
 8017108:	bf01      	itttt	eq
 801710a:	681a      	ldreq	r2, [r3, #0]
 801710c:	685b      	ldreq	r3, [r3, #4]
 801710e:	1852      	addeq	r2, r2, r1
 8017110:	6022      	streq	r2, [r4, #0]
 8017112:	6063      	str	r3, [r4, #4]
 8017114:	6004      	str	r4, [r0, #0]
 8017116:	e7ed      	b.n	80170f4 <_free_r+0x24>
 8017118:	461a      	mov	r2, r3
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	b10b      	cbz	r3, 8017122 <_free_r+0x52>
 801711e:	42a3      	cmp	r3, r4
 8017120:	d9fa      	bls.n	8017118 <_free_r+0x48>
 8017122:	6811      	ldr	r1, [r2, #0]
 8017124:	1850      	adds	r0, r2, r1
 8017126:	42a0      	cmp	r0, r4
 8017128:	d10b      	bne.n	8017142 <_free_r+0x72>
 801712a:	6820      	ldr	r0, [r4, #0]
 801712c:	4401      	add	r1, r0
 801712e:	1850      	adds	r0, r2, r1
 8017130:	4283      	cmp	r3, r0
 8017132:	6011      	str	r1, [r2, #0]
 8017134:	d1de      	bne.n	80170f4 <_free_r+0x24>
 8017136:	6818      	ldr	r0, [r3, #0]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	4401      	add	r1, r0
 801713c:	6011      	str	r1, [r2, #0]
 801713e:	6053      	str	r3, [r2, #4]
 8017140:	e7d8      	b.n	80170f4 <_free_r+0x24>
 8017142:	d902      	bls.n	801714a <_free_r+0x7a>
 8017144:	230c      	movs	r3, #12
 8017146:	602b      	str	r3, [r5, #0]
 8017148:	e7d4      	b.n	80170f4 <_free_r+0x24>
 801714a:	6820      	ldr	r0, [r4, #0]
 801714c:	1821      	adds	r1, r4, r0
 801714e:	428b      	cmp	r3, r1
 8017150:	bf01      	itttt	eq
 8017152:	6819      	ldreq	r1, [r3, #0]
 8017154:	685b      	ldreq	r3, [r3, #4]
 8017156:	1809      	addeq	r1, r1, r0
 8017158:	6021      	streq	r1, [r4, #0]
 801715a:	6063      	str	r3, [r4, #4]
 801715c:	6054      	str	r4, [r2, #4]
 801715e:	e7c9      	b.n	80170f4 <_free_r+0x24>
 8017160:	bd38      	pop	{r3, r4, r5, pc}
 8017162:	bf00      	nop
 8017164:	20006854 	.word	0x20006854

08017168 <_malloc_r>:
 8017168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716a:	1ccd      	adds	r5, r1, #3
 801716c:	f025 0503 	bic.w	r5, r5, #3
 8017170:	3508      	adds	r5, #8
 8017172:	2d0c      	cmp	r5, #12
 8017174:	bf38      	it	cc
 8017176:	250c      	movcc	r5, #12
 8017178:	2d00      	cmp	r5, #0
 801717a:	4606      	mov	r6, r0
 801717c:	db01      	blt.n	8017182 <_malloc_r+0x1a>
 801717e:	42a9      	cmp	r1, r5
 8017180:	d903      	bls.n	801718a <_malloc_r+0x22>
 8017182:	230c      	movs	r3, #12
 8017184:	6033      	str	r3, [r6, #0]
 8017186:	2000      	movs	r0, #0
 8017188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801718a:	f000 fb79 	bl	8017880 <__malloc_lock>
 801718e:	4921      	ldr	r1, [pc, #132]	; (8017214 <_malloc_r+0xac>)
 8017190:	680a      	ldr	r2, [r1, #0]
 8017192:	4614      	mov	r4, r2
 8017194:	b99c      	cbnz	r4, 80171be <_malloc_r+0x56>
 8017196:	4f20      	ldr	r7, [pc, #128]	; (8017218 <_malloc_r+0xb0>)
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	b923      	cbnz	r3, 80171a6 <_malloc_r+0x3e>
 801719c:	4621      	mov	r1, r4
 801719e:	4630      	mov	r0, r6
 80171a0:	f000 f8ca 	bl	8017338 <_sbrk_r>
 80171a4:	6038      	str	r0, [r7, #0]
 80171a6:	4629      	mov	r1, r5
 80171a8:	4630      	mov	r0, r6
 80171aa:	f000 f8c5 	bl	8017338 <_sbrk_r>
 80171ae:	1c43      	adds	r3, r0, #1
 80171b0:	d123      	bne.n	80171fa <_malloc_r+0x92>
 80171b2:	230c      	movs	r3, #12
 80171b4:	4630      	mov	r0, r6
 80171b6:	6033      	str	r3, [r6, #0]
 80171b8:	f000 fb68 	bl	801788c <__malloc_unlock>
 80171bc:	e7e3      	b.n	8017186 <_malloc_r+0x1e>
 80171be:	6823      	ldr	r3, [r4, #0]
 80171c0:	1b5b      	subs	r3, r3, r5
 80171c2:	d417      	bmi.n	80171f4 <_malloc_r+0x8c>
 80171c4:	2b0b      	cmp	r3, #11
 80171c6:	d903      	bls.n	80171d0 <_malloc_r+0x68>
 80171c8:	6023      	str	r3, [r4, #0]
 80171ca:	441c      	add	r4, r3
 80171cc:	6025      	str	r5, [r4, #0]
 80171ce:	e004      	b.n	80171da <_malloc_r+0x72>
 80171d0:	6863      	ldr	r3, [r4, #4]
 80171d2:	42a2      	cmp	r2, r4
 80171d4:	bf0c      	ite	eq
 80171d6:	600b      	streq	r3, [r1, #0]
 80171d8:	6053      	strne	r3, [r2, #4]
 80171da:	4630      	mov	r0, r6
 80171dc:	f000 fb56 	bl	801788c <__malloc_unlock>
 80171e0:	f104 000b 	add.w	r0, r4, #11
 80171e4:	1d23      	adds	r3, r4, #4
 80171e6:	f020 0007 	bic.w	r0, r0, #7
 80171ea:	1ac2      	subs	r2, r0, r3
 80171ec:	d0cc      	beq.n	8017188 <_malloc_r+0x20>
 80171ee:	1a1b      	subs	r3, r3, r0
 80171f0:	50a3      	str	r3, [r4, r2]
 80171f2:	e7c9      	b.n	8017188 <_malloc_r+0x20>
 80171f4:	4622      	mov	r2, r4
 80171f6:	6864      	ldr	r4, [r4, #4]
 80171f8:	e7cc      	b.n	8017194 <_malloc_r+0x2c>
 80171fa:	1cc4      	adds	r4, r0, #3
 80171fc:	f024 0403 	bic.w	r4, r4, #3
 8017200:	42a0      	cmp	r0, r4
 8017202:	d0e3      	beq.n	80171cc <_malloc_r+0x64>
 8017204:	1a21      	subs	r1, r4, r0
 8017206:	4630      	mov	r0, r6
 8017208:	f000 f896 	bl	8017338 <_sbrk_r>
 801720c:	3001      	adds	r0, #1
 801720e:	d1dd      	bne.n	80171cc <_malloc_r+0x64>
 8017210:	e7cf      	b.n	80171b2 <_malloc_r+0x4a>
 8017212:	bf00      	nop
 8017214:	20006854 	.word	0x20006854
 8017218:	20006858 	.word	0x20006858

0801721c <iprintf>:
 801721c:	b40f      	push	{r0, r1, r2, r3}
 801721e:	4b0a      	ldr	r3, [pc, #40]	; (8017248 <iprintf+0x2c>)
 8017220:	b513      	push	{r0, r1, r4, lr}
 8017222:	681c      	ldr	r4, [r3, #0]
 8017224:	b124      	cbz	r4, 8017230 <iprintf+0x14>
 8017226:	69a3      	ldr	r3, [r4, #24]
 8017228:	b913      	cbnz	r3, 8017230 <iprintf+0x14>
 801722a:	4620      	mov	r0, r4
 801722c:	f000 fa76 	bl	801771c <__sinit>
 8017230:	ab05      	add	r3, sp, #20
 8017232:	4620      	mov	r0, r4
 8017234:	9a04      	ldr	r2, [sp, #16]
 8017236:	68a1      	ldr	r1, [r4, #8]
 8017238:	9301      	str	r3, [sp, #4]
 801723a:	f000 fcd7 	bl	8017bec <_vfiprintf_r>
 801723e:	b002      	add	sp, #8
 8017240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017244:	b004      	add	sp, #16
 8017246:	4770      	bx	lr
 8017248:	20000254 	.word	0x20000254

0801724c <srand>:
 801724c:	b538      	push	{r3, r4, r5, lr}
 801724e:	4b10      	ldr	r3, [pc, #64]	; (8017290 <srand+0x44>)
 8017250:	4604      	mov	r4, r0
 8017252:	681d      	ldr	r5, [r3, #0]
 8017254:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8017256:	b9b3      	cbnz	r3, 8017286 <srand+0x3a>
 8017258:	2018      	movs	r0, #24
 801725a:	f7ff feeb 	bl	8017034 <malloc>
 801725e:	4602      	mov	r2, r0
 8017260:	63a8      	str	r0, [r5, #56]	; 0x38
 8017262:	b920      	cbnz	r0, 801726e <srand+0x22>
 8017264:	2142      	movs	r1, #66	; 0x42
 8017266:	4b0b      	ldr	r3, [pc, #44]	; (8017294 <srand+0x48>)
 8017268:	480b      	ldr	r0, [pc, #44]	; (8017298 <srand+0x4c>)
 801726a:	f000 f9d5 	bl	8017618 <__assert_func>
 801726e:	490b      	ldr	r1, [pc, #44]	; (801729c <srand+0x50>)
 8017270:	4b0b      	ldr	r3, [pc, #44]	; (80172a0 <srand+0x54>)
 8017272:	e9c0 1300 	strd	r1, r3, [r0]
 8017276:	4b0b      	ldr	r3, [pc, #44]	; (80172a4 <srand+0x58>)
 8017278:	2100      	movs	r1, #0
 801727a:	6083      	str	r3, [r0, #8]
 801727c:	230b      	movs	r3, #11
 801727e:	8183      	strh	r3, [r0, #12]
 8017280:	2001      	movs	r0, #1
 8017282:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017286:	2200      	movs	r2, #0
 8017288:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801728a:	611c      	str	r4, [r3, #16]
 801728c:	615a      	str	r2, [r3, #20]
 801728e:	bd38      	pop	{r3, r4, r5, pc}
 8017290:	20000254 	.word	0x20000254
 8017294:	0801a1e4 	.word	0x0801a1e4
 8017298:	0801a1fb 	.word	0x0801a1fb
 801729c:	abcd330e 	.word	0xabcd330e
 80172a0:	e66d1234 	.word	0xe66d1234
 80172a4:	0005deec 	.word	0x0005deec

080172a8 <rand>:
 80172a8:	4b17      	ldr	r3, [pc, #92]	; (8017308 <rand+0x60>)
 80172aa:	b510      	push	{r4, lr}
 80172ac:	681c      	ldr	r4, [r3, #0]
 80172ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172b0:	b9b3      	cbnz	r3, 80172e0 <rand+0x38>
 80172b2:	2018      	movs	r0, #24
 80172b4:	f7ff febe 	bl	8017034 <malloc>
 80172b8:	4602      	mov	r2, r0
 80172ba:	63a0      	str	r0, [r4, #56]	; 0x38
 80172bc:	b920      	cbnz	r0, 80172c8 <rand+0x20>
 80172be:	214e      	movs	r1, #78	; 0x4e
 80172c0:	4b12      	ldr	r3, [pc, #72]	; (801730c <rand+0x64>)
 80172c2:	4813      	ldr	r0, [pc, #76]	; (8017310 <rand+0x68>)
 80172c4:	f000 f9a8 	bl	8017618 <__assert_func>
 80172c8:	4912      	ldr	r1, [pc, #72]	; (8017314 <rand+0x6c>)
 80172ca:	4b13      	ldr	r3, [pc, #76]	; (8017318 <rand+0x70>)
 80172cc:	e9c0 1300 	strd	r1, r3, [r0]
 80172d0:	4b12      	ldr	r3, [pc, #72]	; (801731c <rand+0x74>)
 80172d2:	2100      	movs	r1, #0
 80172d4:	6083      	str	r3, [r0, #8]
 80172d6:	230b      	movs	r3, #11
 80172d8:	8183      	strh	r3, [r0, #12]
 80172da:	2001      	movs	r0, #1
 80172dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80172e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80172e2:	480f      	ldr	r0, [pc, #60]	; (8017320 <rand+0x78>)
 80172e4:	690a      	ldr	r2, [r1, #16]
 80172e6:	694b      	ldr	r3, [r1, #20]
 80172e8:	4350      	muls	r0, r2
 80172ea:	4c0e      	ldr	r4, [pc, #56]	; (8017324 <rand+0x7c>)
 80172ec:	fb04 0003 	mla	r0, r4, r3, r0
 80172f0:	fba2 3404 	umull	r3, r4, r2, r4
 80172f4:	1c5a      	adds	r2, r3, #1
 80172f6:	4404      	add	r4, r0
 80172f8:	f144 0000 	adc.w	r0, r4, #0
 80172fc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017300:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017304:	bd10      	pop	{r4, pc}
 8017306:	bf00      	nop
 8017308:	20000254 	.word	0x20000254
 801730c:	0801a1e4 	.word	0x0801a1e4
 8017310:	0801a1fb 	.word	0x0801a1fb
 8017314:	abcd330e 	.word	0xabcd330e
 8017318:	e66d1234 	.word	0xe66d1234
 801731c:	0005deec 	.word	0x0005deec
 8017320:	5851f42d 	.word	0x5851f42d
 8017324:	4c957f2d 	.word	0x4c957f2d

08017328 <realloc>:
 8017328:	4b02      	ldr	r3, [pc, #8]	; (8017334 <realloc+0xc>)
 801732a:	460a      	mov	r2, r1
 801732c:	4601      	mov	r1, r0
 801732e:	6818      	ldr	r0, [r3, #0]
 8017330:	f000 bab2 	b.w	8017898 <_realloc_r>
 8017334:	20000254 	.word	0x20000254

08017338 <_sbrk_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	2300      	movs	r3, #0
 801733c:	4d05      	ldr	r5, [pc, #20]	; (8017354 <_sbrk_r+0x1c>)
 801733e:	4604      	mov	r4, r0
 8017340:	4608      	mov	r0, r1
 8017342:	602b      	str	r3, [r5, #0]
 8017344:	f7eb fd56 	bl	8002df4 <_sbrk>
 8017348:	1c43      	adds	r3, r0, #1
 801734a:	d102      	bne.n	8017352 <_sbrk_r+0x1a>
 801734c:	682b      	ldr	r3, [r5, #0]
 801734e:	b103      	cbz	r3, 8017352 <_sbrk_r+0x1a>
 8017350:	6023      	str	r3, [r4, #0]
 8017352:	bd38      	pop	{r3, r4, r5, pc}
 8017354:	2000d63c 	.word	0x2000d63c

08017358 <sniprintf>:
 8017358:	b40c      	push	{r2, r3}
 801735a:	b530      	push	{r4, r5, lr}
 801735c:	4b17      	ldr	r3, [pc, #92]	; (80173bc <sniprintf+0x64>)
 801735e:	1e0c      	subs	r4, r1, #0
 8017360:	681d      	ldr	r5, [r3, #0]
 8017362:	b09d      	sub	sp, #116	; 0x74
 8017364:	da08      	bge.n	8017378 <sniprintf+0x20>
 8017366:	238b      	movs	r3, #139	; 0x8b
 8017368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801736c:	602b      	str	r3, [r5, #0]
 801736e:	b01d      	add	sp, #116	; 0x74
 8017370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017374:	b002      	add	sp, #8
 8017376:	4770      	bx	lr
 8017378:	f44f 7302 	mov.w	r3, #520	; 0x208
 801737c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017380:	bf0c      	ite	eq
 8017382:	4623      	moveq	r3, r4
 8017384:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017388:	9304      	str	r3, [sp, #16]
 801738a:	9307      	str	r3, [sp, #28]
 801738c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017390:	9002      	str	r0, [sp, #8]
 8017392:	9006      	str	r0, [sp, #24]
 8017394:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017398:	4628      	mov	r0, r5
 801739a:	ab21      	add	r3, sp, #132	; 0x84
 801739c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801739e:	a902      	add	r1, sp, #8
 80173a0:	9301      	str	r3, [sp, #4]
 80173a2:	f000 fafb 	bl	801799c <_svfiprintf_r>
 80173a6:	1c43      	adds	r3, r0, #1
 80173a8:	bfbc      	itt	lt
 80173aa:	238b      	movlt	r3, #139	; 0x8b
 80173ac:	602b      	strlt	r3, [r5, #0]
 80173ae:	2c00      	cmp	r4, #0
 80173b0:	d0dd      	beq.n	801736e <sniprintf+0x16>
 80173b2:	2200      	movs	r2, #0
 80173b4:	9b02      	ldr	r3, [sp, #8]
 80173b6:	701a      	strb	r2, [r3, #0]
 80173b8:	e7d9      	b.n	801736e <sniprintf+0x16>
 80173ba:	bf00      	nop
 80173bc:	20000254 	.word	0x20000254

080173c0 <siprintf>:
 80173c0:	b40e      	push	{r1, r2, r3}
 80173c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173c6:	b500      	push	{lr}
 80173c8:	b09c      	sub	sp, #112	; 0x70
 80173ca:	ab1d      	add	r3, sp, #116	; 0x74
 80173cc:	9002      	str	r0, [sp, #8]
 80173ce:	9006      	str	r0, [sp, #24]
 80173d0:	9107      	str	r1, [sp, #28]
 80173d2:	9104      	str	r1, [sp, #16]
 80173d4:	4808      	ldr	r0, [pc, #32]	; (80173f8 <siprintf+0x38>)
 80173d6:	4909      	ldr	r1, [pc, #36]	; (80173fc <siprintf+0x3c>)
 80173d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80173dc:	9105      	str	r1, [sp, #20]
 80173de:	6800      	ldr	r0, [r0, #0]
 80173e0:	a902      	add	r1, sp, #8
 80173e2:	9301      	str	r3, [sp, #4]
 80173e4:	f000 fada 	bl	801799c <_svfiprintf_r>
 80173e8:	2200      	movs	r2, #0
 80173ea:	9b02      	ldr	r3, [sp, #8]
 80173ec:	701a      	strb	r2, [r3, #0]
 80173ee:	b01c      	add	sp, #112	; 0x70
 80173f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80173f4:	b003      	add	sp, #12
 80173f6:	4770      	bx	lr
 80173f8:	20000254 	.word	0x20000254
 80173fc:	ffff0208 	.word	0xffff0208

08017400 <strchr>:
 8017400:	4603      	mov	r3, r0
 8017402:	b2c9      	uxtb	r1, r1
 8017404:	4618      	mov	r0, r3
 8017406:	f813 2b01 	ldrb.w	r2, [r3], #1
 801740a:	b112      	cbz	r2, 8017412 <strchr+0x12>
 801740c:	428a      	cmp	r2, r1
 801740e:	d1f9      	bne.n	8017404 <strchr+0x4>
 8017410:	4770      	bx	lr
 8017412:	2900      	cmp	r1, #0
 8017414:	bf18      	it	ne
 8017416:	2000      	movne	r0, #0
 8017418:	4770      	bx	lr

0801741a <strcpy>:
 801741a:	4603      	mov	r3, r0
 801741c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017420:	f803 2b01 	strb.w	r2, [r3], #1
 8017424:	2a00      	cmp	r2, #0
 8017426:	d1f9      	bne.n	801741c <strcpy+0x2>
 8017428:	4770      	bx	lr

0801742a <strncmp>:
 801742a:	b510      	push	{r4, lr}
 801742c:	b16a      	cbz	r2, 801744a <strncmp+0x20>
 801742e:	3901      	subs	r1, #1
 8017430:	1884      	adds	r4, r0, r2
 8017432:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801743a:	4293      	cmp	r3, r2
 801743c:	d103      	bne.n	8017446 <strncmp+0x1c>
 801743e:	42a0      	cmp	r0, r4
 8017440:	d001      	beq.n	8017446 <strncmp+0x1c>
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1f5      	bne.n	8017432 <strncmp+0x8>
 8017446:	1a98      	subs	r0, r3, r2
 8017448:	bd10      	pop	{r4, pc}
 801744a:	4610      	mov	r0, r2
 801744c:	e7fc      	b.n	8017448 <strncmp+0x1e>

0801744e <strnlen>:
 801744e:	4602      	mov	r2, r0
 8017450:	b510      	push	{r4, lr}
 8017452:	4401      	add	r1, r0
 8017454:	428a      	cmp	r2, r1
 8017456:	4613      	mov	r3, r2
 8017458:	d101      	bne.n	801745e <strnlen+0x10>
 801745a:	1a18      	subs	r0, r3, r0
 801745c:	bd10      	pop	{r4, pc}
 801745e:	781c      	ldrb	r4, [r3, #0]
 8017460:	3201      	adds	r2, #1
 8017462:	2c00      	cmp	r4, #0
 8017464:	d1f6      	bne.n	8017454 <strnlen+0x6>
 8017466:	e7f8      	b.n	801745a <strnlen+0xc>

08017468 <strstr>:
 8017468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801746a:	780c      	ldrb	r4, [r1, #0]
 801746c:	b164      	cbz	r4, 8017488 <strstr+0x20>
 801746e:	4603      	mov	r3, r0
 8017470:	781a      	ldrb	r2, [r3, #0]
 8017472:	4618      	mov	r0, r3
 8017474:	1c5e      	adds	r6, r3, #1
 8017476:	b90a      	cbnz	r2, 801747c <strstr+0x14>
 8017478:	4610      	mov	r0, r2
 801747a:	e005      	b.n	8017488 <strstr+0x20>
 801747c:	4294      	cmp	r4, r2
 801747e:	d108      	bne.n	8017492 <strstr+0x2a>
 8017480:	460d      	mov	r5, r1
 8017482:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017486:	b902      	cbnz	r2, 801748a <strstr+0x22>
 8017488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801748a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801748e:	4297      	cmp	r7, r2
 8017490:	d0f7      	beq.n	8017482 <strstr+0x1a>
 8017492:	4633      	mov	r3, r6
 8017494:	e7ec      	b.n	8017470 <strstr+0x8>
	...

08017498 <_strtoul_l.isra.0>:
 8017498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801749c:	468c      	mov	ip, r1
 801749e:	4686      	mov	lr, r0
 80174a0:	4e3a      	ldr	r6, [pc, #232]	; (801758c <_strtoul_l.isra.0+0xf4>)
 80174a2:	4660      	mov	r0, ip
 80174a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80174a8:	5da5      	ldrb	r5, [r4, r6]
 80174aa:	f015 0508 	ands.w	r5, r5, #8
 80174ae:	d1f8      	bne.n	80174a2 <_strtoul_l.isra.0+0xa>
 80174b0:	2c2d      	cmp	r4, #45	; 0x2d
 80174b2:	d134      	bne.n	801751e <_strtoul_l.isra.0+0x86>
 80174b4:	f04f 0801 	mov.w	r8, #1
 80174b8:	f89c 4000 	ldrb.w	r4, [ip]
 80174bc:	f100 0c02 	add.w	ip, r0, #2
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d05e      	beq.n	8017582 <_strtoul_l.isra.0+0xea>
 80174c4:	2b10      	cmp	r3, #16
 80174c6:	d10c      	bne.n	80174e2 <_strtoul_l.isra.0+0x4a>
 80174c8:	2c30      	cmp	r4, #48	; 0x30
 80174ca:	d10a      	bne.n	80174e2 <_strtoul_l.isra.0+0x4a>
 80174cc:	f89c 0000 	ldrb.w	r0, [ip]
 80174d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80174d4:	2858      	cmp	r0, #88	; 0x58
 80174d6:	d14f      	bne.n	8017578 <_strtoul_l.isra.0+0xe0>
 80174d8:	2310      	movs	r3, #16
 80174da:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80174de:	f10c 0c02 	add.w	ip, ip, #2
 80174e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80174e6:	fbb7 f7f3 	udiv	r7, r7, r3
 80174ea:	2500      	movs	r5, #0
 80174ec:	fb03 f907 	mul.w	r9, r3, r7
 80174f0:	4628      	mov	r0, r5
 80174f2:	ea6f 0909 	mvn.w	r9, r9
 80174f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80174fa:	2e09      	cmp	r6, #9
 80174fc:	d818      	bhi.n	8017530 <_strtoul_l.isra.0+0x98>
 80174fe:	4634      	mov	r4, r6
 8017500:	42a3      	cmp	r3, r4
 8017502:	dd24      	ble.n	801754e <_strtoul_l.isra.0+0xb6>
 8017504:	2d00      	cmp	r5, #0
 8017506:	db1f      	blt.n	8017548 <_strtoul_l.isra.0+0xb0>
 8017508:	4287      	cmp	r7, r0
 801750a:	d31d      	bcc.n	8017548 <_strtoul_l.isra.0+0xb0>
 801750c:	d101      	bne.n	8017512 <_strtoul_l.isra.0+0x7a>
 801750e:	45a1      	cmp	r9, r4
 8017510:	db1a      	blt.n	8017548 <_strtoul_l.isra.0+0xb0>
 8017512:	2501      	movs	r5, #1
 8017514:	fb00 4003 	mla	r0, r0, r3, r4
 8017518:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801751c:	e7eb      	b.n	80174f6 <_strtoul_l.isra.0+0x5e>
 801751e:	2c2b      	cmp	r4, #43	; 0x2b
 8017520:	bf08      	it	eq
 8017522:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017526:	46a8      	mov	r8, r5
 8017528:	bf08      	it	eq
 801752a:	f100 0c02 	addeq.w	ip, r0, #2
 801752e:	e7c7      	b.n	80174c0 <_strtoul_l.isra.0+0x28>
 8017530:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017534:	2e19      	cmp	r6, #25
 8017536:	d801      	bhi.n	801753c <_strtoul_l.isra.0+0xa4>
 8017538:	3c37      	subs	r4, #55	; 0x37
 801753a:	e7e1      	b.n	8017500 <_strtoul_l.isra.0+0x68>
 801753c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017540:	2e19      	cmp	r6, #25
 8017542:	d804      	bhi.n	801754e <_strtoul_l.isra.0+0xb6>
 8017544:	3c57      	subs	r4, #87	; 0x57
 8017546:	e7db      	b.n	8017500 <_strtoul_l.isra.0+0x68>
 8017548:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801754c:	e7e4      	b.n	8017518 <_strtoul_l.isra.0+0x80>
 801754e:	2d00      	cmp	r5, #0
 8017550:	da07      	bge.n	8017562 <_strtoul_l.isra.0+0xca>
 8017552:	2322      	movs	r3, #34	; 0x22
 8017554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017558:	f8ce 3000 	str.w	r3, [lr]
 801755c:	b942      	cbnz	r2, 8017570 <_strtoul_l.isra.0+0xd8>
 801755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017562:	f1b8 0f00 	cmp.w	r8, #0
 8017566:	d000      	beq.n	801756a <_strtoul_l.isra.0+0xd2>
 8017568:	4240      	negs	r0, r0
 801756a:	2a00      	cmp	r2, #0
 801756c:	d0f7      	beq.n	801755e <_strtoul_l.isra.0+0xc6>
 801756e:	b10d      	cbz	r5, 8017574 <_strtoul_l.isra.0+0xdc>
 8017570:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8017574:	6011      	str	r1, [r2, #0]
 8017576:	e7f2      	b.n	801755e <_strtoul_l.isra.0+0xc6>
 8017578:	2430      	movs	r4, #48	; 0x30
 801757a:	2b00      	cmp	r3, #0
 801757c:	d1b1      	bne.n	80174e2 <_strtoul_l.isra.0+0x4a>
 801757e:	2308      	movs	r3, #8
 8017580:	e7af      	b.n	80174e2 <_strtoul_l.isra.0+0x4a>
 8017582:	2c30      	cmp	r4, #48	; 0x30
 8017584:	d0a2      	beq.n	80174cc <_strtoul_l.isra.0+0x34>
 8017586:	230a      	movs	r3, #10
 8017588:	e7ab      	b.n	80174e2 <_strtoul_l.isra.0+0x4a>
 801758a:	bf00      	nop
 801758c:	0801a0dd 	.word	0x0801a0dd

08017590 <strtoul>:
 8017590:	4613      	mov	r3, r2
 8017592:	460a      	mov	r2, r1
 8017594:	4601      	mov	r1, r0
 8017596:	4802      	ldr	r0, [pc, #8]	; (80175a0 <strtoul+0x10>)
 8017598:	6800      	ldr	r0, [r0, #0]
 801759a:	f7ff bf7d 	b.w	8017498 <_strtoul_l.isra.0>
 801759e:	bf00      	nop
 80175a0:	20000254 	.word	0x20000254

080175a4 <_vsniprintf_r>:
 80175a4:	b530      	push	{r4, r5, lr}
 80175a6:	1e14      	subs	r4, r2, #0
 80175a8:	4605      	mov	r5, r0
 80175aa:	b09b      	sub	sp, #108	; 0x6c
 80175ac:	4618      	mov	r0, r3
 80175ae:	da05      	bge.n	80175bc <_vsniprintf_r+0x18>
 80175b0:	238b      	movs	r3, #139	; 0x8b
 80175b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175b6:	602b      	str	r3, [r5, #0]
 80175b8:	b01b      	add	sp, #108	; 0x6c
 80175ba:	bd30      	pop	{r4, r5, pc}
 80175bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80175c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80175c4:	bf0c      	ite	eq
 80175c6:	4623      	moveq	r3, r4
 80175c8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80175cc:	9302      	str	r3, [sp, #8]
 80175ce:	9305      	str	r3, [sp, #20]
 80175d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175d4:	4602      	mov	r2, r0
 80175d6:	9100      	str	r1, [sp, #0]
 80175d8:	9104      	str	r1, [sp, #16]
 80175da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80175de:	4669      	mov	r1, sp
 80175e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80175e2:	4628      	mov	r0, r5
 80175e4:	f000 f9da 	bl	801799c <_svfiprintf_r>
 80175e8:	1c43      	adds	r3, r0, #1
 80175ea:	bfbc      	itt	lt
 80175ec:	238b      	movlt	r3, #139	; 0x8b
 80175ee:	602b      	strlt	r3, [r5, #0]
 80175f0:	2c00      	cmp	r4, #0
 80175f2:	d0e1      	beq.n	80175b8 <_vsniprintf_r+0x14>
 80175f4:	2200      	movs	r2, #0
 80175f6:	9b00      	ldr	r3, [sp, #0]
 80175f8:	701a      	strb	r2, [r3, #0]
 80175fa:	e7dd      	b.n	80175b8 <_vsniprintf_r+0x14>

080175fc <vsniprintf>:
 80175fc:	b507      	push	{r0, r1, r2, lr}
 80175fe:	9300      	str	r3, [sp, #0]
 8017600:	4613      	mov	r3, r2
 8017602:	460a      	mov	r2, r1
 8017604:	4601      	mov	r1, r0
 8017606:	4803      	ldr	r0, [pc, #12]	; (8017614 <vsniprintf+0x18>)
 8017608:	6800      	ldr	r0, [r0, #0]
 801760a:	f7ff ffcb 	bl	80175a4 <_vsniprintf_r>
 801760e:	b003      	add	sp, #12
 8017610:	f85d fb04 	ldr.w	pc, [sp], #4
 8017614:	20000254 	.word	0x20000254

08017618 <__assert_func>:
 8017618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801761a:	4614      	mov	r4, r2
 801761c:	461a      	mov	r2, r3
 801761e:	4b09      	ldr	r3, [pc, #36]	; (8017644 <__assert_func+0x2c>)
 8017620:	4605      	mov	r5, r0
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	68d8      	ldr	r0, [r3, #12]
 8017626:	b14c      	cbz	r4, 801763c <__assert_func+0x24>
 8017628:	4b07      	ldr	r3, [pc, #28]	; (8017648 <__assert_func+0x30>)
 801762a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801762e:	9100      	str	r1, [sp, #0]
 8017630:	462b      	mov	r3, r5
 8017632:	4906      	ldr	r1, [pc, #24]	; (801764c <__assert_func+0x34>)
 8017634:	f000 f8f0 	bl	8017818 <fiprintf>
 8017638:	f000 feb4 	bl	80183a4 <abort>
 801763c:	4b04      	ldr	r3, [pc, #16]	; (8017650 <__assert_func+0x38>)
 801763e:	461c      	mov	r4, r3
 8017640:	e7f3      	b.n	801762a <__assert_func+0x12>
 8017642:	bf00      	nop
 8017644:	20000254 	.word	0x20000254
 8017648:	0801a25a 	.word	0x0801a25a
 801764c:	0801a267 	.word	0x0801a267
 8017650:	0801a295 	.word	0x0801a295

08017654 <__env_lock>:
 8017654:	4801      	ldr	r0, [pc, #4]	; (801765c <__env_lock+0x8>)
 8017656:	f000 b911 	b.w	801787c <__retarget_lock_acquire_recursive>
 801765a:	bf00      	nop
 801765c:	2000d632 	.word	0x2000d632

08017660 <__env_unlock>:
 8017660:	4801      	ldr	r0, [pc, #4]	; (8017668 <__env_unlock+0x8>)
 8017662:	f000 b90c 	b.w	801787e <__retarget_lock_release_recursive>
 8017666:	bf00      	nop
 8017668:	2000d632 	.word	0x2000d632

0801766c <std>:
 801766c:	2300      	movs	r3, #0
 801766e:	b510      	push	{r4, lr}
 8017670:	4604      	mov	r4, r0
 8017672:	e9c0 3300 	strd	r3, r3, [r0]
 8017676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801767a:	6083      	str	r3, [r0, #8]
 801767c:	8181      	strh	r1, [r0, #12]
 801767e:	6643      	str	r3, [r0, #100]	; 0x64
 8017680:	81c2      	strh	r2, [r0, #14]
 8017682:	6183      	str	r3, [r0, #24]
 8017684:	4619      	mov	r1, r3
 8017686:	2208      	movs	r2, #8
 8017688:	305c      	adds	r0, #92	; 0x5c
 801768a:	f7ff fd0b 	bl	80170a4 <memset>
 801768e:	4b05      	ldr	r3, [pc, #20]	; (80176a4 <std+0x38>)
 8017690:	6224      	str	r4, [r4, #32]
 8017692:	6263      	str	r3, [r4, #36]	; 0x24
 8017694:	4b04      	ldr	r3, [pc, #16]	; (80176a8 <std+0x3c>)
 8017696:	62a3      	str	r3, [r4, #40]	; 0x28
 8017698:	4b04      	ldr	r3, [pc, #16]	; (80176ac <std+0x40>)
 801769a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801769c:	4b04      	ldr	r3, [pc, #16]	; (80176b0 <std+0x44>)
 801769e:	6323      	str	r3, [r4, #48]	; 0x30
 80176a0:	bd10      	pop	{r4, pc}
 80176a2:	bf00      	nop
 80176a4:	08018179 	.word	0x08018179
 80176a8:	0801819b 	.word	0x0801819b
 80176ac:	080181d3 	.word	0x080181d3
 80176b0:	080181f7 	.word	0x080181f7

080176b4 <_cleanup_r>:
 80176b4:	4901      	ldr	r1, [pc, #4]	; (80176bc <_cleanup_r+0x8>)
 80176b6:	f000 b8c1 	b.w	801783c <_fwalk_reent>
 80176ba:	bf00      	nop
 80176bc:	080184e1 	.word	0x080184e1

080176c0 <__sfmoreglue>:
 80176c0:	b570      	push	{r4, r5, r6, lr}
 80176c2:	2568      	movs	r5, #104	; 0x68
 80176c4:	1e4a      	subs	r2, r1, #1
 80176c6:	4355      	muls	r5, r2
 80176c8:	460e      	mov	r6, r1
 80176ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176ce:	f7ff fd4b 	bl	8017168 <_malloc_r>
 80176d2:	4604      	mov	r4, r0
 80176d4:	b140      	cbz	r0, 80176e8 <__sfmoreglue+0x28>
 80176d6:	2100      	movs	r1, #0
 80176d8:	e9c0 1600 	strd	r1, r6, [r0]
 80176dc:	300c      	adds	r0, #12
 80176de:	60a0      	str	r0, [r4, #8]
 80176e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176e4:	f7ff fcde 	bl	80170a4 <memset>
 80176e8:	4620      	mov	r0, r4
 80176ea:	bd70      	pop	{r4, r5, r6, pc}

080176ec <__sfp_lock_acquire>:
 80176ec:	4801      	ldr	r0, [pc, #4]	; (80176f4 <__sfp_lock_acquire+0x8>)
 80176ee:	f000 b8c5 	b.w	801787c <__retarget_lock_acquire_recursive>
 80176f2:	bf00      	nop
 80176f4:	2000d638 	.word	0x2000d638

080176f8 <__sfp_lock_release>:
 80176f8:	4801      	ldr	r0, [pc, #4]	; (8017700 <__sfp_lock_release+0x8>)
 80176fa:	f000 b8c0 	b.w	801787e <__retarget_lock_release_recursive>
 80176fe:	bf00      	nop
 8017700:	2000d638 	.word	0x2000d638

08017704 <__sinit_lock_acquire>:
 8017704:	4801      	ldr	r0, [pc, #4]	; (801770c <__sinit_lock_acquire+0x8>)
 8017706:	f000 b8b9 	b.w	801787c <__retarget_lock_acquire_recursive>
 801770a:	bf00      	nop
 801770c:	2000d633 	.word	0x2000d633

08017710 <__sinit_lock_release>:
 8017710:	4801      	ldr	r0, [pc, #4]	; (8017718 <__sinit_lock_release+0x8>)
 8017712:	f000 b8b4 	b.w	801787e <__retarget_lock_release_recursive>
 8017716:	bf00      	nop
 8017718:	2000d633 	.word	0x2000d633

0801771c <__sinit>:
 801771c:	b510      	push	{r4, lr}
 801771e:	4604      	mov	r4, r0
 8017720:	f7ff fff0 	bl	8017704 <__sinit_lock_acquire>
 8017724:	69a3      	ldr	r3, [r4, #24]
 8017726:	b11b      	cbz	r3, 8017730 <__sinit+0x14>
 8017728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801772c:	f7ff bff0 	b.w	8017710 <__sinit_lock_release>
 8017730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017734:	6523      	str	r3, [r4, #80]	; 0x50
 8017736:	4b13      	ldr	r3, [pc, #76]	; (8017784 <__sinit+0x68>)
 8017738:	4a13      	ldr	r2, [pc, #76]	; (8017788 <__sinit+0x6c>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	62a2      	str	r2, [r4, #40]	; 0x28
 801773e:	42a3      	cmp	r3, r4
 8017740:	bf08      	it	eq
 8017742:	2301      	moveq	r3, #1
 8017744:	4620      	mov	r0, r4
 8017746:	bf08      	it	eq
 8017748:	61a3      	streq	r3, [r4, #24]
 801774a:	f000 f81f 	bl	801778c <__sfp>
 801774e:	6060      	str	r0, [r4, #4]
 8017750:	4620      	mov	r0, r4
 8017752:	f000 f81b 	bl	801778c <__sfp>
 8017756:	60a0      	str	r0, [r4, #8]
 8017758:	4620      	mov	r0, r4
 801775a:	f000 f817 	bl	801778c <__sfp>
 801775e:	2200      	movs	r2, #0
 8017760:	2104      	movs	r1, #4
 8017762:	60e0      	str	r0, [r4, #12]
 8017764:	6860      	ldr	r0, [r4, #4]
 8017766:	f7ff ff81 	bl	801766c <std>
 801776a:	2201      	movs	r2, #1
 801776c:	2109      	movs	r1, #9
 801776e:	68a0      	ldr	r0, [r4, #8]
 8017770:	f7ff ff7c 	bl	801766c <std>
 8017774:	2202      	movs	r2, #2
 8017776:	2112      	movs	r1, #18
 8017778:	68e0      	ldr	r0, [r4, #12]
 801777a:	f7ff ff77 	bl	801766c <std>
 801777e:	2301      	movs	r3, #1
 8017780:	61a3      	str	r3, [r4, #24]
 8017782:	e7d1      	b.n	8017728 <__sinit+0xc>
 8017784:	0801a1e0 	.word	0x0801a1e0
 8017788:	080176b5 	.word	0x080176b5

0801778c <__sfp>:
 801778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801778e:	4607      	mov	r7, r0
 8017790:	f7ff ffac 	bl	80176ec <__sfp_lock_acquire>
 8017794:	4b1e      	ldr	r3, [pc, #120]	; (8017810 <__sfp+0x84>)
 8017796:	681e      	ldr	r6, [r3, #0]
 8017798:	69b3      	ldr	r3, [r6, #24]
 801779a:	b913      	cbnz	r3, 80177a2 <__sfp+0x16>
 801779c:	4630      	mov	r0, r6
 801779e:	f7ff ffbd 	bl	801771c <__sinit>
 80177a2:	3648      	adds	r6, #72	; 0x48
 80177a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80177a8:	3b01      	subs	r3, #1
 80177aa:	d503      	bpl.n	80177b4 <__sfp+0x28>
 80177ac:	6833      	ldr	r3, [r6, #0]
 80177ae:	b30b      	cbz	r3, 80177f4 <__sfp+0x68>
 80177b0:	6836      	ldr	r6, [r6, #0]
 80177b2:	e7f7      	b.n	80177a4 <__sfp+0x18>
 80177b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177b8:	b9d5      	cbnz	r5, 80177f0 <__sfp+0x64>
 80177ba:	4b16      	ldr	r3, [pc, #88]	; (8017814 <__sfp+0x88>)
 80177bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80177c0:	60e3      	str	r3, [r4, #12]
 80177c2:	6665      	str	r5, [r4, #100]	; 0x64
 80177c4:	f000 f859 	bl	801787a <__retarget_lock_init_recursive>
 80177c8:	f7ff ff96 	bl	80176f8 <__sfp_lock_release>
 80177cc:	2208      	movs	r2, #8
 80177ce:	4629      	mov	r1, r5
 80177d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80177d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80177d8:	6025      	str	r5, [r4, #0]
 80177da:	61a5      	str	r5, [r4, #24]
 80177dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177e0:	f7ff fc60 	bl	80170a4 <memset>
 80177e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177ec:	4620      	mov	r0, r4
 80177ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177f0:	3468      	adds	r4, #104	; 0x68
 80177f2:	e7d9      	b.n	80177a8 <__sfp+0x1c>
 80177f4:	2104      	movs	r1, #4
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7ff ff62 	bl	80176c0 <__sfmoreglue>
 80177fc:	4604      	mov	r4, r0
 80177fe:	6030      	str	r0, [r6, #0]
 8017800:	2800      	cmp	r0, #0
 8017802:	d1d5      	bne.n	80177b0 <__sfp+0x24>
 8017804:	f7ff ff78 	bl	80176f8 <__sfp_lock_release>
 8017808:	230c      	movs	r3, #12
 801780a:	603b      	str	r3, [r7, #0]
 801780c:	e7ee      	b.n	80177ec <__sfp+0x60>
 801780e:	bf00      	nop
 8017810:	0801a1e0 	.word	0x0801a1e0
 8017814:	ffff0001 	.word	0xffff0001

08017818 <fiprintf>:
 8017818:	b40e      	push	{r1, r2, r3}
 801781a:	b503      	push	{r0, r1, lr}
 801781c:	4601      	mov	r1, r0
 801781e:	ab03      	add	r3, sp, #12
 8017820:	4805      	ldr	r0, [pc, #20]	; (8017838 <fiprintf+0x20>)
 8017822:	f853 2b04 	ldr.w	r2, [r3], #4
 8017826:	6800      	ldr	r0, [r0, #0]
 8017828:	9301      	str	r3, [sp, #4]
 801782a:	f000 f9df 	bl	8017bec <_vfiprintf_r>
 801782e:	b002      	add	sp, #8
 8017830:	f85d eb04 	ldr.w	lr, [sp], #4
 8017834:	b003      	add	sp, #12
 8017836:	4770      	bx	lr
 8017838:	20000254 	.word	0x20000254

0801783c <_fwalk_reent>:
 801783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017840:	4606      	mov	r6, r0
 8017842:	4688      	mov	r8, r1
 8017844:	2700      	movs	r7, #0
 8017846:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801784a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801784e:	f1b9 0901 	subs.w	r9, r9, #1
 8017852:	d505      	bpl.n	8017860 <_fwalk_reent+0x24>
 8017854:	6824      	ldr	r4, [r4, #0]
 8017856:	2c00      	cmp	r4, #0
 8017858:	d1f7      	bne.n	801784a <_fwalk_reent+0xe>
 801785a:	4638      	mov	r0, r7
 801785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017860:	89ab      	ldrh	r3, [r5, #12]
 8017862:	2b01      	cmp	r3, #1
 8017864:	d907      	bls.n	8017876 <_fwalk_reent+0x3a>
 8017866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801786a:	3301      	adds	r3, #1
 801786c:	d003      	beq.n	8017876 <_fwalk_reent+0x3a>
 801786e:	4629      	mov	r1, r5
 8017870:	4630      	mov	r0, r6
 8017872:	47c0      	blx	r8
 8017874:	4307      	orrs	r7, r0
 8017876:	3568      	adds	r5, #104	; 0x68
 8017878:	e7e9      	b.n	801784e <_fwalk_reent+0x12>

0801787a <__retarget_lock_init_recursive>:
 801787a:	4770      	bx	lr

0801787c <__retarget_lock_acquire_recursive>:
 801787c:	4770      	bx	lr

0801787e <__retarget_lock_release_recursive>:
 801787e:	4770      	bx	lr

08017880 <__malloc_lock>:
 8017880:	4801      	ldr	r0, [pc, #4]	; (8017888 <__malloc_lock+0x8>)
 8017882:	f7ff bffb 	b.w	801787c <__retarget_lock_acquire_recursive>
 8017886:	bf00      	nop
 8017888:	2000d634 	.word	0x2000d634

0801788c <__malloc_unlock>:
 801788c:	4801      	ldr	r0, [pc, #4]	; (8017894 <__malloc_unlock+0x8>)
 801788e:	f7ff bff6 	b.w	801787e <__retarget_lock_release_recursive>
 8017892:	bf00      	nop
 8017894:	2000d634 	.word	0x2000d634

08017898 <_realloc_r>:
 8017898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801789a:	4607      	mov	r7, r0
 801789c:	4614      	mov	r4, r2
 801789e:	460e      	mov	r6, r1
 80178a0:	b921      	cbnz	r1, 80178ac <_realloc_r+0x14>
 80178a2:	4611      	mov	r1, r2
 80178a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80178a8:	f7ff bc5e 	b.w	8017168 <_malloc_r>
 80178ac:	b922      	cbnz	r2, 80178b8 <_realloc_r+0x20>
 80178ae:	f7ff fc0f 	bl	80170d0 <_free_r>
 80178b2:	4625      	mov	r5, r4
 80178b4:	4628      	mov	r0, r5
 80178b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178b8:	f000 fed2 	bl	8018660 <_malloc_usable_size_r>
 80178bc:	42a0      	cmp	r0, r4
 80178be:	d20f      	bcs.n	80178e0 <_realloc_r+0x48>
 80178c0:	4621      	mov	r1, r4
 80178c2:	4638      	mov	r0, r7
 80178c4:	f7ff fc50 	bl	8017168 <_malloc_r>
 80178c8:	4605      	mov	r5, r0
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d0f2      	beq.n	80178b4 <_realloc_r+0x1c>
 80178ce:	4631      	mov	r1, r6
 80178d0:	4622      	mov	r2, r4
 80178d2:	f7ff fbbf 	bl	8017054 <memcpy>
 80178d6:	4631      	mov	r1, r6
 80178d8:	4638      	mov	r0, r7
 80178da:	f7ff fbf9 	bl	80170d0 <_free_r>
 80178de:	e7e9      	b.n	80178b4 <_realloc_r+0x1c>
 80178e0:	4635      	mov	r5, r6
 80178e2:	e7e7      	b.n	80178b4 <_realloc_r+0x1c>

080178e4 <__ssputs_r>:
 80178e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178e8:	688e      	ldr	r6, [r1, #8]
 80178ea:	4682      	mov	sl, r0
 80178ec:	429e      	cmp	r6, r3
 80178ee:	460c      	mov	r4, r1
 80178f0:	4690      	mov	r8, r2
 80178f2:	461f      	mov	r7, r3
 80178f4:	d838      	bhi.n	8017968 <__ssputs_r+0x84>
 80178f6:	898a      	ldrh	r2, [r1, #12]
 80178f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80178fc:	d032      	beq.n	8017964 <__ssputs_r+0x80>
 80178fe:	6825      	ldr	r5, [r4, #0]
 8017900:	6909      	ldr	r1, [r1, #16]
 8017902:	3301      	adds	r3, #1
 8017904:	eba5 0901 	sub.w	r9, r5, r1
 8017908:	6965      	ldr	r5, [r4, #20]
 801790a:	444b      	add	r3, r9
 801790c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017914:	106d      	asrs	r5, r5, #1
 8017916:	429d      	cmp	r5, r3
 8017918:	bf38      	it	cc
 801791a:	461d      	movcc	r5, r3
 801791c:	0553      	lsls	r3, r2, #21
 801791e:	d531      	bpl.n	8017984 <__ssputs_r+0xa0>
 8017920:	4629      	mov	r1, r5
 8017922:	f7ff fc21 	bl	8017168 <_malloc_r>
 8017926:	4606      	mov	r6, r0
 8017928:	b950      	cbnz	r0, 8017940 <__ssputs_r+0x5c>
 801792a:	230c      	movs	r3, #12
 801792c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017930:	f8ca 3000 	str.w	r3, [sl]
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801793a:	81a3      	strh	r3, [r4, #12]
 801793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017940:	464a      	mov	r2, r9
 8017942:	6921      	ldr	r1, [r4, #16]
 8017944:	f7ff fb86 	bl	8017054 <memcpy>
 8017948:	89a3      	ldrh	r3, [r4, #12]
 801794a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801794e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017952:	81a3      	strh	r3, [r4, #12]
 8017954:	6126      	str	r6, [r4, #16]
 8017956:	444e      	add	r6, r9
 8017958:	6026      	str	r6, [r4, #0]
 801795a:	463e      	mov	r6, r7
 801795c:	6165      	str	r5, [r4, #20]
 801795e:	eba5 0509 	sub.w	r5, r5, r9
 8017962:	60a5      	str	r5, [r4, #8]
 8017964:	42be      	cmp	r6, r7
 8017966:	d900      	bls.n	801796a <__ssputs_r+0x86>
 8017968:	463e      	mov	r6, r7
 801796a:	4632      	mov	r2, r6
 801796c:	4641      	mov	r1, r8
 801796e:	6820      	ldr	r0, [r4, #0]
 8017970:	f7ff fb7e 	bl	8017070 <memmove>
 8017974:	68a3      	ldr	r3, [r4, #8]
 8017976:	6822      	ldr	r2, [r4, #0]
 8017978:	1b9b      	subs	r3, r3, r6
 801797a:	4432      	add	r2, r6
 801797c:	2000      	movs	r0, #0
 801797e:	60a3      	str	r3, [r4, #8]
 8017980:	6022      	str	r2, [r4, #0]
 8017982:	e7db      	b.n	801793c <__ssputs_r+0x58>
 8017984:	462a      	mov	r2, r5
 8017986:	f7ff ff87 	bl	8017898 <_realloc_r>
 801798a:	4606      	mov	r6, r0
 801798c:	2800      	cmp	r0, #0
 801798e:	d1e1      	bne.n	8017954 <__ssputs_r+0x70>
 8017990:	4650      	mov	r0, sl
 8017992:	6921      	ldr	r1, [r4, #16]
 8017994:	f7ff fb9c 	bl	80170d0 <_free_r>
 8017998:	e7c7      	b.n	801792a <__ssputs_r+0x46>
	...

0801799c <_svfiprintf_r>:
 801799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a0:	4698      	mov	r8, r3
 80179a2:	898b      	ldrh	r3, [r1, #12]
 80179a4:	4607      	mov	r7, r0
 80179a6:	061b      	lsls	r3, r3, #24
 80179a8:	460d      	mov	r5, r1
 80179aa:	4614      	mov	r4, r2
 80179ac:	b09d      	sub	sp, #116	; 0x74
 80179ae:	d50e      	bpl.n	80179ce <_svfiprintf_r+0x32>
 80179b0:	690b      	ldr	r3, [r1, #16]
 80179b2:	b963      	cbnz	r3, 80179ce <_svfiprintf_r+0x32>
 80179b4:	2140      	movs	r1, #64	; 0x40
 80179b6:	f7ff fbd7 	bl	8017168 <_malloc_r>
 80179ba:	6028      	str	r0, [r5, #0]
 80179bc:	6128      	str	r0, [r5, #16]
 80179be:	b920      	cbnz	r0, 80179ca <_svfiprintf_r+0x2e>
 80179c0:	230c      	movs	r3, #12
 80179c2:	603b      	str	r3, [r7, #0]
 80179c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179c8:	e0d1      	b.n	8017b6e <_svfiprintf_r+0x1d2>
 80179ca:	2340      	movs	r3, #64	; 0x40
 80179cc:	616b      	str	r3, [r5, #20]
 80179ce:	2300      	movs	r3, #0
 80179d0:	9309      	str	r3, [sp, #36]	; 0x24
 80179d2:	2320      	movs	r3, #32
 80179d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179d8:	2330      	movs	r3, #48	; 0x30
 80179da:	f04f 0901 	mov.w	r9, #1
 80179de:	f8cd 800c 	str.w	r8, [sp, #12]
 80179e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017b88 <_svfiprintf_r+0x1ec>
 80179e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179ea:	4623      	mov	r3, r4
 80179ec:	469a      	mov	sl, r3
 80179ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179f2:	b10a      	cbz	r2, 80179f8 <_svfiprintf_r+0x5c>
 80179f4:	2a25      	cmp	r2, #37	; 0x25
 80179f6:	d1f9      	bne.n	80179ec <_svfiprintf_r+0x50>
 80179f8:	ebba 0b04 	subs.w	fp, sl, r4
 80179fc:	d00b      	beq.n	8017a16 <_svfiprintf_r+0x7a>
 80179fe:	465b      	mov	r3, fp
 8017a00:	4622      	mov	r2, r4
 8017a02:	4629      	mov	r1, r5
 8017a04:	4638      	mov	r0, r7
 8017a06:	f7ff ff6d 	bl	80178e4 <__ssputs_r>
 8017a0a:	3001      	adds	r0, #1
 8017a0c:	f000 80aa 	beq.w	8017b64 <_svfiprintf_r+0x1c8>
 8017a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a12:	445a      	add	r2, fp
 8017a14:	9209      	str	r2, [sp, #36]	; 0x24
 8017a16:	f89a 3000 	ldrb.w	r3, [sl]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	f000 80a2 	beq.w	8017b64 <_svfiprintf_r+0x1c8>
 8017a20:	2300      	movs	r3, #0
 8017a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a2a:	f10a 0a01 	add.w	sl, sl, #1
 8017a2e:	9304      	str	r3, [sp, #16]
 8017a30:	9307      	str	r3, [sp, #28]
 8017a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a36:	931a      	str	r3, [sp, #104]	; 0x68
 8017a38:	4654      	mov	r4, sl
 8017a3a:	2205      	movs	r2, #5
 8017a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a40:	4851      	ldr	r0, [pc, #324]	; (8017b88 <_svfiprintf_r+0x1ec>)
 8017a42:	f000 fdff 	bl	8018644 <memchr>
 8017a46:	9a04      	ldr	r2, [sp, #16]
 8017a48:	b9d8      	cbnz	r0, 8017a82 <_svfiprintf_r+0xe6>
 8017a4a:	06d0      	lsls	r0, r2, #27
 8017a4c:	bf44      	itt	mi
 8017a4e:	2320      	movmi	r3, #32
 8017a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a54:	0711      	lsls	r1, r2, #28
 8017a56:	bf44      	itt	mi
 8017a58:	232b      	movmi	r3, #43	; 0x2b
 8017a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8017a62:	2b2a      	cmp	r3, #42	; 0x2a
 8017a64:	d015      	beq.n	8017a92 <_svfiprintf_r+0xf6>
 8017a66:	4654      	mov	r4, sl
 8017a68:	2000      	movs	r0, #0
 8017a6a:	f04f 0c0a 	mov.w	ip, #10
 8017a6e:	9a07      	ldr	r2, [sp, #28]
 8017a70:	4621      	mov	r1, r4
 8017a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a76:	3b30      	subs	r3, #48	; 0x30
 8017a78:	2b09      	cmp	r3, #9
 8017a7a:	d94e      	bls.n	8017b1a <_svfiprintf_r+0x17e>
 8017a7c:	b1b0      	cbz	r0, 8017aac <_svfiprintf_r+0x110>
 8017a7e:	9207      	str	r2, [sp, #28]
 8017a80:	e014      	b.n	8017aac <_svfiprintf_r+0x110>
 8017a82:	eba0 0308 	sub.w	r3, r0, r8
 8017a86:	fa09 f303 	lsl.w	r3, r9, r3
 8017a8a:	4313      	orrs	r3, r2
 8017a8c:	46a2      	mov	sl, r4
 8017a8e:	9304      	str	r3, [sp, #16]
 8017a90:	e7d2      	b.n	8017a38 <_svfiprintf_r+0x9c>
 8017a92:	9b03      	ldr	r3, [sp, #12]
 8017a94:	1d19      	adds	r1, r3, #4
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	9103      	str	r1, [sp, #12]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	bfbb      	ittet	lt
 8017a9e:	425b      	neglt	r3, r3
 8017aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8017aa4:	9307      	strge	r3, [sp, #28]
 8017aa6:	9307      	strlt	r3, [sp, #28]
 8017aa8:	bfb8      	it	lt
 8017aaa:	9204      	strlt	r2, [sp, #16]
 8017aac:	7823      	ldrb	r3, [r4, #0]
 8017aae:	2b2e      	cmp	r3, #46	; 0x2e
 8017ab0:	d10c      	bne.n	8017acc <_svfiprintf_r+0x130>
 8017ab2:	7863      	ldrb	r3, [r4, #1]
 8017ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8017ab6:	d135      	bne.n	8017b24 <_svfiprintf_r+0x188>
 8017ab8:	9b03      	ldr	r3, [sp, #12]
 8017aba:	3402      	adds	r4, #2
 8017abc:	1d1a      	adds	r2, r3, #4
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	9203      	str	r2, [sp, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	bfb8      	it	lt
 8017ac6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017aca:	9305      	str	r3, [sp, #20]
 8017acc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017b98 <_svfiprintf_r+0x1fc>
 8017ad0:	2203      	movs	r2, #3
 8017ad2:	4650      	mov	r0, sl
 8017ad4:	7821      	ldrb	r1, [r4, #0]
 8017ad6:	f000 fdb5 	bl	8018644 <memchr>
 8017ada:	b140      	cbz	r0, 8017aee <_svfiprintf_r+0x152>
 8017adc:	2340      	movs	r3, #64	; 0x40
 8017ade:	eba0 000a 	sub.w	r0, r0, sl
 8017ae2:	fa03 f000 	lsl.w	r0, r3, r0
 8017ae6:	9b04      	ldr	r3, [sp, #16]
 8017ae8:	3401      	adds	r4, #1
 8017aea:	4303      	orrs	r3, r0
 8017aec:	9304      	str	r3, [sp, #16]
 8017aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017af2:	2206      	movs	r2, #6
 8017af4:	4825      	ldr	r0, [pc, #148]	; (8017b8c <_svfiprintf_r+0x1f0>)
 8017af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017afa:	f000 fda3 	bl	8018644 <memchr>
 8017afe:	2800      	cmp	r0, #0
 8017b00:	d038      	beq.n	8017b74 <_svfiprintf_r+0x1d8>
 8017b02:	4b23      	ldr	r3, [pc, #140]	; (8017b90 <_svfiprintf_r+0x1f4>)
 8017b04:	bb1b      	cbnz	r3, 8017b4e <_svfiprintf_r+0x1b2>
 8017b06:	9b03      	ldr	r3, [sp, #12]
 8017b08:	3307      	adds	r3, #7
 8017b0a:	f023 0307 	bic.w	r3, r3, #7
 8017b0e:	3308      	adds	r3, #8
 8017b10:	9303      	str	r3, [sp, #12]
 8017b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b14:	4433      	add	r3, r6
 8017b16:	9309      	str	r3, [sp, #36]	; 0x24
 8017b18:	e767      	b.n	80179ea <_svfiprintf_r+0x4e>
 8017b1a:	460c      	mov	r4, r1
 8017b1c:	2001      	movs	r0, #1
 8017b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b22:	e7a5      	b.n	8017a70 <_svfiprintf_r+0xd4>
 8017b24:	2300      	movs	r3, #0
 8017b26:	f04f 0c0a 	mov.w	ip, #10
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	3401      	adds	r4, #1
 8017b2e:	9305      	str	r3, [sp, #20]
 8017b30:	4620      	mov	r0, r4
 8017b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b36:	3a30      	subs	r2, #48	; 0x30
 8017b38:	2a09      	cmp	r2, #9
 8017b3a:	d903      	bls.n	8017b44 <_svfiprintf_r+0x1a8>
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d0c5      	beq.n	8017acc <_svfiprintf_r+0x130>
 8017b40:	9105      	str	r1, [sp, #20]
 8017b42:	e7c3      	b.n	8017acc <_svfiprintf_r+0x130>
 8017b44:	4604      	mov	r4, r0
 8017b46:	2301      	movs	r3, #1
 8017b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b4c:	e7f0      	b.n	8017b30 <_svfiprintf_r+0x194>
 8017b4e:	ab03      	add	r3, sp, #12
 8017b50:	9300      	str	r3, [sp, #0]
 8017b52:	462a      	mov	r2, r5
 8017b54:	4638      	mov	r0, r7
 8017b56:	4b0f      	ldr	r3, [pc, #60]	; (8017b94 <_svfiprintf_r+0x1f8>)
 8017b58:	a904      	add	r1, sp, #16
 8017b5a:	f3af 8000 	nop.w
 8017b5e:	1c42      	adds	r2, r0, #1
 8017b60:	4606      	mov	r6, r0
 8017b62:	d1d6      	bne.n	8017b12 <_svfiprintf_r+0x176>
 8017b64:	89ab      	ldrh	r3, [r5, #12]
 8017b66:	065b      	lsls	r3, r3, #25
 8017b68:	f53f af2c 	bmi.w	80179c4 <_svfiprintf_r+0x28>
 8017b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b6e:	b01d      	add	sp, #116	; 0x74
 8017b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b74:	ab03      	add	r3, sp, #12
 8017b76:	9300      	str	r3, [sp, #0]
 8017b78:	462a      	mov	r2, r5
 8017b7a:	4638      	mov	r0, r7
 8017b7c:	4b05      	ldr	r3, [pc, #20]	; (8017b94 <_svfiprintf_r+0x1f8>)
 8017b7e:	a904      	add	r1, sp, #16
 8017b80:	f000 f9d4 	bl	8017f2c <_printf_i>
 8017b84:	e7eb      	b.n	8017b5e <_svfiprintf_r+0x1c2>
 8017b86:	bf00      	nop
 8017b88:	0801a2f8 	.word	0x0801a2f8
 8017b8c:	0801a302 	.word	0x0801a302
 8017b90:	00000000 	.word	0x00000000
 8017b94:	080178e5 	.word	0x080178e5
 8017b98:	0801a2fe 	.word	0x0801a2fe

08017b9c <__sfputc_r>:
 8017b9c:	6893      	ldr	r3, [r2, #8]
 8017b9e:	b410      	push	{r4}
 8017ba0:	3b01      	subs	r3, #1
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	6093      	str	r3, [r2, #8]
 8017ba6:	da07      	bge.n	8017bb8 <__sfputc_r+0x1c>
 8017ba8:	6994      	ldr	r4, [r2, #24]
 8017baa:	42a3      	cmp	r3, r4
 8017bac:	db01      	blt.n	8017bb2 <__sfputc_r+0x16>
 8017bae:	290a      	cmp	r1, #10
 8017bb0:	d102      	bne.n	8017bb8 <__sfputc_r+0x1c>
 8017bb2:	bc10      	pop	{r4}
 8017bb4:	f000 bb24 	b.w	8018200 <__swbuf_r>
 8017bb8:	6813      	ldr	r3, [r2, #0]
 8017bba:	1c58      	adds	r0, r3, #1
 8017bbc:	6010      	str	r0, [r2, #0]
 8017bbe:	7019      	strb	r1, [r3, #0]
 8017bc0:	4608      	mov	r0, r1
 8017bc2:	bc10      	pop	{r4}
 8017bc4:	4770      	bx	lr

08017bc6 <__sfputs_r>:
 8017bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bc8:	4606      	mov	r6, r0
 8017bca:	460f      	mov	r7, r1
 8017bcc:	4614      	mov	r4, r2
 8017bce:	18d5      	adds	r5, r2, r3
 8017bd0:	42ac      	cmp	r4, r5
 8017bd2:	d101      	bne.n	8017bd8 <__sfputs_r+0x12>
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	e007      	b.n	8017be8 <__sfputs_r+0x22>
 8017bd8:	463a      	mov	r2, r7
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be0:	f7ff ffdc 	bl	8017b9c <__sfputc_r>
 8017be4:	1c43      	adds	r3, r0, #1
 8017be6:	d1f3      	bne.n	8017bd0 <__sfputs_r+0xa>
 8017be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017bec <_vfiprintf_r>:
 8017bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf0:	460d      	mov	r5, r1
 8017bf2:	4614      	mov	r4, r2
 8017bf4:	4698      	mov	r8, r3
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	b09d      	sub	sp, #116	; 0x74
 8017bfa:	b118      	cbz	r0, 8017c04 <_vfiprintf_r+0x18>
 8017bfc:	6983      	ldr	r3, [r0, #24]
 8017bfe:	b90b      	cbnz	r3, 8017c04 <_vfiprintf_r+0x18>
 8017c00:	f7ff fd8c 	bl	801771c <__sinit>
 8017c04:	4b89      	ldr	r3, [pc, #548]	; (8017e2c <_vfiprintf_r+0x240>)
 8017c06:	429d      	cmp	r5, r3
 8017c08:	d11b      	bne.n	8017c42 <_vfiprintf_r+0x56>
 8017c0a:	6875      	ldr	r5, [r6, #4]
 8017c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c0e:	07d9      	lsls	r1, r3, #31
 8017c10:	d405      	bmi.n	8017c1e <_vfiprintf_r+0x32>
 8017c12:	89ab      	ldrh	r3, [r5, #12]
 8017c14:	059a      	lsls	r2, r3, #22
 8017c16:	d402      	bmi.n	8017c1e <_vfiprintf_r+0x32>
 8017c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c1a:	f7ff fe2f 	bl	801787c <__retarget_lock_acquire_recursive>
 8017c1e:	89ab      	ldrh	r3, [r5, #12]
 8017c20:	071b      	lsls	r3, r3, #28
 8017c22:	d501      	bpl.n	8017c28 <_vfiprintf_r+0x3c>
 8017c24:	692b      	ldr	r3, [r5, #16]
 8017c26:	b9eb      	cbnz	r3, 8017c64 <_vfiprintf_r+0x78>
 8017c28:	4629      	mov	r1, r5
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	f000 fb4c 	bl	80182c8 <__swsetup_r>
 8017c30:	b1c0      	cbz	r0, 8017c64 <_vfiprintf_r+0x78>
 8017c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c34:	07dc      	lsls	r4, r3, #31
 8017c36:	d50e      	bpl.n	8017c56 <_vfiprintf_r+0x6a>
 8017c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c3c:	b01d      	add	sp, #116	; 0x74
 8017c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c42:	4b7b      	ldr	r3, [pc, #492]	; (8017e30 <_vfiprintf_r+0x244>)
 8017c44:	429d      	cmp	r5, r3
 8017c46:	d101      	bne.n	8017c4c <_vfiprintf_r+0x60>
 8017c48:	68b5      	ldr	r5, [r6, #8]
 8017c4a:	e7df      	b.n	8017c0c <_vfiprintf_r+0x20>
 8017c4c:	4b79      	ldr	r3, [pc, #484]	; (8017e34 <_vfiprintf_r+0x248>)
 8017c4e:	429d      	cmp	r5, r3
 8017c50:	bf08      	it	eq
 8017c52:	68f5      	ldreq	r5, [r6, #12]
 8017c54:	e7da      	b.n	8017c0c <_vfiprintf_r+0x20>
 8017c56:	89ab      	ldrh	r3, [r5, #12]
 8017c58:	0598      	lsls	r0, r3, #22
 8017c5a:	d4ed      	bmi.n	8017c38 <_vfiprintf_r+0x4c>
 8017c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c5e:	f7ff fe0e 	bl	801787e <__retarget_lock_release_recursive>
 8017c62:	e7e9      	b.n	8017c38 <_vfiprintf_r+0x4c>
 8017c64:	2300      	movs	r3, #0
 8017c66:	9309      	str	r3, [sp, #36]	; 0x24
 8017c68:	2320      	movs	r3, #32
 8017c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c6e:	2330      	movs	r3, #48	; 0x30
 8017c70:	f04f 0901 	mov.w	r9, #1
 8017c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8017e38 <_vfiprintf_r+0x24c>
 8017c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c80:	4623      	mov	r3, r4
 8017c82:	469a      	mov	sl, r3
 8017c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c88:	b10a      	cbz	r2, 8017c8e <_vfiprintf_r+0xa2>
 8017c8a:	2a25      	cmp	r2, #37	; 0x25
 8017c8c:	d1f9      	bne.n	8017c82 <_vfiprintf_r+0x96>
 8017c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8017c92:	d00b      	beq.n	8017cac <_vfiprintf_r+0xc0>
 8017c94:	465b      	mov	r3, fp
 8017c96:	4622      	mov	r2, r4
 8017c98:	4629      	mov	r1, r5
 8017c9a:	4630      	mov	r0, r6
 8017c9c:	f7ff ff93 	bl	8017bc6 <__sfputs_r>
 8017ca0:	3001      	adds	r0, #1
 8017ca2:	f000 80aa 	beq.w	8017dfa <_vfiprintf_r+0x20e>
 8017ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ca8:	445a      	add	r2, fp
 8017caa:	9209      	str	r2, [sp, #36]	; 0x24
 8017cac:	f89a 3000 	ldrb.w	r3, [sl]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	f000 80a2 	beq.w	8017dfa <_vfiprintf_r+0x20e>
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cc0:	f10a 0a01 	add.w	sl, sl, #1
 8017cc4:	9304      	str	r3, [sp, #16]
 8017cc6:	9307      	str	r3, [sp, #28]
 8017cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8017cce:	4654      	mov	r4, sl
 8017cd0:	2205      	movs	r2, #5
 8017cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cd6:	4858      	ldr	r0, [pc, #352]	; (8017e38 <_vfiprintf_r+0x24c>)
 8017cd8:	f000 fcb4 	bl	8018644 <memchr>
 8017cdc:	9a04      	ldr	r2, [sp, #16]
 8017cde:	b9d8      	cbnz	r0, 8017d18 <_vfiprintf_r+0x12c>
 8017ce0:	06d1      	lsls	r1, r2, #27
 8017ce2:	bf44      	itt	mi
 8017ce4:	2320      	movmi	r3, #32
 8017ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cea:	0713      	lsls	r3, r2, #28
 8017cec:	bf44      	itt	mi
 8017cee:	232b      	movmi	r3, #43	; 0x2b
 8017cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8017cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8017cfa:	d015      	beq.n	8017d28 <_vfiprintf_r+0x13c>
 8017cfc:	4654      	mov	r4, sl
 8017cfe:	2000      	movs	r0, #0
 8017d00:	f04f 0c0a 	mov.w	ip, #10
 8017d04:	9a07      	ldr	r2, [sp, #28]
 8017d06:	4621      	mov	r1, r4
 8017d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d0c:	3b30      	subs	r3, #48	; 0x30
 8017d0e:	2b09      	cmp	r3, #9
 8017d10:	d94e      	bls.n	8017db0 <_vfiprintf_r+0x1c4>
 8017d12:	b1b0      	cbz	r0, 8017d42 <_vfiprintf_r+0x156>
 8017d14:	9207      	str	r2, [sp, #28]
 8017d16:	e014      	b.n	8017d42 <_vfiprintf_r+0x156>
 8017d18:	eba0 0308 	sub.w	r3, r0, r8
 8017d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d20:	4313      	orrs	r3, r2
 8017d22:	46a2      	mov	sl, r4
 8017d24:	9304      	str	r3, [sp, #16]
 8017d26:	e7d2      	b.n	8017cce <_vfiprintf_r+0xe2>
 8017d28:	9b03      	ldr	r3, [sp, #12]
 8017d2a:	1d19      	adds	r1, r3, #4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	9103      	str	r1, [sp, #12]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	bfbb      	ittet	lt
 8017d34:	425b      	neglt	r3, r3
 8017d36:	f042 0202 	orrlt.w	r2, r2, #2
 8017d3a:	9307      	strge	r3, [sp, #28]
 8017d3c:	9307      	strlt	r3, [sp, #28]
 8017d3e:	bfb8      	it	lt
 8017d40:	9204      	strlt	r2, [sp, #16]
 8017d42:	7823      	ldrb	r3, [r4, #0]
 8017d44:	2b2e      	cmp	r3, #46	; 0x2e
 8017d46:	d10c      	bne.n	8017d62 <_vfiprintf_r+0x176>
 8017d48:	7863      	ldrb	r3, [r4, #1]
 8017d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d4c:	d135      	bne.n	8017dba <_vfiprintf_r+0x1ce>
 8017d4e:	9b03      	ldr	r3, [sp, #12]
 8017d50:	3402      	adds	r4, #2
 8017d52:	1d1a      	adds	r2, r3, #4
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	9203      	str	r2, [sp, #12]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	bfb8      	it	lt
 8017d5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017d60:	9305      	str	r3, [sp, #20]
 8017d62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e48 <_vfiprintf_r+0x25c>
 8017d66:	2203      	movs	r2, #3
 8017d68:	4650      	mov	r0, sl
 8017d6a:	7821      	ldrb	r1, [r4, #0]
 8017d6c:	f000 fc6a 	bl	8018644 <memchr>
 8017d70:	b140      	cbz	r0, 8017d84 <_vfiprintf_r+0x198>
 8017d72:	2340      	movs	r3, #64	; 0x40
 8017d74:	eba0 000a 	sub.w	r0, r0, sl
 8017d78:	fa03 f000 	lsl.w	r0, r3, r0
 8017d7c:	9b04      	ldr	r3, [sp, #16]
 8017d7e:	3401      	adds	r4, #1
 8017d80:	4303      	orrs	r3, r0
 8017d82:	9304      	str	r3, [sp, #16]
 8017d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d88:	2206      	movs	r2, #6
 8017d8a:	482c      	ldr	r0, [pc, #176]	; (8017e3c <_vfiprintf_r+0x250>)
 8017d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d90:	f000 fc58 	bl	8018644 <memchr>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d03f      	beq.n	8017e18 <_vfiprintf_r+0x22c>
 8017d98:	4b29      	ldr	r3, [pc, #164]	; (8017e40 <_vfiprintf_r+0x254>)
 8017d9a:	bb1b      	cbnz	r3, 8017de4 <_vfiprintf_r+0x1f8>
 8017d9c:	9b03      	ldr	r3, [sp, #12]
 8017d9e:	3307      	adds	r3, #7
 8017da0:	f023 0307 	bic.w	r3, r3, #7
 8017da4:	3308      	adds	r3, #8
 8017da6:	9303      	str	r3, [sp, #12]
 8017da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017daa:	443b      	add	r3, r7
 8017dac:	9309      	str	r3, [sp, #36]	; 0x24
 8017dae:	e767      	b.n	8017c80 <_vfiprintf_r+0x94>
 8017db0:	460c      	mov	r4, r1
 8017db2:	2001      	movs	r0, #1
 8017db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017db8:	e7a5      	b.n	8017d06 <_vfiprintf_r+0x11a>
 8017dba:	2300      	movs	r3, #0
 8017dbc:	f04f 0c0a 	mov.w	ip, #10
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	3401      	adds	r4, #1
 8017dc4:	9305      	str	r3, [sp, #20]
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dcc:	3a30      	subs	r2, #48	; 0x30
 8017dce:	2a09      	cmp	r2, #9
 8017dd0:	d903      	bls.n	8017dda <_vfiprintf_r+0x1ee>
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d0c5      	beq.n	8017d62 <_vfiprintf_r+0x176>
 8017dd6:	9105      	str	r1, [sp, #20]
 8017dd8:	e7c3      	b.n	8017d62 <_vfiprintf_r+0x176>
 8017dda:	4604      	mov	r4, r0
 8017ddc:	2301      	movs	r3, #1
 8017dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8017de2:	e7f0      	b.n	8017dc6 <_vfiprintf_r+0x1da>
 8017de4:	ab03      	add	r3, sp, #12
 8017de6:	9300      	str	r3, [sp, #0]
 8017de8:	462a      	mov	r2, r5
 8017dea:	4630      	mov	r0, r6
 8017dec:	4b15      	ldr	r3, [pc, #84]	; (8017e44 <_vfiprintf_r+0x258>)
 8017dee:	a904      	add	r1, sp, #16
 8017df0:	f3af 8000 	nop.w
 8017df4:	4607      	mov	r7, r0
 8017df6:	1c78      	adds	r0, r7, #1
 8017df8:	d1d6      	bne.n	8017da8 <_vfiprintf_r+0x1bc>
 8017dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dfc:	07d9      	lsls	r1, r3, #31
 8017dfe:	d405      	bmi.n	8017e0c <_vfiprintf_r+0x220>
 8017e00:	89ab      	ldrh	r3, [r5, #12]
 8017e02:	059a      	lsls	r2, r3, #22
 8017e04:	d402      	bmi.n	8017e0c <_vfiprintf_r+0x220>
 8017e06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e08:	f7ff fd39 	bl	801787e <__retarget_lock_release_recursive>
 8017e0c:	89ab      	ldrh	r3, [r5, #12]
 8017e0e:	065b      	lsls	r3, r3, #25
 8017e10:	f53f af12 	bmi.w	8017c38 <_vfiprintf_r+0x4c>
 8017e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e16:	e711      	b.n	8017c3c <_vfiprintf_r+0x50>
 8017e18:	ab03      	add	r3, sp, #12
 8017e1a:	9300      	str	r3, [sp, #0]
 8017e1c:	462a      	mov	r2, r5
 8017e1e:	4630      	mov	r0, r6
 8017e20:	4b08      	ldr	r3, [pc, #32]	; (8017e44 <_vfiprintf_r+0x258>)
 8017e22:	a904      	add	r1, sp, #16
 8017e24:	f000 f882 	bl	8017f2c <_printf_i>
 8017e28:	e7e4      	b.n	8017df4 <_vfiprintf_r+0x208>
 8017e2a:	bf00      	nop
 8017e2c:	0801a2b8 	.word	0x0801a2b8
 8017e30:	0801a2d8 	.word	0x0801a2d8
 8017e34:	0801a298 	.word	0x0801a298
 8017e38:	0801a2f8 	.word	0x0801a2f8
 8017e3c:	0801a302 	.word	0x0801a302
 8017e40:	00000000 	.word	0x00000000
 8017e44:	08017bc7 	.word	0x08017bc7
 8017e48:	0801a2fe 	.word	0x0801a2fe

08017e4c <_printf_common>:
 8017e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e50:	4616      	mov	r6, r2
 8017e52:	4699      	mov	r9, r3
 8017e54:	688a      	ldr	r2, [r1, #8]
 8017e56:	690b      	ldr	r3, [r1, #16]
 8017e58:	4607      	mov	r7, r0
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	bfb8      	it	lt
 8017e5e:	4613      	movlt	r3, r2
 8017e60:	6033      	str	r3, [r6, #0]
 8017e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e66:	460c      	mov	r4, r1
 8017e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e6c:	b10a      	cbz	r2, 8017e72 <_printf_common+0x26>
 8017e6e:	3301      	adds	r3, #1
 8017e70:	6033      	str	r3, [r6, #0]
 8017e72:	6823      	ldr	r3, [r4, #0]
 8017e74:	0699      	lsls	r1, r3, #26
 8017e76:	bf42      	ittt	mi
 8017e78:	6833      	ldrmi	r3, [r6, #0]
 8017e7a:	3302      	addmi	r3, #2
 8017e7c:	6033      	strmi	r3, [r6, #0]
 8017e7e:	6825      	ldr	r5, [r4, #0]
 8017e80:	f015 0506 	ands.w	r5, r5, #6
 8017e84:	d106      	bne.n	8017e94 <_printf_common+0x48>
 8017e86:	f104 0a19 	add.w	sl, r4, #25
 8017e8a:	68e3      	ldr	r3, [r4, #12]
 8017e8c:	6832      	ldr	r2, [r6, #0]
 8017e8e:	1a9b      	subs	r3, r3, r2
 8017e90:	42ab      	cmp	r3, r5
 8017e92:	dc28      	bgt.n	8017ee6 <_printf_common+0x9a>
 8017e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017e98:	1e13      	subs	r3, r2, #0
 8017e9a:	6822      	ldr	r2, [r4, #0]
 8017e9c:	bf18      	it	ne
 8017e9e:	2301      	movne	r3, #1
 8017ea0:	0692      	lsls	r2, r2, #26
 8017ea2:	d42d      	bmi.n	8017f00 <_printf_common+0xb4>
 8017ea4:	4649      	mov	r1, r9
 8017ea6:	4638      	mov	r0, r7
 8017ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017eac:	47c0      	blx	r8
 8017eae:	3001      	adds	r0, #1
 8017eb0:	d020      	beq.n	8017ef4 <_printf_common+0xa8>
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	68e5      	ldr	r5, [r4, #12]
 8017eb6:	f003 0306 	and.w	r3, r3, #6
 8017eba:	2b04      	cmp	r3, #4
 8017ebc:	bf18      	it	ne
 8017ebe:	2500      	movne	r5, #0
 8017ec0:	6832      	ldr	r2, [r6, #0]
 8017ec2:	f04f 0600 	mov.w	r6, #0
 8017ec6:	68a3      	ldr	r3, [r4, #8]
 8017ec8:	bf08      	it	eq
 8017eca:	1aad      	subeq	r5, r5, r2
 8017ecc:	6922      	ldr	r2, [r4, #16]
 8017ece:	bf08      	it	eq
 8017ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ed4:	4293      	cmp	r3, r2
 8017ed6:	bfc4      	itt	gt
 8017ed8:	1a9b      	subgt	r3, r3, r2
 8017eda:	18ed      	addgt	r5, r5, r3
 8017edc:	341a      	adds	r4, #26
 8017ede:	42b5      	cmp	r5, r6
 8017ee0:	d11a      	bne.n	8017f18 <_printf_common+0xcc>
 8017ee2:	2000      	movs	r0, #0
 8017ee4:	e008      	b.n	8017ef8 <_printf_common+0xac>
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	4652      	mov	r2, sl
 8017eea:	4649      	mov	r1, r9
 8017eec:	4638      	mov	r0, r7
 8017eee:	47c0      	blx	r8
 8017ef0:	3001      	adds	r0, #1
 8017ef2:	d103      	bne.n	8017efc <_printf_common+0xb0>
 8017ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017efc:	3501      	adds	r5, #1
 8017efe:	e7c4      	b.n	8017e8a <_printf_common+0x3e>
 8017f00:	2030      	movs	r0, #48	; 0x30
 8017f02:	18e1      	adds	r1, r4, r3
 8017f04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f08:	1c5a      	adds	r2, r3, #1
 8017f0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f0e:	4422      	add	r2, r4
 8017f10:	3302      	adds	r3, #2
 8017f12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f16:	e7c5      	b.n	8017ea4 <_printf_common+0x58>
 8017f18:	2301      	movs	r3, #1
 8017f1a:	4622      	mov	r2, r4
 8017f1c:	4649      	mov	r1, r9
 8017f1e:	4638      	mov	r0, r7
 8017f20:	47c0      	blx	r8
 8017f22:	3001      	adds	r0, #1
 8017f24:	d0e6      	beq.n	8017ef4 <_printf_common+0xa8>
 8017f26:	3601      	adds	r6, #1
 8017f28:	e7d9      	b.n	8017ede <_printf_common+0x92>
	...

08017f2c <_printf_i>:
 8017f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f30:	460c      	mov	r4, r1
 8017f32:	7e27      	ldrb	r7, [r4, #24]
 8017f34:	4691      	mov	r9, r2
 8017f36:	2f78      	cmp	r7, #120	; 0x78
 8017f38:	4680      	mov	r8, r0
 8017f3a:	469a      	mov	sl, r3
 8017f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f42:	d807      	bhi.n	8017f54 <_printf_i+0x28>
 8017f44:	2f62      	cmp	r7, #98	; 0x62
 8017f46:	d80a      	bhi.n	8017f5e <_printf_i+0x32>
 8017f48:	2f00      	cmp	r7, #0
 8017f4a:	f000 80d9 	beq.w	8018100 <_printf_i+0x1d4>
 8017f4e:	2f58      	cmp	r7, #88	; 0x58
 8017f50:	f000 80a4 	beq.w	801809c <_printf_i+0x170>
 8017f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f5c:	e03a      	b.n	8017fd4 <_printf_i+0xa8>
 8017f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f62:	2b15      	cmp	r3, #21
 8017f64:	d8f6      	bhi.n	8017f54 <_printf_i+0x28>
 8017f66:	a001      	add	r0, pc, #4	; (adr r0, 8017f6c <_printf_i+0x40>)
 8017f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017f6c:	08017fc5 	.word	0x08017fc5
 8017f70:	08017fd9 	.word	0x08017fd9
 8017f74:	08017f55 	.word	0x08017f55
 8017f78:	08017f55 	.word	0x08017f55
 8017f7c:	08017f55 	.word	0x08017f55
 8017f80:	08017f55 	.word	0x08017f55
 8017f84:	08017fd9 	.word	0x08017fd9
 8017f88:	08017f55 	.word	0x08017f55
 8017f8c:	08017f55 	.word	0x08017f55
 8017f90:	08017f55 	.word	0x08017f55
 8017f94:	08017f55 	.word	0x08017f55
 8017f98:	080180e7 	.word	0x080180e7
 8017f9c:	08018009 	.word	0x08018009
 8017fa0:	080180c9 	.word	0x080180c9
 8017fa4:	08017f55 	.word	0x08017f55
 8017fa8:	08017f55 	.word	0x08017f55
 8017fac:	08018109 	.word	0x08018109
 8017fb0:	08017f55 	.word	0x08017f55
 8017fb4:	08018009 	.word	0x08018009
 8017fb8:	08017f55 	.word	0x08017f55
 8017fbc:	08017f55 	.word	0x08017f55
 8017fc0:	080180d1 	.word	0x080180d1
 8017fc4:	680b      	ldr	r3, [r1, #0]
 8017fc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017fca:	1d1a      	adds	r2, r3, #4
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	600a      	str	r2, [r1, #0]
 8017fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	e0a4      	b.n	8018122 <_printf_i+0x1f6>
 8017fd8:	6825      	ldr	r5, [r4, #0]
 8017fda:	6808      	ldr	r0, [r1, #0]
 8017fdc:	062e      	lsls	r6, r5, #24
 8017fde:	f100 0304 	add.w	r3, r0, #4
 8017fe2:	d50a      	bpl.n	8017ffa <_printf_i+0xce>
 8017fe4:	6805      	ldr	r5, [r0, #0]
 8017fe6:	600b      	str	r3, [r1, #0]
 8017fe8:	2d00      	cmp	r5, #0
 8017fea:	da03      	bge.n	8017ff4 <_printf_i+0xc8>
 8017fec:	232d      	movs	r3, #45	; 0x2d
 8017fee:	426d      	negs	r5, r5
 8017ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ff4:	230a      	movs	r3, #10
 8017ff6:	485e      	ldr	r0, [pc, #376]	; (8018170 <_printf_i+0x244>)
 8017ff8:	e019      	b.n	801802e <_printf_i+0x102>
 8017ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017ffe:	6805      	ldr	r5, [r0, #0]
 8018000:	600b      	str	r3, [r1, #0]
 8018002:	bf18      	it	ne
 8018004:	b22d      	sxthne	r5, r5
 8018006:	e7ef      	b.n	8017fe8 <_printf_i+0xbc>
 8018008:	680b      	ldr	r3, [r1, #0]
 801800a:	6825      	ldr	r5, [r4, #0]
 801800c:	1d18      	adds	r0, r3, #4
 801800e:	6008      	str	r0, [r1, #0]
 8018010:	0628      	lsls	r0, r5, #24
 8018012:	d501      	bpl.n	8018018 <_printf_i+0xec>
 8018014:	681d      	ldr	r5, [r3, #0]
 8018016:	e002      	b.n	801801e <_printf_i+0xf2>
 8018018:	0669      	lsls	r1, r5, #25
 801801a:	d5fb      	bpl.n	8018014 <_printf_i+0xe8>
 801801c:	881d      	ldrh	r5, [r3, #0]
 801801e:	2f6f      	cmp	r7, #111	; 0x6f
 8018020:	bf0c      	ite	eq
 8018022:	2308      	moveq	r3, #8
 8018024:	230a      	movne	r3, #10
 8018026:	4852      	ldr	r0, [pc, #328]	; (8018170 <_printf_i+0x244>)
 8018028:	2100      	movs	r1, #0
 801802a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801802e:	6866      	ldr	r6, [r4, #4]
 8018030:	2e00      	cmp	r6, #0
 8018032:	bfa8      	it	ge
 8018034:	6821      	ldrge	r1, [r4, #0]
 8018036:	60a6      	str	r6, [r4, #8]
 8018038:	bfa4      	itt	ge
 801803a:	f021 0104 	bicge.w	r1, r1, #4
 801803e:	6021      	strge	r1, [r4, #0]
 8018040:	b90d      	cbnz	r5, 8018046 <_printf_i+0x11a>
 8018042:	2e00      	cmp	r6, #0
 8018044:	d04d      	beq.n	80180e2 <_printf_i+0x1b6>
 8018046:	4616      	mov	r6, r2
 8018048:	fbb5 f1f3 	udiv	r1, r5, r3
 801804c:	fb03 5711 	mls	r7, r3, r1, r5
 8018050:	5dc7      	ldrb	r7, [r0, r7]
 8018052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018056:	462f      	mov	r7, r5
 8018058:	42bb      	cmp	r3, r7
 801805a:	460d      	mov	r5, r1
 801805c:	d9f4      	bls.n	8018048 <_printf_i+0x11c>
 801805e:	2b08      	cmp	r3, #8
 8018060:	d10b      	bne.n	801807a <_printf_i+0x14e>
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	07df      	lsls	r7, r3, #31
 8018066:	d508      	bpl.n	801807a <_printf_i+0x14e>
 8018068:	6923      	ldr	r3, [r4, #16]
 801806a:	6861      	ldr	r1, [r4, #4]
 801806c:	4299      	cmp	r1, r3
 801806e:	bfde      	ittt	le
 8018070:	2330      	movle	r3, #48	; 0x30
 8018072:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018076:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801807a:	1b92      	subs	r2, r2, r6
 801807c:	6122      	str	r2, [r4, #16]
 801807e:	464b      	mov	r3, r9
 8018080:	4621      	mov	r1, r4
 8018082:	4640      	mov	r0, r8
 8018084:	f8cd a000 	str.w	sl, [sp]
 8018088:	aa03      	add	r2, sp, #12
 801808a:	f7ff fedf 	bl	8017e4c <_printf_common>
 801808e:	3001      	adds	r0, #1
 8018090:	d14c      	bne.n	801812c <_printf_i+0x200>
 8018092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018096:	b004      	add	sp, #16
 8018098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801809c:	4834      	ldr	r0, [pc, #208]	; (8018170 <_printf_i+0x244>)
 801809e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180a2:	680e      	ldr	r6, [r1, #0]
 80180a4:	6823      	ldr	r3, [r4, #0]
 80180a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80180aa:	061f      	lsls	r7, r3, #24
 80180ac:	600e      	str	r6, [r1, #0]
 80180ae:	d514      	bpl.n	80180da <_printf_i+0x1ae>
 80180b0:	07d9      	lsls	r1, r3, #31
 80180b2:	bf44      	itt	mi
 80180b4:	f043 0320 	orrmi.w	r3, r3, #32
 80180b8:	6023      	strmi	r3, [r4, #0]
 80180ba:	b91d      	cbnz	r5, 80180c4 <_printf_i+0x198>
 80180bc:	6823      	ldr	r3, [r4, #0]
 80180be:	f023 0320 	bic.w	r3, r3, #32
 80180c2:	6023      	str	r3, [r4, #0]
 80180c4:	2310      	movs	r3, #16
 80180c6:	e7af      	b.n	8018028 <_printf_i+0xfc>
 80180c8:	6823      	ldr	r3, [r4, #0]
 80180ca:	f043 0320 	orr.w	r3, r3, #32
 80180ce:	6023      	str	r3, [r4, #0]
 80180d0:	2378      	movs	r3, #120	; 0x78
 80180d2:	4828      	ldr	r0, [pc, #160]	; (8018174 <_printf_i+0x248>)
 80180d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80180d8:	e7e3      	b.n	80180a2 <_printf_i+0x176>
 80180da:	065e      	lsls	r6, r3, #25
 80180dc:	bf48      	it	mi
 80180de:	b2ad      	uxthmi	r5, r5
 80180e0:	e7e6      	b.n	80180b0 <_printf_i+0x184>
 80180e2:	4616      	mov	r6, r2
 80180e4:	e7bb      	b.n	801805e <_printf_i+0x132>
 80180e6:	680b      	ldr	r3, [r1, #0]
 80180e8:	6826      	ldr	r6, [r4, #0]
 80180ea:	1d1d      	adds	r5, r3, #4
 80180ec:	6960      	ldr	r0, [r4, #20]
 80180ee:	600d      	str	r5, [r1, #0]
 80180f0:	0635      	lsls	r5, r6, #24
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	d501      	bpl.n	80180fa <_printf_i+0x1ce>
 80180f6:	6018      	str	r0, [r3, #0]
 80180f8:	e002      	b.n	8018100 <_printf_i+0x1d4>
 80180fa:	0671      	lsls	r1, r6, #25
 80180fc:	d5fb      	bpl.n	80180f6 <_printf_i+0x1ca>
 80180fe:	8018      	strh	r0, [r3, #0]
 8018100:	2300      	movs	r3, #0
 8018102:	4616      	mov	r6, r2
 8018104:	6123      	str	r3, [r4, #16]
 8018106:	e7ba      	b.n	801807e <_printf_i+0x152>
 8018108:	680b      	ldr	r3, [r1, #0]
 801810a:	1d1a      	adds	r2, r3, #4
 801810c:	600a      	str	r2, [r1, #0]
 801810e:	681e      	ldr	r6, [r3, #0]
 8018110:	2100      	movs	r1, #0
 8018112:	4630      	mov	r0, r6
 8018114:	6862      	ldr	r2, [r4, #4]
 8018116:	f000 fa95 	bl	8018644 <memchr>
 801811a:	b108      	cbz	r0, 8018120 <_printf_i+0x1f4>
 801811c:	1b80      	subs	r0, r0, r6
 801811e:	6060      	str	r0, [r4, #4]
 8018120:	6863      	ldr	r3, [r4, #4]
 8018122:	6123      	str	r3, [r4, #16]
 8018124:	2300      	movs	r3, #0
 8018126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801812a:	e7a8      	b.n	801807e <_printf_i+0x152>
 801812c:	4632      	mov	r2, r6
 801812e:	4649      	mov	r1, r9
 8018130:	4640      	mov	r0, r8
 8018132:	6923      	ldr	r3, [r4, #16]
 8018134:	47d0      	blx	sl
 8018136:	3001      	adds	r0, #1
 8018138:	d0ab      	beq.n	8018092 <_printf_i+0x166>
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	079b      	lsls	r3, r3, #30
 801813e:	d413      	bmi.n	8018168 <_printf_i+0x23c>
 8018140:	68e0      	ldr	r0, [r4, #12]
 8018142:	9b03      	ldr	r3, [sp, #12]
 8018144:	4298      	cmp	r0, r3
 8018146:	bfb8      	it	lt
 8018148:	4618      	movlt	r0, r3
 801814a:	e7a4      	b.n	8018096 <_printf_i+0x16a>
 801814c:	2301      	movs	r3, #1
 801814e:	4632      	mov	r2, r6
 8018150:	4649      	mov	r1, r9
 8018152:	4640      	mov	r0, r8
 8018154:	47d0      	blx	sl
 8018156:	3001      	adds	r0, #1
 8018158:	d09b      	beq.n	8018092 <_printf_i+0x166>
 801815a:	3501      	adds	r5, #1
 801815c:	68e3      	ldr	r3, [r4, #12]
 801815e:	9903      	ldr	r1, [sp, #12]
 8018160:	1a5b      	subs	r3, r3, r1
 8018162:	42ab      	cmp	r3, r5
 8018164:	dcf2      	bgt.n	801814c <_printf_i+0x220>
 8018166:	e7eb      	b.n	8018140 <_printf_i+0x214>
 8018168:	2500      	movs	r5, #0
 801816a:	f104 0619 	add.w	r6, r4, #25
 801816e:	e7f5      	b.n	801815c <_printf_i+0x230>
 8018170:	0801a309 	.word	0x0801a309
 8018174:	0801a31a 	.word	0x0801a31a

08018178 <__sread>:
 8018178:	b510      	push	{r4, lr}
 801817a:	460c      	mov	r4, r1
 801817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018180:	f000 fa76 	bl	8018670 <_read_r>
 8018184:	2800      	cmp	r0, #0
 8018186:	bfab      	itete	ge
 8018188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801818a:	89a3      	ldrhlt	r3, [r4, #12]
 801818c:	181b      	addge	r3, r3, r0
 801818e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018192:	bfac      	ite	ge
 8018194:	6563      	strge	r3, [r4, #84]	; 0x54
 8018196:	81a3      	strhlt	r3, [r4, #12]
 8018198:	bd10      	pop	{r4, pc}

0801819a <__swrite>:
 801819a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801819e:	461f      	mov	r7, r3
 80181a0:	898b      	ldrh	r3, [r1, #12]
 80181a2:	4605      	mov	r5, r0
 80181a4:	05db      	lsls	r3, r3, #23
 80181a6:	460c      	mov	r4, r1
 80181a8:	4616      	mov	r6, r2
 80181aa:	d505      	bpl.n	80181b8 <__swrite+0x1e>
 80181ac:	2302      	movs	r3, #2
 80181ae:	2200      	movs	r2, #0
 80181b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b4:	f000 f9d0 	bl	8018558 <_lseek_r>
 80181b8:	89a3      	ldrh	r3, [r4, #12]
 80181ba:	4632      	mov	r2, r6
 80181bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181c0:	81a3      	strh	r3, [r4, #12]
 80181c2:	4628      	mov	r0, r5
 80181c4:	463b      	mov	r3, r7
 80181c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181ce:	f000 b869 	b.w	80182a4 <_write_r>

080181d2 <__sseek>:
 80181d2:	b510      	push	{r4, lr}
 80181d4:	460c      	mov	r4, r1
 80181d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181da:	f000 f9bd 	bl	8018558 <_lseek_r>
 80181de:	1c43      	adds	r3, r0, #1
 80181e0:	89a3      	ldrh	r3, [r4, #12]
 80181e2:	bf15      	itete	ne
 80181e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80181e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181ee:	81a3      	strheq	r3, [r4, #12]
 80181f0:	bf18      	it	ne
 80181f2:	81a3      	strhne	r3, [r4, #12]
 80181f4:	bd10      	pop	{r4, pc}

080181f6 <__sclose>:
 80181f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181fa:	f000 b8db 	b.w	80183b4 <_close_r>
	...

08018200 <__swbuf_r>:
 8018200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018202:	460e      	mov	r6, r1
 8018204:	4614      	mov	r4, r2
 8018206:	4605      	mov	r5, r0
 8018208:	b118      	cbz	r0, 8018212 <__swbuf_r+0x12>
 801820a:	6983      	ldr	r3, [r0, #24]
 801820c:	b90b      	cbnz	r3, 8018212 <__swbuf_r+0x12>
 801820e:	f7ff fa85 	bl	801771c <__sinit>
 8018212:	4b21      	ldr	r3, [pc, #132]	; (8018298 <__swbuf_r+0x98>)
 8018214:	429c      	cmp	r4, r3
 8018216:	d12b      	bne.n	8018270 <__swbuf_r+0x70>
 8018218:	686c      	ldr	r4, [r5, #4]
 801821a:	69a3      	ldr	r3, [r4, #24]
 801821c:	60a3      	str	r3, [r4, #8]
 801821e:	89a3      	ldrh	r3, [r4, #12]
 8018220:	071a      	lsls	r2, r3, #28
 8018222:	d52f      	bpl.n	8018284 <__swbuf_r+0x84>
 8018224:	6923      	ldr	r3, [r4, #16]
 8018226:	b36b      	cbz	r3, 8018284 <__swbuf_r+0x84>
 8018228:	6923      	ldr	r3, [r4, #16]
 801822a:	6820      	ldr	r0, [r4, #0]
 801822c:	b2f6      	uxtb	r6, r6
 801822e:	1ac0      	subs	r0, r0, r3
 8018230:	6963      	ldr	r3, [r4, #20]
 8018232:	4637      	mov	r7, r6
 8018234:	4283      	cmp	r3, r0
 8018236:	dc04      	bgt.n	8018242 <__swbuf_r+0x42>
 8018238:	4621      	mov	r1, r4
 801823a:	4628      	mov	r0, r5
 801823c:	f000 f950 	bl	80184e0 <_fflush_r>
 8018240:	bb30      	cbnz	r0, 8018290 <__swbuf_r+0x90>
 8018242:	68a3      	ldr	r3, [r4, #8]
 8018244:	3001      	adds	r0, #1
 8018246:	3b01      	subs	r3, #1
 8018248:	60a3      	str	r3, [r4, #8]
 801824a:	6823      	ldr	r3, [r4, #0]
 801824c:	1c5a      	adds	r2, r3, #1
 801824e:	6022      	str	r2, [r4, #0]
 8018250:	701e      	strb	r6, [r3, #0]
 8018252:	6963      	ldr	r3, [r4, #20]
 8018254:	4283      	cmp	r3, r0
 8018256:	d004      	beq.n	8018262 <__swbuf_r+0x62>
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	07db      	lsls	r3, r3, #31
 801825c:	d506      	bpl.n	801826c <__swbuf_r+0x6c>
 801825e:	2e0a      	cmp	r6, #10
 8018260:	d104      	bne.n	801826c <__swbuf_r+0x6c>
 8018262:	4621      	mov	r1, r4
 8018264:	4628      	mov	r0, r5
 8018266:	f000 f93b 	bl	80184e0 <_fflush_r>
 801826a:	b988      	cbnz	r0, 8018290 <__swbuf_r+0x90>
 801826c:	4638      	mov	r0, r7
 801826e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018270:	4b0a      	ldr	r3, [pc, #40]	; (801829c <__swbuf_r+0x9c>)
 8018272:	429c      	cmp	r4, r3
 8018274:	d101      	bne.n	801827a <__swbuf_r+0x7a>
 8018276:	68ac      	ldr	r4, [r5, #8]
 8018278:	e7cf      	b.n	801821a <__swbuf_r+0x1a>
 801827a:	4b09      	ldr	r3, [pc, #36]	; (80182a0 <__swbuf_r+0xa0>)
 801827c:	429c      	cmp	r4, r3
 801827e:	bf08      	it	eq
 8018280:	68ec      	ldreq	r4, [r5, #12]
 8018282:	e7ca      	b.n	801821a <__swbuf_r+0x1a>
 8018284:	4621      	mov	r1, r4
 8018286:	4628      	mov	r0, r5
 8018288:	f000 f81e 	bl	80182c8 <__swsetup_r>
 801828c:	2800      	cmp	r0, #0
 801828e:	d0cb      	beq.n	8018228 <__swbuf_r+0x28>
 8018290:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018294:	e7ea      	b.n	801826c <__swbuf_r+0x6c>
 8018296:	bf00      	nop
 8018298:	0801a2b8 	.word	0x0801a2b8
 801829c:	0801a2d8 	.word	0x0801a2d8
 80182a0:	0801a298 	.word	0x0801a298

080182a4 <_write_r>:
 80182a4:	b538      	push	{r3, r4, r5, lr}
 80182a6:	4604      	mov	r4, r0
 80182a8:	4608      	mov	r0, r1
 80182aa:	4611      	mov	r1, r2
 80182ac:	2200      	movs	r2, #0
 80182ae:	4d05      	ldr	r5, [pc, #20]	; (80182c4 <_write_r+0x20>)
 80182b0:	602a      	str	r2, [r5, #0]
 80182b2:	461a      	mov	r2, r3
 80182b4:	f7ea fd82 	bl	8002dbc <_write>
 80182b8:	1c43      	adds	r3, r0, #1
 80182ba:	d102      	bne.n	80182c2 <_write_r+0x1e>
 80182bc:	682b      	ldr	r3, [r5, #0]
 80182be:	b103      	cbz	r3, 80182c2 <_write_r+0x1e>
 80182c0:	6023      	str	r3, [r4, #0]
 80182c2:	bd38      	pop	{r3, r4, r5, pc}
 80182c4:	2000d63c 	.word	0x2000d63c

080182c8 <__swsetup_r>:
 80182c8:	4b32      	ldr	r3, [pc, #200]	; (8018394 <__swsetup_r+0xcc>)
 80182ca:	b570      	push	{r4, r5, r6, lr}
 80182cc:	681d      	ldr	r5, [r3, #0]
 80182ce:	4606      	mov	r6, r0
 80182d0:	460c      	mov	r4, r1
 80182d2:	b125      	cbz	r5, 80182de <__swsetup_r+0x16>
 80182d4:	69ab      	ldr	r3, [r5, #24]
 80182d6:	b913      	cbnz	r3, 80182de <__swsetup_r+0x16>
 80182d8:	4628      	mov	r0, r5
 80182da:	f7ff fa1f 	bl	801771c <__sinit>
 80182de:	4b2e      	ldr	r3, [pc, #184]	; (8018398 <__swsetup_r+0xd0>)
 80182e0:	429c      	cmp	r4, r3
 80182e2:	d10f      	bne.n	8018304 <__swsetup_r+0x3c>
 80182e4:	686c      	ldr	r4, [r5, #4]
 80182e6:	89a3      	ldrh	r3, [r4, #12]
 80182e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182ec:	0719      	lsls	r1, r3, #28
 80182ee:	d42c      	bmi.n	801834a <__swsetup_r+0x82>
 80182f0:	06dd      	lsls	r5, r3, #27
 80182f2:	d411      	bmi.n	8018318 <__swsetup_r+0x50>
 80182f4:	2309      	movs	r3, #9
 80182f6:	6033      	str	r3, [r6, #0]
 80182f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80182fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018300:	81a3      	strh	r3, [r4, #12]
 8018302:	e03e      	b.n	8018382 <__swsetup_r+0xba>
 8018304:	4b25      	ldr	r3, [pc, #148]	; (801839c <__swsetup_r+0xd4>)
 8018306:	429c      	cmp	r4, r3
 8018308:	d101      	bne.n	801830e <__swsetup_r+0x46>
 801830a:	68ac      	ldr	r4, [r5, #8]
 801830c:	e7eb      	b.n	80182e6 <__swsetup_r+0x1e>
 801830e:	4b24      	ldr	r3, [pc, #144]	; (80183a0 <__swsetup_r+0xd8>)
 8018310:	429c      	cmp	r4, r3
 8018312:	bf08      	it	eq
 8018314:	68ec      	ldreq	r4, [r5, #12]
 8018316:	e7e6      	b.n	80182e6 <__swsetup_r+0x1e>
 8018318:	0758      	lsls	r0, r3, #29
 801831a:	d512      	bpl.n	8018342 <__swsetup_r+0x7a>
 801831c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801831e:	b141      	cbz	r1, 8018332 <__swsetup_r+0x6a>
 8018320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018324:	4299      	cmp	r1, r3
 8018326:	d002      	beq.n	801832e <__swsetup_r+0x66>
 8018328:	4630      	mov	r0, r6
 801832a:	f7fe fed1 	bl	80170d0 <_free_r>
 801832e:	2300      	movs	r3, #0
 8018330:	6363      	str	r3, [r4, #52]	; 0x34
 8018332:	89a3      	ldrh	r3, [r4, #12]
 8018334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018338:	81a3      	strh	r3, [r4, #12]
 801833a:	2300      	movs	r3, #0
 801833c:	6063      	str	r3, [r4, #4]
 801833e:	6923      	ldr	r3, [r4, #16]
 8018340:	6023      	str	r3, [r4, #0]
 8018342:	89a3      	ldrh	r3, [r4, #12]
 8018344:	f043 0308 	orr.w	r3, r3, #8
 8018348:	81a3      	strh	r3, [r4, #12]
 801834a:	6923      	ldr	r3, [r4, #16]
 801834c:	b94b      	cbnz	r3, 8018362 <__swsetup_r+0x9a>
 801834e:	89a3      	ldrh	r3, [r4, #12]
 8018350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018358:	d003      	beq.n	8018362 <__swsetup_r+0x9a>
 801835a:	4621      	mov	r1, r4
 801835c:	4630      	mov	r0, r6
 801835e:	f000 f931 	bl	80185c4 <__smakebuf_r>
 8018362:	89a0      	ldrh	r0, [r4, #12]
 8018364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018368:	f010 0301 	ands.w	r3, r0, #1
 801836c:	d00a      	beq.n	8018384 <__swsetup_r+0xbc>
 801836e:	2300      	movs	r3, #0
 8018370:	60a3      	str	r3, [r4, #8]
 8018372:	6963      	ldr	r3, [r4, #20]
 8018374:	425b      	negs	r3, r3
 8018376:	61a3      	str	r3, [r4, #24]
 8018378:	6923      	ldr	r3, [r4, #16]
 801837a:	b943      	cbnz	r3, 801838e <__swsetup_r+0xc6>
 801837c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018380:	d1ba      	bne.n	80182f8 <__swsetup_r+0x30>
 8018382:	bd70      	pop	{r4, r5, r6, pc}
 8018384:	0781      	lsls	r1, r0, #30
 8018386:	bf58      	it	pl
 8018388:	6963      	ldrpl	r3, [r4, #20]
 801838a:	60a3      	str	r3, [r4, #8]
 801838c:	e7f4      	b.n	8018378 <__swsetup_r+0xb0>
 801838e:	2000      	movs	r0, #0
 8018390:	e7f7      	b.n	8018382 <__swsetup_r+0xba>
 8018392:	bf00      	nop
 8018394:	20000254 	.word	0x20000254
 8018398:	0801a2b8 	.word	0x0801a2b8
 801839c:	0801a2d8 	.word	0x0801a2d8
 80183a0:	0801a298 	.word	0x0801a298

080183a4 <abort>:
 80183a4:	2006      	movs	r0, #6
 80183a6:	b508      	push	{r3, lr}
 80183a8:	f000 f99c 	bl	80186e4 <raise>
 80183ac:	2001      	movs	r0, #1
 80183ae:	f7ea fcde 	bl	8002d6e <_exit>
	...

080183b4 <_close_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	2300      	movs	r3, #0
 80183b8:	4d05      	ldr	r5, [pc, #20]	; (80183d0 <_close_r+0x1c>)
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	602b      	str	r3, [r5, #0]
 80183c0:	f7ea fd4e 	bl	8002e60 <_close>
 80183c4:	1c43      	adds	r3, r0, #1
 80183c6:	d102      	bne.n	80183ce <_close_r+0x1a>
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	b103      	cbz	r3, 80183ce <_close_r+0x1a>
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	bd38      	pop	{r3, r4, r5, pc}
 80183d0:	2000d63c 	.word	0x2000d63c

080183d4 <__sflush_r>:
 80183d4:	898a      	ldrh	r2, [r1, #12]
 80183d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183da:	4605      	mov	r5, r0
 80183dc:	0710      	lsls	r0, r2, #28
 80183de:	460c      	mov	r4, r1
 80183e0:	d458      	bmi.n	8018494 <__sflush_r+0xc0>
 80183e2:	684b      	ldr	r3, [r1, #4]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	dc05      	bgt.n	80183f4 <__sflush_r+0x20>
 80183e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	dc02      	bgt.n	80183f4 <__sflush_r+0x20>
 80183ee:	2000      	movs	r0, #0
 80183f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183f6:	2e00      	cmp	r6, #0
 80183f8:	d0f9      	beq.n	80183ee <__sflush_r+0x1a>
 80183fa:	2300      	movs	r3, #0
 80183fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018400:	682f      	ldr	r7, [r5, #0]
 8018402:	602b      	str	r3, [r5, #0]
 8018404:	d032      	beq.n	801846c <__sflush_r+0x98>
 8018406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	075a      	lsls	r2, r3, #29
 801840c:	d505      	bpl.n	801841a <__sflush_r+0x46>
 801840e:	6863      	ldr	r3, [r4, #4]
 8018410:	1ac0      	subs	r0, r0, r3
 8018412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018414:	b10b      	cbz	r3, 801841a <__sflush_r+0x46>
 8018416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018418:	1ac0      	subs	r0, r0, r3
 801841a:	2300      	movs	r3, #0
 801841c:	4602      	mov	r2, r0
 801841e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018420:	4628      	mov	r0, r5
 8018422:	6a21      	ldr	r1, [r4, #32]
 8018424:	47b0      	blx	r6
 8018426:	1c43      	adds	r3, r0, #1
 8018428:	89a3      	ldrh	r3, [r4, #12]
 801842a:	d106      	bne.n	801843a <__sflush_r+0x66>
 801842c:	6829      	ldr	r1, [r5, #0]
 801842e:	291d      	cmp	r1, #29
 8018430:	d82c      	bhi.n	801848c <__sflush_r+0xb8>
 8018432:	4a2a      	ldr	r2, [pc, #168]	; (80184dc <__sflush_r+0x108>)
 8018434:	40ca      	lsrs	r2, r1
 8018436:	07d6      	lsls	r6, r2, #31
 8018438:	d528      	bpl.n	801848c <__sflush_r+0xb8>
 801843a:	2200      	movs	r2, #0
 801843c:	6062      	str	r2, [r4, #4]
 801843e:	6922      	ldr	r2, [r4, #16]
 8018440:	04d9      	lsls	r1, r3, #19
 8018442:	6022      	str	r2, [r4, #0]
 8018444:	d504      	bpl.n	8018450 <__sflush_r+0x7c>
 8018446:	1c42      	adds	r2, r0, #1
 8018448:	d101      	bne.n	801844e <__sflush_r+0x7a>
 801844a:	682b      	ldr	r3, [r5, #0]
 801844c:	b903      	cbnz	r3, 8018450 <__sflush_r+0x7c>
 801844e:	6560      	str	r0, [r4, #84]	; 0x54
 8018450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018452:	602f      	str	r7, [r5, #0]
 8018454:	2900      	cmp	r1, #0
 8018456:	d0ca      	beq.n	80183ee <__sflush_r+0x1a>
 8018458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801845c:	4299      	cmp	r1, r3
 801845e:	d002      	beq.n	8018466 <__sflush_r+0x92>
 8018460:	4628      	mov	r0, r5
 8018462:	f7fe fe35 	bl	80170d0 <_free_r>
 8018466:	2000      	movs	r0, #0
 8018468:	6360      	str	r0, [r4, #52]	; 0x34
 801846a:	e7c1      	b.n	80183f0 <__sflush_r+0x1c>
 801846c:	6a21      	ldr	r1, [r4, #32]
 801846e:	2301      	movs	r3, #1
 8018470:	4628      	mov	r0, r5
 8018472:	47b0      	blx	r6
 8018474:	1c41      	adds	r1, r0, #1
 8018476:	d1c7      	bne.n	8018408 <__sflush_r+0x34>
 8018478:	682b      	ldr	r3, [r5, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d0c4      	beq.n	8018408 <__sflush_r+0x34>
 801847e:	2b1d      	cmp	r3, #29
 8018480:	d001      	beq.n	8018486 <__sflush_r+0xb2>
 8018482:	2b16      	cmp	r3, #22
 8018484:	d101      	bne.n	801848a <__sflush_r+0xb6>
 8018486:	602f      	str	r7, [r5, #0]
 8018488:	e7b1      	b.n	80183ee <__sflush_r+0x1a>
 801848a:	89a3      	ldrh	r3, [r4, #12]
 801848c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018490:	81a3      	strh	r3, [r4, #12]
 8018492:	e7ad      	b.n	80183f0 <__sflush_r+0x1c>
 8018494:	690f      	ldr	r7, [r1, #16]
 8018496:	2f00      	cmp	r7, #0
 8018498:	d0a9      	beq.n	80183ee <__sflush_r+0x1a>
 801849a:	0793      	lsls	r3, r2, #30
 801849c:	bf18      	it	ne
 801849e:	2300      	movne	r3, #0
 80184a0:	680e      	ldr	r6, [r1, #0]
 80184a2:	bf08      	it	eq
 80184a4:	694b      	ldreq	r3, [r1, #20]
 80184a6:	eba6 0807 	sub.w	r8, r6, r7
 80184aa:	600f      	str	r7, [r1, #0]
 80184ac:	608b      	str	r3, [r1, #8]
 80184ae:	f1b8 0f00 	cmp.w	r8, #0
 80184b2:	dd9c      	ble.n	80183ee <__sflush_r+0x1a>
 80184b4:	4643      	mov	r3, r8
 80184b6:	463a      	mov	r2, r7
 80184b8:	4628      	mov	r0, r5
 80184ba:	6a21      	ldr	r1, [r4, #32]
 80184bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184be:	47b0      	blx	r6
 80184c0:	2800      	cmp	r0, #0
 80184c2:	dc06      	bgt.n	80184d2 <__sflush_r+0xfe>
 80184c4:	89a3      	ldrh	r3, [r4, #12]
 80184c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184ce:	81a3      	strh	r3, [r4, #12]
 80184d0:	e78e      	b.n	80183f0 <__sflush_r+0x1c>
 80184d2:	4407      	add	r7, r0
 80184d4:	eba8 0800 	sub.w	r8, r8, r0
 80184d8:	e7e9      	b.n	80184ae <__sflush_r+0xda>
 80184da:	bf00      	nop
 80184dc:	20400001 	.word	0x20400001

080184e0 <_fflush_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	690b      	ldr	r3, [r1, #16]
 80184e4:	4605      	mov	r5, r0
 80184e6:	460c      	mov	r4, r1
 80184e8:	b913      	cbnz	r3, 80184f0 <_fflush_r+0x10>
 80184ea:	2500      	movs	r5, #0
 80184ec:	4628      	mov	r0, r5
 80184ee:	bd38      	pop	{r3, r4, r5, pc}
 80184f0:	b118      	cbz	r0, 80184fa <_fflush_r+0x1a>
 80184f2:	6983      	ldr	r3, [r0, #24]
 80184f4:	b90b      	cbnz	r3, 80184fa <_fflush_r+0x1a>
 80184f6:	f7ff f911 	bl	801771c <__sinit>
 80184fa:	4b14      	ldr	r3, [pc, #80]	; (801854c <_fflush_r+0x6c>)
 80184fc:	429c      	cmp	r4, r3
 80184fe:	d11b      	bne.n	8018538 <_fflush_r+0x58>
 8018500:	686c      	ldr	r4, [r5, #4]
 8018502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d0ef      	beq.n	80184ea <_fflush_r+0xa>
 801850a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801850c:	07d0      	lsls	r0, r2, #31
 801850e:	d404      	bmi.n	801851a <_fflush_r+0x3a>
 8018510:	0599      	lsls	r1, r3, #22
 8018512:	d402      	bmi.n	801851a <_fflush_r+0x3a>
 8018514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018516:	f7ff f9b1 	bl	801787c <__retarget_lock_acquire_recursive>
 801851a:	4628      	mov	r0, r5
 801851c:	4621      	mov	r1, r4
 801851e:	f7ff ff59 	bl	80183d4 <__sflush_r>
 8018522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018524:	4605      	mov	r5, r0
 8018526:	07da      	lsls	r2, r3, #31
 8018528:	d4e0      	bmi.n	80184ec <_fflush_r+0xc>
 801852a:	89a3      	ldrh	r3, [r4, #12]
 801852c:	059b      	lsls	r3, r3, #22
 801852e:	d4dd      	bmi.n	80184ec <_fflush_r+0xc>
 8018530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018532:	f7ff f9a4 	bl	801787e <__retarget_lock_release_recursive>
 8018536:	e7d9      	b.n	80184ec <_fflush_r+0xc>
 8018538:	4b05      	ldr	r3, [pc, #20]	; (8018550 <_fflush_r+0x70>)
 801853a:	429c      	cmp	r4, r3
 801853c:	d101      	bne.n	8018542 <_fflush_r+0x62>
 801853e:	68ac      	ldr	r4, [r5, #8]
 8018540:	e7df      	b.n	8018502 <_fflush_r+0x22>
 8018542:	4b04      	ldr	r3, [pc, #16]	; (8018554 <_fflush_r+0x74>)
 8018544:	429c      	cmp	r4, r3
 8018546:	bf08      	it	eq
 8018548:	68ec      	ldreq	r4, [r5, #12]
 801854a:	e7da      	b.n	8018502 <_fflush_r+0x22>
 801854c:	0801a2b8 	.word	0x0801a2b8
 8018550:	0801a2d8 	.word	0x0801a2d8
 8018554:	0801a298 	.word	0x0801a298

08018558 <_lseek_r>:
 8018558:	b538      	push	{r3, r4, r5, lr}
 801855a:	4604      	mov	r4, r0
 801855c:	4608      	mov	r0, r1
 801855e:	4611      	mov	r1, r2
 8018560:	2200      	movs	r2, #0
 8018562:	4d05      	ldr	r5, [pc, #20]	; (8018578 <_lseek_r+0x20>)
 8018564:	602a      	str	r2, [r5, #0]
 8018566:	461a      	mov	r2, r3
 8018568:	f7ea fc9e 	bl	8002ea8 <_lseek>
 801856c:	1c43      	adds	r3, r0, #1
 801856e:	d102      	bne.n	8018576 <_lseek_r+0x1e>
 8018570:	682b      	ldr	r3, [r5, #0]
 8018572:	b103      	cbz	r3, 8018576 <_lseek_r+0x1e>
 8018574:	6023      	str	r3, [r4, #0]
 8018576:	bd38      	pop	{r3, r4, r5, pc}
 8018578:	2000d63c 	.word	0x2000d63c

0801857c <__swhatbuf_r>:
 801857c:	b570      	push	{r4, r5, r6, lr}
 801857e:	460e      	mov	r6, r1
 8018580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018584:	4614      	mov	r4, r2
 8018586:	2900      	cmp	r1, #0
 8018588:	461d      	mov	r5, r3
 801858a:	b096      	sub	sp, #88	; 0x58
 801858c:	da07      	bge.n	801859e <__swhatbuf_r+0x22>
 801858e:	2300      	movs	r3, #0
 8018590:	602b      	str	r3, [r5, #0]
 8018592:	89b3      	ldrh	r3, [r6, #12]
 8018594:	061a      	lsls	r2, r3, #24
 8018596:	d410      	bmi.n	80185ba <__swhatbuf_r+0x3e>
 8018598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801859c:	e00e      	b.n	80185bc <__swhatbuf_r+0x40>
 801859e:	466a      	mov	r2, sp
 80185a0:	f000 f8bc 	bl	801871c <_fstat_r>
 80185a4:	2800      	cmp	r0, #0
 80185a6:	dbf2      	blt.n	801858e <__swhatbuf_r+0x12>
 80185a8:	9a01      	ldr	r2, [sp, #4]
 80185aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80185ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80185b2:	425a      	negs	r2, r3
 80185b4:	415a      	adcs	r2, r3
 80185b6:	602a      	str	r2, [r5, #0]
 80185b8:	e7ee      	b.n	8018598 <__swhatbuf_r+0x1c>
 80185ba:	2340      	movs	r3, #64	; 0x40
 80185bc:	2000      	movs	r0, #0
 80185be:	6023      	str	r3, [r4, #0]
 80185c0:	b016      	add	sp, #88	; 0x58
 80185c2:	bd70      	pop	{r4, r5, r6, pc}

080185c4 <__smakebuf_r>:
 80185c4:	898b      	ldrh	r3, [r1, #12]
 80185c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185c8:	079d      	lsls	r5, r3, #30
 80185ca:	4606      	mov	r6, r0
 80185cc:	460c      	mov	r4, r1
 80185ce:	d507      	bpl.n	80185e0 <__smakebuf_r+0x1c>
 80185d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	6123      	str	r3, [r4, #16]
 80185d8:	2301      	movs	r3, #1
 80185da:	6163      	str	r3, [r4, #20]
 80185dc:	b002      	add	sp, #8
 80185de:	bd70      	pop	{r4, r5, r6, pc}
 80185e0:	466a      	mov	r2, sp
 80185e2:	ab01      	add	r3, sp, #4
 80185e4:	f7ff ffca 	bl	801857c <__swhatbuf_r>
 80185e8:	9900      	ldr	r1, [sp, #0]
 80185ea:	4605      	mov	r5, r0
 80185ec:	4630      	mov	r0, r6
 80185ee:	f7fe fdbb 	bl	8017168 <_malloc_r>
 80185f2:	b948      	cbnz	r0, 8018608 <__smakebuf_r+0x44>
 80185f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185f8:	059a      	lsls	r2, r3, #22
 80185fa:	d4ef      	bmi.n	80185dc <__smakebuf_r+0x18>
 80185fc:	f023 0303 	bic.w	r3, r3, #3
 8018600:	f043 0302 	orr.w	r3, r3, #2
 8018604:	81a3      	strh	r3, [r4, #12]
 8018606:	e7e3      	b.n	80185d0 <__smakebuf_r+0xc>
 8018608:	4b0d      	ldr	r3, [pc, #52]	; (8018640 <__smakebuf_r+0x7c>)
 801860a:	62b3      	str	r3, [r6, #40]	; 0x28
 801860c:	89a3      	ldrh	r3, [r4, #12]
 801860e:	6020      	str	r0, [r4, #0]
 8018610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018614:	81a3      	strh	r3, [r4, #12]
 8018616:	9b00      	ldr	r3, [sp, #0]
 8018618:	6120      	str	r0, [r4, #16]
 801861a:	6163      	str	r3, [r4, #20]
 801861c:	9b01      	ldr	r3, [sp, #4]
 801861e:	b15b      	cbz	r3, 8018638 <__smakebuf_r+0x74>
 8018620:	4630      	mov	r0, r6
 8018622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018626:	f000 f88b 	bl	8018740 <_isatty_r>
 801862a:	b128      	cbz	r0, 8018638 <__smakebuf_r+0x74>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	f023 0303 	bic.w	r3, r3, #3
 8018632:	f043 0301 	orr.w	r3, r3, #1
 8018636:	81a3      	strh	r3, [r4, #12]
 8018638:	89a0      	ldrh	r0, [r4, #12]
 801863a:	4305      	orrs	r5, r0
 801863c:	81a5      	strh	r5, [r4, #12]
 801863e:	e7cd      	b.n	80185dc <__smakebuf_r+0x18>
 8018640:	080176b5 	.word	0x080176b5

08018644 <memchr>:
 8018644:	4603      	mov	r3, r0
 8018646:	b510      	push	{r4, lr}
 8018648:	b2c9      	uxtb	r1, r1
 801864a:	4402      	add	r2, r0
 801864c:	4293      	cmp	r3, r2
 801864e:	4618      	mov	r0, r3
 8018650:	d101      	bne.n	8018656 <memchr+0x12>
 8018652:	2000      	movs	r0, #0
 8018654:	e003      	b.n	801865e <memchr+0x1a>
 8018656:	7804      	ldrb	r4, [r0, #0]
 8018658:	3301      	adds	r3, #1
 801865a:	428c      	cmp	r4, r1
 801865c:	d1f6      	bne.n	801864c <memchr+0x8>
 801865e:	bd10      	pop	{r4, pc}

08018660 <_malloc_usable_size_r>:
 8018660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018664:	1f18      	subs	r0, r3, #4
 8018666:	2b00      	cmp	r3, #0
 8018668:	bfbc      	itt	lt
 801866a:	580b      	ldrlt	r3, [r1, r0]
 801866c:	18c0      	addlt	r0, r0, r3
 801866e:	4770      	bx	lr

08018670 <_read_r>:
 8018670:	b538      	push	{r3, r4, r5, lr}
 8018672:	4604      	mov	r4, r0
 8018674:	4608      	mov	r0, r1
 8018676:	4611      	mov	r1, r2
 8018678:	2200      	movs	r2, #0
 801867a:	4d05      	ldr	r5, [pc, #20]	; (8018690 <_read_r+0x20>)
 801867c:	602a      	str	r2, [r5, #0]
 801867e:	461a      	mov	r2, r3
 8018680:	f7ea fb7f 	bl	8002d82 <_read>
 8018684:	1c43      	adds	r3, r0, #1
 8018686:	d102      	bne.n	801868e <_read_r+0x1e>
 8018688:	682b      	ldr	r3, [r5, #0]
 801868a:	b103      	cbz	r3, 801868e <_read_r+0x1e>
 801868c:	6023      	str	r3, [r4, #0]
 801868e:	bd38      	pop	{r3, r4, r5, pc}
 8018690:	2000d63c 	.word	0x2000d63c

08018694 <_raise_r>:
 8018694:	291f      	cmp	r1, #31
 8018696:	b538      	push	{r3, r4, r5, lr}
 8018698:	4604      	mov	r4, r0
 801869a:	460d      	mov	r5, r1
 801869c:	d904      	bls.n	80186a8 <_raise_r+0x14>
 801869e:	2316      	movs	r3, #22
 80186a0:	6003      	str	r3, [r0, #0]
 80186a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80186aa:	b112      	cbz	r2, 80186b2 <_raise_r+0x1e>
 80186ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186b0:	b94b      	cbnz	r3, 80186c6 <_raise_r+0x32>
 80186b2:	4620      	mov	r0, r4
 80186b4:	f000 f830 	bl	8018718 <_getpid_r>
 80186b8:	462a      	mov	r2, r5
 80186ba:	4601      	mov	r1, r0
 80186bc:	4620      	mov	r0, r4
 80186be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186c2:	f000 b817 	b.w	80186f4 <_kill_r>
 80186c6:	2b01      	cmp	r3, #1
 80186c8:	d00a      	beq.n	80186e0 <_raise_r+0x4c>
 80186ca:	1c59      	adds	r1, r3, #1
 80186cc:	d103      	bne.n	80186d6 <_raise_r+0x42>
 80186ce:	2316      	movs	r3, #22
 80186d0:	6003      	str	r3, [r0, #0]
 80186d2:	2001      	movs	r0, #1
 80186d4:	e7e7      	b.n	80186a6 <_raise_r+0x12>
 80186d6:	2400      	movs	r4, #0
 80186d8:	4628      	mov	r0, r5
 80186da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80186de:	4798      	blx	r3
 80186e0:	2000      	movs	r0, #0
 80186e2:	e7e0      	b.n	80186a6 <_raise_r+0x12>

080186e4 <raise>:
 80186e4:	4b02      	ldr	r3, [pc, #8]	; (80186f0 <raise+0xc>)
 80186e6:	4601      	mov	r1, r0
 80186e8:	6818      	ldr	r0, [r3, #0]
 80186ea:	f7ff bfd3 	b.w	8018694 <_raise_r>
 80186ee:	bf00      	nop
 80186f0:	20000254 	.word	0x20000254

080186f4 <_kill_r>:
 80186f4:	b538      	push	{r3, r4, r5, lr}
 80186f6:	2300      	movs	r3, #0
 80186f8:	4d06      	ldr	r5, [pc, #24]	; (8018714 <_kill_r+0x20>)
 80186fa:	4604      	mov	r4, r0
 80186fc:	4608      	mov	r0, r1
 80186fe:	4611      	mov	r1, r2
 8018700:	602b      	str	r3, [r5, #0]
 8018702:	f7ea fb24 	bl	8002d4e <_kill>
 8018706:	1c43      	adds	r3, r0, #1
 8018708:	d102      	bne.n	8018710 <_kill_r+0x1c>
 801870a:	682b      	ldr	r3, [r5, #0]
 801870c:	b103      	cbz	r3, 8018710 <_kill_r+0x1c>
 801870e:	6023      	str	r3, [r4, #0]
 8018710:	bd38      	pop	{r3, r4, r5, pc}
 8018712:	bf00      	nop
 8018714:	2000d63c 	.word	0x2000d63c

08018718 <_getpid_r>:
 8018718:	f7ea bb12 	b.w	8002d40 <_getpid>

0801871c <_fstat_r>:
 801871c:	b538      	push	{r3, r4, r5, lr}
 801871e:	2300      	movs	r3, #0
 8018720:	4d06      	ldr	r5, [pc, #24]	; (801873c <_fstat_r+0x20>)
 8018722:	4604      	mov	r4, r0
 8018724:	4608      	mov	r0, r1
 8018726:	4611      	mov	r1, r2
 8018728:	602b      	str	r3, [r5, #0]
 801872a:	f7ea fba4 	bl	8002e76 <_fstat>
 801872e:	1c43      	adds	r3, r0, #1
 8018730:	d102      	bne.n	8018738 <_fstat_r+0x1c>
 8018732:	682b      	ldr	r3, [r5, #0]
 8018734:	b103      	cbz	r3, 8018738 <_fstat_r+0x1c>
 8018736:	6023      	str	r3, [r4, #0]
 8018738:	bd38      	pop	{r3, r4, r5, pc}
 801873a:	bf00      	nop
 801873c:	2000d63c 	.word	0x2000d63c

08018740 <_isatty_r>:
 8018740:	b538      	push	{r3, r4, r5, lr}
 8018742:	2300      	movs	r3, #0
 8018744:	4d05      	ldr	r5, [pc, #20]	; (801875c <_isatty_r+0x1c>)
 8018746:	4604      	mov	r4, r0
 8018748:	4608      	mov	r0, r1
 801874a:	602b      	str	r3, [r5, #0]
 801874c:	f7ea fba2 	bl	8002e94 <_isatty>
 8018750:	1c43      	adds	r3, r0, #1
 8018752:	d102      	bne.n	801875a <_isatty_r+0x1a>
 8018754:	682b      	ldr	r3, [r5, #0]
 8018756:	b103      	cbz	r3, 801875a <_isatty_r+0x1a>
 8018758:	6023      	str	r3, [r4, #0]
 801875a:	bd38      	pop	{r3, r4, r5, pc}
 801875c:	2000d63c 	.word	0x2000d63c

08018760 <_init>:
 8018760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018762:	bf00      	nop
 8018764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018766:	bc08      	pop	{r3}
 8018768:	469e      	mov	lr, r3
 801876a:	4770      	bx	lr

0801876c <_fini>:
 801876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801876e:	bf00      	nop
 8018770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018772:	bc08      	pop	{r3}
 8018774:	469e      	mov	lr, r3
 8018776:	4770      	bx	lr
