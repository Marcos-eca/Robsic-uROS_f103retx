
uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0d0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c28  0801b2c0  0801b2c0  0002b2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cee8  0801cee8  0003038c  2**0
                  CONTENTS
  4 .ARM          00000008  0801cee8  0801cee8  0002cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cef0  0801cef0  0003038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cef0  0801cef0  0002cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cef4  0801cef4  0002cef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0801cef8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e150  20000390  0801d284  00030390  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000e4e0  0801d284  0003e4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002756e  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000563e  00000000  00000000  00057923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0005cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  0005ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218d6  00000000  00000000  00060290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221a3  00000000  00000000  00081b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b787e  00000000  00000000  000a3d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  0015b587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008008  00000000  00000000  0015b634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000390 	.word	0x20000390
 800020c:	00000000 	.word	0x00000000
 8000210:	0801b2a8 	.word	0x0801b2a8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000394 	.word	0x20000394
 800022c:	0801b2a8 	.word	0x0801b2a8

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fmul>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d06f      	beq.n	8000f30 <__aeabi_fmul+0xf8>
 8000e50:	441a      	add	r2, r3
 8000e52:	ea80 0c01 	eor.w	ip, r0, r1
 8000e56:	0240      	lsls	r0, r0, #9
 8000e58:	bf18      	it	ne
 8000e5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e5e:	d01e      	beq.n	8000e9e <__aeabi_fmul+0x66>
 8000e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e78:	bf3e      	ittt	cc
 8000e7a:	0049      	lslcc	r1, r1, #1
 8000e7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	ea40 0001 	orr.w	r0, r0, r1
 8000e86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e8a:	2afd      	cmp	r2, #253	; 0xfd
 8000e8c:	d81d      	bhi.n	8000eca <__aeabi_fmul+0x92>
 8000e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e96:	bf08      	it	eq
 8000e98:	f020 0001 	biceq.w	r0, r0, #1
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea6:	bf08      	it	eq
 8000ea8:	0249      	lsleq	r1, r1, #9
 8000eaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eb2:	3a7f      	subs	r2, #127	; 0x7f
 8000eb4:	bfc2      	ittt	gt
 8000eb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebe:	4770      	bxgt	lr
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	dc5d      	bgt.n	8000f88 <__aeabi_fmul+0x150>
 8000ecc:	f112 0f19 	cmn.w	r2, #25
 8000ed0:	bfdc      	itt	le
 8000ed2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bxle	lr
 8000ed8:	f1c2 0200 	rsb	r2, r2, #0
 8000edc:	0041      	lsls	r1, r0, #1
 8000ede:	fa21 f102 	lsr.w	r1, r1, r2
 8000ee2:	f1c2 0220 	rsb	r2, r2, #32
 8000ee6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eee:	f140 0000 	adc.w	r0, r0, #0
 8000ef2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ef6:	bf08      	it	eq
 8000ef8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efc:	4770      	bx	lr
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xce>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fmul+0xe6>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_fmul+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	bf18      	it	ne
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d00a      	beq.n	8000f56 <__aeabi_fmul+0x11e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1d8      	bne.n	8000efe <__aeabi_fmul+0xc6>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f090 0f00 	teq	r0, #0
 8000f5a:	bf17      	itett	ne
 8000f5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f60:	4608      	moveq	r0, r1
 8000f62:	f091 0f00 	teqne	r1, #0
 8000f66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f6a:	d014      	beq.n	8000f96 <__aeabi_fmul+0x15e>
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d101      	bne.n	8000f76 <__aeabi_fmul+0x13e>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d10f      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f76:	ea93 0f0c 	teq	r3, ip
 8000f7a:	d103      	bne.n	8000f84 <__aeabi_fmul+0x14c>
 8000f7c:	024b      	lsls	r3, r1, #9
 8000f7e:	bf18      	it	ne
 8000f80:	4608      	movne	r0, r1
 8000f82:	d108      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_fdiv>:
 8000fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fa4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa8:	bf1e      	ittt	ne
 8000faa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fae:	ea92 0f0c 	teqne	r2, ip
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d069      	beq.n	800108c <__aeabi_fdiv+0xec>
 8000fb8:	eba2 0203 	sub.w	r2, r2, r3
 8000fbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fc6:	d037      	beq.n	8001038 <__aeabi_fdiv+0x98>
 8000fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf38      	it	cc
 8000fdc:	005b      	lslcc	r3, r3, #1
 8000fde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fe2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	bf24      	itt	cs
 8000fea:	1a5b      	subcs	r3, r3, r1
 8000fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ff0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ffa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ffe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001002:	bf24      	itt	cs
 8001004:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800100c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001010:	bf24      	itt	cs
 8001012:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001016:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	bf18      	it	ne
 800101e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001022:	d1e0      	bne.n	8000fe6 <__aeabi_fdiv+0x46>
 8001024:	2afd      	cmp	r2, #253	; 0xfd
 8001026:	f63f af50 	bhi.w	8000eca <__aeabi_fmul+0x92>
 800102a:	428b      	cmp	r3, r1
 800102c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001030:	bf08      	it	eq
 8001032:	f020 0001 	biceq.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800103c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001040:	327f      	adds	r2, #127	; 0x7f
 8001042:	bfc2      	ittt	gt
 8001044:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001048:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104c:	4770      	bxgt	lr
 800104e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	3a01      	subs	r2, #1
 8001058:	e737      	b.n	8000eca <__aeabi_fmul+0x92>
 800105a:	f092 0f00 	teq	r2, #0
 800105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0040      	lsleq	r0, r0, #1
 8001066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800106a:	3a01      	subeq	r2, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xc2>
 800106e:	ea40 000c 	orr.w	r0, r0, ip
 8001072:	f093 0f00 	teq	r3, #0
 8001076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0049      	lsleq	r1, r1, #1
 800107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001082:	3b01      	subeq	r3, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fdiv+0xda>
 8001086:	ea41 010c 	orr.w	r1, r1, ip
 800108a:	e795      	b.n	8000fb8 <__aeabi_fdiv+0x18>
 800108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001090:	ea92 0f0c 	teq	r2, ip
 8001094:	d108      	bne.n	80010a8 <__aeabi_fdiv+0x108>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	f47f af7d 	bne.w	8000f96 <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	f47f af70 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e776      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010a8:	ea93 0f0c 	teq	r3, ip
 80010ac:	d104      	bne.n	80010b8 <__aeabi_fdiv+0x118>
 80010ae:	024b      	lsls	r3, r1, #9
 80010b0:	f43f af4c 	beq.w	8000f4c <__aeabi_fmul+0x114>
 80010b4:	4608      	mov	r0, r1
 80010b6:	e76e      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010bc:	bf18      	it	ne
 80010be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010c2:	d1ca      	bne.n	800105a <__aeabi_fdiv+0xba>
 80010c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c8:	f47f af5c 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010d0:	f47f af3c 	bne.w	8000f4c <__aeabi_fmul+0x114>
 80010d4:	e75f      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010d6:	bf00      	nop

080010d8 <__gesf2>:
 80010d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010dc:	e006      	b.n	80010ec <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__lesf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	e002      	b.n	80010ec <__cmpsf2+0x4>
 80010e6:	bf00      	nop

080010e8 <__cmpsf2>:
 80010e8:	f04f 0c01 	mov.w	ip, #1
 80010ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010fc:	bf18      	it	ne
 80010fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001102:	d011      	beq.n	8001128 <__cmpsf2+0x40>
 8001104:	b001      	add	sp, #4
 8001106:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800110a:	bf18      	it	ne
 800110c:	ea90 0f01 	teqne	r0, r1
 8001110:	bf58      	it	pl
 8001112:	ebb2 0003 	subspl.w	r0, r2, r3
 8001116:	bf88      	it	hi
 8001118:	17c8      	asrhi	r0, r1, #31
 800111a:	bf38      	it	cc
 800111c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001120:	bf18      	it	ne
 8001122:	f040 0001 	orrne.w	r0, r0, #1
 8001126:	4770      	bx	lr
 8001128:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800112c:	d102      	bne.n	8001134 <__cmpsf2+0x4c>
 800112e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001132:	d105      	bne.n	8001140 <__cmpsf2+0x58>
 8001134:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001138:	d1e4      	bne.n	8001104 <__cmpsf2+0x1c>
 800113a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113e:	d0e1      	beq.n	8001104 <__cmpsf2+0x1c>
 8001140:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_cfrcmple>:
 8001148:	4684      	mov	ip, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4661      	mov	r1, ip
 800114e:	e7ff      	b.n	8001150 <__aeabi_cfcmpeq>

08001150 <__aeabi_cfcmpeq>:
 8001150:	b50f      	push	{r0, r1, r2, r3, lr}
 8001152:	f7ff ffc9 	bl	80010e8 <__cmpsf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	bf48      	it	mi
 800115a:	f110 0f00 	cmnmi.w	r0, #0
 800115e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001160 <__aeabi_fcmpeq>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff fff4 	bl	8001150 <__aeabi_cfcmpeq>
 8001168:	bf0c      	ite	eq
 800116a:	2001      	moveq	r0, #1
 800116c:	2000      	movne	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmplt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffea 	bl	8001150 <__aeabi_cfcmpeq>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmple>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffe0 	bl	8001150 <__aeabi_cfcmpeq>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpge>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffd2 	bl	8001148 <__aeabi_cfrcmple>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpgt>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffc8 	bl	8001148 <__aeabi_cfrcmple>
 80011b8:	bf34      	ite	cc
 80011ba:	2001      	movcc	r0, #1
 80011bc:	2000      	movcs	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_f2iz>:
 80011c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011cc:	d30f      	bcc.n	80011ee <__aeabi_f2iz+0x2a>
 80011ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d6:	d90d      	bls.n	80011f4 <__aeabi_f2iz+0x30>
 80011d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	bf18      	it	ne
 80011ea:	4240      	negne	r0, r0
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr
 80011f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f8:	d101      	bne.n	80011fe <__aeabi_f2iz+0x3a>
 80011fa:	0242      	lsls	r2, r0, #9
 80011fc:	d105      	bne.n	800120a <__aeabi_f2iz+0x46>
 80011fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001202:	bf08      	it	eq
 8001204:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr

08001210 <__aeabi_ldivmod>:
 8001210:	b97b      	cbnz	r3, 8001232 <__aeabi_ldivmod+0x22>
 8001212:	b972      	cbnz	r2, 8001232 <__aeabi_ldivmod+0x22>
 8001214:	2900      	cmp	r1, #0
 8001216:	bfbe      	ittt	lt
 8001218:	2000      	movlt	r0, #0
 800121a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800121e:	e006      	blt.n	800122e <__aeabi_ldivmod+0x1e>
 8001220:	bf08      	it	eq
 8001222:	2800      	cmpeq	r0, #0
 8001224:	bf1c      	itt	ne
 8001226:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800122a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800122e:	f000 b9b9 	b.w	80015a4 <__aeabi_idiv0>
 8001232:	f1ad 0c08 	sub.w	ip, sp, #8
 8001236:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800123a:	2900      	cmp	r1, #0
 800123c:	db09      	blt.n	8001252 <__aeabi_ldivmod+0x42>
 800123e:	2b00      	cmp	r3, #0
 8001240:	db1a      	blt.n	8001278 <__aeabi_ldivmod+0x68>
 8001242:	f000 f84d 	bl	80012e0 <__udivmoddi4>
 8001246:	f8dd e004 	ldr.w	lr, [sp, #4]
 800124a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800124e:	b004      	add	sp, #16
 8001250:	4770      	bx	lr
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	db1b      	blt.n	8001294 <__aeabi_ldivmod+0x84>
 800125c:	f000 f840 	bl	80012e0 <__udivmoddi4>
 8001260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001268:	b004      	add	sp, #16
 800126a:	4240      	negs	r0, r0
 800126c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001270:	4252      	negs	r2, r2
 8001272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001276:	4770      	bx	lr
 8001278:	4252      	negs	r2, r2
 800127a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800127e:	f000 f82f 	bl	80012e0 <__udivmoddi4>
 8001282:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800128a:	b004      	add	sp, #16
 800128c:	4240      	negs	r0, r0
 800128e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001292:	4770      	bx	lr
 8001294:	4252      	negs	r2, r2
 8001296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800129a:	f000 f821 	bl	80012e0 <__udivmoddi4>
 800129e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012a6:	b004      	add	sp, #16
 80012a8:	4252      	negs	r2, r2
 80012aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012ae:	4770      	bx	lr

080012b0 <__aeabi_uldivmod>:
 80012b0:	b953      	cbnz	r3, 80012c8 <__aeabi_uldivmod+0x18>
 80012b2:	b94a      	cbnz	r2, 80012c8 <__aeabi_uldivmod+0x18>
 80012b4:	2900      	cmp	r1, #0
 80012b6:	bf08      	it	eq
 80012b8:	2800      	cmpeq	r0, #0
 80012ba:	bf1c      	itt	ne
 80012bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80012c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80012c4:	f000 b96e 	b.w	80015a4 <__aeabi_idiv0>
 80012c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80012cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012d0:	f000 f806 	bl	80012e0 <__udivmoddi4>
 80012d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012dc:	b004      	add	sp, #16
 80012de:	4770      	bx	lr

080012e0 <__udivmoddi4>:
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	9e08      	ldr	r6, [sp, #32]
 80012e6:	460d      	mov	r5, r1
 80012e8:	4604      	mov	r4, r0
 80012ea:	468e      	mov	lr, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8083 	bne.w	80013f8 <__udivmoddi4+0x118>
 80012f2:	428a      	cmp	r2, r1
 80012f4:	4617      	mov	r7, r2
 80012f6:	d947      	bls.n	8001388 <__udivmoddi4+0xa8>
 80012f8:	fab2 f382 	clz	r3, r2
 80012fc:	b14b      	cbz	r3, 8001312 <__udivmoddi4+0x32>
 80012fe:	f1c3 0120 	rsb	r1, r3, #32
 8001302:	fa05 fe03 	lsl.w	lr, r5, r3
 8001306:	fa20 f101 	lsr.w	r1, r0, r1
 800130a:	409f      	lsls	r7, r3
 800130c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001310:	409c      	lsls	r4, r3
 8001312:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001316:	fbbe fcf8 	udiv	ip, lr, r8
 800131a:	fa1f f987 	uxth.w	r9, r7
 800131e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001322:	fb0c f009 	mul.w	r0, ip, r9
 8001326:	0c21      	lsrs	r1, r4, #16
 8001328:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800132c:	4290      	cmp	r0, r2
 800132e:	d90a      	bls.n	8001346 <__udivmoddi4+0x66>
 8001330:	18ba      	adds	r2, r7, r2
 8001332:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001336:	f080 8118 	bcs.w	800156a <__udivmoddi4+0x28a>
 800133a:	4290      	cmp	r0, r2
 800133c:	f240 8115 	bls.w	800156a <__udivmoddi4+0x28a>
 8001340:	f1ac 0c02 	sub.w	ip, ip, #2
 8001344:	443a      	add	r2, r7
 8001346:	1a12      	subs	r2, r2, r0
 8001348:	fbb2 f0f8 	udiv	r0, r2, r8
 800134c:	fb08 2210 	mls	r2, r8, r0, r2
 8001350:	fb00 f109 	mul.w	r1, r0, r9
 8001354:	b2a4      	uxth	r4, r4
 8001356:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800135a:	42a1      	cmp	r1, r4
 800135c:	d909      	bls.n	8001372 <__udivmoddi4+0x92>
 800135e:	193c      	adds	r4, r7, r4
 8001360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001364:	f080 8103 	bcs.w	800156e <__udivmoddi4+0x28e>
 8001368:	42a1      	cmp	r1, r4
 800136a:	f240 8100 	bls.w	800156e <__udivmoddi4+0x28e>
 800136e:	3802      	subs	r0, #2
 8001370:	443c      	add	r4, r7
 8001372:	1a64      	subs	r4, r4, r1
 8001374:	2100      	movs	r1, #0
 8001376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800137a:	b11e      	cbz	r6, 8001384 <__udivmoddi4+0xa4>
 800137c:	2200      	movs	r2, #0
 800137e:	40dc      	lsrs	r4, r3
 8001380:	e9c6 4200 	strd	r4, r2, [r6]
 8001384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001388:	b902      	cbnz	r2, 800138c <__udivmoddi4+0xac>
 800138a:	deff      	udf	#255	; 0xff
 800138c:	fab2 f382 	clz	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d14f      	bne.n	8001434 <__udivmoddi4+0x154>
 8001394:	1a8d      	subs	r5, r1, r2
 8001396:	2101      	movs	r1, #1
 8001398:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800139c:	fa1f f882 	uxth.w	r8, r2
 80013a0:	fbb5 fcfe 	udiv	ip, r5, lr
 80013a4:	fb0e 551c 	mls	r5, lr, ip, r5
 80013a8:	fb08 f00c 	mul.w	r0, r8, ip
 80013ac:	0c22      	lsrs	r2, r4, #16
 80013ae:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80013b2:	42a8      	cmp	r0, r5
 80013b4:	d907      	bls.n	80013c6 <__udivmoddi4+0xe6>
 80013b6:	197d      	adds	r5, r7, r5
 80013b8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80013bc:	d202      	bcs.n	80013c4 <__udivmoddi4+0xe4>
 80013be:	42a8      	cmp	r0, r5
 80013c0:	f200 80e9 	bhi.w	8001596 <__udivmoddi4+0x2b6>
 80013c4:	4694      	mov	ip, r2
 80013c6:	1a2d      	subs	r5, r5, r0
 80013c8:	fbb5 f0fe 	udiv	r0, r5, lr
 80013cc:	fb0e 5510 	mls	r5, lr, r0, r5
 80013d0:	fb08 f800 	mul.w	r8, r8, r0
 80013d4:	b2a4      	uxth	r4, r4
 80013d6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013da:	45a0      	cmp	r8, r4
 80013dc:	d907      	bls.n	80013ee <__udivmoddi4+0x10e>
 80013de:	193c      	adds	r4, r7, r4
 80013e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80013e4:	d202      	bcs.n	80013ec <__udivmoddi4+0x10c>
 80013e6:	45a0      	cmp	r8, r4
 80013e8:	f200 80d9 	bhi.w	800159e <__udivmoddi4+0x2be>
 80013ec:	4610      	mov	r0, r2
 80013ee:	eba4 0408 	sub.w	r4, r4, r8
 80013f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80013f6:	e7c0      	b.n	800137a <__udivmoddi4+0x9a>
 80013f8:	428b      	cmp	r3, r1
 80013fa:	d908      	bls.n	800140e <__udivmoddi4+0x12e>
 80013fc:	2e00      	cmp	r6, #0
 80013fe:	f000 80b1 	beq.w	8001564 <__udivmoddi4+0x284>
 8001402:	2100      	movs	r1, #0
 8001404:	e9c6 0500 	strd	r0, r5, [r6]
 8001408:	4608      	mov	r0, r1
 800140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800140e:	fab3 f183 	clz	r1, r3
 8001412:	2900      	cmp	r1, #0
 8001414:	d14b      	bne.n	80014ae <__udivmoddi4+0x1ce>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d302      	bcc.n	8001420 <__udivmoddi4+0x140>
 800141a:	4282      	cmp	r2, r0
 800141c:	f200 80b9 	bhi.w	8001592 <__udivmoddi4+0x2b2>
 8001420:	1a84      	subs	r4, r0, r2
 8001422:	eb65 0303 	sbc.w	r3, r5, r3
 8001426:	2001      	movs	r0, #1
 8001428:	469e      	mov	lr, r3
 800142a:	2e00      	cmp	r6, #0
 800142c:	d0aa      	beq.n	8001384 <__udivmoddi4+0xa4>
 800142e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001432:	e7a7      	b.n	8001384 <__udivmoddi4+0xa4>
 8001434:	409f      	lsls	r7, r3
 8001436:	f1c3 0220 	rsb	r2, r3, #32
 800143a:	40d1      	lsrs	r1, r2
 800143c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001440:	fbb1 f0fe 	udiv	r0, r1, lr
 8001444:	fa1f f887 	uxth.w	r8, r7
 8001448:	fb0e 1110 	mls	r1, lr, r0, r1
 800144c:	fa24 f202 	lsr.w	r2, r4, r2
 8001450:	409d      	lsls	r5, r3
 8001452:	fb00 fc08 	mul.w	ip, r0, r8
 8001456:	432a      	orrs	r2, r5
 8001458:	0c15      	lsrs	r5, r2, #16
 800145a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800145e:	45ac      	cmp	ip, r5
 8001460:	fa04 f403 	lsl.w	r4, r4, r3
 8001464:	d909      	bls.n	800147a <__udivmoddi4+0x19a>
 8001466:	197d      	adds	r5, r7, r5
 8001468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800146c:	f080 808f 	bcs.w	800158e <__udivmoddi4+0x2ae>
 8001470:	45ac      	cmp	ip, r5
 8001472:	f240 808c 	bls.w	800158e <__udivmoddi4+0x2ae>
 8001476:	3802      	subs	r0, #2
 8001478:	443d      	add	r5, r7
 800147a:	eba5 050c 	sub.w	r5, r5, ip
 800147e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001482:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001486:	fb01 f908 	mul.w	r9, r1, r8
 800148a:	b295      	uxth	r5, r2
 800148c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001490:	45a9      	cmp	r9, r5
 8001492:	d907      	bls.n	80014a4 <__udivmoddi4+0x1c4>
 8001494:	197d      	adds	r5, r7, r5
 8001496:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800149a:	d274      	bcs.n	8001586 <__udivmoddi4+0x2a6>
 800149c:	45a9      	cmp	r9, r5
 800149e:	d972      	bls.n	8001586 <__udivmoddi4+0x2a6>
 80014a0:	3902      	subs	r1, #2
 80014a2:	443d      	add	r5, r7
 80014a4:	eba5 0509 	sub.w	r5, r5, r9
 80014a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014ac:	e778      	b.n	80013a0 <__udivmoddi4+0xc0>
 80014ae:	f1c1 0720 	rsb	r7, r1, #32
 80014b2:	408b      	lsls	r3, r1
 80014b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80014b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80014bc:	fa25 f407 	lsr.w	r4, r5, r7
 80014c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80014c4:	fbb4 f9fe 	udiv	r9, r4, lr
 80014c8:	fa1f f88c 	uxth.w	r8, ip
 80014cc:	fb0e 4419 	mls	r4, lr, r9, r4
 80014d0:	fa20 f307 	lsr.w	r3, r0, r7
 80014d4:	fb09 fa08 	mul.w	sl, r9, r8
 80014d8:	408d      	lsls	r5, r1
 80014da:	431d      	orrs	r5, r3
 80014dc:	0c2b      	lsrs	r3, r5, #16
 80014de:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80014e2:	45a2      	cmp	sl, r4
 80014e4:	fa02 f201 	lsl.w	r2, r2, r1
 80014e8:	fa00 f301 	lsl.w	r3, r0, r1
 80014ec:	d909      	bls.n	8001502 <__udivmoddi4+0x222>
 80014ee:	eb1c 0404 	adds.w	r4, ip, r4
 80014f2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80014f6:	d248      	bcs.n	800158a <__udivmoddi4+0x2aa>
 80014f8:	45a2      	cmp	sl, r4
 80014fa:	d946      	bls.n	800158a <__udivmoddi4+0x2aa>
 80014fc:	f1a9 0902 	sub.w	r9, r9, #2
 8001500:	4464      	add	r4, ip
 8001502:	eba4 040a 	sub.w	r4, r4, sl
 8001506:	fbb4 f0fe 	udiv	r0, r4, lr
 800150a:	fb0e 4410 	mls	r4, lr, r0, r4
 800150e:	fb00 fa08 	mul.w	sl, r0, r8
 8001512:	b2ad      	uxth	r5, r5
 8001514:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001518:	45a2      	cmp	sl, r4
 800151a:	d908      	bls.n	800152e <__udivmoddi4+0x24e>
 800151c:	eb1c 0404 	adds.w	r4, ip, r4
 8001520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001524:	d22d      	bcs.n	8001582 <__udivmoddi4+0x2a2>
 8001526:	45a2      	cmp	sl, r4
 8001528:	d92b      	bls.n	8001582 <__udivmoddi4+0x2a2>
 800152a:	3802      	subs	r0, #2
 800152c:	4464      	add	r4, ip
 800152e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001532:	fba0 8902 	umull	r8, r9, r0, r2
 8001536:	eba4 040a 	sub.w	r4, r4, sl
 800153a:	454c      	cmp	r4, r9
 800153c:	46c6      	mov	lr, r8
 800153e:	464d      	mov	r5, r9
 8001540:	d319      	bcc.n	8001576 <__udivmoddi4+0x296>
 8001542:	d016      	beq.n	8001572 <__udivmoddi4+0x292>
 8001544:	b15e      	cbz	r6, 800155e <__udivmoddi4+0x27e>
 8001546:	ebb3 020e 	subs.w	r2, r3, lr
 800154a:	eb64 0405 	sbc.w	r4, r4, r5
 800154e:	fa04 f707 	lsl.w	r7, r4, r7
 8001552:	fa22 f301 	lsr.w	r3, r2, r1
 8001556:	431f      	orrs	r7, r3
 8001558:	40cc      	lsrs	r4, r1
 800155a:	e9c6 7400 	strd	r7, r4, [r6]
 800155e:	2100      	movs	r1, #0
 8001560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001564:	4631      	mov	r1, r6
 8001566:	4630      	mov	r0, r6
 8001568:	e70c      	b.n	8001384 <__udivmoddi4+0xa4>
 800156a:	468c      	mov	ip, r1
 800156c:	e6eb      	b.n	8001346 <__udivmoddi4+0x66>
 800156e:	4610      	mov	r0, r2
 8001570:	e6ff      	b.n	8001372 <__udivmoddi4+0x92>
 8001572:	4543      	cmp	r3, r8
 8001574:	d2e6      	bcs.n	8001544 <__udivmoddi4+0x264>
 8001576:	ebb8 0e02 	subs.w	lr, r8, r2
 800157a:	eb69 050c 	sbc.w	r5, r9, ip
 800157e:	3801      	subs	r0, #1
 8001580:	e7e0      	b.n	8001544 <__udivmoddi4+0x264>
 8001582:	4628      	mov	r0, r5
 8001584:	e7d3      	b.n	800152e <__udivmoddi4+0x24e>
 8001586:	4611      	mov	r1, r2
 8001588:	e78c      	b.n	80014a4 <__udivmoddi4+0x1c4>
 800158a:	4681      	mov	r9, r0
 800158c:	e7b9      	b.n	8001502 <__udivmoddi4+0x222>
 800158e:	4608      	mov	r0, r1
 8001590:	e773      	b.n	800147a <__udivmoddi4+0x19a>
 8001592:	4608      	mov	r0, r1
 8001594:	e749      	b.n	800142a <__udivmoddi4+0x14a>
 8001596:	f1ac 0c02 	sub.w	ip, ip, #2
 800159a:	443d      	add	r5, r7
 800159c:	e713      	b.n	80013c6 <__udivmoddi4+0xe6>
 800159e:	3802      	subs	r0, #2
 80015a0:	443c      	add	r4, r7
 80015a2:	e724      	b.n	80013ee <__udivmoddi4+0x10e>

080015a4 <__aeabi_idiv0>:
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_ADC1_Init+0x58>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <MX_ADC1_Init+0x5c>)
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_ADC1_Init+0x58>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_ADC1_Init+0x58>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_ADC1_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_ADC1_Init+0x58>)
 80015d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_ADC1_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <MX_ADC1_Init+0x58>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_ADC1_Init+0x58>)
 80015e8:	f003 f946 	bl	8004878 <HAL_ADC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015f2:	f002 f845 	bl	8003680 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000693c 	.word	0x2000693c
 8001604:	40012400 	.word	0x40012400

08001608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_ADC_MspInit+0x98>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d137      	bne.n	8001698 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_ADC_MspInit+0x9c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	4619      	mov	r1, r3
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_ADC_MspInit+0xa0>)
 8001680:	f005 f8ba 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001684:	2303      	movs	r3, #3
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001688:	2303      	movs	r3, #3
 800168a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <HAL_ADC_MspInit+0xa4>)
 8001694:	f005 f8b0 	bl	80067f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40012400 	.word	0x40012400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_CAN_Init+0x64>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <MX_CAN_Init+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_CAN_Init+0x64>)
 80016bc:	2204      	movs	r2, #4
 80016be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_CAN_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_CAN_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_CAN_Init+0x64>)
 80016ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80016d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_CAN_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_CAN_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_CAN_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_CAN_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_CAN_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_CAN_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_CAN_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_CAN_Init+0x64>)
 8001700:	f003 fd23 	bl	800514a <HAL_CAN_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800170a:	f001 ffb9 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000696c 	.word	0x2000696c
 8001718:	40006400 	.word	0x40006400

0800171c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <HAL_CAN_MspInit+0x9c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d139      	bne.n	80017b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001746:	61d3      	str	r3, [r2, #28]
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_CAN_MspInit+0xa0>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800176c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <HAL_CAN_MspInit+0xa4>)
 8001782:	f005 f839 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <HAL_CAN_MspInit+0xa4>)
 800179c:	f005 f82c 	bl	80067f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2014      	movs	r0, #20
 80017a6:	f004 fae6 	bl	8005d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80017aa:	2014      	movs	r0, #20
 80017ac:	f004 faff 	bl	8005dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40006400 	.word	0x40006400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800

080017c4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017d0:	f009 f90a 	bl	800a9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <pvPortMallocMicroROS+0x174>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80017dc:	f000 f98a 	bl	8001af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017e0:	4b56      	ldr	r3, [pc, #344]	; (800193c <pvPortMallocMicroROS+0x178>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 808e 	bne.w	800190a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01d      	beq.n	8001830 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80017f4:	2208      	movs	r2, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	2b00      	cmp	r3, #0
 8001804:	d014      	beq.n	8001830 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f023 0307 	bic.w	r3, r3, #7
 800180c:	3308      	adds	r3, #8
 800180e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800182c:	bf00      	nop
 800182e:	e7fe      	b.n	800182e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d069      	beq.n	800190a <pvPortMallocMicroROS+0x146>
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <pvPortMallocMicroROS+0x17c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d864      	bhi.n	800190a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <pvPortMallocMicroROS+0x180>)
 8001842:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <pvPortMallocMicroROS+0x180>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800184a:	e004      	b.n	8001856 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d903      	bls.n	8001868 <pvPortMallocMicroROS+0xa4>
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f1      	bne.n	800184c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <pvPortMallocMicroROS+0x174>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186e:	429a      	cmp	r2, r3
 8001870:	d04b      	beq.n	800190a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	4413      	add	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	2308      	movs	r3, #8
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	429a      	cmp	r2, r3
 8001892:	d91f      	bls.n	80018d4 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	613b      	str	r3, [r7, #16]
}
 80018b8:	bf00      	nop
 80018ba:	e7fe      	b.n	80018ba <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad2      	subs	r2, r2, r3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018ce:	69b8      	ldr	r0, [r7, #24]
 80018d0:	f000 f972 	bl	8001bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <pvPortMallocMicroROS+0x17c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <pvPortMallocMicroROS+0x17c>)
 80018e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <pvPortMallocMicroROS+0x17c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <pvPortMallocMicroROS+0x184>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d203      	bcs.n	80018f6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <pvPortMallocMicroROS+0x17c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <pvPortMallocMicroROS+0x184>)
 80018f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <pvPortMallocMicroROS+0x178>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800190a:	f009 f87b 	bl	800aa04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191c:	f383 8811 	msr	BASEPRI, r3
 8001920:	f3bf 8f6f 	isb	sy
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	60fb      	str	r3, [r7, #12]
}
 800192a:	bf00      	nop
 800192c:	e7fe      	b.n	800192c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800192e:	69fb      	ldr	r3, [r7, #28]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20002ac4 	.word	0x20002ac4
 800193c:	20002ad0 	.word	0x20002ad0
 8001940:	20002ac8 	.word	0x20002ac8
 8001944:	20002abc 	.word	0x20002abc
 8001948:	20002acc 	.word	0x20002acc

0800194c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d048      	beq.n	80019f0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800195e:	2308      	movs	r3, #8
 8001960:	425b      	negs	r3, r3
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <vPortFreeMicroROS+0xac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <vPortFreeMicroROS+0x44>
	__asm volatile
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	60fb      	str	r3, [r7, #12]
}
 800198c:	bf00      	nop
 800198e:	e7fe      	b.n	800198e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <vPortFreeMicroROS+0x62>
	__asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	60bb      	str	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	e7fe      	b.n	80019ac <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <vPortFreeMicroROS+0xac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d019      	beq.n	80019f0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d115      	bne.n	80019f0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <vPortFreeMicroROS+0xac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019d4:	f009 f808 	bl	800a9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <vPortFreeMicroROS+0xb0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <vPortFreeMicroROS+0xb0>)
 80019e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019e6:	6938      	ldr	r0, [r7, #16]
 80019e8:	f000 f8e6 	bl	8001bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019ec:	f009 f80a 	bl	800aa04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20002ad0 	.word	0x20002ad0
 80019fc:	20002ac8 	.word	0x20002ac8

08001a00 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	425b      	negs	r3, r3
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <getBlockSize+0x34>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

	return count;
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20002ad0 	.word	0x20002ad0

08001a38 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a42:	f008 ffd1 	bl	800a9e8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7ff febc 	bl	80017c4 <pvPortMallocMicroROS>
 8001a4c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a52:	2308      	movs	r3, #8
 8001a54:	425b      	negs	r3, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <pvPortReallocMicroROS+0x70>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001a76:	e007      	b.n	8001a88 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	1c53      	adds	r3, r2, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1c59      	adds	r1, r3, #1
 8001a82:	61b9      	str	r1, [r7, #24]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	617a      	str	r2, [r7, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f2      	bne.n	8001a78 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff5a 	bl	800194c <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001a98:	f008 ffb4 	bl	800aa04 <xTaskResumeAll>

	return newmem;
 8001a9c:	693b      	ldr	r3, [r7, #16]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20002ad0 	.word	0x20002ad0

08001aac <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001ab6:	f008 ff97 	bl	800a9e8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f7ff fe7d 	bl	80017c4 <pvPortMallocMicroROS>
 8001aca:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001ad0:	e004      	b.n	8001adc <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	613a      	str	r2, [r7, #16]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	617a      	str	r2, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f5      	bne.n	8001ad2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ae6:	f008 ff8d 	bl	800aa04 <xTaskResumeAll>
  	return mem;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001afa:	f242 7310 	movw	r3, #10000	; 0x2710
 8001afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <prvHeapInit+0xac>)
 8001b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3307      	adds	r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <prvHeapInit+0xac>)
 8001b24:	4413      	add	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <prvHeapInit+0xb0>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <prvHeapInit+0xb0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b40:	2208      	movs	r2, #8
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 0307 	bic.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <prvHeapInit+0xb4>)
 8001b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <prvHeapInit+0xb4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <prvHeapInit+0xb4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <prvHeapInit+0xb4>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <prvHeapInit+0xb8>)
 8001b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <prvHeapInit+0xbc>)
 8001b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <prvHeapInit+0xc0>)
 8001b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200003ac 	.word	0x200003ac
 8001ba4:	20002abc 	.word	0x20002abc
 8001ba8:	20002ac4 	.word	0x20002ac4
 8001bac:	20002acc 	.word	0x20002acc
 8001bb0:	20002ac8 	.word	0x20002ac8
 8001bb4:	20002ad0 	.word	0x20002ad0

08001bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <prvInsertBlockIntoFreeList+0xa8>)
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e002      	b.n	8001bcc <prvInsertBlockIntoFreeList+0x14>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d8f7      	bhi.n	8001bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	4413      	add	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d108      	bne.n	8001bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	441a      	add	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d118      	bne.n	8001c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <prvInsertBlockIntoFreeList+0xac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d00d      	beq.n	8001c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e008      	b.n	8001c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <prvInsertBlockIntoFreeList+0xac>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e003      	b.n	8001c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d002      	beq.n	8001c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20002abc 	.word	0x20002abc
 8001c64:	20002ac4 	.word	0x20002ac4

08001c68 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_DAC_Init+0x60>)
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <MX_DAC_Init+0x64>)
 8001c7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001c7c:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <MX_DAC_Init+0x60>)
 8001c7e:	f004 f8a4 	bl	8005dca <HAL_DAC_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001c88:	f001 fcfa 	bl	8003680 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	2200      	movs	r2, #0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_DAC_Init+0x60>)
 8001c9c:	f004 f8db 	bl	8005e56 <HAL_DAC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001ca6:	f001 fceb 	bl	8003680 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	2210      	movs	r2, #16
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_DAC_Init+0x60>)
 8001cb2:	f004 f8d0 	bl	8005e56 <HAL_DAC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001cbc:	f001 fce0 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20006994 	.word	0x20006994
 8001ccc:	40007400 	.word	0x40007400

08001cd0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_DAC_MspInit+0x6c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d121      	bne.n	8001d34 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_DAC_MspInit+0x70>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d20:	2330      	movs	r3, #48	; 0x30
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HAL_DAC_MspInit+0x74>)
 8001d30:	f004 fd62 	bl	80067f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40007400 	.word	0x40007400
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010800 	.word	0x40010800

08001d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_DMA_Init+0x48>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MX_DMA_Init+0x48>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6153      	str	r3, [r2, #20]
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_DMA_Init+0x48>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f004 f803 	bl	8005d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d70:	2010      	movs	r0, #16
 8001d72:	f004 f81c 	bl	8005dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f003 fffb 	bl	8005d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d80:	2011      	movs	r0, #17
 8001d82:	f004 f814 	bl	8005dae <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000

08001d94 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001da2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <cubemx_transport_open+0x28>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f006 fe44 	bl	8008a38 <HAL_UART_Receive_DMA>
    return true;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20002ad4 	.word	0x20002ad4

08001dc0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f006 fe61 	bl	8008a98 <HAL_UART_DMAStop>
    return true;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001df4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d11c      	bne.n	8001e3c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f006 fda8 	bl	8008960 <HAL_UART_Transmit_DMA>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e14:	e002      	b.n	8001e1c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f007 fdc0 	bl	800999c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <cubemx_transport_write+0x4e>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d1f3      	bne.n	8001e16 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <cubemx_transport_write+0x58>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	e002      	b.n	8001e3e <cubemx_transport_write+0x5e>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e000      	b.n	8001e3e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e3c:	2300      	movs	r3, #0
    }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e5c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e62:	b672      	cpsid	i
}
 8001e64:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <cubemx_transport_read+0x9c>)
 8001e74:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e76:	b662      	cpsie	i
}
 8001e78:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f007 fd8b 	bl	800999c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <cubemx_transport_read+0xa0>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <cubemx_transport_read+0x9c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d103      	bne.n	8001e9a <cubemx_transport_read+0x52>
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbe3      	blt.n	8001e62 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e9e:	e011      	b.n	8001ec4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <cubemx_transport_read+0xa0>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	4910      	ldr	r1, [pc, #64]	; (8001eec <cubemx_transport_read+0xa4>)
 8001eac:	5c8a      	ldrb	r2, [r1, r2]
 8001eae:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <cubemx_transport_read+0xa0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <cubemx_transport_read+0xa0>)
 8001ebc:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <cubemx_transport_read+0xa0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <cubemx_transport_read+0x9c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d003      	beq.n	8001ed8 <cubemx_transport_read+0x90>
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3e3      	bcc.n	8001ea0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200032d8 	.word	0x200032d8
 8001ee8:	200032d4 	.word	0x200032d4
 8001eec:	20002ad4 	.word	0x20002ad4

08001ef0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
      HAL_TIM_Base_Start_IT(&htim2);
 8001ef4:	4837      	ldr	r0, [pc, #220]	; (8001fd4 <MX_FREERTOS_Init+0xe4>)
 8001ef6:	f005 fc79 	bl	80077ec <HAL_TIM_Base_Start_IT>
   // CAN configuration transmiter
	  txHeader.DLC = 8;
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <MX_FREERTOS_Init+0xe8>)
 8001efc:	2208      	movs	r2, #8
 8001efe:	611a      	str	r2, [r3, #16]
	  txHeader.IDE = CAN_ID_STD; //CAN_ID_EXT
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_FREERTOS_Init+0xe8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
	  txHeader.RTR = CAN_RTR_DATA;
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <MX_FREERTOS_Init+0xe8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
	  txHeader.StdId = 0x2BC;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <MX_FREERTOS_Init+0xe8>)
 8001f0e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001f12:	601a      	str	r2, [r3, #0]

   // CAN configuration filter
	  canfil.FilterActivation = CAN_FILTER_ENABLE;
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	621a      	str	r2, [r3, #32]
	  canfil.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	615a      	str	r2, [r3, #20]
	  canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
	  canfil.FilterIdHigh =0xFF;
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	601a      	str	r2, [r3, #0]
	  canfil.FilterIdLow = 0;
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
	  canfil.FilterMaskIdHigh = 0x000;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
	  canfil.FilterMaskIdLow = 0x0000;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
	  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
	  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	61da      	str	r2, [r3, #28]
	  canfil.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan,&canfil);
 8001f50:	4922      	ldr	r1, [pc, #136]	; (8001fdc <MX_FREERTOS_Init+0xec>)
 8001f52:	4823      	ldr	r0, [pc, #140]	; (8001fe0 <MX_FREERTOS_Init+0xf0>)
 8001f54:	f003 f9f4 	bl	8005340 <HAL_CAN_ConfigFilter>

    // Start Can
	 HAL_CAN_Start(&hcan);
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <MX_FREERTOS_Init+0xf0>)
 8001f5a:	f003 faba 	bl	80054d2 <HAL_CAN_Start>
     // Start Callback receive data
	 if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001f5e:	2102      	movs	r1, #2
 8001f60:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <MX_FREERTOS_Init+0xf0>)
 8001f62:	f003 fc0b 	bl	800577c <HAL_CAN_ActivateNotification>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_FREERTOS_Init+0x80>
	 {
		  Error_Handler();
 8001f6c:	f001 fb88 	bl	8003680 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <MX_FREERTOS_Init+0xf4>)
 8001f72:	2100      	movs	r1, #0
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <MX_FREERTOS_Init+0xf8>)
 8001f76:	f007 fb73 	bl	8009660 <osThreadNew>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <MX_FREERTOS_Init+0xfc>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* creation of digital_inputs */
  digital_inputsHandle = osThreadNew(digital_inputs_task, NULL, &digital_inputs_attributes);
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <MX_FREERTOS_Init+0x100>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <MX_FREERTOS_Init+0x104>)
 8001f86:	f007 fb6b 	bl	8009660 <osThreadNew>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <MX_FREERTOS_Init+0x108>)
 8001f8e:	6013      	str	r3, [r2, #0]

  /* creation of analog_input */
  analog_inputHandle = osThreadNew(analog_input_task, NULL, &analog_input_attributes);
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <MX_FREERTOS_Init+0x10c>)
 8001f92:	2100      	movs	r1, #0
 8001f94:	481a      	ldr	r0, [pc, #104]	; (8002000 <MX_FREERTOS_Init+0x110>)
 8001f96:	f007 fb63 	bl	8009660 <osThreadNew>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <MX_FREERTOS_Init+0x114>)
 8001f9e:	6013      	str	r3, [r2, #0]

  /* creation of auto_man_mod */
  auto_man_modHandle = osThreadNew(automatic_manual_mode_Task, NULL, &auto_man_mod_attributes);
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <MX_FREERTOS_Init+0x118>)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <MX_FREERTOS_Init+0x11c>)
 8001fa6:	f007 fb5b 	bl	8009660 <osThreadNew>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a18      	ldr	r2, [pc, #96]	; (8002010 <MX_FREERTOS_Init+0x120>)
 8001fae:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <MX_FREERTOS_Init+0x124>)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <MX_FREERTOS_Init+0x128>)
 8001fb6:	f007 fb53 	bl	8009660 <osThreadNew>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <MX_FREERTOS_Init+0x12c>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* creation of Imu_gps_steer */
  Imu_gps_steerHandle = osThreadNew(Imu_gps_steer_function, NULL, &Imu_gps_steer_attributes);
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <MX_FREERTOS_Init+0x130>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <MX_FREERTOS_Init+0x134>)
 8001fc6:	f007 fb4b 	bl	8009660 <osThreadNew>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <MX_FREERTOS_Init+0x138>)
 8001fce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200091d8 	.word	0x200091d8
 8001fd8:	200069b0 	.word	0x200069b0
 8001fdc:	20006c08 	.word	0x20006c08
 8001fe0:	2000696c 	.word	0x2000696c
 8001fe4:	0801c13c 	.word	0x0801c13c
 8001fe8:	08002031 	.word	0x08002031
 8001fec:	200069d0 	.word	0x200069d0
 8001ff0:	0801c160 	.word	0x0801c160
 8001ff4:	080026f9 	.word	0x080026f9
 8001ff8:	200069f0 	.word	0x200069f0
 8001ffc:	0801c184 	.word	0x0801c184
 8002000:	08002805 	.word	0x08002805
 8002004:	200090f8 	.word	0x200090f8
 8002008:	0801c1a8 	.word	0x0801c1a8
 800200c:	080028b5 	.word	0x080028b5
 8002010:	20006ac0 	.word	0x20006ac0
 8002014:	0801c1cc 	.word	0x0801c1cc
 8002018:	08002b11 	.word	0x08002b11
 800201c:	20006ab8 	.word	0x20006ab8
 8002020:	0801c1f0 	.word	0x0801c1f0
 8002024:	08002be9 	.word	0x08002be9
 8002028:	200069a8 	.word	0x200069a8
 800202c:	00000000 	.word	0x00000000

08002030 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b0d8      	sub	sp, #352	; 0x160
 8002034:	af02      	add	r7, sp, #8
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */

	// micro-ROS configuration
		  rmw_uros_set_custom_transport(
 800203c:	4bb5      	ldr	r3, [pc, #724]	; (8002314 <task_ros2_function+0x2e4>)
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	4bb5      	ldr	r3, [pc, #724]	; (8002318 <task_ros2_function+0x2e8>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4bb5      	ldr	r3, [pc, #724]	; (800231c <task_ros2_function+0x2ec>)
 8002046:	4ab6      	ldr	r2, [pc, #728]	; (8002320 <task_ros2_function+0x2f0>)
 8002048:	49b6      	ldr	r1, [pc, #728]	; (8002324 <task_ros2_function+0x2f4>)
 800204a:	2001      	movs	r0, #1
 800204c:	f00d fcc6 	bl	800f9dc <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002050:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002054:	4618      	mov	r0, r3
 8002056:	f00d f94f 	bl	800f2f8 <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 800205a:	4bb3      	ldr	r3, [pc, #716]	; (8002328 <task_ros2_function+0x2f8>)
 800205c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  freeRTOS_allocator.deallocate = microros_deallocate;
 8002060:	4bb2      	ldr	r3, [pc, #712]	; (800232c <task_ros2_function+0x2fc>)
 8002062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  freeRTOS_allocator.reallocate = microros_reallocate;
 8002066:	4bb2      	ldr	r3, [pc, #712]	; (8002330 <task_ros2_function+0x300>)
 8002068:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800206c:	4bb1      	ldr	r3, [pc, #708]	; (8002334 <task_ros2_function+0x304>)
 800206e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002072:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002076:	4618      	mov	r0, r3
 8002078:	f00d f94c 	bl	800f314 <rcutils_set_default_allocator>
 800207c:	4603      	mov	r3, r0
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8002088:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800208c:	48aa      	ldr	r0, [pc, #680]	; (8002338 <task_ros2_function+0x308>)
 800208e:	f017 fd91 	bl	8019bb4 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8002092:	463b      	mov	r3, r7
 8002094:	4618      	mov	r0, r3
 8002096:	f00d f95d 	bl	800f354 <rcutils_get_default_allocator>
 800209a:	463b      	mov	r3, r7
 800209c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80020a0:	461d      	mov	r5, r3
 80020a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 80020aa:	f00c f8d7 	bl	800e25c <rcl_get_zero_initialized_init_options>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b4:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 80020b6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80020ba:	466a      	mov	r2, sp
 80020bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80020c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ce:	4620      	mov	r0, r4
 80020d0:	f00c f8c6 	bl	800e260 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80020d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020d8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	f00c ffec 	bl	800f0c4 <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "golfinho", "acquisition_system", &support);
 80020ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020f0:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80020f4:	4a91      	ldr	r2, [pc, #580]	; (800233c <task_ros2_function+0x30c>)
 80020f6:	4992      	ldr	r1, [pc, #584]	; (8002340 <task_ros2_function+0x310>)
 80020f8:	f00d f822 	bl	800f140 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80020fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002100:	f00e fb5c 	bl	80107bc <rmw_uros_sync_session>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <task_ros2_function+0xe4>
		  printf("Error on time sync (line %d)\n", __LINE__);
 800210a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800210e:	488d      	ldr	r0, [pc, #564]	; (8002344 <task_ros2_function+0x314>)
 8002110:	f017 fd50 	bl	8019bb4 <iprintf>

	  // ros2_gpio_input_pub
	  rclc_publisher_init_default(
 8002114:	f00f f8d6 	bl	80112c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>
 8002118:	4602      	mov	r2, r0
 800211a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800211e:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <task_ros2_function+0x318>)
 8002120:	488a      	ldr	r0, [pc, #552]	; (800234c <task_ros2_function+0x31c>)
 8002122:	f00d f849 	bl	800f1b8 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt8MultiArray),
			  "/golfinho/diagnostics/status_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 8002126:	f00f f8c9 	bl	80112bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 800212a:	4602      	mov	r2, r0
 800212c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002130:	4b87      	ldr	r3, [pc, #540]	; (8002350 <task_ros2_function+0x320>)
 8002132:	4888      	ldr	r0, [pc, #544]	; (8002354 <task_ros2_function+0x324>)
 8002134:	f00d f840 	bl	800f1b8 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
			  "/golfinho/diagnostics/motion_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 8002138:	f00e fe8c 	bl	8010e54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800213c:	4602      	mov	r2, r0
 800213e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <task_ros2_function+0x328>)
 8002144:	4885      	ldr	r0, [pc, #532]	; (800235c <task_ros2_function+0x32c>)
 8002146:	f00d f837 	bl	800f1b8 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/golfinho/imu");

	  // ros2_gps
	  rclc_publisher_init_default(
 800214a:	f00e fe85 	bl	8010e58 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 800214e:	4602      	mov	r2, r0
 8002150:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <task_ros2_function+0x330>)
 8002156:	4883      	ldr	r0, [pc, #524]	; (8002364 <task_ros2_function+0x334>)
 8002158:	f00d f82e 	bl	800f1b8 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
			  "/golfinho/gps");

	  // odom_pub
	  rclc_publisher_init_default(
 800215c:	f00b ffba 	bl	800e0d4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002160:	4602      	mov	r2, r0
 8002162:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002166:	4b80      	ldr	r3, [pc, #512]	; (8002368 <task_ros2_function+0x338>)
 8002168:	4880      	ldr	r0, [pc, #512]	; (800236c <task_ros2_function+0x33c>)
 800216a:	f00d f825 	bl	800f1b8 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
			  "/golfinho/odom");

	  //create cmd_vel_sub
	  cmd_vel_sub = rcl_get_zero_initialized_subscription();
 800216e:	f00c faed 	bl	800e74c <rcl_get_zero_initialized_subscription>
 8002172:	4603      	mov	r3, r0
 8002174:	4a7e      	ldr	r2, [pc, #504]	; (8002370 <task_ros2_function+0x340>)
 8002176:	6013      	str	r3, [r2, #0]
      rclc_subscription_init_best_effort(
 8002178:	f00a f9c8 	bl	800c50c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800217c:	4602      	mov	r2, r0
 800217e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002182:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <task_ros2_function+0x344>)
 8002184:	487a      	ldr	r0, [pc, #488]	; (8002370 <task_ros2_function+0x340>)
 8002186:	f00d f84b 	bl	800f220 <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			  "/golfinho/cmd_vel");

	  //create operation_mode_sub
	  operation_mode_sub = rcl_get_zero_initialized_subscription();
 800218a:	f00c fadf 	bl	800e74c <rcl_get_zero_initialized_subscription>
 800218e:	4603      	mov	r3, r0
 8002190:	4a79      	ldr	r2, [pc, #484]	; (8002378 <task_ros2_function+0x348>)
 8002192:	6013      	str	r3, [r2, #0]
      rclc_subscription_init_best_effort(
 8002194:	f00f f894 	bl	80112c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8>
 8002198:	4602      	mov	r2, r0
 800219a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800219e:	4b77      	ldr	r3, [pc, #476]	; (800237c <task_ros2_function+0x34c>)
 80021a0:	4875      	ldr	r0, [pc, #468]	; (8002378 <task_ros2_function+0x348>)
 80021a2:	f00d f83d 	bl	800f220 <rclc_subscription_init_best_effort>
			  "/golfinho/operation_mode");


     // Alocação de memoria das variaveis criadas pelos tipos std_msgs e outros

	  golfinho_check_status_msg.data.capacity = 5;
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <task_ros2_function+0x350>)
 80021a8:	2205      	movs	r2, #5
 80021aa:	619a      	str	r2, [r3, #24]
	  golfinho_check_status_msg.data.size = 5;
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <task_ros2_function+0x350>)
 80021ae:	2205      	movs	r2, #5
 80021b0:	615a      	str	r2, [r3, #20]
	  golfinho_check_status_msg.data.data = (uint8_t*) pvPortMalloc(golfinho_check_status_msg.data.capacity * sizeof(uint8_t));
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <task_ros2_function+0x350>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f009 ffd0 	bl	800c15c <pvPortMalloc>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a70      	ldr	r2, [pc, #448]	; (8002380 <task_ros2_function+0x350>)
 80021c0:	6113      	str	r3, [r2, #16]
	  golfinho_check_status_msg.layout.dim.capacity = 5;
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <task_ros2_function+0x350>)
 80021c4:	2205      	movs	r2, #5
 80021c6:	609a      	str	r2, [r3, #8]
	  golfinho_check_status_msg.layout.dim.size = 5;
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <task_ros2_function+0x350>)
 80021ca:	2205      	movs	r2, #5
 80021cc:	605a      	str	r2, [r3, #4]
	  golfinho_check_status_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_check_status_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <task_ros2_function+0x350>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 ffbe 	bl	800c15c <pvPortMalloc>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a67      	ldr	r2, [pc, #412]	; (8002380 <task_ros2_function+0x350>)
 80021e4:	6013      	str	r3, [r2, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021ec:	e031      	b.n	8002252 <task_ros2_function+0x222>
	 		golfinho_check_status_msg.layout.dim.data[i].label.capacity = 7;
 80021ee:	4b64      	ldr	r3, [pc, #400]	; (8002380 <task_ros2_function+0x350>)
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	2207      	movs	r2, #7
 8002202:	609a      	str	r2, [r3, #8]
	 		golfinho_check_status_msg.layout.dim.data[i].label.size = 7;
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <task_ros2_function+0x350>)
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	2207      	movs	r2, #7
 8002218:	605a      	str	r2, [r3, #4]
	 		golfinho_check_status_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_check_status_msg.layout.dim.data[i].label.capacity * sizeof(char));
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <task_ros2_function+0x350>)
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	6898      	ldr	r0, [r3, #8]
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <task_ros2_function+0x350>)
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	18cc      	adds	r4, r1, r3
 8002240:	f009 ff8c 	bl	800c15c <pvPortMalloc>
 8002244:	4603      	mov	r3, r0
 8002246:	6023      	str	r3, [r4, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 8002248:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800224c:	3301      	adds	r3, #1
 800224e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002252:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <task_ros2_function+0x350>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800225a:	429a      	cmp	r2, r3
 800225c:	d3c7      	bcc.n	80021ee <task_ros2_function+0x1be>

	 	  }

	 	  strcpy(golfinho_check_status_msg.layout.dim.data[0].label.data, "reserv");
 800225e:	4b48      	ldr	r3, [pc, #288]	; (8002380 <task_ros2_function+0x350>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a47      	ldr	r2, [pc, #284]	; (8002384 <task_ros2_function+0x354>)
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	6018      	str	r0, [r3, #0]
 800226a:	8891      	ldrh	r1, [r2, #4]
 800226c:	7992      	ldrb	r2, [r2, #6]
 800226e:	8099      	strh	r1, [r3, #4]
 8002270:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[1].label.data, "status");
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <task_ros2_function+0x350>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3314      	adds	r3, #20
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a43      	ldr	r2, [pc, #268]	; (8002388 <task_ros2_function+0x358>)
 800227c:	6810      	ldr	r0, [r2, #0]
 800227e:	6018      	str	r0, [r3, #0]
 8002280:	8891      	ldrh	r1, [r2, #4]
 8002282:	7992      	ldrb	r2, [r2, #6]
 8002284:	8099      	strh	r1, [r3, #4]
 8002286:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[2].label.data, "op_mod");
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <task_ros2_function+0x350>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3328      	adds	r3, #40	; 0x28
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3e      	ldr	r2, [pc, #248]	; (800238c <task_ros2_function+0x35c>)
 8002292:	6810      	ldr	r0, [r2, #0]
 8002294:	6018      	str	r0, [r3, #0]
 8002296:	8891      	ldrh	r1, [r2, #4]
 8002298:	7992      	ldrb	r2, [r2, #6]
 800229a:	8099      	strh	r1, [r3, #4]
 800229c:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[3].label.data, "key_th");
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <task_ros2_function+0x350>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	333c      	adds	r3, #60	; 0x3c
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <task_ros2_function+0x360>)
 80022a8:	6810      	ldr	r0, [r2, #0]
 80022aa:	6018      	str	r0, [r3, #0]
 80022ac:	8891      	ldrh	r1, [r2, #4]
 80022ae:	7992      	ldrb	r2, [r2, #6]
 80022b0:	8099      	strh	r1, [r3, #4]
 80022b2:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[4].label.data, "key_br");
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <task_ros2_function+0x350>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3350      	adds	r3, #80	; 0x50
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	; (8002394 <task_ros2_function+0x364>)
 80022be:	6810      	ldr	r0, [r2, #0]
 80022c0:	6018      	str	r0, [r3, #0]
 80022c2:	8891      	ldrh	r1, [r2, #4]
 80022c4:	7992      	ldrb	r2, [r2, #6]
 80022c6:	8099      	strh	r1, [r3, #4]
 80022c8:	719a      	strb	r2, [r3, #6]


		 	golfinho_motion_info_gpio_output_msg.data.capacity = 6;
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <task_ros2_function+0x368>)
 80022cc:	2206      	movs	r2, #6
 80022ce:	619a      	str	r2, [r3, #24]
		 	golfinho_motion_info_gpio_output_msg.data.size = 6;
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <task_ros2_function+0x368>)
 80022d2:	2206      	movs	r2, #6
 80022d4:	615a      	str	r2, [r3, #20]
		 	golfinho_motion_info_gpio_output_msg.data.data = (uint16_t*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.data.capacity * sizeof(uint16_t));
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <task_ros2_function+0x368>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4618      	mov	r0, r3
 80022de:	f009 ff3d 	bl	800c15c <pvPortMalloc>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <task_ros2_function+0x368>)
 80022e6:	6113      	str	r3, [r2, #16]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.capacity = 6;
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <task_ros2_function+0x368>)
 80022ea:	2206      	movs	r2, #6
 80022ec:	609a      	str	r2, [r3, #8]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.size = 6;
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <task_ros2_function+0x368>)
 80022f0:	2206      	movs	r2, #6
 80022f2:	605a      	str	r2, [r3, #4]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <task_ros2_function+0x368>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f009 ff2b 	bl	800c15c <pvPortMalloc>
 8002306:	4603      	mov	r3, r0
 8002308:	4a23      	ldr	r2, [pc, #140]	; (8002398 <task_ros2_function+0x368>)
 800230a:	6013      	str	r3, [r2, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002312:	e075      	b.n	8002400 <task_ros2_function+0x3d0>
 8002314:	08001e49 	.word	0x08001e49
 8002318:	08001de1 	.word	0x08001de1
 800231c:	08001dc1 	.word	0x08001dc1
 8002320:	08001d95 	.word	0x08001d95
 8002324:	200092a8 	.word	0x200092a8
 8002328:	0800368d 	.word	0x0800368d
 800232c:	080036d1 	.word	0x080036d1
 8002330:	08003709 	.word	0x08003709
 8002334:	08003775 	.word	0x08003775
 8002338:	0801b31c 	.word	0x0801b31c
 800233c:	0801b344 	.word	0x0801b344
 8002340:	0801b358 	.word	0x0801b358
 8002344:	0801b364 	.word	0x0801b364
 8002348:	0801b384 	.word	0x0801b384
 800234c:	20006ccc 	.word	0x20006ccc
 8002350:	0801b3a8 	.word	0x0801b3a8
 8002354:	20006aac 	.word	0x20006aac
 8002358:	0801b3cc 	.word	0x0801b3cc
 800235c:	200069ac 	.word	0x200069ac
 8002360:	0801b3dc 	.word	0x0801b3dc
 8002364:	200090f0 	.word	0x200090f0
 8002368:	0801b3ec 	.word	0x0801b3ec
 800236c:	20006ab4 	.word	0x20006ab4
 8002370:	200069c8 	.word	0x200069c8
 8002374:	0801b3fc 	.word	0x0801b3fc
 8002378:	20006aa4 	.word	0x20006aa4
 800237c:	0801b410 	.word	0x0801b410
 8002380:	20008dac 	.word	0x20008dac
 8002384:	0801b42c 	.word	0x0801b42c
 8002388:	0801b434 	.word	0x0801b434
 800238c:	0801b43c 	.word	0x0801b43c
 8002390:	0801b444 	.word	0x0801b444
 8002394:	0801b44c 	.word	0x0801b44c
 8002398:	20006c30 	.word	0x20006c30
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity = 9;
 800239c:	4bc2      	ldr	r3, [pc, #776]	; (80026a8 <task_ros2_function+0x678>)
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	2209      	movs	r2, #9
 80023b0:	609a      	str	r2, [r3, #8]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.size = 9;
 80023b2:	4bbd      	ldr	r3, [pc, #756]	; (80026a8 <task_ros2_function+0x678>)
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	2209      	movs	r2, #9
 80023c6:	605a      	str	r2, [r3, #4]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80023c8:	4bb7      	ldr	r3, [pc, #732]	; (80026a8 <task_ros2_function+0x678>)
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	6898      	ldr	r0, [r3, #8]
 80023dc:	4bb2      	ldr	r3, [pc, #712]	; (80026a8 <task_ros2_function+0x678>)
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18cc      	adds	r4, r1, r3
 80023ee:	f009 feb5 	bl	800c15c <pvPortMalloc>
 80023f2:	4603      	mov	r3, r0
 80023f4:	6023      	str	r3, [r4, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 80023f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023fa:	3301      	adds	r3, #1
 80023fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002400:	4ba9      	ldr	r3, [pc, #676]	; (80026a8 <task_ros2_function+0x678>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002408:	429a      	cmp	r2, r3
 800240a:	d3c7      	bcc.n	800239c <task_ros2_function+0x36c>

			 	  }

			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[0].label.data, "reserved");
 800240c:	4ba6      	ldr	r3, [pc, #664]	; (80026a8 <task_ros2_function+0x678>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	49a6      	ldr	r1, [pc, #664]	; (80026ac <task_ros2_function+0x67c>)
 8002414:	461a      	mov	r2, r3
 8002416:	460b      	mov	r3, r1
 8002418:	cb03      	ldmia	r3!, {r0, r1}
 800241a:	6010      	str	r0, [r2, #0]
 800241c:	6051      	str	r1, [r2, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[1].label.data, "steering");
 8002422:	4ba1      	ldr	r3, [pc, #644]	; (80026a8 <task_ros2_function+0x678>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3314      	adds	r3, #20
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	49a1      	ldr	r1, [pc, #644]	; (80026b0 <task_ros2_function+0x680>)
 800242c:	461a      	mov	r2, r3
 800242e:	460b      	mov	r3, r1
 8002430:	cb03      	ldmia	r3!, {r0, r1}
 8002432:	6010      	str	r0, [r2, #0]
 8002434:	6051      	str	r1, [r2, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[2].label.data, "throttle");
 800243a:	4b9b      	ldr	r3, [pc, #620]	; (80026a8 <task_ros2_function+0x678>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3328      	adds	r3, #40	; 0x28
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	499c      	ldr	r1, [pc, #624]	; (80026b4 <task_ros2_function+0x684>)
 8002444:	461a      	mov	r2, r3
 8002446:	460b      	mov	r3, r1
 8002448:	cb03      	ldmia	r3!, {r0, r1}
 800244a:	6010      	str	r0, [r2, #0]
 800244c:	6051      	str	r1, [r2, #4]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[3].label.data, "break");
 8002452:	4b95      	ldr	r3, [pc, #596]	; (80026a8 <task_ros2_function+0x678>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	333c      	adds	r3, #60	; 0x3c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a97      	ldr	r2, [pc, #604]	; (80026b8 <task_ros2_function+0x688>)
 800245c:	6810      	ldr	r0, [r2, #0]
 800245e:	6018      	str	r0, [r3, #0]
 8002460:	8892      	ldrh	r2, [r2, #4]
 8002462:	809a      	strh	r2, [r3, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[4].label.data, "bat_car");
 8002464:	4b90      	ldr	r3, [pc, #576]	; (80026a8 <task_ros2_function+0x678>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3350      	adds	r3, #80	; 0x50
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4993      	ldr	r1, [pc, #588]	; (80026bc <task_ros2_function+0x68c>)
 800246e:	461a      	mov	r2, r3
 8002470:	460b      	mov	r3, r1
 8002472:	cb03      	ldmia	r3!, {r0, r1}
 8002474:	6010      	str	r0, [r2, #0]
 8002476:	6051      	str	r1, [r2, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[5].label.data, "bat_sys");
 8002478:	4b8b      	ldr	r3, [pc, #556]	; (80026a8 <task_ros2_function+0x678>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3364      	adds	r3, #100	; 0x64
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	498f      	ldr	r1, [pc, #572]	; (80026c0 <task_ros2_function+0x690>)
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	cb03      	ldmia	r3!, {r0, r1}
 8002488:	6010      	str	r0, [r2, #0]
 800248a:	6051      	str	r1, [r2, #4]


						int STRING_BUFFER_LEN=10;
 800248c:	230a      	movs	r3, #10
 800248e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	//imu
				    	char imu_buffer[STRING_BUFFER_LEN];
 8002492:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8002496:	1e63      	subs	r3, r4, #1
 8002498:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800249c:	4623      	mov	r3, r4
 800249e:	4618      	mov	r0, r3
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	00cb      	lsls	r3, r1, #3
 80024ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024b2:	00c2      	lsls	r2, r0, #3
 80024b4:	4623      	mov	r3, r4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00cb      	lsls	r3, r1, #3
 80024c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024ca:	00c2      	lsls	r2, r0, #3
 80024cc:	4623      	mov	r3, r4
 80024ce:	3307      	adds	r3, #7
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	ebad 0d03 	sub.w	sp, sp, r3
 80024d8:	ab02      	add	r3, sp, #8
 80024da:	3300      	adds	r3, #0
 80024dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				    	imu_.header.frame_id.data = imu_buffer;
 80024e0:	4a78      	ldr	r2, [pc, #480]	; (80026c4 <task_ros2_function+0x694>)
 80024e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80024e6:	6093      	str	r3, [r2, #8]
				    	imu_.header.frame_id.capacity = STRING_BUFFER_LEN;
 80024e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024ec:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <task_ros2_function+0x694>)
 80024ee:	6113      	str	r3, [r2, #16]
	//gps
				    	char gps_buffer[STRING_BUFFER_LEN];
 80024f0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80024f4:	1e63      	subs	r3, r4, #1
 80024f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80024fa:	4623      	mov	r3, r4
 80024fc:	4618      	mov	r0, r3
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002510:	00c2      	lsls	r2, r0, #3
 8002512:	4623      	mov	r3, r4
 8002514:	4618      	mov	r0, r3
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	00cb      	lsls	r3, r1, #3
 8002524:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002528:	00c2      	lsls	r2, r0, #3
 800252a:	4623      	mov	r3, r4
 800252c:	3307      	adds	r3, #7
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	ebad 0d03 	sub.w	sp, sp, r3
 8002536:	ab02      	add	r3, sp, #8
 8002538:	3300      	adds	r3, #0
 800253a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				    	gps_.header.frame_id.data = gps_buffer;
 800253e:	4a62      	ldr	r2, [pc, #392]	; (80026c8 <task_ros2_function+0x698>)
 8002540:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002544:	6093      	str	r3, [r2, #8]
				    	gps_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8002546:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800254a:	4a5f      	ldr	r2, [pc, #380]	; (80026c8 <task_ros2_function+0x698>)
 800254c:	6113      	str	r3, [r2, #16]
	//odom
				    	char odom_buffer[STRING_BUFFER_LEN];
 800254e:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8002552:	1e63      	subs	r3, r4, #1
 8002554:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002558:	4623      	mov	r3, r4
 800255a:	4618      	mov	r0, r3
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	00cb      	lsls	r3, r1, #3
 800256a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800256e:	00c2      	lsls	r2, r0, #3
 8002570:	4623      	mov	r3, r4
 8002572:	4618      	mov	r0, r3
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	00cb      	lsls	r3, r1, #3
 8002582:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002586:	00c2      	lsls	r2, r0, #3
 8002588:	4623      	mov	r3, r4
 800258a:	3307      	adds	r3, #7
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	ebad 0d03 	sub.w	sp, sp, r3
 8002594:	ab02      	add	r3, sp, #8
 8002596:	3300      	adds	r3, #0
 8002598:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				    	odom.header.frame_id.data = odom_buffer;
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <task_ros2_function+0x69c>)
 800259e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025a2:	6093      	str	r3, [r2, #8]
				    	odom.header.frame_id.capacity = STRING_BUFFER_LEN;
 80025a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <task_ros2_function+0x69c>)
 80025aa:	6113      	str	r3, [r2, #16]

				    	char child_frame_id[15];
				    	odom.child_frame_id.data=child_frame_id;
 80025ac:	4a47      	ldr	r2, [pc, #284]	; (80026cc <task_ros2_function+0x69c>)
 80025ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b2:	6153      	str	r3, [r2, #20]
				    	odom.child_frame_id.capacity=15;
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <task_ros2_function+0x69c>)
 80025b6:	220f      	movs	r2, #15
 80025b8:	61da      	str	r2, [r3, #28]



	  // Create a timer
	  rclc_timer_init_default(&golfinho_imu_timer, &support, RCL_MS_TO_NS(100), golfinho_imu_timer_callback);
 80025ba:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <task_ros2_function+0x6a0>)
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	a331      	add	r3, pc, #196	; (adr r3, 8002688 <task_ros2_function+0x658>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	4842      	ldr	r0, [pc, #264]	; (80026d4 <task_ros2_function+0x6a4>)
 80025ca:	f00c fe5d 	bl	800f288 <rclc_timer_init_default>
	  rclc_timer_init_default(&odom_timer, &support, RCL_MS_TO_NS(100), odom_callback);
 80025ce:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <task_ros2_function+0x6a8>)
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	a32c      	add	r3, pc, #176	; (adr r3, 8002688 <task_ros2_function+0x658>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	483f      	ldr	r0, [pc, #252]	; (80026dc <task_ros2_function+0x6ac>)
 80025de:	f00c fe53 	bl	800f288 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_motion_info_timer, &support, RCL_MS_TO_NS(250), golfinho_motion_info_timer_callback);
 80025e2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <task_ros2_function+0x6b0>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	a329      	add	r3, pc, #164	; (adr r3, 8002690 <task_ros2_function+0x660>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	483c      	ldr	r0, [pc, #240]	; (80026e4 <task_ros2_function+0x6b4>)
 80025f2:	f00c fe49 	bl	800f288 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_check_status_timer, &support, RCL_MS_TO_NS(500), golfinho_check_status_timer_callback);
 80025f6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <task_ros2_function+0x6b8>)
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	a326      	add	r3, pc, #152	; (adr r3, 8002698 <task_ros2_function+0x668>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	4839      	ldr	r0, [pc, #228]	; (80026ec <task_ros2_function+0x6bc>)
 8002606:	f00c fe3f 	bl	800f288 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_gps_timer, &support, RCL_MS_TO_NS(1000), golfinho_gps_timer_callback);
 800260a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <task_ros2_function+0x6c0>)
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	a323      	add	r3, pc, #140	; (adr r3, 80026a0 <task_ros2_function+0x670>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	4836      	ldr	r0, [pc, #216]	; (80026f4 <task_ros2_function+0x6c4>)
 800261a:	f00c fe35 	bl	800f288 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context,7, &allocator);
 800261e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002622:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002626:	f103 0108 	add.w	r1, r3, #8
 800262a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800262e:	4613      	mov	r3, r2
 8002630:	2207      	movs	r2, #7
 8002632:	f00c faf9 	bl	800ec28 <rclc_executor_init>
//	  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel,
//	 	  			  &cmd_vel_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
//      rclc_executor_add_subscription(&executor, &operation_mode_sub, &operation_mode_,
//	 	  			  &operation_mode_callback, ON_NEW_DATA);

	  rclc_executor_add_timer(&executor, &odom_timer);
 8002636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800263a:	4928      	ldr	r1, [pc, #160]	; (80026dc <task_ros2_function+0x6ac>)
 800263c:	4618      	mov	r0, r3
 800263e:	f00c fb67 	bl	800ed10 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_check_status_timer);
 8002642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002646:	4929      	ldr	r1, [pc, #164]	; (80026ec <task_ros2_function+0x6bc>)
 8002648:	4618      	mov	r0, r3
 800264a:	f00c fb61 	bl	800ed10 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_motion_info_timer);
 800264e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002652:	4924      	ldr	r1, [pc, #144]	; (80026e4 <task_ros2_function+0x6b4>)
 8002654:	4618      	mov	r0, r3
 8002656:	f00c fb5b 	bl	800ed10 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_imu_timer);
 800265a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800265e:	491d      	ldr	r1, [pc, #116]	; (80026d4 <task_ros2_function+0x6a4>)
 8002660:	4618      	mov	r0, r3
 8002662:	f00c fb55 	bl	800ed10 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_gps_timer);
 8002666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800266a:	4922      	ldr	r1, [pc, #136]	; (80026f4 <task_ros2_function+0x6c4>)
 800266c:	4618      	mov	r0, r3
 800266e:	f00c fb4f 	bl	800ed10 <rclc_executor_add_timer>

      // Run executor
	  rclc_executor_spin(&executor);
 8002672:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002676:	4618      	mov	r0, r3
 8002678:	f00c fcec 	bl	800f054 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;) osDelay(10);
 800267c:	200a      	movs	r0, #10
 800267e:	f007 f98d 	bl	800999c <osDelay>
 8002682:	e7fb      	b.n	800267c <task_ros2_function+0x64c>
 8002684:	f3af 8000 	nop.w
 8002688:	05f5e100 	.word	0x05f5e100
 800268c:	00000000 	.word	0x00000000
 8002690:	0ee6b280 	.word	0x0ee6b280
 8002694:	00000000 	.word	0x00000000
 8002698:	1dcd6500 	.word	0x1dcd6500
 800269c:	00000000 	.word	0x00000000
 80026a0:	3b9aca00 	.word	0x3b9aca00
 80026a4:	00000000 	.word	0x00000000
 80026a8:	20006c30 	.word	0x20006c30
 80026ac:	0801b454 	.word	0x0801b454
 80026b0:	0801b460 	.word	0x0801b460
 80026b4:	0801b46c 	.word	0x0801b46c
 80026b8:	0801b478 	.word	0x0801b478
 80026bc:	0801b480 	.word	0x0801b480
 80026c0:	0801b488 	.word	0x0801b488
 80026c4:	20006ac8 	.word	0x20006ac8
 80026c8:	200069f8 	.word	0x200069f8
 80026cc:	20008e28 	.word	0x20008e28
 80026d0:	08002bf9 	.word	0x08002bf9
 80026d4:	20008da8 	.word	0x20008da8
 80026d8:	08002de5 	.word	0x08002de5
 80026dc:	200069cc 	.word	0x200069cc
 80026e0:	08002f55 	.word	0x08002f55
 80026e4:	20008da4 	.word	0x20008da4
 80026e8:	08002e8d 	.word	0x08002e8d
 80026ec:	20006cd0 	.word	0x20006cd0
 80026f0:	08002d0d 	.word	0x08002d0d
 80026f4:	200090fc 	.word	0x200090fc

080026f8 <digital_inputs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_digital_inputs_task */
void digital_inputs_task(void *argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN digital_inputs_task */
  /* Infinite loop */
	 uint8_t stats[3]={0,0,0};
 8002700:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <digital_inputs_task+0xf0>)
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4611      	mov	r1, r2
 800270a:	8019      	strh	r1, [r3, #0]
 800270c:	3302      	adds	r3, #2
 800270e:	0c12      	lsrs	r2, r2, #16
 8002710:	701a      	strb	r2, [r3, #0]
	  for(;;){

		  // key switch read
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	4835      	ldr	r0, [pc, #212]	; (80027ec <digital_inputs_task+0xf4>)
 8002716:	f004 fa03 	bl	8006b20 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73bb      	strb	r3, [r7, #14]
		  stats[1]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8002728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800272c:	4830      	ldr	r0, [pc, #192]	; (80027f0 <digital_inputs_task+0xf8>)
 800272e:	f004 f9f7 	bl	8006b20 <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	737b      	strb	r3, [r7, #13]
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8002740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002744:	482a      	ldr	r0, [pc, #168]	; (80027f0 <digital_inputs_task+0xf8>)
 8002746:	f004 f9eb 	bl	8006b20 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	733b      	strb	r3, [r7, #12]

		  // break read
		  digital_data_input_manual[4]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 8002758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800275c:	4824      	ldr	r0, [pc, #144]	; (80027f0 <digital_inputs_task+0xf8>)
 800275e:	f004 f9df 	bl	8006b20 <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <digital_inputs_task+0xfc>)
 8002772:	711a      	strb	r2, [r3, #4]
		  // throttle read
		  digital_data_input_manual[3]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8002774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002778:	481d      	ldr	r0, [pc, #116]	; (80027f0 <digital_inputs_task+0xf8>)
 800277a:	f004 f9d1 	bl	8006b20 <HAL_GPIO_ReadPin>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <digital_inputs_task+0xfc>)
 800278e:	70da      	strb	r2, [r3, #3]


		  if(stats[0] || stats[1] || stats[2]){
 8002790:	7b3b      	ldrb	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <digital_inputs_task+0xaa>
 8002796:	7b7b      	ldrb	r3, [r7, #13]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <digital_inputs_task+0xaa>
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <digital_inputs_task+0xd0>
			  if(stats[0])
 80027a2:	7b3b      	ldrb	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <digital_inputs_task+0xb6>
			 	digital_data_input_manual[1]=2;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <digital_inputs_task+0xfc>)
 80027aa:	2202      	movs	r2, #2
 80027ac:	705a      	strb	r2, [r3, #1]
			  if(stats[1])
 80027ae:	7b7b      	ldrb	r3, [r7, #13]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <digital_inputs_task+0xc2>
			 	digital_data_input_manual[1]=3;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <digital_inputs_task+0xfc>)
 80027b6:	2203      	movs	r2, #3
 80027b8:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 80027ba:	7bbb      	ldrb	r3, [r7, #14]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <digital_inputs_task+0xd6>
			    digital_data_input_manual[1]=4;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <digital_inputs_task+0xfc>)
 80027c2:	2204      	movs	r2, #4
 80027c4:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 80027c6:	e002      	b.n	80027ce <digital_inputs_task+0xd6>
		  }else
			  digital_data_input_manual[1]=1;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <digital_inputs_task+0xfc>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	705a      	strb	r2, [r3, #1]

        //steer read
	  if(flg_ImuGps_Sterr)
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <digital_inputs_task+0x100>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <digital_inputs_task+0xe6>
	      steer_info=canRX[7];
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <digital_inputs_task+0x104>)
 80027d8:	79da      	ldrb	r2, [r3, #7]
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <digital_inputs_task+0x108>)
 80027dc:	701a      	strb	r2, [r3, #0]

		  osDelay(100);
 80027de:	2064      	movs	r0, #100	; 0x64
 80027e0:	f007 f8dc 	bl	800999c <osDelay>
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 80027e4:	e795      	b.n	8002712 <digital_inputs_task+0x1a>
 80027e6:	bf00      	nop
 80027e8:	0801b490 	.word	0x0801b490
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	200032e0 	.word	0x200032e0
 80027f8:	200032dd 	.word	0x200032dd
 80027fc:	20003308 	.word	0x20003308
 8002800:	20006c50 	.word	0x20006c50

08002804 <analog_input_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_input_task */
void analog_input_task(void *argument)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_input_task */
  /* Infinite loop */
  for(;;)
  {
	  // Get ADC value
		  ADC_select_channel_Throttle();
 800280c:	f000 fcd8 	bl	80031c0 <ADC_select_channel_Throttle>
		  HAL_ADC_Start(&hadc1);
 8002810:	4826      	ldr	r0, [pc, #152]	; (80028ac <analog_input_task+0xa8>)
 8002812:	f002 f91b 	bl	8004a4c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8002816:	210a      	movs	r1, #10
 8002818:	4824      	ldr	r0, [pc, #144]	; (80028ac <analog_input_task+0xa8>)
 800281a:	f002 f9f1 	bl	8004c00 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[3] = HAL_ADC_GetValue(&hadc1);
 800281e:	4823      	ldr	r0, [pc, #140]	; (80028ac <analog_input_task+0xa8>)
 8002820:	f002 faf4 	bl	8004e0c <HAL_ADC_GetValue>
 8002824:	4603      	mov	r3, r0
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <analog_input_task+0xac>)
 800282a:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 800282c:	481f      	ldr	r0, [pc, #124]	; (80028ac <analog_input_task+0xa8>)
 800282e:	f002 f9bb 	bl	8004ba8 <HAL_ADC_Stop>

	      ADC_select_channel_break();
 8002832:	f000 fca7 	bl	8003184 <ADC_select_channel_break>
		  HAL_ADC_Start(&hadc1);
 8002836:	481d      	ldr	r0, [pc, #116]	; (80028ac <analog_input_task+0xa8>)
 8002838:	f002 f908 	bl	8004a4c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 800283c:	210a      	movs	r1, #10
 800283e:	481b      	ldr	r0, [pc, #108]	; (80028ac <analog_input_task+0xa8>)
 8002840:	f002 f9de 	bl	8004c00 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[2] = HAL_ADC_GetValue(&hadc1);
 8002844:	4819      	ldr	r0, [pc, #100]	; (80028ac <analog_input_task+0xa8>)
 8002846:	f002 fae1 	bl	8004e0c <HAL_ADC_GetValue>
 800284a:	4603      	mov	r3, r0
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <analog_input_task+0xac>)
 8002850:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 8002852:	4816      	ldr	r0, [pc, #88]	; (80028ac <analog_input_task+0xa8>)
 8002854:	f002 f9a8 	bl	8004ba8 <HAL_ADC_Stop>

		  ADC_select_channel_batery_car();
 8002858:	f000 fcce 	bl	80031f8 <ADC_select_channel_batery_car>
		  HAL_ADC_Start(&hadc1);
 800285c:	4813      	ldr	r0, [pc, #76]	; (80028ac <analog_input_task+0xa8>)
 800285e:	f002 f8f5 	bl	8004a4c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8002862:	210a      	movs	r1, #10
 8002864:	4811      	ldr	r0, [pc, #68]	; (80028ac <analog_input_task+0xa8>)
 8002866:	f002 f9cb 	bl	8004c00 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[4] = HAL_ADC_GetValue(&hadc1);
 800286a:	4810      	ldr	r0, [pc, #64]	; (80028ac <analog_input_task+0xa8>)
 800286c:	f002 face 	bl	8004e0c <HAL_ADC_GetValue>
 8002870:	4603      	mov	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <analog_input_task+0xac>)
 8002876:	811a      	strh	r2, [r3, #8]
		  HAL_ADC_Stop(&hadc1);
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <analog_input_task+0xa8>)
 800287a:	f002 f995 	bl	8004ba8 <HAL_ADC_Stop>

		  ADC_select_channel_system_batery();
 800287e:	f000 fcd7 	bl	8003230 <ADC_select_channel_system_batery>
		  HAL_ADC_Start(&hadc1);
 8002882:	480a      	ldr	r0, [pc, #40]	; (80028ac <analog_input_task+0xa8>)
 8002884:	f002 f8e2 	bl	8004a4c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8002888:	210a      	movs	r1, #10
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <analog_input_task+0xa8>)
 800288c:	f002 f9b8 	bl	8004c00 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[5] = HAL_ADC_GetValue(&hadc1);
 8002890:	4806      	ldr	r0, [pc, #24]	; (80028ac <analog_input_task+0xa8>)
 8002892:	f002 fabb 	bl	8004e0c <HAL_ADC_GetValue>
 8002896:	4603      	mov	r3, r0
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <analog_input_task+0xac>)
 800289c:	815a      	strh	r2, [r3, #10]
		  HAL_ADC_Stop(&hadc1);
 800289e:	4803      	ldr	r0, [pc, #12]	; (80028ac <analog_input_task+0xa8>)
 80028a0:	f002 f982 	bl	8004ba8 <HAL_ADC_Stop>

		  HAL_Delay(50);
 80028a4:	2032      	movs	r0, #50	; 0x32
 80028a6:	f001 ffc3 	bl	8004830 <HAL_Delay>
		  ADC_select_channel_Throttle();
 80028aa:	e7af      	b.n	800280c <analog_input_task+0x8>
 80028ac:	2000693c 	.word	0x2000693c
 80028b0:	200032e8 	.word	0x200032e8

080028b4 <automatic_manual_mode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_automatic_manual_mode_Task */
void automatic_manual_mode_Task(void *argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN automatic_manual_mode_Task */
  /* Infinite loop */
  for(;;){

	  switch(flg){
 80028bc:	4b8d      	ldr	r3, [pc, #564]	; (8002af4 <automatic_manual_mode_Task+0x240>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <automatic_manual_mode_Task+0x18>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f000 8088 	beq.w	80029da <automatic_manual_mode_Task+0x126>
 80028ca:	e10f      	b.n	8002aec <automatic_manual_mode_Task+0x238>

	     case 0:
     //KEY SWITCH
	    	  if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==3 || digital_data_input_manual[1]==4)
 80028cc:	4b8a      	ldr	r3, [pc, #552]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <automatic_manual_mode_Task+0x30>
 80028d4:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d003      	beq.n	80028e4 <automatic_manual_mode_Task+0x30>
 80028dc:	4b86      	ldr	r3, [pc, #536]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d105      	bne.n	80028f0 <automatic_manual_mode_Task+0x3c>
		         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2104      	movs	r1, #4
 80028e8:	4884      	ldr	r0, [pc, #528]	; (8002afc <automatic_manual_mode_Task+0x248>)
 80028ea:	f004 f930 	bl	8006b4e <HAL_GPIO_WritePin>
 80028ee:	e008      	b.n	8002902 <automatic_manual_mode_Task+0x4e>
             else
		         if(digital_data_input_manual[1]==2)
 80028f0:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d104      	bne.n	8002902 <automatic_manual_mode_Task+0x4e>
                     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	2104      	movs	r1, #4
 80028fc:	487f      	ldr	r0, [pc, #508]	; (8002afc <automatic_manual_mode_Task+0x248>)
 80028fe:	f004 f926 	bl	8006b4e <HAL_GPIO_WritePin>

     	      if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==4)
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d007      	beq.n	800291a <automatic_manual_mode_Task+0x66>
 800290a:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <automatic_manual_mode_Task+0x66>
 8002912:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d105      	bne.n	8002926 <automatic_manual_mode_Task+0x72>
     	         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2108      	movs	r1, #8
 800291e:	4877      	ldr	r0, [pc, #476]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002920:	f004 f915 	bl	8006b4e <HAL_GPIO_WritePin>
 8002924:	e008      	b.n	8002938 <automatic_manual_mode_Task+0x84>
     	      else
                 if(digital_data_input_manual[1]==3)
 8002926:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d104      	bne.n	8002938 <automatic_manual_mode_Task+0x84>
            	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 800292e:	2201      	movs	r2, #1
 8002930:	2108      	movs	r1, #8
 8002932:	4872      	ldr	r0, [pc, #456]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002934:	f004 f90b 	bl	8006b4e <HAL_GPIO_WritePin>

    	     if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==3)
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d007      	beq.n	8002950 <automatic_manual_mode_Task+0x9c>
 8002940:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d003      	beq.n	8002950 <automatic_manual_mode_Task+0x9c>
 8002948:	4b6b      	ldr	r3, [pc, #428]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d105      	bne.n	800295c <automatic_manual_mode_Task+0xa8>
    		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	2110      	movs	r1, #16
 8002954:	4869      	ldr	r0, [pc, #420]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002956:	f004 f8fa 	bl	8006b4e <HAL_GPIO_WritePin>
 800295a:	e008      	b.n	800296e <automatic_manual_mode_Task+0xba>
    	     else
                 if(digital_data_input_manual[1]==4)
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d104      	bne.n	800296e <automatic_manual_mode_Task+0xba>
            	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8002964:	2201      	movs	r2, #1
 8002966:	2110      	movs	r1, #16
 8002968:	4864      	ldr	r0, [pc, #400]	; (8002afc <automatic_manual_mode_Task+0x248>)
 800296a:	f004 f8f0 	bl	8006b4e <HAL_GPIO_WritePin>

     //THROTTLE

             if(digital_data_input_manual[3]){
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <automatic_manual_mode_Task+0xdc>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	2101      	movs	r1, #1
 800297a:	4860      	ldr	r0, [pc, #384]	; (8002afc <automatic_manual_mode_Task+0x248>)
 800297c:	f004 f8e7 	bl	8006b4e <HAL_GPIO_WritePin>
           	     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 8002980:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <automatic_manual_mode_Task+0x24c>)
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	2100      	movs	r1, #0
 8002988:	485e      	ldr	r0, [pc, #376]	; (8002b04 <automatic_manual_mode_Task+0x250>)
 800298a:	f003 fa40 	bl	8005e0e <HAL_DAC_SetValue>
 800298e:	e008      	b.n	80029a2 <automatic_manual_mode_Task+0xee>
               }else
            	 if(!digital_data_input_manual[3])
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <automatic_manual_mode_Task+0xee>
            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	4857      	ldr	r0, [pc, #348]	; (8002afc <automatic_manual_mode_Task+0x248>)
 800299e:	f004 f8d6 	bl	8006b4e <HAL_GPIO_WritePin>
     //BREAK
             if(digital_data_input_manual[4]){
 80029a2:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <automatic_manual_mode_Task+0x110>
               	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 80029aa:	2201      	movs	r2, #1
 80029ac:	2102      	movs	r1, #2
 80029ae:	4853      	ldr	r0, [pc, #332]	; (8002afc <automatic_manual_mode_Task+0x248>)
 80029b0:	f004 f8cd 	bl	8006b4e <HAL_GPIO_WritePin>
                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[3]);
 80029b4:	4b52      	ldr	r3, [pc, #328]	; (8002b00 <automatic_manual_mode_Task+0x24c>)
 80029b6:	88db      	ldrh	r3, [r3, #6]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2110      	movs	r1, #16
 80029bc:	4851      	ldr	r0, [pc, #324]	; (8002b04 <automatic_manual_mode_Task+0x250>)
 80029be:	f003 fa26 	bl	8005e0e <HAL_DAC_SetValue>
            	}else
            	   if(!digital_data_input_manual[4])
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

		  break;
 80029c2:	e090      	b.n	8002ae6 <automatic_manual_mode_Task+0x232>
            	   if(!digital_data_input_manual[4])
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80029c6:	791b      	ldrb	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 808c 	bne.w	8002ae6 <automatic_manual_mode_Task+0x232>
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2102      	movs	r1, #2
 80029d2:	484a      	ldr	r0, [pc, #296]	; (8002afc <automatic_manual_mode_Task+0x248>)
 80029d4:	f004 f8bb 	bl	8006b4e <HAL_GPIO_WritePin>
		  break;
 80029d8:	e085      	b.n	8002ae6 <automatic_manual_mode_Task+0x232>

	  case 1:

      //KEY SWITCH
	    	  if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==3 || digital_data_input_manual[1]==4)
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d007      	beq.n	80029f2 <automatic_manual_mode_Task+0x13e>
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d003      	beq.n	80029f2 <automatic_manual_mode_Task+0x13e>
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d105      	bne.n	80029fe <automatic_manual_mode_Task+0x14a>
		         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2104      	movs	r1, #4
 80029f6:	4841      	ldr	r0, [pc, #260]	; (8002afc <automatic_manual_mode_Task+0x248>)
 80029f8:	f004 f8a9 	bl	8006b4e <HAL_GPIO_WritePin>
 80029fc:	e008      	b.n	8002a10 <automatic_manual_mode_Task+0x15c>
             else
		         if(digital_data_input_manual[1]==2)
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d104      	bne.n	8002a10 <automatic_manual_mode_Task+0x15c>
                     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8002a06:	2201      	movs	r2, #1
 8002a08:	2104      	movs	r1, #4
 8002a0a:	483c      	ldr	r0, [pc, #240]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a0c:	f004 f89f 	bl	8006b4e <HAL_GPIO_WritePin>

     	      if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==4)
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d007      	beq.n	8002a28 <automatic_manual_mode_Task+0x174>
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d003      	beq.n	8002a28 <automatic_manual_mode_Task+0x174>
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d105      	bne.n	8002a34 <automatic_manual_mode_Task+0x180>
     	         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	4833      	ldr	r0, [pc, #204]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a2e:	f004 f88e 	bl	8006b4e <HAL_GPIO_WritePin>
 8002a32:	e008      	b.n	8002a46 <automatic_manual_mode_Task+0x192>
     	      else
                 if(digital_data_input_manual[1]==3)
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d104      	bne.n	8002a46 <automatic_manual_mode_Task+0x192>
            	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2108      	movs	r1, #8
 8002a40:	482e      	ldr	r0, [pc, #184]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a42:	f004 f884 	bl	8006b4e <HAL_GPIO_WritePin>

    	     if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==3)
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d007      	beq.n	8002a5e <automatic_manual_mode_Task+0x1aa>
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d003      	beq.n	8002a5e <automatic_manual_mode_Task+0x1aa>
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d105      	bne.n	8002a6a <automatic_manual_mode_Task+0x1b6>
    		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2110      	movs	r1, #16
 8002a62:	4826      	ldr	r0, [pc, #152]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a64:	f004 f873 	bl	8006b4e <HAL_GPIO_WritePin>
 8002a68:	e008      	b.n	8002a7c <automatic_manual_mode_Task+0x1c8>
    	     else
                 if(digital_data_input_manual[1]==4)
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <automatic_manual_mode_Task+0x244>)
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d104      	bne.n	8002a7c <automatic_manual_mode_Task+0x1c8>
            	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	2110      	movs	r1, #16
 8002a76:	4821      	ldr	r0, [pc, #132]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a78:	f004 f869 	bl	8006b4e <HAL_GPIO_WritePin>

	  // THROTTLE
		             if(digital_data_input_auto[3]){
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <automatic_manual_mode_Task+0x254>)
 8002a7e:	78db      	ldrb	r3, [r3, #3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <automatic_manual_mode_Task+0x1ea>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2101      	movs	r1, #1
 8002a88:	481c      	ldr	r0, [pc, #112]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002a8a:	f004 f860 	bl	8006b4e <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_auto[2]);
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <automatic_manual_mode_Task+0x258>)
 8002a90:	889b      	ldrh	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	481b      	ldr	r0, [pc, #108]	; (8002b04 <automatic_manual_mode_Task+0x250>)
 8002a98:	f003 f9b9 	bl	8005e0e <HAL_DAC_SetValue>
 8002a9c:	e008      	b.n	8002ab0 <automatic_manual_mode_Task+0x1fc>
	  	  	  	  	  }else
		            	 if(!digital_data_input_auto[3])
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <automatic_manual_mode_Task+0x254>)
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <automatic_manual_mode_Task+0x1fc>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002aac:	f004 f84f 	bl	8006b4e <HAL_GPIO_WritePin>
      //BREAK
		             if(digital_data_input_auto[4]){
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <automatic_manual_mode_Task+0x254>)
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <automatic_manual_mode_Task+0x21e>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2102      	movs	r1, #2
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002abe:	f004 f846 	bl	8006b4e <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_auto[3]);
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <automatic_manual_mode_Task+0x258>)
 8002ac4:	88db      	ldrh	r3, [r3, #6]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2110      	movs	r1, #16
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <automatic_manual_mode_Task+0x250>)
 8002acc:	f003 f99f 	bl	8005e0e <HAL_DAC_SetValue>
	  	  	  	  	  }else
	  	  	  	  		 if(!digital_data_input_auto[4])
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
	     break;
 8002ad0:	e00b      	b.n	8002aea <automatic_manual_mode_Task+0x236>
	  	  	  	  		 if(!digital_data_input_auto[4])
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <automatic_manual_mode_Task+0x254>)
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <automatic_manual_mode_Task+0x236>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2102      	movs	r1, #2
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <automatic_manual_mode_Task+0x248>)
 8002ae0:	f004 f835 	bl	8006b4e <HAL_GPIO_WritePin>
	     break;
 8002ae4:	e001      	b.n	8002aea <automatic_manual_mode_Task+0x236>
		  break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <automatic_manual_mode_Task+0x238>
	     break;
 8002aea:	bf00      	nop

	  }
     osDelay(100);
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	f006 ff55 	bl	800999c <osDelay>
	  switch(flg){
 8002af2:	e6e3      	b.n	80028bc <automatic_manual_mode_Task+0x8>
 8002af4:	200032dc 	.word	0x200032dc
 8002af8:	200032e0 	.word	0x200032e0
 8002afc:	40011000 	.word	0x40011000
 8002b00:	200032e8 	.word	0x200032e8
 8002b04:	20006994 	.word	0x20006994
 8002b08:	200032f4 	.word	0x200032f4
 8002b0c:	200032fc 	.word	0x200032fc

08002b10 <task_stepper_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_stepper_function */
void task_stepper_function(void *argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
	uint32_t flags;
	stepperInit(&stepper);
 8002b18:	4830      	ldr	r0, [pc, #192]	; (8002bdc <task_stepper_function+0xcc>)
 8002b1a:	f000 ff0b 	bl	8003934 <stepperInit>

	stepperSetSpeed(&stepper, 1);
 8002b1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b22:	482e      	ldr	r0, [pc, #184]	; (8002bdc <task_stepper_function+0xcc>)
 8002b24:	f000 ff48 	bl	80039b8 <stepperSetSpeed>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <task_stepper_function+0xcc>)
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <task_stepper_function+0xd0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <task_stepper_function+0xcc>)
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <task_stepper_function+0xd0>)
 8002b3a:	60da      	str	r2, [r3, #12]
	stepperSetAcceleration(&stepper, 48*2*4);
 8002b3c:	4929      	ldr	r1, [pc, #164]	; (8002be4 <task_stepper_function+0xd4>)
 8002b3e:	4827      	ldr	r0, [pc, #156]	; (8002bdc <task_stepper_function+0xcc>)
 8002b40:	f001 f802 	bl	8003b48 <stepperSetAcceleration>
	// Motor = 7.5°/Step, 1/4 Microstepping, speed =  2rev/s,
	stepperSetMaxSpeed(&stepper, 2*4*48);
 8002b44:	4927      	ldr	r1, [pc, #156]	; (8002be4 <task_stepper_function+0xd4>)
 8002b46:	4825      	ldr	r0, [pc, #148]	; (8002bdc <task_stepper_function+0xcc>)
 8002b48:	f000 ffa2 	bl	8003a90 <stepperSetMaxSpeed>
	stepperSetAbsoluteTartePosition(&stepper, 0);
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4823      	ldr	r0, [pc, #140]	; (8002bdc <task_stepper_function+0xcc>)
 8002b50:	f001 f880 	bl	8003c54 <stepperSetAbsoluteTartePosition>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <task_stepper_function+0xcc>)
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <task_stepper_function+0xd0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <task_stepper_function+0xcc>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <task_stepper_function+0xd0>)
 8002b66:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	481d      	ldr	r0, [pc, #116]	; (8002be0 <task_stepper_function+0xd0>)
 8002b6c:	f004 ff4e 	bl	8007a0c <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  for(;;)
  {
	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b74:	2100      	movs	r1, #0
 8002b76:	2003      	movs	r0, #3
 8002b78:	f006 fe7c 	bl	8009874 <osThreadFlagsWait>
 8002b7c:	60f8      	str	r0, [r7, #12]

	  if ((flags & TF_STEPPER_INT) == TF_STEPPER_INT){
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <task_stepper_function+0x9c>
		  stepperComputeNewSpeed(&stepper);
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <task_stepper_function+0xcc>)
 8002b8a:	f001 f871 	bl	8003c70 <stepperComputeNewSpeed>
		     signal_pos_stepper(stepper.stepInverval);
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <task_stepper_function+0xcc>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fbc2 	bl	800331c <signal_pos_stepper>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <task_stepper_function+0xcc>)
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <task_stepper_function+0xd0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <task_stepper_function+0xcc>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <task_stepper_function+0xd0>)
 8002baa:	60da      	str	r2, [r3, #12]
	  }

	  if ((flags & TF_STEPPER_DATA) == TF_STEPPER_DATA){
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0dc      	beq.n	8002b70 <task_stepper_function+0x60>
		  stepperComputeNewSpeed(&stepper);
 8002bb6:	4809      	ldr	r0, [pc, #36]	; (8002bdc <task_stepper_function+0xcc>)
 8002bb8:	f001 f85a 	bl	8003c70 <stepperComputeNewSpeed>
		     signal_pos_stepper(stepper.stepInverval);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <task_stepper_function+0xcc>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fbab 	bl	800331c <signal_pos_stepper>
		  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <task_stepper_function+0xcc>)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <task_stepper_function+0xd0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <task_stepper_function+0xcc>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <task_stepper_function+0xd0>)
 8002bd8:	60da      	str	r2, [r3, #12]
	  flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 8002bda:	e7c9      	b.n	8002b70 <task_stepper_function+0x60>
 8002bdc:	20006a78 	.word	0x20006a78
 8002be0:	20009190 	.word	0x20009190
 8002be4:	43c00000 	.word	0x43c00000

08002be8 <Imu_gps_steer_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Imu_gps_steer_function */
void Imu_gps_steer_function(void *argument)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Imu_gps_steer_function */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f006 fed3 	bl	800999c <osDelay>
 8002bf6:	e7fb      	b.n	8002bf0 <Imu_gps_steer_function+0x8>

08002bf8 <golfinho_imu_timer_callback>:
	}
}


void golfinho_imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 8002c04:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=10;
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d06a      	beq.n	8002cea <golfinho_imu_timer_callback+0xf2>

		sprintf(imu_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002c14:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c16:	6898      	ldr	r0, [r3, #8]
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	4936      	ldr	r1, [pc, #216]	; (8002cf8 <golfinho_imu_timer_callback+0x100>)
 8002c1e:	f017 f89b 	bl	8019d58 <siprintf>
		imu_.header.frame_id.size = strlen(imu_.header.frame_id.data);
 8002c22:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fb0c 	bl	8000244 <strlen>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c30:	60d3      	str	r3, [r2, #12]


		if(!flg_ImuGps_Sterr){
 8002c32:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <golfinho_imu_timer_callback+0x104>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d13b      	bne.n	8002cb2 <golfinho_imu_timer_callback+0xba>
		  imu_.angular_velocity.x=canRX[0];
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc4a 	bl	80004d8 <__aeabi_ui2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	492a      	ldr	r1, [pc, #168]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c4a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		  imu_.angular_velocity.y=canRX[1];
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fc40 	bl	80004d8 <__aeabi_ui2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4925      	ldr	r1, [pc, #148]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c5e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		  imu_.angular_velocity.z=canRX[2];
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc36 	bl	80004d8 <__aeabi_ui2d>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4920      	ldr	r1, [pc, #128]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c72:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		  imu_.linear_acceleration.x=canRX[3];
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc2c 	bl	80004d8 <__aeabi_ui2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c86:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
		  imu_.linear_acceleration.y=canRX[4];
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fc22 	bl	80004d8 <__aeabi_ui2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002c9a:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
		  imu_.linear_acceleration.z=canRX[5];
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <golfinho_imu_timer_callback+0x108>)
 8002ca0:	795b      	ldrb	r3, [r3, #5]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc18 	bl	80004d8 <__aeabi_ui2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4911      	ldr	r1, [pc, #68]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002cae:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
		}

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f000 fdd5 	bl	8003868 <clock_gettime>
		imu_.header.stamp.sec = ts.tv_sec;
 8002cbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002cc4:	601a      	str	r2, [r3, #0]
		imu_.header.stamp.nanosec = ts.tv_nsec;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002ccc:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_imu_pub,&imu_, NULL);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <golfinho_imu_timer_callback+0xfc>)
 8002cd2:	480c      	ldr	r0, [pc, #48]	; (8002d04 <golfinho_imu_timer_callback+0x10c>)
 8002cd4:	f00b fd16 	bl	800e704 <rcl_publish>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <golfinho_imu_timer_callback+0xf2>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002ce0:	f240 3183 	movw	r1, #899	; 0x383
 8002ce4:	4808      	ldr	r0, [pc, #32]	; (8002d08 <golfinho_imu_timer_callback+0x110>)
 8002ce6:	f016 ff65 	bl	8019bb4 <iprintf>
		}
    }
}
 8002cea:	bf00      	nop
 8002cec:	3730      	adds	r7, #48	; 0x30
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20006ac8 	.word	0x20006ac8
 8002cf8:	0801b494 	.word	0x0801b494
 8002cfc:	200032dd 	.word	0x200032dd
 8002d00:	20003308 	.word	0x20003308
 8002d04:	200069ac 	.word	0x200069ac
 8002d08:	0801b49c 	.word	0x0801b49c

08002d0c <golfinho_gps_timer_callback>:



void golfinho_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 8002d18:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=11;
 8002d1e:	230b      	movs	r3, #11
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d04c      	beq.n	8002dc2 <golfinho_gps_timer_callback+0xb6>

		sprintf(gps_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d2a:	6898      	ldr	r0, [r3, #8]
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d30:	4927      	ldr	r1, [pc, #156]	; (8002dd0 <golfinho_gps_timer_callback+0xc4>)
 8002d32:	f017 f811 	bl	8019d58 <siprintf>
		gps_.header.frame_id.size = strlen(gps_.header.frame_id.data);
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fa82 	bl	8000244 <strlen>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d44:	60d3      	str	r3, [r2, #12]


		if(!flg_ImuGps_Sterr){
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <golfinho_gps_timer_callback+0xc8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11d      	bne.n	8002d8a <golfinho_gps_timer_callback+0x7e>
		  gps_.altitude=canRX[5];
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <golfinho_gps_timer_callback+0xcc>)
 8002d50:	795b      	ldrb	r3, [r3, #5]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fbc0 	bl	80004d8 <__aeabi_ui2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	491b      	ldr	r1, [pc, #108]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  gps_.latitude=canRX[6];
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <golfinho_gps_timer_callback+0xcc>)
 8002d64:	799b      	ldrb	r3, [r3, #6]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fbb6 	bl	80004d8 <__aeabi_ui2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d72:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  gps_.longitude=canRX[7];
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <golfinho_gps_timer_callback+0xcc>)
 8002d78:	79db      	ldrb	r3, [r3, #7]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fbac 	bl	80004d8 <__aeabi_ui2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4911      	ldr	r1, [pc, #68]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d86:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4619      	mov	r1, r3
 8002d90:	2001      	movs	r0, #1
 8002d92:	f000 fd69 	bl	8003868 <clock_gettime>
		gps_.header.stamp.sec = ts.tv_sec;
 8002d96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002d9c:	601a      	str	r2, [r3, #0]
		gps_.header.stamp.nanosec = ts.tv_nsec;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002da4:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_gps_pub,&gps_, NULL);
 8002da6:	2200      	movs	r2, #0
 8002da8:	4908      	ldr	r1, [pc, #32]	; (8002dcc <golfinho_gps_timer_callback+0xc0>)
 8002daa:	480c      	ldr	r0, [pc, #48]	; (8002ddc <golfinho_gps_timer_callback+0xd0>)
 8002dac:	f00b fcaa 	bl	800e704 <rcl_publish>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <golfinho_gps_timer_callback+0xb6>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002db8:	f240 31a6 	movw	r1, #934	; 0x3a6
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <golfinho_gps_timer_callback+0xd4>)
 8002dbe:	f016 fef9 	bl	8019bb4 <iprintf>
		}
   }
}
 8002dc2:	bf00      	nop
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200069f8 	.word	0x200069f8
 8002dd0:	0801b494 	.word	0x0801b494
 8002dd4:	200032dd 	.word	0x200032dd
 8002dd8:	20003308 	.word	0x20003308
 8002ddc:	200090f0 	.word	0x200090f0
 8002de0:	0801b49c 	.word	0x0801b49c

08002de4 <odom_callback>:

void odom_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=4321;
 8002df0:	f241 03e1 	movw	r3, #4321	; 0x10e1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=15;
 8002df6:	230f      	movs	r3, #15
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d039      	beq.n	8002e74 <odom_callback+0x90>

		sprintf(odom.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <odom_callback+0x98>)
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e08:	491d      	ldr	r1, [pc, #116]	; (8002e80 <odom_callback+0x9c>)
 8002e0a:	f016 ffa5 	bl	8019d58 <siprintf>
		odom.header.frame_id.size = strlen(odom.header.frame_id.data);
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <odom_callback+0x98>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fa16 	bl	8000244 <strlen>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <odom_callback+0x98>)
 8002e1c:	60d3      	str	r3, [r2, #12]

		sprintf(odom.child_frame_id.data, "%d_%d", seq_no, device_id);
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <odom_callback+0x98>)
 8002e20:	6958      	ldr	r0, [r3, #20]
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e26:	4916      	ldr	r1, [pc, #88]	; (8002e80 <odom_callback+0x9c>)
 8002e28:	f016 ff96 	bl	8019d58 <siprintf>
		odom.child_frame_id.size = strlen(odom.child_frame_id.data);
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <odom_callback+0x98>)
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fa07 	bl	8000244 <strlen>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <odom_callback+0x98>)
 8002e3a:	6193      	str	r3, [r2, #24]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4619      	mov	r1, r3
 8002e42:	2001      	movs	r0, #1
 8002e44:	f000 fd10 	bl	8003868 <clock_gettime>
		odom.header.stamp.sec = ts.tv_sec;
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <odom_callback+0x98>)
 8002e4e:	601a      	str	r2, [r3, #0]
		odom.header.stamp.nanosec = ts.tv_nsec;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <odom_callback+0x98>)
 8002e56:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&odom_pub,&odom, NULL);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <odom_callback+0x98>)
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <odom_callback+0xa0>)
 8002e5e:	f00b fc51 	bl	800e704 <rcl_publish>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <odom_callback+0x90>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002e6a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8002e6e:	4806      	ldr	r0, [pc, #24]	; (8002e88 <odom_callback+0xa4>)
 8002e70:	f016 fea0 	bl	8019bb4 <iprintf>
		}
   }
}
 8002e74:	bf00      	nop
 8002e76:	3730      	adds	r7, #48	; 0x30
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20008e28 	.word	0x20008e28
 8002e80:	0801b494 	.word	0x0801b494
 8002e84:	20006ab4 	.word	0x20006ab4
 8002e88:	0801b49c 	.word	0x0801b49c

08002e8c <golfinho_check_status_timer_callback>:


void golfinho_check_status_timer_callback(rcl_timer_t * timer, int64_t last_call_time) // Envia os dados de estados do carrihno para o ros2
{               // status dos dois modos de operação
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <golfinho_check_status_timer_callback+0xb0>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01d      	beq.n	8002edc <golfinho_check_status_timer_callback+0x50>
				golfinho_check_status_msg.data.data[0]=digital_data_input_manual[0];
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[1]=digital_data_input_manual[1];//key_switch
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002eb2:	7852      	ldrb	r2, [r2, #1]
 8002eb4:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2];  //op_mode
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	3302      	adds	r3, #2
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <golfinho_check_status_timer_callback+0xbc>)
 8002ebe:	7892      	ldrb	r2, [r2, #2]
 8002ec0:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_auto[3];  //key_throttle
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	3303      	adds	r3, #3
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <golfinho_check_status_timer_callback+0xbc>)
 8002eca:	78d2      	ldrb	r2, [r2, #3]
 8002ecc:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[4]=digital_data_input_auto[4];  //key_break
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <golfinho_check_status_timer_callback+0xbc>)
 8002ed6:	7912      	ldrb	r2, [r2, #4]
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e01c      	b.n	8002f16 <golfinho_check_status_timer_callback+0x8a>
			}else {
				golfinho_check_status_msg.data.data[0]=digital_data_input_manual[0];
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[1]=digital_data_input_manual[1]; // key_switch
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002eee:	7852      	ldrb	r2, [r2, #1]
 8002ef0:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2];   //op_mode
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <golfinho_check_status_timer_callback+0xbc>)
 8002efa:	7892      	ldrb	r2, [r2, #2]
 8002efc:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_manual[3]; //key_throttle
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	3303      	adds	r3, #3
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002f06:	78d2      	ldrb	r2, [r2, #3]
 8002f08:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[4]=digital_data_input_manual[4]; //key_break
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <golfinho_check_status_timer_callback+0xb8>)
 8002f12:	7912      	ldrb	r2, [r2, #4]
 8002f14:	701a      	strb	r2, [r3, #0]
    }
		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub,&golfinho_check_status_msg, NULL);
 8002f16:	2200      	movs	r2, #0
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <golfinho_check_status_timer_callback+0xb4>)
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <golfinho_check_status_timer_callback+0xc0>)
 8002f1c:	f00b fbf2 	bl	800e704 <rcl_publish>
 8002f20:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK){
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <golfinho_check_status_timer_callback+0xa6>
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002f28:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8002f2c:	4808      	ldr	r0, [pc, #32]	; (8002f50 <golfinho_check_status_timer_callback+0xc4>)
 8002f2e:	f016 fe41 	bl	8019bb4 <iprintf>
		}
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200032dc 	.word	0x200032dc
 8002f40:	20008dac 	.word	0x20008dac
 8002f44:	200032e0 	.word	0x200032e0
 8002f48:	200032f4 	.word	0x200032f4
 8002f4c:	20006ccc 	.word	0x20006ccc
 8002f50:	0801b49c 	.word	0x0801b49c

08002f54 <golfinho_motion_info_timer_callback>:



void golfinho_motion_info_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modos de operação
 8002f60:	4b7f      	ldr	r3, [pc, #508]	; (8003160 <golfinho_motion_info_timer_callback+0x20c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d074      	beq.n	8003052 <golfinho_motion_info_timer_callback+0xfe>

		       golfinho_motion_info_gpio_output_msg.data.data[1]=steer_info; // steer
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <golfinho_motion_info_timer_callback+0x210>)
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	1d1c      	adds	r4, r3, #4
 8002f72:	4610      	mov	r0, r2
 8002f74:	f7fd ff08 	bl	8000d88 <__aeabi_ui2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	6023      	str	r3, [r4, #0]

		      if(digital_data_input_auto[3]) //acelerador
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	; (800316c <golfinho_motion_info_timer_callback+0x218>)
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <golfinho_motion_info_timer_callback+0x5c>
		         golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_auto[2]*100/4096;
 8002f84:	4b7a      	ldr	r3, [pc, #488]	; (8003170 <golfinho_motion_info_timer_callback+0x21c>)
 8002f86:	889b      	ldrh	r3, [r3, #4]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2364      	movs	r3, #100	; 0x64
 8002f8c:	fb03 f302 	mul.w	r3, r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da01      	bge.n	8002f98 <golfinho_motion_info_timer_callback+0x44>
 8002f94:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002f98:	131b      	asrs	r3, r3, #12
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b72      	ldr	r3, [pc, #456]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f103 0408 	add.w	r4, r3, #8
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7fd fef3 	bl	8000d90 <__aeabi_i2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	e005      	b.n	8002fbc <golfinho_motion_info_timer_callback+0x68>
		      else
		         golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 8002fb0:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

		      if(digital_data_input_auto[4]) //break
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	; (800316c <golfinho_motion_info_timer_callback+0x218>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <golfinho_motion_info_timer_callback+0x9c>
                 golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_auto[3]*100/4096;
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <golfinho_motion_info_timer_callback+0x21c>)
 8002fc6:	88db      	ldrh	r3, [r3, #6]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2364      	movs	r3, #100	; 0x64
 8002fcc:	fb03 f302 	mul.w	r3, r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da01      	bge.n	8002fd8 <golfinho_motion_info_timer_callback+0x84>
 8002fd4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002fd8:	131b      	asrs	r3, r3, #12
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b62      	ldr	r3, [pc, #392]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f103 040c 	add.w	r4, r3, #12
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fd fed3 	bl	8000d90 <__aeabi_i2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	e005      	b.n	8002ffc <golfinho_motion_info_timer_callback+0xa8>
	    	  else
	        	 golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 8002ff0:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

	        	golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 8002ffc:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 8002ffe:	891b      	ldrh	r3, [r3, #8]
 8003000:	461a      	mov	r2, r3
 8003002:	2364      	movs	r3, #100	; 0x64
 8003004:	fb03 f302 	mul.w	r3, r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	da01      	bge.n	8003010 <golfinho_motion_info_timer_callback+0xbc>
 800300c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003010:	131b      	asrs	r3, r3, #12
 8003012:	461a      	mov	r2, r3
 8003014:	4b54      	ldr	r3, [pc, #336]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f103 0410 	add.w	r4, r3, #16
 800301c:	4610      	mov	r0, r2
 800301e:	f7fd feb7 	bl	8000d90 <__aeabi_i2f>
 8003022:	4603      	mov	r3, r0
 8003024:	6023      	str	r3, [r4, #0]
	         	golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 8003028:	895b      	ldrh	r3, [r3, #10]
 800302a:	461a      	mov	r2, r3
 800302c:	2364      	movs	r3, #100	; 0x64
 800302e:	fb03 f302 	mul.w	r3, r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	da01      	bge.n	800303a <golfinho_motion_info_timer_callback+0xe6>
 8003036:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800303a:	131b      	asrs	r3, r3, #12
 800303c:	461a      	mov	r2, r3
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f103 0414 	add.w	r4, r3, #20
 8003046:	4610      	mov	r0, r2
 8003048:	f7fd fea2 	bl	8000d90 <__aeabi_i2f>
 800304c:	4603      	mov	r3, r0
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	e073      	b.n	800313a <golfinho_motion_info_timer_callback+0x1e6>

			   }else {

				       golfinho_motion_info_gpio_output_msg.data.data[1]=steer_info; // steer
 8003052:	4b44      	ldr	r3, [pc, #272]	; (8003164 <golfinho_motion_info_timer_callback+0x210>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	1d1c      	adds	r4, r3, #4
 800305c:	4610      	mov	r0, r2
 800305e:	f7fd fe93 	bl	8000d88 <__aeabi_ui2f>
 8003062:	4603      	mov	r3, r0
 8003064:	6023      	str	r3, [r4, #0]

                       if(digital_data_input_manual[3]) //acelerador
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <golfinho_motion_info_timer_callback+0x224>)
 8003068:	78db      	ldrb	r3, [r3, #3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d015      	beq.n	800309a <golfinho_motion_info_timer_callback+0x146>
			             golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_manual[2]*100/4096;
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 8003070:	889b      	ldrh	r3, [r3, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	2364      	movs	r3, #100	; 0x64
 8003076:	fb03 f302 	mul.w	r3, r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	da01      	bge.n	8003082 <golfinho_motion_info_timer_callback+0x12e>
 800307e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003082:	131b      	asrs	r3, r3, #12
 8003084:	461a      	mov	r2, r3
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f103 0408 	add.w	r4, r3, #8
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fe7e 	bl	8000d90 <__aeabi_i2f>
 8003094:	4603      	mov	r3, r0
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	e005      	b.n	80030a6 <golfinho_motion_info_timer_callback+0x152>
				       else
			             golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	3308      	adds	r3, #8
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

			           if(digital_data_input_manual[4]) //freio
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <golfinho_motion_info_timer_callback+0x224>)
 80030a8:	791b      	ldrb	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <golfinho_motion_info_timer_callback+0x186>
			    	     golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_manual[3]*100/4096;
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 80030b0:	88db      	ldrh	r3, [r3, #6]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2364      	movs	r3, #100	; 0x64
 80030b6:	fb03 f302 	mul.w	r3, r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da01      	bge.n	80030c2 <golfinho_motion_info_timer_callback+0x16e>
 80030be:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80030c2:	131b      	asrs	r3, r3, #12
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f103 040c 	add.w	r4, r3, #12
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fd fe5e 	bl	8000d90 <__aeabi_i2f>
 80030d4:	4603      	mov	r3, r0
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	e005      	b.n	80030e6 <golfinho_motion_info_timer_callback+0x192>
			           else
			    	     golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	330c      	adds	r3, #12
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

			        	golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 80030e8:	891b      	ldrh	r3, [r3, #8]
 80030ea:	461a      	mov	r2, r3
 80030ec:	2364      	movs	r3, #100	; 0x64
 80030ee:	fb03 f302 	mul.w	r3, r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da01      	bge.n	80030fa <golfinho_motion_info_timer_callback+0x1a6>
 80030f6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80030fa:	131b      	asrs	r3, r3, #12
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f103 0410 	add.w	r4, r3, #16
 8003106:	4610      	mov	r0, r2
 8003108:	f7fd fe42 	bl	8000d90 <__aeabi_i2f>
 800310c:	4603      	mov	r3, r0
 800310e:	6023      	str	r3, [r4, #0]
				        golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <golfinho_motion_info_timer_callback+0x220>)
 8003112:	895b      	ldrh	r3, [r3, #10]
 8003114:	461a      	mov	r2, r3
 8003116:	2364      	movs	r3, #100	; 0x64
 8003118:	fb03 f302 	mul.w	r3, r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	da01      	bge.n	8003124 <golfinho_motion_info_timer_callback+0x1d0>
 8003120:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003124:	131b      	asrs	r3, r3, #12
 8003126:	461a      	mov	r2, r3
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f103 0414 	add.w	r4, r3, #20
 8003130:	4610      	mov	r0, r2
 8003132:	f7fd fe2d 	bl	8000d90 <__aeabi_i2f>
 8003136:	4603      	mov	r3, r0
 8003138:	6023      	str	r3, [r4, #0]
   	}
		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_motion_info_pub,&golfinho_motion_info_gpio_output_msg, NULL);
 800313a:	2200      	movs	r2, #0
 800313c:	490a      	ldr	r1, [pc, #40]	; (8003168 <golfinho_motion_info_timer_callback+0x214>)
 800313e:	480f      	ldr	r0, [pc, #60]	; (800317c <golfinho_motion_info_timer_callback+0x228>)
 8003140:	f00b fae0 	bl	800e704 <rcl_publish>
 8003144:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK){
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <golfinho_motion_info_timer_callback+0x202>
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 800314c:	f240 4109 	movw	r1, #1033	; 0x409
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <golfinho_motion_info_timer_callback+0x22c>)
 8003152:	f016 fd2f 	bl	8019bb4 <iprintf>
		}
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	200032dc 	.word	0x200032dc
 8003164:	20006c50 	.word	0x20006c50
 8003168:	20006c30 	.word	0x20006c30
 800316c:	200032f4 	.word	0x200032f4
 8003170:	200032fc 	.word	0x200032fc
 8003174:	200032e8 	.word	0x200032e8
 8003178:	200032e0 	.word	0x200032e0
 800317c:	20006aac 	.word	0x20006aac
 8003180:	0801b49c 	.word	0x0801b49c

08003184 <ADC_select_channel_break>:


// As funções ADC alteram o canal do qual conecta o terminal analógico ao registrador que armazena a informação.

void ADC_select_channel_break (void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 8003194:	2308      	movs	r3, #8
 8003196:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003198:	2301      	movs	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	4619      	mov	r1, r3
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <ADC_select_channel_break+0x38>)
 80031a6:	f001 fe3d 	bl	8004e24 <HAL_ADC_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <ADC_select_channel_break+0x30>
	  {
	    Error_Handler();
 80031b0:	f000 fa66 	bl	8003680 <Error_Handler>
	  }
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	2000693c 	.word	0x2000693c

080031c0 <ADC_select_channel_Throttle>:

void ADC_select_channel_Throttle (void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_9;
 80031d0:	2309      	movs	r3, #9
 80031d2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4805      	ldr	r0, [pc, #20]	; (80031f4 <ADC_select_channel_Throttle+0x34>)
 80031de:	f001 fe21 	bl	8004e24 <HAL_ADC_ConfigChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <ADC_select_channel_Throttle+0x2c>
	  {
	    Error_Handler();
 80031e8:	f000 fa4a 	bl	8003680 <Error_Handler>
	  }
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000693c 	.word	0x2000693c

080031f8 <ADC_select_channel_batery_car>:

void ADC_select_channel_batery_car(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8003208:	2306      	movs	r3, #6
 800320a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800320c:	2301      	movs	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4805      	ldr	r0, [pc, #20]	; (800322c <ADC_select_channel_batery_car+0x34>)
 8003216:	f001 fe05 	bl	8004e24 <HAL_ADC_ConfigChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <ADC_select_channel_batery_car+0x2c>
	  {
	    Error_Handler();
 8003220:	f000 fa2e 	bl	8003680 <Error_Handler>
	  }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000693c 	.word	0x2000693c

08003230 <ADC_select_channel_system_batery>:

void ADC_select_channel_system_batery(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8003240:	2307      	movs	r3, #7
 8003242:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003244:	2301      	movs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <ADC_select_channel_system_batery+0x34>)
 800324e:	f001 fde9 	bl	8004e24 <HAL_ADC_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <ADC_select_channel_system_batery+0x2c>
	  {
	    Error_Handler();
 8003258:	f000 fa12 	bl	8003680 <Error_Handler>
	  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000693c 	.word	0x2000693c

08003268 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f002 f96f 	bl	800555a <HAL_CAN_GetRxMessage>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8003282:	f000 f9fd 	bl	8003680 <Error_Handler>
  }
     // Ao receber dados de um dispositivo conectado a rede, a "flag_no" informa qual dispositivo enviou os dados que se encontra no buffer canRX onde será
	 // direcionado para a callback associada ao nivel lógico da flag.
  if(rxHeader.StdId == 171)
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2bab      	cmp	r3, #171	; 0xab
 800328c:	d102      	bne.n	8003294 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 	   flg_ImuGps_Sterr=1;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]

   if(rxHeader.StdId == 0)
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
       flg_ImuGps_Sterr=0;
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20003308 	.word	0x20003308
 80032b0:	200069d4 	.word	0x200069d4
 80032b4:	200032dd 	.word	0x200032dd

080032b8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ca:	f001 fa95 	bl	80047f8 <HAL_IncTick>
  }

  if (htim->Instance == TIM2) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d118      	bne.n	800330a <HAL_TIM_PeriodElapsedCallback+0x52>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80032d8:	2201      	movs	r2, #1
 80032da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032de:	480e      	ldr	r0, [pc, #56]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80032e0:	f003 fc35 	bl	8006b4e <HAL_GPIO_WritePin>
	   for(int i=0;i<999;i++);
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <HAL_TIM_PeriodElapsedCallback+0x38>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3301      	adds	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f240 32e6 	movw	r2, #998	; 0x3e6
 80032f6:	4293      	cmp	r3, r2
 80032f8:	ddf7      	ble.n	80032ea <HAL_TIM_PeriodElapsedCallback+0x32>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003300:	4805      	ldr	r0, [pc, #20]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003302:	f003 fc24 	bl	8006b4e <HAL_GPIO_WritePin>
    HAL_IncTick();
 8003306:	f001 fa77 	bl	80047f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40011000 	.word	0x40011000

0800331c <signal_pos_stepper>:

uint32_t stepper_interval;

void signal_pos_stepper(uint32_t pos_){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	stepper_interval=pos_;
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <signal_pos_stepper+0x24>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
	htim2.Instance->ARR=stepper_interval;
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <signal_pos_stepper+0x28>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <signal_pos_stepper+0x24>)
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
	change_period();
 8003334:	f000 f808 	bl	8003348 <change_period>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000000 	.word	0x20000000
 8003344:	200091d8 	.word	0x200091d8

08003348 <change_period>:


void change_period(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334e:	f107 0308 	add.w	r3, r7, #8
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335c:	463b      	mov	r3, r7
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <change_period+0x98>)
 8003366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800336a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <change_period+0x98>)
 800336e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <change_period+0x98>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = stepper_interval;
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <change_period+0x9c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <change_period+0x98>)
 8003380:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <change_period+0x98>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <change_period+0x98>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800338e:	4814      	ldr	r0, [pc, #80]	; (80033e0 <change_period+0x98>)
 8003390:	f004 f9dc 	bl	800774c <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <change_period+0x56>
  {
    Error_Handler();
 800339a:	f000 f971 	bl	8003680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <change_period+0x98>)
 80033ac:	f004 fe4c 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <change_period+0x72>
  {
    Error_Handler();
 80033b6:	f000 f963 	bl	8003680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c2:	463b      	mov	r3, r7
 80033c4:	4619      	mov	r1, r3
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <change_period+0x98>)
 80033c8:	f005 f9fe 	bl	80087c8 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <change_period+0x8e>
  {
    Error_Handler();
 80033d2:	f000 f955 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200091d8 	.word	0x200091d8
 80033e4:	20000000 	.word	0x20000000

080033e8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d121      	bne.n	800343e <HAL_TIM_PWM_PulseFinishedCallback+0x56>
		if (stepper.direction == DIRECTION_CW) {
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 80033fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10b      	bne.n	800341c <HAL_TIM_PWM_PulseFinishedCallback+0x34>
			stepper.currentPos++;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3301      	adds	r3, #1
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800340c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800340e:	2201      	movs	r2, #1
 8003410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003414:	480e      	ldr	r0, [pc, #56]	; (8003450 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8003416:	f003 fb9a 	bl	8006b4e <HAL_GPIO_WritePin>
 800341a:	e00a      	b.n	8003432 <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		} else {
			stepper.currentPos--;
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3b01      	subs	r3, #1
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003424:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800342c:	4808      	ldr	r0, [pc, #32]	; (8003450 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 800342e:	f003 fb8e 	bl	8006b4e <HAL_GPIO_WritePin>
		}
		osThreadFlagsSet(task_stepperHandle, TF_STEPPER_INT);
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	4618      	mov	r0, r3
 800343a:	f006 f9bb 	bl	80097b4 <osThreadFlagsSet>

	}
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40000400 	.word	0x40000400
 800344c:	20006a78 	.word	0x20006a78
 8003450:	40011000 	.word	0x40011000
 8003454:	20006ab8 	.word	0x20006ab8

08003458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346c:	4b42      	ldr	r3, [pc, #264]	; (8003578 <MX_GPIO_Init+0x120>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a41      	ldr	r2, [pc, #260]	; (8003578 <MX_GPIO_Init+0x120>)
 8003472:	f043 0310 	orr.w	r3, r3, #16
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <MX_GPIO_Init+0x120>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003484:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <MX_GPIO_Init+0x120>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <MX_GPIO_Init+0x120>)
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	6193      	str	r3, [r2, #24]
 8003490:	4b39      	ldr	r3, [pc, #228]	; (8003578 <MX_GPIO_Init+0x120>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <MX_GPIO_Init+0x120>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4a35      	ldr	r2, [pc, #212]	; (8003578 <MX_GPIO_Init+0x120>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6193      	str	r3, [r2, #24]
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <MX_GPIO_Init+0x120>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <MX_GPIO_Init+0x120>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <MX_GPIO_Init+0x120>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6193      	str	r3, [r2, #24]
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <MX_GPIO_Init+0x120>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80034cc:	2200      	movs	r2, #0
 80034ce:	f24e 013f 	movw	r1, #57407	; 0xe03f
 80034d2:	482a      	ldr	r0, [pc, #168]	; (800357c <MX_GPIO_Init+0x124>)
 80034d4:	f003 fb3b 	bl	8006b4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80034d8:	2200      	movs	r2, #0
 80034da:	f640 4104 	movw	r1, #3076	; 0xc04
 80034de:	4828      	ldr	r0, [pc, #160]	; (8003580 <MX_GPIO_Init+0x128>)
 80034e0:	f003 fb35 	bl	8006b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80034e4:	f24e 033f 	movw	r3, #57407	; 0xe03f
 80034e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2302      	movs	r3, #2
 80034f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	4619      	mov	r1, r3
 80034fc:	481f      	ldr	r0, [pc, #124]	; (800357c <MX_GPIO_Init+0x124>)
 80034fe:	f003 f97b 	bl	80067f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8003502:	f640 4304 	movw	r3, #3076	; 0xc04
 8003506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2302      	movs	r3, #2
 8003512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	4619      	mov	r1, r3
 800351a:	4819      	ldr	r0, [pc, #100]	; (8003580 <MX_GPIO_Init+0x128>)
 800351c:	f003 f96c 	bl	80067f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003520:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 0310 	add.w	r3, r7, #16
 8003532:	4619      	mov	r1, r3
 8003534:	4812      	ldr	r0, [pc, #72]	; (8003580 <MX_GPIO_Init+0x128>)
 8003536:	f003 f95f 	bl	80067f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800353a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800353e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4619      	mov	r1, r3
 800354e:	480b      	ldr	r0, [pc, #44]	; (800357c <MX_GPIO_Init+0x124>)
 8003550:	f003 f952 	bl	80067f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003562:	f107 0310 	add.w	r3, r7, #16
 8003566:	4619      	mov	r1, r3
 8003568:	4806      	ldr	r0, [pc, #24]	; (8003584 <MX_GPIO_Init+0x12c>)
 800356a:	f003 f945 	bl	80067f8 <HAL_GPIO_Init>

}
 800356e:	bf00      	nop
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40011000 	.word	0x40011000
 8003580:	40010c00 	.word	0x40010c00
 8003584:	40010800 	.word	0x40010800

08003588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800358c:	f001 f91e 	bl	80047cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003590:	f000 f819 	bl	80035c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003594:	f7ff ff60 	bl	8003458 <MX_GPIO_Init>
  MX_DMA_Init();
 8003598:	f7fe fbd6 	bl	8001d48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800359c:	f001 f81c 	bl	80045d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80035a0:	f7fe f802 	bl	80015a8 <MX_ADC1_Init>
  MX_CAN_Init();
 80035a4:	f7fe f884 	bl	80016b0 <MX_CAN_Init>
  MX_DAC_Init();
 80035a8:	f7fe fb5e 	bl	8001c68 <MX_DAC_Init>
  MX_TIM2_Init();
 80035ac:	f000 fe3a 	bl	8004224 <MX_TIM2_Init>
  MX_TIM3_Init();
 80035b0:	f000 feac 	bl	800430c <MX_TIM3_Init>
  MX_TIM4_Init();
 80035b4:	f000 ff20 	bl	80043f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035b8:	f005 ffec 	bl	8009594 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035bc:	f7fe fc98 	bl	8001ef0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80035c0:	f006 f81a 	bl	80095f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <main+0x3c>

080035c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b096      	sub	sp, #88	; 0x58
 80035ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d0:	2228      	movs	r2, #40	; 0x28
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f016 fa31 	bl	8019a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
 80035f8:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003604:	2300      	movs	r3, #0
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003608:	2301      	movs	r3, #1
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360c:	2302      	movs	r3, #2
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003614:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003616:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800361c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003620:	4618      	mov	r0, r3
 8003622:	f003 faad 	bl	8006b80 <HAL_RCC_OscConfig>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800362c:	f000 f828 	bl	8003680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003630:	230f      	movs	r3, #15
 8003632:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800363c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fd17 	bl	8007080 <HAL_RCC_ClockConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003658:	f000 f812 	bl	8003680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800365c:	2302      	movs	r3, #2
 800365e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003664:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f003 fed3 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003674:	f000 f804 	bl	8003680 <Error_Handler>
  }
}
 8003678:	bf00      	nop
 800367a:	3758      	adds	r7, #88	; 0x58
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003684:	b672      	cpsid	i
}
 8003686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003688:	e7fe      	b.n	8003688 <Error_Handler+0x8>
	...

0800368c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <microros_allocate+0x3c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <microros_allocate+0x3c>)
 80036a4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <microros_allocate+0x40>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <microros_allocate+0x40>)
 80036b4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe f884 	bl	80017c4 <pvPortMallocMicroROS>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20003310 	.word	0x20003310
 80036cc:	20003314 	.word	0x20003314

080036d0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe f98d 	bl	8001a00 <getBlockSize>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <microros_deallocate+0x34>)
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <microros_deallocate+0x34>)
 80036f2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe f929 	bl	800194c <vPortFreeMicroROS>
  }
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20003314 	.word	0x20003314

08003708 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <microros_reallocate+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	461a      	mov	r2, r3
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <microros_reallocate+0x64>)
 8003722:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <microros_reallocate+0x68>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4413      	add	r3, r2
 800372e:	461a      	mov	r2, r3
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <microros_reallocate+0x68>)
 8003732:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800373a:	68b8      	ldr	r0, [r7, #8]
 800373c:	f7fe f842 	bl	80017c4 <pvPortMallocMicroROS>
 8003740:	4603      	mov	r3, r0
 8003742:	e00e      	b.n	8003762 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7fe f95b 	bl	8001a00 <getBlockSize>
 800374a:	4603      	mov	r3, r0
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <microros_reallocate+0x68>)
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	461a      	mov	r2, r3
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <microros_reallocate+0x68>)
 8003756:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7fe f96c 	bl	8001a38 <pvPortReallocMicroROS>
 8003760:	4603      	mov	r3, r0
  }
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20003310 	.word	0x20003310
 8003770:	20003314 	.word	0x20003314

08003774 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <microros_zero_allocate+0x48>)
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	4413      	add	r3, r2
 800378e:	461a      	mov	r2, r3
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <microros_zero_allocate+0x48>)
 8003792:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <microros_zero_allocate+0x4c>)
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <microros_zero_allocate+0x4c>)
 80037a6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7fe f97e 	bl	8001aac <pvPortCallocMicroROS>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20003310 	.word	0x20003310
 80037c0:	20003314 	.word	0x20003314
 80037c4:	00000000 	.word	0x00000000

080037c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80037d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037dc:	a320      	add	r3, pc, #128	; (adr r3, 8003860 <UTILS_NanosecondsToTimespec+0x98>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fd fd15 	bl	8001210 <__aeabi_ldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80037f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037f4:	a31a      	add	r3, pc, #104	; (adr r3, 8003860 <UTILS_NanosecondsToTimespec+0x98>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fd fd09 	bl	8001210 <__aeabi_ldivmod>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da1f      	bge.n	800384a <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4a12      	ldr	r2, [pc, #72]	; (8003858 <UTILS_NanosecondsToTimespec+0x90>)
 8003810:	fb82 1203 	smull	r1, r2, r2, r3
 8003814:	1712      	asrs	r2, r2, #28
 8003816:	17db      	asrs	r3, r3, #31
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	3301      	adds	r3, #1
 800381c:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	461a      	mov	r2, r3
 8003828:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800382c:	1a84      	subs	r4, r0, r2
 800382e:	eb61 0503 	sbc.w	r5, r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4907      	ldr	r1, [pc, #28]	; (800385c <UTILS_NanosecondsToTimespec+0x94>)
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	441a      	add	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
    }
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	bf00      	nop
 8003854:	f3af 8000 	nop.w
 8003858:	44b82fa1 	.word	0x44b82fa1
 800385c:	3b9aca00 	.word	0x3b9aca00
 8003860:	3b9aca00 	.word	0x3b9aca00
 8003864:	00000000 	.word	0x00000000

08003868 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4618      	mov	r0, r3
 8003890:	f007 fb32 	bl	800aef8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	0003      	movs	r3, r0
 80038a6:	2200      	movs	r2, #0
 80038a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038b8:	1884      	adds	r4, r0, r2
 80038ba:	eb41 0503 	adc.w	r5, r1, r3
 80038be:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80038c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80038c6:	4622      	mov	r2, r4
 80038c8:	462b      	mov	r3, r5
 80038ca:	f04f 0000 	mov.w	r0, #0
 80038ce:	f04f 0100 	mov.w	r1, #0
 80038d2:	0159      	lsls	r1, r3, #5
 80038d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d8:	0150      	lsls	r0, r2, #5
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	1b12      	subs	r2, r2, r4
 80038e0:	eb63 0305 	sbc.w	r3, r3, r5
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	0259      	lsls	r1, r3, #9
 80038ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038f2:	0250      	lsls	r0, r2, #9
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	1912      	adds	r2, r2, r4
 80038fa:	eb45 0303 	adc.w	r3, r5, r3
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0199      	lsls	r1, r3, #6
 8003908:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800390c:	0190      	lsls	r0, r2, #6
 800390e:	1a80      	subs	r0, r0, r2
 8003910:	eb61 0103 	sbc.w	r1, r1, r3
 8003914:	eb10 0804 	adds.w	r8, r0, r4
 8003918:	eb41 0905 	adc.w	r9, r1, r5
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4640      	mov	r0, r8
 8003920:	4649      	mov	r1, r9
 8003922:	f7ff ff51 	bl	80037c8 <UTILS_NanosecondsToTimespec>

    return 0;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003934 <stepperInit>:
#include "stepper.h"
#include "math.h"
#include "main.h"


void stepperInit(stepper_t* stepper){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	stepper->currentPos = 0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
	stepper->targetPos = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
	stepper->speed = 0.0;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
	stepper->max_speed = 2000.0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <stepperInit+0x7c>)
 8003954:	60da      	str	r2, [r3, #12]
	stepper->acceleration = 0.0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
	stepper->stepInverval = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
	stepper->n = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
	stepper->c0 = 0.0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
	stepper->cn = 0.0;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
	stepper->cmin = 1.0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_GPIO_WritePin(STEPPER_EN_GPIO_Port, STEPPER_EN_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003988:	480a      	ldr	r0, [pc, #40]	; (80039b4 <stepperInit+0x80>)
 800398a:	f003 f8e0 	bl	8006b4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003994:	4807      	ldr	r0, [pc, #28]	; (80039b4 <stepperInit+0x80>)
 8003996:	f003 f8da 	bl	8006b4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039a0:	4804      	ldr	r0, [pc, #16]	; (80039b4 <stepperInit+0x80>)
 80039a2:	f003 f8d4 	bl	8006b4e <HAL_GPIO_WritePin>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	44fa0000 	.word	0x44fa0000
 80039b4:	40011000 	.word	0x40011000

080039b8 <stepperSetSpeed>:

void stepperSetSpeed(stepper_t* stepper, float speed){
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	if (speed == stepper->speed) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4619      	mov	r1, r3
 80039c8:	6838      	ldr	r0, [r7, #0]
 80039ca:	f7fd fbc9 	bl	8001160 <__aeabi_fcmpeq>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d153      	bne.n	8003a7c <stepperSetSpeed+0xc4>
		return;
	}
	if (speed < -stepper->max_speed){
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	4619      	mov	r1, r3
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f7fd fbc8 	bl	8001174 <__aeabi_fcmplt>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <stepperSetSpeed+0x3e>
		speed = -stepper->max_speed;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	e00b      	b.n	8003a0e <stepperSetSpeed+0x56>
	}
	else if (speed > stepper->max_speed) {
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4619      	mov	r1, r3
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	f7fd fbd7 	bl	80011b0 <__aeabi_fcmpgt>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <stepperSetSpeed+0x56>
		speed = stepper->max_speed;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	603b      	str	r3, [r7, #0]
	}

	if (speed == 0.0){
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f7fd fba4 	bl	8001160 <__aeabi_fcmpeq>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <stepperSetSpeed+0x6e>
		stepper->stepInverval = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	615a      	str	r2, [r3, #20]
 8003a24:	e026      	b.n	8003a74 <stepperSetSpeed+0xbc>
	}
	else {
		stepper->stepInverval = fabs(1000000.0/speed);
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f7fc fd78 	bl	800051c <__aeabi_f2d>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	a115      	add	r1, pc, #84	; (adr r1, 8003a88 <stepperSetSpeed+0xd0>)
 8003a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a36:	f7fc fef3 	bl	8000820 <__aeabi_ddiv>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	f7fd f870 	bl	8000b2c <__aeabi_d2iz>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	615a      	str	r2, [r3, #20]
		stepper->direction = (speed>0.0)? DIRECTION_CW : DIRECTION_CCW;
 8003a52:	2301      	movs	r3, #1
 8003a54:	461c      	mov	r4, r3
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	6838      	ldr	r0, [r7, #0]
 8003a5c:	f7fd fba8 	bl	80011b0 <__aeabi_fcmpgt>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <stepperSetSpeed+0xb2>
 8003a66:	2300      	movs	r3, #0
 8003a68:	461c      	mov	r4, r3
 8003a6a:	b2e3      	uxtb	r3, r4
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	stepper->speed = speed;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	e000      	b.n	8003a7e <stepperSetSpeed+0xc6>
		return;
 8003a7c:	bf00      	nop
}
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	f3af 8000 	nop.w
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	412e8480 	.word	0x412e8480

08003a90 <stepperSetMaxSpeed>:
float stepperGetSpeed(stepper_t* stepper){
	return stepper->speed;
}


void stepperSetMaxSpeed(stepper_t* stepper, float speed){
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
	if (speed < 0.0){
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7fd fb68 	bl	8001174 <__aeabi_fcmplt>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <stepperSetMaxSpeed+0x22>
		speed = -speed;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ab0:	603b      	str	r3, [r7, #0]
	}
	if (stepper->max_speed != speed){
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7fd fb51 	bl	8001160 <__aeabi_fcmpeq>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d000      	beq.n	8003ac6 <stepperSetMaxSpeed+0x36>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
			stepperComputeNewSpeed(stepper);
		}
	}

}
 8003ac4:	e037      	b.n	8003b36 <stepperSetMaxSpeed+0xa6>
		stepper->max_speed = speed;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	60da      	str	r2, [r3, #12]
		stepper->cmin = 1000000.0/speed;
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	481c      	ldr	r0, [pc, #112]	; (8003b40 <stepperSetMaxSpeed+0xb0>)
 8003ad0:	f7fd fa66 	bl	8000fa0 <__aeabi_fdiv>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
		if (stepper->n > 0){
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	dd28      	ble.n	8003b36 <stepperSetMaxSpeed+0xa6>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fd f9a2 	bl	8000e38 <__aeabi_fmul>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd10 	bl	800051c <__aeabi_f2d>
 8003afc:	4604      	mov	r4, r0
 8003afe:	460d      	mov	r5, r1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fd09 	bl	800051c <__aeabi_f2d>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	f7fc fba7 	bl	8000260 <__adddf3>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4620      	mov	r0, r4
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f7fc fe81 	bl	8000820 <__aeabi_ddiv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f801 	bl	8000b2c <__aeabi_d2iz>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
			stepperComputeNewSpeed(stepper);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f89d 	bl	8003c70 <stepperComputeNewSpeed>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	49742400 	.word	0x49742400
 8003b44:	00000000 	.word	0x00000000

08003b48 <stepperSetAcceleration>:

float stepperGetMaxSpeed(stepper_t* stepper){
	return stepper->max_speed;
}

void stepperSetAcceleration(stepper_t* stepper, float acceleration){
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	if (acceleration == 0.0)
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	6838      	ldr	r0, [r7, #0]
 8003b58:	f7fd fb02 	bl	8001160 <__aeabi_fcmpeq>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d15b      	bne.n	8003c1a <stepperSetAcceleration+0xd2>
		return;
	if (acceleration < 0.0){
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f7fd fb04 	bl	8001174 <__aeabi_fcmplt>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <stepperSetAcceleration+0x32>
		acceleration = - acceleration;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b78:	603b      	str	r3, [r7, #0]
	}
	if (stepper->acceleration != acceleration){
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7fd faed 	bl	8001160 <__aeabi_fcmpeq>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d147      	bne.n	8003c1c <stepperSetAcceleration+0xd4>
		stepper->n = stepper->n * (stepper->acceleration/acceleration);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f8fd 	bl	8000d90 <__aeabi_i2f>
 8003b96:	4604      	mov	r4, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd f9fe 	bl	8000fa0 <__aeabi_fdiv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7fd f945 	bl	8000e38 <__aeabi_fmul>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fd fb07 	bl	80011c4 <__aeabi_f2iz>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
		stepper->c0 = 0.676* sqrt(2.0 / acceleration) * 1000000.0;
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f7fc fcad 	bl	800051c <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003bce:	f7fc fe27 	bl	8000820 <__aeabi_ddiv>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f017 fa8d 	bl	801b0f8 <sqrt>
 8003bde:	a312      	add	r3, pc, #72	; (adr r3, 8003c28 <stepperSetAcceleration+0xe0>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fcf2 	bl	80005cc <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	a30f      	add	r3, pc, #60	; (adr r3, 8003c30 <stepperSetAcceleration+0xe8>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f7fc fce9 	bl	80005cc <__aeabi_dmul>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f7fc ffbb 	bl	8000b7c <__aeabi_d2f>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61da      	str	r2, [r3, #28]
		stepper->acceleration = acceleration;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	611a      	str	r2, [r3, #16]
		stepperComputeNewSpeed(stepper);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f82c 	bl	8003c70 <stepperComputeNewSpeed>
 8003c18:	e000      	b.n	8003c1c <stepperSetAcceleration+0xd4>
		return;
 8003c1a:	bf00      	nop
	}

}
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd90      	pop	{r4, r7, pc}
 8003c22:	bf00      	nop
 8003c24:	f3af 8000 	nop.w
 8003c28:	c083126f 	.word	0xc083126f
 8003c2c:	3fe5a1ca 	.word	0x3fe5a1ca
 8003c30:	00000000 	.word	0x00000000
 8003c34:	412e8480 	.word	0x412e8480

08003c38 <stepperGetDistanceToGo>:

long stepperGetDistanceToGo(stepper_t* stepper){
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	return stepper->targetPos - stepper->currentPos;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <stepperSetAbsoluteTartePosition>:

long stepperGetTargetPosition(stepper_t* stepper){
	return stepper->targetPos;
}

void stepperSetAbsoluteTartePosition(stepper_t* stepper, long absolutePosition){
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	stepper->targetPos = absolutePosition;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	605a      	str	r2, [r3, #4]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
	...

08003c70 <stepperComputeNewSpeed>:

void stepperSetRelativeTargetPosition(stepper_t* stepper, long relativePosition){
	stepper->targetPos = stepperGetTargetPosition(stepper) + relativePosition;
}

void stepperComputeNewSpeed(stepper_t* stepper){
 8003c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
	long distanceTo = stepperGetDistanceToGo(stepper);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffdc 	bl	8003c38 <stepperGetDistanceToGo>
 8003c80:	60f8      	str	r0, [r7, #12]
	long stepsToStop = (long)((stepper->speed * stepper->speed) / (2.0 * stepper->acceleration));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fd f8d3 	bl	8000e38 <__aeabi_fmul>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc fc41 	bl	800051c <__aeabi_f2d>
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	460d      	mov	r5, r1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc3a 	bl	800051c <__aeabi_f2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	f7fc fad8 	bl	8000260 <__adddf3>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f7fc fdb2 	bl	8000820 <__aeabi_ddiv>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc ff32 	bl	8000b2c <__aeabi_d2iz>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60bb      	str	r3, [r7, #8]

	if (distanceTo == 0 && stepsToStop <=1)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <stepperComputeNewSpeed+0x7e>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	dc0a      	bgt.n	8003cee <stepperComputeNewSpeed+0x7e>
	{
		stepper->stepInverval = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	615a      	str	r2, [r3, #20]
		stepper->speed = 0.0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
		stepper->n = 0;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
		return;
 8003cec:	e0d5      	b.n	8003e9a <stepperComputeNewSpeed+0x22a>
	}
	if (distanceTo > 0) {
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dd24      	ble.n	8003d3e <stepperComputeNewSpeed+0xce>
		if (stepper->n > 0){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	dd0d      	ble.n	8003d18 <stepperComputeNewSpeed+0xa8>
			if ((stepsToStop >= distanceTo) || (stepper->direction == DIRECTION_CCW)){
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	da04      	bge.n	8003d0e <stepperComputeNewSpeed+0x9e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d140      	bne.n	8003d90 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	425a      	negs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	e03b      	b.n	8003d90 <stepperComputeNewSpeed+0x120>
			}

		}
		else if (stepper->n < 0 ){
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da37      	bge.n	8003d90 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < distanceTo) && stepper->direction == DIRECTION_CW){
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	da33      	bge.n	8003d90 <stepperComputeNewSpeed+0x120>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d12e      	bne.n	8003d90 <stepperComputeNewSpeed+0x120>
				stepper->n = - stepper->n;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	425a      	negs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
 8003d3c:	e028      	b.n	8003d90 <stepperComputeNewSpeed+0x120>
			}
		}
	}
	else if (distanceTo < 0) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da25      	bge.n	8003d90 <stepperComputeNewSpeed+0x120>
		if (stepper->n > 0){
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd0e      	ble.n	8003d6a <stepperComputeNewSpeed+0xfa>
			if ((stepsToStop >= -distanceTo) || stepper->direction == DIRECTION_CW){
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	425b      	negs	r3, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	da04      	bge.n	8003d60 <stepperComputeNewSpeed+0xf0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d117      	bne.n	8003d90 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	425a      	negs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	619a      	str	r2, [r3, #24]
 8003d68:	e012      	b.n	8003d90 <stepperComputeNewSpeed+0x120>
			}
		}
		else if (stepper->n < 0){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da0e      	bge.n	8003d90 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < - distanceTo) && stepper->direction == DIRECTION_CCW){
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	425b      	negs	r3, r3
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	da09      	bge.n	8003d90 <stepperComputeNewSpeed+0x120>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepper->n;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	425a      	negs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	if (stepper->n == 0){
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <stepperComputeNewSpeed+0x146>
		stepper->cn = stepper->c0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]
		stepper->direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfcc      	ite	gt
 8003da6:	2301      	movgt	r3, #1
 8003da8:	2300      	movle	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003db4:	e04f      	b.n	8003e56 <stepperComputeNewSpeed+0x1e6>
	}
	else {
		stepper->cn = stepper->cn - ((2.0 * stepper->cn)/((4.0* stepper->n)+1));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fbae 	bl	800051c <__aeabi_f2d>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fba7 	bl	800051c <__aeabi_f2d>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	f7fc fa45 	bl	8000260 <__adddf3>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4690      	mov	r8, r2
 8003ddc:	4699      	mov	r9, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fb88 	bl	80004f8 <__aeabi_i2d>
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <stepperComputeNewSpeed+0x234>)
 8003dee:	f7fc fbed 	bl	80005cc <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <stepperComputeNewSpeed+0x238>)
 8003e00:	f7fc fa2e 	bl	8000260 <__adddf3>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4640      	mov	r0, r8
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	f7fc fd08 	bl	8000820 <__aeabi_ddiv>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4620      	mov	r0, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	f7fc fa20 	bl	800025c <__aeabi_dsub>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7fc feaa 	bl	8000b7c <__aeabi_d2f>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]
		if (stepper->cn > stepper->cmin){
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fd f9b9 	bl	80011b0 <__aeabi_fcmpgt>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <stepperComputeNewSpeed+0x1de>
			stepper->cn = stepper->cn;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	e003      	b.n	8003e56 <stepperComputeNewSpeed+0x1e6>
		}
		else {
			stepper->cn = stepper->cmin;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]
		}

	}
	stepper->n++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	619a      	str	r2, [r3, #24]
	stepper->stepInverval = stepper->cn;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f9ad 	bl	80011c4 <__aeabi_f2iz>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	615a      	str	r2, [r3, #20]
	stepper->speed = 1000000.0/stepper->cn;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4619      	mov	r1, r3
 8003e76:	480d      	ldr	r0, [pc, #52]	; (8003eac <stepperComputeNewSpeed+0x23c>)
 8003e78:	f7fd f892 	bl	8000fa0 <__aeabi_fdiv>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
	if (stepper->direction == DIRECTION_CCW){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <stepperComputeNewSpeed+0x22a>
		stepper->speed = -stepper->speed;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
	}
}
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40100000 	.word	0x40100000
 8003ea8:	3ff00000 	.word	0x3ff00000
 8003eac:	49742400 	.word	0x49742400

08003eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_MspInit+0x68>)
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_MspInit+0x68>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6193      	str	r3, [r2, #24]
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_MspInit+0x68>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_MspInit+0x68>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <HAL_MspInit+0x68>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	61d3      	str	r3, [r2, #28]
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_MspInit+0x68>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	210f      	movs	r1, #15
 8003eea:	f06f 0001 	mvn.w	r0, #1
 8003eee:	f001 ff42 	bl	8005d76 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_MspInit+0x6c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <HAL_MspInit+0x6c>)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010000 	.word	0x40010000

08003f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	; 0x30
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003f30:	2200      	movs	r2, #0
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	2019      	movs	r0, #25
 8003f36:	f001 ff1e 	bl	8005d76 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003f3a:	2019      	movs	r0, #25
 8003f3c:	f001 ff37 	bl	8005dae <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f40:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_InitTick+0x9c>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_InitTick+0x9c>)
 8003f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_InitTick+0x9c>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f58:	f107 0210 	add.w	r2, r7, #16
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fa08 	bl	8007378 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f68:	f003 f9f2 	bl	8007350 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <HAL_InitTick+0xa0>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_InitTick+0xa8>)
 8003f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f8a:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003f9c:	4809      	ldr	r0, [pc, #36]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003f9e:	f003 fbd5 	bl	800774c <HAL_TIM_Base_Init>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003fa8:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <HAL_InitTick+0xa4>)
 8003faa:	f003 fc1f 	bl	80077ec <HAL_TIM_Base_Start_IT>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	e000      	b.n	8003fb4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	20009100 	.word	0x20009100
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd0:	e7fe      	b.n	8003fd0 <NMI_Handler+0x4>

08003fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fd6:	e7fe      	b.n	8003fd6 <HardFault_Handler+0x4>

08003fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <MemManage_Handler+0x4>

08003fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fe2:	e7fe      	b.n	8003fe2 <BusFault_Handler+0x4>

08003fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <UsageFault_Handler+0x4>

08003fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <DMA1_Channel6_IRQHandler+0x10>)
 8003ffe:	f002 f991 	bl	8006324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20009220 	.word	0x20009220

0800400c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <DMA1_Channel7_IRQHandler+0x10>)
 8004012:	f002 f987 	bl	8006324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20009264 	.word	0x20009264

08004020 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004026:	f001 fbce 	bl	80057c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000696c 	.word	0x2000696c

08004034 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <TIM1_UP_IRQHandler+0x10>)
 800403a:	f003 fde7 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20009100 	.word	0x20009100

08004048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <TIM2_IRQHandler+0x10>)
 800404e:	f003 fddd 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200091d8 	.word	0x200091d8

0800405c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <TIM3_IRQHandler+0x10>)
 8004062:	f003 fdd3 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20009190 	.word	0x20009190

08004070 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <TIM4_IRQHandler+0x10>)
 8004076:	f003 fdc9 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20009148 	.word	0x20009148

08004084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <USART2_IRQHandler+0x10>)
 800408a:	f004 fd61 	bl	8008b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	200092a8 	.word	0x200092a8

08004098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
	return 1;
 800409c:	2301      	movs	r3, #1
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <_kill>:

int _kill(int pid, int sig)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040b0:	f015 fc1c 	bl	80198ec <__errno>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2216      	movs	r2, #22
 80040b8:	601a      	str	r2, [r3, #0]
	return -1;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_exit>:

void _exit (int status)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ffe7 	bl	80040a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040d8:	e7fe      	b.n	80040d8 <_exit+0x12>

080040da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e00a      	b.n	8004102 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ec:	f3af 8000 	nop.w
 80040f0:	4601      	mov	r1, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	60ba      	str	r2, [r7, #8]
 80040f8:	b2ca      	uxtb	r2, r1
 80040fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	dbf0      	blt.n	80040ec <_read+0x12>
	}

return len;
 800410a:	687b      	ldr	r3, [r7, #4]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e009      	b.n	800413a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	60ba      	str	r2, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3301      	adds	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	dbf1      	blt.n	8004126 <_write+0x12>
	}
	return len;
 8004142:	687b      	ldr	r3, [r7, #4]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_close>:

int _close(int file)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	return -1;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004172:	605a      	str	r2, [r3, #4]
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <_isatty>:

int _isatty(int file)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	return 1;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
	return 0;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <_sbrk+0x5c>)
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <_sbrk+0x60>)
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <_sbrk+0x64>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <_sbrk+0x64>)
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <_sbrk+0x68>)
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <_sbrk+0x64>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d207      	bcs.n	80041ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041dc:	f015 fb86 	bl	80198ec <__errno>
 80041e0:	4603      	mov	r3, r0
 80041e2:	220c      	movs	r2, #12
 80041e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ea:	e009      	b.n	8004200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <_sbrk+0x64>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <_sbrk+0x64>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <_sbrk+0x64>)
 80041fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041fe:	68fb      	ldr	r3, [r7, #12]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20010000 	.word	0x20010000
 800420c:	00000400 	.word	0x00000400
 8004210:	2000331c 	.word	0x2000331c
 8004214:	2000e4e0 	.word	0x2000e4e0

08004218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	f107 0320 	add.w	r3, r7, #32
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
 8004250:	615a      	str	r2, [r3, #20]
 8004252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004254:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <MX_TIM2_Init+0xe4>)
 8004256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800425a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <MX_TIM2_Init+0xe4>)
 800425e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <MX_TIM2_Init+0xe4>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <MX_TIM2_Init+0xe4>)
 800426c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8004270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <MX_TIM2_Init+0xe4>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <MX_TIM2_Init+0xe4>)
 800427a:	2200      	movs	r2, #0
 800427c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800427e:	4822      	ldr	r0, [pc, #136]	; (8004308 <MX_TIM2_Init+0xe4>)
 8004280:	f003 fa64 	bl	800774c <HAL_TIM_Base_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800428a:	f7ff f9f9 	bl	8003680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004298:	4619      	mov	r1, r3
 800429a:	481b      	ldr	r0, [pc, #108]	; (8004308 <MX_TIM2_Init+0xe4>)
 800429c:	f003 fed4 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80042a6:	f7ff f9eb 	bl	8003680 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80042aa:	4817      	ldr	r0, [pc, #92]	; (8004308 <MX_TIM2_Init+0xe4>)
 80042ac:	f003 fafe 	bl	80078ac <HAL_TIM_OC_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80042b6:	f7ff f9e3 	bl	8003680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	4619      	mov	r1, r3
 80042c8:	480f      	ldr	r0, [pc, #60]	; (8004308 <MX_TIM2_Init+0xe4>)
 80042ca:	f004 fa7d 	bl	80087c8 <HAL_TIMEx_MasterConfigSynchronization>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80042d4:	f7ff f9d4 	bl	8003680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042d8:	2300      	movs	r3, #0
 80042da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	2200      	movs	r2, #0
 80042ec:	4619      	mov	r1, r3
 80042ee:	4806      	ldr	r0, [pc, #24]	; (8004308 <MX_TIM2_Init+0xe4>)
 80042f0:	f003 fd94 	bl	8007e1c <HAL_TIM_OC_ConfigChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80042fa:	f7ff f9c1 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	3738      	adds	r7, #56	; 0x38
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200091d8 	.word	0x200091d8

0800430c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08e      	sub	sp, #56	; 0x38
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004320:	f107 0320 	add.w	r3, r7, #32
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
 8004338:	615a      	str	r2, [r3, #20]
 800433a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <MX_TIM3_Init+0xe4>)
 800433e:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <MX_TIM3_Init+0xe8>)
 8004340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004344:	2224      	movs	r2, #36	; 0x24
 8004346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <MX_TIM3_Init+0xe4>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004354:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <MX_TIM3_Init+0xe4>)
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004362:	4823      	ldr	r0, [pc, #140]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004364:	f003 f9f2 	bl	800774c <HAL_TIM_Base_Init>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800436e:	f7ff f987 	bl	8003680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800437c:	4619      	mov	r1, r3
 800437e:	481c      	ldr	r0, [pc, #112]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004380:	f003 fe62 	bl	8008048 <HAL_TIM_ConfigClockSource>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800438a:	f7ff f979 	bl	8003680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800438e:	4818      	ldr	r0, [pc, #96]	; (80043f0 <MX_TIM3_Init+0xe4>)
 8004390:	f003 fae4 	bl	800795c <HAL_TIM_PWM_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800439a:	f7ff f971 	bl	8003680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043a6:	f107 0320 	add.w	r3, r7, #32
 80043aa:	4619      	mov	r1, r3
 80043ac:	4810      	ldr	r0, [pc, #64]	; (80043f0 <MX_TIM3_Init+0xe4>)
 80043ae:	f004 fa0b 	bl	80087c8 <HAL_TIMEx_MasterConfigSynchronization>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80043b8:	f7ff f962 	bl	8003680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043bc:	2360      	movs	r3, #96	; 0x60
 80043be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 80043c0:	23fa      	movs	r3, #250	; 0xfa
 80043c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	2200      	movs	r2, #0
 80043d0:	4619      	mov	r1, r3
 80043d2:	4807      	ldr	r0, [pc, #28]	; (80043f0 <MX_TIM3_Init+0xe4>)
 80043d4:	f003 fd7a 	bl	8007ecc <HAL_TIM_PWM_ConfigChannel>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80043de:	f7ff f94f 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043e2:	4803      	ldr	r0, [pc, #12]	; (80043f0 <MX_TIM3_Init+0xe4>)
 80043e4:	f000 f8b2 	bl	800454c <HAL_TIM_MspPostInit>

}
 80043e8:	bf00      	nop
 80043ea:	3738      	adds	r7, #56	; 0x38
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20009190 	.word	0x20009190
 80043f4:	40000400 	.word	0x40000400

080043f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800440c:	463b      	mov	r3, r7
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <MX_TIM4_Init+0x94>)
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <MX_TIM4_Init+0x98>)
 8004418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600;
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <MX_TIM4_Init+0x94>)
 800441c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004420:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <MX_TIM4_Init+0x94>)
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <MX_TIM4_Init+0x94>)
 800442a:	2264      	movs	r2, #100	; 0x64
 800442c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <MX_TIM4_Init+0x94>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <MX_TIM4_Init+0x94>)
 8004436:	2200      	movs	r2, #0
 8004438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800443a:	4814      	ldr	r0, [pc, #80]	; (800448c <MX_TIM4_Init+0x94>)
 800443c:	f003 f986 	bl	800774c <HAL_TIM_Base_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004446:	f7ff f91b 	bl	8003680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800444a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	4619      	mov	r1, r3
 8004456:	480d      	ldr	r0, [pc, #52]	; (800448c <MX_TIM4_Init+0x94>)
 8004458:	f003 fdf6 	bl	8008048 <HAL_TIM_ConfigClockSource>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004462:	f7ff f90d 	bl	8003680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800446e:	463b      	mov	r3, r7
 8004470:	4619      	mov	r1, r3
 8004472:	4806      	ldr	r0, [pc, #24]	; (800448c <MX_TIM4_Init+0x94>)
 8004474:	f004 f9a8 	bl	80087c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800447e:	f7ff f8ff 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20009148 	.word	0x20009148
 8004490:	40000800 	.word	0x40000800

08004494 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d114      	bne.n	80044d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	61d3      	str	r3, [r2, #28]
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80044be:	2200      	movs	r2, #0
 80044c0:	2105      	movs	r1, #5
 80044c2:	201c      	movs	r0, #28
 80044c4:	f001 fc57 	bl	8005d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80044c8:	201c      	movs	r0, #28
 80044ca:	f001 fc70 	bl	8005dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80044ce:	e032      	b.n	8004536 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIM_Base_MspInit+0xb0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d114      	bne.n	8004504 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	61d3      	str	r3, [r2, #28]
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2105      	movs	r1, #5
 80044f6:	201d      	movs	r0, #29
 80044f8:	f001 fc3d 	bl	8005d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044fc:	201d      	movs	r0, #29
 80044fe:	f001 fc56 	bl	8005dae <HAL_NVIC_EnableIRQ>
}
 8004502:	e018      	b.n	8004536 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_TIM_Base_MspInit+0xb4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d113      	bne.n	8004536 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	61d3      	str	r3, [r2, #28]
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_TIM_Base_MspInit+0xac>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	2105      	movs	r1, #5
 800452a:	201e      	movs	r0, #30
 800452c:	f001 fc23 	bl	8005d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004530:	201e      	movs	r0, #30
 8004532:	f001 fc3c 	bl	8005dae <HAL_NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800

0800454c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_TIM_MspPostInit+0x7c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d129      	bne.n	80045c0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_TIM_MspPostInit+0x80>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_TIM_MspPostInit+0x80>)
 8004572:	f043 0308 	orr.w	r3, r3, #8
 8004576:	6193      	str	r3, [r2, #24]
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_TIM_MspPostInit+0x80>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004584:	2310      	movs	r3, #16
 8004586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458c:	2302      	movs	r3, #2
 800458e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4619      	mov	r1, r3
 8004596:	480e      	ldr	r0, [pc, #56]	; (80045d0 <HAL_TIM_MspPostInit+0x84>)
 8004598:	f002 f92e 	bl	80067f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <HAL_TIM_MspPostInit+0x88>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <HAL_TIM_MspPostInit+0x88>)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045c0:	bf00      	nop
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40010c00 	.word	0x40010c00
 80045d4:	40010000 	.word	0x40010000

080045d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <MX_USART2_UART_Init+0x50>)
 80045e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 80045fe:	220c      	movs	r2, #12
 8004600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 800460a:	2200      	movs	r2, #0
 800460c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800460e:	4805      	ldr	r0, [pc, #20]	; (8004624 <MX_USART2_UART_Init+0x4c>)
 8004610:	f004 f958 	bl	80088c4 <HAL_UART_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800461a:	f7ff f831 	bl	8003680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200092a8 	.word	0x200092a8
 8004628:	40004400 	.word	0x40004400

0800462c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a47      	ldr	r2, [pc, #284]	; (8004764 <HAL_UART_MspInit+0x138>)
 8004648:	4293      	cmp	r3, r2
 800464a:	f040 8086 	bne.w	800475a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800464e:	4b46      	ldr	r3, [pc, #280]	; (8004768 <HAL_UART_MspInit+0x13c>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a45      	ldr	r2, [pc, #276]	; (8004768 <HAL_UART_MspInit+0x13c>)
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	61d3      	str	r3, [r2, #28]
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_UART_MspInit+0x13c>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004666:	4b40      	ldr	r3, [pc, #256]	; (8004768 <HAL_UART_MspInit+0x13c>)
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	4a3f      	ldr	r2, [pc, #252]	; (8004768 <HAL_UART_MspInit+0x13c>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6193      	str	r3, [r2, #24]
 8004672:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <HAL_UART_MspInit+0x13c>)
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800467e:	2304      	movs	r3, #4
 8004680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004686:	2303      	movs	r3, #3
 8004688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	4619      	mov	r1, r3
 8004690:	4836      	ldr	r0, [pc, #216]	; (800476c <HAL_UART_MspInit+0x140>)
 8004692:	f002 f8b1 	bl	80067f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004696:	2308      	movs	r3, #8
 8004698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a2:	f107 0310 	add.w	r3, r7, #16
 80046a6:	4619      	mov	r1, r3
 80046a8:	4830      	ldr	r0, [pc, #192]	; (800476c <HAL_UART_MspInit+0x140>)
 80046aa:	f002 f8a5 	bl	80067f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <HAL_UART_MspInit+0x148>)
 80046b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046d4:	2220      	movs	r2, #32
 80046d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80046de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80046e0:	4823      	ldr	r0, [pc, #140]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046e2:	f001 fc07 	bl	8005ef4 <HAL_DMA_Init>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80046ec:	f7fe ffc8 	bl	8003680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_UART_MspInit+0x144>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_UART_MspInit+0x14c>)
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_UART_MspInit+0x150>)
 8004700:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004704:	2210      	movs	r2, #16
 8004706:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_UART_MspInit+0x14c>)
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_UART_MspInit+0x14c>)
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004720:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004722:	2200      	movs	r2, #0
 8004724:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004728:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800472c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800472e:	4812      	ldr	r0, [pc, #72]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004730:	f001 fbe0 	bl	8005ef4 <HAL_DMA_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800473a:	f7fe ffa1 	bl	8003680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004742:	635a      	str	r2, [r3, #52]	; 0x34
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <HAL_UART_MspInit+0x14c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2105      	movs	r1, #5
 800474e:	2026      	movs	r0, #38	; 0x26
 8004750:	f001 fb11 	bl	8005d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004754:	2026      	movs	r0, #38	; 0x26
 8004756:	f001 fb2a 	bl	8005dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800475a:	bf00      	nop
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40004400 	.word	0x40004400
 8004768:	40021000 	.word	0x40021000
 800476c:	40010800 	.word	0x40010800
 8004770:	20009220 	.word	0x20009220
 8004774:	4002006c 	.word	0x4002006c
 8004778:	20009264 	.word	0x20009264
 800477c:	40020080 	.word	0x40020080

08004780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004780:	480c      	ldr	r0, [pc, #48]	; (80047b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004782:	490d      	ldr	r1, [pc, #52]	; (80047b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004784:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004788:	e002      	b.n	8004790 <LoopCopyDataInit>

0800478a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800478a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800478c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478e:	3304      	adds	r3, #4

08004790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004794:	d3f9      	bcc.n	800478a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004798:	4c0a      	ldr	r4, [pc, #40]	; (80047c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800479a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800479c:	e001      	b.n	80047a2 <LoopFillZerobss>

0800479e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047a0:	3204      	adds	r2, #4

080047a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a4:	d3fb      	bcc.n	800479e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047a6:	f7ff fd37 	bl	8004218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047aa:	f015 f8eb 	bl	8019984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ae:	f7fe feeb 	bl	8003588 <main>
  bx lr
 80047b2:	4770      	bx	lr
  ldr r0, =_sdata
 80047b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b8:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 80047bc:	0801cef8 	.word	0x0801cef8
  ldr r2, =_sbss
 80047c0:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80047c4:	2000e4e0 	.word	0x2000e4e0

080047c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047c8:	e7fe      	b.n	80047c8 <ADC1_2_IRQHandler>
	...

080047cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_Init+0x28>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <HAL_Init+0x28>)
 80047d6:	f043 0310 	orr.w	r3, r3, #16
 80047da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047dc:	2003      	movs	r0, #3
 80047de:	f001 fabf 	bl	8005d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047e2:	200f      	movs	r0, #15
 80047e4:	f7ff fb9c 	bl	8003f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047e8:	f7ff fb62 	bl	8003eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40022000 	.word	0x40022000

080047f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_IncTick+0x1c>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_IncTick+0x20>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4413      	add	r3, r2
 8004808:	4a03      	ldr	r2, [pc, #12]	; (8004818 <HAL_IncTick+0x20>)
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	20000010 	.word	0x20000010
 8004818:	200092ec 	.word	0x200092ec

0800481c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return uwTick;
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <HAL_GetTick+0x10>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	200092ec 	.word	0x200092ec

08004830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff fff0 	bl	800481c <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004848:	d005      	beq.n	8004856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_Delay+0x44>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004856:	bf00      	nop
 8004858:	f7ff ffe0 	bl	800481c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d8f7      	bhi.n	8004858 <HAL_Delay+0x28>
  {
  }
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000010 	.word	0x20000010

08004878 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0ce      	b.n	8004a38 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fea6 	bl	8001608 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fc03 	bl	80050c8 <ADC_ConversionStop_Disable>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 80a9 	bne.w	8004a26 <HAL_ADC_Init+0x1ae>
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80a5 	bne.w	8004a26 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048e4:	f023 0302 	bic.w	r3, r3, #2
 80048e8:	f043 0202 	orr.w	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4951      	ldr	r1, [pc, #324]	; (8004a40 <HAL_ADC_Init+0x1c8>)
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d10a      	bne.n	8004914 <HAL_ADC_Init+0x9c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004906:	d002      	beq.n	800490e <HAL_ADC_Init+0x96>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	e004      	b.n	8004918 <HAL_ADC_Init+0xa0>
 800490e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004912:	e001      	b.n	8004918 <HAL_ADC_Init+0xa0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004918:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7b1b      	ldrb	r3, [r3, #12]
 800491e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004920:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004930:	d003      	beq.n	800493a <HAL_ADC_Init+0xc2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d102      	bne.n	8004940 <HAL_ADC_Init+0xc8>
 800493a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493e:	e000      	b.n	8004942 <HAL_ADC_Init+0xca>
 8004940:	2300      	movs	r3, #0
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7d1b      	ldrb	r3, [r3, #20]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d119      	bne.n	8004984 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7b1b      	ldrb	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	3b01      	subs	r3, #1
 800495e:	035a      	lsls	r2, r3, #13
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e00b      	b.n	8004984 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <HAL_ADC_Init+0x1cc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d003      	beq.n	80049be <HAL_ADC_Init+0x146>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d104      	bne.n	80049c8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	051b      	lsls	r3, r3, #20
 80049c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	430a      	orrs	r2, r1
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_ADC_Init+0x1d0>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10b      	bne.n	8004a04 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	f043 0201 	orr.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a02:	e018      	b.n	8004a36 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f023 0312 	bic.w	r3, r3, #18
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a24:	e007      	b.n	8004a36 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40013c00 	.word	0x40013c00
 8004a44:	ffe1f7fd 	.word	0xffe1f7fd
 8004a48:	ff1f0efe 	.word	0xff1f0efe

08004a4c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_ADC_Start+0x1a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e098      	b.n	8004b98 <HAL_ADC_Start+0x14c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fad0 	bl	8005014 <ADC_Enable>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8087 	bne.w	8004b8e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a41      	ldr	r2, [pc, #260]	; (8004ba0 <HAL_ADC_Start+0x154>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d105      	bne.n	8004aaa <HAL_ADC_Start+0x5e>
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <HAL_ADC_Start+0x158>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d115      	bne.n	8004ad6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d026      	beq.n	8004b12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004acc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ad4:	e01d      	b.n	8004b12 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <HAL_ADC_Start+0x158>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_ADC_Start+0xaa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_ADC_Start+0x154>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10d      	bne.n	8004b12 <HAL_ADC_Start+0xc6>
 8004af6:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <HAL_ADC_Start+0x158>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d006      	beq.n	8004b2c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f023 0206 	bic.w	r2, r3, #6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b2a:	e002      	b.n	8004b32 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0202 	mvn.w	r2, #2
 8004b42:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b52:	d113      	bne.n	8004b7c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b58:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <HAL_ADC_Start+0x154>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d105      	bne.n	8004b6a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_ADC_Start+0x158>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	e00c      	b.n	8004b96 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	e003      	b.n	8004b96 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40012800 	.word	0x40012800
 8004ba4:	40012400 	.word	0x40012400

08004ba8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_Stop+0x1a>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e01a      	b.n	8004bf8 <HAL_ADC_Stop+0x50>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa7c 	bl	80050c8 <ADC_ConversionStop_Disable>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004c16:	f7ff fe01 	bl	800481c <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0d3      	b.n	8004dea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d131      	bne.n	8004cb4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d12a      	bne.n	8004cb4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c5e:	e021      	b.n	8004ca4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c66:	d01d      	beq.n	8004ca4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_ADC_PollForConversion+0x7e>
 8004c6e:	f7ff fdd5 	bl	800481c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d212      	bcs.n	8004ca4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0a2      	b.n	8004dea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0d6      	beq.n	8004c60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004cb2:	e070      	b.n	8004d96 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <HAL_ADC_PollForConversion+0x1f4>)
 8004cb6:	681c      	ldr	r4, [r3, #0]
 8004cb8:	2002      	movs	r0, #2
 8004cba:	f002 fc61 	bl	8007580 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6919      	ldr	r1, [r3, #16]
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <HAL_ADC_PollForConversion+0x1f8>)
 8004ccc:	400b      	ands	r3, r1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d118      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x104>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68d9      	ldr	r1, [r3, #12]
 8004cd8:	4b48      	ldr	r3, [pc, #288]	; (8004dfc <HAL_ADC_PollForConversion+0x1fc>)
 8004cda:	400b      	ands	r3, r1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d111      	bne.n	8004d04 <HAL_ADC_PollForConversion+0x104>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6919      	ldr	r1, [r3, #16]
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_ADC_PollForConversion+0x200>)
 8004ce8:	400b      	ands	r3, r1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d108      	bne.n	8004d00 <HAL_ADC_PollForConversion+0x100>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_ADC_PollForConversion+0x204>)
 8004cf6:	400b      	ands	r3, r1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_PollForConversion+0x100>
 8004cfc:	2314      	movs	r3, #20
 8004cfe:	e020      	b.n	8004d42 <HAL_ADC_PollForConversion+0x142>
 8004d00:	2329      	movs	r3, #41	; 0x29
 8004d02:	e01e      	b.n	8004d42 <HAL_ADC_PollForConversion+0x142>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6919      	ldr	r1, [r3, #16]
 8004d0a:	4b3d      	ldr	r3, [pc, #244]	; (8004e00 <HAL_ADC_PollForConversion+0x200>)
 8004d0c:	400b      	ands	r3, r1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_ADC_PollForConversion+0x120>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68d9      	ldr	r1, [r3, #12]
 8004d18:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_ADC_PollForConversion+0x204>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <HAL_ADC_PollForConversion+0x13c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6919      	ldr	r1, [r3, #16]
 8004d26:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_ADC_PollForConversion+0x208>)
 8004d28:	400b      	ands	r3, r1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <HAL_ADC_PollForConversion+0x140>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68d9      	ldr	r1, [r3, #12]
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <HAL_ADC_PollForConversion+0x208>)
 8004d36:	400b      	ands	r3, r1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_PollForConversion+0x140>
 8004d3c:	2354      	movs	r3, #84	; 0x54
 8004d3e:	e000      	b.n	8004d42 <HAL_ADC_PollForConversion+0x142>
 8004d40:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d48:	e021      	b.n	8004d8e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d50:	d01a      	beq.n	8004d88 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_ADC_PollForConversion+0x168>
 8004d58:	f7ff fd60 	bl	800481c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d20f      	bcs.n	8004d88 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d90b      	bls.n	8004d88 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f043 0204 	orr.w	r2, r3, #4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e030      	b.n	8004dea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8d9      	bhi.n	8004d4a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0212 	mvn.w	r2, #18
 8004d9e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004db6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004dba:	d115      	bne.n	8004de8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d111      	bne.n	8004de8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000008 	.word	0x20000008
 8004df8:	24924924 	.word	0x24924924
 8004dfc:	00924924 	.word	0x00924924
 8004e00:	12492492 	.word	0x12492492
 8004e04:	00492492 	.word	0x00492492
 8004e08:	00249249 	.word	0x00249249

08004e0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x20>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e0dc      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1da>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d81c      	bhi.n	8004e8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	3b05      	subs	r3, #5
 8004e66:	221f      	movs	r2, #31
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	4019      	ands	r1, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3b05      	subs	r3, #5
 8004e80:	fa00 f203 	lsl.w	r2, r0, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004e8c:	e03c      	b.n	8004f08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d81c      	bhi.n	8004ed0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b23      	subs	r3, #35	; 0x23
 8004ea8:	221f      	movs	r2, #31
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	4019      	ands	r1, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3b23      	subs	r3, #35	; 0x23
 8004ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ece:	e01b      	b.n	8004f08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	3b41      	subs	r3, #65	; 0x41
 8004ee2:	221f      	movs	r2, #31
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	4019      	ands	r1, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	3b41      	subs	r3, #65	; 0x41
 8004efc:	fa00 f203 	lsl.w	r2, r0, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b09      	cmp	r3, #9
 8004f0e:	d91c      	bls.n	8004f4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b1e      	subs	r3, #30
 8004f22:	2207      	movs	r2, #7
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	4019      	ands	r1, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6898      	ldr	r0, [r3, #8]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	3b1e      	subs	r3, #30
 8004f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e019      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6919      	ldr	r1, [r3, #16]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	2207      	movs	r2, #7
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	4019      	ands	r1, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6898      	ldr	r0, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	fa00 f203 	lsl.w	r2, r0, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d003      	beq.n	8004f8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f8a:	2b11      	cmp	r3, #17
 8004f8c:	d132      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d126      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004fb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d11a      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_ADC_ConfigChannel+0x1e8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <HAL_ADC_ConfigChannel+0x1ec>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	0c9a      	lsrs	r2, r3, #18
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fd4:	e002      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f9      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x1b2>
 8004fe2:	e007      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	40012400 	.word	0x40012400
 800500c:	20000008 	.word	0x20000008
 8005010:	431bde83 	.word	0x431bde83

08005014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d040      	beq.n	80050b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005042:	4b1f      	ldr	r3, [pc, #124]	; (80050c0 <ADC_Enable+0xac>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <ADC_Enable+0xb0>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	0c9b      	lsrs	r3, r3, #18
 800504e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005050:	e002      	b.n	8005058 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3b01      	subs	r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f9      	bne.n	8005052 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800505e:	f7ff fbdd 	bl	800481c <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005064:	e01f      	b.n	80050a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005066:	f7ff fbd9 	bl	800481c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d918      	bls.n	80050a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d011      	beq.n	80050a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e007      	b.n	80050b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d1d8      	bne.n	8005066 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008
 80050c4:	431bde83 	.word	0x431bde83

080050c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d12e      	bne.n	8005140 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050f2:	f7ff fb93 	bl	800481c <HAL_GetTick>
 80050f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80050f8:	e01b      	b.n	8005132 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050fa:	f7ff fb8f 	bl	800481c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d914      	bls.n	8005132 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10d      	bne.n	8005132 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f043 0210 	orr.w	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e007      	b.n	8005142 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d0dc      	beq.n	80050fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0ed      	b.n	8005338 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc fad7 	bl	800171c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800517e:	f7ff fb4d 	bl	800481c <HAL_GetTick>
 8005182:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005184:	e012      	b.n	80051ac <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005186:	f7ff fb49 	bl	800481c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b0a      	cmp	r3, #10
 8005192:	d90b      	bls.n	80051ac <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2205      	movs	r2, #5
 80051a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0c5      	b.n	8005338 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0e5      	beq.n	8005186 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0202 	bic.w	r2, r2, #2
 80051c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051ca:	f7ff fb27 	bl	800481c <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051d0:	e012      	b.n	80051f8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051d2:	f7ff fb23 	bl	800481c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b0a      	cmp	r3, #10
 80051de:	d90b      	bls.n	80051f8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2205      	movs	r2, #5
 80051f0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e09f      	b.n	8005338 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7e1b      	ldrb	r3, [r3, #24]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d108      	bne.n	8005220 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7e5b      	ldrb	r3, [r3, #25]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e007      	b.n	800525a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7e9b      	ldrb	r3, [r3, #26]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d108      	bne.n	8005274 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0220 	orr.w	r2, r2, #32
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e007      	b.n	8005284 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0220 	bic.w	r2, r2, #32
 8005282:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	7edb      	ldrb	r3, [r3, #27]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d108      	bne.n	800529e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0210 	bic.w	r2, r2, #16
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e007      	b.n	80052ae <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0210 	orr.w	r2, r2, #16
 80052ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	7f1b      	ldrb	r3, [r3, #28]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d108      	bne.n	80052c8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0208 	orr.w	r2, r2, #8
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e007      	b.n	80052d8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0208 	bic.w	r2, r2, #8
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7f5b      	ldrb	r3, [r3, #29]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d108      	bne.n	80052f2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0204 	orr.w	r2, r2, #4
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e007      	b.n	8005302 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0204 	bic.w	r2, r2, #4
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	ea42 0103 	orr.w	r1, r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005356:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d003      	beq.n	8005366 <HAL_CAN_ConfigFilter+0x26>
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b02      	cmp	r3, #2
 8005362:	f040 80aa 	bne.w	80054ba <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2201      	movs	r2, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	43db      	mvns	r3, r3
 8005390:	401a      	ands	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d123      	bne.n	80053e8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	401a      	ands	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3248      	adds	r2, #72	; 0x48
 80053c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	3348      	adds	r3, #72	; 0x48
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d122      	bne.n	8005436 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005410:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3248      	adds	r2, #72	; 0x48
 8005416:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800542a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	3348      	adds	r3, #72	; 0x48
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	440b      	add	r3, r1
 8005434:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	43db      	mvns	r3, r3
 8005448:	401a      	ands	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005450:	e007      	b.n	8005462 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	431a      	orrs	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	43db      	mvns	r3, r3
 8005474:	401a      	ands	r2, r3
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800547c:	e007      	b.n	800548e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	431a      	orrs	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	431a      	orrs	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054ac:	f023 0201 	bic.w	r2, r3, #1
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e006      	b.n	80054c8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d12e      	bne.n	8005544 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054fe:	f7ff f98d 	bl	800481c <HAL_GetTick>
 8005502:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005504:	e012      	b.n	800552c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005506:	f7ff f989 	bl	800481c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d90b      	bls.n	800552c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2205      	movs	r2, #5
 8005524:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e012      	b.n	8005552 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e006      	b.n	8005552 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800555a:	b480      	push	{r7}
 800555c:	b087      	sub	sp, #28
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d003      	beq.n	800557e <HAL_CAN_GetRxMessage+0x24>
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b02      	cmp	r3, #2
 800557a:	f040 80f3 	bne.w	8005764 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10e      	bne.n	80055a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0e7      	b.n	8005772 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0d8      	b.n	8005772 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	331b      	adds	r3, #27
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0204 	and.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	331b      	adds	r3, #27
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4413      	add	r3, r2
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0d5b      	lsrs	r3, r3, #21
 80055ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e00b      	b.n	8005610 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	331b      	adds	r3, #27
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	4413      	add	r3, r2
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	331b      	adds	r3, #27
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	4413      	add	r3, r2
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0202 	and.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	331b      	adds	r3, #27
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	331b      	adds	r3, #27
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	4413      	add	r3, r2
 800564a:	3304      	adds	r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	331b      	adds	r3, #27
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	3304      	adds	r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	4413      	add	r3, r2
 8005678:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	4413      	add	r3, r2
 800568e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0a1a      	lsrs	r2, r3, #8
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	0c1a      	lsrs	r2, r3, #16
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	3302      	adds	r3, #2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	0e1a      	lsrs	r2, r3, #24
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	3303      	adds	r3, #3
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4413      	add	r3, r2
 80056dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	3304      	adds	r3, #4
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	0a1a      	lsrs	r2, r3, #8
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	3305      	adds	r3, #5
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	4413      	add	r3, r2
 800570e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0c1a      	lsrs	r2, r3, #16
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	3306      	adds	r3, #6
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	4413      	add	r3, r2
 8005728:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	0e1a      	lsrs	r2, r3, #24
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	3307      	adds	r3, #7
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d108      	bne.n	8005750 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0220 	orr.w	r2, r2, #32
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	e007      	b.n	8005760 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0220 	orr.w	r2, r2, #32
 800575e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e006      	b.n	8005772 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800578c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <HAL_CAN_ActivateNotification+0x1e>
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d109      	bne.n	80057ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6959      	ldr	r1, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e006      	b.n	80057bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08a      	sub	sp, #40	; 0x28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d07c      	beq.n	8005906 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d023      	beq.n	800585e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f983 	bl	8005b34 <HAL_CAN_TxMailbox0CompleteCallback>
 800582e:	e016      	b.n	800585e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	e00c      	b.n	800585e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	e002      	b.n	800585e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f986 	bl	8005b6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d024      	beq.n	80058b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005870:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f962 	bl	8005b46 <HAL_CAN_TxMailbox1CompleteCallback>
 8005882:	e016      	b.n	80058b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	e00c      	b.n	80058b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e002      	b.n	80058b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f965 	bl	8005b7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d024      	beq.n	8005906 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f941 	bl	8005b58 <HAL_CAN_TxMailbox2CompleteCallback>
 80058d6:	e016      	b.n	8005906 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ea:	e00c      	b.n	8005906 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e002      	b.n	8005906 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f944 	bl	8005b8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2210      	movs	r2, #16
 8005928:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d006      	beq.n	800594c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2208      	movs	r2, #8
 8005944:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f92a 	bl	8005ba0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fd fc7f 	bl	8003268 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d006      	beq.n	80059b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2208      	movs	r2, #8
 80059a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f90a 	bl	8005bc4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f8f2 	bl	8005bb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d006      	beq.n	80059f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8f3 	bl	8005bd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8eb 	bl	8005be8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d07b      	beq.n	8005b14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d072      	beq.n	8005b0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	f043 0304 	orr.w	r3, r3, #4
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d043      	beq.n	8005b0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d03e      	beq.n	8005b0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a94:	2b60      	cmp	r3, #96	; 0x60
 8005a96:	d02b      	beq.n	8005af0 <HAL_CAN_IRQHandler+0x32a>
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d82e      	bhi.n	8005afa <HAL_CAN_IRQHandler+0x334>
 8005a9c:	2b50      	cmp	r3, #80	; 0x50
 8005a9e:	d022      	beq.n	8005ae6 <HAL_CAN_IRQHandler+0x320>
 8005aa0:	2b50      	cmp	r3, #80	; 0x50
 8005aa2:	d82a      	bhi.n	8005afa <HAL_CAN_IRQHandler+0x334>
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d019      	beq.n	8005adc <HAL_CAN_IRQHandler+0x316>
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d826      	bhi.n	8005afa <HAL_CAN_IRQHandler+0x334>
 8005aac:	2b30      	cmp	r3, #48	; 0x30
 8005aae:	d010      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x30c>
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	d822      	bhi.n	8005afa <HAL_CAN_IRQHandler+0x334>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d002      	beq.n	8005abe <HAL_CAN_IRQHandler+0x2f8>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d005      	beq.n	8005ac8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005abc:	e01d      	b.n	8005afa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	f043 0308 	orr.w	r3, r3, #8
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ac6:	e019      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f043 0310 	orr.w	r3, r3, #16
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ad0:	e014      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f043 0320 	orr.w	r3, r3, #32
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ada:	e00f      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ae4:	e00a      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005aee:	e005      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005af8:	e000      	b.n	8005afc <HAL_CAN_IRQHandler+0x336>
            break;
 8005afa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2204      	movs	r2, #4
 8005b12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f867 	bl	8005bfa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3728      	adds	r7, #40	; 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c3e:	4a04      	ldr	r2, [pc, #16]	; (8005c50 <__NVIC_SetPriorityGrouping+0x44>)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	60d3      	str	r3, [r2, #12]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <__NVIC_GetPriorityGrouping+0x18>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 0307 	and.w	r3, r3, #7
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db0b      	blt.n	8005c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	f003 021f 	and.w	r2, r3, #31
 8005c88:	4906      	ldr	r1, [pc, #24]	; (8005ca4 <__NVIC_EnableIRQ+0x34>)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2001      	movs	r0, #1
 8005c92:	fa00 f202 	lsl.w	r2, r0, r2
 8005c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	e000e100 	.word	0xe000e100

08005ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	6039      	str	r1, [r7, #0]
 8005cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	db0a      	blt.n	8005cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <__NVIC_SetPriority+0x4c>)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	0112      	lsls	r2, r2, #4
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	440b      	add	r3, r1
 8005ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cd0:	e00a      	b.n	8005ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4908      	ldr	r1, [pc, #32]	; (8005cf8 <__NVIC_SetPriority+0x50>)
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	0112      	lsls	r2, r2, #4
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	761a      	strb	r2, [r3, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000e100 	.word	0xe000e100
 8005cf8:	e000ed00 	.word	0xe000ed00

08005cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	; 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f1c3 0307 	rsb	r3, r3, #7
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	bf28      	it	cs
 8005d1a:	2304      	movcs	r3, #4
 8005d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d902      	bls.n	8005d2c <NVIC_EncodePriority+0x30>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3b03      	subs	r3, #3
 8005d2a:	e000      	b.n	8005d2e <NVIC_EncodePriority+0x32>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43da      	mvns	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	401a      	ands	r2, r3
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	43d9      	mvns	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d54:	4313      	orrs	r3, r2
         );
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3724      	adds	r7, #36	; 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ff4f 	bl	8005c0c <__NVIC_SetPriorityGrouping>
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d88:	f7ff ff64 	bl	8005c54 <__NVIC_GetPriorityGrouping>
 8005d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff ffb2 	bl	8005cfc <NVIC_EncodePriority>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff81 	bl	8005ca8 <__NVIC_SetPriority>
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4603      	mov	r3, r0
 8005db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff57 	bl	8005c70 <__NVIC_EnableIRQ>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e014      	b.n	8005e06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fb ff6f 	bl	8001cd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4413      	add	r3, r2
 8005e32:	3308      	adds	r3, #8
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e004      	b.n	8005e42 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3314      	adds	r3, #20
 8005e40:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	461a      	mov	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	795b      	ldrb	r3, [r3, #5]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_DAC_ConfigChannel+0x18>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e03c      	b.n	8005ee8 <HAL_DAC_ConfigChannel+0x92>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2202      	movs	r2, #2
 8005e78:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4013      	ands	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	22c0      	movs	r2, #192	; 0xc0
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e059      	b.n	8005fbe <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <HAL_DMA_Init+0xd4>)
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d80f      	bhi.n	8005f36 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_DMA_Init+0xd8>)
 8005f1e:	4413      	add	r3, r2
 8005f20:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <HAL_DMA_Init+0xdc>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	009a      	lsls	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a28      	ldr	r2, [pc, #160]	; (8005fd4 <HAL_DMA_Init+0xe0>)
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f34:	e00e      	b.n	8005f54 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <HAL_DMA_Init+0xe4>)
 8005f3e:	4413      	add	r3, r2
 8005f40:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_DMA_Init+0xdc>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	009a      	lsls	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <HAL_DMA_Init+0xe8>)
 8005f52:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	40020407 	.word	0x40020407
 8005fcc:	bffdfff8 	.word	0xbffdfff8
 8005fd0:	cccccccd 	.word	0xcccccccd
 8005fd4:	40020000 	.word	0x40020000
 8005fd8:	bffdfbf8 	.word	0xbffdfbf8
 8005fdc:	40020400 	.word	0x40020400

08005fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Start_IT+0x20>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e04a      	b.n	8006096 <HAL_DMA_Start_IT+0xb6>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800600e:	2b01      	cmp	r3, #1
 8006010:	d13a      	bne.n	8006088 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fbb0 	bl	800679c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 020e 	orr.w	r2, r2, #14
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e00f      	b.n	8006076 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 020a 	orr.w	r2, r2, #10
 8006074:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e005      	b.n	8006094 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006090:	2302      	movs	r3, #2
 8006092:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d008      	beq.n	80060c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e020      	b.n	8006108 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 020e 	bic.w	r2, r2, #14
 80060d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f202 	lsl.w	r2, r1, r2
 80060f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr
	...

08006114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006126:	2b02      	cmp	r3, #2
 8006128:	d005      	beq.n	8006136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e0d6      	b.n	80062e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 020e 	bic.w	r2, r2, #14
 8006144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0201 	bic.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	4b64      	ldr	r3, [pc, #400]	; (80062f0 <HAL_DMA_Abort_IT+0x1dc>)
 800615e:	429a      	cmp	r2, r3
 8006160:	d958      	bls.n	8006214 <HAL_DMA_Abort_IT+0x100>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a63      	ldr	r2, [pc, #396]	; (80062f4 <HAL_DMA_Abort_IT+0x1e0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04f      	beq.n	800620c <HAL_DMA_Abort_IT+0xf8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a61      	ldr	r2, [pc, #388]	; (80062f8 <HAL_DMA_Abort_IT+0x1e4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d048      	beq.n	8006208 <HAL_DMA_Abort_IT+0xf4>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a60      	ldr	r2, [pc, #384]	; (80062fc <HAL_DMA_Abort_IT+0x1e8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d040      	beq.n	8006202 <HAL_DMA_Abort_IT+0xee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5e      	ldr	r2, [pc, #376]	; (8006300 <HAL_DMA_Abort_IT+0x1ec>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d038      	beq.n	80061fc <HAL_DMA_Abort_IT+0xe8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a5d      	ldr	r2, [pc, #372]	; (8006304 <HAL_DMA_Abort_IT+0x1f0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d030      	beq.n	80061f6 <HAL_DMA_Abort_IT+0xe2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5b      	ldr	r2, [pc, #364]	; (8006308 <HAL_DMA_Abort_IT+0x1f4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d028      	beq.n	80061f0 <HAL_DMA_Abort_IT+0xdc>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a53      	ldr	r2, [pc, #332]	; (80062f0 <HAL_DMA_Abort_IT+0x1dc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d020      	beq.n	80061ea <HAL_DMA_Abort_IT+0xd6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a57      	ldr	r2, [pc, #348]	; (800630c <HAL_DMA_Abort_IT+0x1f8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d019      	beq.n	80061e6 <HAL_DMA_Abort_IT+0xd2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a56      	ldr	r2, [pc, #344]	; (8006310 <HAL_DMA_Abort_IT+0x1fc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d012      	beq.n	80061e2 <HAL_DMA_Abort_IT+0xce>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_DMA_Abort_IT+0x200>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00a      	beq.n	80061dc <HAL_DMA_Abort_IT+0xc8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a53      	ldr	r2, [pc, #332]	; (8006318 <HAL_DMA_Abort_IT+0x204>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d102      	bne.n	80061d6 <HAL_DMA_Abort_IT+0xc2>
 80061d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d4:	e01b      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061da:	e018      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e0:	e015      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061e2:	2310      	movs	r3, #16
 80061e4:	e013      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e011      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ee:	e00e      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061f4:	e00b      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061fa:	e008      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 80061fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006200:	e005      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 8006202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006206:	e002      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 8006208:	2310      	movs	r3, #16
 800620a:	e000      	b.n	800620e <HAL_DMA_Abort_IT+0xfa>
 800620c:	2301      	movs	r3, #1
 800620e:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_DMA_Abort_IT+0x208>)
 8006210:	6053      	str	r3, [r2, #4]
 8006212:	e057      	b.n	80062c4 <HAL_DMA_Abort_IT+0x1b0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <HAL_DMA_Abort_IT+0x1e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d04f      	beq.n	80062be <HAL_DMA_Abort_IT+0x1aa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <HAL_DMA_Abort_IT+0x1e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d048      	beq.n	80062ba <HAL_DMA_Abort_IT+0x1a6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a33      	ldr	r2, [pc, #204]	; (80062fc <HAL_DMA_Abort_IT+0x1e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d040      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x1a0>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <HAL_DMA_Abort_IT+0x1ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d038      	beq.n	80062ae <HAL_DMA_Abort_IT+0x19a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a30      	ldr	r2, [pc, #192]	; (8006304 <HAL_DMA_Abort_IT+0x1f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d030      	beq.n	80062a8 <HAL_DMA_Abort_IT+0x194>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <HAL_DMA_Abort_IT+0x1f4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d028      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x18e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a26      	ldr	r2, [pc, #152]	; (80062f0 <HAL_DMA_Abort_IT+0x1dc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d020      	beq.n	800629c <HAL_DMA_Abort_IT+0x188>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2b      	ldr	r2, [pc, #172]	; (800630c <HAL_DMA_Abort_IT+0x1f8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d019      	beq.n	8006298 <HAL_DMA_Abort_IT+0x184>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a29      	ldr	r2, [pc, #164]	; (8006310 <HAL_DMA_Abort_IT+0x1fc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d012      	beq.n	8006294 <HAL_DMA_Abort_IT+0x180>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a28      	ldr	r2, [pc, #160]	; (8006314 <HAL_DMA_Abort_IT+0x200>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00a      	beq.n	800628e <HAL_DMA_Abort_IT+0x17a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a26      	ldr	r2, [pc, #152]	; (8006318 <HAL_DMA_Abort_IT+0x204>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d102      	bne.n	8006288 <HAL_DMA_Abort_IT+0x174>
 8006282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006286:	e01b      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 8006288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800628c:	e018      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 800628e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006292:	e015      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 8006294:	2310      	movs	r3, #16
 8006296:	e013      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 8006298:	2301      	movs	r3, #1
 800629a:	e011      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 800629c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062a0:	e00e      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062a6:	e00b      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ac:	e008      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	e005      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062b8:	e002      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062ba:	2310      	movs	r3, #16
 80062bc:	e000      	b.n	80062c0 <HAL_DMA_Abort_IT+0x1ac>
 80062be:	2301      	movs	r3, #1
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_DMA_Abort_IT+0x20c>)
 80062c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
    } 
  }
  return status;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40020080 	.word	0x40020080
 80062f4:	40020008 	.word	0x40020008
 80062f8:	4002001c 	.word	0x4002001c
 80062fc:	40020030 	.word	0x40020030
 8006300:	40020044 	.word	0x40020044
 8006304:	40020058 	.word	0x40020058
 8006308:	4002006c 	.word	0x4002006c
 800630c:	40020408 	.word	0x40020408
 8006310:	4002041c 	.word	0x4002041c
 8006314:	40020430 	.word	0x40020430
 8006318:	40020444 	.word	0x40020444
 800631c:	40020400 	.word	0x40020400
 8006320:	40020000 	.word	0x40020000

08006324 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2204      	movs	r2, #4
 8006342:	409a      	lsls	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80d6 	beq.w	80064fa <HAL_DMA_IRQHandler+0x1d6>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80d0 	beq.w	80064fa <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4b9b      	ldr	r3, [pc, #620]	; (80065ec <HAL_DMA_IRQHandler+0x2c8>)
 8006380:	429a      	cmp	r2, r3
 8006382:	d958      	bls.n	8006436 <HAL_DMA_IRQHandler+0x112>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a99      	ldr	r2, [pc, #612]	; (80065f0 <HAL_DMA_IRQHandler+0x2cc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04f      	beq.n	800642e <HAL_DMA_IRQHandler+0x10a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a98      	ldr	r2, [pc, #608]	; (80065f4 <HAL_DMA_IRQHandler+0x2d0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d048      	beq.n	800642a <HAL_DMA_IRQHandler+0x106>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a96      	ldr	r2, [pc, #600]	; (80065f8 <HAL_DMA_IRQHandler+0x2d4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d040      	beq.n	8006424 <HAL_DMA_IRQHandler+0x100>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a95      	ldr	r2, [pc, #596]	; (80065fc <HAL_DMA_IRQHandler+0x2d8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d038      	beq.n	800641e <HAL_DMA_IRQHandler+0xfa>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a93      	ldr	r2, [pc, #588]	; (8006600 <HAL_DMA_IRQHandler+0x2dc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d030      	beq.n	8006418 <HAL_DMA_IRQHandler+0xf4>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a92      	ldr	r2, [pc, #584]	; (8006604 <HAL_DMA_IRQHandler+0x2e0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d028      	beq.n	8006412 <HAL_DMA_IRQHandler+0xee>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a89      	ldr	r2, [pc, #548]	; (80065ec <HAL_DMA_IRQHandler+0x2c8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d020      	beq.n	800640c <HAL_DMA_IRQHandler+0xe8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a8e      	ldr	r2, [pc, #568]	; (8006608 <HAL_DMA_IRQHandler+0x2e4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d019      	beq.n	8006408 <HAL_DMA_IRQHandler+0xe4>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a8c      	ldr	r2, [pc, #560]	; (800660c <HAL_DMA_IRQHandler+0x2e8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d012      	beq.n	8006404 <HAL_DMA_IRQHandler+0xe0>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a8b      	ldr	r2, [pc, #556]	; (8006610 <HAL_DMA_IRQHandler+0x2ec>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00a      	beq.n	80063fe <HAL_DMA_IRQHandler+0xda>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a89      	ldr	r2, [pc, #548]	; (8006614 <HAL_DMA_IRQHandler+0x2f0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d102      	bne.n	80063f8 <HAL_DMA_IRQHandler+0xd4>
 80063f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063f6:	e01b      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 80063f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063fc:	e018      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	e015      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	e013      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 8006408:	2304      	movs	r3, #4
 800640a:	e011      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 800640c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006410:	e00e      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 8006412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006416:	e00b      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 8006418:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800641c:	e008      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 800641e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006422:	e005      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 8006424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006428:	e002      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 800642a:	2340      	movs	r3, #64	; 0x40
 800642c:	e000      	b.n	8006430 <HAL_DMA_IRQHandler+0x10c>
 800642e:	2304      	movs	r3, #4
 8006430:	4a79      	ldr	r2, [pc, #484]	; (8006618 <HAL_DMA_IRQHandler+0x2f4>)
 8006432:	6053      	str	r3, [r2, #4]
 8006434:	e057      	b.n	80064e6 <HAL_DMA_IRQHandler+0x1c2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6d      	ldr	r2, [pc, #436]	; (80065f0 <HAL_DMA_IRQHandler+0x2cc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d04f      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x1bc>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6b      	ldr	r2, [pc, #428]	; (80065f4 <HAL_DMA_IRQHandler+0x2d0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d048      	beq.n	80064dc <HAL_DMA_IRQHandler+0x1b8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a6a      	ldr	r2, [pc, #424]	; (80065f8 <HAL_DMA_IRQHandler+0x2d4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d040      	beq.n	80064d6 <HAL_DMA_IRQHandler+0x1b2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a68      	ldr	r2, [pc, #416]	; (80065fc <HAL_DMA_IRQHandler+0x2d8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d038      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x1ac>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a67      	ldr	r2, [pc, #412]	; (8006600 <HAL_DMA_IRQHandler+0x2dc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d030      	beq.n	80064ca <HAL_DMA_IRQHandler+0x1a6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a65      	ldr	r2, [pc, #404]	; (8006604 <HAL_DMA_IRQHandler+0x2e0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d028      	beq.n	80064c4 <HAL_DMA_IRQHandler+0x1a0>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5d      	ldr	r2, [pc, #372]	; (80065ec <HAL_DMA_IRQHandler+0x2c8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d020      	beq.n	80064be <HAL_DMA_IRQHandler+0x19a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a61      	ldr	r2, [pc, #388]	; (8006608 <HAL_DMA_IRQHandler+0x2e4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d019      	beq.n	80064ba <HAL_DMA_IRQHandler+0x196>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a60      	ldr	r2, [pc, #384]	; (800660c <HAL_DMA_IRQHandler+0x2e8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d012      	beq.n	80064b6 <HAL_DMA_IRQHandler+0x192>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5e      	ldr	r2, [pc, #376]	; (8006610 <HAL_DMA_IRQHandler+0x2ec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00a      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x18c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a5d      	ldr	r2, [pc, #372]	; (8006614 <HAL_DMA_IRQHandler+0x2f0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d102      	bne.n	80064aa <HAL_DMA_IRQHandler+0x186>
 80064a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064a8:	e01b      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064ae:	e018      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b4:	e015      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	e013      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064ba:	2304      	movs	r3, #4
 80064bc:	e011      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064c2:	e00e      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064c8:	e00b      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064ce:	e008      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064d4:	e005      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064da:	e002      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	e000      	b.n	80064e2 <HAL_DMA_IRQHandler+0x1be>
 80064e0:	2304      	movs	r3, #4
 80064e2:	4a4e      	ldr	r2, [pc, #312]	; (800661c <HAL_DMA_IRQHandler+0x2f8>)
 80064e4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8136 	beq.w	800675c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80064f8:	e130      	b.n	800675c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2202      	movs	r2, #2
 8006500:	409a      	lsls	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4013      	ands	r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80f8 	beq.w	80066fc <HAL_DMA_IRQHandler+0x3d8>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80f2 	beq.w	80066fc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 020a 	bic.w	r2, r2, #10
 8006534:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	4b29      	ldr	r3, [pc, #164]	; (80065ec <HAL_DMA_IRQHandler+0x2c8>)
 8006546:	429a      	cmp	r2, r3
 8006548:	d973      	bls.n	8006632 <HAL_DMA_IRQHandler+0x30e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <HAL_DMA_IRQHandler+0x2cc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d06a      	beq.n	800662a <HAL_DMA_IRQHandler+0x306>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_DMA_IRQHandler+0x2d0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d063      	beq.n	8006626 <HAL_DMA_IRQHandler+0x302>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <HAL_DMA_IRQHandler+0x2d4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d05b      	beq.n	8006620 <HAL_DMA_IRQHandler+0x2fc>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_DMA_IRQHandler+0x2d8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d038      	beq.n	80065e4 <HAL_DMA_IRQHandler+0x2c0>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_DMA_IRQHandler+0x2dc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d030      	beq.n	80065de <HAL_DMA_IRQHandler+0x2ba>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_DMA_IRQHandler+0x2e0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d028      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2b4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a18      	ldr	r2, [pc, #96]	; (80065ec <HAL_DMA_IRQHandler+0x2c8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d020      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x2ae>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_DMA_IRQHandler+0x2e4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d019      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2aa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_DMA_IRQHandler+0x2e8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d012      	beq.n	80065ca <HAL_DMA_IRQHandler+0x2a6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_DMA_IRQHandler+0x2ec>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00a      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x2a0>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <HAL_DMA_IRQHandler+0x2f0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d102      	bne.n	80065be <HAL_DMA_IRQHandler+0x29a>
 80065b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065bc:	e036      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065c2:	e033      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c8:	e030      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065ca:	2320      	movs	r3, #32
 80065cc:	e02e      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e02c      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065d6:	e029      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065dc:	e026      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e2:	e023      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065e8:	e020      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 80065ea:	bf00      	nop
 80065ec:	40020080 	.word	0x40020080
 80065f0:	40020008 	.word	0x40020008
 80065f4:	4002001c 	.word	0x4002001c
 80065f8:	40020030 	.word	0x40020030
 80065fc:	40020044 	.word	0x40020044
 8006600:	40020058 	.word	0x40020058
 8006604:	4002006c 	.word	0x4002006c
 8006608:	40020408 	.word	0x40020408
 800660c:	4002041c 	.word	0x4002041c
 8006610:	40020430 	.word	0x40020430
 8006614:	40020444 	.word	0x40020444
 8006618:	40020400 	.word	0x40020400
 800661c:	40020000 	.word	0x40020000
 8006620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006624:	e002      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 8006626:	2320      	movs	r3, #32
 8006628:	e000      	b.n	800662c <HAL_DMA_IRQHandler+0x308>
 800662a:	2302      	movs	r3, #2
 800662c:	4a4e      	ldr	r2, [pc, #312]	; (8006768 <HAL_DMA_IRQHandler+0x444>)
 800662e:	6053      	str	r3, [r2, #4]
 8006630:	e057      	b.n	80066e2 <HAL_DMA_IRQHandler+0x3be>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a4d      	ldr	r2, [pc, #308]	; (800676c <HAL_DMA_IRQHandler+0x448>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d04f      	beq.n	80066dc <HAL_DMA_IRQHandler+0x3b8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a4b      	ldr	r2, [pc, #300]	; (8006770 <HAL_DMA_IRQHandler+0x44c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d048      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x3b4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <HAL_DMA_IRQHandler+0x450>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d040      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x3ae>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a48      	ldr	r2, [pc, #288]	; (8006778 <HAL_DMA_IRQHandler+0x454>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d038      	beq.n	80066cc <HAL_DMA_IRQHandler+0x3a8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a47      	ldr	r2, [pc, #284]	; (800677c <HAL_DMA_IRQHandler+0x458>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d030      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x3a2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a45      	ldr	r2, [pc, #276]	; (8006780 <HAL_DMA_IRQHandler+0x45c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d028      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x39c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a44      	ldr	r2, [pc, #272]	; (8006784 <HAL_DMA_IRQHandler+0x460>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d020      	beq.n	80066ba <HAL_DMA_IRQHandler+0x396>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a42      	ldr	r2, [pc, #264]	; (8006788 <HAL_DMA_IRQHandler+0x464>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d019      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x392>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a41      	ldr	r2, [pc, #260]	; (800678c <HAL_DMA_IRQHandler+0x468>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d012      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x38e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a3f      	ldr	r2, [pc, #252]	; (8006790 <HAL_DMA_IRQHandler+0x46c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00a      	beq.n	80066ac <HAL_DMA_IRQHandler+0x388>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3e      	ldr	r2, [pc, #248]	; (8006794 <HAL_DMA_IRQHandler+0x470>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d102      	bne.n	80066a6 <HAL_DMA_IRQHandler+0x382>
 80066a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066a4:	e01b      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066aa:	e018      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b0:	e015      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066b2:	2320      	movs	r3, #32
 80066b4:	e013      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e011      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066be:	e00e      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80066c4:	e00b      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066ca:	e008      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066d0:	e005      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d6:	e002      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066d8:	2320      	movs	r3, #32
 80066da:	e000      	b.n	80066de <HAL_DMA_IRQHandler+0x3ba>
 80066dc:	2302      	movs	r3, #2
 80066de:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <HAL_DMA_IRQHandler+0x474>)
 80066e0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d034      	beq.n	800675c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80066fa:	e02f      	b.n	800675c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	2208      	movs	r2, #8
 8006702:	409a      	lsls	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d028      	beq.n	800675e <HAL_DMA_IRQHandler+0x43a>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d023      	beq.n	800675e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 020e 	bic.w	r2, r2, #14
 8006724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	2101      	movs	r1, #1
 8006730:	fa01 f202 	lsl.w	r2, r1, r2
 8006734:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
    }
  }
  return;
 800675c:	bf00      	nop
 800675e:	bf00      	nop
}
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40020400 	.word	0x40020400
 800676c:	40020008 	.word	0x40020008
 8006770:	4002001c 	.word	0x4002001c
 8006774:	40020030 	.word	0x40020030
 8006778:	40020044 	.word	0x40020044
 800677c:	40020058 	.word	0x40020058
 8006780:	4002006c 	.word	0x4002006c
 8006784:	40020080 	.word	0x40020080
 8006788:	40020408 	.word	0x40020408
 800678c:	4002041c 	.word	0x4002041c
 8006790:	40020430 	.word	0x40020430
 8006794:	40020444 	.word	0x40020444
 8006798:	40020000 	.word	0x40020000

0800679c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	2101      	movs	r1, #1
 80067b4:	fa01 f202 	lsl.w	r2, r1, r2
 80067b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b10      	cmp	r3, #16
 80067c8:	d108      	bne.n	80067dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067da:	e007      	b.n	80067ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	60da      	str	r2, [r3, #12]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr
	...

080067f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b08b      	sub	sp, #44	; 0x2c
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006806:	2300      	movs	r3, #0
 8006808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800680a:	e179      	b.n	8006b00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800680c:	2201      	movs	r2, #1
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	4013      	ands	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	429a      	cmp	r2, r3
 8006826:	f040 8168 	bne.w	8006afa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4aa0      	ldr	r2, [pc, #640]	; (8006ab0 <HAL_GPIO_Init+0x2b8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d05e      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
 8006834:	4a9e      	ldr	r2, [pc, #632]	; (8006ab0 <HAL_GPIO_Init+0x2b8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d875      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 800683a:	4a9e      	ldr	r2, [pc, #632]	; (8006ab4 <HAL_GPIO_Init+0x2bc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d058      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
 8006840:	4a9c      	ldr	r2, [pc, #624]	; (8006ab4 <HAL_GPIO_Init+0x2bc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d86f      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 8006846:	4a9c      	ldr	r2, [pc, #624]	; (8006ab8 <HAL_GPIO_Init+0x2c0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d052      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
 800684c:	4a9a      	ldr	r2, [pc, #616]	; (8006ab8 <HAL_GPIO_Init+0x2c0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d869      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 8006852:	4a9a      	ldr	r2, [pc, #616]	; (8006abc <HAL_GPIO_Init+0x2c4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04c      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
 8006858:	4a98      	ldr	r2, [pc, #608]	; (8006abc <HAL_GPIO_Init+0x2c4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d863      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 800685e:	4a98      	ldr	r2, [pc, #608]	; (8006ac0 <HAL_GPIO_Init+0x2c8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d046      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
 8006864:	4a96      	ldr	r2, [pc, #600]	; (8006ac0 <HAL_GPIO_Init+0x2c8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d85d      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 800686a:	2b12      	cmp	r3, #18
 800686c:	d82a      	bhi.n	80068c4 <HAL_GPIO_Init+0xcc>
 800686e:	2b12      	cmp	r3, #18
 8006870:	d859      	bhi.n	8006926 <HAL_GPIO_Init+0x12e>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <HAL_GPIO_Init+0x80>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068f3 	.word	0x080068f3
 800687c:	080068cd 	.word	0x080068cd
 8006880:	080068df 	.word	0x080068df
 8006884:	08006921 	.word	0x08006921
 8006888:	08006927 	.word	0x08006927
 800688c:	08006927 	.word	0x08006927
 8006890:	08006927 	.word	0x08006927
 8006894:	08006927 	.word	0x08006927
 8006898:	08006927 	.word	0x08006927
 800689c:	08006927 	.word	0x08006927
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006927 	.word	0x08006927
 80068a8:	08006927 	.word	0x08006927
 80068ac:	08006927 	.word	0x08006927
 80068b0:	08006927 	.word	0x08006927
 80068b4:	08006927 	.word	0x08006927
 80068b8:	08006927 	.word	0x08006927
 80068bc:	080068d5 	.word	0x080068d5
 80068c0:	080068e9 	.word	0x080068e9
 80068c4:	4a7f      	ldr	r2, [pc, #508]	; (8006ac4 <HAL_GPIO_Init+0x2cc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80068ca:	e02c      	b.n	8006926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	623b      	str	r3, [r7, #32]
          break;
 80068d2:	e029      	b.n	8006928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	3304      	adds	r3, #4
 80068da:	623b      	str	r3, [r7, #32]
          break;
 80068dc:	e024      	b.n	8006928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	3308      	adds	r3, #8
 80068e4:	623b      	str	r3, [r7, #32]
          break;
 80068e6:	e01f      	b.n	8006928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	330c      	adds	r3, #12
 80068ee:	623b      	str	r3, [r7, #32]
          break;
 80068f0:	e01a      	b.n	8006928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80068fa:	2304      	movs	r3, #4
 80068fc:	623b      	str	r3, [r7, #32]
          break;
 80068fe:	e013      	b.n	8006928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d105      	bne.n	8006914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006908:	2308      	movs	r3, #8
 800690a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	611a      	str	r2, [r3, #16]
          break;
 8006912:	e009      	b.n	8006928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006914:	2308      	movs	r3, #8
 8006916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	615a      	str	r2, [r3, #20]
          break;
 800691e:	e003      	b.n	8006928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006920:	2300      	movs	r3, #0
 8006922:	623b      	str	r3, [r7, #32]
          break;
 8006924:	e000      	b.n	8006928 <HAL_GPIO_Init+0x130>
          break;
 8006926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2bff      	cmp	r3, #255	; 0xff
 800692c:	d801      	bhi.n	8006932 <HAL_GPIO_Init+0x13a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	e001      	b.n	8006936 <HAL_GPIO_Init+0x13e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2bff      	cmp	r3, #255	; 0xff
 800693c:	d802      	bhi.n	8006944 <HAL_GPIO_Init+0x14c>
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	e002      	b.n	800694a <HAL_GPIO_Init+0x152>
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	3b08      	subs	r3, #8
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	210f      	movs	r1, #15
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	6a39      	ldr	r1, [r7, #32]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	431a      	orrs	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80c1 	beq.w	8006afa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006978:	4b53      	ldr	r3, [pc, #332]	; (8006ac8 <HAL_GPIO_Init+0x2d0>)
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	4a52      	ldr	r2, [pc, #328]	; (8006ac8 <HAL_GPIO_Init+0x2d0>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6193      	str	r3, [r2, #24]
 8006984:	4b50      	ldr	r3, [pc, #320]	; (8006ac8 <HAL_GPIO_Init+0x2d0>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006990:	4a4e      	ldr	r2, [pc, #312]	; (8006acc <HAL_GPIO_Init+0x2d4>)
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	089b      	lsrs	r3, r3, #2
 8006996:	3302      	adds	r3, #2
 8006998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	220f      	movs	r2, #15
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	43db      	mvns	r3, r3
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a46      	ldr	r2, [pc, #280]	; (8006ad0 <HAL_GPIO_Init+0x2d8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d01f      	beq.n	80069fc <HAL_GPIO_Init+0x204>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a45      	ldr	r2, [pc, #276]	; (8006ad4 <HAL_GPIO_Init+0x2dc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d019      	beq.n	80069f8 <HAL_GPIO_Init+0x200>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a44      	ldr	r2, [pc, #272]	; (8006ad8 <HAL_GPIO_Init+0x2e0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_GPIO_Init+0x1fc>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a43      	ldr	r2, [pc, #268]	; (8006adc <HAL_GPIO_Init+0x2e4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00d      	beq.n	80069f0 <HAL_GPIO_Init+0x1f8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a42      	ldr	r2, [pc, #264]	; (8006ae0 <HAL_GPIO_Init+0x2e8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <HAL_GPIO_Init+0x1f4>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <HAL_GPIO_Init+0x2ec>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_GPIO_Init+0x1f0>
 80069e4:	2305      	movs	r3, #5
 80069e6:	e00a      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069e8:	2306      	movs	r3, #6
 80069ea:	e008      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069ec:	2304      	movs	r3, #4
 80069ee:	e006      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069f0:	2303      	movs	r3, #3
 80069f2:	e004      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e002      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <HAL_GPIO_Init+0x206>
 80069fc:	2300      	movs	r3, #0
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	f002 0203 	and.w	r2, r2, #3
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	4093      	lsls	r3, r2
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a0e:	492f      	ldr	r1, [pc, #188]	; (8006acc <HAL_GPIO_Init+0x2d4>)
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	3302      	adds	r3, #2
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a28:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	492e      	ldr	r1, [pc, #184]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	600b      	str	r3, [r1, #0]
 8006a34:	e006      	b.n	8006a44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a36:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	492a      	ldr	r1, [pc, #168]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	4924      	ldr	r1, [pc, #144]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	604b      	str	r3, [r1, #4]
 8006a5c:	e006      	b.n	8006a6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	4920      	ldr	r1, [pc, #128]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	491a      	ldr	r1, [pc, #104]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	608b      	str	r3, [r1, #8]
 8006a84:	e006      	b.n	8006a94 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	4916      	ldr	r1, [pc, #88]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d025      	beq.n	8006aec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	4910      	ldr	r1, [pc, #64]	; (8006ae8 <HAL_GPIO_Init+0x2f0>)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60cb      	str	r3, [r1, #12]
 8006aac:	e025      	b.n	8006afa <HAL_GPIO_Init+0x302>
 8006aae:	bf00      	nop
 8006ab0:	10320000 	.word	0x10320000
 8006ab4:	10310000 	.word	0x10310000
 8006ab8:	10220000 	.word	0x10220000
 8006abc:	10210000 	.word	0x10210000
 8006ac0:	10120000 	.word	0x10120000
 8006ac4:	10110000 	.word	0x10110000
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40010800 	.word	0x40010800
 8006ad4:	40010c00 	.word	0x40010c00
 8006ad8:	40011000 	.word	0x40011000
 8006adc:	40011400 	.word	0x40011400
 8006ae0:	40011800 	.word	0x40011800
 8006ae4:	40011c00 	.word	0x40011c00
 8006ae8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <HAL_GPIO_Init+0x324>)
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	4909      	ldr	r1, [pc, #36]	; (8006b1c <HAL_GPIO_Init+0x324>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	3301      	adds	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f47f ae7e 	bne.w	800680c <HAL_GPIO_Init+0x14>
  }
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	372c      	adds	r7, #44	; 0x2c
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]
 8006b3c:	e001      	b.n	8006b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr

08006b4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	807b      	strh	r3, [r7, #2]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b5e:	787b      	ldrb	r3, [r7, #1]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b64:	887a      	ldrh	r2, [r7, #2]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006b6a:	e003      	b.n	8006b74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006b6c:	887b      	ldrh	r3, [r7, #2]
 8006b6e:	041a      	lsls	r2, r3, #16
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	611a      	str	r2, [r3, #16]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e26c      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 8087 	beq.w	8006cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ba0:	4b92      	ldr	r3, [pc, #584]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 030c 	and.w	r3, r3, #12
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d00c      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bac:	4b8f      	ldr	r3, [pc, #572]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d112      	bne.n	8006bde <HAL_RCC_OscConfig+0x5e>
 8006bb8:	4b8c      	ldr	r3, [pc, #560]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d10b      	bne.n	8006bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc6:	4b89      	ldr	r3, [pc, #548]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d06c      	beq.n	8006cac <HAL_RCC_OscConfig+0x12c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d168      	bne.n	8006cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e246      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x76>
 8006be8:	4b80      	ldr	r3, [pc, #512]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a7f      	ldr	r2, [pc, #508]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e02e      	b.n	8006c54 <HAL_RCC_OscConfig+0xd4>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x98>
 8006bfe:	4b7b      	ldr	r3, [pc, #492]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a7a      	ldr	r2, [pc, #488]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b78      	ldr	r3, [pc, #480]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a77      	ldr	r2, [pc, #476]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e01d      	b.n	8006c54 <HAL_RCC_OscConfig+0xd4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0xbc>
 8006c22:	4b72      	ldr	r3, [pc, #456]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a71      	ldr	r2, [pc, #452]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4b6f      	ldr	r3, [pc, #444]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6e      	ldr	r2, [pc, #440]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e00b      	b.n	8006c54 <HAL_RCC_OscConfig+0xd4>
 8006c3c:	4b6b      	ldr	r3, [pc, #428]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6a      	ldr	r2, [pc, #424]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	4b68      	ldr	r3, [pc, #416]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a67      	ldr	r2, [pc, #412]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d013      	beq.n	8006c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fd fdde 	bl	800481c <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fd fdda 	bl	800481c <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	; 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e1fa      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c76:	4b5d      	ldr	r3, [pc, #372]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0xe4>
 8006c82:	e014      	b.n	8006cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fd fdca 	bl	800481c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fd fdc6 	bl	800481c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e1e6      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9e:	4b53      	ldr	r3, [pc, #332]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x10c>
 8006caa:	e000      	b.n	8006cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d063      	beq.n	8006d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cba:	4b4c      	ldr	r3, [pc, #304]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006cc6:	4b49      	ldr	r3, [pc, #292]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f003 030c 	and.w	r3, r3, #12
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d11c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x18c>
 8006cd2:	4b46      	ldr	r3, [pc, #280]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cde:	4b43      	ldr	r3, [pc, #268]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x176>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e1ba      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf6:	4b3d      	ldr	r3, [pc, #244]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4939      	ldr	r1, [pc, #228]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0a:	e03a      	b.n	8006d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d14:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCC_OscConfig+0x270>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1a:	f7fd fd7f 	bl	800481c <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d22:	f7fd fd7b 	bl	800481c <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e19b      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d34:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d40:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4927      	ldr	r1, [pc, #156]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]
 8006d54:	e015      	b.n	8006d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d56:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <HAL_RCC_OscConfig+0x270>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fd fd5e 	bl	800481c <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d64:	f7fd fd5a 	bl	800481c <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e17a      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d76:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03a      	beq.n	8006e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d019      	beq.n	8006dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d96:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <HAL_RCC_OscConfig+0x274>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9c:	f7fd fd3e 	bl	800481c <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da4:	f7fd fd3a 	bl	800481c <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e15a      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_RCC_OscConfig+0x26c>)
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	f000 fb08 	bl	80073d8 <RCC_Delay>
 8006dc8:	e01c      	b.n	8006e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <HAL_RCC_OscConfig+0x274>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd0:	f7fd fd24 	bl	800481c <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd6:	e00f      	b.n	8006df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd8:	f7fd fd20 	bl	800481c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d908      	bls.n	8006df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e140      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
 8006dea:	bf00      	nop
 8006dec:	40021000 	.word	0x40021000
 8006df0:	42420000 	.word	0x42420000
 8006df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df8:	4b9e      	ldr	r3, [pc, #632]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e9      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80a6 	beq.w	8006f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e16:	4b97      	ldr	r3, [pc, #604]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e22:	4b94      	ldr	r3, [pc, #592]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	4a93      	ldr	r2, [pc, #588]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	61d3      	str	r3, [r2, #28]
 8006e2e:	4b91      	ldr	r3, [pc, #580]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3e:	4b8e      	ldr	r3, [pc, #568]	; (8007078 <HAL_RCC_OscConfig+0x4f8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d118      	bne.n	8006e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e4a:	4b8b      	ldr	r3, [pc, #556]	; (8007078 <HAL_RCC_OscConfig+0x4f8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a8a      	ldr	r2, [pc, #552]	; (8007078 <HAL_RCC_OscConfig+0x4f8>)
 8006e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e56:	f7fd fce1 	bl	800481c <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5e:	f7fd fcdd 	bl	800481c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b64      	cmp	r3, #100	; 0x64
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0fd      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e70:	4b81      	ldr	r3, [pc, #516]	; (8007078 <HAL_RCC_OscConfig+0x4f8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x312>
 8006e84:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4a7a      	ldr	r2, [pc, #488]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6213      	str	r3, [r2, #32]
 8006e90:	e02d      	b.n	8006eee <HAL_RCC_OscConfig+0x36e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x334>
 8006e9a:	4b76      	ldr	r3, [pc, #472]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4a75      	ldr	r2, [pc, #468]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	6213      	str	r3, [r2, #32]
 8006ea6:	4b73      	ldr	r3, [pc, #460]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	4a72      	ldr	r2, [pc, #456]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006eac:	f023 0304 	bic.w	r3, r3, #4
 8006eb0:	6213      	str	r3, [r2, #32]
 8006eb2:	e01c      	b.n	8006eee <HAL_RCC_OscConfig+0x36e>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x356>
 8006ebc:	4b6d      	ldr	r3, [pc, #436]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	4a6c      	ldr	r2, [pc, #432]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ec2:	f043 0304 	orr.w	r3, r3, #4
 8006ec6:	6213      	str	r3, [r2, #32]
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	4a69      	ldr	r2, [pc, #420]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	6213      	str	r3, [r2, #32]
 8006ed4:	e00b      	b.n	8006eee <HAL_RCC_OscConfig+0x36e>
 8006ed6:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4a66      	ldr	r2, [pc, #408]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	6213      	str	r3, [r2, #32]
 8006ee2:	4b64      	ldr	r3, [pc, #400]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	4a63      	ldr	r2, [pc, #396]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ee8:	f023 0304 	bic.w	r3, r3, #4
 8006eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d015      	beq.n	8006f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef6:	f7fd fc91 	bl	800481c <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efc:	e00a      	b.n	8006f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efe:	f7fd fc8d 	bl	800481c <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e0ab      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f14:	4b57      	ldr	r3, [pc, #348]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0ee      	beq.n	8006efe <HAL_RCC_OscConfig+0x37e>
 8006f20:	e014      	b.n	8006f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f22:	f7fd fc7b 	bl	800481c <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7fd fc77 	bl	800481c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e095      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f40:	4b4c      	ldr	r3, [pc, #304]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ee      	bne.n	8006f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d105      	bne.n	8006f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f52:	4b48      	ldr	r3, [pc, #288]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	4a47      	ldr	r2, [pc, #284]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8081 	beq.w	800706a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f68:	4b42      	ldr	r3, [pc, #264]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d061      	beq.n	8007038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d146      	bne.n	800700a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	; (800707c <HAL_RCC_OscConfig+0x4fc>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f82:	f7fd fc4b 	bl	800481c <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fd fc47 	bl	800481c <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e067      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f9c:	4b35      	ldr	r3, [pc, #212]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb0:	d108      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fb2:	4b30      	ldr	r3, [pc, #192]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	492d      	ldr	r1, [pc, #180]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a19      	ldr	r1, [r3, #32]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	4927      	ldr	r1, [pc, #156]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fdc:	4b27      	ldr	r3, [pc, #156]	; (800707c <HAL_RCC_OscConfig+0x4fc>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe2:	f7fd fc1b 	bl	800481c <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fea:	f7fd fc17 	bl	800481c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e037      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x46a>
 8007008:	e02f      	b.n	800706a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_RCC_OscConfig+0x4fc>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fd fc04 	bl	800481c <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007018:	f7fd fc00 	bl	800481c <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e020      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x498>
 8007036:	e018      	b.n	800706a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e013      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_RCC_OscConfig+0x4f4>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	429a      	cmp	r2, r3
 8007056:	d106      	bne.n	8007066 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007062:	429a      	cmp	r2, r3
 8007064:	d001      	beq.n	800706a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40021000 	.word	0x40021000
 8007078:	40007000 	.word	0x40007000
 800707c:	42420060 	.word	0x42420060

08007080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0d0      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007094:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d910      	bls.n	80070c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a2:	4b67      	ldr	r3, [pc, #412]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f023 0207 	bic.w	r2, r3, #7
 80070aa:	4965      	ldr	r1, [pc, #404]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b2:	4b63      	ldr	r3, [pc, #396]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d001      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0b8      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d020      	beq.n	8007112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070dc:	4b59      	ldr	r3, [pc, #356]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a58      	ldr	r2, [pc, #352]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80070e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070f4:	4b53      	ldr	r3, [pc, #332]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a52      	ldr	r2, [pc, #328]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80070fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80070fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007100:	4b50      	ldr	r3, [pc, #320]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	494d      	ldr	r1, [pc, #308]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d040      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007126:	4b47      	ldr	r3, [pc, #284]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d115      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e07f      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d107      	bne.n	800714e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800713e:	4b41      	ldr	r3, [pc, #260]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e073      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800714e:	4b3d      	ldr	r3, [pc, #244]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e06b      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800715e:	4b39      	ldr	r3, [pc, #228]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f023 0203 	bic.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	4936      	ldr	r1, [pc, #216]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	4313      	orrs	r3, r2
 800716e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007170:	f7fd fb54 	bl	800481c <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007176:	e00a      	b.n	800718e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007178:	f7fd fb50 	bl	800481c <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f241 3288 	movw	r2, #5000	; 0x1388
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e053      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718e:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f003 020c 	and.w	r2, r3, #12
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	429a      	cmp	r2, r3
 800719e:	d1eb      	bne.n	8007178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a0:	4b27      	ldr	r3, [pc, #156]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d210      	bcs.n	80071d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 0207 	bic.w	r2, r3, #7
 80071b6:	4922      	ldr	r1, [pc, #136]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	4b20      	ldr	r3, [pc, #128]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d001      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e032      	b.n	8007236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4916      	ldr	r1, [pc, #88]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	490e      	ldr	r1, [pc, #56]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 800720a:	4313      	orrs	r3, r2
 800720c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800720e:	f000 f821 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8007212:	4602      	mov	r2, r0
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	490a      	ldr	r1, [pc, #40]	; (8007248 <HAL_RCC_ClockConfig+0x1c8>)
 8007220:	5ccb      	ldrb	r3, [r1, r3]
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <HAL_RCC_ClockConfig+0x1cc>)
 8007228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCC_ClockConfig+0x1d0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fc fe76 	bl	8003f20 <HAL_InitTick>

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40022000 	.word	0x40022000
 8007244:	40021000 	.word	0x40021000
 8007248:	0801c214 	.word	0x0801c214
 800724c:	20000008 	.word	0x20000008
 8007250:	2000000c 	.word	0x2000000c

08007254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007254:	b490      	push	{r4, r7}
 8007256:	b08a      	sub	sp, #40	; 0x28
 8007258:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800725a:	4b2a      	ldr	r3, [pc, #168]	; (8007304 <HAL_RCC_GetSysClockFreq+0xb0>)
 800725c:	1d3c      	adds	r4, r7, #4
 800725e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007264:	f240 2301 	movw	r3, #513	; 0x201
 8007268:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	2300      	movs	r3, #0
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b04      	cmp	r3, #4
 800728c:	d002      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x40>
 800728e:	2b08      	cmp	r3, #8
 8007290:	d003      	beq.n	800729a <HAL_RCC_GetSysClockFreq+0x46>
 8007292:	e02d      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007294:	4b1d      	ldr	r3, [pc, #116]	; (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007296:	623b      	str	r3, [r7, #32]
      break;
 8007298:	e02d      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	0c9b      	lsrs	r3, r3, #18
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072a6:	4413      	add	r3, r2
 80072a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80072ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d013      	beq.n	80072e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	0c5b      	lsrs	r3, r3, #17
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072c6:	4413      	add	r3, r2
 80072c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80072cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4a0e      	ldr	r2, [pc, #56]	; (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072d2:	fb02 f203 	mul.w	r2, r2, r3
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
 80072de:	e004      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4a0b      	ldr	r2, [pc, #44]	; (8007310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	623b      	str	r3, [r7, #32]
      break;
 80072ee:	e002      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f2:	623b      	str	r3, [r7, #32]
      break;
 80072f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	; 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc90      	pop	{r4, r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	0801b4c4 	.word	0x0801b4c4
 8007308:	40021000 	.word	0x40021000
 800730c:	007a1200 	.word	0x007a1200
 8007310:	003d0900 	.word	0x003d0900

08007314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <HAL_RCC_GetHCLKFreq+0x10>)
 800731a:	681b      	ldr	r3, [r3, #0]
}
 800731c:	4618      	mov	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr
 8007324:	20000008 	.word	0x20000008

08007328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800732c:	f7ff fff2 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 8007330:	4602      	mov	r2, r0
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	4903      	ldr	r1, [pc, #12]	; (800734c <HAL_RCC_GetPCLK1Freq+0x24>)
 800733e:	5ccb      	ldrb	r3, [r1, r3]
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000
 800734c:	0801c224 	.word	0x0801c224

08007350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007354:	f7ff ffde 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	0adb      	lsrs	r3, r3, #11
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	4903      	ldr	r1, [pc, #12]	; (8007374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000
 8007374:	0801c224 	.word	0x0801c224

08007378 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220f      	movs	r2, #15
 8007386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_RCC_GetClockConfig+0x58>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 0203 	and.w	r2, r3, #3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <HAL_RCC_GetClockConfig+0x58>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <HAL_RCC_GetClockConfig+0x58>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80073ac:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <HAL_RCC_GetClockConfig+0x58>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_RCC_GetClockConfig+0x5c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0207 	and.w	r2, r3, #7
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr
 80073d0:	40021000 	.word	0x40021000
 80073d4:	40022000 	.word	0x40022000

080073d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <RCC_Delay+0x34>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <RCC_Delay+0x38>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073f4:	bf00      	nop
  }
  while (Delay --);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	60fa      	str	r2, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f9      	bne.n	80073f4 <RCC_Delay+0x1c>
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	20000008 	.word	0x20000008
 8007410:	10624dd3 	.word	0x10624dd3

08007414 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d07d      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007430:	2300      	movs	r3, #0
 8007432:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007434:	4b4f      	ldr	r3, [pc, #316]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10d      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007440:	4b4c      	ldr	r3, [pc, #304]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	4a4b      	ldr	r2, [pc, #300]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800744a:	61d3      	str	r3, [r2, #28]
 800744c:	4b49      	ldr	r3, [pc, #292]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745c:	4b46      	ldr	r3, [pc, #280]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d118      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007468:	4b43      	ldr	r3, [pc, #268]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a42      	ldr	r2, [pc, #264]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800746e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007474:	f7fd f9d2 	bl	800481c <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747a:	e008      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800747c:	f7fd f9ce 	bl	800481c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	; 0x64
 8007488:	d901      	bls.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e06d      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748e:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800749a:	4b36      	ldr	r3, [pc, #216]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02e      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d027      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b8:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074c2:	4b2e      	ldr	r3, [pc, #184]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074c8:	4b2c      	ldr	r3, [pc, #176]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074ce:	4a29      	ldr	r2, [pc, #164]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074de:	f7fd f99d 	bl	800481c <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e4:	e00a      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fd f999 	bl	800481c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e036      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ee      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007508:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4917      	ldr	r1, [pc, #92]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007516:	4313      	orrs	r3, r2
 8007518:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d105      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800752a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d008      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	490b      	ldr	r1, [pc, #44]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007546:	4313      	orrs	r3, r2
 8007548:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0310 	and.w	r3, r3, #16
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007556:	4b07      	ldr	r3, [pc, #28]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4904      	ldr	r1, [pc, #16]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000
 8007578:	40007000 	.word	0x40007000
 800757c:	42420440 	.word	0x42420440

08007580 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b08d      	sub	sp, #52	; 0x34
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007588:	4b6b      	ldr	r3, [pc, #428]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800758a:	f107 040c 	add.w	r4, r7, #12
 800758e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007594:	f240 2301 	movw	r3, #513	; 0x201
 8007598:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
 800759e:	2300      	movs	r3, #0
 80075a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	2300      	movs	r3, #0
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	f200 80b6 	bhi.w	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080076a3 	.word	0x080076a3
 80075c4:	08007709 	.word	0x08007709
 80075c8:	08007725 	.word	0x08007725
 80075cc:	08007693 	.word	0x08007693
 80075d0:	08007725 	.word	0x08007725
 80075d4:	08007725 	.word	0x08007725
 80075d8:	08007725 	.word	0x08007725
 80075dc:	0800769b 	.word	0x0800769b
 80075e0:	08007725 	.word	0x08007725
 80075e4:	08007725 	.word	0x08007725
 80075e8:	08007725 	.word	0x08007725
 80075ec:	08007725 	.word	0x08007725
 80075f0:	08007725 	.word	0x08007725
 80075f4:	08007725 	.word	0x08007725
 80075f8:	08007725 	.word	0x08007725
 80075fc:	08007601 	.word	0x08007601
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007600:	4b4e      	ldr	r3, [pc, #312]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007606:	4b4d      	ldr	r3, [pc, #308]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 808a 	beq.w	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	0c9b      	lsrs	r3, r3, #18
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007620:	4413      	add	r3, r2
 8007622:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007626:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d018      	beq.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007632:	4b42      	ldr	r3, [pc, #264]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	0c5b      	lsrs	r3, r3, #17
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007640:	4413      	add	r3, r2
 8007642:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007652:	4a3b      	ldr	r2, [pc, #236]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	fbb2 f2f3 	udiv	r2, r2, r3
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007662:	e004      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	4a37      	ldr	r2, [pc, #220]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800766e:	4b33      	ldr	r3, [pc, #204]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767a:	d102      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007680:	e052      	b.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	4a30      	ldr	r2, [pc, #192]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007690:	e04a      	b.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007692:	f7ff fddf 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8007696:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007698:	e049      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800769a:	f7ff fddb 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800769e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80076a0:	e045      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d108      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076c4:	e01f      	b.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d0:	d109      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80076d2:	4b1a      	ldr	r3, [pc, #104]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80076de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e4:	e00f      	b.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f0:	d11c      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80076fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007704:	e012      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007706:	e011      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007708:	f7ff fe22 	bl	8007350 <HAL_RCC_GetPCLK2Freq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	0b9b      	lsrs	r3, r3, #14
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	3301      	adds	r3, #1
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007722:	e004      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800772c:	bf00      	nop
    }
  }
  return (frequency);
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007730:	4618      	mov	r0, r3
 8007732:	3734      	adds	r7, #52	; 0x34
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}
 8007738:	0801b4d4 	.word	0x0801b4d4
 800773c:	40021000 	.word	0x40021000
 8007740:	007a1200 	.word	0x007a1200
 8007744:	003d0900 	.word	0x003d0900
 8007748:	aaaaaaab 	.word	0xaaaaaaab

0800774c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e041      	b.n	80077e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fc fe8e 	bl	8004494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f000 fd3c 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d001      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e044      	b.n	800788e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_TIM_Base_Start_IT+0xac>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d018      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x6c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <HAL_TIM_Base_Start_IT+0xb0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x6c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007838:	d00e      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x6c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x6c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a16      	ldr	r2, [pc, #88]	; (80078a4 <HAL_TIM_Base_Start_IT+0xb8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x6c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d111      	bne.n	800787c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b06      	cmp	r3, #6
 8007868:	d010      	beq.n	800788c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0201 	orr.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787a:	e007      	b.n	800788c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0201 	orr.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bc80      	pop	{r7}
 8007896:	4770      	bx	lr
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800
 80078a8:	40000c00 	.word	0x40000c00

080078ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e041      	b.n	8007942 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f839 	bl	800794a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f000 fc8c 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e041      	b.n	80079f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f839 	bl	80079fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 fc34 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <HAL_TIM_PWM_Start_IT+0x24>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf14      	ite	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	e022      	b.n	8007a76 <HAL_TIM_PWM_Start_IT+0x6a>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d109      	bne.n	8007a4a <HAL_TIM_PWM_Start_IT+0x3e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	bf14      	ite	ne
 8007a42:	2301      	movne	r3, #1
 8007a44:	2300      	moveq	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	e015      	b.n	8007a76 <HAL_TIM_PWM_Start_IT+0x6a>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d109      	bne.n	8007a64 <HAL_TIM_PWM_Start_IT+0x58>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	e008      	b.n	8007a76 <HAL_TIM_PWM_Start_IT+0x6a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	bf14      	ite	ne
 8007a70:	2301      	movne	r3, #1
 8007a72:	2300      	moveq	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0b8      	b.n	8007bf0 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start_IT+0x82>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a8c:	e013      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0xaa>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_PWM_Start_IT+0x92>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a9c:	e00b      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0xaa>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start_IT+0xa2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aac:	e003      	b.n	8007ab6 <HAL_TIM_PWM_Start_IT+0xaa>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d841      	bhi.n	8007b40 <HAL_TIM_PWM_Start_IT+0x134>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <HAL_TIM_PWM_Start_IT+0xb8>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b41 	.word	0x08007b41
 8007ad0:	08007b41 	.word	0x08007b41
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007b41 	.word	0x08007b41
 8007ae4:	08007b1d 	.word	0x08007b1d
 8007ae8:	08007b41 	.word	0x08007b41
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007b41 	.word	0x08007b41
 8007af4:	08007b2f 	.word	0x08007b2f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0202 	orr.w	r2, r2, #2
 8007b06:	60da      	str	r2, [r3, #12]
      break;
 8007b08:	e01b      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0204 	orr.w	r2, r2, #4
 8007b18:	60da      	str	r2, [r3, #12]
      break;
 8007b1a:	e012      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0208 	orr.w	r2, r2, #8
 8007b2a:	60da      	str	r2, [r3, #12]
      break;
 8007b2c:	e009      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0210 	orr.w	r2, r2, #16
 8007b3c:	60da      	str	r2, [r3, #12]
      break;
 8007b3e:	e000      	b.n	8007b42 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8007b40:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2201      	movs	r2, #1
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fe18 	bl	8008780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x158>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d101      	bne.n	8007b68 <HAL_TIM_PWM_Start_IT+0x15c>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_TIM_PWM_Start_IT+0x15e>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d018      	beq.n	8007bba <HAL_TIM_PWM_Start_IT+0x1ae>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	; (8007bfc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIM_PWM_Start_IT+0x1ae>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIM_PWM_Start_IT+0x1ae>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIM_PWM_Start_IT+0x1ae>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIM_PWM_Start_IT+0x1ae>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d111      	bne.n	8007bde <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b06      	cmp	r3, #6
 8007bca:	d010      	beq.n	8007bee <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bdc:	e007      	b.n	8007bee <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0201 	orr.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40013400 	.word	0x40013400
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00

08007c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d122      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d11b      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0202 	mvn.w	r2, #2
 8007c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fac7 	bl	80081e2 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 faba 	bl	80081d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fb fbc3 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d122      	bne.n	8007cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d11b      	bne.n	8007cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0204 	mvn.w	r2, #4
 8007c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa9d 	bl	80081e2 <HAL_TIM_IC_CaptureCallback>
 8007ca8:	e005      	b.n	8007cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa90 	bl	80081d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fb fb99 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d122      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d11b      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0208 	mvn.w	r2, #8
 8007ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa73 	bl	80081e2 <HAL_TIM_IC_CaptureCallback>
 8007cfc:	e005      	b.n	8007d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa66 	bl	80081d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7fb fb6f 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0310 	and.w	r3, r3, #16
 8007d1a:	2b10      	cmp	r3, #16
 8007d1c:	d122      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	d11b      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0210 	mvn.w	r2, #16
 8007d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa49 	bl	80081e2 <HAL_TIM_IC_CaptureCallback>
 8007d50:	e005      	b.n	8007d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa3c 	bl	80081d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fb fb45 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d10e      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d107      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0201 	mvn.w	r2, #1
 8007d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fb fa94 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9a:	2b80      	cmp	r3, #128	; 0x80
 8007d9c:	d10e      	bne.n	8007dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	d107      	bne.n	8007dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fd7b 	bl	80088b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d10e      	bne.n	8007de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	d107      	bne.n	8007de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa06 	bl	80081f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d10e      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d107      	bne.n	8007e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0220 	mvn.w	r2, #32
 8007e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fd46 	bl	80088a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e046      	b.n	8007ec4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b0c      	cmp	r3, #12
 8007e42:	d839      	bhi.n	8007eb8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <HAL_TIM_OC_ConfigChannel+0x30>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e81 	.word	0x08007e81
 8007e50:	08007eb9 	.word	0x08007eb9
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	08007e8f 	.word	0x08007e8f
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007eb9 	.word	0x08007eb9
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007e9d 	.word	0x08007e9d
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007eb9 	.word	0x08007eb9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eab 	.word	0x08007eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fa38 	bl	80082fc <TIM_OC1_SetConfig>
      break;
 8007e8c:	e015      	b.n	8007eba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 faa1 	bl	80083dc <TIM_OC2_SetConfig>
      break;
 8007e9a:	e00e      	b.n	8007eba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fb0e 	bl	80084c4 <TIM_OC3_SetConfig>
      break;
 8007ea8:	e007      	b.n	8007eba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fb7b 	bl	80085ac <TIM_OC4_SetConfig>
      break;
 8007eb6:	e000      	b.n	8007eba <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8007eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e0ac      	b.n	8008040 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b0c      	cmp	r3, #12
 8007ef2:	f200 809f 	bhi.w	8008034 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08008035 	.word	0x08008035
 8007f04:	08008035 	.word	0x08008035
 8007f08:	08008035 	.word	0x08008035
 8007f0c:	08007f71 	.word	0x08007f71
 8007f10:	08008035 	.word	0x08008035
 8007f14:	08008035 	.word	0x08008035
 8007f18:	08008035 	.word	0x08008035
 8007f1c:	08007fb3 	.word	0x08007fb3
 8007f20:	08008035 	.word	0x08008035
 8007f24:	08008035 	.word	0x08008035
 8007f28:	08008035 	.word	0x08008035
 8007f2c:	08007ff3 	.word	0x08007ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f9e0 	bl	80082fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0208 	orr.w	r2, r2, #8
 8007f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	619a      	str	r2, [r3, #24]
      break;
 8007f6e:	e062      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fa30 	bl	80083dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6999      	ldr	r1, [r3, #24]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	619a      	str	r2, [r3, #24]
      break;
 8007fb0:	e041      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fa83 	bl	80084c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0208 	orr.w	r2, r2, #8
 8007fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0204 	bic.w	r2, r2, #4
 8007fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69d9      	ldr	r1, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	61da      	str	r2, [r3, #28]
      break;
 8007ff0:	e021      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fad7 	bl	80085ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800800c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69d9      	ldr	r1, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	021a      	lsls	r2, r3, #8
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	61da      	str	r2, [r3, #28]
      break;
 8008032:	e000      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIM_ConfigClockSource+0x18>
 800805c:	2302      	movs	r3, #2
 800805e:	e0b3      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x180>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800807e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008086:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008098:	d03e      	beq.n	8008118 <HAL_TIM_ConfigClockSource+0xd0>
 800809a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809e:	f200 8087 	bhi.w	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a6:	f000 8085 	beq.w	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ae:	d87f      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080b0:	2b70      	cmp	r3, #112	; 0x70
 80080b2:	d01a      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0xa2>
 80080b4:	2b70      	cmp	r3, #112	; 0x70
 80080b6:	d87b      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080b8:	2b60      	cmp	r3, #96	; 0x60
 80080ba:	d050      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x116>
 80080bc:	2b60      	cmp	r3, #96	; 0x60
 80080be:	d877      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080c0:	2b50      	cmp	r3, #80	; 0x50
 80080c2:	d03c      	beq.n	800813e <HAL_TIM_ConfigClockSource+0xf6>
 80080c4:	2b50      	cmp	r3, #80	; 0x50
 80080c6:	d873      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d058      	beq.n	800817e <HAL_TIM_ConfigClockSource+0x136>
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d86f      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d064      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x156>
 80080d4:	2b30      	cmp	r3, #48	; 0x30
 80080d6:	d86b      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d060      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x156>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d867      	bhi.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d05c      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x156>
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d05a      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80080e8:	e062      	b.n	80081b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6899      	ldr	r1, [r3, #8]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f000 fb22 	bl	8008742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800810c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	609a      	str	r2, [r3, #8]
      break;
 8008116:	e04e      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6899      	ldr	r1, [r3, #8]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f000 fb0b 	bl	8008742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800813a:	609a      	str	r2, [r3, #8]
      break;
 800813c:	e03b      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	461a      	mov	r2, r3
 800814c:	f000 fa82 	bl	8008654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2150      	movs	r1, #80	; 0x50
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fad9 	bl	800870e <TIM_ITRx_SetConfig>
      break;
 800815c:	e02b      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6859      	ldr	r1, [r3, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	461a      	mov	r2, r3
 800816c:	f000 faa0 	bl	80086b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2160      	movs	r1, #96	; 0x60
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fac9 	bl	800870e <TIM_ITRx_SetConfig>
      break;
 800817c:	e01b      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6859      	ldr	r1, [r3, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	461a      	mov	r2, r3
 800818c:	f000 fa62 	bl	8008654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2140      	movs	r1, #64	; 0x40
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fab9 	bl	800870e <TIM_ITRx_SetConfig>
      break;
 800819c:	e00b      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f000 fab0 	bl	800870e <TIM_ITRx_SetConfig>
        break;
 80081ae:	e002      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80081b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
	...

08008208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a33      	ldr	r2, [pc, #204]	; (80082e8 <TIM_Base_SetConfig+0xe0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a32      	ldr	r2, [pc, #200]	; (80082ec <TIM_Base_SetConfig+0xe4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00f      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822e:	d00b      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a2f      	ldr	r2, [pc, #188]	; (80082f0 <TIM_Base_SetConfig+0xe8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a2e      	ldr	r2, [pc, #184]	; (80082f4 <TIM_Base_SetConfig+0xec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a2d      	ldr	r2, [pc, #180]	; (80082f8 <TIM_Base_SetConfig+0xf0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a22      	ldr	r2, [pc, #136]	; (80082e8 <TIM_Base_SetConfig+0xe0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <TIM_Base_SetConfig+0x82>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a21      	ldr	r2, [pc, #132]	; (80082ec <TIM_Base_SetConfig+0xe4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00f      	beq.n	800828a <TIM_Base_SetConfig+0x82>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008270:	d00b      	beq.n	800828a <TIM_Base_SetConfig+0x82>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <TIM_Base_SetConfig+0xe8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d007      	beq.n	800828a <TIM_Base_SetConfig+0x82>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <TIM_Base_SetConfig+0xec>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d003      	beq.n	800828a <TIM_Base_SetConfig+0x82>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <TIM_Base_SetConfig+0xf0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d108      	bne.n	800829c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <TIM_Base_SetConfig+0xe0>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_Base_SetConfig+0xc8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <TIM_Base_SetConfig+0xe4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d103      	bne.n	80082d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	615a      	str	r2, [r3, #20]
}
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40013400 	.word	0x40013400
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00

080082fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	f023 0201 	bic.w	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f023 0302 	bic.w	r3, r3, #2
 8008344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a20      	ldr	r2, [pc, #128]	; (80083d4 <TIM_OC1_SetConfig+0xd8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC1_SetConfig+0x64>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a1f      	ldr	r2, [pc, #124]	; (80083d8 <TIM_OC1_SetConfig+0xdc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10c      	bne.n	800837a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0308 	bic.w	r3, r3, #8
 8008366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f023 0304 	bic.w	r3, r3, #4
 8008378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <TIM_OC1_SetConfig+0xd8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d003      	beq.n	800838a <TIM_OC1_SetConfig+0x8e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <TIM_OC1_SetConfig+0xdc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d111      	bne.n	80083ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	621a      	str	r2, [r3, #32]
}
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40012c00 	.word	0x40012c00
 80083d8:	40013400 	.word	0x40013400

080083dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	f023 0210 	bic.w	r2, r3, #16
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4313      	orrs	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f023 0320 	bic.w	r3, r3, #32
 8008426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a21      	ldr	r2, [pc, #132]	; (80084bc <TIM_OC2_SetConfig+0xe0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <TIM_OC2_SetConfig+0x68>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a20      	ldr	r2, [pc, #128]	; (80084c0 <TIM_OC2_SetConfig+0xe4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d10d      	bne.n	8008460 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800844a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <TIM_OC2_SetConfig+0xe0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_OC2_SetConfig+0x94>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <TIM_OC2_SetConfig+0xe4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d113      	bne.n	8008498 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4313      	orrs	r3, r2
 800848a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	621a      	str	r2, [r3, #32]
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	40012c00 	.word	0x40012c00
 80084c0:	40013400 	.word	0x40013400

080084c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800850c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a21      	ldr	r2, [pc, #132]	; (80085a4 <TIM_OC3_SetConfig+0xe0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d003      	beq.n	800852a <TIM_OC3_SetConfig+0x66>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a20      	ldr	r2, [pc, #128]	; (80085a8 <TIM_OC3_SetConfig+0xe4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d10d      	bne.n	8008546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a16      	ldr	r2, [pc, #88]	; (80085a4 <TIM_OC3_SetConfig+0xe0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_OC3_SetConfig+0x92>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <TIM_OC3_SetConfig+0xe4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d113      	bne.n	800857e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800855c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	621a      	str	r2, [r3, #32]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	40013400 	.word	0x40013400

080085ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	031b      	lsls	r3, r3, #12
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a11      	ldr	r2, [pc, #68]	; (800864c <TIM_OC4_SetConfig+0xa0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_OC4_SetConfig+0x68>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a10      	ldr	r2, [pc, #64]	; (8008650 <TIM_OC4_SetConfig+0xa4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d109      	bne.n	8008628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800861a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	019b      	lsls	r3, r3, #6
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr
 800864c:	40012c00 	.word	0x40012c00
 8008650:	40013400 	.word	0x40013400

08008654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0201 	bic.w	r2, r3, #1
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800867e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f023 030a 	bic.w	r3, r3, #10
 8008690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	621a      	str	r2, [r3, #32]
}
 80086a6:	bf00      	nop
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f023 0210 	bic.w	r2, r3, #16
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	031b      	lsls	r3, r3, #12
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	621a      	str	r2, [r3, #32]
}
 8008704:	bf00      	nop
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	f043 0307 	orr.w	r3, r3, #7
 8008730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	609a      	str	r2, [r3, #8]
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	021a      	lsls	r2, r3, #8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	431a      	orrs	r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	4313      	orrs	r3, r2
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	609a      	str	r2, [r3, #8]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2201      	movs	r2, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	431a      	orrs	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d101      	bne.n	80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087dc:	2302      	movs	r3, #2
 80087de:	e050      	b.n	8008882 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1b      	ldr	r2, [pc, #108]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d018      	beq.n	8008856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a19      	ldr	r2, [pc, #100]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d013      	beq.n	8008856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008836:	d00e      	beq.n	8008856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d009      	beq.n	8008856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d004      	beq.n	8008856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a12      	ldr	r2, [pc, #72]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d10c      	bne.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800885c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	4313      	orrs	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40013400 	.word	0x40013400
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800
 800889c:	40000c00 	.word	0x40000c00

080088a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr

080088b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e03f      	b.n	8008956 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fb fe9e 	bl	800462c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2224      	movs	r2, #36	; 0x24
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fdb5 	bl	8009478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800891c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800892c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800893c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b20      	cmp	r3, #32
 8008978:	d153      	bne.n	8008a22 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <HAL_UART_Transmit_DMA+0x26>
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e04c      	b.n	8008a24 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_UART_Transmit_DMA+0x38>
 8008994:	2302      	movs	r3, #2
 8008996:	e045      	b.n	8008a24 <HAL_UART_Transmit_DMA+0xc4>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	88fa      	ldrh	r2, [r7, #6]
 80089aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2221      	movs	r2, #33	; 0x21
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	4a19      	ldr	r2, [pc, #100]	; (8008a2c <HAL_UART_Transmit_DMA+0xcc>)
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_UART_Transmit_DMA+0xd0>)
 80089ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	4a17      	ldr	r2, [pc, #92]	; (8008a34 <HAL_UART_Transmit_DMA+0xd4>)
 80089d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	2200      	movs	r2, #0
 80089de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80089e0:	f107 0308 	add.w	r3, r7, #8
 80089e4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3304      	adds	r3, #4
 80089f4:	461a      	mov	r2, r3
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	f7fd faf2 	bl	8005fe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a1c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e000      	b.n	8008a24 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008a22:	2302      	movs	r3, #2
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	08008f15 	.word	0x08008f15
 8008a30:	08008f67 	.word	0x08008f67
 8008a34:	0800904f 	.word	0x0800904f

08008a38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d11d      	bne.n	8008a8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_UART_Receive_DMA+0x26>
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e016      	b.n	8008a90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_UART_Receive_DMA+0x38>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e00f      	b.n	8008a90 <HAL_UART_Receive_DMA+0x58>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fb2d 	bl	80090e4 <UART_Start_Receive_DMA>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	e000      	b.n	8008a90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
  }
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b21      	cmp	r3, #33	; 0x21
 8008ac4:	d116      	bne.n	8008af4 <HAL_UART_DMAStop+0x5c>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d013      	beq.n	8008af4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ada:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd fad8 	bl	800609e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb5c 	bl	80091ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b22      	cmp	r3, #34	; 0x22
 8008b14:	d116      	bne.n	8008b44 <HAL_UART_DMAStop+0xac>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d013      	beq.n	8008b44 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695a      	ldr	r2, [r3, #20]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b2a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fd fab0 	bl	800609e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fb49 	bl	80091d6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	; 0x28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10d      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d008      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x52>
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fbc2 	bl	8009324 <UART_Receive_IT>
      return;
 8008ba0:	e17b      	b.n	8008e9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 80b1 	beq.w	8008d0c <HAL_UART_IRQHandler+0x1bc>
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d105      	bne.n	8008bc0 <HAL_UART_IRQHandler+0x70>
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80a6 	beq.w	8008d0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <HAL_UART_IRQHandler+0x90>
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	f043 0201 	orr.w	r2, r3, #1
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	f003 0304 	and.w	r3, r3, #4
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_UART_IRQHandler+0xb0>
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f043 0202 	orr.w	r2, r3, #2
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <HAL_UART_IRQHandler+0xd0>
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c18:	f043 0204 	orr.w	r2, r3, #4
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00f      	beq.n	8008c4a <HAL_UART_IRQHandler+0xfa>
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_UART_IRQHandler+0xee>
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	f043 0208 	orr.w	r2, r3, #8
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 811e 	beq.w	8008e90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <HAL_UART_IRQHandler+0x11e>
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb5b 	bl	8009324 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <HAL_UART_IRQHandler+0x146>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d031      	beq.n	8008cfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa9d 	bl	80091d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d023      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	695a      	ldr	r2, [r3, #20]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d013      	beq.n	8008cea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	4a76      	ldr	r2, [pc, #472]	; (8008ea0 <HAL_UART_IRQHandler+0x350>)
 8008cc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fd fa20 	bl	8006114 <HAL_DMA_Abort_IT>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d016      	beq.n	8008d08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	e00e      	b.n	8008d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8fe 	bl	8008eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	e00a      	b.n	8008d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8fa 	bl	8008eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf8:	e006      	b.n	8008d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8f6 	bl	8008eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008d06:	e0c3      	b.n	8008e90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d08:	bf00      	nop
    return;
 8008d0a:	e0c1      	b.n	8008e90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	f040 80a1 	bne.w	8008e58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 809b 	beq.w	8008e58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	f003 0310 	and.w	r3, r3, #16
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8095 	beq.w	8008e58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d04e      	beq.n	8008df0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008d5c:	8a3b      	ldrh	r3, [r7, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8098 	beq.w	8008e94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d68:	8a3a      	ldrh	r2, [r7, #16]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	f080 8092 	bcs.w	8008e94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	8a3a      	ldrh	r2, [r7, #16]
 8008d74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d02b      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695a      	ldr	r2, [r3, #20]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	695a      	ldr	r2, [r3, #20]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0210 	bic.w	r2, r2, #16
 8008dcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fd f963 	bl	800609e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f888 	bl	8008efe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008dee:	e051      	b.n	8008e94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d047      	beq.n	8008e98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008e08:	8a7b      	ldrh	r3, [r7, #18]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d044      	beq.n	8008e98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0201 	bic.w	r2, r2, #1
 8008e2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0210 	bic.w	r2, r2, #16
 8008e4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e4c:	8a7b      	ldrh	r3, [r7, #18]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f854 	bl	8008efe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008e56:	e01f      	b.n	8008e98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d008      	beq.n	8008e74 <HAL_UART_IRQHandler+0x324>
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f9f2 	bl	8009256 <UART_Transmit_IT>
    return;
 8008e72:	e012      	b.n	8008e9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <HAL_UART_IRQHandler+0x34a>
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa33 	bl	80092f4 <UART_EndTransmit_IT>
    return;
 8008e8e:	e004      	b.n	8008e9a <HAL_UART_IRQHandler+0x34a>
    return;
 8008e90:	bf00      	nop
 8008e92:	e002      	b.n	8008e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8008e94:	bf00      	nop
 8008e96:	e000      	b.n	8008e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8008e98:	bf00      	nop
  }
}
 8008e9a:	3728      	adds	r7, #40	; 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0800922f 	.word	0x0800922f

08008ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr

08008eda <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr

08008eec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr

08008f14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d113      	bne.n	8008f58 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f44:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f54:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f56:	e002      	b.n	8008f5e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff ffa3 	bl	8008ea4 <HAL_UART_TxCpltCallback>
}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff ff9e 	bl	8008eb6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d12a      	bne.n	8008ff4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fb2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0201 	bic.w	r2, r2, #1
 8008fc2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695a      	ldr	r2, [r3, #20]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d107      	bne.n	8008ff4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0210 	bic.w	r2, r2, #16
 8008ff2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d106      	bne.n	800900a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009000:	4619      	mov	r1, r3
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff ff7b 	bl	8008efe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009008:	e002      	b.n	8009010 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff ff5c 	bl	8008ec8 <HAL_UART_RxCpltCallback>
}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	2b01      	cmp	r3, #1
 800902c:	d108      	bne.n	8009040 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	b29b      	uxth	r3, r3
 8009036:	4619      	mov	r1, r3
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7ff ff60 	bl	8008efe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800903e:	e002      	b.n	8009046 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff ff4a 	bl	8008eda <HAL_UART_RxHalfCpltCallback>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	bf14      	ite	ne
 800906e:	2301      	movne	r3, #1
 8009070:	2300      	moveq	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b21      	cmp	r3, #33	; 0x21
 8009080:	d108      	bne.n	8009094 <UART_DMAError+0x46>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800908e:	68b8      	ldr	r0, [r7, #8]
 8009090:	f000 f88c 	bl	80091ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bf14      	ite	ne
 80090a2:	2301      	movne	r3, #1
 80090a4:	2300      	moveq	r3, #0
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b22      	cmp	r3, #34	; 0x22
 80090b4:	d108      	bne.n	80090c8 <UART_DMAError+0x7a>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80090c2:	68b8      	ldr	r0, [r7, #8]
 80090c4:	f000 f887 	bl	80091d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	f043 0210 	orr.w	r2, r3, #16
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	f7ff ff09 	bl	8008eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2222      	movs	r2, #34	; 0x22
 8009108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	4a23      	ldr	r2, [pc, #140]	; (80091a0 <UART_Start_Receive_DMA+0xbc>)
 8009112:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	4a22      	ldr	r2, [pc, #136]	; (80091a4 <UART_Start_Receive_DMA+0xc0>)
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	4a21      	ldr	r2, [pc, #132]	; (80091a8 <UART_Start_Receive_DMA+0xc4>)
 8009122:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	2200      	movs	r2, #0
 800912a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	f7fc ff4c 	bl	8005fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009148:	2300      	movs	r3, #0
 800914a:	613b      	str	r3, [r7, #16]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009174:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	695a      	ldr	r2, [r3, #20]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0201 	orr.w	r2, r2, #1
 8009184:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	695a      	ldr	r2, [r3, #20]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009194:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	08008f83 	.word	0x08008f83
 80091a4:	08009019 	.word	0x08009019
 80091a8:	0800904f 	.word	0x0800904f

080091ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80091c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0201 	bic.w	r2, r2, #1
 80091fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0210 	bic.w	r2, r2, #16
 8009214:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	bc80      	pop	{r7}
 800922c:	4770      	bx	lr

0800922e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff fe4f 	bl	8008eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b21      	cmp	r3, #33	; 0x21
 8009268:	d13e      	bne.n	80092e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	d114      	bne.n	800929e <UART_Transmit_IT+0x48>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d110      	bne.n	800929e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009290:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	1c9a      	adds	r2, r3, #2
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	621a      	str	r2, [r3, #32]
 800929c:	e008      	b.n	80092b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	1c59      	adds	r1, r3, #1
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6211      	str	r1, [r2, #32]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	4619      	mov	r1, r3
 80092be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10f      	bne.n	80092e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fdc5 	bl	8008ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b22      	cmp	r3, #34	; 0x22
 8009336:	f040 8099 	bne.w	800946c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009342:	d117      	bne.n	8009374 <UART_Receive_IT+0x50>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d113      	bne.n	8009374 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009362:	b29a      	uxth	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	1c9a      	adds	r2, r3, #2
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	629a      	str	r2, [r3, #40]	; 0x28
 8009372:	e026      	b.n	80093c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009378:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	d007      	beq.n	8009398 <UART_Receive_IT+0x74>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <UART_Receive_IT+0x82>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	e008      	b.n	80093b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4619      	mov	r1, r3
 80093d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d148      	bne.n	8009468 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0220 	bic.w	r2, r2, #32
 80093e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0201 	bic.w	r2, r2, #1
 8009404:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	2b01      	cmp	r3, #1
 8009414:	d123      	bne.n	800945e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0210 	bic.w	r2, r2, #16
 800942a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b10      	cmp	r3, #16
 8009438:	d10a      	bne.n	8009450 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fd51 	bl	8008efe <HAL_UARTEx_RxEventCallback>
 800945c:	e002      	b.n	8009464 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fd32 	bl	8008ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	e002      	b.n	800946e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	e000      	b.n	800946e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800946c:	2302      	movs	r3, #2
  }
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80094b2:	f023 030c 	bic.w	r3, r3, #12
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6812      	ldr	r2, [r2, #0]
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	430b      	orrs	r3, r1
 80094be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a2c      	ldr	r2, [pc, #176]	; (800958c <UART_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d103      	bne.n	80094e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80094e0:	f7fd ff36 	bl	8007350 <HAL_RCC_GetPCLK2Freq>
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	e002      	b.n	80094ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80094e8:	f7fd ff1e 	bl	8007328 <HAL_RCC_GetPCLK1Freq>
 80094ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009a      	lsls	r2, r3, #2
 80094f8:	441a      	add	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	4a22      	ldr	r2, [pc, #136]	; (8009590 <UART_SetConfig+0x118>)
 8009506:	fba2 2303 	umull	r2, r3, r2, r3
 800950a:	095b      	lsrs	r3, r3, #5
 800950c:	0119      	lsls	r1, r3, #4
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009a      	lsls	r2, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	fbb2 f2f3 	udiv	r2, r2, r3
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <UART_SetConfig+0x118>)
 8009526:	fba3 0302 	umull	r0, r3, r3, r2
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	2064      	movs	r0, #100	; 0x64
 800952e:	fb00 f303 	mul.w	r3, r0, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	011b      	lsls	r3, r3, #4
 8009536:	3332      	adds	r3, #50	; 0x32
 8009538:	4a15      	ldr	r2, [pc, #84]	; (8009590 <UART_SetConfig+0x118>)
 800953a:	fba2 2303 	umull	r2, r3, r2, r3
 800953e:	095b      	lsrs	r3, r3, #5
 8009540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009544:	4419      	add	r1, r3
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009a      	lsls	r2, r3, #2
 8009550:	441a      	add	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	fbb2 f2f3 	udiv	r2, r2, r3
 800955c:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <UART_SetConfig+0x118>)
 800955e:	fba3 0302 	umull	r0, r3, r3, r2
 8009562:	095b      	lsrs	r3, r3, #5
 8009564:	2064      	movs	r0, #100	; 0x64
 8009566:	fb00 f303 	mul.w	r3, r0, r3
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	3332      	adds	r3, #50	; 0x32
 8009570:	4a07      	ldr	r2, [pc, #28]	; (8009590 <UART_SetConfig+0x118>)
 8009572:	fba2 2303 	umull	r2, r3, r2, r3
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	f003 020f 	and.w	r2, r3, #15
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	440a      	add	r2, r1
 8009582:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40013800 	.word	0x40013800
 8009590:	51eb851f 	.word	0x51eb851f

08009594 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959a:	f3ef 8305 	mrs	r3, IPSR
 800959e:	60bb      	str	r3, [r7, #8]
  return(result);
 80095a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10f      	bne.n	80095c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a6:	f3ef 8310 	mrs	r3, PRIMASK
 80095aa:	607b      	str	r3, [r7, #4]
  return(result);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <osKernelInitialize+0x32>
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <osKernelInitialize+0x60>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d109      	bne.n	80095ce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095ba:	f3ef 8311 	mrs	r3, BASEPRI
 80095be:	603b      	str	r3, [r7, #0]
  return(result);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80095c6:	f06f 0305 	mvn.w	r3, #5
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e00c      	b.n	80095e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <osKernelInitialize+0x60>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80095d6:	4b07      	ldr	r3, [pc, #28]	; (80095f4 <osKernelInitialize+0x60>)
 80095d8:	2201      	movs	r2, #1
 80095da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095dc:	2300      	movs	r3, #0
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e002      	b.n	80095e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80095e8:	68fb      	ldr	r3, [r7, #12]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr
 80095f4:	20003320 	.word	0x20003320

080095f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	60bb      	str	r3, [r7, #8]
  return(result);
 8009604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10f      	bne.n	800962a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960a:	f3ef 8310 	mrs	r3, PRIMASK
 800960e:	607b      	str	r3, [r7, #4]
  return(result);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <osKernelStart+0x32>
 8009616:	4b11      	ldr	r3, [pc, #68]	; (800965c <osKernelStart+0x64>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b02      	cmp	r3, #2
 800961c:	d109      	bne.n	8009632 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800961e:	f3ef 8311 	mrs	r3, BASEPRI
 8009622:	603b      	str	r3, [r7, #0]
  return(result);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <osKernelStart+0x3a>
    stat = osErrorISR;
 800962a:	f06f 0305 	mvn.w	r3, #5
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e00e      	b.n	8009650 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <osKernelStart+0x64>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d107      	bne.n	800964a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <osKernelStart+0x64>)
 800963c:	2202      	movs	r2, #2
 800963e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009640:	f001 f96c 	bl	800a91c <vTaskStartScheduler>
      stat = osOK;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e002      	b.n	8009650 <osKernelStart+0x58>
    } else {
      stat = osError;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800964e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20003320 	.word	0x20003320

08009660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009660:	b580      	push	{r7, lr}
 8009662:	b092      	sub	sp, #72	; 0x48
 8009664:	af04      	add	r7, sp, #16
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009670:	f3ef 8305 	mrs	r3, IPSR
 8009674:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009678:	2b00      	cmp	r3, #0
 800967a:	f040 8094 	bne.w	80097a6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967e:	f3ef 8310 	mrs	r3, PRIMASK
 8009682:	623b      	str	r3, [r7, #32]
  return(result);
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 808d 	bne.w	80097a6 <osThreadNew+0x146>
 800968c:	4b48      	ldr	r3, [pc, #288]	; (80097b0 <osThreadNew+0x150>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d106      	bne.n	80096a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009694:	f3ef 8311 	mrs	r3, BASEPRI
 8009698:	61fb      	str	r3, [r7, #28]
  return(result);
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8082 	bne.w	80097a6 <osThreadNew+0x146>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d07e      	beq.n	80097a6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80096ac:	2318      	movs	r3, #24
 80096ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80096b0:	2300      	movs	r3, #0
 80096b2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80096b4:	f107 031b 	add.w	r3, r7, #27
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d045      	beq.n	8009752 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <osThreadNew+0x74>
        name = attr->name;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d008      	beq.n	80096fa <osThreadNew+0x9a>
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	2b38      	cmp	r3, #56	; 0x38
 80096ec:	d805      	bhi.n	80096fa <osThreadNew+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <osThreadNew+0x9e>
        return (NULL);
 80096fa:	2300      	movs	r3, #0
 80096fc:	e054      	b.n	80097a8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	089b      	lsrs	r3, r3, #2
 800970c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00e      	beq.n	8009734 <osThreadNew+0xd4>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	2b5b      	cmp	r3, #91	; 0x5b
 800971c:	d90a      	bls.n	8009734 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009722:	2b00      	cmp	r3, #0
 8009724:	d006      	beq.n	8009734 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <osThreadNew+0xd4>
        mem = 1;
 800972e:	2301      	movs	r3, #1
 8009730:	62bb      	str	r3, [r7, #40]	; 0x28
 8009732:	e010      	b.n	8009756 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <osThreadNew+0xf6>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d108      	bne.n	8009756 <osThreadNew+0xf6>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <osThreadNew+0xf6>
          mem = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009750:	e001      	b.n	8009756 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2b01      	cmp	r3, #1
 800975a:	d110      	bne.n	800977e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009764:	9202      	str	r2, [sp, #8]
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 ff06 	bl	800a584 <xTaskCreateStatic>
 8009778:	4603      	mov	r3, r0
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	e013      	b.n	80097a6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d110      	bne.n	80097a6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	b29a      	uxth	r2, r3
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 ff50 	bl	800a63c <xTaskCreate>
 800979c:	4603      	mov	r3, r0
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d001      	beq.n	80097a6 <osThreadNew+0x146>
          hTask = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097a6:	697b      	ldr	r3, [r7, #20]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3738      	adds	r7, #56	; 0x38
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20003320 	.word	0x20003320

080097b4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	; 0x28
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <osThreadFlagsSet+0x1a>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da03      	bge.n	80097d6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80097ce:	f06f 0303 	mvn.w	r3, #3
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e045      	b.n	8009862 <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097dc:	f3ef 8305 	mrs	r3, IPSR
 80097e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80097e2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10f      	bne.n	8009808 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e8:	f3ef 8310 	mrs	r3, PRIMASK
 80097ec:	617b      	str	r3, [r7, #20]
  return(result);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d109      	bne.n	8009808 <osThreadFlagsSet+0x54>
 80097f4:	4b1d      	ldr	r3, [pc, #116]	; (800986c <osThreadFlagsSet+0xb8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d125      	bne.n	8009848 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097fc:	f3ef 8311 	mrs	r3, BASEPRI
 8009800:	613b      	str	r3, [r7, #16]
  return(result);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d01f      	beq.n	8009848 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	2300      	movs	r3, #0
 8009814:	2201      	movs	r2, #1
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	69f8      	ldr	r0, [r7, #28]
 800981a:	f001 fe7b 	bl	800b514 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	2200      	movs	r2, #0
 8009824:	9200      	str	r2, [sp, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	69f8      	ldr	r0, [r7, #28]
 800982c:	f001 fe72 	bl	800b514 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d015      	beq.n	8009862 <osThreadFlagsSet+0xae>
 8009836:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <osThreadFlagsSet+0xbc>)
 8009838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	e00c      	b.n	8009862 <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009848:	2300      	movs	r3, #0
 800984a:	2201      	movs	r2, #1
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	69f8      	ldr	r0, [r7, #28]
 8009850:	f001 fdbc 	bl	800b3cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	69f8      	ldr	r0, [r7, #28]
 800985e:	f001 fdb5 	bl	800b3cc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009862:	68fb      	ldr	r3, [r7, #12]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20003320 	.word	0x20003320
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	; 0x38
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009880:	f3ef 8305 	mrs	r3, IPSR
 8009884:	61fb      	str	r3, [r7, #28]
  return(result);
 8009886:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10f      	bne.n	80098ac <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988c:	f3ef 8310 	mrs	r3, PRIMASK
 8009890:	61bb      	str	r3, [r7, #24]
  return(result);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d109      	bne.n	80098ac <osThreadFlagsWait+0x38>
 8009898:	4b3f      	ldr	r3, [pc, #252]	; (8009998 <osThreadFlagsWait+0x124>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d109      	bne.n	80098b4 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098a0:	f3ef 8311 	mrs	r3, BASEPRI
 80098a4:	617b      	str	r3, [r7, #20]
  return(result);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80098ac:	f06f 0305 	mvn.w	r3, #5
 80098b0:	637b      	str	r3, [r7, #52]	; 0x34
 80098b2:	e06b      	b.n	800998c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da03      	bge.n	80098c2 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80098ba:	f06f 0303 	mvn.w	r3, #3
 80098be:	637b      	str	r3, [r7, #52]	; 0x34
 80098c0:	e064      	b.n	800998c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <osThreadFlagsWait+0x5e>
      clear = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	633b      	str	r3, [r7, #48]	; 0x30
 80098d0:	e001      	b.n	80098d6 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80098de:	f001 f92f 	bl	800ab40 <xTaskGetTickCount>
 80098e2:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80098e4:	f107 0210 	add.w	r2, r7, #16
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ec:	2000      	movs	r0, #0
 80098ee:	f001 fd13 	bl	800b318 <xTaskNotifyWait>
 80098f2:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d137      	bne.n	800996a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80098fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4013      	ands	r3, r2
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009906:	4313      	orrs	r3, r2
 8009908:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00c      	beq.n	800992e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009918:	4013      	ands	r3, r2
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d032      	beq.n	8009986 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10f      	bne.n	8009946 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009926:	f06f 0302 	mvn.w	r3, #2
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800992c:	e02e      	b.n	800998c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009932:	4013      	ands	r3, r2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d128      	bne.n	800998a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800993e:	f06f 0302 	mvn.w	r3, #2
 8009942:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009944:	e022      	b.n	800998c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009946:	f001 f8fb 	bl	800ab40 <xTaskGetTickCount>
 800994a:	4602      	mov	r2, r0
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8009952:	6a3a      	ldr	r2, [r7, #32]
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	429a      	cmp	r2, r3
 8009958:	d902      	bls.n	8009960 <osThreadFlagsWait+0xec>
          tout  = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995e:	e00e      	b.n	800997e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8009960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009968:	e009      	b.n	800997e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d103      	bne.n	8009978 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8009970:	f06f 0302 	mvn.w	r3, #2
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
 8009976:	e002      	b.n	800997e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009978:	f06f 0301 	mvn.w	r3, #1
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1af      	bne.n	80098e4 <osThreadFlagsWait+0x70>
 8009984:	e002      	b.n	800998c <osThreadFlagsWait+0x118>
            break;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <osThreadFlagsWait+0x118>
            break;
 800998a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800998e:	4618      	mov	r0, r3
 8009990:	3738      	adds	r7, #56	; 0x38
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20003320 	.word	0x20003320

0800999c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a4:	f3ef 8305 	mrs	r3, IPSR
 80099a8:	613b      	str	r3, [r7, #16]
  return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10f      	bne.n	80099d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b0:	f3ef 8310 	mrs	r3, PRIMASK
 80099b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d109      	bne.n	80099d0 <osDelay+0x34>
 80099bc:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <osDelay+0x58>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d109      	bne.n	80099d8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099c4:	f3ef 8311 	mrs	r3, BASEPRI
 80099c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <osDelay+0x3c>
    stat = osErrorISR;
 80099d0:	f06f 0305 	mvn.w	r3, #5
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e007      	b.n	80099e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 ff66 	bl	800a8b4 <vTaskDelay>
    }
  }

  return (stat);
 80099e8:	697b      	ldr	r3, [r7, #20]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20003320 	.word	0x20003320

080099f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a06      	ldr	r2, [pc, #24]	; (8009a20 <vApplicationGetIdleTaskMemory+0x28>)
 8009a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a05      	ldr	r2, [pc, #20]	; (8009a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr
 8009a20:	20003324 	.word	0x20003324
 8009a24:	20003380 	.word	0x20003380

08009a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a07      	ldr	r2, [pc, #28]	; (8009a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4a06      	ldr	r2, [pc, #24]	; (8009a58 <vApplicationGetTimerTaskMemory+0x30>)
 8009a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a46:	601a      	str	r2, [r3, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20003580 	.word	0x20003580
 8009a58:	200035dc 	.word	0x200035dc

08009a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f103 0208 	add.w	r2, r3, #8
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f103 0208 	add.w	r2, r3, #8
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f103 0208 	add.w	r2, r3, #8
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc80      	pop	{r7}
 8009ab0:	4770      	bx	lr

08009ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	601a      	str	r2, [r3, #0]
}
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bc80      	pop	{r7}
 8009af6:	4770      	bx	lr

08009af8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b0e:	d103      	bne.n	8009b18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e00c      	b.n	8009b32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e002      	b.n	8009b26 <vListInsert+0x2e>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d2f6      	bcs.n	8009b20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	601a      	str	r2, [r3, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6892      	ldr	r2, [r2, #8]
 8009b7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6852      	ldr	r2, [r2, #4]
 8009b88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d103      	bne.n	8009b9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	1e5a      	subs	r2, r3, #1
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr
	...

08009bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <xQueueGenericReset+0x2a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	60bb      	str	r3, [r7, #8]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009be6:	f002 f9b9 	bl	800bf5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	441a      	add	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c16:	3b01      	subs	r3, #1
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c1c:	fb01 f303 	mul.w	r3, r1, r3
 8009c20:	441a      	add	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	22ff      	movs	r2, #255	; 0xff
 8009c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	22ff      	movs	r2, #255	; 0xff
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d114      	bne.n	8009c66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3310      	adds	r3, #16
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 f8f1 	bl	800ae30 <xTaskRemoveFromEventList>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d012      	beq.n	8009c7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c54:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <xQueueGenericReset+0xcc>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	e009      	b.n	8009c7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3310      	adds	r3, #16
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fef6 	bl	8009a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3324      	adds	r3, #36	; 0x24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff fef1 	bl	8009a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c7a:	f002 f99f 	bl	800bfbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c7e:	2301      	movs	r3, #1
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	; 0x38
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10a      	bne.n	8009cd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <xQueueGenericCreateStatic+0x52>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <xQueueGenericCreateStatic+0x56>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericCreateStatic+0x58>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <xQueueGenericCreateStatic+0x7e>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <xQueueGenericCreateStatic+0x82>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <xQueueGenericCreateStatic+0x84>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	61fb      	str	r3, [r7, #28]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d2a:	2350      	movs	r3, #80	; 0x50
 8009d2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b50      	cmp	r3, #80	; 0x50
 8009d32:	d00a      	beq.n	8009d4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	61bb      	str	r3, [r7, #24]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00d      	beq.n	8009d70 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f805 	bl	8009d7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3730      	adds	r7, #48	; 0x30
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009da8:	2101      	movs	r1, #1
 8009daa:	69b8      	ldr	r0, [r7, #24]
 8009dac:	f7ff ff06 	bl	8009bbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	; 0x38
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <xQueueGenericSend+0x32>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <xQueueGenericSend+0x40>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <xQueueGenericSend+0x44>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <xQueueGenericSend+0x46>
 8009e04:	2300      	movs	r3, #0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <xQueueGenericSend+0x60>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d103      	bne.n	8009e2e <xQueueGenericSend+0x6e>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <xQueueGenericSend+0x72>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <xQueueGenericSend+0x74>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericSend+0x8e>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	623b      	str	r3, [r7, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e4e:	f001 f9d7 	bl	800b200 <xTaskGetSchedulerState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <xQueueGenericSend+0x9e>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <xQueueGenericSend+0xa2>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <xQueueGenericSend+0xa4>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <xQueueGenericSend+0xbe>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	61fb      	str	r3, [r7, #28]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e7e:	f002 f86d 	bl	800bf5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <xQueueGenericSend+0xd4>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d129      	bne.n	8009ee8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e9a:	f000 fa07 	bl	800a2ac <prvCopyDataToQueue>
 8009e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d010      	beq.n	8009eca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	3324      	adds	r3, #36	; 0x24
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 ffbf 	bl	800ae30 <xTaskRemoveFromEventList>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d013      	beq.n	8009ee0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009eb8:	4b3f      	ldr	r3, [pc, #252]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	e00a      	b.n	8009ee0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ed0:	4b39      	ldr	r3, [pc, #228]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ee0:	f002 f86c 	bl	800bfbc <vPortExitCritical>
				return pdPASS;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e063      	b.n	8009fb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eee:	f002 f865 	bl	800bfbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e05c      	b.n	8009fb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 f81f 	bl	800af44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f0a:	f002 f857 	bl	800bfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f0e:	f000 fd6b 	bl	800a9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f12:	f002 f823 	bl	800bf5c <vPortEnterCritical>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f22:	d103      	bne.n	8009f2c <xQueueGenericSend+0x16c>
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f38:	d103      	bne.n	8009f42 <xQueueGenericSend+0x182>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f42:	f002 f83b 	bl	800bfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f46:	1d3a      	adds	r2, r7, #4
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 f80e 	bl	800af70 <xTaskCheckForTimeOut>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d124      	bne.n	8009fa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5c:	f000 fa9e 	bl	800a49c <prvIsQueueFull>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d018      	beq.n	8009f98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	3310      	adds	r3, #16
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 ff0e 	bl	800ad90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f76:	f000 fa29 	bl	800a3cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f7a:	f000 fd43 	bl	800aa04 <xTaskResumeAll>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f47f af7c 	bne.w	8009e7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f86:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <xQueueGenericSend+0x1f8>)
 8009f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	e772      	b.n	8009e7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9a:	f000 fa17 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f9e:	f000 fd31 	bl	800aa04 <xTaskResumeAll>
 8009fa2:	e76c      	b.n	8009e7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa6:	f000 fa11 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009faa:	f000 fd2b 	bl	800aa04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fae:	2300      	movs	r3, #0
		}
	}
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3738      	adds	r7, #56	; 0x38
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	e000ed04 	.word	0xe000ed04

08009fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d103      	bne.n	8009ff8 <xQueueGenericSendFromISR+0x3c>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <xQueueGenericSendFromISR+0x40>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <xQueueGenericSendFromISR+0x42>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	623b      	str	r3, [r7, #32]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d103      	bne.n	800a026 <xQueueGenericSendFromISR+0x6a>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <xQueueGenericSendFromISR+0x6e>
 800a026:	2301      	movs	r3, #1
 800a028:	e000      	b.n	800a02c <xQueueGenericSendFromISR+0x70>
 800a02a:	2300      	movs	r3, #0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fb      	str	r3, [r7, #28]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a046:	f002 f84b 	bl	800c0e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a04a:	f3ef 8211 	mrs	r2, BASEPRI
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	61ba      	str	r2, [r7, #24]
 800a060:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a062:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d302      	bcc.n	800a078 <xQueueGenericSendFromISR+0xbc>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d12c      	bne.n	800a0d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a088:	f000 f910 	bl	800a2ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a08c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a094:	d112      	bne.n	800a0bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d016      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	3324      	adds	r3, #36	; 0x24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fec4 	bl	800ae30 <xTaskRemoveFromEventList>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00e      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	e007      	b.n	800a0cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	b25a      	sxtb	r2, r3
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a0d0:	e001      	b.n	800a0d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3738      	adds	r7, #56	; 0x38
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08c      	sub	sp, #48	; 0x30
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xQueueReceive+0x30>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	623b      	str	r3, [r7, #32]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <xQueueReceive+0x3e>
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <xQueueReceive+0x42>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueReceive+0x44>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueReceive+0x5e>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	61fb      	str	r3, [r7, #28]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a14a:	f001 f859 	bl	800b200 <xTaskGetSchedulerState>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <xQueueReceive+0x6e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueReceive+0x72>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueReceive+0x74>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xQueueReceive+0x8e>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61bb      	str	r3, [r7, #24]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17a:	f001 feef 	bl	800bf5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01f      	beq.n	800a1ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18e:	f000 f8f7 	bl	800a380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	3310      	adds	r3, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fe42 	bl	800ae30 <xTaskRemoveFromEventList>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1b2:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1c2:	f001 fefb 	bl	800bfbc <vPortExitCritical>
				return pdPASS;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e069      	b.n	800a29e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1d0:	f001 fef4 	bl	800bfbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e062      	b.n	800a29e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 feae 	bl	800af44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ec:	f001 fee6 	bl	800bfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1f0:	f000 fbfa 	bl	800a9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1f4:	f001 feb2 	bl	800bf5c <vPortEnterCritical>
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1fe:	b25b      	sxtb	r3, r3
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a204:	d103      	bne.n	800a20e <xQueueReceive+0x122>
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a214:	b25b      	sxtb	r3, r3
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a21a:	d103      	bne.n	800a224 <xQueueReceive+0x138>
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a224:	f001 feca 	bl	800bfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a228:	1d3a      	adds	r2, r7, #4
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fe9d 	bl	800af70 <xTaskCheckForTimeOut>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d123      	bne.n	800a284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23e:	f000 f917 	bl	800a470 <prvIsQueueEmpty>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d017      	beq.n	800a278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	3324      	adds	r3, #36	; 0x24
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fd9d 	bl	800ad90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a258:	f000 f8b8 	bl	800a3cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a25c:	f000 fbd2 	bl	800aa04 <xTaskResumeAll>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d189      	bne.n	800a17a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a266:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	e780      	b.n	800a17a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27a:	f000 f8a7 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a27e:	f000 fbc1 	bl	800aa04 <xTaskResumeAll>
 800a282:	e77a      	b.n	800a17a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a286:	f000 f8a1 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a28a:	f000 fbbb 	bl	800aa04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a290:	f000 f8ee 	bl	800a470 <prvIsQueueEmpty>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	f43f af6f 	beq.w	800a17a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3730      	adds	r7, #48	; 0x30
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10d      	bne.n	800a2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d14d      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 ffb0 	bl	800b23c <xTaskPriorityDisinherit>
 800a2dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	e043      	b.n	800a36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d119      	bne.n	800a320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6898      	ldr	r0, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	f00f fb78 	bl	80199ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d32b      	bcc.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	609a      	str	r2, [r3, #8]
 800a31e:	e026      	b.n	800a36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68d8      	ldr	r0, [r3, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	461a      	mov	r2, r3
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	f00f fb5e 	bl	80199ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	425b      	negs	r3, r3
 800a33a:	441a      	add	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d207      	bcs.n	800a35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	425b      	negs	r3, r3
 800a356:	441a      	add	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d105      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a376:	697b      	ldr	r3, [r7, #20]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d018      	beq.n	800a3c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d303      	bcc.n	800a3b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68d9      	ldr	r1, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6838      	ldr	r0, [r7, #0]
 800a3c0:	f00f fb14 	bl	80199ec <memcpy>
	}
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3d4:	f001 fdc2 	bl	800bf5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3e0:	e011      	b.n	800a406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fd1e 	bl	800ae30 <xTaskRemoveFromEventList>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3fa:	f000 fe1b 	bl	800b034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	3b01      	subs	r3, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dce9      	bgt.n	800a3e2 <prvUnlockQueue+0x16>
 800a40e:	e000      	b.n	800a412 <prvUnlockQueue+0x46>
					break;
 800a410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a41a:	f001 fdcf 	bl	800bfbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a41e:	f001 fd9d 	bl	800bf5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a42a:	e011      	b.n	800a450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d012      	beq.n	800a45a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3310      	adds	r3, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fcf9 	bl	800ae30 <xTaskRemoveFromEventList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a444:	f000 fdf6 	bl	800b034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dce9      	bgt.n	800a42c <prvUnlockQueue+0x60>
 800a458:	e000      	b.n	800a45c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a45a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	22ff      	movs	r2, #255	; 0xff
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a464:	f001 fdaa 	bl	800bfbc <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a478:	f001 fd70 	bl	800bf5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	e001      	b.n	800a48e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a48e:	f001 fd95 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800a492:	68fb      	ldr	r3, [r7, #12]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4a4:	f001 fd5a 	bl	800bf5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d102      	bne.n	800a4ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e001      	b.n	800a4be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4be:	f001 fd7d 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e014      	b.n	800a506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4dc:	4a0e      	ldr	r2, [pc, #56]	; (800a518 <vQueueAddToRegistry+0x4c>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4e8:	490b      	ldr	r1, [pc, #44]	; (800a518 <vQueueAddToRegistry+0x4c>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4f2:	4a09      	ldr	r2, [pc, #36]	; (800a518 <vQueueAddToRegistry+0x4c>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4fe:	e006      	b.n	800a50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b07      	cmp	r3, #7
 800a50a:	d9e7      	bls.n	800a4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr
 800a518:	200092f0 	.word	0x200092f0

0800a51c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a52c:	f001 fd16 	bl	800bf5c <vPortEnterCritical>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a536:	b25b      	sxtb	r3, r3
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53c:	d103      	bne.n	800a546 <vQueueWaitForMessageRestricted+0x2a>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a54c:	b25b      	sxtb	r3, r3
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a552:	d103      	bne.n	800a55c <vQueueWaitForMessageRestricted+0x40>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a55c:	f001 fd2e 	bl	800bfbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	2b00      	cmp	r3, #0
 800a566:	d106      	bne.n	800a576 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	3324      	adds	r3, #36	; 0x24
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fc31 	bl	800add8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f7ff ff28 	bl	800a3cc <prvUnlockQueue>
	}
 800a57c:	bf00      	nop
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08e      	sub	sp, #56	; 0x38
 800a588:	af04      	add	r7, sp, #16
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	623b      	str	r3, [r7, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	e7fe      	b.n	800a5ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xTaskCreateStatic+0x46>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	61fb      	str	r3, [r7, #28]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5ca:	235c      	movs	r3, #92	; 0x5c
 800a5cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2b5c      	cmp	r3, #92	; 0x5c
 800a5d2:	d00a      	beq.n	800a5ea <xTaskCreateStatic+0x66>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	61bb      	str	r3, [r7, #24]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01e      	beq.n	800a62e <xTaskCreateStatic+0xaa>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01b      	beq.n	800a62e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	2202      	movs	r2, #2
 800a604:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a608:	2300      	movs	r3, #0
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f850 	bl	800a6c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a628:	f000 f8d4 	bl	800a7d4 <prvAddNewTaskToReadyList>
 800a62c:	e001      	b.n	800a632 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a632:	697b      	ldr	r3, [r7, #20]
	}
 800a634:	4618      	mov	r0, r3
 800a636:	3728      	adds	r7, #40	; 0x28
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	; 0x30
 800a640:	af04      	add	r7, sp, #16
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64c:	88fb      	ldrh	r3, [r7, #6]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fd83 	bl	800c15c <pvPortMalloc>
 800a656:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00e      	beq.n	800a67c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a65e:	205c      	movs	r0, #92	; 0x5c
 800a660:	f001 fd7c 	bl	800c15c <pvPortMalloc>
 800a664:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	631a      	str	r2, [r3, #48]	; 0x30
 800a672:	e005      	b.n	800a680 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a674:	6978      	ldr	r0, [r7, #20]
 800a676:	f001 fe35 	bl	800c2e4 <vPortFree>
 800a67a:	e001      	b.n	800a680 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d017      	beq.n	800a6b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a68e:	88fa      	ldrh	r2, [r7, #6]
 800a690:	2300      	movs	r3, #0
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f80e 	bl	800a6c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6aa:	69f8      	ldr	r0, [r7, #28]
 800a6ac:	f000 f892 	bl	800a7d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	e002      	b.n	800a6bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b088      	sub	sp, #32
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	461a      	mov	r2, r3
 800a6de:	21a5      	movs	r1, #165	; 0xa5
 800a6e0:	f00f f9ac 	bl	8019a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <prvInitialiseNewTask+0x58>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	617b      	str	r3, [r7, #20]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	e012      	b.n	800a74a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	4413      	add	r3, r2
 800a72a:	7819      	ldrb	r1, [r3, #0]
 800a72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	3334      	adds	r3, #52	; 0x34
 800a734:	460a      	mov	r2, r1
 800a736:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3301      	adds	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	2b0f      	cmp	r3, #15
 800a74e:	d9e9      	bls.n	800a724 <prvInitialiseNewTask+0x5e>
 800a750:	e000      	b.n	800a754 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a752:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	2b37      	cmp	r3, #55	; 0x37
 800a760:	d901      	bls.n	800a766 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a762:	2337      	movs	r3, #55	; 0x37
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a770:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	2200      	movs	r2, #0
 800a776:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff f98c 	bl	8009a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	3318      	adds	r3, #24
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff f987 	bl	8009a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	69b8      	ldr	r0, [r7, #24]
 800a7b6:	f001 fadd 	bl	800bd74 <pxPortInitialiseStack>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7cc:	bf00      	nop
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7dc:	f001 fbbe 	bl	800bf5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7e0:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7ea:	4b2c      	ldr	r3, [pc, #176]	; (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d109      	bne.n	800a806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7f2:	4a2a      	ldr	r2, [pc, #168]	; (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7f8:	4b27      	ldr	r3, [pc, #156]	; (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d110      	bne.n	800a822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a800:	f000 fc3c 	bl	800b07c <prvInitialiseTaskLists>
 800a804:	e00d      	b.n	800a822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a806:	4b26      	ldr	r3, [pc, #152]	; (800a8a0 <prvAddNewTaskToReadyList+0xcc>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a80e:	4b23      	ldr	r3, [pc, #140]	; (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	429a      	cmp	r2, r3
 800a81a:	d802      	bhi.n	800a822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a81c:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a822:	4b20      	ldr	r3, [pc, #128]	; (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	4a1e      	ldr	r2, [pc, #120]	; (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a82a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a82c:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	4b1b      	ldr	r3, [pc, #108]	; (800a8a8 <prvAddNewTaskToReadyList+0xd4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d903      	bls.n	800a848 <prvAddNewTaskToReadyList+0x74>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a844:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <prvAddNewTaskToReadyList+0xd4>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <prvAddNewTaskToReadyList+0xd8>)
 800a856:	441a      	add	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f7ff f927 	bl	8009ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a864:	f001 fbaa 	bl	800bfbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <prvAddNewTaskToReadyList+0xcc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00e      	beq.n	800a88e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d207      	bcs.n	800a88e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a87e:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <prvAddNewTaskToReadyList+0xdc>)
 800a880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20003eb0 	.word	0x20003eb0
 800a89c:	200039dc 	.word	0x200039dc
 800a8a0:	20003ebc 	.word	0x20003ebc
 800a8a4:	20003ecc 	.word	0x20003ecc
 800a8a8:	20003eb8 	.word	0x20003eb8
 800a8ac:	200039e0 	.word	0x200039e0
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8c6:	4b13      	ldr	r3, [pc, #76]	; (800a914 <vTaskDelay+0x60>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <vTaskDelay+0x30>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60bb      	str	r3, [r7, #8]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8e4:	f000 f880 	bl	800a9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fedc 	bl	800b6a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8f0:	f000 f888 	bl	800aa04 <xTaskResumeAll>
 800a8f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d107      	bne.n	800a90c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a8fc:	4b06      	ldr	r3, [pc, #24]	; (800a918 <vTaskDelay+0x64>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a90c:	bf00      	nop
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20003ed8 	.word	0x20003ed8
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	; 0x28
 800a920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a92a:	463a      	mov	r2, r7
 800a92c:	1d39      	adds	r1, r7, #4
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff f860 	bl	80099f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	9202      	str	r2, [sp, #8]
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	2300      	movs	r3, #0
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	2300      	movs	r3, #0
 800a948:	460a      	mov	r2, r1
 800a94a:	4921      	ldr	r1, [pc, #132]	; (800a9d0 <vTaskStartScheduler+0xb4>)
 800a94c:	4821      	ldr	r0, [pc, #132]	; (800a9d4 <vTaskStartScheduler+0xb8>)
 800a94e:	f7ff fe19 	bl	800a584 <xTaskCreateStatic>
 800a952:	4603      	mov	r3, r0
 800a954:	4a20      	ldr	r2, [pc, #128]	; (800a9d8 <vTaskStartScheduler+0xbc>)
 800a956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a958:	4b1f      	ldr	r3, [pc, #124]	; (800a9d8 <vTaskStartScheduler+0xbc>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a960:	2301      	movs	r3, #1
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	e001      	b.n	800a96a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a966:	2300      	movs	r3, #0
 800a968:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d102      	bne.n	800a976 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a970:	f000 feee 	bl	800b750 <xTimerCreateTimerTask>
 800a974:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d116      	bne.n	800a9aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	613b      	str	r3, [r7, #16]
}
 800a98e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a990:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <vTaskStartScheduler+0xc0>)
 800a992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a998:	4b11      	ldr	r3, [pc, #68]	; (800a9e0 <vTaskStartScheduler+0xc4>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a99e:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <vTaskStartScheduler+0xc8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9a4:	f001 fa68 	bl	800be78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9a8:	e00e      	b.n	800a9c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9b0:	d10a      	bne.n	800a9c8 <vTaskStartScheduler+0xac>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60fb      	str	r3, [r7, #12]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <vTaskStartScheduler+0xaa>
}
 800a9c8:	bf00      	nop
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	0801b4e4 	.word	0x0801b4e4
 800a9d4:	0800b04d 	.word	0x0800b04d
 800a9d8:	20003ed4 	.word	0x20003ed4
 800a9dc:	20003ed0 	.word	0x20003ed0
 800a9e0:	20003ebc 	.word	0x20003ebc
 800a9e4:	20003eb4 	.word	0x20003eb4

0800a9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9ec:	4b04      	ldr	r3, [pc, #16]	; (800aa00 <vTaskSuspendAll+0x18>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	4a03      	ldr	r2, [pc, #12]	; (800aa00 <vTaskSuspendAll+0x18>)
 800a9f4:	6013      	str	r3, [r2, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20003ed8 	.word	0x20003ed8

0800aa04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa12:	4b42      	ldr	r3, [pc, #264]	; (800ab1c <xTaskResumeAll+0x118>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	603b      	str	r3, [r7, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa30:	f001 fa94 	bl	800bf5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa34:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <xTaskResumeAll+0x118>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	4a38      	ldr	r2, [pc, #224]	; (800ab1c <xTaskResumeAll+0x118>)
 800aa3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa3e:	4b37      	ldr	r3, [pc, #220]	; (800ab1c <xTaskResumeAll+0x118>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d162      	bne.n	800ab0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa46:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <xTaskResumeAll+0x11c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d05e      	beq.n	800ab0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa4e:	e02f      	b.n	800aab0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aa50:	4b34      	ldr	r3, [pc, #208]	; (800ab24 <xTaskResumeAll+0x120>)
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3318      	adds	r3, #24
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff f883 	bl	8009b68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff f87e 	bl	8009b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa70:	4b2d      	ldr	r3, [pc, #180]	; (800ab28 <xTaskResumeAll+0x124>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d903      	bls.n	800aa80 <xTaskResumeAll+0x7c>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <xTaskResumeAll+0x124>)
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4a27      	ldr	r2, [pc, #156]	; (800ab2c <xTaskResumeAll+0x128>)
 800aa8e:	441a      	add	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4619      	mov	r1, r3
 800aa96:	4610      	mov	r0, r2
 800aa98:	f7ff f80b 	bl	8009ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa0:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <xTaskResumeAll+0x12c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aaaa:	4b22      	ldr	r3, [pc, #136]	; (800ab34 <xTaskResumeAll+0x130>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aab0:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <xTaskResumeAll+0x120>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1cb      	bne.n	800aa50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aabe:	f000 fb7b 	bl	800b1b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aac2:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <xTaskResumeAll+0x134>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d010      	beq.n	800aaf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aace:	f000 f845 	bl	800ab5c <xTaskIncrementTick>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aad8:	4b16      	ldr	r3, [pc, #88]	; (800ab34 <xTaskResumeAll+0x130>)
 800aada:	2201      	movs	r2, #1
 800aadc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f1      	bne.n	800aace <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aaea:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <xTaskResumeAll+0x134>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaf0:	4b10      	ldr	r3, [pc, #64]	; (800ab34 <xTaskResumeAll+0x130>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d009      	beq.n	800ab0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aafc:	4b0f      	ldr	r3, [pc, #60]	; (800ab3c <xTaskResumeAll+0x138>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f001 fa56 	bl	800bfbc <vPortExitCritical>

	return xAlreadyYielded;
 800ab10:	68bb      	ldr	r3, [r7, #8]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20003ed8 	.word	0x20003ed8
 800ab20:	20003eb0 	.word	0x20003eb0
 800ab24:	20003e70 	.word	0x20003e70
 800ab28:	20003eb8 	.word	0x20003eb8
 800ab2c:	200039e0 	.word	0x200039e0
 800ab30:	200039dc 	.word	0x200039dc
 800ab34:	20003ec4 	.word	0x20003ec4
 800ab38:	20003ec0 	.word	0x20003ec0
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab46:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <xTaskGetTickCount+0x18>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab4c:	687b      	ldr	r3, [r7, #4]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr
 800ab58:	20003eb4 	.word	0x20003eb4

0800ab5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab66:	4b51      	ldr	r3, [pc, #324]	; (800acac <xTaskIncrementTick+0x150>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 808e 	bne.w	800ac8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab70:	4b4f      	ldr	r3, [pc, #316]	; (800acb0 <xTaskIncrementTick+0x154>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab78:	4a4d      	ldr	r2, [pc, #308]	; (800acb0 <xTaskIncrementTick+0x154>)
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d120      	bne.n	800abc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <xTaskIncrementTick+0x158>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	603b      	str	r3, [r7, #0]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <xTaskIncrementTick+0x46>
 800aba4:	4b43      	ldr	r3, [pc, #268]	; (800acb4 <xTaskIncrementTick+0x158>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	4b43      	ldr	r3, [pc, #268]	; (800acb8 <xTaskIncrementTick+0x15c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a41      	ldr	r2, [pc, #260]	; (800acb4 <xTaskIncrementTick+0x158>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	4a41      	ldr	r2, [pc, #260]	; (800acb8 <xTaskIncrementTick+0x15c>)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	4b40      	ldr	r3, [pc, #256]	; (800acbc <xTaskIncrementTick+0x160>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	4a3f      	ldr	r2, [pc, #252]	; (800acbc <xTaskIncrementTick+0x160>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	f000 faf9 	bl	800b1b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abc6:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <xTaskIncrementTick+0x164>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d34e      	bcc.n	800ac6e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd0:	4b38      	ldr	r3, [pc, #224]	; (800acb4 <xTaskIncrementTick+0x158>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <xTaskIncrementTick+0x82>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <xTaskIncrementTick+0x84>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe4:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <xTaskIncrementTick+0x164>)
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abea:	601a      	str	r2, [r3, #0]
					break;
 800abec:	e03f      	b.n	800ac6e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800abee:	4b31      	ldr	r3, [pc, #196]	; (800acb4 <xTaskIncrementTick+0x158>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d203      	bcs.n	800ac0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac06:	4a2e      	ldr	r2, [pc, #184]	; (800acc0 <xTaskIncrementTick+0x164>)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6013      	str	r3, [r2, #0]
						break;
 800ac0c:	e02f      	b.n	800ac6e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe ffa8 	bl	8009b68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	3318      	adds	r3, #24
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe ff9f 	bl	8009b68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	4b25      	ldr	r3, [pc, #148]	; (800acc4 <xTaskIncrementTick+0x168>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d903      	bls.n	800ac3e <xTaskIncrementTick+0xe2>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	4a22      	ldr	r2, [pc, #136]	; (800acc4 <xTaskIncrementTick+0x168>)
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4a1f      	ldr	r2, [pc, #124]	; (800acc8 <xTaskIncrementTick+0x16c>)
 800ac4c:	441a      	add	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4619      	mov	r1, r3
 800ac54:	4610      	mov	r0, r2
 800ac56:	f7fe ff2c 	bl	8009ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	4b1b      	ldr	r3, [pc, #108]	; (800accc <xTaskIncrementTick+0x170>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d3b3      	bcc.n	800abd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac6c:	e7b0      	b.n	800abd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac6e:	4b17      	ldr	r3, [pc, #92]	; (800accc <xTaskIncrementTick+0x170>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	4914      	ldr	r1, [pc, #80]	; (800acc8 <xTaskIncrementTick+0x16c>)
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	440b      	add	r3, r1
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d907      	bls.n	800ac96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ac86:	2301      	movs	r3, #1
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e004      	b.n	800ac96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac8c:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <xTaskIncrementTick+0x174>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3301      	adds	r3, #1
 800ac92:	4a0f      	ldr	r2, [pc, #60]	; (800acd0 <xTaskIncrementTick+0x174>)
 800ac94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac96:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <xTaskIncrementTick+0x178>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aca2:	697b      	ldr	r3, [r7, #20]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20003ed8 	.word	0x20003ed8
 800acb0:	20003eb4 	.word	0x20003eb4
 800acb4:	20003e68 	.word	0x20003e68
 800acb8:	20003e6c 	.word	0x20003e6c
 800acbc:	20003ec8 	.word	0x20003ec8
 800acc0:	20003ed0 	.word	0x20003ed0
 800acc4:	20003eb8 	.word	0x20003eb8
 800acc8:	200039e0 	.word	0x200039e0
 800accc:	200039dc 	.word	0x200039dc
 800acd0:	20003ec0 	.word	0x20003ec0
 800acd4:	20003ec4 	.word	0x20003ec4

0800acd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <vTaskSwitchContext+0xa4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ace6:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <vTaskSwitchContext+0xa8>)
 800ace8:	2201      	movs	r2, #1
 800acea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acec:	e041      	b.n	800ad72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800acee:	4b24      	ldr	r3, [pc, #144]	; (800ad80 <vTaskSwitchContext+0xa8>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800acf4:	4b23      	ldr	r3, [pc, #140]	; (800ad84 <vTaskSwitchContext+0xac>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e010      	b.n	800ad1e <vTaskSwitchContext+0x46>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	607b      	str	r3, [r7, #4]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <vTaskSwitchContext+0x3e>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	491a      	ldr	r1, [pc, #104]	; (800ad88 <vTaskSwitchContext+0xb0>)
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0e4      	beq.n	800acfc <vTaskSwitchContext+0x24>
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4a12      	ldr	r2, [pc, #72]	; (800ad88 <vTaskSwitchContext+0xb0>)
 800ad3e:	4413      	add	r3, r2
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	605a      	str	r2, [r3, #4]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	3308      	adds	r3, #8
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d104      	bne.n	800ad62 <vTaskSwitchContext+0x8a>
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	605a      	str	r2, [r3, #4]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	4a08      	ldr	r2, [pc, #32]	; (800ad8c <vTaskSwitchContext+0xb4>)
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	4a05      	ldr	r2, [pc, #20]	; (800ad84 <vTaskSwitchContext+0xac>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6013      	str	r3, [r2, #0]
}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	20003ed8 	.word	0x20003ed8
 800ad80:	20003ec4 	.word	0x20003ec4
 800ad84:	20003eb8 	.word	0x20003eb8
 800ad88:	200039e0 	.word	0x200039e0
 800ad8c:	200039dc 	.word	0x200039dc

0800ad90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adb6:	4b07      	ldr	r3, [pc, #28]	; (800add4 <vTaskPlaceOnEventList+0x44>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3318      	adds	r3, #24
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7fe fe9a 	bl	8009af8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adc4:	2101      	movs	r1, #1
 800adc6:	6838      	ldr	r0, [r7, #0]
 800adc8:	f000 fc6e 	bl	800b6a8 <prvAddCurrentTaskToDelayedList>
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200039dc 	.word	0x200039dc

0800add8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10a      	bne.n	800ae00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	617b      	str	r3, [r7, #20]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <vTaskPlaceOnEventListRestricted+0x54>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4619      	mov	r1, r3
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7fe fe52 	bl	8009ab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	68b8      	ldr	r0, [r7, #8]
 800ae1e:	f000 fc43 	bl	800b6a8 <prvAddCurrentTaskToDelayedList>
	}
 800ae22:	bf00      	nop
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200039dc 	.word	0x200039dc

0800ae30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	60fb      	str	r3, [r7, #12]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fe81 	bl	8009b68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae66:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <xTaskRemoveFromEventList+0xb0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d11d      	bne.n	800aeaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fe78 	bl	8009b68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b19      	ldr	r3, [pc, #100]	; (800aee4 <xTaskRemoveFromEventList+0xb4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <xTaskRemoveFromEventList+0x5c>
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a16      	ldr	r2, [pc, #88]	; (800aee4 <xTaskRemoveFromEventList+0xb4>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a13      	ldr	r2, [pc, #76]	; (800aee8 <xTaskRemoveFromEventList+0xb8>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe fe05 	bl	8009ab2 <vListInsertEnd>
 800aea8:	e005      	b.n	800aeb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	3318      	adds	r3, #24
 800aeae:	4619      	mov	r1, r3
 800aeb0:	480e      	ldr	r0, [pc, #56]	; (800aeec <xTaskRemoveFromEventList+0xbc>)
 800aeb2:	f7fe fdfe 	bl	8009ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <xTaskRemoveFromEventList+0xc0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d905      	bls.n	800aed0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <xTaskRemoveFromEventList+0xc4>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e001      	b.n	800aed4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aed4:	697b      	ldr	r3, [r7, #20]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20003ed8 	.word	0x20003ed8
 800aee4:	20003eb8 	.word	0x20003eb8
 800aee8:	200039e0 	.word	0x200039e0
 800aeec:	20003e70 	.word	0x20003e70
 800aef0:	200039dc 	.word	0x200039dc
 800aef4:	20003ec4 	.word	0x20003ec4

0800aef8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60fb      	str	r3, [r7, #12]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800af1c:	f001 f81e 	bl	800bf5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <vTaskSetTimeOutState+0x44>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800af28:	4b05      	ldr	r3, [pc, #20]	; (800af40 <vTaskSetTimeOutState+0x48>)
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800af30:	f001 f844 	bl	800bfbc <vPortExitCritical>
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20003ec8 	.word	0x20003ec8
 800af40:	20003eb4 	.word	0x20003eb4

0800af44 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af4c:	4b06      	ldr	r3, [pc, #24]	; (800af68 <vTaskInternalSetTimeOutState+0x24>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <vTaskInternalSetTimeOutState+0x28>)
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20003ec8 	.word	0x20003ec8
 800af6c:	20003eb4 	.word	0x20003eb4

0800af70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	613b      	str	r3, [r7, #16]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	60fb      	str	r3, [r7, #12]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afb2:	f000 ffd3 	bl	800bf5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afb6:	4b1d      	ldr	r3, [pc, #116]	; (800b02c <xTaskCheckForTimeOut+0xbc>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afce:	d102      	bne.n	800afd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61fb      	str	r3, [r7, #28]
 800afd4:	e023      	b.n	800b01e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4b15      	ldr	r3, [pc, #84]	; (800b030 <xTaskCheckForTimeOut+0xc0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d007      	beq.n	800aff2 <xTaskCheckForTimeOut+0x82>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d302      	bcc.n	800aff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	e015      	b.n	800b01e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d20b      	bcs.n	800b014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff ff9b 	bl	800af44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b00e:	2300      	movs	r3, #0
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	e004      	b.n	800b01e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b01e:	f000 ffcd 	bl	800bfbc <vPortExitCritical>

	return xReturn;
 800b022:	69fb      	ldr	r3, [r7, #28]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3720      	adds	r7, #32
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20003eb4 	.word	0x20003eb4
 800b030:	20003ec8 	.word	0x20003ec8

0800b034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b038:	4b03      	ldr	r3, [pc, #12]	; (800b048 <vTaskMissedYield+0x14>)
 800b03a:	2201      	movs	r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
}
 800b03e:	bf00      	nop
 800b040:	46bd      	mov	sp, r7
 800b042:	bc80      	pop	{r7}
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	20003ec4 	.word	0x20003ec4

0800b04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b054:	f000 f852 	bl	800b0fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b058:	4b06      	ldr	r3, [pc, #24]	; (800b074 <prvIdleTask+0x28>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d9f9      	bls.n	800b054 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <prvIdleTask+0x2c>)
 800b062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b070:	e7f0      	b.n	800b054 <prvIdleTask+0x8>
 800b072:	bf00      	nop
 800b074:	200039e0 	.word	0x200039e0
 800b078:	e000ed04 	.word	0xe000ed04

0800b07c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b082:	2300      	movs	r3, #0
 800b084:	607b      	str	r3, [r7, #4]
 800b086:	e00c      	b.n	800b0a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4a12      	ldr	r2, [pc, #72]	; (800b0dc <prvInitialiseTaskLists+0x60>)
 800b094:	4413      	add	r3, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fce0 	bl	8009a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	607b      	str	r3, [r7, #4]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b37      	cmp	r3, #55	; 0x37
 800b0a6:	d9ef      	bls.n	800b088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0a8:	480d      	ldr	r0, [pc, #52]	; (800b0e0 <prvInitialiseTaskLists+0x64>)
 800b0aa:	f7fe fcd7 	bl	8009a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0ae:	480d      	ldr	r0, [pc, #52]	; (800b0e4 <prvInitialiseTaskLists+0x68>)
 800b0b0:	f7fe fcd4 	bl	8009a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0b4:	480c      	ldr	r0, [pc, #48]	; (800b0e8 <prvInitialiseTaskLists+0x6c>)
 800b0b6:	f7fe fcd1 	bl	8009a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0ba:	480c      	ldr	r0, [pc, #48]	; (800b0ec <prvInitialiseTaskLists+0x70>)
 800b0bc:	f7fe fcce 	bl	8009a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0c0:	480b      	ldr	r0, [pc, #44]	; (800b0f0 <prvInitialiseTaskLists+0x74>)
 800b0c2:	f7fe fccb 	bl	8009a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <prvInitialiseTaskLists+0x78>)
 800b0c8:	4a05      	ldr	r2, [pc, #20]	; (800b0e0 <prvInitialiseTaskLists+0x64>)
 800b0ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <prvInitialiseTaskLists+0x7c>)
 800b0ce:	4a05      	ldr	r2, [pc, #20]	; (800b0e4 <prvInitialiseTaskLists+0x68>)
 800b0d0:	601a      	str	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	200039e0 	.word	0x200039e0
 800b0e0:	20003e40 	.word	0x20003e40
 800b0e4:	20003e54 	.word	0x20003e54
 800b0e8:	20003e70 	.word	0x20003e70
 800b0ec:	20003e84 	.word	0x20003e84
 800b0f0:	20003e9c 	.word	0x20003e9c
 800b0f4:	20003e68 	.word	0x20003e68
 800b0f8:	20003e6c 	.word	0x20003e6c

0800b0fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b102:	e019      	b.n	800b138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b104:	f000 ff2a 	bl	800bf5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b108:	4b10      	ldr	r3, [pc, #64]	; (800b14c <prvCheckTasksWaitingTermination+0x50>)
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3304      	adds	r3, #4
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fd27 	bl	8009b68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b11a:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <prvCheckTasksWaitingTermination+0x54>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3b01      	subs	r3, #1
 800b120:	4a0b      	ldr	r2, [pc, #44]	; (800b150 <prvCheckTasksWaitingTermination+0x54>)
 800b122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b124:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <prvCheckTasksWaitingTermination+0x58>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3b01      	subs	r3, #1
 800b12a:	4a0a      	ldr	r2, [pc, #40]	; (800b154 <prvCheckTasksWaitingTermination+0x58>)
 800b12c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b12e:	f000 ff45 	bl	800bfbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f810 	bl	800b158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b138:	4b06      	ldr	r3, [pc, #24]	; (800b154 <prvCheckTasksWaitingTermination+0x58>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1e1      	bne.n	800b104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20003e84 	.word	0x20003e84
 800b150:	20003eb0 	.word	0x20003eb0
 800b154:	20003e98 	.word	0x20003e98

0800b158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b166:	2b00      	cmp	r3, #0
 800b168:	d108      	bne.n	800b17c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	4618      	mov	r0, r3
 800b170:	f001 f8b8 	bl	800c2e4 <vPortFree>
				vPortFree( pxTCB );
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 f8b5 	bl	800c2e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b17a:	e018      	b.n	800b1ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b182:	2b01      	cmp	r3, #1
 800b184:	d103      	bne.n	800b18e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 f8ac 	bl	800c2e4 <vPortFree>
	}
 800b18c:	e00f      	b.n	800b1ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b194:	2b02      	cmp	r3, #2
 800b196:	d00a      	beq.n	800b1ae <prvDeleteTCB+0x56>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60fb      	str	r3, [r7, #12]
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <prvDeleteTCB+0x54>
	}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1be:	4b0e      	ldr	r3, [pc, #56]	; (800b1f8 <prvResetNextTaskUnblockTime+0x40>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <prvResetNextTaskUnblockTime+0x14>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <prvResetNextTaskUnblockTime+0x16>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d004      	beq.n	800b1dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <prvResetNextTaskUnblockTime+0x44>)
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1da:	e008      	b.n	800b1ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <prvResetNextTaskUnblockTime+0x40>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4a04      	ldr	r2, [pc, #16]	; (800b1fc <prvResetNextTaskUnblockTime+0x44>)
 800b1ec:	6013      	str	r3, [r2, #0]
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr
 800b1f8:	20003e68 	.word	0x20003e68
 800b1fc:	20003ed0 	.word	0x20003ed0

0800b200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b206:	4b0b      	ldr	r3, [pc, #44]	; (800b234 <xTaskGetSchedulerState+0x34>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b20e:	2301      	movs	r3, #1
 800b210:	607b      	str	r3, [r7, #4]
 800b212:	e008      	b.n	800b226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b214:	4b08      	ldr	r3, [pc, #32]	; (800b238 <xTaskGetSchedulerState+0x38>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d102      	bne.n	800b222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b21c:	2302      	movs	r3, #2
 800b21e:	607b      	str	r3, [r7, #4]
 800b220:	e001      	b.n	800b226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b226:	687b      	ldr	r3, [r7, #4]
	}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bc80      	pop	{r7}
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	20003ebc 	.word	0x20003ebc
 800b238:	20003ed8 	.word	0x20003ed8

0800b23c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b248:	2300      	movs	r3, #0
 800b24a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d056      	beq.n	800b300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b252:	4b2e      	ldr	r3, [pc, #184]	; (800b30c <xTaskPriorityDisinherit+0xd0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d00a      	beq.n	800b272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60fb      	str	r3, [r7, #12]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60bb      	str	r3, [r7, #8]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b294:	1e5a      	subs	r2, r3, #1
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d02c      	beq.n	800b300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d128      	bne.n	800b300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fc58 	bl	8009b68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4b0f      	ldr	r3, [pc, #60]	; (800b310 <xTaskPriorityDisinherit+0xd4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d903      	bls.n	800b2e0 <xTaskPriorityDisinherit+0xa4>
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	4a0c      	ldr	r2, [pc, #48]	; (800b310 <xTaskPriorityDisinherit+0xd4>)
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4a09      	ldr	r2, [pc, #36]	; (800b314 <xTaskPriorityDisinherit+0xd8>)
 800b2ee:	441a      	add	r2, r3
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7fe fbdb 	bl	8009ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b300:	697b      	ldr	r3, [r7, #20]
	}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200039dc 	.word	0x200039dc
 800b310:	20003eb8 	.word	0x20003eb8
 800b314:	200039e0 	.word	0x200039e0

0800b318 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b326:	f000 fe19 	bl	800bf5c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b32a:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b02      	cmp	r3, #2
 800b336:	d01a      	beq.n	800b36e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b338:	4b22      	ldr	r3, [pc, #136]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	43d2      	mvns	r2, r2
 800b342:	400a      	ands	r2, r1
 800b344:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b346:	4b1f      	ldr	r3, [pc, #124]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00b      	beq.n	800b36e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b356:	2101      	movs	r1, #1
 800b358:	6838      	ldr	r0, [r7, #0]
 800b35a:	f000 f9a5 	bl	800b6a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b35e:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <xTaskNotifyWait+0xb0>)
 800b360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b36e:	f000 fe25 	bl	800bfbc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b372:	f000 fdf3 	bl	800bf5c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b37c:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b02      	cmp	r3, #2
 800b392:	d002      	beq.n	800b39a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e008      	b.n	800b3ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	43d2      	mvns	r2, r2
 800b3a4:	400a      	ands	r2, r1
 800b3a6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <xTaskNotifyWait+0xac>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b3b6:	f000 fe01 	bl	800bfbc <vPortExitCritical>

		return xReturn;
 800b3ba:	697b      	ldr	r3, [r7, #20]
	}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	200039dc 	.word	0x200039dc
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08a      	sub	sp, #40	; 0x28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	603b      	str	r3, [r7, #0]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <xTaskGenericNotify+0x30>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	61bb      	str	r3, [r7, #24]
}
 800b3f8:	bf00      	nop
 800b3fa:	e7fe      	b.n	800b3fa <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b400:	f000 fdac 	bl	800bf5c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b418:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	2202      	movs	r2, #2
 800b41e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	2b04      	cmp	r3, #4
 800b426:	d828      	bhi.n	800b47a <xTaskGenericNotify+0xae>
 800b428:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <xTaskGenericNotify+0x64>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b47b 	.word	0x0800b47b
 800b434:	0800b445 	.word	0x0800b445
 800b438:	0800b453 	.word	0x0800b453
 800b43c:	0800b45f 	.word	0x0800b45f
 800b440:	0800b467 	.word	0x0800b467
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b450:	e013      	b.n	800b47a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b456:	1c5a      	adds	r2, r3, #1
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b45c:	e00d      	b.n	800b47a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b464:	e009      	b.n	800b47a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b466:	7ffb      	ldrb	r3, [r7, #31]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d003      	beq.n	800b474 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b472:	e001      	b.n	800b478 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800b474:	2300      	movs	r3, #0
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b478:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b47a:	7ffb      	ldrb	r3, [r7, #31]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d13a      	bne.n	800b4f6 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	3304      	adds	r3, #4
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fb6f 	bl	8009b68 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	4b1d      	ldr	r3, [pc, #116]	; (800b504 <xTaskGenericNotify+0x138>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	429a      	cmp	r2, r3
 800b494:	d903      	bls.n	800b49e <xTaskGenericNotify+0xd2>
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	4a1a      	ldr	r2, [pc, #104]	; (800b504 <xTaskGenericNotify+0x138>)
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4a17      	ldr	r2, [pc, #92]	; (800b508 <xTaskGenericNotify+0x13c>)
 800b4ac:	441a      	add	r2, r3
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	f7fe fafc 	bl	8009ab2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00a      	beq.n	800b4d8 <xTaskGenericNotify+0x10c>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	617b      	str	r3, [r7, #20]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <xTaskGenericNotify+0x140>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d907      	bls.n	800b4f6 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <xTaskGenericNotify+0x144>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4f6:	f000 fd61 	bl	800bfbc <vPortExitCritical>

		return xReturn;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3728      	adds	r7, #40	; 0x28
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20003eb8 	.word	0x20003eb8
 800b508:	200039e0 	.word	0x200039e0
 800b50c:	200039dc 	.word	0x200039dc
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08e      	sub	sp, #56	; 0x38
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	603b      	str	r3, [r7, #0]
 800b520:	4613      	mov	r3, r2
 800b522:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b524:	2301      	movs	r3, #1
 800b526:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b544:	f000 fdcc 	bl	800c0e0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b54c:	f3ef 8211 	mrs	r2, BASEPRI
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	623a      	str	r2, [r7, #32]
 800b562:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b564:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b566:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b57c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	2202      	movs	r2, #2
 800b584:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d828      	bhi.n	800b5e0 <xTaskGenericNotifyFromISR+0xcc>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <xTaskGenericNotifyFromISR+0x80>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5e1 	.word	0x0800b5e1
 800b598:	0800b5a9 	.word	0x0800b5a9
 800b59c:	0800b5b7 	.word	0x0800b5b7
 800b5a0:	0800b5c3 	.word	0x0800b5c3
 800b5a4:	0800b5cb 	.word	0x0800b5cb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b5b4:	e014      	b.n	800b5e0 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b5c0:	e00e      	b.n	800b5e0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b5c8:	e00a      	b.n	800b5e0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b5ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d003      	beq.n	800b5da <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b5d8:	e001      	b.n	800b5de <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b5de:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b5e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d147      	bne.n	800b678 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	61bb      	str	r3, [r7, #24]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b606:	4b22      	ldr	r3, [pc, #136]	; (800b690 <xTaskGenericNotifyFromISR+0x17c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d11d      	bne.n	800b64a <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	3304      	adds	r3, #4
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe faa8 	bl	8009b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61c:	4b1d      	ldr	r3, [pc, #116]	; (800b694 <xTaskGenericNotifyFromISR+0x180>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d903      	bls.n	800b62c <xTaskGenericNotifyFromISR+0x118>
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	4a1a      	ldr	r2, [pc, #104]	; (800b694 <xTaskGenericNotifyFromISR+0x180>)
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b630:	4613      	mov	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4a17      	ldr	r2, [pc, #92]	; (800b698 <xTaskGenericNotifyFromISR+0x184>)
 800b63a:	441a      	add	r2, r3
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	3304      	adds	r3, #4
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f7fe fa35 	bl	8009ab2 <vListInsertEnd>
 800b648:	e005      	b.n	800b656 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	3318      	adds	r3, #24
 800b64e:	4619      	mov	r1, r3
 800b650:	4812      	ldr	r0, [pc, #72]	; (800b69c <xTaskGenericNotifyFromISR+0x188>)
 800b652:	f7fe fa2e 	bl	8009ab2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65a:	4b11      	ldr	r3, [pc, #68]	; (800b6a0 <xTaskGenericNotifyFromISR+0x18c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	429a      	cmp	r2, r3
 800b662:	d909      	bls.n	800b678 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e002      	b.n	800b678 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b672:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <xTaskGenericNotifyFromISR+0x190>)
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f383 8811 	msr	BASEPRI, r3
}
 800b682:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b686:	4618      	mov	r0, r3
 800b688:	3738      	adds	r7, #56	; 0x38
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20003ed8 	.word	0x20003ed8
 800b694:	20003eb8 	.word	0x20003eb8
 800b698:	200039e0 	.word	0x200039e0
 800b69c:	20003e70 	.word	0x20003e70
 800b6a0:	200039dc 	.word	0x200039dc
 800b6a4:	20003ec4 	.word	0x20003ec4

0800b6a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6b8:	4b20      	ldr	r3, [pc, #128]	; (800b73c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fa52 	bl	8009b68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ca:	d10a      	bne.n	800b6e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d007      	beq.n	800b6e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6d2:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4819      	ldr	r0, [pc, #100]	; (800b740 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6dc:	f7fe f9e9 	bl	8009ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6e0:	e026      	b.n	800b730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6ea:	4b14      	ldr	r3, [pc, #80]	; (800b73c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d209      	bcs.n	800b70e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6fa:	4b12      	ldr	r3, [pc, #72]	; (800b744 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <prvAddCurrentTaskToDelayedList+0x94>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe f9f6 	bl	8009af8 <vListInsert>
}
 800b70c:	e010      	b.n	800b730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b70e:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <prvAddCurrentTaskToDelayedList+0x94>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3304      	adds	r3, #4
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f7fe f9ec 	bl	8009af8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b720:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	429a      	cmp	r2, r3
 800b728:	d202      	bcs.n	800b730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b72a:	4a08      	ldr	r2, [pc, #32]	; (800b74c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6013      	str	r3, [r2, #0]
}
 800b730:	bf00      	nop
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20003eb4 	.word	0x20003eb4
 800b73c:	200039dc 	.word	0x200039dc
 800b740:	20003e9c 	.word	0x20003e9c
 800b744:	20003e6c 	.word	0x20003e6c
 800b748:	20003e68 	.word	0x20003e68
 800b74c:	20003ed0 	.word	0x20003ed0

0800b750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b75a:	f000 facb 	bl	800bcf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b75e:	4b1c      	ldr	r3, [pc, #112]	; (800b7d0 <xTimerCreateTimerTask+0x80>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d021      	beq.n	800b7aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b76e:	1d3a      	adds	r2, r7, #4
 800b770:	f107 0108 	add.w	r1, r7, #8
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe f955 	bl	8009a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	9202      	str	r2, [sp, #8]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	2302      	movs	r3, #2
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	2300      	movs	r3, #0
 800b78e:	460a      	mov	r2, r1
 800b790:	4910      	ldr	r1, [pc, #64]	; (800b7d4 <xTimerCreateTimerTask+0x84>)
 800b792:	4811      	ldr	r0, [pc, #68]	; (800b7d8 <xTimerCreateTimerTask+0x88>)
 800b794:	f7fe fef6 	bl	800a584 <xTaskCreateStatic>
 800b798:	4603      	mov	r3, r0
 800b79a:	4a10      	ldr	r2, [pc, #64]	; (800b7dc <xTimerCreateTimerTask+0x8c>)
 800b79c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b79e:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <xTimerCreateTimerTask+0x8c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	613b      	str	r3, [r7, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7c6:	697b      	ldr	r3, [r7, #20]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20003f0c 	.word	0x20003f0c
 800b7d4:	0801b4ec 	.word	0x0801b4ec
 800b7d8:	0800b8fd 	.word	0x0800b8fd
 800b7dc:	20003f10 	.word	0x20003f10

0800b7e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10a      	bne.n	800b80e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	623b      	str	r3, [r7, #32]
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b80e:	4b1a      	ldr	r3, [pc, #104]	; (800b878 <xTimerGenericCommand+0x98>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d02a      	beq.n	800b86c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b05      	cmp	r3, #5
 800b826:	dc18      	bgt.n	800b85a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b828:	f7ff fcea 	bl	800b200 <xTaskGetSchedulerState>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d109      	bne.n	800b846 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <xTimerGenericCommand+0x98>)
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f107 0110 	add.w	r1, r7, #16
 800b83a:	2300      	movs	r3, #0
 800b83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83e:	f7fe fabf 	bl	8009dc0 <xQueueGenericSend>
 800b842:	6278      	str	r0, [r7, #36]	; 0x24
 800b844:	e012      	b.n	800b86c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b846:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <xTimerGenericCommand+0x98>)
 800b848:	6818      	ldr	r0, [r3, #0]
 800b84a:	f107 0110 	add.w	r1, r7, #16
 800b84e:	2300      	movs	r3, #0
 800b850:	2200      	movs	r2, #0
 800b852:	f7fe fab5 	bl	8009dc0 <xQueueGenericSend>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24
 800b858:	e008      	b.n	800b86c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b85a:	4b07      	ldr	r3, [pc, #28]	; (800b878 <xTimerGenericCommand+0x98>)
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f107 0110 	add.w	r1, r7, #16
 800b862:	2300      	movs	r3, #0
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	f7fe fba9 	bl	8009fbc <xQueueGenericSendFromISR>
 800b86a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3728      	adds	r7, #40	; 0x28
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20003f0c 	.word	0x20003f0c

0800b87c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af02      	add	r7, sp, #8
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b886:	4b1c      	ldr	r3, [pc, #112]	; (800b8f8 <prvProcessExpiredTimer+0x7c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	3304      	adds	r3, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe f967 	bl	8009b68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d122      	bne.n	800b8e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	18d1      	adds	r1, r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	6978      	ldr	r0, [r7, #20]
 800b8b0:	f000 f8c8 	bl	800ba44 <prvInsertTimerInActiveList>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d016      	beq.n	800b8e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6978      	ldr	r0, [r7, #20]
 800b8c6:	f7ff ff8b 	bl	800b7e0 <xTimerGenericCommand>
 800b8ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	60fb      	str	r3, [r7, #12]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	6978      	ldr	r0, [r7, #20]
 800b8ee:	4798      	blx	r3
}
 800b8f0:	bf00      	nop
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20003f04 	.word	0x20003f04

0800b8fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f857 	bl	800b9bc <prvGetNextExpireTime>
 800b90e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4619      	mov	r1, r3
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f803 	bl	800b920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b91a:	f000 f8d5 	bl	800bac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b91e:	e7f1      	b.n	800b904 <prvTimerTask+0x8>

0800b920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b92a:	f7ff f85d 	bl	800a9e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b92e:	f107 0308 	add.w	r3, r7, #8
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f866 	bl	800ba04 <prvSampleTimeNow>
 800b938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d130      	bne.n	800b9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <prvProcessTimerOrBlockTask+0x3c>
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d806      	bhi.n	800b95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b94e:	f7ff f859 	bl	800aa04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff ff91 	bl	800b87c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b95a:	e024      	b.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b962:	4b13      	ldr	r3, [pc, #76]	; (800b9b0 <prvProcessTimerOrBlockTask+0x90>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bf0c      	ite	eq
 800b96c:	2301      	moveq	r3, #1
 800b96e:	2300      	movne	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b974:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <prvProcessTimerOrBlockTask+0x94>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	f7fe fdcb 	bl	800a51c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b986:	f7ff f83d 	bl	800aa04 <xTaskResumeAll>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b990:	4b09      	ldr	r3, [pc, #36]	; (800b9b8 <prvProcessTimerOrBlockTask+0x98>)
 800b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	f3bf 8f6f 	isb	sy
}
 800b9a0:	e001      	b.n	800b9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9a2:	f7ff f82f 	bl	800aa04 <xTaskResumeAll>
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20003f08 	.word	0x20003f08
 800b9b4:	20003f0c 	.word	0x20003f0c
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <prvGetNextExpireTime+0x44>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bf0c      	ite	eq
 800b9ce:	2301      	moveq	r3, #1
 800b9d0:	2300      	movne	r3, #0
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d105      	bne.n	800b9ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvGetNextExpireTime+0x44>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	e001      	b.n	800b9f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bc80      	pop	{r7}
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20003f04 	.word	0x20003f04

0800ba04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba0c:	f7ff f898 	bl	800ab40 <xTaskGetTickCount>
 800ba10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <prvSampleTimeNow+0x3c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d205      	bcs.n	800ba28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba1c:	f000 f908 	bl	800bc30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	e002      	b.n	800ba2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba2e:	4a04      	ldr	r2, [pc, #16]	; (800ba40 <prvSampleTimeNow+0x3c>)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba34:	68fb      	ldr	r3, [r7, #12]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20003f14 	.word	0x20003f14

0800ba44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d812      	bhi.n	800ba90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d302      	bcc.n	800ba7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	e01b      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba7e:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <prvInsertTimerInActiveList+0x7c>)
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7fe f835 	bl	8009af8 <vListInsert>
 800ba8e:	e012      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d206      	bcs.n	800baa6 <prvInsertTimerInActiveList+0x62>
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d302      	bcc.n	800baa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e007      	b.n	800bab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800baa6:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <prvInsertTimerInActiveList+0x80>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f7fe f821 	bl	8009af8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bab6:	697b      	ldr	r3, [r7, #20]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20003f08 	.word	0x20003f08
 800bac4:	20003f04 	.word	0x20003f04

0800bac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08e      	sub	sp, #56	; 0x38
 800bacc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bace:	e09d      	b.n	800bc0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da18      	bge.n	800bb08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bad6:	1d3b      	adds	r3, r7, #4
 800bad8:	3304      	adds	r3, #4
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	61fb      	str	r3, [r7, #28]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bafe:	6850      	ldr	r0, [r2, #4]
 800bb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb02:	6892      	ldr	r2, [r2, #8]
 800bb04:	4611      	mov	r1, r2
 800bb06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	db7d      	blt.n	800bc0a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe f822 	bl	8009b68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb24:	463b      	mov	r3, r7
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff ff6c 	bl	800ba04 <prvSampleTimeNow>
 800bb2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	d86b      	bhi.n	800bc0c <prvProcessReceivedCommands+0x144>
 800bb34:	a201      	add	r2, pc, #4	; (adr r2, 800bb3c <prvProcessReceivedCommands+0x74>)
 800bb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3a:	bf00      	nop
 800bb3c:	0800bb65 	.word	0x0800bb65
 800bb40:	0800bb65 	.word	0x0800bb65
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bc0d 	.word	0x0800bc0d
 800bb4c:	0800bbc1 	.word	0x0800bbc1
 800bb50:	0800bbf9 	.word	0x0800bbf9
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb65 	.word	0x0800bb65
 800bb5c:	0800bc0d 	.word	0x0800bc0d
 800bb60:	0800bbc1 	.word	0x0800bbc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	18d1      	adds	r1, r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb72:	f7ff ff67 	bl	800ba44 <prvInsertTimerInActiveList>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d047      	beq.n	800bc0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	69db      	ldr	r3, [r3, #28]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d13f      	bne.n	800bc0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	441a      	add	r2, r3
 800bb94:	2300      	movs	r3, #0
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb9e:	f7ff fe1f 	bl	800b7e0 <xTimerGenericCommand>
 800bba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d130      	bne.n	800bc0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	61bb      	str	r3, [r7, #24]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	617b      	str	r3, [r7, #20]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	699a      	ldr	r2, [r3, #24]
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	18d1      	adds	r1, r2, r3
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf2:	f7ff ff27 	bl	800ba44 <prvInsertTimerInActiveList>
					break;
 800bbf6:	e009      	b.n	800bc0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d104      	bne.n	800bc0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bc02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc04:	f000 fb6e 	bl	800c2e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc08:	e000      	b.n	800bc0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <prvProcessReceivedCommands+0x164>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	1d39      	adds	r1, r7, #4
 800bc12:	2200      	movs	r2, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fa69 	bl	800a0ec <xQueueReceive>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f af57 	bne.w	800bad0 <prvProcessReceivedCommands+0x8>
	}
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	3730      	adds	r7, #48	; 0x30
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20003f0c 	.word	0x20003f0c

0800bc30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc36:	e045      	b.n	800bcc4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc38:	4b2c      	ldr	r3, [pc, #176]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc42:	4b2a      	ldr	r3, [pc, #168]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fd ff89 	bl	8009b68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	69db      	ldr	r3, [r3, #28]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d12e      	bne.n	800bcc4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d90e      	bls.n	800bc96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc84:	4b19      	ldr	r3, [pc, #100]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f7fd ff32 	bl	8009af8 <vListInsert>
 800bc94:	e016      	b.n	800bcc4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc96:	2300      	movs	r3, #0
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	2100      	movs	r1, #0
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f7ff fd9d 	bl	800b7e0 <xTimerGenericCommand>
 800bca6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	603b      	str	r3, [r7, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1b4      	bne.n	800bc38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a04      	ldr	r2, [pc, #16]	; (800bcec <prvSwitchTimerLists+0xbc>)
 800bcda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcdc:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <prvSwitchTimerLists+0xc0>)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	6013      	str	r3, [r2, #0]
}
 800bce2:	bf00      	nop
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20003f04 	.word	0x20003f04
 800bcf0:	20003f08 	.word	0x20003f08

0800bcf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bcfa:	f000 f92f 	bl	800bf5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcfe:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d120      	bne.n	800bd48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd06:	4814      	ldr	r0, [pc, #80]	; (800bd58 <prvCheckForValidListAndQueue+0x64>)
 800bd08:	f7fd fea8 	bl	8009a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd0c:	4813      	ldr	r0, [pc, #76]	; (800bd5c <prvCheckForValidListAndQueue+0x68>)
 800bd0e:	f7fd fea5 	bl	8009a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd12:	4b13      	ldr	r3, [pc, #76]	; (800bd60 <prvCheckForValidListAndQueue+0x6c>)
 800bd14:	4a10      	ldr	r2, [pc, #64]	; (800bd58 <prvCheckForValidListAndQueue+0x64>)
 800bd16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd18:	4b12      	ldr	r3, [pc, #72]	; (800bd64 <prvCheckForValidListAndQueue+0x70>)
 800bd1a:	4a10      	ldr	r2, [pc, #64]	; (800bd5c <prvCheckForValidListAndQueue+0x68>)
 800bd1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <prvCheckForValidListAndQueue+0x74>)
 800bd24:	4a11      	ldr	r2, [pc, #68]	; (800bd6c <prvCheckForValidListAndQueue+0x78>)
 800bd26:	2110      	movs	r1, #16
 800bd28:	200a      	movs	r0, #10
 800bd2a:	f7fd ffaf 	bl	8009c8c <xQueueGenericCreateStatic>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	4a08      	ldr	r2, [pc, #32]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <prvCheckForValidListAndQueue+0x60>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	490b      	ldr	r1, [pc, #44]	; (800bd70 <prvCheckForValidListAndQueue+0x7c>)
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fbc2 	bl	800a4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd48:	f000 f938 	bl	800bfbc <vPortExitCritical>
}
 800bd4c:	bf00      	nop
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	20003f0c 	.word	0x20003f0c
 800bd58:	20003edc 	.word	0x20003edc
 800bd5c:	20003ef0 	.word	0x20003ef0
 800bd60:	20003f04 	.word	0x20003f04
 800bd64:	20003f08 	.word	0x20003f08
 800bd68:	20003fb8 	.word	0x20003fb8
 800bd6c:	20003f18 	.word	0x20003f18
 800bd70:	0801b4f4 	.word	0x0801b4f4

0800bd74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3b04      	subs	r3, #4
 800bd84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3b04      	subs	r3, #4
 800bd92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f023 0201 	bic.w	r2, r3, #1
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3b04      	subs	r3, #4
 800bda2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bda4:	4a08      	ldr	r2, [pc, #32]	; (800bdc8 <pxPortInitialiseStack+0x54>)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3b14      	subs	r3, #20
 800bdae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3b20      	subs	r3, #32
 800bdba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bc80      	pop	{r7}
 800bdc6:	4770      	bx	lr
 800bdc8:	0800bdcd 	.word	0x0800bdcd

0800bdcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdd6:	4b12      	ldr	r3, [pc, #72]	; (800be20 <prvTaskExitError+0x54>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdde:	d00a      	beq.n	800bdf6 <prvTaskExitError+0x2a>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	60fb      	str	r3, [r7, #12]
}
 800bdf2:	bf00      	nop
 800bdf4:	e7fe      	b.n	800bdf4 <prvTaskExitError+0x28>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	60bb      	str	r3, [r7, #8]
}
 800be08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be0a:	bf00      	nop
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d0fc      	beq.n	800be0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	bc80      	pop	{r7}
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20000014 	.word	0x20000014
	...

0800be30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be30:	4b07      	ldr	r3, [pc, #28]	; (800be50 <pxCurrentTCBConst2>)
 800be32:	6819      	ldr	r1, [r3, #0]
 800be34:	6808      	ldr	r0, [r1, #0]
 800be36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be3a:	f380 8809 	msr	PSP, r0
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f04f 0000 	mov.w	r0, #0
 800be46:	f380 8811 	msr	BASEPRI, r0
 800be4a:	f04e 0e0d 	orr.w	lr, lr, #13
 800be4e:	4770      	bx	lr

0800be50 <pxCurrentTCBConst2>:
 800be50:	200039dc 	.word	0x200039dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop

0800be58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800be58:	4806      	ldr	r0, [pc, #24]	; (800be74 <prvPortStartFirstTask+0x1c>)
 800be5a:	6800      	ldr	r0, [r0, #0]
 800be5c:	6800      	ldr	r0, [r0, #0]
 800be5e:	f380 8808 	msr	MSP, r0
 800be62:	b662      	cpsie	i
 800be64:	b661      	cpsie	f
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	df00      	svc	0
 800be70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be72:	bf00      	nop
 800be74:	e000ed08 	.word	0xe000ed08

0800be78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be7e:	4b32      	ldr	r3, [pc, #200]	; (800bf48 <xPortStartScheduler+0xd0>)
 800be80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	22ff      	movs	r2, #255	; 0xff
 800be8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <xPortStartScheduler+0xd4>)
 800bea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bea6:	4b2a      	ldr	r3, [pc, #168]	; (800bf50 <xPortStartScheduler+0xd8>)
 800bea8:	2207      	movs	r2, #7
 800beaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800beac:	e009      	b.n	800bec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800beae:	4b28      	ldr	r3, [pc, #160]	; (800bf50 <xPortStartScheduler+0xd8>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	4a26      	ldr	r2, [pc, #152]	; (800bf50 <xPortStartScheduler+0xd8>)
 800beb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beca:	2b80      	cmp	r3, #128	; 0x80
 800becc:	d0ef      	beq.n	800beae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bece:	4b20      	ldr	r3, [pc, #128]	; (800bf50 <xPortStartScheduler+0xd8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f1c3 0307 	rsb	r3, r3, #7
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d00a      	beq.n	800bef0 <xPortStartScheduler+0x78>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	60bb      	str	r3, [r7, #8]
}
 800beec:	bf00      	nop
 800beee:	e7fe      	b.n	800beee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bef0:	4b17      	ldr	r3, [pc, #92]	; (800bf50 <xPortStartScheduler+0xd8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	4a16      	ldr	r2, [pc, #88]	; (800bf50 <xPortStartScheduler+0xd8>)
 800bef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800befa:	4b15      	ldr	r3, [pc, #84]	; (800bf50 <xPortStartScheduler+0xd8>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf02:	4a13      	ldr	r2, [pc, #76]	; (800bf50 <xPortStartScheduler+0xd8>)
 800bf04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf0e:	4b11      	ldr	r3, [pc, #68]	; (800bf54 <xPortStartScheduler+0xdc>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a10      	ldr	r2, [pc, #64]	; (800bf54 <xPortStartScheduler+0xdc>)
 800bf14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf1a:	4b0e      	ldr	r3, [pc, #56]	; (800bf54 <xPortStartScheduler+0xdc>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a0d      	ldr	r2, [pc, #52]	; (800bf54 <xPortStartScheduler+0xdc>)
 800bf20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf26:	f000 f8b9 	bl	800c09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <xPortStartScheduler+0xe0>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf30:	f7ff ff92 	bl	800be58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf34:	f7fe fed0 	bl	800acd8 <vTaskSwitchContext>
	prvTaskExitError();
 800bf38:	f7ff ff48 	bl	800bdcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	e000e400 	.word	0xe000e400
 800bf4c:	20004008 	.word	0x20004008
 800bf50:	2000400c 	.word	0x2000400c
 800bf54:	e000ed20 	.word	0xe000ed20
 800bf58:	20000014 	.word	0x20000014

0800bf5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	607b      	str	r3, [r7, #4]
}
 800bf74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <vPortEnterCritical+0x58>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	4a0d      	ldr	r2, [pc, #52]	; (800bfb4 <vPortEnterCritical+0x58>)
 800bf7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <vPortEnterCritical+0x58>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d10f      	bne.n	800bfa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf88:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <vPortEnterCritical+0x5c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	603b      	str	r3, [r7, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <vPortEnterCritical+0x4a>
	}
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bc80      	pop	{r7}
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20000014 	.word	0x20000014
 800bfb8:	e000ed04 	.word	0xe000ed04

0800bfbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfc2:	4b11      	ldr	r3, [pc, #68]	; (800c008 <vPortExitCritical+0x4c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <vPortExitCritical+0x24>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	607b      	str	r3, [r7, #4]
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <vPortExitCritical+0x4c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4a08      	ldr	r2, [pc, #32]	; (800c008 <vPortExitCritical+0x4c>)
 800bfe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <vPortExitCritical+0x4c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d105      	bne.n	800bffe <vPortExitCritical+0x42>
 800bff2:	2300      	movs	r3, #0
 800bff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	f383 8811 	msr	BASEPRI, r3
}
 800bffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	bc80      	pop	{r7}
 800c006:	4770      	bx	lr
 800c008:	20000014 	.word	0x20000014
 800c00c:	00000000 	.word	0x00000000

0800c010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c010:	f3ef 8009 	mrs	r0, PSP
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <pxCurrentTCBConst>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c020:	6010      	str	r0, [r2, #0]
 800c022:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c02a:	f380 8811 	msr	BASEPRI, r0
 800c02e:	f7fe fe53 	bl	800acd8 <vTaskSwitchContext>
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c03e:	6819      	ldr	r1, [r3, #0]
 800c040:	6808      	ldr	r0, [r1, #0]
 800c042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c046:	f380 8809 	msr	PSP, r0
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	4770      	bx	lr

0800c050 <pxCurrentTCBConst>:
 800c050:	200039dc 	.word	0x200039dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop

0800c058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
}
 800c070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c072:	f7fe fd73 	bl	800ab5c <xTaskIncrementTick>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c07c:	4b06      	ldr	r3, [pc, #24]	; (800c098 <SysTick_Handler+0x40>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f383 8811 	msr	BASEPRI, r3
}
 800c08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0a0:	4b0a      	ldr	r3, [pc, #40]	; (800c0cc <vPortSetupTimerInterrupt+0x30>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0a6:	4b0a      	ldr	r3, [pc, #40]	; (800c0d0 <vPortSetupTimerInterrupt+0x34>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0ac:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <vPortSetupTimerInterrupt+0x38>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a09      	ldr	r2, [pc, #36]	; (800c0d8 <vPortSetupTimerInterrupt+0x3c>)
 800c0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b6:	099b      	lsrs	r3, r3, #6
 800c0b8:	4a08      	ldr	r2, [pc, #32]	; (800c0dc <vPortSetupTimerInterrupt+0x40>)
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0be:	4b03      	ldr	r3, [pc, #12]	; (800c0cc <vPortSetupTimerInterrupt+0x30>)
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bc80      	pop	{r7}
 800c0ca:	4770      	bx	lr
 800c0cc:	e000e010 	.word	0xe000e010
 800c0d0:	e000e018 	.word	0xe000e018
 800c0d4:	20000008 	.word	0x20000008
 800c0d8:	10624dd3 	.word	0x10624dd3
 800c0dc:	e000e014 	.word	0xe000e014

0800c0e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0e6:	f3ef 8305 	mrs	r3, IPSR
 800c0ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b0f      	cmp	r3, #15
 800c0f0:	d914      	bls.n	800c11c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0f2:	4a16      	ldr	r2, [pc, #88]	; (800c14c <vPortValidateInterruptPriority+0x6c>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0fc:	4b14      	ldr	r3, [pc, #80]	; (800c150 <vPortValidateInterruptPriority+0x70>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	7afa      	ldrb	r2, [r7, #11]
 800c102:	429a      	cmp	r2, r3
 800c104:	d20a      	bcs.n	800c11c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	607b      	str	r3, [r7, #4]
}
 800c118:	bf00      	nop
 800c11a:	e7fe      	b.n	800c11a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c11c:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <vPortValidateInterruptPriority+0x74>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c124:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <vPortValidateInterruptPriority+0x78>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d90a      	bls.n	800c142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	603b      	str	r3, [r7, #0]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <vPortValidateInterruptPriority+0x60>
	}
 800c142:	bf00      	nop
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	bc80      	pop	{r7}
 800c14a:	4770      	bx	lr
 800c14c:	e000e3f0 	.word	0xe000e3f0
 800c150:	20004008 	.word	0x20004008
 800c154:	e000ed0c 	.word	0xe000ed0c
 800c158:	2000400c 	.word	0x2000400c

0800c15c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08a      	sub	sp, #40	; 0x28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c164:	2300      	movs	r3, #0
 800c166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c168:	f7fe fc3e 	bl	800a9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c16c:	4b58      	ldr	r3, [pc, #352]	; (800c2d0 <pvPortMalloc+0x174>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c174:	f000 f910 	bl	800c398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c178:	4b56      	ldr	r3, [pc, #344]	; (800c2d4 <pvPortMalloc+0x178>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4013      	ands	r3, r2
 800c180:	2b00      	cmp	r3, #0
 800c182:	f040 808e 	bne.w	800c2a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01d      	beq.n	800c1c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c18c:	2208      	movs	r2, #8
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4413      	add	r3, r2
 800c192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f003 0307 	and.w	r3, r3, #7
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d014      	beq.n	800c1c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f023 0307 	bic.w	r3, r3, #7
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f003 0307 	and.w	r3, r3, #7
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <pvPortMalloc+0x6c>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	617b      	str	r3, [r7, #20]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d069      	beq.n	800c2a2 <pvPortMalloc+0x146>
 800c1ce:	4b42      	ldr	r3, [pc, #264]	; (800c2d8 <pvPortMalloc+0x17c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d864      	bhi.n	800c2a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1d8:	4b40      	ldr	r3, [pc, #256]	; (800c2dc <pvPortMalloc+0x180>)
 800c1da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1dc:	4b3f      	ldr	r3, [pc, #252]	; (800c2dc <pvPortMalloc+0x180>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1e2:	e004      	b.n	800c1ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d903      	bls.n	800c200 <pvPortMalloc+0xa4>
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1f1      	bne.n	800c1e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c200:	4b33      	ldr	r3, [pc, #204]	; (800c2d0 <pvPortMalloc+0x174>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c206:	429a      	cmp	r2, r3
 800c208:	d04b      	beq.n	800c2a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2208      	movs	r2, #8
 800c210:	4413      	add	r3, r2
 800c212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	1ad2      	subs	r2, r2, r3
 800c224:	2308      	movs	r3, #8
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	429a      	cmp	r2, r3
 800c22a:	d91f      	bls.n	800c26c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4413      	add	r3, r2
 800c232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00a      	beq.n	800c254 <pvPortMalloc+0xf8>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	613b      	str	r3, [r7, #16]
}
 800c250:	bf00      	nop
 800c252:	e7fe      	b.n	800c252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	685a      	ldr	r2, [r3, #4]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	1ad2      	subs	r2, r2, r3
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c266:	69b8      	ldr	r0, [r7, #24]
 800c268:	f000 f8f8 	bl	800c45c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c26c:	4b1a      	ldr	r3, [pc, #104]	; (800c2d8 <pvPortMalloc+0x17c>)
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	4a18      	ldr	r2, [pc, #96]	; (800c2d8 <pvPortMalloc+0x17c>)
 800c278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c27a:	4b17      	ldr	r3, [pc, #92]	; (800c2d8 <pvPortMalloc+0x17c>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b18      	ldr	r3, [pc, #96]	; (800c2e0 <pvPortMalloc+0x184>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d203      	bcs.n	800c28e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c286:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <pvPortMalloc+0x17c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a15      	ldr	r2, [pc, #84]	; (800c2e0 <pvPortMalloc+0x184>)
 800c28c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	4b10      	ldr	r3, [pc, #64]	; (800c2d4 <pvPortMalloc+0x178>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	431a      	orrs	r2, r3
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2a2:	f7fe fbaf 	bl	800aa04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	f003 0307 	and.w	r3, r3, #7
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00a      	beq.n	800c2c6 <pvPortMalloc+0x16a>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60fb      	str	r3, [r7, #12]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <pvPortMalloc+0x168>
	return pvReturn;
 800c2c6:	69fb      	ldr	r3, [r7, #28]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3728      	adds	r7, #40	; 0x28
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20006728 	.word	0x20006728
 800c2d4:	20006734 	.word	0x20006734
 800c2d8:	2000672c 	.word	0x2000672c
 800c2dc:	20006720 	.word	0x20006720
 800c2e0:	20006730 	.word	0x20006730

0800c2e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d048      	beq.n	800c388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2f6:	2308      	movs	r3, #8
 800c2f8:	425b      	negs	r3, r3
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	4b21      	ldr	r3, [pc, #132]	; (800c390 <vPortFree+0xac>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4013      	ands	r3, r2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10a      	bne.n	800c328 <vPortFree+0x44>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60fb      	str	r3, [r7, #12]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00a      	beq.n	800c346 <vPortFree+0x62>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60bb      	str	r3, [r7, #8]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	4b11      	ldr	r3, [pc, #68]	; (800c390 <vPortFree+0xac>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4013      	ands	r3, r2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d019      	beq.n	800c388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d115      	bne.n	800c388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <vPortFree+0xac>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	43db      	mvns	r3, r3
 800c366:	401a      	ands	r2, r3
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c36c:	f7fe fb3c 	bl	800a9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <vPortFree+0xb0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4413      	add	r3, r2
 800c37a:	4a06      	ldr	r2, [pc, #24]	; (800c394 <vPortFree+0xb0>)
 800c37c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c37e:	6938      	ldr	r0, [r7, #16]
 800c380:	f000 f86c 	bl	800c45c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c384:	f7fe fb3e 	bl	800aa04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c388:	bf00      	nop
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20006734 	.word	0x20006734
 800c394:	2000672c 	.word	0x2000672c

0800c398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c39e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c3a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3a4:	4b27      	ldr	r3, [pc, #156]	; (800c444 <prvHeapInit+0xac>)
 800c3a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f003 0307 	and.w	r3, r3, #7
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00c      	beq.n	800c3cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3307      	adds	r3, #7
 800c3b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0307 	bic.w	r3, r3, #7
 800c3be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	4a1f      	ldr	r2, [pc, #124]	; (800c444 <prvHeapInit+0xac>)
 800c3c8:	4413      	add	r3, r2
 800c3ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3d0:	4a1d      	ldr	r2, [pc, #116]	; (800c448 <prvHeapInit+0xb0>)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3d6:	4b1c      	ldr	r3, [pc, #112]	; (800c448 <prvHeapInit+0xb0>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	1a9b      	subs	r3, r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f023 0307 	bic.w	r3, r3, #7
 800c3f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	4a15      	ldr	r2, [pc, #84]	; (800c44c <prvHeapInit+0xb4>)
 800c3f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3fa:	4b14      	ldr	r3, [pc, #80]	; (800c44c <prvHeapInit+0xb4>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2200      	movs	r2, #0
 800c400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <prvHeapInit+0xb4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c418:	4b0c      	ldr	r3, [pc, #48]	; (800c44c <prvHeapInit+0xb4>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <prvHeapInit+0xb8>)
 800c426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	4a09      	ldr	r2, [pc, #36]	; (800c454 <prvHeapInit+0xbc>)
 800c42e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c430:	4b09      	ldr	r3, [pc, #36]	; (800c458 <prvHeapInit+0xc0>)
 800c432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c436:	601a      	str	r2, [r3, #0]
}
 800c438:	bf00      	nop
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bc80      	pop	{r7}
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20004010 	.word	0x20004010
 800c448:	20006720 	.word	0x20006720
 800c44c:	20006728 	.word	0x20006728
 800c450:	20006730 	.word	0x20006730
 800c454:	2000672c 	.word	0x2000672c
 800c458:	20006734 	.word	0x20006734

0800c45c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c464:	4b27      	ldr	r3, [pc, #156]	; (800c504 <prvInsertBlockIntoFreeList+0xa8>)
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e002      	b.n	800c470 <prvInsertBlockIntoFreeList+0x14>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	429a      	cmp	r2, r3
 800c478:	d8f7      	bhi.n	800c46a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	4413      	add	r3, r2
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d108      	bne.n	800c49e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	685a      	ldr	r2, [r3, #4]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	441a      	add	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	441a      	add	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d118      	bne.n	800c4e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	4b14      	ldr	r3, [pc, #80]	; (800c508 <prvInsertBlockIntoFreeList+0xac>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d00d      	beq.n	800c4da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	441a      	add	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	e008      	b.n	800c4ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4da:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <prvInsertBlockIntoFreeList+0xac>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	e003      	b.n	800c4ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d002      	beq.n	800c4fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bc80      	pop	{r7}
 800c502:	4770      	bx	lr
 800c504:	20006720 	.word	0x20006720
 800c508:	20006728 	.word	0x20006728

0800c50c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c50c:	f000 b86c 	b.w	800c5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

0800c510 <get_serialized_size_geometry_msgs__msg__Twist>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	4604      	mov	r4, r0
 800c514:	b148      	cbz	r0, 800c52a <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800c516:	460d      	mov	r5, r1
 800c518:	f000 f86a 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c51c:	4606      	mov	r6, r0
 800c51e:	f104 0018 	add.w	r0, r4, #24
 800c522:	19a9      	adds	r1, r5, r6
 800c524:	f000 f864 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c528:	4430      	add	r0, r6
 800c52a:	bd70      	pop	{r4, r5, r6, pc}

0800c52c <_Twist__cdr_deserialize>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	460c      	mov	r4, r1
 800c530:	b189      	cbz	r1, 800c556 <_Twist__cdr_deserialize+0x2a>
 800c532:	4605      	mov	r5, r0
 800c534:	f000 f8e8 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c538:	6843      	ldr	r3, [r0, #4]
 800c53a:	4621      	mov	r1, r4
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	4628      	mov	r0, r5
 800c540:	4798      	blx	r3
 800c542:	f000 f8e1 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c546:	6843      	ldr	r3, [r0, #4]
 800c548:	f104 0118 	add.w	r1, r4, #24
 800c54c:	4628      	mov	r0, r5
 800c54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	4718      	bx	r3
 800c556:	4608      	mov	r0, r1
 800c558:	bd70      	pop	{r4, r5, r6, pc}
 800c55a:	bf00      	nop

0800c55c <_Twist__cdr_serialize>:
 800c55c:	b198      	cbz	r0, 800c586 <_Twist__cdr_serialize+0x2a>
 800c55e:	b570      	push	{r4, r5, r6, lr}
 800c560:	460d      	mov	r5, r1
 800c562:	4604      	mov	r4, r0
 800c564:	f000 f8d0 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c568:	6843      	ldr	r3, [r0, #4]
 800c56a:	4629      	mov	r1, r5
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	4620      	mov	r0, r4
 800c570:	4798      	blx	r3
 800c572:	f000 f8c9 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c576:	6843      	ldr	r3, [r0, #4]
 800c578:	4629      	mov	r1, r5
 800c57a:	f104 0018 	add.w	r0, r4, #24
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c584:	4718      	bx	r3
 800c586:	4770      	bx	lr

0800c588 <_Twist__get_serialized_size>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4604      	mov	r4, r0
 800c58c:	b148      	cbz	r0, 800c5a2 <_Twist__get_serialized_size+0x1a>
 800c58e:	2100      	movs	r1, #0
 800c590:	f000 f82e 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c594:	4605      	mov	r5, r0
 800c596:	f104 0018 	add.w	r0, r4, #24
 800c59a:	4629      	mov	r1, r5
 800c59c:	f000 f828 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c5a0:	4428      	add	r0, r5
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}

0800c5a4 <_Twist__max_serialized_size>:
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	b510      	push	{r4, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f10d 0007 	add.w	r0, sp, #7
 800c5b0:	f88d 3007 	strb.w	r3, [sp, #7]
 800c5b4:	f000 f88c 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	f10d 0007 	add.w	r0, sp, #7
 800c5be:	4621      	mov	r1, r4
 800c5c0:	f000 f886 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5c4:	4420      	add	r0, r4
 800c5c6:	b002      	add	sp, #8
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	bf00      	nop

0800c5cc <max_serialized_size_geometry_msgs__msg__Twist>:
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	b570      	push	{r4, r5, r6, lr}
 800c5d0:	7003      	strb	r3, [r0, #0]
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	460e      	mov	r6, r1
 800c5d6:	f000 f87b 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	4628      	mov	r0, r5
 800c5de:	1931      	adds	r1, r6, r4
 800c5e0:	f000 f876 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c5e4:	4420      	add	r0, r4
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}

0800c5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c5e8:	4800      	ldr	r0, [pc, #0]	; (800c5ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800c5ea:	4770      	bx	lr
 800c5ec:	20000018 	.word	0x20000018

0800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c5f0:	b1b8      	cbz	r0, 800c622 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c5f2:	b538      	push	{r3, r4, r5, lr}
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	2108      	movs	r1, #8
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	f001 fcfd 	bl	800dff8 <ucdr_alignment>
 800c5fe:	f105 0408 	add.w	r4, r5, #8
 800c602:	4404      	add	r4, r0
 800c604:	4620      	mov	r0, r4
 800c606:	2108      	movs	r1, #8
 800c608:	f001 fcf6 	bl	800dff8 <ucdr_alignment>
 800c60c:	3008      	adds	r0, #8
 800c60e:	4404      	add	r4, r0
 800c610:	4620      	mov	r0, r4
 800c612:	2108      	movs	r1, #8
 800c614:	f001 fcf0 	bl	800dff8 <ucdr_alignment>
 800c618:	f1c5 0508 	rsb	r5, r5, #8
 800c61c:	4428      	add	r0, r5
 800c61e:	4420      	add	r0, r4
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	4770      	bx	lr

0800c624 <_Vector3__cdr_deserialize>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	b171      	cbz	r1, 800c648 <_Vector3__cdr_deserialize+0x24>
 800c62a:	4605      	mov	r5, r0
 800c62c:	f001 faf6 	bl	800dc1c <ucdr_deserialize_double>
 800c630:	f104 0108 	add.w	r1, r4, #8
 800c634:	4628      	mov	r0, r5
 800c636:	f001 faf1 	bl	800dc1c <ucdr_deserialize_double>
 800c63a:	4628      	mov	r0, r5
 800c63c:	f104 0110 	add.w	r1, r4, #16
 800c640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c644:	f001 baea 	b.w	800dc1c <ucdr_deserialize_double>
 800c648:	4608      	mov	r0, r1
 800c64a:	bd38      	pop	{r3, r4, r5, pc}

0800c64c <_Vector3__cdr_serialize>:
 800c64c:	b198      	cbz	r0, 800c676 <_Vector3__cdr_serialize+0x2a>
 800c64e:	e9d0 2300 	ldrd	r2, r3, [r0]
 800c652:	b570      	push	{r4, r5, r6, lr}
 800c654:	460d      	mov	r5, r1
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	f001 f93d 	bl	800d8d8 <ucdr_serialize_double>
 800c65e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800c662:	4628      	mov	r0, r5
 800c664:	f001 f938 	bl	800d8d8 <ucdr_serialize_double>
 800c668:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800c66c:	4628      	mov	r0, r5
 800c66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c672:	f001 b931 	b.w	800d8d8 <ucdr_serialize_double>
 800c676:	4770      	bx	lr

0800c678 <_Vector3__get_serialized_size>:
 800c678:	b198      	cbz	r0, 800c6a2 <_Vector3__get_serialized_size+0x2a>
 800c67a:	b510      	push	{r4, lr}
 800c67c:	2108      	movs	r1, #8
 800c67e:	2000      	movs	r0, #0
 800c680:	f001 fcba 	bl	800dff8 <ucdr_alignment>
 800c684:	f100 0408 	add.w	r4, r0, #8
 800c688:	4620      	mov	r0, r4
 800c68a:	2108      	movs	r1, #8
 800c68c:	f001 fcb4 	bl	800dff8 <ucdr_alignment>
 800c690:	3008      	adds	r0, #8
 800c692:	4404      	add	r4, r0
 800c694:	4620      	mov	r0, r4
 800c696:	2108      	movs	r1, #8
 800c698:	f001 fcae 	bl	800dff8 <ucdr_alignment>
 800c69c:	3008      	adds	r0, #8
 800c69e:	4420      	add	r0, r4
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	4770      	bx	lr

0800c6a4 <_Vector3__max_serialized_size>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	2108      	movs	r1, #8
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f001 fca5 	bl	800dff8 <ucdr_alignment>
 800c6ae:	f100 0508 	add.w	r5, r0, #8
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	2108      	movs	r1, #8
 800c6b6:	f001 fc9f 	bl	800dff8 <ucdr_alignment>
 800c6ba:	f100 0408 	add.w	r4, r0, #8
 800c6be:	442c      	add	r4, r5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	2108      	movs	r1, #8
 800c6c4:	f001 fc98 	bl	800dff8 <ucdr_alignment>
 800c6c8:	3008      	adds	r0, #8
 800c6ca:	4420      	add	r0, r4
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop

0800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	701a      	strb	r2, [r3, #0]
 800c6da:	460c      	mov	r4, r1
 800c6dc:	2108      	movs	r1, #8
 800c6de:	f001 fc8b 	bl	800dff8 <ucdr_alignment>
 800c6e2:	f104 0508 	add.w	r5, r4, #8
 800c6e6:	1946      	adds	r6, r0, r5
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	2108      	movs	r1, #8
 800c6ec:	f001 fc84 	bl	800dff8 <ucdr_alignment>
 800c6f0:	f100 0508 	add.w	r5, r0, #8
 800c6f4:	4435      	add	r5, r6
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	2108      	movs	r1, #8
 800c6fa:	f001 fc7d 	bl	800dff8 <ucdr_alignment>
 800c6fe:	f1c4 0408 	rsb	r4, r4, #8
 800c702:	4420      	add	r0, r4
 800c704:	4428      	add	r0, r5
 800c706:	bd70      	pop	{r4, r5, r6, pc}

0800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c708:	4800      	ldr	r0, [pc, #0]	; (800c70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c70a:	4770      	bx	lr
 800c70c:	20000040 	.word	0x20000040

0800c710 <ucdr_serialize_bool>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	460d      	mov	r5, r1
 800c714:	2101      	movs	r1, #1
 800c716:	4604      	mov	r4, r0
 800c718:	f001 fc24 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c71c:	b148      	cbz	r0, 800c732 <ucdr_serialize_bool+0x22>
 800c71e:	2101      	movs	r1, #1
 800c720:	68a3      	ldr	r3, [r4, #8]
 800c722:	701d      	strb	r5, [r3, #0]
 800c724:	68a2      	ldr	r2, [r4, #8]
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	440a      	add	r2, r1
 800c72a:	440b      	add	r3, r1
 800c72c:	60a2      	str	r2, [r4, #8]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	7561      	strb	r1, [r4, #21]
 800c732:	7da0      	ldrb	r0, [r4, #22]
 800c734:	f080 0001 	eor.w	r0, r0, #1
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop

0800c73c <ucdr_deserialize_bool>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	460d      	mov	r5, r1
 800c740:	2101      	movs	r1, #1
 800c742:	4604      	mov	r4, r0
 800c744:	f001 fc0e 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c748:	b160      	cbz	r0, 800c764 <ucdr_deserialize_bool+0x28>
 800c74a:	68a2      	ldr	r2, [r4, #8]
 800c74c:	2001      	movs	r0, #1
 800c74e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	3900      	subs	r1, #0
 800c756:	bf18      	it	ne
 800c758:	2101      	movne	r1, #1
 800c75a:	4403      	add	r3, r0
 800c75c:	7029      	strb	r1, [r5, #0]
 800c75e:	60a2      	str	r2, [r4, #8]
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	7560      	strb	r0, [r4, #21]
 800c764:	7da0      	ldrb	r0, [r4, #22]
 800c766:	f080 0001 	eor.w	r0, r0, #1
 800c76a:	bd38      	pop	{r3, r4, r5, pc}

0800c76c <ucdr_serialize_uint8_t>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	460d      	mov	r5, r1
 800c770:	2101      	movs	r1, #1
 800c772:	4604      	mov	r4, r0
 800c774:	f001 fbf6 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c778:	b148      	cbz	r0, 800c78e <ucdr_serialize_uint8_t+0x22>
 800c77a:	2101      	movs	r1, #1
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	701d      	strb	r5, [r3, #0]
 800c780:	68a2      	ldr	r2, [r4, #8]
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	440a      	add	r2, r1
 800c786:	440b      	add	r3, r1
 800c788:	60a2      	str	r2, [r4, #8]
 800c78a:	6123      	str	r3, [r4, #16]
 800c78c:	7561      	strb	r1, [r4, #21]
 800c78e:	7da0      	ldrb	r0, [r4, #22]
 800c790:	f080 0001 	eor.w	r0, r0, #1
 800c794:	bd38      	pop	{r3, r4, r5, pc}
 800c796:	bf00      	nop

0800c798 <ucdr_deserialize_uint8_t>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	460d      	mov	r5, r1
 800c79c:	2101      	movs	r1, #1
 800c79e:	4604      	mov	r4, r0
 800c7a0:	f001 fbe0 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c7a4:	b150      	cbz	r0, 800c7bc <ucdr_deserialize_uint8_t+0x24>
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	702b      	strb	r3, [r5, #0]
 800c7ae:	68a2      	ldr	r2, [r4, #8]
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	440a      	add	r2, r1
 800c7b4:	440b      	add	r3, r1
 800c7b6:	60a2      	str	r2, [r4, #8]
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	7561      	strb	r1, [r4, #21]
 800c7bc:	7da0      	ldrb	r0, [r4, #22]
 800c7be:	f080 0001 	eor.w	r0, r0, #1
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}

0800c7c4 <ucdr_serialize_uint16_t>:
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ca:	2102      	movs	r1, #2
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7d4:	f001 fc18 	bl	800e008 <ucdr_buffer_alignment>
 800c7d8:	4601      	mov	r1, r0
 800c7da:	4620      	mov	r0, r4
 800c7dc:	7d67      	ldrb	r7, [r4, #21]
 800c7de:	f001 fc59 	bl	800e094 <ucdr_advance_buffer>
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	2102      	movs	r1, #2
 800c7e6:	f001 fbb1 	bl	800df4c <ucdr_check_buffer_available_for>
 800c7ea:	bb78      	cbnz	r0, 800c84c <ucdr_serialize_uint16_t+0x88>
 800c7ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	d926      	bls.n	800c842 <ucdr_serialize_uint16_t+0x7e>
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	1b5e      	subs	r6, r3, r5
 800c7f8:	4432      	add	r2, r6
 800c7fa:	f1c6 0802 	rsb	r8, r6, #2
 800c7fe:	4641      	mov	r1, r8
 800c800:	4620      	mov	r0, r4
 800c802:	60a3      	str	r3, [r4, #8]
 800c804:	6122      	str	r2, [r4, #16]
 800c806:	f001 fbad 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d03b      	beq.n	800c886 <ucdr_serialize_uint16_t+0xc2>
 800c80e:	7d23      	ldrb	r3, [r4, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d04a      	beq.n	800c8aa <ucdr_serialize_uint16_t+0xe6>
 800c814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c818:	702b      	strb	r3, [r5, #0]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	d040      	beq.n	800c8a0 <ucdr_serialize_uint16_t+0xdc>
 800c81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c822:	706b      	strb	r3, [r5, #1]
 800c824:	2102      	movs	r1, #2
 800c826:	6923      	ldr	r3, [r4, #16]
 800c828:	68a2      	ldr	r2, [r4, #8]
 800c82a:	7da0      	ldrb	r0, [r4, #22]
 800c82c:	440b      	add	r3, r1
 800c82e:	1b9e      	subs	r6, r3, r6
 800c830:	4442      	add	r2, r8
 800c832:	f080 0001 	eor.w	r0, r0, #1
 800c836:	6126      	str	r6, [r4, #16]
 800c838:	60a2      	str	r2, [r4, #8]
 800c83a:	7561      	strb	r1, [r4, #21]
 800c83c:	b002      	add	sp, #8
 800c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c842:	2102      	movs	r1, #2
 800c844:	4620      	mov	r0, r4
 800c846:	f001 fb8d 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c84a:	b190      	cbz	r0, 800c872 <ucdr_serialize_uint16_t+0xae>
 800c84c:	7d23      	ldrb	r3, [r4, #20]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	d014      	beq.n	800c87e <ucdr_serialize_uint16_t+0xba>
 800c854:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c858:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c85c:	7019      	strb	r1, [r3, #0]
 800c85e:	68a3      	ldr	r3, [r4, #8]
 800c860:	705a      	strb	r2, [r3, #1]
 800c862:	2102      	movs	r1, #2
 800c864:	68a2      	ldr	r2, [r4, #8]
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	440a      	add	r2, r1
 800c86a:	440b      	add	r3, r1
 800c86c:	60a2      	str	r2, [r4, #8]
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	7561      	strb	r1, [r4, #21]
 800c872:	7da0      	ldrb	r0, [r4, #22]
 800c874:	f080 0001 	eor.w	r0, r0, #1
 800c878:	b002      	add	sp, #8
 800c87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c882:	801a      	strh	r2, [r3, #0]
 800c884:	e7ed      	b.n	800c862 <ucdr_serialize_uint16_t+0x9e>
 800c886:	68a2      	ldr	r2, [r4, #8]
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	7da0      	ldrb	r0, [r4, #22]
 800c88c:	1b92      	subs	r2, r2, r6
 800c88e:	f080 0001 	eor.w	r0, r0, #1
 800c892:	1b9e      	subs	r6, r3, r6
 800c894:	7567      	strb	r7, [r4, #21]
 800c896:	60a2      	str	r2, [r4, #8]
 800c898:	6126      	str	r6, [r4, #16]
 800c89a:	b002      	add	sp, #8
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	68a3      	ldr	r3, [r4, #8]
 800c8a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8a6:	701a      	strb	r2, [r3, #0]
 800c8a8:	e7bc      	b.n	800c824 <ucdr_serialize_uint16_t+0x60>
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f10d 0506 	add.w	r5, sp, #6
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	f00d f89a 	bl	80199ec <memcpy>
 800c8b8:	4642      	mov	r2, r8
 800c8ba:	68a0      	ldr	r0, [r4, #8]
 800c8bc:	19a9      	adds	r1, r5, r6
 800c8be:	f00d f895 	bl	80199ec <memcpy>
 800c8c2:	e7af      	b.n	800c824 <ucdr_serialize_uint16_t+0x60>

0800c8c4 <ucdr_serialize_endian_uint16_t>:
 800c8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c8d4:	f001 fb98 	bl	800e008 <ucdr_buffer_alignment>
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c8e0:	f001 fbd8 	bl	800e094 <ucdr_advance_buffer>
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	2102      	movs	r1, #2
 800c8e8:	f001 fb30 	bl	800df4c <ucdr_check_buffer_available_for>
 800c8ec:	bb70      	cbnz	r0, 800c94c <ucdr_serialize_endian_uint16_t+0x88>
 800c8ee:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c8f2:	42b3      	cmp	r3, r6
 800c8f4:	d925      	bls.n	800c942 <ucdr_serialize_endian_uint16_t+0x7e>
 800c8f6:	6922      	ldr	r2, [r4, #16]
 800c8f8:	1b9f      	subs	r7, r3, r6
 800c8fa:	443a      	add	r2, r7
 800c8fc:	f1c7 0902 	rsb	r9, r7, #2
 800c900:	4649      	mov	r1, r9
 800c902:	4620      	mov	r0, r4
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6122      	str	r2, [r4, #16]
 800c908:	f001 fb2c 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d039      	beq.n	800c984 <ucdr_serialize_endian_uint16_t+0xc0>
 800c910:	2d01      	cmp	r5, #1
 800c912:	d04a      	beq.n	800c9aa <ucdr_serialize_endian_uint16_t+0xe6>
 800c914:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c918:	7033      	strb	r3, [r6, #0]
 800c91a:	2f00      	cmp	r7, #0
 800c91c:	d040      	beq.n	800c9a0 <ucdr_serialize_endian_uint16_t+0xdc>
 800c91e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c922:	7073      	strb	r3, [r6, #1]
 800c924:	2102      	movs	r1, #2
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	68a2      	ldr	r2, [r4, #8]
 800c92a:	7da0      	ldrb	r0, [r4, #22]
 800c92c:	440b      	add	r3, r1
 800c92e:	1bdf      	subs	r7, r3, r7
 800c930:	444a      	add	r2, r9
 800c932:	f080 0001 	eor.w	r0, r0, #1
 800c936:	6127      	str	r7, [r4, #16]
 800c938:	60a2      	str	r2, [r4, #8]
 800c93a:	7561      	strb	r1, [r4, #21]
 800c93c:	b003      	add	sp, #12
 800c93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c942:	2102      	movs	r1, #2
 800c944:	4620      	mov	r0, r4
 800c946:	f001 fb0d 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800c94a:	b188      	cbz	r0, 800c970 <ucdr_serialize_endian_uint16_t+0xac>
 800c94c:	2d01      	cmp	r5, #1
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	d014      	beq.n	800c97c <ucdr_serialize_endian_uint16_t+0xb8>
 800c952:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c956:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c95a:	7019      	strb	r1, [r3, #0]
 800c95c:	68a3      	ldr	r3, [r4, #8]
 800c95e:	705a      	strb	r2, [r3, #1]
 800c960:	2102      	movs	r1, #2
 800c962:	68a2      	ldr	r2, [r4, #8]
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	440a      	add	r2, r1
 800c968:	440b      	add	r3, r1
 800c96a:	60a2      	str	r2, [r4, #8]
 800c96c:	6123      	str	r3, [r4, #16]
 800c96e:	7561      	strb	r1, [r4, #21]
 800c970:	7da0      	ldrb	r0, [r4, #22]
 800c972:	f080 0001 	eor.w	r0, r0, #1
 800c976:	b003      	add	sp, #12
 800c978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c97c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	e7ed      	b.n	800c960 <ucdr_serialize_endian_uint16_t+0x9c>
 800c984:	68a2      	ldr	r2, [r4, #8]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	7da0      	ldrb	r0, [r4, #22]
 800c98a:	1bd2      	subs	r2, r2, r7
 800c98c:	f080 0001 	eor.w	r0, r0, #1
 800c990:	1bdf      	subs	r7, r3, r7
 800c992:	f884 8015 	strb.w	r8, [r4, #21]
 800c996:	60a2      	str	r2, [r4, #8]
 800c998:	6127      	str	r7, [r4, #16]
 800c99a:	b003      	add	sp, #12
 800c99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	e7bc      	b.n	800c924 <ucdr_serialize_endian_uint16_t+0x60>
 800c9aa:	f10d 0506 	add.w	r5, sp, #6
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	463a      	mov	r2, r7
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f00d f81a 	bl	80199ec <memcpy>
 800c9b8:	464a      	mov	r2, r9
 800c9ba:	68a0      	ldr	r0, [r4, #8]
 800c9bc:	19e9      	adds	r1, r5, r7
 800c9be:	f00d f815 	bl	80199ec <memcpy>
 800c9c2:	e7af      	b.n	800c924 <ucdr_serialize_endian_uint16_t+0x60>

0800c9c4 <ucdr_deserialize_uint16_t>:
 800c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	2102      	movs	r1, #2
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	f001 fb1b 	bl	800e008 <ucdr_buffer_alignment>
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c9da:	f001 fb5b 	bl	800e094 <ucdr_advance_buffer>
 800c9de:	4620      	mov	r0, r4
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	f001 fab3 	bl	800df4c <ucdr_check_buffer_available_for>
 800c9e6:	bb60      	cbnz	r0, 800ca42 <ucdr_deserialize_uint16_t+0x7e>
 800c9e8:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c9ec:	42b3      	cmp	r3, r6
 800c9ee:	d923      	bls.n	800ca38 <ucdr_deserialize_uint16_t+0x74>
 800c9f0:	6922      	ldr	r2, [r4, #16]
 800c9f2:	1b9f      	subs	r7, r3, r6
 800c9f4:	443a      	add	r2, r7
 800c9f6:	f1c7 0902 	rsb	r9, r7, #2
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	60a3      	str	r3, [r4, #8]
 800ca00:	6122      	str	r2, [r4, #16]
 800ca02:	f001 faaf 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d034      	beq.n	800ca74 <ucdr_deserialize_uint16_t+0xb0>
 800ca0a:	7d23      	ldrb	r3, [r4, #20]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d042      	beq.n	800ca96 <ucdr_deserialize_uint16_t+0xd2>
 800ca10:	7873      	ldrb	r3, [r6, #1]
 800ca12:	702b      	strb	r3, [r5, #0]
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	d03a      	beq.n	800ca8e <ucdr_deserialize_uint16_t+0xca>
 800ca18:	7833      	ldrb	r3, [r6, #0]
 800ca1a:	706b      	strb	r3, [r5, #1]
 800ca1c:	2102      	movs	r1, #2
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	68a2      	ldr	r2, [r4, #8]
 800ca22:	7da0      	ldrb	r0, [r4, #22]
 800ca24:	440b      	add	r3, r1
 800ca26:	1bdf      	subs	r7, r3, r7
 800ca28:	444a      	add	r2, r9
 800ca2a:	7561      	strb	r1, [r4, #21]
 800ca2c:	6127      	str	r7, [r4, #16]
 800ca2e:	60a2      	str	r2, [r4, #8]
 800ca30:	f080 0001 	eor.w	r0, r0, #1
 800ca34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca38:	2102      	movs	r1, #2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f001 fa92 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800ca40:	b180      	cbz	r0, 800ca64 <ucdr_deserialize_uint16_t+0xa0>
 800ca42:	7d23      	ldrb	r3, [r4, #20]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	68a3      	ldr	r3, [r4, #8]
 800ca48:	d011      	beq.n	800ca6e <ucdr_deserialize_uint16_t+0xaa>
 800ca4a:	785b      	ldrb	r3, [r3, #1]
 800ca4c:	702b      	strb	r3, [r5, #0]
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	706b      	strb	r3, [r5, #1]
 800ca54:	2102      	movs	r1, #2
 800ca56:	68a2      	ldr	r2, [r4, #8]
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	440b      	add	r3, r1
 800ca5e:	60a2      	str	r2, [r4, #8]
 800ca60:	6123      	str	r3, [r4, #16]
 800ca62:	7561      	strb	r1, [r4, #21]
 800ca64:	7da0      	ldrb	r0, [r4, #22]
 800ca66:	f080 0001 	eor.w	r0, r0, #1
 800ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	802b      	strh	r3, [r5, #0]
 800ca72:	e7ef      	b.n	800ca54 <ucdr_deserialize_uint16_t+0x90>
 800ca74:	68a2      	ldr	r2, [r4, #8]
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	7da0      	ldrb	r0, [r4, #22]
 800ca7a:	1bd2      	subs	r2, r2, r7
 800ca7c:	f884 8015 	strb.w	r8, [r4, #21]
 800ca80:	1bdf      	subs	r7, r3, r7
 800ca82:	60a2      	str	r2, [r4, #8]
 800ca84:	6127      	str	r7, [r4, #16]
 800ca86:	f080 0001 	eor.w	r0, r0, #1
 800ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	706b      	strb	r3, [r5, #1]
 800ca94:	e7c2      	b.n	800ca1c <ucdr_deserialize_uint16_t+0x58>
 800ca96:	4631      	mov	r1, r6
 800ca98:	463a      	mov	r2, r7
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f00c ffa6 	bl	80199ec <memcpy>
 800caa0:	464a      	mov	r2, r9
 800caa2:	68a1      	ldr	r1, [r4, #8]
 800caa4:	19e8      	adds	r0, r5, r7
 800caa6:	f00c ffa1 	bl	80199ec <memcpy>
 800caaa:	e7b7      	b.n	800ca1c <ucdr_deserialize_uint16_t+0x58>

0800caac <ucdr_deserialize_endian_uint16_t>:
 800caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	460e      	mov	r6, r1
 800cab2:	2102      	movs	r1, #2
 800cab4:	4604      	mov	r4, r0
 800cab6:	4615      	mov	r5, r2
 800cab8:	f001 faa6 	bl	800e008 <ucdr_buffer_alignment>
 800cabc:	4601      	mov	r1, r0
 800cabe:	4620      	mov	r0, r4
 800cac0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cac4:	f001 fae6 	bl	800e094 <ucdr_advance_buffer>
 800cac8:	4620      	mov	r0, r4
 800caca:	2102      	movs	r1, #2
 800cacc:	f001 fa3e 	bl	800df4c <ucdr_check_buffer_available_for>
 800cad0:	bb70      	cbnz	r0, 800cb30 <ucdr_deserialize_endian_uint16_t+0x84>
 800cad2:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cad6:	42bb      	cmp	r3, r7
 800cad8:	d925      	bls.n	800cb26 <ucdr_deserialize_endian_uint16_t+0x7a>
 800cada:	6922      	ldr	r2, [r4, #16]
 800cadc:	eba3 0807 	sub.w	r8, r3, r7
 800cae0:	4442      	add	r2, r8
 800cae2:	f1c8 0a02 	rsb	sl, r8, #2
 800cae6:	4651      	mov	r1, sl
 800cae8:	4620      	mov	r0, r4
 800caea:	60a3      	str	r3, [r4, #8]
 800caec:	6122      	str	r2, [r4, #16]
 800caee:	f001 fa39 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d034      	beq.n	800cb60 <ucdr_deserialize_endian_uint16_t+0xb4>
 800caf6:	2e01      	cmp	r6, #1
 800caf8:	d045      	beq.n	800cb86 <ucdr_deserialize_endian_uint16_t+0xda>
 800cafa:	787b      	ldrb	r3, [r7, #1]
 800cafc:	702b      	strb	r3, [r5, #0]
 800cafe:	f1b8 0f00 	cmp.w	r8, #0
 800cb02:	d03c      	beq.n	800cb7e <ucdr_deserialize_endian_uint16_t+0xd2>
 800cb04:	783b      	ldrb	r3, [r7, #0]
 800cb06:	706b      	strb	r3, [r5, #1]
 800cb08:	2102      	movs	r1, #2
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	68a2      	ldr	r2, [r4, #8]
 800cb0e:	7da0      	ldrb	r0, [r4, #22]
 800cb10:	440b      	add	r3, r1
 800cb12:	eba3 0308 	sub.w	r3, r3, r8
 800cb16:	4452      	add	r2, sl
 800cb18:	7561      	strb	r1, [r4, #21]
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	60a2      	str	r2, [r4, #8]
 800cb1e:	f080 0001 	eor.w	r0, r0, #1
 800cb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb26:	2102      	movs	r1, #2
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f001 fa1b 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cb2e:	b178      	cbz	r0, 800cb50 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cb30:	2e01      	cmp	r6, #1
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	d011      	beq.n	800cb5a <ucdr_deserialize_endian_uint16_t+0xae>
 800cb36:	785b      	ldrb	r3, [r3, #1]
 800cb38:	702b      	strb	r3, [r5, #0]
 800cb3a:	68a3      	ldr	r3, [r4, #8]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	706b      	strb	r3, [r5, #1]
 800cb40:	2102      	movs	r1, #2
 800cb42:	68a2      	ldr	r2, [r4, #8]
 800cb44:	6923      	ldr	r3, [r4, #16]
 800cb46:	440a      	add	r2, r1
 800cb48:	440b      	add	r3, r1
 800cb4a:	60a2      	str	r2, [r4, #8]
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	7561      	strb	r1, [r4, #21]
 800cb50:	7da0      	ldrb	r0, [r4, #22]
 800cb52:	f080 0001 	eor.w	r0, r0, #1
 800cb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	802b      	strh	r3, [r5, #0]
 800cb5e:	e7ef      	b.n	800cb40 <ucdr_deserialize_endian_uint16_t+0x94>
 800cb60:	68a2      	ldr	r2, [r4, #8]
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	7da0      	ldrb	r0, [r4, #22]
 800cb66:	eba2 0208 	sub.w	r2, r2, r8
 800cb6a:	eba3 0308 	sub.w	r3, r3, r8
 800cb6e:	f884 9015 	strb.w	r9, [r4, #21]
 800cb72:	60a2      	str	r2, [r4, #8]
 800cb74:	6123      	str	r3, [r4, #16]
 800cb76:	f080 0001 	eor.w	r0, r0, #1
 800cb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	706b      	strb	r3, [r5, #1]
 800cb84:	e7c0      	b.n	800cb08 <ucdr_deserialize_endian_uint16_t+0x5c>
 800cb86:	4639      	mov	r1, r7
 800cb88:	4642      	mov	r2, r8
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f00c ff2e 	bl	80199ec <memcpy>
 800cb90:	4652      	mov	r2, sl
 800cb92:	68a1      	ldr	r1, [r4, #8]
 800cb94:	eb05 0008 	add.w	r0, r5, r8
 800cb98:	f00c ff28 	bl	80199ec <memcpy>
 800cb9c:	e7b4      	b.n	800cb08 <ucdr_deserialize_endian_uint16_t+0x5c>
 800cb9e:	bf00      	nop

0800cba0 <ucdr_serialize_uint32_t>:
 800cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	9101      	str	r1, [sp, #4]
 800cba8:	2104      	movs	r1, #4
 800cbaa:	4604      	mov	r4, r0
 800cbac:	f001 fa2c 	bl	800e008 <ucdr_buffer_alignment>
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	7d67      	ldrb	r7, [r4, #21]
 800cbb6:	f001 fa6d 	bl	800e094 <ucdr_advance_buffer>
 800cbba:	4620      	mov	r0, r4
 800cbbc:	2104      	movs	r1, #4
 800cbbe:	f001 f9c5 	bl	800df4c <ucdr_check_buffer_available_for>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d139      	bne.n	800cc3a <ucdr_serialize_uint32_t+0x9a>
 800cbc6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cbca:	42ab      	cmp	r3, r5
 800cbcc:	d930      	bls.n	800cc30 <ucdr_serialize_uint32_t+0x90>
 800cbce:	6922      	ldr	r2, [r4, #16]
 800cbd0:	1b5e      	subs	r6, r3, r5
 800cbd2:	4432      	add	r2, r6
 800cbd4:	f1c6 0804 	rsb	r8, r6, #4
 800cbd8:	4641      	mov	r1, r8
 800cbda:	4620      	mov	r0, r4
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	6122      	str	r2, [r4, #16]
 800cbe0:	f001 f9c0 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d04c      	beq.n	800cc82 <ucdr_serialize_uint32_t+0xe2>
 800cbe8:	7d23      	ldrb	r3, [r4, #20]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d063      	beq.n	800ccb6 <ucdr_serialize_uint32_t+0x116>
 800cbee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbf2:	702b      	strb	r3, [r5, #0]
 800cbf4:	2e00      	cmp	r6, #0
 800cbf6:	d051      	beq.n	800cc9c <ucdr_serialize_uint32_t+0xfc>
 800cbf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbfc:	2e01      	cmp	r6, #1
 800cbfe:	706b      	strb	r3, [r5, #1]
 800cc00:	d050      	beq.n	800cca4 <ucdr_serialize_uint32_t+0x104>
 800cc02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc06:	2e02      	cmp	r6, #2
 800cc08:	70ab      	strb	r3, [r5, #2]
 800cc0a:	d04f      	beq.n	800ccac <ucdr_serialize_uint32_t+0x10c>
 800cc0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc10:	70eb      	strb	r3, [r5, #3]
 800cc12:	2104      	movs	r1, #4
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	68a2      	ldr	r2, [r4, #8]
 800cc18:	7da0      	ldrb	r0, [r4, #22]
 800cc1a:	440b      	add	r3, r1
 800cc1c:	1b9e      	subs	r6, r3, r6
 800cc1e:	4442      	add	r2, r8
 800cc20:	f080 0001 	eor.w	r0, r0, #1
 800cc24:	6126      	str	r6, [r4, #16]
 800cc26:	60a2      	str	r2, [r4, #8]
 800cc28:	7561      	strb	r1, [r4, #21]
 800cc2a:	b002      	add	sp, #8
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	2104      	movs	r1, #4
 800cc32:	4620      	mov	r0, r4
 800cc34:	f001 f996 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cc38:	b1d0      	cbz	r0, 800cc70 <ucdr_serialize_uint32_t+0xd0>
 800cc3a:	7d23      	ldrb	r3, [r4, #20]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	d01c      	beq.n	800cc7c <ucdr_serialize_uint32_t+0xdc>
 800cc42:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cc46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc4a:	7019      	strb	r1, [r3, #0]
 800cc4c:	68a3      	ldr	r3, [r4, #8]
 800cc4e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cc52:	705a      	strb	r2, [r3, #1]
 800cc54:	68a3      	ldr	r3, [r4, #8]
 800cc56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cc5a:	7099      	strb	r1, [r3, #2]
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	70da      	strb	r2, [r3, #3]
 800cc60:	2104      	movs	r1, #4
 800cc62:	68a2      	ldr	r2, [r4, #8]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	440a      	add	r2, r1
 800cc68:	440b      	add	r3, r1
 800cc6a:	60a2      	str	r2, [r4, #8]
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	7561      	strb	r1, [r4, #21]
 800cc70:	7da0      	ldrb	r0, [r4, #22]
 800cc72:	f080 0001 	eor.w	r0, r0, #1
 800cc76:	b002      	add	sp, #8
 800cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7c:	9a01      	ldr	r2, [sp, #4]
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	e7ee      	b.n	800cc60 <ucdr_serialize_uint32_t+0xc0>
 800cc82:	68a2      	ldr	r2, [r4, #8]
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	7da0      	ldrb	r0, [r4, #22]
 800cc88:	1b92      	subs	r2, r2, r6
 800cc8a:	f080 0001 	eor.w	r0, r0, #1
 800cc8e:	1b9e      	subs	r6, r3, r6
 800cc90:	7567      	strb	r7, [r4, #21]
 800cc92:	60a2      	str	r2, [r4, #8]
 800cc94:	6126      	str	r6, [r4, #16]
 800cc96:	b002      	add	sp, #8
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	68a3      	ldr	r3, [r4, #8]
 800cc9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccb2:	701a      	strb	r2, [r3, #0]
 800ccb4:	e7ad      	b.n	800cc12 <ucdr_serialize_uint32_t+0x72>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	ad01      	add	r5, sp, #4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	f00c fe95 	bl	80199ec <memcpy>
 800ccc2:	4642      	mov	r2, r8
 800ccc4:	68a0      	ldr	r0, [r4, #8]
 800ccc6:	19a9      	adds	r1, r5, r6
 800ccc8:	f00c fe90 	bl	80199ec <memcpy>
 800cccc:	e7a1      	b.n	800cc12 <ucdr_serialize_uint32_t+0x72>
 800ccce:	bf00      	nop

0800ccd0 <ucdr_serialize_endian_uint32_t>:
 800ccd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	2104      	movs	r1, #4
 800ccda:	4604      	mov	r4, r0
 800ccdc:	9201      	str	r2, [sp, #4]
 800ccde:	f001 f993 	bl	800e008 <ucdr_buffer_alignment>
 800cce2:	4601      	mov	r1, r0
 800cce4:	4620      	mov	r0, r4
 800cce6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ccea:	f001 f9d3 	bl	800e094 <ucdr_advance_buffer>
 800ccee:	4620      	mov	r0, r4
 800ccf0:	2104      	movs	r1, #4
 800ccf2:	f001 f92b 	bl	800df4c <ucdr_check_buffer_available_for>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d138      	bne.n	800cd6c <ucdr_serialize_endian_uint32_t+0x9c>
 800ccfa:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ccfe:	42b3      	cmp	r3, r6
 800cd00:	d92f      	bls.n	800cd62 <ucdr_serialize_endian_uint32_t+0x92>
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	1b9f      	subs	r7, r3, r6
 800cd06:	443a      	add	r2, r7
 800cd08:	f1c7 0904 	rsb	r9, r7, #4
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	4620      	mov	r0, r4
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	6122      	str	r2, [r4, #16]
 800cd14:	f001 f926 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d04a      	beq.n	800cdb2 <ucdr_serialize_endian_uint32_t+0xe2>
 800cd1c:	2d01      	cmp	r5, #1
 800cd1e:	d063      	beq.n	800cde8 <ucdr_serialize_endian_uint32_t+0x118>
 800cd20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd24:	7033      	strb	r3, [r6, #0]
 800cd26:	2f00      	cmp	r7, #0
 800cd28:	d051      	beq.n	800cdce <ucdr_serialize_endian_uint32_t+0xfe>
 800cd2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd2e:	2f01      	cmp	r7, #1
 800cd30:	7073      	strb	r3, [r6, #1]
 800cd32:	d050      	beq.n	800cdd6 <ucdr_serialize_endian_uint32_t+0x106>
 800cd34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd38:	2f02      	cmp	r7, #2
 800cd3a:	70b3      	strb	r3, [r6, #2]
 800cd3c:	d04f      	beq.n	800cdde <ucdr_serialize_endian_uint32_t+0x10e>
 800cd3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cd42:	70f3      	strb	r3, [r6, #3]
 800cd44:	2104      	movs	r1, #4
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	68a2      	ldr	r2, [r4, #8]
 800cd4a:	7da0      	ldrb	r0, [r4, #22]
 800cd4c:	440b      	add	r3, r1
 800cd4e:	1bdf      	subs	r7, r3, r7
 800cd50:	444a      	add	r2, r9
 800cd52:	f080 0001 	eor.w	r0, r0, #1
 800cd56:	6127      	str	r7, [r4, #16]
 800cd58:	60a2      	str	r2, [r4, #8]
 800cd5a:	7561      	strb	r1, [r4, #21]
 800cd5c:	b003      	add	sp, #12
 800cd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd62:	2104      	movs	r1, #4
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 f8fd 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cd6a:	b1c8      	cbz	r0, 800cda0 <ucdr_serialize_endian_uint32_t+0xd0>
 800cd6c:	2d01      	cmp	r5, #1
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	d01c      	beq.n	800cdac <ucdr_serialize_endian_uint32_t+0xdc>
 800cd72:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cd76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd7a:	7019      	strb	r1, [r3, #0]
 800cd7c:	68a3      	ldr	r3, [r4, #8]
 800cd7e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cd82:	705a      	strb	r2, [r3, #1]
 800cd84:	68a3      	ldr	r3, [r4, #8]
 800cd86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd8a:	7099      	strb	r1, [r3, #2]
 800cd8c:	68a3      	ldr	r3, [r4, #8]
 800cd8e:	70da      	strb	r2, [r3, #3]
 800cd90:	2104      	movs	r1, #4
 800cd92:	68a2      	ldr	r2, [r4, #8]
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	440a      	add	r2, r1
 800cd98:	440b      	add	r3, r1
 800cd9a:	60a2      	str	r2, [r4, #8]
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	7561      	strb	r1, [r4, #21]
 800cda0:	7da0      	ldrb	r0, [r4, #22]
 800cda2:	f080 0001 	eor.w	r0, r0, #1
 800cda6:	b003      	add	sp, #12
 800cda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdac:	9a01      	ldr	r2, [sp, #4]
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	e7ee      	b.n	800cd90 <ucdr_serialize_endian_uint32_t+0xc0>
 800cdb2:	68a2      	ldr	r2, [r4, #8]
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	7da0      	ldrb	r0, [r4, #22]
 800cdb8:	1bd2      	subs	r2, r2, r7
 800cdba:	f080 0001 	eor.w	r0, r0, #1
 800cdbe:	1bdf      	subs	r7, r3, r7
 800cdc0:	f884 8015 	strb.w	r8, [r4, #21]
 800cdc4:	60a2      	str	r2, [r4, #8]
 800cdc6:	6127      	str	r7, [r4, #16]
 800cdc8:	b003      	add	sp, #12
 800cdca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdd4:	701a      	strb	r2, [r3, #0]
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	68a3      	ldr	r3, [r4, #8]
 800cde0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cde4:	701a      	strb	r2, [r3, #0]
 800cde6:	e7ad      	b.n	800cd44 <ucdr_serialize_endian_uint32_t+0x74>
 800cde8:	ad01      	add	r5, sp, #4
 800cdea:	4629      	mov	r1, r5
 800cdec:	463a      	mov	r2, r7
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f00c fdfc 	bl	80199ec <memcpy>
 800cdf4:	464a      	mov	r2, r9
 800cdf6:	68a0      	ldr	r0, [r4, #8]
 800cdf8:	19e9      	adds	r1, r5, r7
 800cdfa:	f00c fdf7 	bl	80199ec <memcpy>
 800cdfe:	e7a1      	b.n	800cd44 <ucdr_serialize_endian_uint32_t+0x74>

0800ce00 <ucdr_deserialize_uint32_t>:
 800ce00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce04:	460d      	mov	r5, r1
 800ce06:	2104      	movs	r1, #4
 800ce08:	4604      	mov	r4, r0
 800ce0a:	f001 f8fd 	bl	800e008 <ucdr_buffer_alignment>
 800ce0e:	4601      	mov	r1, r0
 800ce10:	4620      	mov	r0, r4
 800ce12:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ce16:	f001 f93d 	bl	800e094 <ucdr_advance_buffer>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	2104      	movs	r1, #4
 800ce1e:	f001 f895 	bl	800df4c <ucdr_check_buffer_available_for>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d138      	bne.n	800ce98 <ucdr_deserialize_uint32_t+0x98>
 800ce26:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ce2a:	42b3      	cmp	r3, r6
 800ce2c:	d92f      	bls.n	800ce8e <ucdr_deserialize_uint32_t+0x8e>
 800ce2e:	6922      	ldr	r2, [r4, #16]
 800ce30:	1b9f      	subs	r7, r3, r6
 800ce32:	443a      	add	r2, r7
 800ce34:	f1c7 0904 	rsb	r9, r7, #4
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	6122      	str	r2, [r4, #16]
 800ce40:	f001 f890 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d046      	beq.n	800ced6 <ucdr_deserialize_uint32_t+0xd6>
 800ce48:	7d23      	ldrb	r3, [r4, #20]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d05c      	beq.n	800cf08 <ucdr_deserialize_uint32_t+0x108>
 800ce4e:	78f3      	ldrb	r3, [r6, #3]
 800ce50:	702b      	strb	r3, [r5, #0]
 800ce52:	2f00      	cmp	r7, #0
 800ce54:	d04c      	beq.n	800cef0 <ucdr_deserialize_uint32_t+0xf0>
 800ce56:	78b2      	ldrb	r2, [r6, #2]
 800ce58:	2f01      	cmp	r7, #1
 800ce5a:	f105 0302 	add.w	r3, r5, #2
 800ce5e:	706a      	strb	r2, [r5, #1]
 800ce60:	d04a      	beq.n	800cef8 <ucdr_deserialize_uint32_t+0xf8>
 800ce62:	7872      	ldrb	r2, [r6, #1]
 800ce64:	2f02      	cmp	r7, #2
 800ce66:	f105 0303 	add.w	r3, r5, #3
 800ce6a:	70aa      	strb	r2, [r5, #2]
 800ce6c:	d048      	beq.n	800cf00 <ucdr_deserialize_uint32_t+0x100>
 800ce6e:	7833      	ldrb	r3, [r6, #0]
 800ce70:	70eb      	strb	r3, [r5, #3]
 800ce72:	2104      	movs	r1, #4
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	68a2      	ldr	r2, [r4, #8]
 800ce78:	7da0      	ldrb	r0, [r4, #22]
 800ce7a:	440b      	add	r3, r1
 800ce7c:	1bdf      	subs	r7, r3, r7
 800ce7e:	444a      	add	r2, r9
 800ce80:	7561      	strb	r1, [r4, #21]
 800ce82:	6127      	str	r7, [r4, #16]
 800ce84:	60a2      	str	r2, [r4, #8]
 800ce86:	f080 0001 	eor.w	r0, r0, #1
 800ce8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8e:	2104      	movs	r1, #4
 800ce90:	4620      	mov	r0, r4
 800ce92:	f001 f867 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800ce96:	b1b0      	cbz	r0, 800cec6 <ucdr_deserialize_uint32_t+0xc6>
 800ce98:	7d23      	ldrb	r3, [r4, #20]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	d017      	beq.n	800ced0 <ucdr_deserialize_uint32_t+0xd0>
 800cea0:	78db      	ldrb	r3, [r3, #3]
 800cea2:	702b      	strb	r3, [r5, #0]
 800cea4:	68a3      	ldr	r3, [r4, #8]
 800cea6:	789b      	ldrb	r3, [r3, #2]
 800cea8:	706b      	strb	r3, [r5, #1]
 800ceaa:	68a3      	ldr	r3, [r4, #8]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	70ab      	strb	r3, [r5, #2]
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	70eb      	strb	r3, [r5, #3]
 800ceb6:	2104      	movs	r1, #4
 800ceb8:	68a2      	ldr	r2, [r4, #8]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	440a      	add	r2, r1
 800cebe:	440b      	add	r3, r1
 800cec0:	60a2      	str	r2, [r4, #8]
 800cec2:	6123      	str	r3, [r4, #16]
 800cec4:	7561      	strb	r1, [r4, #21]
 800cec6:	7da0      	ldrb	r0, [r4, #22]
 800cec8:	f080 0001 	eor.w	r0, r0, #1
 800cecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	e7ef      	b.n	800ceb6 <ucdr_deserialize_uint32_t+0xb6>
 800ced6:	68a2      	ldr	r2, [r4, #8]
 800ced8:	6923      	ldr	r3, [r4, #16]
 800ceda:	7da0      	ldrb	r0, [r4, #22]
 800cedc:	1bd2      	subs	r2, r2, r7
 800cede:	f884 8015 	strb.w	r8, [r4, #21]
 800cee2:	1bdf      	subs	r7, r3, r7
 800cee4:	60a2      	str	r2, [r4, #8]
 800cee6:	6127      	str	r7, [r4, #16]
 800cee8:	f080 0001 	eor.w	r0, r0, #1
 800ceec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef0:	68a2      	ldr	r2, [r4, #8]
 800cef2:	1cab      	adds	r3, r5, #2
 800cef4:	7892      	ldrb	r2, [r2, #2]
 800cef6:	706a      	strb	r2, [r5, #1]
 800cef8:	68a2      	ldr	r2, [r4, #8]
 800cefa:	7852      	ldrb	r2, [r2, #1]
 800cefc:	f803 2b01 	strb.w	r2, [r3], #1
 800cf00:	68a2      	ldr	r2, [r4, #8]
 800cf02:	7812      	ldrb	r2, [r2, #0]
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	e7b4      	b.n	800ce72 <ucdr_deserialize_uint32_t+0x72>
 800cf08:	4631      	mov	r1, r6
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f00c fd6d 	bl	80199ec <memcpy>
 800cf12:	464a      	mov	r2, r9
 800cf14:	68a1      	ldr	r1, [r4, #8]
 800cf16:	19e8      	adds	r0, r5, r7
 800cf18:	f00c fd68 	bl	80199ec <memcpy>
 800cf1c:	e7a9      	b.n	800ce72 <ucdr_deserialize_uint32_t+0x72>
 800cf1e:	bf00      	nop

0800cf20 <ucdr_deserialize_endian_uint32_t>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	460e      	mov	r6, r1
 800cf26:	2104      	movs	r1, #4
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4615      	mov	r5, r2
 800cf2c:	f001 f86c 	bl	800e008 <ucdr_buffer_alignment>
 800cf30:	4601      	mov	r1, r0
 800cf32:	4620      	mov	r0, r4
 800cf34:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cf38:	f001 f8ac 	bl	800e094 <ucdr_advance_buffer>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	2104      	movs	r1, #4
 800cf40:	f001 f804 	bl	800df4c <ucdr_check_buffer_available_for>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d13c      	bne.n	800cfc2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800cf48:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800cf4c:	42bb      	cmp	r3, r7
 800cf4e:	d933      	bls.n	800cfb8 <ucdr_deserialize_endian_uint32_t+0x98>
 800cf50:	6922      	ldr	r2, [r4, #16]
 800cf52:	eba3 0807 	sub.w	r8, r3, r7
 800cf56:	4442      	add	r2, r8
 800cf58:	f1c8 0a04 	rsb	sl, r8, #4
 800cf5c:	4651      	mov	r1, sl
 800cf5e:	4620      	mov	r0, r4
 800cf60:	60a3      	str	r3, [r4, #8]
 800cf62:	6122      	str	r2, [r4, #16]
 800cf64:	f000 fffe 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d048      	beq.n	800cffe <ucdr_deserialize_endian_uint32_t+0xde>
 800cf6c:	2e01      	cmp	r6, #1
 800cf6e:	d061      	beq.n	800d034 <ucdr_deserialize_endian_uint32_t+0x114>
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	702b      	strb	r3, [r5, #0]
 800cf74:	f1b8 0f00 	cmp.w	r8, #0
 800cf78:	d050      	beq.n	800d01c <ucdr_deserialize_endian_uint32_t+0xfc>
 800cf7a:	78ba      	ldrb	r2, [r7, #2]
 800cf7c:	f1b8 0f01 	cmp.w	r8, #1
 800cf80:	f105 0302 	add.w	r3, r5, #2
 800cf84:	706a      	strb	r2, [r5, #1]
 800cf86:	d04d      	beq.n	800d024 <ucdr_deserialize_endian_uint32_t+0x104>
 800cf88:	787a      	ldrb	r2, [r7, #1]
 800cf8a:	f1b8 0f02 	cmp.w	r8, #2
 800cf8e:	f105 0303 	add.w	r3, r5, #3
 800cf92:	70aa      	strb	r2, [r5, #2]
 800cf94:	d04a      	beq.n	800d02c <ucdr_deserialize_endian_uint32_t+0x10c>
 800cf96:	783b      	ldrb	r3, [r7, #0]
 800cf98:	70eb      	strb	r3, [r5, #3]
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	6923      	ldr	r3, [r4, #16]
 800cf9e:	68a2      	ldr	r2, [r4, #8]
 800cfa0:	7da0      	ldrb	r0, [r4, #22]
 800cfa2:	440b      	add	r3, r1
 800cfa4:	eba3 0308 	sub.w	r3, r3, r8
 800cfa8:	4452      	add	r2, sl
 800cfaa:	7561      	strb	r1, [r4, #21]
 800cfac:	6123      	str	r3, [r4, #16]
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	f080 0001 	eor.w	r0, r0, #1
 800cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb8:	2104      	movs	r1, #4
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 ffd2 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800cfc0:	b1a8      	cbz	r0, 800cfee <ucdr_deserialize_endian_uint32_t+0xce>
 800cfc2:	2e01      	cmp	r6, #1
 800cfc4:	68a3      	ldr	r3, [r4, #8]
 800cfc6:	d017      	beq.n	800cff8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800cfc8:	78db      	ldrb	r3, [r3, #3]
 800cfca:	702b      	strb	r3, [r5, #0]
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	789b      	ldrb	r3, [r3, #2]
 800cfd0:	706b      	strb	r3, [r5, #1]
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	785b      	ldrb	r3, [r3, #1]
 800cfd6:	70ab      	strb	r3, [r5, #2]
 800cfd8:	68a3      	ldr	r3, [r4, #8]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	70eb      	strb	r3, [r5, #3]
 800cfde:	2104      	movs	r1, #4
 800cfe0:	68a2      	ldr	r2, [r4, #8]
 800cfe2:	6923      	ldr	r3, [r4, #16]
 800cfe4:	440a      	add	r2, r1
 800cfe6:	440b      	add	r3, r1
 800cfe8:	60a2      	str	r2, [r4, #8]
 800cfea:	6123      	str	r3, [r4, #16]
 800cfec:	7561      	strb	r1, [r4, #21]
 800cfee:	7da0      	ldrb	r0, [r4, #22]
 800cff0:	f080 0001 	eor.w	r0, r0, #1
 800cff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	e7ef      	b.n	800cfde <ucdr_deserialize_endian_uint32_t+0xbe>
 800cffe:	68a2      	ldr	r2, [r4, #8]
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	7da0      	ldrb	r0, [r4, #22]
 800d004:	eba2 0208 	sub.w	r2, r2, r8
 800d008:	eba3 0308 	sub.w	r3, r3, r8
 800d00c:	f884 9015 	strb.w	r9, [r4, #21]
 800d010:	60a2      	str	r2, [r4, #8]
 800d012:	6123      	str	r3, [r4, #16]
 800d014:	f080 0001 	eor.w	r0, r0, #1
 800d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d01c:	68a2      	ldr	r2, [r4, #8]
 800d01e:	1cab      	adds	r3, r5, #2
 800d020:	7892      	ldrb	r2, [r2, #2]
 800d022:	706a      	strb	r2, [r5, #1]
 800d024:	68a2      	ldr	r2, [r4, #8]
 800d026:	7852      	ldrb	r2, [r2, #1]
 800d028:	f803 2b01 	strb.w	r2, [r3], #1
 800d02c:	68a2      	ldr	r2, [r4, #8]
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	e7b2      	b.n	800cf9a <ucdr_deserialize_endian_uint32_t+0x7a>
 800d034:	4639      	mov	r1, r7
 800d036:	4642      	mov	r2, r8
 800d038:	4628      	mov	r0, r5
 800d03a:	f00c fcd7 	bl	80199ec <memcpy>
 800d03e:	4652      	mov	r2, sl
 800d040:	68a1      	ldr	r1, [r4, #8]
 800d042:	eb05 0008 	add.w	r0, r5, r8
 800d046:	f00c fcd1 	bl	80199ec <memcpy>
 800d04a:	e7a6      	b.n	800cf9a <ucdr_deserialize_endian_uint32_t+0x7a>

0800d04c <ucdr_serialize_uint64_t>:
 800d04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d050:	2108      	movs	r1, #8
 800d052:	b082      	sub	sp, #8
 800d054:	4604      	mov	r4, r0
 800d056:	e9cd 2300 	strd	r2, r3, [sp]
 800d05a:	f000 ffd5 	bl	800e008 <ucdr_buffer_alignment>
 800d05e:	4601      	mov	r1, r0
 800d060:	4620      	mov	r0, r4
 800d062:	7d67      	ldrb	r7, [r4, #21]
 800d064:	f001 f816 	bl	800e094 <ucdr_advance_buffer>
 800d068:	4620      	mov	r0, r4
 800d06a:	2108      	movs	r1, #8
 800d06c:	f000 ff6e 	bl	800df4c <ucdr_check_buffer_available_for>
 800d070:	2800      	cmp	r0, #0
 800d072:	d14e      	bne.n	800d112 <ucdr_serialize_uint64_t+0xc6>
 800d074:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d078:	42ab      	cmp	r3, r5
 800d07a:	d945      	bls.n	800d108 <ucdr_serialize_uint64_t+0xbc>
 800d07c:	6922      	ldr	r2, [r4, #16]
 800d07e:	1b5e      	subs	r6, r3, r5
 800d080:	4432      	add	r2, r6
 800d082:	f1c6 0808 	rsb	r8, r6, #8
 800d086:	4641      	mov	r1, r8
 800d088:	4620      	mov	r0, r4
 800d08a:	60a3      	str	r3, [r4, #8]
 800d08c:	6122      	str	r2, [r4, #16]
 800d08e:	f000 ff69 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d092:	2800      	cmp	r0, #0
 800d094:	d074      	beq.n	800d180 <ucdr_serialize_uint64_t+0x134>
 800d096:	7d23      	ldrb	r3, [r4, #20]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	f000 809b 	beq.w	800d1d4 <ucdr_serialize_uint64_t+0x188>
 800d09e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0a2:	702b      	strb	r3, [r5, #0]
 800d0a4:	2e00      	cmp	r6, #0
 800d0a6:	d078      	beq.n	800d19a <ucdr_serialize_uint64_t+0x14e>
 800d0a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d0ac:	2e01      	cmp	r6, #1
 800d0ae:	706b      	strb	r3, [r5, #1]
 800d0b0:	d077      	beq.n	800d1a2 <ucdr_serialize_uint64_t+0x156>
 800d0b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d0b6:	2e02      	cmp	r6, #2
 800d0b8:	70ab      	strb	r3, [r5, #2]
 800d0ba:	d076      	beq.n	800d1aa <ucdr_serialize_uint64_t+0x15e>
 800d0bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d0c0:	2e03      	cmp	r6, #3
 800d0c2:	70eb      	strb	r3, [r5, #3]
 800d0c4:	d075      	beq.n	800d1b2 <ucdr_serialize_uint64_t+0x166>
 800d0c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d0ca:	2e04      	cmp	r6, #4
 800d0cc:	712b      	strb	r3, [r5, #4]
 800d0ce:	d074      	beq.n	800d1ba <ucdr_serialize_uint64_t+0x16e>
 800d0d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d0d4:	2e05      	cmp	r6, #5
 800d0d6:	716b      	strb	r3, [r5, #5]
 800d0d8:	d073      	beq.n	800d1c2 <ucdr_serialize_uint64_t+0x176>
 800d0da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d0de:	2e06      	cmp	r6, #6
 800d0e0:	71ab      	strb	r3, [r5, #6]
 800d0e2:	d072      	beq.n	800d1ca <ucdr_serialize_uint64_t+0x17e>
 800d0e4:	f89d 3000 	ldrb.w	r3, [sp]
 800d0e8:	71eb      	strb	r3, [r5, #7]
 800d0ea:	2108      	movs	r1, #8
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	68a2      	ldr	r2, [r4, #8]
 800d0f0:	7da0      	ldrb	r0, [r4, #22]
 800d0f2:	440b      	add	r3, r1
 800d0f4:	1b9e      	subs	r6, r3, r6
 800d0f6:	4442      	add	r2, r8
 800d0f8:	f080 0001 	eor.w	r0, r0, #1
 800d0fc:	6126      	str	r6, [r4, #16]
 800d0fe:	60a2      	str	r2, [r4, #8]
 800d100:	7561      	strb	r1, [r4, #21]
 800d102:	b002      	add	sp, #8
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	2108      	movs	r1, #8
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 ff2a 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d110:	b350      	cbz	r0, 800d168 <ucdr_serialize_uint64_t+0x11c>
 800d112:	7d23      	ldrb	r3, [r4, #20]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d02d      	beq.n	800d174 <ucdr_serialize_uint64_t+0x128>
 800d118:	68a3      	ldr	r3, [r4, #8]
 800d11a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d11e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d122:	7019      	strb	r1, [r3, #0]
 800d124:	68a3      	ldr	r3, [r4, #8]
 800d126:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d12a:	705a      	strb	r2, [r3, #1]
 800d12c:	68a3      	ldr	r3, [r4, #8]
 800d12e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d132:	7099      	strb	r1, [r3, #2]
 800d134:	68a3      	ldr	r3, [r4, #8]
 800d136:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d13a:	70da      	strb	r2, [r3, #3]
 800d13c:	68a3      	ldr	r3, [r4, #8]
 800d13e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d142:	7119      	strb	r1, [r3, #4]
 800d144:	68a3      	ldr	r3, [r4, #8]
 800d146:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d14a:	715a      	strb	r2, [r3, #5]
 800d14c:	68a3      	ldr	r3, [r4, #8]
 800d14e:	f89d 2000 	ldrb.w	r2, [sp]
 800d152:	7199      	strb	r1, [r3, #6]
 800d154:	68a3      	ldr	r3, [r4, #8]
 800d156:	71da      	strb	r2, [r3, #7]
 800d158:	2108      	movs	r1, #8
 800d15a:	68a2      	ldr	r2, [r4, #8]
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	440a      	add	r2, r1
 800d160:	440b      	add	r3, r1
 800d162:	60a2      	str	r2, [r4, #8]
 800d164:	6123      	str	r3, [r4, #16]
 800d166:	7561      	strb	r1, [r4, #21]
 800d168:	7da0      	ldrb	r0, [r4, #22]
 800d16a:	f080 0001 	eor.w	r0, r0, #1
 800d16e:	b002      	add	sp, #8
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d174:	466b      	mov	r3, sp
 800d176:	68a2      	ldr	r2, [r4, #8]
 800d178:	cb03      	ldmia	r3!, {r0, r1}
 800d17a:	6010      	str	r0, [r2, #0]
 800d17c:	6051      	str	r1, [r2, #4]
 800d17e:	e7eb      	b.n	800d158 <ucdr_serialize_uint64_t+0x10c>
 800d180:	68a2      	ldr	r2, [r4, #8]
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	7da0      	ldrb	r0, [r4, #22]
 800d186:	1b92      	subs	r2, r2, r6
 800d188:	f080 0001 	eor.w	r0, r0, #1
 800d18c:	1b9e      	subs	r6, r3, r6
 800d18e:	7567      	strb	r7, [r4, #21]
 800d190:	60a2      	str	r2, [r4, #8]
 800d192:	6126      	str	r6, [r4, #16]
 800d194:	b002      	add	sp, #8
 800d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19a:	68a3      	ldr	r3, [r4, #8]
 800d19c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	68a3      	ldr	r3, [r4, #8]
 800d1b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	68a3      	ldr	r3, [r4, #8]
 800d1c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d1c8:	701a      	strb	r2, [r3, #0]
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	f89d 2000 	ldrb.w	r2, [sp]
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	e78a      	b.n	800d0ea <ucdr_serialize_uint64_t+0x9e>
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	466d      	mov	r5, sp
 800d1d8:	4632      	mov	r2, r6
 800d1da:	4629      	mov	r1, r5
 800d1dc:	f00c fc06 	bl	80199ec <memcpy>
 800d1e0:	4642      	mov	r2, r8
 800d1e2:	68a0      	ldr	r0, [r4, #8]
 800d1e4:	19a9      	adds	r1, r5, r6
 800d1e6:	f00c fc01 	bl	80199ec <memcpy>
 800d1ea:	e77e      	b.n	800d0ea <ucdr_serialize_uint64_t+0x9e>

0800d1ec <ucdr_serialize_int8_t>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	f000 feb6 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d1f8:	b148      	cbz	r0, 800d20e <ucdr_serialize_int8_t+0x22>
 800d1fa:	2101      	movs	r1, #1
 800d1fc:	68a3      	ldr	r3, [r4, #8]
 800d1fe:	701d      	strb	r5, [r3, #0]
 800d200:	68a2      	ldr	r2, [r4, #8]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	440a      	add	r2, r1
 800d206:	440b      	add	r3, r1
 800d208:	60a2      	str	r2, [r4, #8]
 800d20a:	6123      	str	r3, [r4, #16]
 800d20c:	7561      	strb	r1, [r4, #21]
 800d20e:	7da0      	ldrb	r0, [r4, #22]
 800d210:	f080 0001 	eor.w	r0, r0, #1
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop

0800d218 <ucdr_deserialize_int8_t>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	460d      	mov	r5, r1
 800d21c:	2101      	movs	r1, #1
 800d21e:	4604      	mov	r4, r0
 800d220:	f000 fea0 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d224:	b150      	cbz	r0, 800d23c <ucdr_deserialize_int8_t+0x24>
 800d226:	2101      	movs	r1, #1
 800d228:	68a3      	ldr	r3, [r4, #8]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	702b      	strb	r3, [r5, #0]
 800d22e:	68a2      	ldr	r2, [r4, #8]
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	440a      	add	r2, r1
 800d234:	440b      	add	r3, r1
 800d236:	60a2      	str	r2, [r4, #8]
 800d238:	6123      	str	r3, [r4, #16]
 800d23a:	7561      	strb	r1, [r4, #21]
 800d23c:	7da0      	ldrb	r0, [r4, #22]
 800d23e:	f080 0001 	eor.w	r0, r0, #1
 800d242:	bd38      	pop	{r3, r4, r5, pc}

0800d244 <ucdr_serialize_int16_t>:
 800d244:	460b      	mov	r3, r1
 800d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24a:	2102      	movs	r1, #2
 800d24c:	b082      	sub	sp, #8
 800d24e:	4604      	mov	r4, r0
 800d250:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d254:	f000 fed8 	bl	800e008 <ucdr_buffer_alignment>
 800d258:	4601      	mov	r1, r0
 800d25a:	4620      	mov	r0, r4
 800d25c:	7d67      	ldrb	r7, [r4, #21]
 800d25e:	f000 ff19 	bl	800e094 <ucdr_advance_buffer>
 800d262:	4620      	mov	r0, r4
 800d264:	2102      	movs	r1, #2
 800d266:	f000 fe71 	bl	800df4c <ucdr_check_buffer_available_for>
 800d26a:	bb78      	cbnz	r0, 800d2cc <ucdr_serialize_int16_t+0x88>
 800d26c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d270:	42ab      	cmp	r3, r5
 800d272:	d926      	bls.n	800d2c2 <ucdr_serialize_int16_t+0x7e>
 800d274:	6922      	ldr	r2, [r4, #16]
 800d276:	1b5e      	subs	r6, r3, r5
 800d278:	4432      	add	r2, r6
 800d27a:	f1c6 0802 	rsb	r8, r6, #2
 800d27e:	4641      	mov	r1, r8
 800d280:	4620      	mov	r0, r4
 800d282:	60a3      	str	r3, [r4, #8]
 800d284:	6122      	str	r2, [r4, #16]
 800d286:	f000 fe6d 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d03b      	beq.n	800d306 <ucdr_serialize_int16_t+0xc2>
 800d28e:	7d23      	ldrb	r3, [r4, #20]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d04a      	beq.n	800d32a <ucdr_serialize_int16_t+0xe6>
 800d294:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d298:	702b      	strb	r3, [r5, #0]
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	d040      	beq.n	800d320 <ucdr_serialize_int16_t+0xdc>
 800d29e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2a2:	706b      	strb	r3, [r5, #1]
 800d2a4:	2102      	movs	r1, #2
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	68a2      	ldr	r2, [r4, #8]
 800d2aa:	7da0      	ldrb	r0, [r4, #22]
 800d2ac:	440b      	add	r3, r1
 800d2ae:	1b9e      	subs	r6, r3, r6
 800d2b0:	4442      	add	r2, r8
 800d2b2:	f080 0001 	eor.w	r0, r0, #1
 800d2b6:	6126      	str	r6, [r4, #16]
 800d2b8:	60a2      	str	r2, [r4, #8]
 800d2ba:	7561      	strb	r1, [r4, #21]
 800d2bc:	b002      	add	sp, #8
 800d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c2:	2102      	movs	r1, #2
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 fe4d 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d2ca:	b190      	cbz	r0, 800d2f2 <ucdr_serialize_int16_t+0xae>
 800d2cc:	7d23      	ldrb	r3, [r4, #20]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	68a3      	ldr	r3, [r4, #8]
 800d2d2:	d014      	beq.n	800d2fe <ucdr_serialize_int16_t+0xba>
 800d2d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d2d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2dc:	7019      	strb	r1, [r3, #0]
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	705a      	strb	r2, [r3, #1]
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	68a2      	ldr	r2, [r4, #8]
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	440a      	add	r2, r1
 800d2ea:	440b      	add	r3, r1
 800d2ec:	60a2      	str	r2, [r4, #8]
 800d2ee:	6123      	str	r3, [r4, #16]
 800d2f0:	7561      	strb	r1, [r4, #21]
 800d2f2:	7da0      	ldrb	r0, [r4, #22]
 800d2f4:	f080 0001 	eor.w	r0, r0, #1
 800d2f8:	b002      	add	sp, #8
 800d2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d302:	801a      	strh	r2, [r3, #0]
 800d304:	e7ed      	b.n	800d2e2 <ucdr_serialize_int16_t+0x9e>
 800d306:	68a2      	ldr	r2, [r4, #8]
 800d308:	6923      	ldr	r3, [r4, #16]
 800d30a:	7da0      	ldrb	r0, [r4, #22]
 800d30c:	1b92      	subs	r2, r2, r6
 800d30e:	f080 0001 	eor.w	r0, r0, #1
 800d312:	1b9e      	subs	r6, r3, r6
 800d314:	7567      	strb	r7, [r4, #21]
 800d316:	60a2      	str	r2, [r4, #8]
 800d318:	6126      	str	r6, [r4, #16]
 800d31a:	b002      	add	sp, #8
 800d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d320:	68a3      	ldr	r3, [r4, #8]
 800d322:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	e7bc      	b.n	800d2a4 <ucdr_serialize_int16_t+0x60>
 800d32a:	4628      	mov	r0, r5
 800d32c:	f10d 0506 	add.w	r5, sp, #6
 800d330:	4629      	mov	r1, r5
 800d332:	4632      	mov	r2, r6
 800d334:	f00c fb5a 	bl	80199ec <memcpy>
 800d338:	4642      	mov	r2, r8
 800d33a:	68a0      	ldr	r0, [r4, #8]
 800d33c:	19a9      	adds	r1, r5, r6
 800d33e:	f00c fb55 	bl	80199ec <memcpy>
 800d342:	e7af      	b.n	800d2a4 <ucdr_serialize_int16_t+0x60>

0800d344 <ucdr_deserialize_int16_t>:
 800d344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d348:	460d      	mov	r5, r1
 800d34a:	2102      	movs	r1, #2
 800d34c:	4604      	mov	r4, r0
 800d34e:	f000 fe5b 	bl	800e008 <ucdr_buffer_alignment>
 800d352:	4601      	mov	r1, r0
 800d354:	4620      	mov	r0, r4
 800d356:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d35a:	f000 fe9b 	bl	800e094 <ucdr_advance_buffer>
 800d35e:	4620      	mov	r0, r4
 800d360:	2102      	movs	r1, #2
 800d362:	f000 fdf3 	bl	800df4c <ucdr_check_buffer_available_for>
 800d366:	bb60      	cbnz	r0, 800d3c2 <ucdr_deserialize_int16_t+0x7e>
 800d368:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d36c:	42b3      	cmp	r3, r6
 800d36e:	d923      	bls.n	800d3b8 <ucdr_deserialize_int16_t+0x74>
 800d370:	6922      	ldr	r2, [r4, #16]
 800d372:	1b9f      	subs	r7, r3, r6
 800d374:	443a      	add	r2, r7
 800d376:	f1c7 0902 	rsb	r9, r7, #2
 800d37a:	4649      	mov	r1, r9
 800d37c:	4620      	mov	r0, r4
 800d37e:	60a3      	str	r3, [r4, #8]
 800d380:	6122      	str	r2, [r4, #16]
 800d382:	f000 fdef 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d386:	2800      	cmp	r0, #0
 800d388:	d034      	beq.n	800d3f4 <ucdr_deserialize_int16_t+0xb0>
 800d38a:	7d23      	ldrb	r3, [r4, #20]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d042      	beq.n	800d416 <ucdr_deserialize_int16_t+0xd2>
 800d390:	7873      	ldrb	r3, [r6, #1]
 800d392:	702b      	strb	r3, [r5, #0]
 800d394:	2f00      	cmp	r7, #0
 800d396:	d03a      	beq.n	800d40e <ucdr_deserialize_int16_t+0xca>
 800d398:	7833      	ldrb	r3, [r6, #0]
 800d39a:	706b      	strb	r3, [r5, #1]
 800d39c:	2102      	movs	r1, #2
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	68a2      	ldr	r2, [r4, #8]
 800d3a2:	7da0      	ldrb	r0, [r4, #22]
 800d3a4:	440b      	add	r3, r1
 800d3a6:	1bdf      	subs	r7, r3, r7
 800d3a8:	444a      	add	r2, r9
 800d3aa:	7561      	strb	r1, [r4, #21]
 800d3ac:	6127      	str	r7, [r4, #16]
 800d3ae:	60a2      	str	r2, [r4, #8]
 800d3b0:	f080 0001 	eor.w	r0, r0, #1
 800d3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b8:	2102      	movs	r1, #2
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 fdd2 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d3c0:	b180      	cbz	r0, 800d3e4 <ucdr_deserialize_int16_t+0xa0>
 800d3c2:	7d23      	ldrb	r3, [r4, #20]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	d011      	beq.n	800d3ee <ucdr_deserialize_int16_t+0xaa>
 800d3ca:	785b      	ldrb	r3, [r3, #1]
 800d3cc:	702b      	strb	r3, [r5, #0]
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	706b      	strb	r3, [r5, #1]
 800d3d4:	2102      	movs	r1, #2
 800d3d6:	68a2      	ldr	r2, [r4, #8]
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	440a      	add	r2, r1
 800d3dc:	440b      	add	r3, r1
 800d3de:	60a2      	str	r2, [r4, #8]
 800d3e0:	6123      	str	r3, [r4, #16]
 800d3e2:	7561      	strb	r1, [r4, #21]
 800d3e4:	7da0      	ldrb	r0, [r4, #22]
 800d3e6:	f080 0001 	eor.w	r0, r0, #1
 800d3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	802b      	strh	r3, [r5, #0]
 800d3f2:	e7ef      	b.n	800d3d4 <ucdr_deserialize_int16_t+0x90>
 800d3f4:	68a2      	ldr	r2, [r4, #8]
 800d3f6:	6923      	ldr	r3, [r4, #16]
 800d3f8:	7da0      	ldrb	r0, [r4, #22]
 800d3fa:	1bd2      	subs	r2, r2, r7
 800d3fc:	f884 8015 	strb.w	r8, [r4, #21]
 800d400:	1bdf      	subs	r7, r3, r7
 800d402:	60a2      	str	r2, [r4, #8]
 800d404:	6127      	str	r7, [r4, #16]
 800d406:	f080 0001 	eor.w	r0, r0, #1
 800d40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	706b      	strb	r3, [r5, #1]
 800d414:	e7c2      	b.n	800d39c <ucdr_deserialize_int16_t+0x58>
 800d416:	4631      	mov	r1, r6
 800d418:	463a      	mov	r2, r7
 800d41a:	4628      	mov	r0, r5
 800d41c:	f00c fae6 	bl	80199ec <memcpy>
 800d420:	464a      	mov	r2, r9
 800d422:	68a1      	ldr	r1, [r4, #8]
 800d424:	19e8      	adds	r0, r5, r7
 800d426:	f00c fae1 	bl	80199ec <memcpy>
 800d42a:	e7b7      	b.n	800d39c <ucdr_deserialize_int16_t+0x58>

0800d42c <ucdr_serialize_int32_t>:
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	b082      	sub	sp, #8
 800d432:	9101      	str	r1, [sp, #4]
 800d434:	2104      	movs	r1, #4
 800d436:	4604      	mov	r4, r0
 800d438:	f000 fde6 	bl	800e008 <ucdr_buffer_alignment>
 800d43c:	4601      	mov	r1, r0
 800d43e:	4620      	mov	r0, r4
 800d440:	7d67      	ldrb	r7, [r4, #21]
 800d442:	f000 fe27 	bl	800e094 <ucdr_advance_buffer>
 800d446:	4620      	mov	r0, r4
 800d448:	2104      	movs	r1, #4
 800d44a:	f000 fd7f 	bl	800df4c <ucdr_check_buffer_available_for>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d139      	bne.n	800d4c6 <ucdr_serialize_int32_t+0x9a>
 800d452:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d456:	42ab      	cmp	r3, r5
 800d458:	d930      	bls.n	800d4bc <ucdr_serialize_int32_t+0x90>
 800d45a:	6922      	ldr	r2, [r4, #16]
 800d45c:	1b5e      	subs	r6, r3, r5
 800d45e:	4432      	add	r2, r6
 800d460:	f1c6 0804 	rsb	r8, r6, #4
 800d464:	4641      	mov	r1, r8
 800d466:	4620      	mov	r0, r4
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	6122      	str	r2, [r4, #16]
 800d46c:	f000 fd7a 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d470:	2800      	cmp	r0, #0
 800d472:	d04c      	beq.n	800d50e <ucdr_serialize_int32_t+0xe2>
 800d474:	7d23      	ldrb	r3, [r4, #20]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d063      	beq.n	800d542 <ucdr_serialize_int32_t+0x116>
 800d47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d47e:	702b      	strb	r3, [r5, #0]
 800d480:	2e00      	cmp	r6, #0
 800d482:	d051      	beq.n	800d528 <ucdr_serialize_int32_t+0xfc>
 800d484:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d488:	2e01      	cmp	r6, #1
 800d48a:	706b      	strb	r3, [r5, #1]
 800d48c:	d050      	beq.n	800d530 <ucdr_serialize_int32_t+0x104>
 800d48e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d492:	2e02      	cmp	r6, #2
 800d494:	70ab      	strb	r3, [r5, #2]
 800d496:	d04f      	beq.n	800d538 <ucdr_serialize_int32_t+0x10c>
 800d498:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d49c:	70eb      	strb	r3, [r5, #3]
 800d49e:	2104      	movs	r1, #4
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	68a2      	ldr	r2, [r4, #8]
 800d4a4:	7da0      	ldrb	r0, [r4, #22]
 800d4a6:	440b      	add	r3, r1
 800d4a8:	1b9e      	subs	r6, r3, r6
 800d4aa:	4442      	add	r2, r8
 800d4ac:	f080 0001 	eor.w	r0, r0, #1
 800d4b0:	6126      	str	r6, [r4, #16]
 800d4b2:	60a2      	str	r2, [r4, #8]
 800d4b4:	7561      	strb	r1, [r4, #21]
 800d4b6:	b002      	add	sp, #8
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	2104      	movs	r1, #4
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 fd50 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d4c4:	b1d0      	cbz	r0, 800d4fc <ucdr_serialize_int32_t+0xd0>
 800d4c6:	7d23      	ldrb	r3, [r4, #20]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	68a3      	ldr	r3, [r4, #8]
 800d4cc:	d01c      	beq.n	800d508 <ucdr_serialize_int32_t+0xdc>
 800d4ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d4d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4d6:	7019      	strb	r1, [r3, #0]
 800d4d8:	68a3      	ldr	r3, [r4, #8]
 800d4da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d4de:	705a      	strb	r2, [r3, #1]
 800d4e0:	68a3      	ldr	r3, [r4, #8]
 800d4e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4e6:	7099      	strb	r1, [r3, #2]
 800d4e8:	68a3      	ldr	r3, [r4, #8]
 800d4ea:	70da      	strb	r2, [r3, #3]
 800d4ec:	2104      	movs	r1, #4
 800d4ee:	68a2      	ldr	r2, [r4, #8]
 800d4f0:	6923      	ldr	r3, [r4, #16]
 800d4f2:	440a      	add	r2, r1
 800d4f4:	440b      	add	r3, r1
 800d4f6:	60a2      	str	r2, [r4, #8]
 800d4f8:	6123      	str	r3, [r4, #16]
 800d4fa:	7561      	strb	r1, [r4, #21]
 800d4fc:	7da0      	ldrb	r0, [r4, #22]
 800d4fe:	f080 0001 	eor.w	r0, r0, #1
 800d502:	b002      	add	sp, #8
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	9a01      	ldr	r2, [sp, #4]
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	e7ee      	b.n	800d4ec <ucdr_serialize_int32_t+0xc0>
 800d50e:	68a2      	ldr	r2, [r4, #8]
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	7da0      	ldrb	r0, [r4, #22]
 800d514:	1b92      	subs	r2, r2, r6
 800d516:	f080 0001 	eor.w	r0, r0, #1
 800d51a:	1b9e      	subs	r6, r3, r6
 800d51c:	7567      	strb	r7, [r4, #21]
 800d51e:	60a2      	str	r2, [r4, #8]
 800d520:	6126      	str	r6, [r4, #16]
 800d522:	b002      	add	sp, #8
 800d524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d528:	68a3      	ldr	r3, [r4, #8]
 800d52a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d536:	701a      	strb	r2, [r3, #0]
 800d538:	68a3      	ldr	r3, [r4, #8]
 800d53a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	e7ad      	b.n	800d49e <ucdr_serialize_int32_t+0x72>
 800d542:	4628      	mov	r0, r5
 800d544:	ad01      	add	r5, sp, #4
 800d546:	4629      	mov	r1, r5
 800d548:	4632      	mov	r2, r6
 800d54a:	f00c fa4f 	bl	80199ec <memcpy>
 800d54e:	4642      	mov	r2, r8
 800d550:	68a0      	ldr	r0, [r4, #8]
 800d552:	19a9      	adds	r1, r5, r6
 800d554:	f00c fa4a 	bl	80199ec <memcpy>
 800d558:	e7a1      	b.n	800d49e <ucdr_serialize_int32_t+0x72>
 800d55a:	bf00      	nop

0800d55c <ucdr_deserialize_int32_t>:
 800d55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d560:	460d      	mov	r5, r1
 800d562:	2104      	movs	r1, #4
 800d564:	4604      	mov	r4, r0
 800d566:	f000 fd4f 	bl	800e008 <ucdr_buffer_alignment>
 800d56a:	4601      	mov	r1, r0
 800d56c:	4620      	mov	r0, r4
 800d56e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d572:	f000 fd8f 	bl	800e094 <ucdr_advance_buffer>
 800d576:	4620      	mov	r0, r4
 800d578:	2104      	movs	r1, #4
 800d57a:	f000 fce7 	bl	800df4c <ucdr_check_buffer_available_for>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d138      	bne.n	800d5f4 <ucdr_deserialize_int32_t+0x98>
 800d582:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d586:	42b3      	cmp	r3, r6
 800d588:	d92f      	bls.n	800d5ea <ucdr_deserialize_int32_t+0x8e>
 800d58a:	6922      	ldr	r2, [r4, #16]
 800d58c:	1b9f      	subs	r7, r3, r6
 800d58e:	443a      	add	r2, r7
 800d590:	f1c7 0904 	rsb	r9, r7, #4
 800d594:	4649      	mov	r1, r9
 800d596:	4620      	mov	r0, r4
 800d598:	60a3      	str	r3, [r4, #8]
 800d59a:	6122      	str	r2, [r4, #16]
 800d59c:	f000 fce2 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d046      	beq.n	800d632 <ucdr_deserialize_int32_t+0xd6>
 800d5a4:	7d23      	ldrb	r3, [r4, #20]
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d05c      	beq.n	800d664 <ucdr_deserialize_int32_t+0x108>
 800d5aa:	78f3      	ldrb	r3, [r6, #3]
 800d5ac:	702b      	strb	r3, [r5, #0]
 800d5ae:	2f00      	cmp	r7, #0
 800d5b0:	d04c      	beq.n	800d64c <ucdr_deserialize_int32_t+0xf0>
 800d5b2:	78b2      	ldrb	r2, [r6, #2]
 800d5b4:	2f01      	cmp	r7, #1
 800d5b6:	f105 0302 	add.w	r3, r5, #2
 800d5ba:	706a      	strb	r2, [r5, #1]
 800d5bc:	d04a      	beq.n	800d654 <ucdr_deserialize_int32_t+0xf8>
 800d5be:	7872      	ldrb	r2, [r6, #1]
 800d5c0:	2f02      	cmp	r7, #2
 800d5c2:	f105 0303 	add.w	r3, r5, #3
 800d5c6:	70aa      	strb	r2, [r5, #2]
 800d5c8:	d048      	beq.n	800d65c <ucdr_deserialize_int32_t+0x100>
 800d5ca:	7833      	ldrb	r3, [r6, #0]
 800d5cc:	70eb      	strb	r3, [r5, #3]
 800d5ce:	2104      	movs	r1, #4
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	68a2      	ldr	r2, [r4, #8]
 800d5d4:	7da0      	ldrb	r0, [r4, #22]
 800d5d6:	440b      	add	r3, r1
 800d5d8:	1bdf      	subs	r7, r3, r7
 800d5da:	444a      	add	r2, r9
 800d5dc:	7561      	strb	r1, [r4, #21]
 800d5de:	6127      	str	r7, [r4, #16]
 800d5e0:	60a2      	str	r2, [r4, #8]
 800d5e2:	f080 0001 	eor.w	r0, r0, #1
 800d5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ea:	2104      	movs	r1, #4
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 fcb9 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d5f2:	b1b0      	cbz	r0, 800d622 <ucdr_deserialize_int32_t+0xc6>
 800d5f4:	7d23      	ldrb	r3, [r4, #20]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	d017      	beq.n	800d62c <ucdr_deserialize_int32_t+0xd0>
 800d5fc:	78db      	ldrb	r3, [r3, #3]
 800d5fe:	702b      	strb	r3, [r5, #0]
 800d600:	68a3      	ldr	r3, [r4, #8]
 800d602:	789b      	ldrb	r3, [r3, #2]
 800d604:	706b      	strb	r3, [r5, #1]
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	785b      	ldrb	r3, [r3, #1]
 800d60a:	70ab      	strb	r3, [r5, #2]
 800d60c:	68a3      	ldr	r3, [r4, #8]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	70eb      	strb	r3, [r5, #3]
 800d612:	2104      	movs	r1, #4
 800d614:	68a2      	ldr	r2, [r4, #8]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	440a      	add	r2, r1
 800d61a:	440b      	add	r3, r1
 800d61c:	60a2      	str	r2, [r4, #8]
 800d61e:	6123      	str	r3, [r4, #16]
 800d620:	7561      	strb	r1, [r4, #21]
 800d622:	7da0      	ldrb	r0, [r4, #22]
 800d624:	f080 0001 	eor.w	r0, r0, #1
 800d628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	602b      	str	r3, [r5, #0]
 800d630:	e7ef      	b.n	800d612 <ucdr_deserialize_int32_t+0xb6>
 800d632:	68a2      	ldr	r2, [r4, #8]
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	7da0      	ldrb	r0, [r4, #22]
 800d638:	1bd2      	subs	r2, r2, r7
 800d63a:	f884 8015 	strb.w	r8, [r4, #21]
 800d63e:	1bdf      	subs	r7, r3, r7
 800d640:	60a2      	str	r2, [r4, #8]
 800d642:	6127      	str	r7, [r4, #16]
 800d644:	f080 0001 	eor.w	r0, r0, #1
 800d648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64c:	68a2      	ldr	r2, [r4, #8]
 800d64e:	1cab      	adds	r3, r5, #2
 800d650:	7892      	ldrb	r2, [r2, #2]
 800d652:	706a      	strb	r2, [r5, #1]
 800d654:	68a2      	ldr	r2, [r4, #8]
 800d656:	7852      	ldrb	r2, [r2, #1]
 800d658:	f803 2b01 	strb.w	r2, [r3], #1
 800d65c:	68a2      	ldr	r2, [r4, #8]
 800d65e:	7812      	ldrb	r2, [r2, #0]
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	e7b4      	b.n	800d5ce <ucdr_deserialize_int32_t+0x72>
 800d664:	4631      	mov	r1, r6
 800d666:	463a      	mov	r2, r7
 800d668:	4628      	mov	r0, r5
 800d66a:	f00c f9bf 	bl	80199ec <memcpy>
 800d66e:	464a      	mov	r2, r9
 800d670:	68a1      	ldr	r1, [r4, #8]
 800d672:	19e8      	adds	r0, r5, r7
 800d674:	f00c f9ba 	bl	80199ec <memcpy>
 800d678:	e7a9      	b.n	800d5ce <ucdr_deserialize_int32_t+0x72>
 800d67a:	bf00      	nop

0800d67c <ucdr_serialize_endian_float>:
 800d67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d680:	460d      	mov	r5, r1
 800d682:	b083      	sub	sp, #12
 800d684:	2104      	movs	r1, #4
 800d686:	4604      	mov	r4, r0
 800d688:	9201      	str	r2, [sp, #4]
 800d68a:	f000 fcbd 	bl	800e008 <ucdr_buffer_alignment>
 800d68e:	4601      	mov	r1, r0
 800d690:	4620      	mov	r0, r4
 800d692:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d696:	f000 fcfd 	bl	800e094 <ucdr_advance_buffer>
 800d69a:	4620      	mov	r0, r4
 800d69c:	2104      	movs	r1, #4
 800d69e:	f000 fc55 	bl	800df4c <ucdr_check_buffer_available_for>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d138      	bne.n	800d718 <ucdr_serialize_endian_float+0x9c>
 800d6a6:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d6aa:	42b3      	cmp	r3, r6
 800d6ac:	d92f      	bls.n	800d70e <ucdr_serialize_endian_float+0x92>
 800d6ae:	6922      	ldr	r2, [r4, #16]
 800d6b0:	1b9f      	subs	r7, r3, r6
 800d6b2:	443a      	add	r2, r7
 800d6b4:	f1c7 0904 	rsb	r9, r7, #4
 800d6b8:	4649      	mov	r1, r9
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	60a3      	str	r3, [r4, #8]
 800d6be:	6122      	str	r2, [r4, #16]
 800d6c0:	f000 fc50 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d04a      	beq.n	800d75e <ucdr_serialize_endian_float+0xe2>
 800d6c8:	2d01      	cmp	r5, #1
 800d6ca:	d063      	beq.n	800d794 <ucdr_serialize_endian_float+0x118>
 800d6cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d6d0:	7033      	strb	r3, [r6, #0]
 800d6d2:	2f00      	cmp	r7, #0
 800d6d4:	d051      	beq.n	800d77a <ucdr_serialize_endian_float+0xfe>
 800d6d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6da:	2f01      	cmp	r7, #1
 800d6dc:	7073      	strb	r3, [r6, #1]
 800d6de:	d050      	beq.n	800d782 <ucdr_serialize_endian_float+0x106>
 800d6e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d6e4:	2f02      	cmp	r7, #2
 800d6e6:	70b3      	strb	r3, [r6, #2]
 800d6e8:	d04f      	beq.n	800d78a <ucdr_serialize_endian_float+0x10e>
 800d6ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6ee:	70f3      	strb	r3, [r6, #3]
 800d6f0:	2104      	movs	r1, #4
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	68a2      	ldr	r2, [r4, #8]
 800d6f6:	7da0      	ldrb	r0, [r4, #22]
 800d6f8:	440b      	add	r3, r1
 800d6fa:	1bdf      	subs	r7, r3, r7
 800d6fc:	444a      	add	r2, r9
 800d6fe:	f080 0001 	eor.w	r0, r0, #1
 800d702:	6127      	str	r7, [r4, #16]
 800d704:	60a2      	str	r2, [r4, #8]
 800d706:	7561      	strb	r1, [r4, #21]
 800d708:	b003      	add	sp, #12
 800d70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70e:	2104      	movs	r1, #4
 800d710:	4620      	mov	r0, r4
 800d712:	f000 fc27 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d716:	b1c8      	cbz	r0, 800d74c <ucdr_serialize_endian_float+0xd0>
 800d718:	2d01      	cmp	r5, #1
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	d01c      	beq.n	800d758 <ucdr_serialize_endian_float+0xdc>
 800d71e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d722:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d726:	7019      	strb	r1, [r3, #0]
 800d728:	68a3      	ldr	r3, [r4, #8]
 800d72a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d72e:	705a      	strb	r2, [r3, #1]
 800d730:	68a3      	ldr	r3, [r4, #8]
 800d732:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d736:	7099      	strb	r1, [r3, #2]
 800d738:	68a3      	ldr	r3, [r4, #8]
 800d73a:	70da      	strb	r2, [r3, #3]
 800d73c:	2104      	movs	r1, #4
 800d73e:	68a2      	ldr	r2, [r4, #8]
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	440a      	add	r2, r1
 800d744:	440b      	add	r3, r1
 800d746:	60a2      	str	r2, [r4, #8]
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	7561      	strb	r1, [r4, #21]
 800d74c:	7da0      	ldrb	r0, [r4, #22]
 800d74e:	f080 0001 	eor.w	r0, r0, #1
 800d752:	b003      	add	sp, #12
 800d754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d758:	9a01      	ldr	r2, [sp, #4]
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	e7ee      	b.n	800d73c <ucdr_serialize_endian_float+0xc0>
 800d75e:	68a2      	ldr	r2, [r4, #8]
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	7da0      	ldrb	r0, [r4, #22]
 800d764:	1bd2      	subs	r2, r2, r7
 800d766:	f080 0001 	eor.w	r0, r0, #1
 800d76a:	1bdf      	subs	r7, r3, r7
 800d76c:	f884 8015 	strb.w	r8, [r4, #21]
 800d770:	60a2      	str	r2, [r4, #8]
 800d772:	6127      	str	r7, [r4, #16]
 800d774:	b003      	add	sp, #12
 800d776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d780:	701a      	strb	r2, [r3, #0]
 800d782:	68a3      	ldr	r3, [r4, #8]
 800d784:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	e7ad      	b.n	800d6f0 <ucdr_serialize_endian_float+0x74>
 800d794:	ad01      	add	r5, sp, #4
 800d796:	4629      	mov	r1, r5
 800d798:	463a      	mov	r2, r7
 800d79a:	4630      	mov	r0, r6
 800d79c:	f00c f926 	bl	80199ec <memcpy>
 800d7a0:	464a      	mov	r2, r9
 800d7a2:	68a0      	ldr	r0, [r4, #8]
 800d7a4:	19e9      	adds	r1, r5, r7
 800d7a6:	f00c f921 	bl	80199ec <memcpy>
 800d7aa:	e7a1      	b.n	800d6f0 <ucdr_serialize_endian_float+0x74>

0800d7ac <ucdr_deserialize_endian_float>:
 800d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b0:	460e      	mov	r6, r1
 800d7b2:	2104      	movs	r1, #4
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	4615      	mov	r5, r2
 800d7b8:	f000 fc26 	bl	800e008 <ucdr_buffer_alignment>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d7c4:	f000 fc66 	bl	800e094 <ucdr_advance_buffer>
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	2104      	movs	r1, #4
 800d7cc:	f000 fbbe 	bl	800df4c <ucdr_check_buffer_available_for>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d13c      	bne.n	800d84e <ucdr_deserialize_endian_float+0xa2>
 800d7d4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d7d8:	42bb      	cmp	r3, r7
 800d7da:	d933      	bls.n	800d844 <ucdr_deserialize_endian_float+0x98>
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	eba3 0807 	sub.w	r8, r3, r7
 800d7e2:	4442      	add	r2, r8
 800d7e4:	f1c8 0a04 	rsb	sl, r8, #4
 800d7e8:	4651      	mov	r1, sl
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	6122      	str	r2, [r4, #16]
 800d7f0:	f000 fbb8 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d048      	beq.n	800d88a <ucdr_deserialize_endian_float+0xde>
 800d7f8:	2e01      	cmp	r6, #1
 800d7fa:	d061      	beq.n	800d8c0 <ucdr_deserialize_endian_float+0x114>
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	702b      	strb	r3, [r5, #0]
 800d800:	f1b8 0f00 	cmp.w	r8, #0
 800d804:	d050      	beq.n	800d8a8 <ucdr_deserialize_endian_float+0xfc>
 800d806:	78ba      	ldrb	r2, [r7, #2]
 800d808:	f1b8 0f01 	cmp.w	r8, #1
 800d80c:	f105 0302 	add.w	r3, r5, #2
 800d810:	706a      	strb	r2, [r5, #1]
 800d812:	d04d      	beq.n	800d8b0 <ucdr_deserialize_endian_float+0x104>
 800d814:	787a      	ldrb	r2, [r7, #1]
 800d816:	f1b8 0f02 	cmp.w	r8, #2
 800d81a:	f105 0303 	add.w	r3, r5, #3
 800d81e:	70aa      	strb	r2, [r5, #2]
 800d820:	d04a      	beq.n	800d8b8 <ucdr_deserialize_endian_float+0x10c>
 800d822:	783b      	ldrb	r3, [r7, #0]
 800d824:	70eb      	strb	r3, [r5, #3]
 800d826:	2104      	movs	r1, #4
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	68a2      	ldr	r2, [r4, #8]
 800d82c:	7da0      	ldrb	r0, [r4, #22]
 800d82e:	440b      	add	r3, r1
 800d830:	eba3 0308 	sub.w	r3, r3, r8
 800d834:	4452      	add	r2, sl
 800d836:	7561      	strb	r1, [r4, #21]
 800d838:	6123      	str	r3, [r4, #16]
 800d83a:	60a2      	str	r2, [r4, #8]
 800d83c:	f080 0001 	eor.w	r0, r0, #1
 800d840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d844:	2104      	movs	r1, #4
 800d846:	4620      	mov	r0, r4
 800d848:	f000 fb8c 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d84c:	b1a8      	cbz	r0, 800d87a <ucdr_deserialize_endian_float+0xce>
 800d84e:	2e01      	cmp	r6, #1
 800d850:	68a3      	ldr	r3, [r4, #8]
 800d852:	d017      	beq.n	800d884 <ucdr_deserialize_endian_float+0xd8>
 800d854:	78db      	ldrb	r3, [r3, #3]
 800d856:	702b      	strb	r3, [r5, #0]
 800d858:	68a3      	ldr	r3, [r4, #8]
 800d85a:	789b      	ldrb	r3, [r3, #2]
 800d85c:	706b      	strb	r3, [r5, #1]
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	785b      	ldrb	r3, [r3, #1]
 800d862:	70ab      	strb	r3, [r5, #2]
 800d864:	68a3      	ldr	r3, [r4, #8]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	70eb      	strb	r3, [r5, #3]
 800d86a:	2104      	movs	r1, #4
 800d86c:	68a2      	ldr	r2, [r4, #8]
 800d86e:	6923      	ldr	r3, [r4, #16]
 800d870:	440a      	add	r2, r1
 800d872:	440b      	add	r3, r1
 800d874:	60a2      	str	r2, [r4, #8]
 800d876:	6123      	str	r3, [r4, #16]
 800d878:	7561      	strb	r1, [r4, #21]
 800d87a:	7da0      	ldrb	r0, [r4, #22]
 800d87c:	f080 0001 	eor.w	r0, r0, #1
 800d880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	602b      	str	r3, [r5, #0]
 800d888:	e7ef      	b.n	800d86a <ucdr_deserialize_endian_float+0xbe>
 800d88a:	68a2      	ldr	r2, [r4, #8]
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	7da0      	ldrb	r0, [r4, #22]
 800d890:	eba2 0208 	sub.w	r2, r2, r8
 800d894:	eba3 0308 	sub.w	r3, r3, r8
 800d898:	f884 9015 	strb.w	r9, [r4, #21]
 800d89c:	60a2      	str	r2, [r4, #8]
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	f080 0001 	eor.w	r0, r0, #1
 800d8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a8:	68a2      	ldr	r2, [r4, #8]
 800d8aa:	1cab      	adds	r3, r5, #2
 800d8ac:	7892      	ldrb	r2, [r2, #2]
 800d8ae:	706a      	strb	r2, [r5, #1]
 800d8b0:	68a2      	ldr	r2, [r4, #8]
 800d8b2:	7852      	ldrb	r2, [r2, #1]
 800d8b4:	f803 2b01 	strb.w	r2, [r3], #1
 800d8b8:	68a2      	ldr	r2, [r4, #8]
 800d8ba:	7812      	ldrb	r2, [r2, #0]
 800d8bc:	701a      	strb	r2, [r3, #0]
 800d8be:	e7b2      	b.n	800d826 <ucdr_deserialize_endian_float+0x7a>
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	f00c f891 	bl	80199ec <memcpy>
 800d8ca:	4652      	mov	r2, sl
 800d8cc:	68a1      	ldr	r1, [r4, #8]
 800d8ce:	eb05 0008 	add.w	r0, r5, r8
 800d8d2:	f00c f88b 	bl	80199ec <memcpy>
 800d8d6:	e7a6      	b.n	800d826 <ucdr_deserialize_endian_float+0x7a>

0800d8d8 <ucdr_serialize_double>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	2108      	movs	r1, #8
 800d8de:	b082      	sub	sp, #8
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	e9cd 2300 	strd	r2, r3, [sp]
 800d8e6:	f000 fb8f 	bl	800e008 <ucdr_buffer_alignment>
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	7d67      	ldrb	r7, [r4, #21]
 800d8f0:	f000 fbd0 	bl	800e094 <ucdr_advance_buffer>
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	2108      	movs	r1, #8
 800d8f8:	f000 fb28 	bl	800df4c <ucdr_check_buffer_available_for>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d14e      	bne.n	800d99e <ucdr_serialize_double+0xc6>
 800d900:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d904:	42ab      	cmp	r3, r5
 800d906:	d945      	bls.n	800d994 <ucdr_serialize_double+0xbc>
 800d908:	6922      	ldr	r2, [r4, #16]
 800d90a:	1b5e      	subs	r6, r3, r5
 800d90c:	4432      	add	r2, r6
 800d90e:	f1c6 0808 	rsb	r8, r6, #8
 800d912:	4641      	mov	r1, r8
 800d914:	4620      	mov	r0, r4
 800d916:	60a3      	str	r3, [r4, #8]
 800d918:	6122      	str	r2, [r4, #16]
 800d91a:	f000 fb23 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d074      	beq.n	800da0c <ucdr_serialize_double+0x134>
 800d922:	7d23      	ldrb	r3, [r4, #20]
 800d924:	2b01      	cmp	r3, #1
 800d926:	f000 809b 	beq.w	800da60 <ucdr_serialize_double+0x188>
 800d92a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d92e:	702b      	strb	r3, [r5, #0]
 800d930:	2e00      	cmp	r6, #0
 800d932:	d078      	beq.n	800da26 <ucdr_serialize_double+0x14e>
 800d934:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d938:	2e01      	cmp	r6, #1
 800d93a:	706b      	strb	r3, [r5, #1]
 800d93c:	d077      	beq.n	800da2e <ucdr_serialize_double+0x156>
 800d93e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d942:	2e02      	cmp	r6, #2
 800d944:	70ab      	strb	r3, [r5, #2]
 800d946:	d076      	beq.n	800da36 <ucdr_serialize_double+0x15e>
 800d948:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d94c:	2e03      	cmp	r6, #3
 800d94e:	70eb      	strb	r3, [r5, #3]
 800d950:	d075      	beq.n	800da3e <ucdr_serialize_double+0x166>
 800d952:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d956:	2e04      	cmp	r6, #4
 800d958:	712b      	strb	r3, [r5, #4]
 800d95a:	d074      	beq.n	800da46 <ucdr_serialize_double+0x16e>
 800d95c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d960:	2e05      	cmp	r6, #5
 800d962:	716b      	strb	r3, [r5, #5]
 800d964:	d073      	beq.n	800da4e <ucdr_serialize_double+0x176>
 800d966:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d96a:	2e06      	cmp	r6, #6
 800d96c:	71ab      	strb	r3, [r5, #6]
 800d96e:	d072      	beq.n	800da56 <ucdr_serialize_double+0x17e>
 800d970:	f89d 3000 	ldrb.w	r3, [sp]
 800d974:	71eb      	strb	r3, [r5, #7]
 800d976:	2108      	movs	r1, #8
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	68a2      	ldr	r2, [r4, #8]
 800d97c:	7da0      	ldrb	r0, [r4, #22]
 800d97e:	440b      	add	r3, r1
 800d980:	1b9e      	subs	r6, r3, r6
 800d982:	4442      	add	r2, r8
 800d984:	f080 0001 	eor.w	r0, r0, #1
 800d988:	6126      	str	r6, [r4, #16]
 800d98a:	60a2      	str	r2, [r4, #8]
 800d98c:	7561      	strb	r1, [r4, #21]
 800d98e:	b002      	add	sp, #8
 800d990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d994:	2108      	movs	r1, #8
 800d996:	4620      	mov	r0, r4
 800d998:	f000 fae4 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800d99c:	b350      	cbz	r0, 800d9f4 <ucdr_serialize_double+0x11c>
 800d99e:	7d23      	ldrb	r3, [r4, #20]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d02d      	beq.n	800da00 <ucdr_serialize_double+0x128>
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d9aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9ae:	7019      	strb	r1, [r3, #0]
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d9b6:	705a      	strb	r2, [r3, #1]
 800d9b8:	68a3      	ldr	r3, [r4, #8]
 800d9ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9be:	7099      	strb	r1, [r3, #2]
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d9c6:	70da      	strb	r2, [r3, #3]
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9ce:	7119      	strb	r1, [r3, #4]
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d9d6:	715a      	strb	r2, [r3, #5]
 800d9d8:	68a3      	ldr	r3, [r4, #8]
 800d9da:	f89d 2000 	ldrb.w	r2, [sp]
 800d9de:	7199      	strb	r1, [r3, #6]
 800d9e0:	68a3      	ldr	r3, [r4, #8]
 800d9e2:	71da      	strb	r2, [r3, #7]
 800d9e4:	2108      	movs	r1, #8
 800d9e6:	68a2      	ldr	r2, [r4, #8]
 800d9e8:	6923      	ldr	r3, [r4, #16]
 800d9ea:	440a      	add	r2, r1
 800d9ec:	440b      	add	r3, r1
 800d9ee:	60a2      	str	r2, [r4, #8]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	7561      	strb	r1, [r4, #21]
 800d9f4:	7da0      	ldrb	r0, [r4, #22]
 800d9f6:	f080 0001 	eor.w	r0, r0, #1
 800d9fa:	b002      	add	sp, #8
 800d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da00:	466b      	mov	r3, sp
 800da02:	68a2      	ldr	r2, [r4, #8]
 800da04:	cb03      	ldmia	r3!, {r0, r1}
 800da06:	6010      	str	r0, [r2, #0]
 800da08:	6051      	str	r1, [r2, #4]
 800da0a:	e7eb      	b.n	800d9e4 <ucdr_serialize_double+0x10c>
 800da0c:	68a2      	ldr	r2, [r4, #8]
 800da0e:	6923      	ldr	r3, [r4, #16]
 800da10:	7da0      	ldrb	r0, [r4, #22]
 800da12:	1b92      	subs	r2, r2, r6
 800da14:	f080 0001 	eor.w	r0, r0, #1
 800da18:	1b9e      	subs	r6, r3, r6
 800da1a:	7567      	strb	r7, [r4, #21]
 800da1c:	60a2      	str	r2, [r4, #8]
 800da1e:	6126      	str	r6, [r4, #16]
 800da20:	b002      	add	sp, #8
 800da22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da26:	68a3      	ldr	r3, [r4, #8]
 800da28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da2c:	701a      	strb	r2, [r3, #0]
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da34:	701a      	strb	r2, [r3, #0]
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	68a3      	ldr	r3, [r4, #8]
 800da40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da44:	701a      	strb	r2, [r3, #0]
 800da46:	68a3      	ldr	r3, [r4, #8]
 800da48:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da4c:	701a      	strb	r2, [r3, #0]
 800da4e:	68a3      	ldr	r3, [r4, #8]
 800da50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da54:	701a      	strb	r2, [r3, #0]
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	f89d 2000 	ldrb.w	r2, [sp]
 800da5c:	701a      	strb	r2, [r3, #0]
 800da5e:	e78a      	b.n	800d976 <ucdr_serialize_double+0x9e>
 800da60:	4628      	mov	r0, r5
 800da62:	466d      	mov	r5, sp
 800da64:	4632      	mov	r2, r6
 800da66:	4629      	mov	r1, r5
 800da68:	f00b ffc0 	bl	80199ec <memcpy>
 800da6c:	4642      	mov	r2, r8
 800da6e:	68a0      	ldr	r0, [r4, #8]
 800da70:	19a9      	adds	r1, r5, r6
 800da72:	f00b ffbb 	bl	80199ec <memcpy>
 800da76:	e77e      	b.n	800d976 <ucdr_serialize_double+0x9e>

0800da78 <ucdr_serialize_endian_double>:
 800da78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da7c:	460d      	mov	r5, r1
 800da7e:	b083      	sub	sp, #12
 800da80:	2108      	movs	r1, #8
 800da82:	4604      	mov	r4, r0
 800da84:	e9cd 2300 	strd	r2, r3, [sp]
 800da88:	f000 fabe 	bl	800e008 <ucdr_buffer_alignment>
 800da8c:	4601      	mov	r1, r0
 800da8e:	4620      	mov	r0, r4
 800da90:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da94:	f000 fafe 	bl	800e094 <ucdr_advance_buffer>
 800da98:	4620      	mov	r0, r4
 800da9a:	2108      	movs	r1, #8
 800da9c:	f000 fa56 	bl	800df4c <ucdr_check_buffer_available_for>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d14d      	bne.n	800db40 <ucdr_serialize_endian_double+0xc8>
 800daa4:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800daa8:	42b3      	cmp	r3, r6
 800daaa:	d944      	bls.n	800db36 <ucdr_serialize_endian_double+0xbe>
 800daac:	6922      	ldr	r2, [r4, #16]
 800daae:	1b9f      	subs	r7, r3, r6
 800dab0:	443a      	add	r2, r7
 800dab2:	f1c7 0908 	rsb	r9, r7, #8
 800dab6:	4649      	mov	r1, r9
 800dab8:	4620      	mov	r0, r4
 800daba:	60a3      	str	r3, [r4, #8]
 800dabc:	6122      	str	r2, [r4, #16]
 800dabe:	f000 fa51 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d072      	beq.n	800dbac <ucdr_serialize_endian_double+0x134>
 800dac6:	2d01      	cmp	r5, #1
 800dac8:	f000 809b 	beq.w	800dc02 <ucdr_serialize_endian_double+0x18a>
 800dacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dad0:	7033      	strb	r3, [r6, #0]
 800dad2:	2f00      	cmp	r7, #0
 800dad4:	d078      	beq.n	800dbc8 <ucdr_serialize_endian_double+0x150>
 800dad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dada:	2f01      	cmp	r7, #1
 800dadc:	7073      	strb	r3, [r6, #1]
 800dade:	d077      	beq.n	800dbd0 <ucdr_serialize_endian_double+0x158>
 800dae0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dae4:	2f02      	cmp	r7, #2
 800dae6:	70b3      	strb	r3, [r6, #2]
 800dae8:	d076      	beq.n	800dbd8 <ucdr_serialize_endian_double+0x160>
 800daea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800daee:	2f03      	cmp	r7, #3
 800daf0:	70f3      	strb	r3, [r6, #3]
 800daf2:	d075      	beq.n	800dbe0 <ucdr_serialize_endian_double+0x168>
 800daf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800daf8:	2f04      	cmp	r7, #4
 800dafa:	7133      	strb	r3, [r6, #4]
 800dafc:	d074      	beq.n	800dbe8 <ucdr_serialize_endian_double+0x170>
 800dafe:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800db02:	2f05      	cmp	r7, #5
 800db04:	7173      	strb	r3, [r6, #5]
 800db06:	d073      	beq.n	800dbf0 <ucdr_serialize_endian_double+0x178>
 800db08:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800db0c:	2f06      	cmp	r7, #6
 800db0e:	71b3      	strb	r3, [r6, #6]
 800db10:	d072      	beq.n	800dbf8 <ucdr_serialize_endian_double+0x180>
 800db12:	f89d 3000 	ldrb.w	r3, [sp]
 800db16:	71f3      	strb	r3, [r6, #7]
 800db18:	2108      	movs	r1, #8
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	68a2      	ldr	r2, [r4, #8]
 800db1e:	7da0      	ldrb	r0, [r4, #22]
 800db20:	440b      	add	r3, r1
 800db22:	1bdf      	subs	r7, r3, r7
 800db24:	444a      	add	r2, r9
 800db26:	f080 0001 	eor.w	r0, r0, #1
 800db2a:	6127      	str	r7, [r4, #16]
 800db2c:	60a2      	str	r2, [r4, #8]
 800db2e:	7561      	strb	r1, [r4, #21]
 800db30:	b003      	add	sp, #12
 800db32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db36:	2108      	movs	r1, #8
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fa13 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800db3e:	b348      	cbz	r0, 800db94 <ucdr_serialize_endian_double+0x11c>
 800db40:	2d01      	cmp	r5, #1
 800db42:	d02d      	beq.n	800dba0 <ucdr_serialize_endian_double+0x128>
 800db44:	68a3      	ldr	r3, [r4, #8]
 800db46:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800db4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db4e:	7019      	strb	r1, [r3, #0]
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800db56:	705a      	strb	r2, [r3, #1]
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db5e:	7099      	strb	r1, [r3, #2]
 800db60:	68a3      	ldr	r3, [r4, #8]
 800db62:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800db66:	70da      	strb	r2, [r3, #3]
 800db68:	68a3      	ldr	r3, [r4, #8]
 800db6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800db6e:	7119      	strb	r1, [r3, #4]
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800db76:	715a      	strb	r2, [r3, #5]
 800db78:	68a3      	ldr	r3, [r4, #8]
 800db7a:	f89d 2000 	ldrb.w	r2, [sp]
 800db7e:	7199      	strb	r1, [r3, #6]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	71da      	strb	r2, [r3, #7]
 800db84:	2108      	movs	r1, #8
 800db86:	68a2      	ldr	r2, [r4, #8]
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	440a      	add	r2, r1
 800db8c:	440b      	add	r3, r1
 800db8e:	60a2      	str	r2, [r4, #8]
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	7561      	strb	r1, [r4, #21]
 800db94:	7da0      	ldrb	r0, [r4, #22]
 800db96:	f080 0001 	eor.w	r0, r0, #1
 800db9a:	b003      	add	sp, #12
 800db9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba0:	466b      	mov	r3, sp
 800dba2:	68a2      	ldr	r2, [r4, #8]
 800dba4:	cb03      	ldmia	r3!, {r0, r1}
 800dba6:	6010      	str	r0, [r2, #0]
 800dba8:	6051      	str	r1, [r2, #4]
 800dbaa:	e7eb      	b.n	800db84 <ucdr_serialize_endian_double+0x10c>
 800dbac:	68a2      	ldr	r2, [r4, #8]
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	7da0      	ldrb	r0, [r4, #22]
 800dbb2:	1bd2      	subs	r2, r2, r7
 800dbb4:	f080 0001 	eor.w	r0, r0, #1
 800dbb8:	1bdf      	subs	r7, r3, r7
 800dbba:	f884 8015 	strb.w	r8, [r4, #21]
 800dbbe:	60a2      	str	r2, [r4, #8]
 800dbc0:	6127      	str	r7, [r4, #16]
 800dbc2:	b003      	add	sp, #12
 800dbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbc8:	68a3      	ldr	r3, [r4, #8]
 800dbca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbce:	701a      	strb	r2, [r3, #0]
 800dbd0:	68a3      	ldr	r3, [r4, #8]
 800dbd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dbd6:	701a      	strb	r2, [r3, #0]
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	68a3      	ldr	r3, [r4, #8]
 800dbe2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dbe6:	701a      	strb	r2, [r3, #0]
 800dbe8:	68a3      	ldr	r3, [r4, #8]
 800dbea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dbee:	701a      	strb	r2, [r3, #0]
 800dbf0:	68a3      	ldr	r3, [r4, #8]
 800dbf2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	f89d 2000 	ldrb.w	r2, [sp]
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	e78a      	b.n	800db18 <ucdr_serialize_endian_double+0xa0>
 800dc02:	466d      	mov	r5, sp
 800dc04:	463a      	mov	r2, r7
 800dc06:	4629      	mov	r1, r5
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f00b feef 	bl	80199ec <memcpy>
 800dc0e:	464a      	mov	r2, r9
 800dc10:	68a0      	ldr	r0, [r4, #8]
 800dc12:	19e9      	adds	r1, r5, r7
 800dc14:	f00b feea 	bl	80199ec <memcpy>
 800dc18:	e77e      	b.n	800db18 <ucdr_serialize_endian_double+0xa0>
 800dc1a:	bf00      	nop

0800dc1c <ucdr_deserialize_double>:
 800dc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc20:	460d      	mov	r5, r1
 800dc22:	2108      	movs	r1, #8
 800dc24:	4604      	mov	r4, r0
 800dc26:	f000 f9ef 	bl	800e008 <ucdr_buffer_alignment>
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dc32:	f000 fa2f 	bl	800e094 <ucdr_advance_buffer>
 800dc36:	4620      	mov	r0, r4
 800dc38:	2108      	movs	r1, #8
 800dc3a:	f000 f987 	bl	800df4c <ucdr_check_buffer_available_for>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d151      	bne.n	800dce6 <ucdr_deserialize_double+0xca>
 800dc42:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800dc46:	42b3      	cmp	r3, r6
 800dc48:	d948      	bls.n	800dcdc <ucdr_deserialize_double+0xc0>
 800dc4a:	6922      	ldr	r2, [r4, #16]
 800dc4c:	1b9f      	subs	r7, r3, r6
 800dc4e:	443a      	add	r2, r7
 800dc50:	f1c7 0808 	rsb	r8, r7, #8
 800dc54:	4641      	mov	r1, r8
 800dc56:	4620      	mov	r0, r4
 800dc58:	60a3      	str	r3, [r4, #8]
 800dc5a:	6122      	str	r2, [r4, #16]
 800dc5c:	f000 f982 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d06d      	beq.n	800dd40 <ucdr_deserialize_double+0x124>
 800dc64:	7d23      	ldrb	r3, [r4, #20]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	f000 8093 	beq.w	800dd92 <ucdr_deserialize_double+0x176>
 800dc6c:	79f3      	ldrb	r3, [r6, #7]
 800dc6e:	702b      	strb	r3, [r5, #0]
 800dc70:	2f00      	cmp	r7, #0
 800dc72:	d072      	beq.n	800dd5a <ucdr_deserialize_double+0x13e>
 800dc74:	79b2      	ldrb	r2, [r6, #6]
 800dc76:	2f01      	cmp	r7, #1
 800dc78:	f105 0302 	add.w	r3, r5, #2
 800dc7c:	706a      	strb	r2, [r5, #1]
 800dc7e:	d070      	beq.n	800dd62 <ucdr_deserialize_double+0x146>
 800dc80:	7972      	ldrb	r2, [r6, #5]
 800dc82:	2f02      	cmp	r7, #2
 800dc84:	f105 0303 	add.w	r3, r5, #3
 800dc88:	70aa      	strb	r2, [r5, #2]
 800dc8a:	d06e      	beq.n	800dd6a <ucdr_deserialize_double+0x14e>
 800dc8c:	7932      	ldrb	r2, [r6, #4]
 800dc8e:	2f03      	cmp	r7, #3
 800dc90:	f105 0304 	add.w	r3, r5, #4
 800dc94:	70ea      	strb	r2, [r5, #3]
 800dc96:	d06c      	beq.n	800dd72 <ucdr_deserialize_double+0x156>
 800dc98:	78f2      	ldrb	r2, [r6, #3]
 800dc9a:	2f04      	cmp	r7, #4
 800dc9c:	f105 0305 	add.w	r3, r5, #5
 800dca0:	712a      	strb	r2, [r5, #4]
 800dca2:	d06a      	beq.n	800dd7a <ucdr_deserialize_double+0x15e>
 800dca4:	78b2      	ldrb	r2, [r6, #2]
 800dca6:	2f05      	cmp	r7, #5
 800dca8:	f105 0306 	add.w	r3, r5, #6
 800dcac:	716a      	strb	r2, [r5, #5]
 800dcae:	d068      	beq.n	800dd82 <ucdr_deserialize_double+0x166>
 800dcb0:	7872      	ldrb	r2, [r6, #1]
 800dcb2:	2f06      	cmp	r7, #6
 800dcb4:	f105 0307 	add.w	r3, r5, #7
 800dcb8:	71aa      	strb	r2, [r5, #6]
 800dcba:	d066      	beq.n	800dd8a <ucdr_deserialize_double+0x16e>
 800dcbc:	7833      	ldrb	r3, [r6, #0]
 800dcbe:	71eb      	strb	r3, [r5, #7]
 800dcc0:	2108      	movs	r1, #8
 800dcc2:	6923      	ldr	r3, [r4, #16]
 800dcc4:	68a2      	ldr	r2, [r4, #8]
 800dcc6:	7da0      	ldrb	r0, [r4, #22]
 800dcc8:	440b      	add	r3, r1
 800dcca:	1bdf      	subs	r7, r3, r7
 800dccc:	4442      	add	r2, r8
 800dcce:	7561      	strb	r1, [r4, #21]
 800dcd0:	6127      	str	r7, [r4, #16]
 800dcd2:	60a2      	str	r2, [r4, #8]
 800dcd4:	f080 0001 	eor.w	r0, r0, #1
 800dcd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcdc:	2108      	movs	r1, #8
 800dcde:	4620      	mov	r0, r4
 800dce0:	f000 f940 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800dce4:	b310      	cbz	r0, 800dd2c <ucdr_deserialize_double+0x110>
 800dce6:	7d23      	ldrb	r3, [r4, #20]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	68a3      	ldr	r3, [r4, #8]
 800dcec:	d023      	beq.n	800dd36 <ucdr_deserialize_double+0x11a>
 800dcee:	79db      	ldrb	r3, [r3, #7]
 800dcf0:	702b      	strb	r3, [r5, #0]
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	799b      	ldrb	r3, [r3, #6]
 800dcf6:	706b      	strb	r3, [r5, #1]
 800dcf8:	68a3      	ldr	r3, [r4, #8]
 800dcfa:	795b      	ldrb	r3, [r3, #5]
 800dcfc:	70ab      	strb	r3, [r5, #2]
 800dcfe:	68a3      	ldr	r3, [r4, #8]
 800dd00:	791b      	ldrb	r3, [r3, #4]
 800dd02:	70eb      	strb	r3, [r5, #3]
 800dd04:	68a3      	ldr	r3, [r4, #8]
 800dd06:	78db      	ldrb	r3, [r3, #3]
 800dd08:	712b      	strb	r3, [r5, #4]
 800dd0a:	68a3      	ldr	r3, [r4, #8]
 800dd0c:	789b      	ldrb	r3, [r3, #2]
 800dd0e:	716b      	strb	r3, [r5, #5]
 800dd10:	68a3      	ldr	r3, [r4, #8]
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	71ab      	strb	r3, [r5, #6]
 800dd16:	68a3      	ldr	r3, [r4, #8]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	71eb      	strb	r3, [r5, #7]
 800dd1c:	2108      	movs	r1, #8
 800dd1e:	68a2      	ldr	r2, [r4, #8]
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	440a      	add	r2, r1
 800dd24:	440b      	add	r3, r1
 800dd26:	60a2      	str	r2, [r4, #8]
 800dd28:	6123      	str	r3, [r4, #16]
 800dd2a:	7561      	strb	r1, [r4, #21]
 800dd2c:	7da0      	ldrb	r0, [r4, #22]
 800dd2e:	f080 0001 	eor.w	r0, r0, #1
 800dd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	602a      	str	r2, [r5, #0]
 800dd3c:	606b      	str	r3, [r5, #4]
 800dd3e:	e7ed      	b.n	800dd1c <ucdr_deserialize_double+0x100>
 800dd40:	68a2      	ldr	r2, [r4, #8]
 800dd42:	6923      	ldr	r3, [r4, #16]
 800dd44:	7da0      	ldrb	r0, [r4, #22]
 800dd46:	1bd2      	subs	r2, r2, r7
 800dd48:	f884 9015 	strb.w	r9, [r4, #21]
 800dd4c:	1bdf      	subs	r7, r3, r7
 800dd4e:	60a2      	str	r2, [r4, #8]
 800dd50:	6127      	str	r7, [r4, #16]
 800dd52:	f080 0001 	eor.w	r0, r0, #1
 800dd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd5a:	68a2      	ldr	r2, [r4, #8]
 800dd5c:	1cab      	adds	r3, r5, #2
 800dd5e:	7992      	ldrb	r2, [r2, #6]
 800dd60:	706a      	strb	r2, [r5, #1]
 800dd62:	68a2      	ldr	r2, [r4, #8]
 800dd64:	7952      	ldrb	r2, [r2, #5]
 800dd66:	f803 2b01 	strb.w	r2, [r3], #1
 800dd6a:	68a2      	ldr	r2, [r4, #8]
 800dd6c:	7912      	ldrb	r2, [r2, #4]
 800dd6e:	f803 2b01 	strb.w	r2, [r3], #1
 800dd72:	68a2      	ldr	r2, [r4, #8]
 800dd74:	78d2      	ldrb	r2, [r2, #3]
 800dd76:	f803 2b01 	strb.w	r2, [r3], #1
 800dd7a:	68a2      	ldr	r2, [r4, #8]
 800dd7c:	7892      	ldrb	r2, [r2, #2]
 800dd7e:	f803 2b01 	strb.w	r2, [r3], #1
 800dd82:	68a2      	ldr	r2, [r4, #8]
 800dd84:	7852      	ldrb	r2, [r2, #1]
 800dd86:	f803 2b01 	strb.w	r2, [r3], #1
 800dd8a:	68a2      	ldr	r2, [r4, #8]
 800dd8c:	7812      	ldrb	r2, [r2, #0]
 800dd8e:	701a      	strb	r2, [r3, #0]
 800dd90:	e796      	b.n	800dcc0 <ucdr_deserialize_double+0xa4>
 800dd92:	4631      	mov	r1, r6
 800dd94:	463a      	mov	r2, r7
 800dd96:	4628      	mov	r0, r5
 800dd98:	f00b fe28 	bl	80199ec <memcpy>
 800dd9c:	4642      	mov	r2, r8
 800dd9e:	68a1      	ldr	r1, [r4, #8]
 800dda0:	19e8      	adds	r0, r5, r7
 800dda2:	f00b fe23 	bl	80199ec <memcpy>
 800dda6:	e78b      	b.n	800dcc0 <ucdr_deserialize_double+0xa4>

0800dda8 <ucdr_deserialize_endian_double>:
 800dda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddac:	460e      	mov	r6, r1
 800ddae:	2108      	movs	r1, #8
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	4615      	mov	r5, r2
 800ddb4:	f000 f928 	bl	800e008 <ucdr_buffer_alignment>
 800ddb8:	4601      	mov	r1, r0
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ddc0:	f000 f968 	bl	800e094 <ucdr_advance_buffer>
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	2108      	movs	r1, #8
 800ddc8:	f000 f8c0 	bl	800df4c <ucdr_check_buffer_available_for>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d159      	bne.n	800de84 <ucdr_deserialize_endian_double+0xdc>
 800ddd0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ddd4:	42bb      	cmp	r3, r7
 800ddd6:	d950      	bls.n	800de7a <ucdr_deserialize_endian_double+0xd2>
 800ddd8:	6922      	ldr	r2, [r4, #16]
 800ddda:	eba3 0807 	sub.w	r8, r3, r7
 800ddde:	4442      	add	r2, r8
 800dde0:	f1c8 0a08 	rsb	sl, r8, #8
 800dde4:	4651      	mov	r1, sl
 800dde6:	4620      	mov	r0, r4
 800dde8:	60a3      	str	r3, [r4, #8]
 800ddea:	6122      	str	r2, [r4, #16]
 800ddec:	f000 f8ba 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d073      	beq.n	800dedc <ucdr_deserialize_endian_double+0x134>
 800ddf4:	2e01      	cmp	r6, #1
 800ddf6:	f000 809c 	beq.w	800df32 <ucdr_deserialize_endian_double+0x18a>
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	702b      	strb	r3, [r5, #0]
 800ddfe:	f1b8 0f00 	cmp.w	r8, #0
 800de02:	d07a      	beq.n	800defa <ucdr_deserialize_endian_double+0x152>
 800de04:	79ba      	ldrb	r2, [r7, #6]
 800de06:	f1b8 0f01 	cmp.w	r8, #1
 800de0a:	f105 0302 	add.w	r3, r5, #2
 800de0e:	706a      	strb	r2, [r5, #1]
 800de10:	d077      	beq.n	800df02 <ucdr_deserialize_endian_double+0x15a>
 800de12:	797a      	ldrb	r2, [r7, #5]
 800de14:	f1b8 0f02 	cmp.w	r8, #2
 800de18:	f105 0303 	add.w	r3, r5, #3
 800de1c:	70aa      	strb	r2, [r5, #2]
 800de1e:	d074      	beq.n	800df0a <ucdr_deserialize_endian_double+0x162>
 800de20:	793a      	ldrb	r2, [r7, #4]
 800de22:	f1b8 0f03 	cmp.w	r8, #3
 800de26:	f105 0304 	add.w	r3, r5, #4
 800de2a:	70ea      	strb	r2, [r5, #3]
 800de2c:	d071      	beq.n	800df12 <ucdr_deserialize_endian_double+0x16a>
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	f1b8 0f04 	cmp.w	r8, #4
 800de34:	f105 0305 	add.w	r3, r5, #5
 800de38:	712a      	strb	r2, [r5, #4]
 800de3a:	d06e      	beq.n	800df1a <ucdr_deserialize_endian_double+0x172>
 800de3c:	78ba      	ldrb	r2, [r7, #2]
 800de3e:	f1b8 0f05 	cmp.w	r8, #5
 800de42:	f105 0306 	add.w	r3, r5, #6
 800de46:	716a      	strb	r2, [r5, #5]
 800de48:	d06b      	beq.n	800df22 <ucdr_deserialize_endian_double+0x17a>
 800de4a:	787a      	ldrb	r2, [r7, #1]
 800de4c:	f1b8 0f06 	cmp.w	r8, #6
 800de50:	f105 0307 	add.w	r3, r5, #7
 800de54:	71aa      	strb	r2, [r5, #6]
 800de56:	d068      	beq.n	800df2a <ucdr_deserialize_endian_double+0x182>
 800de58:	783b      	ldrb	r3, [r7, #0]
 800de5a:	71eb      	strb	r3, [r5, #7]
 800de5c:	2108      	movs	r1, #8
 800de5e:	6923      	ldr	r3, [r4, #16]
 800de60:	68a2      	ldr	r2, [r4, #8]
 800de62:	7da0      	ldrb	r0, [r4, #22]
 800de64:	440b      	add	r3, r1
 800de66:	eba3 0308 	sub.w	r3, r3, r8
 800de6a:	4452      	add	r2, sl
 800de6c:	7561      	strb	r1, [r4, #21]
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	60a2      	str	r2, [r4, #8]
 800de72:	f080 0001 	eor.w	r0, r0, #1
 800de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7a:	2108      	movs	r1, #8
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 f871 	bl	800df64 <ucdr_check_final_buffer_behavior>
 800de82:	b308      	cbz	r0, 800dec8 <ucdr_deserialize_endian_double+0x120>
 800de84:	2e01      	cmp	r6, #1
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	d023      	beq.n	800ded2 <ucdr_deserialize_endian_double+0x12a>
 800de8a:	79db      	ldrb	r3, [r3, #7]
 800de8c:	702b      	strb	r3, [r5, #0]
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	799b      	ldrb	r3, [r3, #6]
 800de92:	706b      	strb	r3, [r5, #1]
 800de94:	68a3      	ldr	r3, [r4, #8]
 800de96:	795b      	ldrb	r3, [r3, #5]
 800de98:	70ab      	strb	r3, [r5, #2]
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	791b      	ldrb	r3, [r3, #4]
 800de9e:	70eb      	strb	r3, [r5, #3]
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	78db      	ldrb	r3, [r3, #3]
 800dea4:	712b      	strb	r3, [r5, #4]
 800dea6:	68a3      	ldr	r3, [r4, #8]
 800dea8:	789b      	ldrb	r3, [r3, #2]
 800deaa:	716b      	strb	r3, [r5, #5]
 800deac:	68a3      	ldr	r3, [r4, #8]
 800deae:	785b      	ldrb	r3, [r3, #1]
 800deb0:	71ab      	strb	r3, [r5, #6]
 800deb2:	68a3      	ldr	r3, [r4, #8]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	71eb      	strb	r3, [r5, #7]
 800deb8:	2108      	movs	r1, #8
 800deba:	68a2      	ldr	r2, [r4, #8]
 800debc:	6923      	ldr	r3, [r4, #16]
 800debe:	440a      	add	r2, r1
 800dec0:	440b      	add	r3, r1
 800dec2:	60a2      	str	r2, [r4, #8]
 800dec4:	6123      	str	r3, [r4, #16]
 800dec6:	7561      	strb	r1, [r4, #21]
 800dec8:	7da0      	ldrb	r0, [r4, #22]
 800deca:	f080 0001 	eor.w	r0, r0, #1
 800dece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	602a      	str	r2, [r5, #0]
 800ded8:	606b      	str	r3, [r5, #4]
 800deda:	e7ed      	b.n	800deb8 <ucdr_deserialize_endian_double+0x110>
 800dedc:	68a2      	ldr	r2, [r4, #8]
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	7da0      	ldrb	r0, [r4, #22]
 800dee2:	eba2 0208 	sub.w	r2, r2, r8
 800dee6:	eba3 0308 	sub.w	r3, r3, r8
 800deea:	f884 9015 	strb.w	r9, [r4, #21]
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	f080 0001 	eor.w	r0, r0, #1
 800def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800defa:	68a2      	ldr	r2, [r4, #8]
 800defc:	1cab      	adds	r3, r5, #2
 800defe:	7992      	ldrb	r2, [r2, #6]
 800df00:	706a      	strb	r2, [r5, #1]
 800df02:	68a2      	ldr	r2, [r4, #8]
 800df04:	7952      	ldrb	r2, [r2, #5]
 800df06:	f803 2b01 	strb.w	r2, [r3], #1
 800df0a:	68a2      	ldr	r2, [r4, #8]
 800df0c:	7912      	ldrb	r2, [r2, #4]
 800df0e:	f803 2b01 	strb.w	r2, [r3], #1
 800df12:	68a2      	ldr	r2, [r4, #8]
 800df14:	78d2      	ldrb	r2, [r2, #3]
 800df16:	f803 2b01 	strb.w	r2, [r3], #1
 800df1a:	68a2      	ldr	r2, [r4, #8]
 800df1c:	7892      	ldrb	r2, [r2, #2]
 800df1e:	f803 2b01 	strb.w	r2, [r3], #1
 800df22:	68a2      	ldr	r2, [r4, #8]
 800df24:	7852      	ldrb	r2, [r2, #1]
 800df26:	f803 2b01 	strb.w	r2, [r3], #1
 800df2a:	68a2      	ldr	r2, [r4, #8]
 800df2c:	7812      	ldrb	r2, [r2, #0]
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	e794      	b.n	800de5c <ucdr_deserialize_endian_double+0xb4>
 800df32:	4639      	mov	r1, r7
 800df34:	4642      	mov	r2, r8
 800df36:	4628      	mov	r0, r5
 800df38:	f00b fd58 	bl	80199ec <memcpy>
 800df3c:	4652      	mov	r2, sl
 800df3e:	68a1      	ldr	r1, [r4, #8]
 800df40:	eb05 0008 	add.w	r0, r5, r8
 800df44:	f00b fd52 	bl	80199ec <memcpy>
 800df48:	e788      	b.n	800de5c <ucdr_deserialize_endian_double+0xb4>
 800df4a:	bf00      	nop

0800df4c <ucdr_check_buffer_available_for>:
 800df4c:	7d83      	ldrb	r3, [r0, #22]
 800df4e:	b93b      	cbnz	r3, 800df60 <ucdr_check_buffer_available_for+0x14>
 800df50:	6883      	ldr	r3, [r0, #8]
 800df52:	6840      	ldr	r0, [r0, #4]
 800df54:	4419      	add	r1, r3
 800df56:	4288      	cmp	r0, r1
 800df58:	bf34      	ite	cc
 800df5a:	2000      	movcc	r0, #0
 800df5c:	2001      	movcs	r0, #1
 800df5e:	4770      	bx	lr
 800df60:	2000      	movs	r0, #0
 800df62:	4770      	bx	lr

0800df64 <ucdr_check_final_buffer_behavior>:
 800df64:	7d83      	ldrb	r3, [r0, #22]
 800df66:	b943      	cbnz	r3, 800df7a <ucdr_check_final_buffer_behavior+0x16>
 800df68:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800df6c:	4291      	cmp	r1, r2
 800df6e:	b510      	push	{r4, lr}
 800df70:	4604      	mov	r4, r0
 800df72:	d205      	bcs.n	800df80 <ucdr_check_final_buffer_behavior+0x1c>
 800df74:	2301      	movs	r3, #1
 800df76:	4618      	mov	r0, r3
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	2300      	movs	r3, #0
 800df7c:	4618      	mov	r0, r3
 800df7e:	4770      	bx	lr
 800df80:	6982      	ldr	r2, [r0, #24]
 800df82:	b13a      	cbz	r2, 800df94 <ucdr_check_final_buffer_behavior+0x30>
 800df84:	69c1      	ldr	r1, [r0, #28]
 800df86:	4790      	blx	r2
 800df88:	f080 0301 	eor.w	r3, r0, #1
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	75a0      	strb	r0, [r4, #22]
 800df90:	4618      	mov	r0, r3
 800df92:	bd10      	pop	{r4, pc}
 800df94:	2001      	movs	r0, #1
 800df96:	75a0      	strb	r0, [r4, #22]
 800df98:	e7fa      	b.n	800df90 <ucdr_check_final_buffer_behavior+0x2c>
 800df9a:	bf00      	nop

0800df9c <ucdr_set_on_full_buffer_callback>:
 800df9c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop

0800dfa4 <ucdr_init_buffer_origin_offset_endian>:
 800dfa4:	b430      	push	{r4, r5}
 800dfa6:	2400      	movs	r4, #0
 800dfa8:	9d02      	ldr	r5, [sp, #8]
 800dfaa:	440a      	add	r2, r1
 800dfac:	6001      	str	r1, [r0, #0]
 800dfae:	60c3      	str	r3, [r0, #12]
 800dfb0:	4429      	add	r1, r5
 800dfb2:	441d      	add	r5, r3
 800dfb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800dfb8:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800dfbc:	6105      	str	r5, [r0, #16]
 800dfbe:	7544      	strb	r4, [r0, #21]
 800dfc0:	7584      	strb	r4, [r0, #22]
 800dfc2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800dfc6:	bc30      	pop	{r4, r5}
 800dfc8:	7503      	strb	r3, [r0, #20]
 800dfca:	4770      	bx	lr

0800dfcc <ucdr_init_buffer_origin_offset>:
 800dfcc:	b530      	push	{r4, r5, lr}
 800dfce:	2501      	movs	r5, #1
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	9c06      	ldr	r4, [sp, #24]
 800dfd4:	e9cd 4500 	strd	r4, r5, [sp]
 800dfd8:	f7ff ffe4 	bl	800dfa4 <ucdr_init_buffer_origin_offset_endian>
 800dfdc:	b003      	add	sp, #12
 800dfde:	bd30      	pop	{r4, r5, pc}

0800dfe0 <ucdr_init_buffer_origin>:
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	2400      	movs	r4, #0
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	9400      	str	r4, [sp, #0]
 800dfe8:	f7ff fff0 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 800dfec:	b002      	add	sp, #8
 800dfee:	bd10      	pop	{r4, pc}

0800dff0 <ucdr_init_buffer>:
 800dff0:	2300      	movs	r3, #0
 800dff2:	f7ff bff5 	b.w	800dfe0 <ucdr_init_buffer_origin>
 800dff6:	bf00      	nop

0800dff8 <ucdr_alignment>:
 800dff8:	fbb0 f3f1 	udiv	r3, r0, r1
 800dffc:	fb03 0311 	mls	r3, r3, r1, r0
 800e000:	1e48      	subs	r0, r1, #1
 800e002:	1ac9      	subs	r1, r1, r3
 800e004:	4008      	ands	r0, r1
 800e006:	4770      	bx	lr

0800e008 <ucdr_buffer_alignment>:
 800e008:	7d43      	ldrb	r3, [r0, #21]
 800e00a:	428b      	cmp	r3, r1
 800e00c:	d209      	bcs.n	800e022 <ucdr_buffer_alignment+0x1a>
 800e00e:	6903      	ldr	r3, [r0, #16]
 800e010:	1e4a      	subs	r2, r1, #1
 800e012:	fbb3 f0f1 	udiv	r0, r3, r1
 800e016:	fb01 3010 	mls	r0, r1, r0, r3
 800e01a:	1a09      	subs	r1, r1, r0
 800e01c:	ea01 0002 	and.w	r0, r1, r2
 800e020:	4770      	bx	lr
 800e022:	2000      	movs	r0, #0
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop

0800e028 <ucdr_align_to>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4604      	mov	r4, r0
 800e02c:	460d      	mov	r5, r1
 800e02e:	f7ff ffeb 	bl	800e008 <ucdr_buffer_alignment>
 800e032:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800e036:	4402      	add	r2, r0
 800e038:	4293      	cmp	r3, r2
 800e03a:	bf28      	it	cs
 800e03c:	4613      	movcs	r3, r2
 800e03e:	6922      	ldr	r2, [r4, #16]
 800e040:	7565      	strb	r5, [r4, #21]
 800e042:	4410      	add	r0, r2
 800e044:	6120      	str	r0, [r4, #16]
 800e046:	60a3      	str	r3, [r4, #8]
 800e048:	bd38      	pop	{r3, r4, r5, pc}
 800e04a:	bf00      	nop

0800e04c <ucdr_buffer_length>:
 800e04c:	6882      	ldr	r2, [r0, #8]
 800e04e:	6800      	ldr	r0, [r0, #0]
 800e050:	1a10      	subs	r0, r2, r0
 800e052:	4770      	bx	lr

0800e054 <ucdr_buffer_remaining>:
 800e054:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e058:	1a10      	subs	r0, r2, r0
 800e05a:	4770      	bx	lr

0800e05c <ucdr_check_final_buffer_behavior_array>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	7d83      	ldrb	r3, [r0, #22]
 800e060:	b963      	cbnz	r3, 800e07c <ucdr_check_final_buffer_behavior_array+0x20>
 800e062:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e066:	429a      	cmp	r2, r3
 800e068:	4604      	mov	r4, r0
 800e06a:	460d      	mov	r5, r1
 800e06c:	d308      	bcc.n	800e080 <ucdr_check_final_buffer_behavior_array+0x24>
 800e06e:	b139      	cbz	r1, 800e080 <ucdr_check_final_buffer_behavior_array+0x24>
 800e070:	6983      	ldr	r3, [r0, #24]
 800e072:	b163      	cbz	r3, 800e08e <ucdr_check_final_buffer_behavior_array+0x32>
 800e074:	69c1      	ldr	r1, [r0, #28]
 800e076:	4798      	blx	r3
 800e078:	75a0      	strb	r0, [r4, #22]
 800e07a:	b108      	cbz	r0, 800e080 <ucdr_check_final_buffer_behavior_array+0x24>
 800e07c:	2000      	movs	r0, #0
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
 800e080:	4620      	mov	r0, r4
 800e082:	f7ff ffe7 	bl	800e054 <ucdr_buffer_remaining>
 800e086:	42a8      	cmp	r0, r5
 800e088:	bf28      	it	cs
 800e08a:	4628      	movcs	r0, r5
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	2301      	movs	r3, #1
 800e090:	7583      	strb	r3, [r0, #22]
 800e092:	e7f3      	b.n	800e07c <ucdr_check_final_buffer_behavior_array+0x20>

0800e094 <ucdr_advance_buffer>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4604      	mov	r4, r0
 800e098:	460d      	mov	r5, r1
 800e09a:	f7ff ff57 	bl	800df4c <ucdr_check_buffer_available_for>
 800e09e:	b178      	cbz	r0, 800e0c0 <ucdr_advance_buffer+0x2c>
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	6921      	ldr	r1, [r4, #16]
 800e0a4:	442b      	add	r3, r5
 800e0a6:	60a3      	str	r3, [r4, #8]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	4429      	add	r1, r5
 800e0ac:	7563      	strb	r3, [r4, #21]
 800e0ae:	6121      	str	r1, [r4, #16]
 800e0b0:	bd38      	pop	{r3, r4, r5, pc}
 800e0b2:	68a2      	ldr	r2, [r4, #8]
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	4402      	add	r2, r0
 800e0b8:	4403      	add	r3, r0
 800e0ba:	1a2d      	subs	r5, r5, r0
 800e0bc:	60a2      	str	r2, [r4, #8]
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7ff ffc9 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d1f1      	bne.n	800e0b2 <ucdr_advance_buffer+0x1e>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	7563      	strb	r3, [r4, #21]
 800e0d2:	bd38      	pop	{r3, r4, r5, pc}

0800e0d4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e0d4:	f000 b8be 	b.w	800e254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>

0800e0d8 <get_serialized_size_nav_msgs__msg__Odometry>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	4604      	mov	r4, r0
 800e0dc:	b1c8      	cbz	r0, 800e112 <get_serialized_size_nav_msgs__msg__Odometry+0x3a>
 800e0de:	460e      	mov	r6, r1
 800e0e0:	f003 f988 	bl	80113f4 <get_serialized_size_std_msgs__msg__Header>
 800e0e4:	1837      	adds	r7, r6, r0
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	4638      	mov	r0, r7
 800e0ea:	f7ff ff85 	bl	800dff8 <ucdr_alignment>
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	69a3      	ldr	r3, [r4, #24]
 800e0f2:	f104 0020 	add.w	r0, r4, #32
 800e0f6:	1d5d      	adds	r5, r3, #5
 800e0f8:	440d      	add	r5, r1
 800e0fa:	443d      	add	r5, r7
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	f003 fbbb 	bl	8011878 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e102:	4405      	add	r5, r0
 800e104:	4629      	mov	r1, r5
 800e106:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800e10a:	f003 fcdf 	bl	8011acc <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e10e:	1b80      	subs	r0, r0, r6
 800e110:	4428      	add	r0, r5
 800e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e114 <_Odometry__cdr_deserialize>:
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	460c      	mov	r4, r1
 800e118:	b082      	sub	sp, #8
 800e11a:	b341      	cbz	r1, 800e16e <_Odometry__cdr_deserialize+0x5a>
 800e11c:	4605      	mov	r5, r0
 800e11e:	f003 f9eb 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e122:	6843      	ldr	r3, [r0, #4]
 800e124:	4621      	mov	r1, r4
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	4628      	mov	r0, r5
 800e12a:	4798      	blx	r3
 800e12c:	69e6      	ldr	r6, [r4, #28]
 800e12e:	ab01      	add	r3, sp, #4
 800e130:	4632      	mov	r2, r6
 800e132:	4628      	mov	r0, r5
 800e134:	6961      	ldr	r1, [r4, #20]
 800e136:	f003 ffcd 	bl	80120d4 <ucdr_deserialize_sequence_char>
 800e13a:	9b01      	ldr	r3, [sp, #4]
 800e13c:	b998      	cbnz	r0, 800e166 <_Odometry__cdr_deserialize+0x52>
 800e13e:	429e      	cmp	r6, r3
 800e140:	d318      	bcc.n	800e174 <_Odometry__cdr_deserialize+0x60>
 800e142:	f003 fc05 	bl	8011950 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e146:	6843      	ldr	r3, [r0, #4]
 800e148:	f104 0120 	add.w	r1, r4, #32
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	4628      	mov	r0, r5
 800e150:	4798      	blx	r3
 800e152:	f003 fd27 	bl	8011ba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e156:	6843      	ldr	r3, [r0, #4]
 800e158:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 800e15c:	4628      	mov	r0, r5
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	4798      	blx	r3
 800e162:	b002      	add	sp, #8
 800e164:	bd70      	pop	{r4, r5, r6, pc}
 800e166:	b103      	cbz	r3, 800e16a <_Odometry__cdr_deserialize+0x56>
 800e168:	3b01      	subs	r3, #1
 800e16a:	61a3      	str	r3, [r4, #24]
 800e16c:	e7e9      	b.n	800e142 <_Odometry__cdr_deserialize+0x2e>
 800e16e:	4608      	mov	r0, r1
 800e170:	b002      	add	sp, #8
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	2101      	movs	r1, #1
 800e176:	75a8      	strb	r0, [r5, #22]
 800e178:	7569      	strb	r1, [r5, #21]
 800e17a:	61a0      	str	r0, [r4, #24]
 800e17c:	4628      	mov	r0, r5
 800e17e:	f7ff ff53 	bl	800e028 <ucdr_align_to>
 800e182:	4628      	mov	r0, r5
 800e184:	9901      	ldr	r1, [sp, #4]
 800e186:	f7ff ff85 	bl	800e094 <ucdr_advance_buffer>
 800e18a:	e7da      	b.n	800e142 <_Odometry__cdr_deserialize+0x2e>

0800e18c <_Odometry__cdr_serialize>:
 800e18c:	b348      	cbz	r0, 800e1e2 <_Odometry__cdr_serialize+0x56>
 800e18e:	b570      	push	{r4, r5, r6, lr}
 800e190:	4604      	mov	r4, r0
 800e192:	460e      	mov	r6, r1
 800e194:	f003 f9b0 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e198:	6843      	ldr	r3, [r0, #4]
 800e19a:	4631      	mov	r1, r6
 800e19c:	4620      	mov	r0, r4
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	4798      	blx	r3
 800e1a2:	6965      	ldr	r5, [r4, #20]
 800e1a4:	b1d5      	cbz	r5, 800e1dc <_Odometry__cdr_serialize+0x50>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f7f2 f84c 	bl	8000244 <strlen>
 800e1ac:	1c42      	adds	r2, r0, #1
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	61a0      	str	r0, [r4, #24]
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f003 ff7c 	bl	80120b0 <ucdr_serialize_sequence_char>
 800e1b8:	f003 fbca 	bl	8011950 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e1bc:	6843      	ldr	r3, [r0, #4]
 800e1be:	4631      	mov	r1, r6
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	f104 0020 	add.w	r0, r4, #32
 800e1c6:	4798      	blx	r3
 800e1c8:	f003 fcec 	bl	8011ba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e1cc:	6843      	ldr	r3, [r0, #4]
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1da:	4718      	bx	r3
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4628      	mov	r0, r5
 800e1e0:	e7e5      	b.n	800e1ae <_Odometry__cdr_serialize+0x22>
 800e1e2:	4770      	bx	lr

0800e1e4 <_Odometry__max_serialized_size>:
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	b510      	push	{r4, lr}
 800e1e8:	b082      	sub	sp, #8
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	f10d 0007 	add.w	r0, sp, #7
 800e1f0:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1f4:	f003 f976 	bl	80114e4 <max_serialized_size_std_msgs__msg__Header>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4601      	mov	r1, r0
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	f10d 0007 	add.w	r0, sp, #7
 800e202:	f88d 3007 	strb.w	r3, [sp, #7]
 800e206:	f003 fb93 	bl	8011930 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e20a:	4404      	add	r4, r0
 800e20c:	4621      	mov	r1, r4
 800e20e:	f10d 0007 	add.w	r0, sp, #7
 800e212:	f003 fcb7 	bl	8011b84 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e216:	4420      	add	r0, r4
 800e218:	b002      	add	sp, #8
 800e21a:	bd10      	pop	{r4, pc}

0800e21c <_Odometry__get_serialized_size>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	4604      	mov	r4, r0
 800e220:	b1b8      	cbz	r0, 800e252 <_Odometry__get_serialized_size+0x36>
 800e222:	2100      	movs	r1, #0
 800e224:	f003 f8e6 	bl	80113f4 <get_serialized_size_std_msgs__msg__Header>
 800e228:	2104      	movs	r1, #4
 800e22a:	4606      	mov	r6, r0
 800e22c:	f7ff fee4 	bl	800dff8 <ucdr_alignment>
 800e230:	4601      	mov	r1, r0
 800e232:	69a3      	ldr	r3, [r4, #24]
 800e234:	f104 0020 	add.w	r0, r4, #32
 800e238:	1d5d      	adds	r5, r3, #5
 800e23a:	4435      	add	r5, r6
 800e23c:	440d      	add	r5, r1
 800e23e:	4629      	mov	r1, r5
 800e240:	f003 fb1a 	bl	8011878 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e244:	4405      	add	r5, r0
 800e246:	4629      	mov	r1, r5
 800e248:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800e24c:	f003 fc3e 	bl	8011acc <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e250:	4428      	add	r0, r5
 800e252:	bd70      	pop	{r4, r5, r6, pc}

0800e254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e254:	4800      	ldr	r0, [pc, #0]	; (800e258 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800e256:	4770      	bx	lr
 800e258:	20000068 	.word	0x20000068

0800e25c <rcl_get_zero_initialized_init_options>:
 800e25c:	2000      	movs	r0, #0
 800e25e:	4770      	bx	lr

0800e260 <rcl_init_options_init>:
 800e260:	b084      	sub	sp, #16
 800e262:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e264:	b091      	sub	sp, #68	; 0x44
 800e266:	af17      	add	r7, sp, #92	; 0x5c
 800e268:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d045      	beq.n	800e2fc <rcl_init_options_init+0x9c>
 800e270:	6803      	ldr	r3, [r0, #0]
 800e272:	4606      	mov	r6, r0
 800e274:	b133      	cbz	r3, 800e284 <rcl_init_options_init+0x24>
 800e276:	2464      	movs	r4, #100	; 0x64
 800e278:	4620      	mov	r0, r4
 800e27a:	b011      	add	sp, #68	; 0x44
 800e27c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e280:	b004      	add	sp, #16
 800e282:	4770      	bx	lr
 800e284:	4638      	mov	r0, r7
 800e286:	f001 f873 	bl	800f370 <rcutils_allocator_is_valid>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d036      	beq.n	800e2fc <rcl_init_options_init+0x9c>
 800e28e:	2050      	movs	r0, #80	; 0x50
 800e290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e292:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e294:	4798      	blx	r3
 800e296:	4604      	mov	r4, r0
 800e298:	6030      	str	r0, [r6, #0]
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d030      	beq.n	800e300 <rcl_init_options_init+0xa0>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	46bc      	mov	ip, r7
 800e2a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e2a8:	f8dc 3000 	ldr.w	r3, [ip]
 800e2ac:	a802      	add	r0, sp, #8
 800e2ae:	602b      	str	r3, [r5, #0]
 800e2b0:	3418      	adds	r4, #24
 800e2b2:	ad02      	add	r5, sp, #8
 800e2b4:	f001 fade 	bl	800f874 <rmw_get_zero_initialized_init_options>
 800e2b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c4:	f8d6 c000 	ldr.w	ip, [r6]
 800e2c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e2cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800e2d0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e2d4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e2d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e2dc:	f10c 0018 	add.w	r0, ip, #24
 800e2e0:	f001 fb94 	bl	800fa0c <rmw_init_options_init>
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d0c6      	beq.n	800e278 <rcl_init_options_init+0x18>
 800e2ea:	6830      	ldr	r0, [r6, #0]
 800e2ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e2ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e2f0:	4798      	blx	r3
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f007 f9a4 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	e7bd      	b.n	800e278 <rcl_init_options_init+0x18>
 800e2fc:	240b      	movs	r4, #11
 800e2fe:	e7bb      	b.n	800e278 <rcl_init_options_init+0x18>
 800e300:	240a      	movs	r4, #10
 800e302:	e7b9      	b.n	800e278 <rcl_init_options_init+0x18>

0800e304 <rcl_init_options_fini>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	b1c0      	cbz	r0, 800e33c <rcl_init_options_fini+0x38>
 800e30a:	6804      	ldr	r4, [r0, #0]
 800e30c:	4606      	mov	r6, r0
 800e30e:	b1ac      	cbz	r4, 800e33c <rcl_init_options_fini+0x38>
 800e310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e312:	ad01      	add	r5, sp, #4
 800e314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	a801      	add	r0, sp, #4
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	f001 f828 	bl	800f370 <rcutils_allocator_is_valid>
 800e320:	b160      	cbz	r0, 800e33c <rcl_init_options_fini+0x38>
 800e322:	6830      	ldr	r0, [r6, #0]
 800e324:	3018      	adds	r0, #24
 800e326:	f001 fc0b 	bl	800fb40 <rmw_init_options_fini>
 800e32a:	4604      	mov	r4, r0
 800e32c:	b950      	cbnz	r0, 800e344 <rcl_init_options_fini+0x40>
 800e32e:	6830      	ldr	r0, [r6, #0]
 800e330:	9b02      	ldr	r3, [sp, #8]
 800e332:	9905      	ldr	r1, [sp, #20]
 800e334:	4798      	blx	r3
 800e336:	4620      	mov	r0, r4
 800e338:	b006      	add	sp, #24
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	240b      	movs	r4, #11
 800e33e:	4620      	mov	r0, r4
 800e340:	b006      	add	sp, #24
 800e342:	bd70      	pop	{r4, r5, r6, pc}
 800e344:	f007 f97c 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800e348:	4604      	mov	r4, r0
 800e34a:	e7f8      	b.n	800e33e <rcl_init_options_fini+0x3a>

0800e34c <rcl_init_options_copy>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800e354:	2800      	cmp	r0, #0
 800e356:	d070      	beq.n	800e43a <rcl_init_options_copy+0xee>
 800e358:	6806      	ldr	r6, [r0, #0]
 800e35a:	4605      	mov	r5, r0
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	d06c      	beq.n	800e43a <rcl_init_options_copy+0xee>
 800e360:	460c      	mov	r4, r1
 800e362:	2900      	cmp	r1, #0
 800e364:	d069      	beq.n	800e43a <rcl_init_options_copy+0xee>
 800e366:	680b      	ldr	r3, [r1, #0]
 800e368:	b12b      	cbz	r3, 800e376 <rcl_init_options_copy+0x2a>
 800e36a:	2664      	movs	r6, #100	; 0x64
 800e36c:	4630      	mov	r0, r6
 800e36e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800e372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e376:	af10      	add	r7, sp, #64	; 0x40
 800e378:	46bc      	mov	ip, r7
 800e37a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e37c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e380:	6833      	ldr	r3, [r6, #0]
 800e382:	4638      	mov	r0, r7
 800e384:	f8cc 3000 	str.w	r3, [ip]
 800e388:	f000 fff2 	bl	800f370 <rcutils_allocator_is_valid>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d054      	beq.n	800e43a <rcl_init_options_copy+0xee>
 800e390:	2050      	movs	r0, #80	; 0x50
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	6939      	ldr	r1, [r7, #16]
 800e396:	4798      	blx	r3
 800e398:	4606      	mov	r6, r0
 800e39a:	6020      	str	r0, [r4, #0]
 800e39c:	2800      	cmp	r0, #0
 800e39e:	f000 8089 	beq.w	800e4b4 <rcl_init_options_copy+0x168>
 800e3a2:	4684      	mov	ip, r0
 800e3a4:	46be      	mov	lr, r7
 800e3a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3ae:	f8de 3000 	ldr.w	r3, [lr]
 800e3b2:	a802      	add	r0, sp, #8
 800e3b4:	f8cc 3000 	str.w	r3, [ip]
 800e3b8:	f001 fa5c 	bl	800f874 <rmw_get_zero_initialized_init_options>
 800e3bc:	3618      	adds	r6, #24
 800e3be:	f10d 0c08 	add.w	ip, sp, #8
 800e3c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3d4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800e3d8:	e886 0003 	stmia.w	r6, {r0, r1}
 800e3dc:	6826      	ldr	r6, [r4, #0]
 800e3de:	ab13      	add	r3, sp, #76	; 0x4c
 800e3e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e3e4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e3e8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e3ec:	f106 0018 	add.w	r0, r6, #24
 800e3f0:	f001 fb0c 	bl	800fa0c <rmw_init_options_init>
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	bb30      	cbnz	r0, 800e446 <rcl_init_options_copy+0xfa>
 800e3f8:	f8d4 e000 	ldr.w	lr, [r4]
 800e3fc:	f8d5 c000 	ldr.w	ip, [r5]
 800e400:	4676      	mov	r6, lr
 800e402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e406:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e408:	f8dc 3000 	ldr.w	r3, [ip]
 800e40c:	f10e 0018 	add.w	r0, lr, #24
 800e410:	6033      	str	r3, [r6, #0]
 800e412:	f001 fb95 	bl	800fb40 <rmw_init_options_fini>
 800e416:	4680      	mov	r8, r0
 800e418:	b300      	cbz	r0, 800e45c <rcl_init_options_copy+0x110>
 800e41a:	4638      	mov	r0, r7
 800e41c:	f001 f870 	bl	800f500 <rcutils_get_error_string>
 800e420:	f001 f896 	bl	800f550 <rcutils_reset_error>
 800e424:	4620      	mov	r0, r4
 800e426:	f7ff ff6d 	bl	800e304 <rcl_init_options_fini>
 800e42a:	4606      	mov	r6, r0
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d19d      	bne.n	800e36c <rcl_init_options_copy+0x20>
 800e430:	4640      	mov	r0, r8
 800e432:	f007 f905 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800e436:	4606      	mov	r6, r0
 800e438:	e798      	b.n	800e36c <rcl_init_options_copy+0x20>
 800e43a:	260b      	movs	r6, #11
 800e43c:	4630      	mov	r0, r6
 800e43e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6939      	ldr	r1, [r7, #16]
 800e44a:	6820      	ldr	r0, [r4, #0]
 800e44c:	4798      	blx	r3
 800e44e:	4630      	mov	r0, r6
 800e450:	f007 f8f6 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800e454:	4606      	mov	r6, r0
 800e456:	2800      	cmp	r0, #0
 800e458:	d0ce      	beq.n	800e3f8 <rcl_init_options_copy+0xac>
 800e45a:	e787      	b.n	800e36c <rcl_init_options_copy+0x20>
 800e45c:	f8d4 8000 	ldr.w	r8, [r4]
 800e460:	a802      	add	r0, sp, #8
 800e462:	f001 fa07 	bl	800f874 <rmw_get_zero_initialized_init_options>
 800e466:	ae02      	add	r6, sp, #8
 800e468:	f108 0c18 	add.w	ip, r8, #24
 800e46c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e46e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e472:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e478:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e47a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e47e:	682a      	ldr	r2, [r5, #0]
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e486:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e48a:	f102 0018 	add.w	r0, r2, #24
 800e48e:	f103 0118 	add.w	r1, r3, #24
 800e492:	f001 fb13 	bl	800fabc <rmw_init_options_copy>
 800e496:	4606      	mov	r6, r0
 800e498:	2800      	cmp	r0, #0
 800e49a:	f43f af67 	beq.w	800e36c <rcl_init_options_copy+0x20>
 800e49e:	4638      	mov	r0, r7
 800e4a0:	f001 f82e 	bl	800f500 <rcutils_get_error_string>
 800e4a4:	f001 f854 	bl	800f550 <rcutils_reset_error>
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f7ff ff2b 	bl	800e304 <rcl_init_options_fini>
 800e4ae:	b118      	cbz	r0, 800e4b8 <rcl_init_options_copy+0x16c>
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	e75b      	b.n	800e36c <rcl_init_options_copy+0x20>
 800e4b4:	260a      	movs	r6, #10
 800e4b6:	e759      	b.n	800e36c <rcl_init_options_copy+0x20>
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f007 f8c1 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800e4be:	4606      	mov	r6, r0
 800e4c0:	e754      	b.n	800e36c <rcl_init_options_copy+0x20>
 800e4c2:	bf00      	nop

0800e4c4 <rcl_get_zero_initialized_publisher>:
 800e4c4:	4b01      	ldr	r3, [pc, #4]	; (800e4cc <rcl_get_zero_initialized_publisher+0x8>)
 800e4c6:	6818      	ldr	r0, [r3, #0]
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	0801c290 	.word	0x0801c290

0800e4d0 <rcl_publisher_init>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	b08f      	sub	sp, #60	; 0x3c
 800e4d6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800e4d8:	2f00      	cmp	r7, #0
 800e4da:	d03a      	beq.n	800e552 <rcl_publisher_init+0x82>
 800e4dc:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	4648      	mov	r0, r9
 800e4e4:	4688      	mov	r8, r1
 800e4e6:	4616      	mov	r6, r2
 800e4e8:	461d      	mov	r5, r3
 800e4ea:	f000 ff41 	bl	800f370 <rcutils_allocator_is_valid>
 800e4ee:	b380      	cbz	r0, 800e552 <rcl_publisher_init+0x82>
 800e4f0:	b37c      	cbz	r4, 800e552 <rcl_publisher_init+0x82>
 800e4f2:	f8d4 a000 	ldr.w	sl, [r4]
 800e4f6:	f1ba 0f00 	cmp.w	sl, #0
 800e4fa:	d004      	beq.n	800e506 <rcl_publisher_init+0x36>
 800e4fc:	2564      	movs	r5, #100	; 0x64
 800e4fe:	4628      	mov	r0, r5
 800e500:	b00f      	add	sp, #60	; 0x3c
 800e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e506:	4640      	mov	r0, r8
 800e508:	f007 fd4e 	bl	8015fa8 <rcl_node_is_valid>
 800e50c:	b330      	cbz	r0, 800e55c <rcl_publisher_init+0x8c>
 800e50e:	b306      	cbz	r6, 800e552 <rcl_publisher_init+0x82>
 800e510:	b1fd      	cbz	r5, 800e552 <rcl_publisher_init+0x82>
 800e512:	46ce      	mov	lr, r9
 800e514:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800e518:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e51c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e520:	f8de 3000 	ldr.w	r3, [lr]
 800e524:	f8cc 3000 	str.w	r3, [ip]
 800e528:	f001 f830 	bl	800f58c <rcutils_get_zero_initialized_string_map>
 800e52c:	4684      	mov	ip, r0
 800e52e:	ab0e      	add	r3, sp, #56	; 0x38
 800e530:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e534:	f8cd c018 	str.w	ip, [sp, #24]
 800e538:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e53e:	4651      	mov	r1, sl
 800e540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e542:	a806      	add	r0, sp, #24
 800e544:	f001 f898 	bl	800f678 <rcutils_string_map_init>
 800e548:	b150      	cbz	r0, 800e560 <rcl_publisher_init+0x90>
 800e54a:	280a      	cmp	r0, #10
 800e54c:	d013      	beq.n	800e576 <rcl_publisher_init+0xa6>
 800e54e:	2501      	movs	r5, #1
 800e550:	e7d5      	b.n	800e4fe <rcl_publisher_init+0x2e>
 800e552:	250b      	movs	r5, #11
 800e554:	4628      	mov	r0, r5
 800e556:	b00f      	add	sp, #60	; 0x3c
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	25c8      	movs	r5, #200	; 0xc8
 800e55e:	e7ce      	b.n	800e4fe <rcl_publisher_init+0x2e>
 800e560:	a806      	add	r0, sp, #24
 800e562:	f007 fa6f 	bl	8015a44 <rcl_get_default_topic_name_substitutions>
 800e566:	4682      	mov	sl, r0
 800e568:	b138      	cbz	r0, 800e57a <rcl_publisher_init+0xaa>
 800e56a:	a806      	add	r0, sp, #24
 800e56c:	f001 f8c2 	bl	800f6f4 <rcutils_string_map_fini>
 800e570:	f1ba 0f0a 	cmp.w	sl, #10
 800e574:	d1eb      	bne.n	800e54e <rcl_publisher_init+0x7e>
 800e576:	250a      	movs	r5, #10
 800e578:	e7c1      	b.n	800e4fe <rcl_publisher_init+0x2e>
 800e57a:	4640      	mov	r0, r8
 800e57c:	f8cd a01c 	str.w	sl, [sp, #28]
 800e580:	f007 fd1c 	bl	8015fbc <rcl_node_get_name>
 800e584:	4682      	mov	sl, r0
 800e586:	4640      	mov	r0, r8
 800e588:	f007 fd20 	bl	8015fcc <rcl_node_get_namespace>
 800e58c:	46ec      	mov	ip, sp
 800e58e:	4686      	mov	lr, r0
 800e590:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e594:	f10d 0b1c 	add.w	fp, sp, #28
 800e598:	f8cd b014 	str.w	fp, [sp, #20]
 800e59c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5a0:	f8d9 3000 	ldr.w	r3, [r9]
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f8cc 3000 	str.w	r3, [ip]
 800e5aa:	4651      	mov	r1, sl
 800e5ac:	4672      	mov	r2, lr
 800e5ae:	ab06      	add	r3, sp, #24
 800e5b0:	f007 f8e4 	bl	801577c <rcl_expand_topic_name>
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	a806      	add	r0, sp, #24
 800e5b8:	f001 f89c 	bl	800f6f4 <rcutils_string_map_fini>
 800e5bc:	b920      	cbnz	r0, 800e5c8 <rcl_publisher_init+0xf8>
 800e5be:	b15d      	cbz	r5, 800e5d8 <rcl_publisher_init+0x108>
 800e5c0:	2d67      	cmp	r5, #103	; 0x67
 800e5c2:	d002      	beq.n	800e5ca <rcl_publisher_init+0xfa>
 800e5c4:	2d69      	cmp	r5, #105	; 0x69
 800e5c6:	d05f      	beq.n	800e688 <rcl_publisher_init+0x1b8>
 800e5c8:	2501      	movs	r5, #1
 800e5ca:	9807      	ldr	r0, [sp, #28]
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d096      	beq.n	800e4fe <rcl_publisher_init+0x2e>
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e5d4:	4798      	blx	r3
 800e5d6:	e792      	b.n	800e4fe <rcl_publisher_init+0x2e>
 800e5d8:	4640      	mov	r0, r8
 800e5da:	f007 fcff 	bl	8015fdc <rcl_node_get_options>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0f2      	beq.n	800e5c8 <rcl_publisher_init+0xf8>
 800e5e2:	9807      	ldr	r0, [sp, #28]
 800e5e4:	f7f1 fe2e 	bl	8000244 <strlen>
 800e5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	4798      	blx	r3
 800e5f0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e5f4:	4681      	mov	r9, r0
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	f7f1 fe24 	bl	8000244 <strlen>
 800e5fc:	4651      	mov	r1, sl
 800e5fe:	1c42      	adds	r2, r0, #1
 800e600:	4648      	mov	r0, r9
 800e602:	f00b f9f3 	bl	80199ec <memcpy>
 800e606:	462a      	mov	r2, r5
 800e608:	4648      	mov	r0, r9
 800e60a:	a908      	add	r1, sp, #32
 800e60c:	f001 f95e 	bl	800f8cc <rmw_validate_full_topic_name>
 800e610:	2800      	cmp	r0, #0
 800e612:	d137      	bne.n	800e684 <rcl_publisher_init+0x1b4>
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d138      	bne.n	800e68c <rcl_publisher_init+0x1bc>
 800e61a:	20c0      	movs	r0, #192	; 0xc0
 800e61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e61e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e620:	4798      	blx	r3
 800e622:	6020      	str	r0, [r4, #0]
 800e624:	b3a0      	cbz	r0, 800e690 <rcl_publisher_init+0x1c0>
 800e626:	4640      	mov	r0, r8
 800e628:	f007 fce0 	bl	8015fec <rcl_node_get_rmw_handle>
 800e62c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4631      	mov	r1, r6
 800e634:	463b      	mov	r3, r7
 800e636:	464a      	mov	r2, r9
 800e638:	6825      	ldr	r5, [r4, #0]
 800e63a:	f001 fd8f 	bl	801015c <rmw_create_publisher>
 800e63e:	6821      	ldr	r1, [r4, #0]
 800e640:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e644:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800e648:	b388      	cbz	r0, 800e6ae <rcl_publisher_init+0x1de>
 800e64a:	3168      	adds	r1, #104	; 0x68
 800e64c:	f001 fe62 	bl	8010314 <rmw_publisher_get_actual_qos>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	4605      	mov	r5, r0
 800e654:	b9f0      	cbnz	r0, 800e694 <rcl_publisher_init+0x1c4>
 800e656:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e65a:	4618      	mov	r0, r3
 800e65c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800e660:	4639      	mov	r1, r7
 800e662:	2268      	movs	r2, #104	; 0x68
 800e664:	f00b f9c2 	bl	80199ec <memcpy>
 800e668:	f8d8 2000 	ldr.w	r2, [r8]
 800e66c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800e670:	9807      	ldr	r0, [sp, #28]
 800e672:	b110      	cbz	r0, 800e67a <rcl_publisher_init+0x1aa>
 800e674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e676:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e678:	4798      	blx	r3
 800e67a:	4648      	mov	r0, r9
 800e67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e67e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e680:	4798      	blx	r3
 800e682:	e73c      	b.n	800e4fe <rcl_publisher_init+0x2e>
 800e684:	2501      	movs	r5, #1
 800e686:	e7f3      	b.n	800e670 <rcl_publisher_init+0x1a0>
 800e688:	2567      	movs	r5, #103	; 0x67
 800e68a:	e79e      	b.n	800e5ca <rcl_publisher_init+0xfa>
 800e68c:	2567      	movs	r5, #103	; 0x67
 800e68e:	e7ef      	b.n	800e670 <rcl_publisher_init+0x1a0>
 800e690:	250a      	movs	r5, #10
 800e692:	e7ed      	b.n	800e670 <rcl_publisher_init+0x1a0>
 800e694:	2b00      	cmp	r3, #0
 800e696:	d0f5      	beq.n	800e684 <rcl_publisher_init+0x1b4>
 800e698:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e69c:	b13b      	cbz	r3, 800e6ae <rcl_publisher_init+0x1de>
 800e69e:	4640      	mov	r0, r8
 800e6a0:	f007 fca4 	bl	8015fec <rcl_node_get_rmw_handle>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e6aa:	f001 fe35 	bl	8010318 <rmw_destroy_publisher>
 800e6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e6b2:	6820      	ldr	r0, [r4, #0]
 800e6b4:	4798      	blx	r3
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	2501      	movs	r5, #1
 800e6ba:	6023      	str	r3, [r4, #0]
 800e6bc:	e7d8      	b.n	800e670 <rcl_publisher_init+0x1a0>
 800e6be:	bf00      	nop

0800e6c0 <rcl_publisher_get_default_options>:
 800e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	466c      	mov	r4, sp
 800e6c6:	4f0d      	ldr	r7, [pc, #52]	; (800e6fc <rcl_publisher_get_default_options+0x3c>)
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	2250      	movs	r2, #80	; 0x50
 800e6cc:	490c      	ldr	r1, [pc, #48]	; (800e700 <rcl_publisher_get_default_options+0x40>)
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f00b f98c 	bl	80199ec <memcpy>
 800e6d4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e6d8:	4668      	mov	r0, sp
 800e6da:	f000 fe3b 	bl	800f354 <rcutils_get_default_allocator>
 800e6de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	602b      	str	r3, [r5, #0]
 800e6e6:	f001 f8d5 	bl	800f894 <rmw_get_default_publisher_options>
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	6678      	str	r0, [r7, #100]	; 0x64
 800e6ee:	2268      	movs	r2, #104	; 0x68
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f00b f97b 	bl	80199ec <memcpy>
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	b007      	add	sp, #28
 800e6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6fc:	20006738 	.word	0x20006738
 800e700:	0801c298 	.word	0x0801c298

0800e704 <rcl_publish>:
 800e704:	b1f8      	cbz	r0, 800e746 <rcl_publish+0x42>
 800e706:	6803      	ldr	r3, [r0, #0]
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4604      	mov	r4, r0
 800e70c:	b1b3      	cbz	r3, 800e73c <rcl_publish+0x38>
 800e70e:	4616      	mov	r6, r2
 800e710:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800e714:	b192      	cbz	r2, 800e73c <rcl_publish+0x38>
 800e716:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800e71a:	460d      	mov	r5, r1
 800e71c:	f006 ffb4 	bl	8015688 <rcl_context_is_valid>
 800e720:	b160      	cbz	r0, 800e73c <rcl_publish+0x38>
 800e722:	6823      	ldr	r3, [r4, #0]
 800e724:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800e728:	b140      	cbz	r0, 800e73c <rcl_publish+0x38>
 800e72a:	b155      	cbz	r5, 800e742 <rcl_publish+0x3e>
 800e72c:	4632      	mov	r2, r6
 800e72e:	4629      	mov	r1, r5
 800e730:	f001 fcb4 	bl	801009c <rmw_publish>
 800e734:	3800      	subs	r0, #0
 800e736:	bf18      	it	ne
 800e738:	2001      	movne	r0, #1
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
 800e73c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e740:	bd70      	pop	{r4, r5, r6, pc}
 800e742:	200b      	movs	r0, #11
 800e744:	bd70      	pop	{r4, r5, r6, pc}
 800e746:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e74a:	4770      	bx	lr

0800e74c <rcl_get_zero_initialized_subscription>:
 800e74c:	4b01      	ldr	r3, [pc, #4]	; (800e754 <rcl_get_zero_initialized_subscription+0x8>)
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	0801c2e8 	.word	0x0801c2e8

0800e758 <rcl_subscription_init>:
 800e758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	b08f      	sub	sp, #60	; 0x3c
 800e75e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800e760:	b1d7      	cbz	r7, 800e798 <rcl_subscription_init+0x40>
 800e762:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e766:	4604      	mov	r4, r0
 800e768:	4648      	mov	r0, r9
 800e76a:	4688      	mov	r8, r1
 800e76c:	4616      	mov	r6, r2
 800e76e:	461d      	mov	r5, r3
 800e770:	f000 fdfe 	bl	800f370 <rcutils_allocator_is_valid>
 800e774:	b180      	cbz	r0, 800e798 <rcl_subscription_init+0x40>
 800e776:	b17c      	cbz	r4, 800e798 <rcl_subscription_init+0x40>
 800e778:	4640      	mov	r0, r8
 800e77a:	f007 fc15 	bl	8015fa8 <rcl_node_is_valid>
 800e77e:	b380      	cbz	r0, 800e7e2 <rcl_subscription_init+0x8a>
 800e780:	b156      	cbz	r6, 800e798 <rcl_subscription_init+0x40>
 800e782:	b14d      	cbz	r5, 800e798 <rcl_subscription_init+0x40>
 800e784:	f8d4 a000 	ldr.w	sl, [r4]
 800e788:	f1ba 0f00 	cmp.w	sl, #0
 800e78c:	d009      	beq.n	800e7a2 <rcl_subscription_init+0x4a>
 800e78e:	2564      	movs	r5, #100	; 0x64
 800e790:	4628      	mov	r0, r5
 800e792:	b00f      	add	sp, #60	; 0x3c
 800e794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e798:	250b      	movs	r5, #11
 800e79a:	4628      	mov	r0, r5
 800e79c:	b00f      	add	sp, #60	; 0x3c
 800e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a2:	46ce      	mov	lr, r9
 800e7a4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800e7a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7b0:	f8de 3000 	ldr.w	r3, [lr]
 800e7b4:	f8cc 3000 	str.w	r3, [ip]
 800e7b8:	f000 fee8 	bl	800f58c <rcutils_get_zero_initialized_string_map>
 800e7bc:	4684      	mov	ip, r0
 800e7be:	ab0e      	add	r3, sp, #56	; 0x38
 800e7c0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e7c4:	f8cd c018 	str.w	ip, [sp, #24]
 800e7c8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ce:	4651      	mov	r1, sl
 800e7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7d2:	a806      	add	r0, sp, #24
 800e7d4:	f000 ff50 	bl	800f678 <rcutils_string_map_init>
 800e7d8:	b140      	cbz	r0, 800e7ec <rcl_subscription_init+0x94>
 800e7da:	280a      	cmp	r0, #10
 800e7dc:	d011      	beq.n	800e802 <rcl_subscription_init+0xaa>
 800e7de:	2501      	movs	r5, #1
 800e7e0:	e7db      	b.n	800e79a <rcl_subscription_init+0x42>
 800e7e2:	25c8      	movs	r5, #200	; 0xc8
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	b00f      	add	sp, #60	; 0x3c
 800e7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ec:	a806      	add	r0, sp, #24
 800e7ee:	f007 f929 	bl	8015a44 <rcl_get_default_topic_name_substitutions>
 800e7f2:	4682      	mov	sl, r0
 800e7f4:	b138      	cbz	r0, 800e806 <rcl_subscription_init+0xae>
 800e7f6:	a806      	add	r0, sp, #24
 800e7f8:	f000 ff7c 	bl	800f6f4 <rcutils_string_map_fini>
 800e7fc:	f1ba 0f0a 	cmp.w	sl, #10
 800e800:	d1ed      	bne.n	800e7de <rcl_subscription_init+0x86>
 800e802:	250a      	movs	r5, #10
 800e804:	e7c9      	b.n	800e79a <rcl_subscription_init+0x42>
 800e806:	4640      	mov	r0, r8
 800e808:	f8cd a01c 	str.w	sl, [sp, #28]
 800e80c:	f007 fbd6 	bl	8015fbc <rcl_node_get_name>
 800e810:	4682      	mov	sl, r0
 800e812:	4640      	mov	r0, r8
 800e814:	f007 fbda 	bl	8015fcc <rcl_node_get_namespace>
 800e818:	46ec      	mov	ip, sp
 800e81a:	4686      	mov	lr, r0
 800e81c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e820:	f10d 0b1c 	add.w	fp, sp, #28
 800e824:	f8cd b014 	str.w	fp, [sp, #20]
 800e828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e82c:	f8d9 3000 	ldr.w	r3, [r9]
 800e830:	4628      	mov	r0, r5
 800e832:	f8cc 3000 	str.w	r3, [ip]
 800e836:	4651      	mov	r1, sl
 800e838:	4672      	mov	r2, lr
 800e83a:	ab06      	add	r3, sp, #24
 800e83c:	f006 ff9e 	bl	801577c <rcl_expand_topic_name>
 800e840:	4605      	mov	r5, r0
 800e842:	a806      	add	r0, sp, #24
 800e844:	f000 ff56 	bl	800f6f4 <rcutils_string_map_fini>
 800e848:	b920      	cbnz	r0, 800e854 <rcl_subscription_init+0xfc>
 800e84a:	b15d      	cbz	r5, 800e864 <rcl_subscription_init+0x10c>
 800e84c:	2d67      	cmp	r5, #103	; 0x67
 800e84e:	d002      	beq.n	800e856 <rcl_subscription_init+0xfe>
 800e850:	2d69      	cmp	r5, #105	; 0x69
 800e852:	d05a      	beq.n	800e90a <rcl_subscription_init+0x1b2>
 800e854:	2501      	movs	r5, #1
 800e856:	9807      	ldr	r0, [sp, #28]
 800e858:	2800      	cmp	r0, #0
 800e85a:	d09e      	beq.n	800e79a <rcl_subscription_init+0x42>
 800e85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e85e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e860:	4798      	blx	r3
 800e862:	e79a      	b.n	800e79a <rcl_subscription_init+0x42>
 800e864:	4640      	mov	r0, r8
 800e866:	f007 fbb9 	bl	8015fdc <rcl_node_get_options>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d0f2      	beq.n	800e854 <rcl_subscription_init+0xfc>
 800e86e:	9807      	ldr	r0, [sp, #28]
 800e870:	f7f1 fce8 	bl	8000244 <strlen>
 800e874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e876:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e878:	3001      	adds	r0, #1
 800e87a:	4798      	blx	r3
 800e87c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e880:	4681      	mov	r9, r0
 800e882:	4650      	mov	r0, sl
 800e884:	f7f1 fcde 	bl	8000244 <strlen>
 800e888:	4651      	mov	r1, sl
 800e88a:	1c42      	adds	r2, r0, #1
 800e88c:	4648      	mov	r0, r9
 800e88e:	f00b f8ad 	bl	80199ec <memcpy>
 800e892:	462a      	mov	r2, r5
 800e894:	4648      	mov	r0, r9
 800e896:	a908      	add	r1, sp, #32
 800e898:	f001 f818 	bl	800f8cc <rmw_validate_full_topic_name>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d132      	bne.n	800e906 <rcl_subscription_init+0x1ae>
 800e8a0:	9b08      	ldr	r3, [sp, #32]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d133      	bne.n	800e90e <rcl_subscription_init+0x1b6>
 800e8a6:	20c8      	movs	r0, #200	; 0xc8
 800e8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8ac:	4798      	blx	r3
 800e8ae:	6020      	str	r0, [r4, #0]
 800e8b0:	b378      	cbz	r0, 800e912 <rcl_subscription_init+0x1ba>
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	f007 fb9a 	bl	8015fec <rcl_node_get_rmw_handle>
 800e8b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4631      	mov	r1, r6
 800e8c0:	463b      	mov	r3, r7
 800e8c2:	464a      	mov	r2, r9
 800e8c4:	6825      	ldr	r5, [r4, #0]
 800e8c6:	f001 fdbb 	bl	8010440 <rmw_create_subscription>
 800e8ca:	6821      	ldr	r1, [r4, #0]
 800e8cc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800e8d0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800e8d4:	b368      	cbz	r0, 800e932 <rcl_subscription_init+0x1da>
 800e8d6:	3170      	adds	r1, #112	; 0x70
 800e8d8:	f001 fe96 	bl	8010608 <rmw_subscription_get_actual_qos>
 800e8dc:	4605      	mov	r5, r0
 800e8de:	b9d0      	cbnz	r0, 800e916 <rcl_subscription_init+0x1be>
 800e8e0:	6820      	ldr	r0, [r4, #0]
 800e8e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e8e6:	2270      	movs	r2, #112	; 0x70
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800e8ee:	f00b f87d 	bl	80199ec <memcpy>
 800e8f2:	9807      	ldr	r0, [sp, #28]
 800e8f4:	b110      	cbz	r0, 800e8fc <rcl_subscription_init+0x1a4>
 800e8f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e8fa:	4798      	blx	r3
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e900:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e902:	4798      	blx	r3
 800e904:	e749      	b.n	800e79a <rcl_subscription_init+0x42>
 800e906:	2501      	movs	r5, #1
 800e908:	e7f3      	b.n	800e8f2 <rcl_subscription_init+0x19a>
 800e90a:	2567      	movs	r5, #103	; 0x67
 800e90c:	e7a3      	b.n	800e856 <rcl_subscription_init+0xfe>
 800e90e:	2567      	movs	r5, #103	; 0x67
 800e910:	e7ef      	b.n	800e8f2 <rcl_subscription_init+0x19a>
 800e912:	250a      	movs	r5, #10
 800e914:	e7ed      	b.n	800e8f2 <rcl_subscription_init+0x19a>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0f4      	beq.n	800e906 <rcl_subscription_init+0x1ae>
 800e91c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e920:	b13b      	cbz	r3, 800e932 <rcl_subscription_init+0x1da>
 800e922:	4640      	mov	r0, r8
 800e924:	f007 fb62 	bl	8015fec <rcl_node_get_rmw_handle>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800e92e:	f001 fe6d 	bl	801060c <rmw_destroy_subscription>
 800e932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e934:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e936:	6820      	ldr	r0, [r4, #0]
 800e938:	4798      	blx	r3
 800e93a:	2300      	movs	r3, #0
 800e93c:	2501      	movs	r5, #1
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	e7d7      	b.n	800e8f2 <rcl_subscription_init+0x19a>
 800e942:	bf00      	nop

0800e944 <rcl_subscription_get_default_options>:
 800e944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e946:	4f12      	ldr	r7, [pc, #72]	; (800e990 <rcl_subscription_get_default_options+0x4c>)
 800e948:	b089      	sub	sp, #36	; 0x24
 800e94a:	4606      	mov	r6, r0
 800e94c:	2250      	movs	r2, #80	; 0x50
 800e94e:	4911      	ldr	r1, [pc, #68]	; (800e994 <rcl_subscription_get_default_options+0x50>)
 800e950:	4638      	mov	r0, r7
 800e952:	f00b f84b 	bl	80199ec <memcpy>
 800e956:	ac02      	add	r4, sp, #8
 800e958:	a802      	add	r0, sp, #8
 800e95a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800e95e:	f000 fcf9 	bl	800f354 <rcutils_get_default_allocator>
 800e962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	466c      	mov	r4, sp
 800e96a:	4620      	mov	r0, r4
 800e96c:	602b      	str	r3, [r5, #0]
 800e96e:	f000 ff97 	bl	800f8a0 <rmw_get_default_subscription_options>
 800e972:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e976:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e97a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e97e:	2270      	movs	r2, #112	; 0x70
 800e980:	4639      	mov	r1, r7
 800e982:	4630      	mov	r0, r6
 800e984:	f00b f832 	bl	80199ec <memcpy>
 800e988:	4630      	mov	r0, r6
 800e98a:	b009      	add	sp, #36	; 0x24
 800e98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98e:	bf00      	nop
 800e990:	200067a0 	.word	0x200067a0
 800e994:	0801c2f0 	.word	0x0801c2f0

0800e998 <rcl_take>:
 800e998:	2800      	cmp	r0, #0
 800e99a:	d040      	beq.n	800ea1e <rcl_take+0x86>
 800e99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	6800      	ldr	r0, [r0, #0]
 800e9a4:	b09d      	sub	sp, #116	; 0x74
 800e9a6:	b390      	cbz	r0, 800ea0e <rcl_take+0x76>
 800e9a8:	4699      	mov	r9, r3
 800e9aa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800e9ae:	b373      	cbz	r3, 800ea0e <rcl_take+0x76>
 800e9b0:	4688      	mov	r8, r1
 800e9b2:	b391      	cbz	r1, 800ea1a <rcl_take+0x82>
 800e9b4:	4617      	mov	r7, r2
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	d035      	beq.n	800ea26 <rcl_take+0x8e>
 800e9ba:	463d      	mov	r5, r7
 800e9bc:	a802      	add	r0, sp, #8
 800e9be:	f000 ff73 	bl	800f8a8 <rmw_get_zero_initialized_message_info>
 800e9c2:	f04f 0c00 	mov.w	ip, #0
 800e9c6:	ac02      	add	r4, sp, #8
 800e9c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9d0:	6836      	ldr	r6, [r6, #0]
 800e9d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e9d6:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 800e9da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800e9de:	463b      	mov	r3, r7
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	f8cd 9000 	str.w	r9, [sp]
 800e9e8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800e9ec:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 800e9f0:	f001 fe6a 	bl	80106c8 <rmw_take_with_info>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	b9c0      	cbnz	r0, 800ea2a <rcl_take+0x92>
 800e9f8:	f240 1291 	movw	r2, #401	; 0x191
 800e9fc:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ea00:	2900      	cmp	r1, #0
 800ea02:	bf08      	it	eq
 800ea04:	4613      	moveq	r3, r2
 800ea06:	4618      	mov	r0, r3
 800ea08:	b01d      	add	sp, #116	; 0x74
 800ea0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ea12:	4618      	mov	r0, r3
 800ea14:	b01d      	add	sp, #116	; 0x74
 800ea16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea1a:	230b      	movs	r3, #11
 800ea1c:	e7f3      	b.n	800ea06 <rcl_take+0x6e>
 800ea1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ea22:	4618      	mov	r0, r3
 800ea24:	4770      	bx	lr
 800ea26:	af10      	add	r7, sp, #64	; 0x40
 800ea28:	e7c7      	b.n	800e9ba <rcl_take+0x22>
 800ea2a:	f006 fe09 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	e7e9      	b.n	800ea06 <rcl_take+0x6e>
 800ea32:	bf00      	nop

0800ea34 <rcl_subscription_get_rmw_handle>:
 800ea34:	b118      	cbz	r0, 800ea3e <rcl_subscription_get_rmw_handle+0xa>
 800ea36:	6800      	ldr	r0, [r0, #0]
 800ea38:	b108      	cbz	r0, 800ea3e <rcl_subscription_get_rmw_handle+0xa>
 800ea3a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800ea3e:	4770      	bx	lr

0800ea40 <_rclc_check_for_new_data>:
 800ea40:	4603      	mov	r3, r0
 800ea42:	b1e0      	cbz	r0, 800ea7e <_rclc_check_for_new_data+0x3e>
 800ea44:	7802      	ldrb	r2, [r0, #0]
 800ea46:	2a08      	cmp	r2, #8
 800ea48:	d81b      	bhi.n	800ea82 <_rclc_check_for_new_data+0x42>
 800ea4a:	e8df f002 	tbb	[pc, r2]
 800ea4e:	1010      	.short	0x1010
 800ea50:	05121216 	.word	0x05121216
 800ea54:	0505      	.short	0x0505
 800ea56:	14          	.byte	0x14
 800ea57:	00          	.byte	0x00
 800ea58:	6a0a      	ldr	r2, [r1, #32]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ea5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ea62:	1a12      	subs	r2, r2, r0
 800ea64:	bf18      	it	ne
 800ea66:	2201      	movne	r2, #1
 800ea68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ea6c:	4770      	bx	lr
 800ea6e:	680a      	ldr	r2, [r1, #0]
 800ea70:	e7f3      	b.n	800ea5a <_rclc_check_for_new_data+0x1a>
 800ea72:	698a      	ldr	r2, [r1, #24]
 800ea74:	e7f1      	b.n	800ea5a <_rclc_check_for_new_data+0x1a>
 800ea76:	688a      	ldr	r2, [r1, #8]
 800ea78:	e7ef      	b.n	800ea5a <_rclc_check_for_new_data+0x1a>
 800ea7a:	690a      	ldr	r2, [r1, #16]
 800ea7c:	e7ed      	b.n	800ea5a <_rclc_check_for_new_data+0x1a>
 800ea7e:	200b      	movs	r0, #11
 800ea80:	4770      	bx	lr
 800ea82:	2200      	movs	r2, #0
 800ea84:	2001      	movs	r0, #1
 800ea86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ea8a:	4770      	bx	lr

0800ea8c <_rclc_take_new_data>:
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d049      	beq.n	800eb24 <_rclc_take_new_data+0x98>
 800ea90:	b510      	push	{r4, lr}
 800ea92:	7803      	ldrb	r3, [r0, #0]
 800ea94:	4604      	mov	r4, r0
 800ea96:	b08e      	sub	sp, #56	; 0x38
 800ea98:	2b08      	cmp	r3, #8
 800ea9a:	d84a      	bhi.n	800eb32 <_rclc_take_new_data+0xa6>
 800ea9c:	e8df f003 	tbb	[pc, r3]
 800eaa0:	2b121515 	.word	0x2b121515
 800eaa4:	0505052b 	.word	0x0505052b
 800eaa8:	12          	.byte	0x12
 800eaa9:	00          	.byte	0x00
 800eaaa:	6a0b      	ldr	r3, [r1, #32]
 800eaac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab2:	b13b      	cbz	r3, 800eac4 <_rclc_take_new_data+0x38>
 800eab4:	6882      	ldr	r2, [r0, #8]
 800eab6:	f100 0110 	add.w	r1, r0, #16
 800eaba:	6840      	ldr	r0, [r0, #4]
 800eabc:	f007 fbda 	bl	8016274 <rcl_take_request>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d131      	bne.n	800eb28 <_rclc_take_new_data+0x9c>
 800eac4:	2000      	movs	r0, #0
 800eac6:	b00e      	add	sp, #56	; 0x38
 800eac8:	bd10      	pop	{r4, pc}
 800eaca:	680b      	ldr	r3, [r1, #0]
 800eacc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0f6      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800ead6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800eada:	2300      	movs	r3, #0
 800eadc:	aa02      	add	r2, sp, #8
 800eade:	f7ff ff5b 	bl	800e998 <rcl_take>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d0ef      	beq.n	800eac6 <_rclc_take_new_data+0x3a>
 800eae6:	f240 1391 	movw	r3, #401	; 0x191
 800eaea:	4298      	cmp	r0, r3
 800eaec:	d115      	bne.n	800eb1a <_rclc_take_new_data+0x8e>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800eaf4:	e7e7      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eaf6:	698b      	ldr	r3, [r1, #24]
 800eaf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0e0      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800eb02:	6882      	ldr	r2, [r0, #8]
 800eb04:	f100 0110 	add.w	r1, r0, #16
 800eb08:	6840      	ldr	r0, [r0, #4]
 800eb0a:	f006 fd5d 	bl	80155c8 <rcl_take_response>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d0d8      	beq.n	800eac4 <_rclc_take_new_data+0x38>
 800eb12:	f240 13f5 	movw	r3, #501	; 0x1f5
 800eb16:	4298      	cmp	r0, r3
 800eb18:	d0d5      	beq.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb1a:	9001      	str	r0, [sp, #4]
 800eb1c:	f000 fd18 	bl	800f550 <rcutils_reset_error>
 800eb20:	9801      	ldr	r0, [sp, #4]
 800eb22:	e7d0      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb24:	200b      	movs	r0, #11
 800eb26:	4770      	bx	lr
 800eb28:	f240 2359 	movw	r3, #601	; 0x259
 800eb2c:	4298      	cmp	r0, r3
 800eb2e:	d0de      	beq.n	800eaee <_rclc_take_new_data+0x62>
 800eb30:	e7f3      	b.n	800eb1a <_rclc_take_new_data+0x8e>
 800eb32:	2001      	movs	r0, #1
 800eb34:	e7c7      	b.n	800eac6 <_rclc_take_new_data+0x3a>
 800eb36:	bf00      	nop

0800eb38 <rclc_executor_trigger_any>:
 800eb38:	4603      	mov	r3, r0
 800eb3a:	b178      	cbz	r0, 800eb5c <rclc_executor_trigger_any+0x24>
 800eb3c:	b179      	cbz	r1, 800eb5e <rclc_executor_trigger_any+0x26>
 800eb3e:	2200      	movs	r2, #0
 800eb40:	e005      	b.n	800eb4e <rclc_executor_trigger_any+0x16>
 800eb42:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800eb46:	3340      	adds	r3, #64	; 0x40
 800eb48:	b930      	cbnz	r0, 800eb58 <rclc_executor_trigger_any+0x20>
 800eb4a:	4291      	cmp	r1, r2
 800eb4c:	d005      	beq.n	800eb5a <rclc_executor_trigger_any+0x22>
 800eb4e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800eb52:	3201      	adds	r2, #1
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d1f4      	bne.n	800eb42 <rclc_executor_trigger_any+0xa>
 800eb58:	4770      	bx	lr
 800eb5a:	4770      	bx	lr
 800eb5c:	4770      	bx	lr
 800eb5e:	4608      	mov	r0, r1
 800eb60:	e7fa      	b.n	800eb58 <rclc_executor_trigger_any+0x20>
 800eb62:	bf00      	nop

0800eb64 <_rclc_execute.part.0>:
 800eb64:	b530      	push	{r4, r5, lr}
 800eb66:	7803      	ldrb	r3, [r0, #0]
 800eb68:	4604      	mov	r4, r0
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	2b08      	cmp	r3, #8
 800eb6e:	d857      	bhi.n	800ec20 <_rclc_execute.part.0+0xbc>
 800eb70:	e8df f003 	tbb	[pc, r3]
 800eb74:	31372820 	.word	0x31372820
 800eb78:	05050540 	.word	0x05050540
 800eb7c:	1b          	.byte	0x1b
 800eb7d:	00          	.byte	0x00
 800eb7e:	2b06      	cmp	r3, #6
 800eb80:	d046      	beq.n	800ec10 <_rclc_execute.part.0+0xac>
 800eb82:	2b07      	cmp	r3, #7
 800eb84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eb86:	d13d      	bne.n	800ec04 <_rclc_execute.part.0+0xa0>
 800eb88:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800eb8c:	6880      	ldr	r0, [r0, #8]
 800eb8e:	4798      	blx	r3
 800eb90:	f104 0510 	add.w	r5, r4, #16
 800eb94:	4629      	mov	r1, r5
 800eb96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eb98:	6860      	ldr	r0, [r4, #4]
 800eb9a:	f007 fba3 	bl	80162e4 <rcl_send_response>
 800eb9e:	b138      	cbz	r0, 800ebb0 <_rclc_execute.part.0+0x4c>
 800eba0:	9001      	str	r0, [sp, #4]
 800eba2:	f000 fcd5 	bl	800f550 <rcutils_reset_error>
 800eba6:	9801      	ldr	r0, [sp, #4]
 800eba8:	e002      	b.n	800ebb0 <_rclc_execute.part.0+0x4c>
 800ebaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebac:	4798      	blx	r3
 800ebae:	2000      	movs	r0, #0
 800ebb0:	b003      	add	sp, #12
 800ebb2:	bd30      	pop	{r4, r5, pc}
 800ebb4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ebb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebba:	b96d      	cbnz	r5, 800ebd8 <_rclc_execute.part.0+0x74>
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	4798      	blx	r3
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	e7f5      	b.n	800ebb0 <_rclc_execute.part.0+0x4c>
 800ebc4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ebc8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ebcc:	b9ad      	cbnz	r5, 800ebfa <_rclc_execute.part.0+0x96>
 800ebce:	4628      	mov	r0, r5
 800ebd0:	4798      	blx	r3
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	e7ec      	b.n	800ebb0 <_rclc_execute.part.0+0x4c>
 800ebd6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebd8:	68a0      	ldr	r0, [r4, #8]
 800ebda:	4798      	blx	r3
 800ebdc:	2000      	movs	r0, #0
 800ebde:	b003      	add	sp, #12
 800ebe0:	bd30      	pop	{r4, r5, pc}
 800ebe2:	6840      	ldr	r0, [r0, #4]
 800ebe4:	f007 fe42 	bl	801686c <rcl_timer_call>
 800ebe8:	f240 3321 	movw	r3, #801	; 0x321
 800ebec:	4298      	cmp	r0, r3
 800ebee:	d1d6      	bne.n	800eb9e <_rclc_execute.part.0+0x3a>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e7dd      	b.n	800ebb0 <_rclc_execute.part.0+0x4c>
 800ebf4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ebf6:	f100 0110 	add.w	r1, r0, #16
 800ebfa:	68a0      	ldr	r0, [r4, #8]
 800ebfc:	4798      	blx	r3
 800ebfe:	2000      	movs	r0, #0
 800ec00:	b003      	add	sp, #12
 800ec02:	bd30      	pop	{r4, r5, pc}
 800ec04:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ec06:	6880      	ldr	r0, [r0, #8]
 800ec08:	4798      	blx	r3
 800ec0a:	f104 0510 	add.w	r5, r4, #16
 800ec0e:	e7c1      	b.n	800eb94 <_rclc_execute.part.0+0x30>
 800ec10:	f100 0510 	add.w	r5, r0, #16
 800ec14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ec16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ec18:	4629      	mov	r1, r5
 800ec1a:	6880      	ldr	r0, [r0, #8]
 800ec1c:	4798      	blx	r3
 800ec1e:	e7b9      	b.n	800eb94 <_rclc_execute.part.0+0x30>
 800ec20:	2001      	movs	r0, #1
 800ec22:	e7c5      	b.n	800ebb0 <_rclc_execute.part.0+0x4c>
 800ec24:	0000      	movs	r0, r0
	...

0800ec28 <rclc_executor_init>:
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d064      	beq.n	800ecf6 <rclc_executor_init+0xce>
 800ec2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec30:	460f      	mov	r7, r1
 800ec32:	b0ae      	sub	sp, #184	; 0xb8
 800ec34:	2900      	cmp	r1, #0
 800ec36:	d056      	beq.n	800ece6 <rclc_executor_init+0xbe>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	469a      	mov	sl, r3
 800ec40:	f000 fb96 	bl	800f370 <rcutils_allocator_is_valid>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d04e      	beq.n	800ece6 <rclc_executor_init+0xbe>
 800ec48:	2e00      	cmp	r6, #0
 800ec4a:	d04c      	beq.n	800ece6 <rclc_executor_init+0xbe>
 800ec4c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 800ec50:	e9d9 8900 	ldrd	r8, r9, [r9]
 800ec54:	2280      	movs	r2, #128	; 0x80
 800ec56:	492a      	ldr	r1, [pc, #168]	; (800ed00 <rclc_executor_init+0xd8>)
 800ec58:	2400      	movs	r4, #0
 800ec5a:	a80e      	add	r0, sp, #56	; 0x38
 800ec5c:	f00a fec6 	bl	80199ec <memcpy>
 800ec60:	2280      	movs	r2, #128	; 0x80
 800ec62:	a90e      	add	r1, sp, #56	; 0x38
 800ec64:	4628      	mov	r0, r5
 800ec66:	f00a fec1 	bl	80199ec <memcpy>
 800ec6a:	602f      	str	r7, [r5, #0]
 800ec6c:	466f      	mov	r7, sp
 800ec6e:	4668      	mov	r0, sp
 800ec70:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ec74:	f008 f852 	bl	8016d1c <rcl_get_zero_initialized_wait_set>
 800ec78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec7a:	f105 0c14 	add.w	ip, r5, #20
 800ec7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec82:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	f8da 3000 	ldr.w	r3, [sl]
 800ec94:	f8da 1010 	ldr.w	r1, [sl, #16]
 800ec98:	f8cc 2000 	str.w	r2, [ip]
 800ec9c:	01b0      	lsls	r0, r6, #6
 800ec9e:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 800eca2:	f8c5 a010 	str.w	sl, [r5, #16]
 800eca6:	4798      	blx	r3
 800eca8:	6068      	str	r0, [r5, #4]
 800ecaa:	b908      	cbnz	r0, 800ecb0 <rclc_executor_init+0x88>
 800ecac:	e025      	b.n	800ecfa <rclc_executor_init+0xd2>
 800ecae:	6868      	ldr	r0, [r5, #4]
 800ecb0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ecb4:	4631      	mov	r1, r6
 800ecb6:	3401      	adds	r4, #1
 800ecb8:	f000 f9f0 	bl	800f09c <rclc_executor_handle_init>
 800ecbc:	42a6      	cmp	r6, r4
 800ecbe:	d1f6      	bne.n	800ecae <rclc_executor_init+0x86>
 800ecc0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ecc4:	f000 f9de 	bl	800f084 <rclc_executor_handle_counters_zero_init>
 800ecc8:	2000      	movs	r0, #0
 800ecca:	4a0e      	ldr	r2, [pc, #56]	; (800ed04 <rclc_executor_init+0xdc>)
 800eccc:	686b      	ldr	r3, [r5, #4]
 800ecce:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800ecd2:	b163      	cbz	r3, 800ecee <rclc_executor_init+0xc6>
 800ecd4:	692b      	ldr	r3, [r5, #16]
 800ecd6:	b153      	cbz	r3, 800ecee <rclc_executor_init+0xc6>
 800ecd8:	68ab      	ldr	r3, [r5, #8]
 800ecda:	b143      	cbz	r3, 800ecee <rclc_executor_init+0xc6>
 800ecdc:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800ece0:	b02e      	add	sp, #184	; 0xb8
 800ece2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece6:	200b      	movs	r0, #11
 800ece8:	b02e      	add	sp, #184	; 0xb8
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	b02e      	add	sp, #184	; 0xb8
 800ecf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf6:	200b      	movs	r0, #11
 800ecf8:	4770      	bx	lr
 800ecfa:	200a      	movs	r0, #10
 800ecfc:	e7f4      	b.n	800ece8 <rclc_executor_init+0xc0>
 800ecfe:	bf00      	nop
 800ed00:	0801c340 	.word	0x0801c340
 800ed04:	0800eb39 	.word	0x0800eb39
 800ed08:	3b9aca00 	.word	0x3b9aca00
 800ed0c:	00000000 	.word	0x00000000

0800ed10 <rclc_executor_add_timer>:
 800ed10:	b308      	cbz	r0, 800ed56 <rclc_executor_add_timer+0x46>
 800ed12:	b301      	cbz	r1, 800ed56 <rclc_executor_add_timer+0x46>
 800ed14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed16:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	d301      	bcc.n	800ed24 <rclc_executor_add_timer+0x14>
 800ed20:	2001      	movs	r0, #1
 800ed22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed24:	2502      	movs	r5, #2
 800ed26:	2701      	movs	r7, #1
 800ed28:	2600      	movs	r6, #0
 800ed2a:	6840      	ldr	r0, [r0, #4]
 800ed2c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ed30:	6051      	str	r1, [r2, #4]
 800ed32:	0199      	lsls	r1, r3, #6
 800ed34:	5245      	strh	r5, [r0, r1]
 800ed36:	443b      	add	r3, r7
 800ed38:	f104 0514 	add.w	r5, r4, #20
 800ed3c:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800ed40:	62d6      	str	r6, [r2, #44]	; 0x2c
 800ed42:	4628      	mov	r0, r5
 800ed44:	60e3      	str	r3, [r4, #12]
 800ed46:	f007 fffb 	bl	8016d40 <rcl_wait_set_is_valid>
 800ed4a:	b930      	cbnz	r0, 800ed5a <rclc_executor_add_timer+0x4a>
 800ed4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ed4e:	2000      	movs	r0, #0
 800ed50:	3301      	adds	r3, #1
 800ed52:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed56:	200b      	movs	r0, #11
 800ed58:	4770      	bx	lr
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f007 fff6 	bl	8016d4c <rcl_wait_set_fini>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d0f3      	beq.n	800ed4c <rclc_executor_add_timer+0x3c>
 800ed64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed66:	bf00      	nop

0800ed68 <rclc_executor_prepare>:
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d03d      	beq.n	800ede8 <rclc_executor_prepare+0x80>
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed70:	f100 0814 	add.w	r8, r0, #20
 800ed74:	4604      	mov	r4, r0
 800ed76:	b09a      	sub	sp, #104	; 0x68
 800ed78:	4640      	mov	r0, r8
 800ed7a:	f007 ffe1 	bl	8016d40 <rcl_wait_set_is_valid>
 800ed7e:	b118      	cbz	r0, 800ed88 <rclc_executor_prepare+0x20>
 800ed80:	2000      	movs	r0, #0
 800ed82:	b01a      	add	sp, #104	; 0x68
 800ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed88:	4640      	mov	r0, r8
 800ed8a:	f007 ffdf 	bl	8016d4c <rcl_wait_set_fini>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d127      	bne.n	800ede2 <rclc_executor_prepare+0x7a>
 800ed92:	4646      	mov	r6, r8
 800ed94:	a80c      	add	r0, sp, #48	; 0x30
 800ed96:	ad0c      	add	r5, sp, #48	; 0x30
 800ed98:	f007 ffc0 	bl	8016d1c <rcl_get_zero_initialized_wait_set>
 800ed9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eda0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eda2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eda6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eda8:	6927      	ldr	r7, [r4, #16]
 800edaa:	682b      	ldr	r3, [r5, #0]
 800edac:	ad04      	add	r5, sp, #16
 800edae:	6033      	str	r3, [r6, #0]
 800edb0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800edb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edb4:	6838      	ldr	r0, [r7, #0]
 800edb6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800edb8:	6826      	ldr	r6, [r4, #0]
 800edba:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800edbe:	6028      	str	r0, [r5, #0]
 800edc0:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800edc4:	e9cd 3200 	strd	r3, r2, [sp]
 800edc8:	4640      	mov	r0, r8
 800edca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800edcc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edd0:	f008 fade 	bl	8017390 <rcl_wait_set_init>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d0d4      	beq.n	800ed82 <rclc_executor_prepare+0x1a>
 800edd8:	900b      	str	r0, [sp, #44]	; 0x2c
 800edda:	f000 fbb9 	bl	800f550 <rcutils_reset_error>
 800edde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ede0:	e7cf      	b.n	800ed82 <rclc_executor_prepare+0x1a>
 800ede2:	f000 fbb5 	bl	800f550 <rcutils_reset_error>
 800ede6:	e7d4      	b.n	800ed92 <rclc_executor_prepare+0x2a>
 800ede8:	200b      	movs	r0, #11
 800edea:	4770      	bx	lr

0800edec <rclc_executor_spin_some.part.0>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	f100 0814 	add.w	r8, r0, #20
 800edf4:	b083      	sub	sp, #12
 800edf6:	4692      	mov	sl, r2
 800edf8:	4699      	mov	r9, r3
 800edfa:	4605      	mov	r5, r0
 800edfc:	f7ff ffb4 	bl	800ed68 <rclc_executor_prepare>
 800ee00:	4640      	mov	r0, r8
 800ee02:	f008 f873 	bl	8016eec <rcl_wait_set_clear>
 800ee06:	4607      	mov	r7, r0
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	f040 80bb 	bne.w	800ef84 <rclc_executor_spin_some.part.0+0x198>
 800ee0e:	68ab      	ldr	r3, [r5, #8]
 800ee10:	4604      	mov	r4, r0
 800ee12:	b1eb      	cbz	r3, 800ee50 <rclc_executor_spin_some.part.0+0x64>
 800ee14:	686e      	ldr	r6, [r5, #4]
 800ee16:	01a2      	lsls	r2, r4, #6
 800ee18:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800ee1c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800ee20:	b1b3      	cbz	r3, 800ee50 <rclc_executor_spin_some.part.0+0x64>
 800ee22:	5cb3      	ldrb	r3, [r6, r2]
 800ee24:	2b08      	cmp	r3, #8
 800ee26:	f200 80a6 	bhi.w	800ef76 <rclc_executor_spin_some.part.0+0x18a>
 800ee2a:	e8df f003 	tbb	[pc, r3]
 800ee2e:	8686      	.short	0x8686
 800ee30:	05787890 	.word	0x05787890
 800ee34:	0505      	.short	0x0505
 800ee36:	9a          	.byte	0x9a
 800ee37:	00          	.byte	0x00
 800ee38:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	6849      	ldr	r1, [r1, #4]
 800ee40:	f008 fbbc 	bl	80175bc <rcl_wait_set_add_service>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d172      	bne.n	800ef2e <rclc_executor_spin_some.part.0+0x142>
 800ee48:	68ab      	ldr	r3, [r5, #8]
 800ee4a:	3401      	adds	r4, #1
 800ee4c:	429c      	cmp	r4, r3
 800ee4e:	d3e1      	bcc.n	800ee14 <rclc_executor_spin_some.part.0+0x28>
 800ee50:	464b      	mov	r3, r9
 800ee52:	4652      	mov	r2, sl
 800ee54:	4640      	mov	r0, r8
 800ee56:	f008 fbdf 	bl	8017618 <rcl_wait>
 800ee5a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f000 8098 	beq.w	800ef94 <rclc_executor_spin_some.part.0+0x1a8>
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	f040 8086 	bne.w	800ef76 <rclc_executor_spin_some.part.0+0x18a>
 800ee6a:	68a9      	ldr	r1, [r5, #8]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	f000 80ea 	beq.w	800f046 <rclc_executor_spin_some.part.0+0x25a>
 800ee72:	2400      	movs	r4, #0
 800ee74:	f240 1991 	movw	r9, #401	; 0x191
 800ee78:	4626      	mov	r6, r4
 800ee7a:	e00b      	b.n	800ee94 <rclc_executor_spin_some.part.0+0xa8>
 800ee7c:	4641      	mov	r1, r8
 800ee7e:	f7ff fddf 	bl	800ea40 <_rclc_check_for_new_data>
 800ee82:	4604      	mov	r4, r0
 800ee84:	b110      	cbz	r0, 800ee8c <rclc_executor_spin_some.part.0+0xa0>
 800ee86:	4548      	cmp	r0, r9
 800ee88:	f040 8082 	bne.w	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800ee8c:	68a9      	ldr	r1, [r5, #8]
 800ee8e:	428e      	cmp	r6, r1
 800ee90:	f080 80d5 	bcs.w	800f03e <rclc_executor_spin_some.part.0+0x252>
 800ee94:	686b      	ldr	r3, [r5, #4]
 800ee96:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800ee9a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ee9e:	3601      	adds	r6, #1
 800eea0:	2a00      	cmp	r2, #0
 800eea2:	d1eb      	bne.n	800ee7c <rclc_executor_spin_some.part.0+0x90>
 800eea4:	4618      	mov	r0, r3
 800eea6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800eeaa:	4798      	blx	r3
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d06f      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800eeb0:	68ab      	ldr	r3, [r5, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d06c      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800eeb6:	2600      	movs	r6, #0
 800eeb8:	f240 1991 	movw	r9, #401	; 0x191
 800eebc:	e009      	b.n	800eed2 <rclc_executor_spin_some.part.0+0xe6>
 800eebe:	4641      	mov	r1, r8
 800eec0:	f7ff fde4 	bl	800ea8c <_rclc_take_new_data>
 800eec4:	4604      	mov	r4, r0
 800eec6:	b108      	cbz	r0, 800eecc <rclc_executor_spin_some.part.0+0xe0>
 800eec8:	4548      	cmp	r0, r9
 800eeca:	d161      	bne.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800eecc:	68ab      	ldr	r3, [r5, #8]
 800eece:	429e      	cmp	r6, r3
 800eed0:	d207      	bcs.n	800eee2 <rclc_executor_spin_some.part.0+0xf6>
 800eed2:	6868      	ldr	r0, [r5, #4]
 800eed4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800eed8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800eedc:	3601      	adds	r6, #1
 800eede:	2a00      	cmp	r2, #0
 800eee0:	d1ed      	bne.n	800eebe <rclc_executor_spin_some.part.0+0xd2>
 800eee2:	2600      	movs	r6, #0
 800eee4:	b933      	cbnz	r3, 800eef4 <rclc_executor_spin_some.part.0+0x108>
 800eee6:	e053      	b.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800eee8:	2a01      	cmp	r2, #1
 800eeea:	d011      	beq.n	800ef10 <rclc_executor_spin_some.part.0+0x124>
 800eeec:	3601      	adds	r6, #1
 800eeee:	429e      	cmp	r6, r3
 800eef0:	d244      	bcs.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800eef2:	2400      	movs	r4, #0
 800eef4:	6868      	ldr	r0, [r5, #4]
 800eef6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800eefa:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800eefe:	2a00      	cmp	r2, #0
 800ef00:	d046      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800ef02:	7842      	ldrb	r2, [r0, #1]
 800ef04:	2a00      	cmp	r2, #0
 800ef06:	d1ef      	bne.n	800eee8 <rclc_executor_spin_some.part.0+0xfc>
 800ef08:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800ef0c:	2a00      	cmp	r2, #0
 800ef0e:	d0ed      	beq.n	800eeec <rclc_executor_spin_some.part.0+0x100>
 800ef10:	f7ff fe28 	bl	800eb64 <_rclc_execute.part.0>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f040 8094 	bne.w	800f042 <rclc_executor_spin_some.part.0+0x256>
 800ef1a:	68ab      	ldr	r3, [r5, #8]
 800ef1c:	e7e6      	b.n	800eeec <rclc_executor_spin_some.part.0+0x100>
 800ef1e:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef22:	4640      	mov	r0, r8
 800ef24:	6849      	ldr	r1, [r1, #4]
 800ef26:	f008 fb1d 	bl	8017564 <rcl_wait_set_add_client>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d08c      	beq.n	800ee48 <rclc_executor_spin_some.part.0+0x5c>
 800ef2e:	9001      	str	r0, [sp, #4]
 800ef30:	f000 fb0e 	bl	800f550 <rcutils_reset_error>
 800ef34:	9801      	ldr	r0, [sp, #4]
 800ef36:	4607      	mov	r7, r0
 800ef38:	e020      	b.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800ef3a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef3e:	4640      	mov	r0, r8
 800ef40:	6849      	ldr	r1, [r1, #4]
 800ef42:	f007 ffa7 	bl	8016e94 <rcl_wait_set_add_subscription>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f af7e 	beq.w	800ee48 <rclc_executor_spin_some.part.0+0x5c>
 800ef4c:	e7ef      	b.n	800ef2e <rclc_executor_spin_some.part.0+0x142>
 800ef4e:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef52:	4640      	mov	r0, r8
 800ef54:	6849      	ldr	r1, [r1, #4]
 800ef56:	f008 fad5 	bl	8017504 <rcl_wait_set_add_timer>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	f43f af74 	beq.w	800ee48 <rclc_executor_spin_some.part.0+0x5c>
 800ef60:	e7e5      	b.n	800ef2e <rclc_executor_spin_some.part.0+0x142>
 800ef62:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ef66:	4640      	mov	r0, r8
 800ef68:	6849      	ldr	r1, [r1, #4]
 800ef6a:	f008 fa9f 	bl	80174ac <rcl_wait_set_add_guard_condition>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	f43f af6a 	beq.w	800ee48 <rclc_executor_spin_some.part.0+0x5c>
 800ef74:	e7db      	b.n	800ef2e <rclc_executor_spin_some.part.0+0x142>
 800ef76:	f000 faeb 	bl	800f550 <rcutils_reset_error>
 800ef7a:	2701      	movs	r7, #1
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	b003      	add	sp, #12
 800ef80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef84:	f000 fae4 	bl	800f550 <rcutils_reset_error>
 800ef88:	4638      	mov	r0, r7
 800ef8a:	b003      	add	sp, #12
 800ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef90:	4627      	mov	r7, r4
 800ef92:	e7f3      	b.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800ef94:	68a9      	ldr	r1, [r5, #8]
 800ef96:	2900      	cmp	r1, #0
 800ef98:	d058      	beq.n	800f04c <rclc_executor_spin_some.part.0+0x260>
 800ef9a:	2400      	movs	r4, #0
 800ef9c:	f240 1991 	movw	r9, #401	; 0x191
 800efa0:	4626      	mov	r6, r4
 800efa2:	e009      	b.n	800efb8 <rclc_executor_spin_some.part.0+0x1cc>
 800efa4:	4641      	mov	r1, r8
 800efa6:	f7ff fd4b 	bl	800ea40 <_rclc_check_for_new_data>
 800efaa:	4604      	mov	r4, r0
 800efac:	b108      	cbz	r0, 800efb2 <rclc_executor_spin_some.part.0+0x1c6>
 800efae:	4548      	cmp	r0, r9
 800efb0:	d1ee      	bne.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800efb2:	68a9      	ldr	r1, [r5, #8]
 800efb4:	428e      	cmp	r6, r1
 800efb6:	d240      	bcs.n	800f03a <rclc_executor_spin_some.part.0+0x24e>
 800efb8:	686b      	ldr	r3, [r5, #4]
 800efba:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800efbe:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800efc2:	3601      	adds	r6, #1
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	d1ed      	bne.n	800efa4 <rclc_executor_spin_some.part.0+0x1b8>
 800efc8:	4618      	mov	r0, r3
 800efca:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800efce:	4798      	blx	r3
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d0dd      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800efd4:	68ab      	ldr	r3, [r5, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0da      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800efda:	f04f 0a00 	mov.w	sl, #0
 800efde:	f240 1691 	movw	r6, #401	; 0x191
 800efe2:	f240 2959 	movw	r9, #601	; 0x259
 800efe6:	e00b      	b.n	800f000 <rclc_executor_spin_some.part.0+0x214>
 800efe8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800efec:	b113      	cbz	r3, 800eff4 <rclc_executor_spin_some.part.0+0x208>
 800efee:	f7ff fdb9 	bl	800eb64 <_rclc_execute.part.0>
 800eff2:	bb30      	cbnz	r0, 800f042 <rclc_executor_spin_some.part.0+0x256>
 800eff4:	68ab      	ldr	r3, [r5, #8]
 800eff6:	f10a 0a01 	add.w	sl, sl, #1
 800effa:	459a      	cmp	sl, r3
 800effc:	d2be      	bcs.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800effe:	2400      	movs	r4, #0
 800f000:	6868      	ldr	r0, [r5, #4]
 800f002:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f006:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f00a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d0be      	beq.n	800ef90 <rclc_executor_spin_some.part.0+0x1a4>
 800f012:	4641      	mov	r1, r8
 800f014:	f7ff fd3a 	bl	800ea8c <_rclc_take_new_data>
 800f018:	b118      	cbz	r0, 800f022 <rclc_executor_spin_some.part.0+0x236>
 800f01a:	42b0      	cmp	r0, r6
 800f01c:	d001      	beq.n	800f022 <rclc_executor_spin_some.part.0+0x236>
 800f01e:	4548      	cmp	r0, r9
 800f020:	d10f      	bne.n	800f042 <rclc_executor_spin_some.part.0+0x256>
 800f022:	6868      	ldr	r0, [r5, #4]
 800f024:	eb10 000b 	adds.w	r0, r0, fp
 800f028:	d005      	beq.n	800f036 <rclc_executor_spin_some.part.0+0x24a>
 800f02a:	7843      	ldrb	r3, [r0, #1]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0db      	beq.n	800efe8 <rclc_executor_spin_some.part.0+0x1fc>
 800f030:	2b01      	cmp	r3, #1
 800f032:	d1df      	bne.n	800eff4 <rclc_executor_spin_some.part.0+0x208>
 800f034:	e7db      	b.n	800efee <rclc_executor_spin_some.part.0+0x202>
 800f036:	270b      	movs	r7, #11
 800f038:	e7a0      	b.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800f03a:	686b      	ldr	r3, [r5, #4]
 800f03c:	e7c4      	b.n	800efc8 <rclc_executor_spin_some.part.0+0x1dc>
 800f03e:	686b      	ldr	r3, [r5, #4]
 800f040:	e730      	b.n	800eea4 <rclc_executor_spin_some.part.0+0xb8>
 800f042:	4607      	mov	r7, r0
 800f044:	e79a      	b.n	800ef7c <rclc_executor_spin_some.part.0+0x190>
 800f046:	460c      	mov	r4, r1
 800f048:	686b      	ldr	r3, [r5, #4]
 800f04a:	e72b      	b.n	800eea4 <rclc_executor_spin_some.part.0+0xb8>
 800f04c:	460c      	mov	r4, r1
 800f04e:	686b      	ldr	r3, [r5, #4]
 800f050:	e7ba      	b.n	800efc8 <rclc_executor_spin_some.part.0+0x1dc>
 800f052:	bf00      	nop

0800f054 <rclc_executor_spin>:
 800f054:	b1a0      	cbz	r0, 800f080 <rclc_executor_spin+0x2c>
 800f056:	b5d0      	push	{r4, r6, r7, lr}
 800f058:	4604      	mov	r4, r0
 800f05a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800f05e:	6820      	ldr	r0, [r4, #0]
 800f060:	f006 fb12 	bl	8015688 <rcl_context_is_valid>
 800f064:	b140      	cbz	r0, 800f078 <rclc_executor_spin+0x24>
 800f066:	463b      	mov	r3, r7
 800f068:	4632      	mov	r2, r6
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff febe 	bl	800edec <rclc_executor_spin_some.part.0>
 800f070:	f030 0302 	bics.w	r3, r0, #2
 800f074:	d0f1      	beq.n	800f05a <rclc_executor_spin+0x6>
 800f076:	bdd0      	pop	{r4, r6, r7, pc}
 800f078:	f000 fa6a 	bl	800f550 <rcutils_reset_error>
 800f07c:	2001      	movs	r0, #1
 800f07e:	bdd0      	pop	{r4, r6, r7, pc}
 800f080:	200b      	movs	r0, #11
 800f082:	4770      	bx	lr

0800f084 <rclc_executor_handle_counters_zero_init>:
 800f084:	b140      	cbz	r0, 800f098 <rclc_executor_handle_counters_zero_init+0x14>
 800f086:	2300      	movs	r3, #0
 800f088:	6003      	str	r3, [r0, #0]
 800f08a:	6043      	str	r3, [r0, #4]
 800f08c:	6083      	str	r3, [r0, #8]
 800f08e:	60c3      	str	r3, [r0, #12]
 800f090:	6103      	str	r3, [r0, #16]
 800f092:	6143      	str	r3, [r0, #20]
 800f094:	4618      	mov	r0, r3
 800f096:	4770      	bx	lr
 800f098:	200b      	movs	r0, #11
 800f09a:	4770      	bx	lr

0800f09c <rclc_executor_handle_init>:
 800f09c:	b178      	cbz	r0, 800f0be <rclc_executor_handle_init+0x22>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2209      	movs	r2, #9
 800f0a2:	b430      	push	{r4, r5}
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	2400      	movs	r4, #0
 800f0a8:	2500      	movs	r5, #0
 800f0aa:	801a      	strh	r2, [r3, #0]
 800f0ac:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f0b0:	bc30      	pop	{r4, r5}
 800f0b2:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f0b6:	6359      	str	r1, [r3, #52]	; 0x34
 800f0b8:	6318      	str	r0, [r3, #48]	; 0x30
 800f0ba:	8718      	strh	r0, [r3, #56]	; 0x38
 800f0bc:	4770      	bx	lr
 800f0be:	200b      	movs	r0, #11
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop

0800f0c4 <rclc_support_init_with_options>:
 800f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800f0ce:	b390      	cbz	r0, 800f136 <rclc_support_init_with_options+0x72>
 800f0d0:	461c      	mov	r4, r3
 800f0d2:	b383      	cbz	r3, 800f136 <rclc_support_init_with_options+0x72>
 800f0d4:	f1b8 0f00 	cmp.w	r8, #0
 800f0d8:	d02d      	beq.n	800f136 <rclc_support_init_with_options+0x72>
 800f0da:	4605      	mov	r5, r0
 800f0dc:	460e      	mov	r6, r1
 800f0de:	4617      	mov	r7, r2
 800f0e0:	f7ff f8bc 	bl	800e25c <rcl_get_zero_initialized_init_options>
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	6028      	str	r0, [r5, #0]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff f92f 	bl	800e34c <rcl_init_options_copy>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	b9d8      	cbnz	r0, 800f12a <rclc_support_init_with_options+0x66>
 800f0f2:	466c      	mov	r4, sp
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f006 fab7 	bl	8015668 <rcl_get_zero_initialized_context>
 800f0fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0fe:	f105 0408 	add.w	r4, r5, #8
 800f102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f106:	4623      	mov	r3, r4
 800f108:	4639      	mov	r1, r7
 800f10a:	4630      	mov	r0, r6
 800f10c:	462a      	mov	r2, r5
 800f10e:	f006 fc9f 	bl	8015a50 <rcl_init>
 800f112:	4604      	mov	r4, r0
 800f114:	b948      	cbnz	r0, 800f12a <rclc_support_init_with_options+0x66>
 800f116:	4642      	mov	r2, r8
 800f118:	2003      	movs	r0, #3
 800f11a:	f8c5 8018 	str.w	r8, [r5, #24]
 800f11e:	f105 011c 	add.w	r1, r5, #28
 800f122:	f007 f90f 	bl	8016344 <rcl_clock_init>
 800f126:	4604      	mov	r4, r0
 800f128:	b108      	cbz	r0, 800f12e <rclc_support_init_with_options+0x6a>
 800f12a:	f000 fa11 	bl	800f550 <rcutils_reset_error>
 800f12e:	4620      	mov	r0, r4
 800f130:	b004      	add	sp, #16
 800f132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f136:	240b      	movs	r4, #11
 800f138:	4620      	mov	r0, r4
 800f13a:	b004      	add	sp, #16
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f140 <rclc_node_init_default>:
 800f140:	b3c0      	cbz	r0, 800f1b4 <rclc_node_init_default+0x74>
 800f142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f146:	460d      	mov	r5, r1
 800f148:	b08f      	sub	sp, #60	; 0x3c
 800f14a:	b331      	cbz	r1, 800f19a <rclc_node_init_default+0x5a>
 800f14c:	4616      	mov	r6, r2
 800f14e:	b322      	cbz	r2, 800f19a <rclc_node_init_default+0x5a>
 800f150:	461f      	mov	r7, r3
 800f152:	b313      	cbz	r3, 800f19a <rclc_node_init_default+0x5a>
 800f154:	4604      	mov	r4, r0
 800f156:	f10d 0810 	add.w	r8, sp, #16
 800f15a:	4640      	mov	r0, r8
 800f15c:	f10d 091c 	add.w	r9, sp, #28
 800f160:	f006 fdae 	bl	8015cc0 <rcl_get_zero_initialized_node>
 800f164:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f168:	e884 0003 	stmia.w	r4, {r0, r1}
 800f16c:	4648      	mov	r0, r9
 800f16e:	f006 ff43 	bl	8015ff8 <rcl_node_get_default_options>
 800f172:	4640      	mov	r0, r8
 800f174:	f006 fda4 	bl	8015cc0 <rcl_get_zero_initialized_node>
 800f178:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f17c:	4632      	mov	r2, r6
 800f17e:	f8cd 9000 	str.w	r9, [sp]
 800f182:	f107 0308 	add.w	r3, r7, #8
 800f186:	e884 0003 	stmia.w	r4, {r0, r1}
 800f18a:	4629      	mov	r1, r5
 800f18c:	4620      	mov	r0, r4
 800f18e:	f006 fda1 	bl	8015cd4 <rcl_node_init>
 800f192:	b930      	cbnz	r0, 800f1a2 <rclc_node_init_default+0x62>
 800f194:	b00f      	add	sp, #60	; 0x3c
 800f196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f19a:	200b      	movs	r0, #11
 800f19c:	b00f      	add	sp, #60	; 0x3c
 800f19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a2:	9003      	str	r0, [sp, #12]
 800f1a4:	f000 f9d4 	bl	800f550 <rcutils_reset_error>
 800f1a8:	f000 f9d2 	bl	800f550 <rcutils_reset_error>
 800f1ac:	9803      	ldr	r0, [sp, #12]
 800f1ae:	b00f      	add	sp, #60	; 0x3c
 800f1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b4:	200b      	movs	r0, #11
 800f1b6:	4770      	bx	lr

0800f1b8 <rclc_publisher_init_default>:
 800f1b8:	b368      	cbz	r0, 800f216 <rclc_publisher_init_default+0x5e>
 800f1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1be:	460d      	mov	r5, r1
 800f1c0:	b09e      	sub	sp, #120	; 0x78
 800f1c2:	b321      	cbz	r1, 800f20e <rclc_publisher_init_default+0x56>
 800f1c4:	4616      	mov	r6, r2
 800f1c6:	b312      	cbz	r2, 800f20e <rclc_publisher_init_default+0x56>
 800f1c8:	461f      	mov	r7, r3
 800f1ca:	b303      	cbz	r3, 800f20e <rclc_publisher_init_default+0x56>
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	f7ff f979 	bl	800e4c4 <rcl_get_zero_initialized_publisher>
 800f1d2:	f10d 0810 	add.w	r8, sp, #16
 800f1d6:	6020      	str	r0, [r4, #0]
 800f1d8:	4640      	mov	r0, r8
 800f1da:	f7ff fa71 	bl	800e6c0 <rcl_publisher_get_default_options>
 800f1de:	2250      	movs	r2, #80	; 0x50
 800f1e0:	490e      	ldr	r1, [pc, #56]	; (800f21c <rclc_publisher_init_default+0x64>)
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	f00a fc02 	bl	80199ec <memcpy>
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	4632      	mov	r2, r6
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f8cd 8000 	str.w	r8, [sp]
 800f1f4:	f7ff f96c 	bl	800e4d0 <rcl_publisher_init>
 800f1f8:	b910      	cbnz	r0, 800f200 <rclc_publisher_init_default+0x48>
 800f1fa:	b01e      	add	sp, #120	; 0x78
 800f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f200:	9003      	str	r0, [sp, #12]
 800f202:	f000 f9a5 	bl	800f550 <rcutils_reset_error>
 800f206:	9803      	ldr	r0, [sp, #12]
 800f208:	b01e      	add	sp, #120	; 0x78
 800f20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f20e:	200b      	movs	r0, #11
 800f210:	b01e      	add	sp, #120	; 0x78
 800f212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f216:	200b      	movs	r0, #11
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	0801c3c0 	.word	0x0801c3c0

0800f220 <rclc_subscription_init_best_effort>:
 800f220:	b368      	cbz	r0, 800f27e <rclc_subscription_init_best_effort+0x5e>
 800f222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f226:	460d      	mov	r5, r1
 800f228:	b0a0      	sub	sp, #128	; 0x80
 800f22a:	b321      	cbz	r1, 800f276 <rclc_subscription_init_best_effort+0x56>
 800f22c:	4616      	mov	r6, r2
 800f22e:	b312      	cbz	r2, 800f276 <rclc_subscription_init_best_effort+0x56>
 800f230:	461f      	mov	r7, r3
 800f232:	b303      	cbz	r3, 800f276 <rclc_subscription_init_best_effort+0x56>
 800f234:	4604      	mov	r4, r0
 800f236:	f7ff fa89 	bl	800e74c <rcl_get_zero_initialized_subscription>
 800f23a:	f10d 0810 	add.w	r8, sp, #16
 800f23e:	6020      	str	r0, [r4, #0]
 800f240:	4640      	mov	r0, r8
 800f242:	f7ff fb7f 	bl	800e944 <rcl_subscription_get_default_options>
 800f246:	2250      	movs	r2, #80	; 0x50
 800f248:	490e      	ldr	r1, [pc, #56]	; (800f284 <rclc_subscription_init_best_effort+0x64>)
 800f24a:	4640      	mov	r0, r8
 800f24c:	f00a fbce 	bl	80199ec <memcpy>
 800f250:	463b      	mov	r3, r7
 800f252:	4632      	mov	r2, r6
 800f254:	4629      	mov	r1, r5
 800f256:	4620      	mov	r0, r4
 800f258:	f8cd 8000 	str.w	r8, [sp]
 800f25c:	f7ff fa7c 	bl	800e758 <rcl_subscription_init>
 800f260:	b910      	cbnz	r0, 800f268 <rclc_subscription_init_best_effort+0x48>
 800f262:	b020      	add	sp, #128	; 0x80
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f268:	9003      	str	r0, [sp, #12]
 800f26a:	f000 f971 	bl	800f550 <rcutils_reset_error>
 800f26e:	9803      	ldr	r0, [sp, #12]
 800f270:	b020      	add	sp, #128	; 0x80
 800f272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f276:	200b      	movs	r0, #11
 800f278:	b020      	add	sp, #128	; 0x80
 800f27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27e:	200b      	movs	r0, #11
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	0801c410 	.word	0x0801c410

0800f288 <rclc_timer_init_default>:
 800f288:	b360      	cbz	r0, 800f2e4 <rclc_timer_init_default+0x5c>
 800f28a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f28e:	460c      	mov	r4, r1
 800f290:	b08b      	sub	sp, #44	; 0x2c
 800f292:	b319      	cbz	r1, 800f2dc <rclc_timer_init_default+0x54>
 800f294:	4691      	mov	r9, r2
 800f296:	4698      	mov	r8, r3
 800f298:	4607      	mov	r7, r0
 800f29a:	f007 fa37 	bl	801670c <rcl_get_zero_initialized_timer>
 800f29e:	4684      	mov	ip, r0
 800f2a0:	69a6      	ldr	r6, [r4, #24]
 800f2a2:	ad03      	add	r5, sp, #12
 800f2a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f2a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2a8:	6833      	ldr	r3, [r6, #0]
 800f2aa:	f8c7 c000 	str.w	ip, [r7]
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	e9cd 9800 	strd	r9, r8, [sp]
 800f2b8:	9302      	str	r3, [sp, #8]
 800f2ba:	f104 0208 	add.w	r2, r4, #8
 800f2be:	f104 011c 	add.w	r1, r4, #28
 800f2c2:	f007 fa29 	bl	8016718 <rcl_timer_init>
 800f2c6:	b910      	cbnz	r0, 800f2ce <rclc_timer_init_default+0x46>
 800f2c8:	b00b      	add	sp, #44	; 0x2c
 800f2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ce:	9009      	str	r0, [sp, #36]	; 0x24
 800f2d0:	f000 f93e 	bl	800f550 <rcutils_reset_error>
 800f2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2d6:	b00b      	add	sp, #44	; 0x2c
 800f2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2dc:	200b      	movs	r0, #11
 800f2de:	b00b      	add	sp, #44	; 0x2c
 800f2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e4:	200b      	movs	r0, #11
 800f2e6:	4770      	bx	lr

0800f2e8 <__default_zero_allocate>:
 800f2e8:	f00a baf8 	b.w	80198dc <calloc>

0800f2ec <__default_reallocate>:
 800f2ec:	f00a bce8 	b.w	8019cc0 <realloc>

0800f2f0 <__default_deallocate>:
 800f2f0:	f00a bb74 	b.w	80199dc <free>

0800f2f4 <__default_allocate>:
 800f2f4:	f00a bb6a 	b.w	80199cc <malloc>

0800f2f8 <rcutils_get_zero_initialized_allocator>:
 800f2f8:	b470      	push	{r4, r5, r6}
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	4d04      	ldr	r5, [pc, #16]	; (800f310 <rcutils_get_zero_initialized_allocator+0x18>)
 800f300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	4630      	mov	r0, r6
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bc70      	pop	{r4, r5, r6}
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	0801c460 	.word	0x0801c460

0800f314 <rcutils_set_default_allocator>:
 800f314:	b1a0      	cbz	r0, 800f340 <rcutils_set_default_allocator+0x2c>
 800f316:	6802      	ldr	r2, [r0, #0]
 800f318:	b19a      	cbz	r2, 800f342 <rcutils_set_default_allocator+0x2e>
 800f31a:	6841      	ldr	r1, [r0, #4]
 800f31c:	b199      	cbz	r1, 800f346 <rcutils_set_default_allocator+0x32>
 800f31e:	b470      	push	{r4, r5, r6}
 800f320:	68c4      	ldr	r4, [r0, #12]
 800f322:	b15c      	cbz	r4, 800f33c <rcutils_set_default_allocator+0x28>
 800f324:	6885      	ldr	r5, [r0, #8]
 800f326:	b185      	cbz	r5, 800f34a <rcutils_set_default_allocator+0x36>
 800f328:	2600      	movs	r6, #0
 800f32a:	2001      	movs	r0, #1
 800f32c:	4b08      	ldr	r3, [pc, #32]	; (800f350 <rcutils_set_default_allocator+0x3c>)
 800f32e:	e9c3 2100 	strd	r2, r1, [r3]
 800f332:	e9c3 5402 	strd	r5, r4, [r3, #8]
 800f336:	611e      	str	r6, [r3, #16]
 800f338:	bc70      	pop	{r4, r5, r6}
 800f33a:	4770      	bx	lr
 800f33c:	4620      	mov	r0, r4
 800f33e:	e7fb      	b.n	800f338 <rcutils_set_default_allocator+0x24>
 800f340:	4770      	bx	lr
 800f342:	4610      	mov	r0, r2
 800f344:	4770      	bx	lr
 800f346:	4608      	mov	r0, r1
 800f348:	4770      	bx	lr
 800f34a:	4628      	mov	r0, r5
 800f34c:	e7f4      	b.n	800f338 <rcutils_set_default_allocator+0x24>
 800f34e:	bf00      	nop
 800f350:	20000090 	.word	0x20000090

0800f354 <rcutils_get_default_allocator>:
 800f354:	b470      	push	{r4, r5, r6}
 800f356:	4604      	mov	r4, r0
 800f358:	4606      	mov	r6, r0
 800f35a:	4d04      	ldr	r5, [pc, #16]	; (800f36c <rcutils_get_default_allocator+0x18>)
 800f35c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f35e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	4630      	mov	r0, r6
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	bc70      	pop	{r4, r5, r6}
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	20000090 	.word	0x20000090

0800f370 <rcutils_allocator_is_valid>:
 800f370:	b158      	cbz	r0, 800f38a <rcutils_allocator_is_valid+0x1a>
 800f372:	6803      	ldr	r3, [r0, #0]
 800f374:	b143      	cbz	r3, 800f388 <rcutils_allocator_is_valid+0x18>
 800f376:	6843      	ldr	r3, [r0, #4]
 800f378:	b133      	cbz	r3, 800f388 <rcutils_allocator_is_valid+0x18>
 800f37a:	68c3      	ldr	r3, [r0, #12]
 800f37c:	b123      	cbz	r3, 800f388 <rcutils_allocator_is_valid+0x18>
 800f37e:	6880      	ldr	r0, [r0, #8]
 800f380:	3800      	subs	r0, #0
 800f382:	bf18      	it	ne
 800f384:	2001      	movne	r0, #1
 800f386:	4770      	bx	lr
 800f388:	4618      	mov	r0, r3
 800f38a:	4770      	bx	lr

0800f38c <__rcutils_format_error_string>:
 800f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f390:	460f      	mov	r7, r1
 800f392:	4606      	mov	r6, r0
 800f394:	b087      	sub	sp, #28
 800f396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f39a:	4638      	mov	r0, r7
 800f39c:	f00a fd23 	bl	8019de6 <strnlen>
 800f3a0:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800f3a4:	4548      	cmp	r0, r9
 800f3a6:	bf28      	it	cs
 800f3a8:	4648      	movcs	r0, r9
 800f3aa:	4605      	mov	r5, r0
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f00a fb27 	bl	8019a08 <memmove>
 800f3ba:	2c05      	cmp	r4, #5
 800f3bc:	46a0      	mov	r8, r4
 800f3be:	bf28      	it	cs
 800f3c0:	f04f 0805 	movcs.w	r8, #5
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	4544      	cmp	r4, r8
 800f3c8:	bf98      	it	ls
 800f3ca:	eba9 0805 	subls.w	r8, r9, r5
 800f3ce:	5573      	strb	r3, [r6, r5]
 800f3d0:	442e      	add	r6, r5
 800f3d2:	2500      	movs	r5, #0
 800f3d4:	4642      	mov	r2, r8
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	4947      	ldr	r1, [pc, #284]	; (800f4f8 <__rcutils_format_error_string+0x16c>)
 800f3da:	eba4 0408 	sub.w	r4, r4, r8
 800f3de:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 800f3e2:	f00a fb03 	bl	80199ec <memcpy>
 800f3e6:	f806 5008 	strb.w	r5, [r6, r8]
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4650      	mov	r0, sl
 800f3ee:	f00a fcfa 	bl	8019de6 <strnlen>
 800f3f2:	4284      	cmp	r4, r0
 800f3f4:	4683      	mov	fp, r0
 800f3f6:	4446      	add	r6, r8
 800f3f8:	d96b      	bls.n	800f4d2 <__rcutils_format_error_string+0x146>
 800f3fa:	1a24      	subs	r4, r4, r0
 800f3fc:	2c01      	cmp	r4, #1
 800f3fe:	46a1      	mov	r9, r4
 800f400:	bf28      	it	cs
 800f402:	f04f 0901 	movcs.w	r9, #1
 800f406:	4602      	mov	r2, r0
 800f408:	4651      	mov	r1, sl
 800f40a:	4630      	mov	r0, r6
 800f40c:	f00a fafc 	bl	8019a08 <memmove>
 800f410:	454c      	cmp	r4, r9
 800f412:	eb06 030b 	add.w	r3, r6, fp
 800f416:	f806 500b 	strb.w	r5, [r6, fp]
 800f41a:	bf88      	it	hi
 800f41c:	eba4 0809 	subhi.w	r8, r4, r9
 800f420:	d960      	bls.n	800f4e4 <__rcutils_format_error_string+0x158>
 800f422:	464a      	mov	r2, r9
 800f424:	4618      	mov	r0, r3
 800f426:	4935      	ldr	r1, [pc, #212]	; (800f4fc <__rcutils_format_error_string+0x170>)
 800f428:	f00a fae0 	bl	80199ec <memcpy>
 800f42c:	2600      	movs	r6, #0
 800f42e:	f800 6009 	strb.w	r6, [r0, r9]
 800f432:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800f436:	ea54 0305 	orrs.w	r3, r4, r5
 800f43a:	4481      	add	r9, r0
 800f43c:	d057      	beq.n	800f4ee <__rcutils_format_error_string+0x162>
 800f43e:	466f      	mov	r7, sp
 800f440:	46ba      	mov	sl, r7
 800f442:	4620      	mov	r0, r4
 800f444:	4629      	mov	r1, r5
 800f446:	220a      	movs	r2, #10
 800f448:	2300      	movs	r3, #0
 800f44a:	f7f1 ff31 	bl	80012b0 <__aeabi_uldivmod>
 800f44e:	3230      	adds	r2, #48	; 0x30
 800f450:	2300      	movs	r3, #0
 800f452:	4620      	mov	r0, r4
 800f454:	4629      	mov	r1, r5
 800f456:	f80a 2b01 	strb.w	r2, [sl], #1
 800f45a:	220a      	movs	r2, #10
 800f45c:	f7f1 ff28 	bl	80012b0 <__aeabi_uldivmod>
 800f460:	462b      	mov	r3, r5
 800f462:	4622      	mov	r2, r4
 800f464:	2b00      	cmp	r3, #0
 800f466:	bf08      	it	eq
 800f468:	2a0a      	cmpeq	r2, #10
 800f46a:	4604      	mov	r4, r0
 800f46c:	460d      	mov	r5, r1
 800f46e:	f106 0601 	add.w	r6, r6, #1
 800f472:	d2e6      	bcs.n	800f442 <__rcutils_format_error_string+0xb6>
 800f474:	2300      	movs	r3, #0
 800f476:	aa06      	add	r2, sp, #24
 800f478:	4416      	add	r6, r2
 800f47a:	2115      	movs	r1, #21
 800f47c:	4638      	mov	r0, r7
 800f47e:	f806 3c18 	strb.w	r3, [r6, #-24]
 800f482:	f00a fcb0 	bl	8019de6 <strnlen>
 800f486:	2801      	cmp	r0, #1
 800f488:	d90f      	bls.n	800f4aa <__rcutils_format_error_string+0x11e>
 800f48a:	463a      	mov	r2, r7
 800f48c:	1e43      	subs	r3, r0, #1
 800f48e:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800f492:	443b      	add	r3, r7
 800f494:	4408      	add	r0, r1
 800f496:	7811      	ldrb	r1, [r2, #0]
 800f498:	781c      	ldrb	r4, [r3, #0]
 800f49a:	f802 4b01 	strb.w	r4, [r2], #1
 800f49e:	f803 1901 	strb.w	r1, [r3], #-1
 800f4a2:	1ac4      	subs	r4, r0, r3
 800f4a4:	1a81      	subs	r1, r0, r2
 800f4a6:	428c      	cmp	r4, r1
 800f4a8:	d3f5      	bcc.n	800f496 <__rcutils_format_error_string+0x10a>
 800f4aa:	4641      	mov	r1, r8
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	f00a fc9a 	bl	8019de6 <strnlen>
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	4540      	cmp	r0, r8
 800f4b6:	bf28      	it	cs
 800f4b8:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800f4bc:	4639      	mov	r1, r7
 800f4be:	4622      	mov	r2, r4
 800f4c0:	4648      	mov	r0, r9
 800f4c2:	f00a fa93 	bl	80199ec <memcpy>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f809 3004 	strb.w	r3, [r9, r4]
 800f4cc:	b007      	add	sp, #28
 800f4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d2:	3c01      	subs	r4, #1
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4651      	mov	r1, sl
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f00a fa95 	bl	8019a08 <memmove>
 800f4de:	1933      	adds	r3, r6, r4
 800f4e0:	5535      	strb	r5, [r6, r4]
 800f4e2:	2401      	movs	r4, #1
 800f4e4:	f04f 0801 	mov.w	r8, #1
 800f4e8:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800f4ec:	e799      	b.n	800f422 <__rcutils_format_error_string+0x96>
 800f4ee:	2330      	movs	r3, #48	; 0x30
 800f4f0:	466f      	mov	r7, sp
 800f4f2:	f8ad 3000 	strh.w	r3, [sp]
 800f4f6:	e7d8      	b.n	800f4aa <__rcutils_format_error_string+0x11e>
 800f4f8:	0801c474 	.word	0x0801c474
 800f4fc:	0801c47c 	.word	0x0801c47c

0800f500 <rcutils_get_error_string>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4b0e      	ldr	r3, [pc, #56]	; (800f53c <rcutils_get_error_string+0x3c>)
 800f504:	4604      	mov	r4, r0
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	b18b      	cbz	r3, 800f52e <rcutils_get_error_string+0x2e>
 800f50a:	4d0d      	ldr	r5, [pc, #52]	; (800f540 <rcutils_get_error_string+0x40>)
 800f50c:	782b      	ldrb	r3, [r5, #0]
 800f50e:	b13b      	cbz	r3, 800f520 <rcutils_get_error_string+0x20>
 800f510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f514:	4620      	mov	r0, r4
 800f516:	490b      	ldr	r1, [pc, #44]	; (800f544 <rcutils_get_error_string+0x44>)
 800f518:	f00a fa68 	bl	80199ec <memcpy>
 800f51c:	4620      	mov	r0, r4
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	4909      	ldr	r1, [pc, #36]	; (800f548 <rcutils_get_error_string+0x48>)
 800f522:	4808      	ldr	r0, [pc, #32]	; (800f544 <rcutils_get_error_string+0x44>)
 800f524:	f7ff ff32 	bl	800f38c <__rcutils_format_error_string>
 800f528:	2301      	movs	r3, #1
 800f52a:	702b      	strb	r3, [r5, #0]
 800f52c:	e7f0      	b.n	800f510 <rcutils_get_error_string+0x10>
 800f52e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f532:	4906      	ldr	r1, [pc, #24]	; (800f54c <rcutils_get_error_string+0x4c>)
 800f534:	f00a fa5a 	bl	80199ec <memcpy>
 800f538:	4620      	mov	r0, r4
 800f53a:	bd38      	pop	{r3, r4, r5, pc}
 800f53c:	20006810 	.word	0x20006810
 800f540:	20006811 	.word	0x20006811
 800f544:	20009330 	.word	0x20009330
 800f548:	20009730 	.word	0x20009730
 800f54c:	0801bcfc 	.word	0x0801bcfc

0800f550 <rcutils_reset_error>:
 800f550:	b510      	push	{r4, lr}
 800f552:	2400      	movs	r4, #0
 800f554:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800f558:	4621      	mov	r1, r4
 800f55a:	4807      	ldr	r0, [pc, #28]	; (800f578 <rcutils_reset_error+0x28>)
 800f55c:	f00a fa6e 	bl	8019a3c <memset>
 800f560:	4b06      	ldr	r3, [pc, #24]	; (800f57c <rcutils_reset_error+0x2c>)
 800f562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f566:	4906      	ldr	r1, [pc, #24]	; (800f580 <rcutils_reset_error+0x30>)
 800f568:	4806      	ldr	r0, [pc, #24]	; (800f584 <rcutils_reset_error+0x34>)
 800f56a:	701c      	strb	r4, [r3, #0]
 800f56c:	f00a fa3e 	bl	80199ec <memcpy>
 800f570:	4b05      	ldr	r3, [pc, #20]	; (800f588 <rcutils_reset_error+0x38>)
 800f572:	701c      	strb	r4, [r3, #0]
 800f574:	bd10      	pop	{r4, pc}
 800f576:	bf00      	nop
 800f578:	20009730 	.word	0x20009730
 800f57c:	20006811 	.word	0x20006811
 800f580:	0801b4fc 	.word	0x0801b4fc
 800f584:	20009330 	.word	0x20009330
 800f588:	20006810 	.word	0x20006810

0800f58c <rcutils_get_zero_initialized_string_map>:
 800f58c:	2000      	movs	r0, #0
 800f58e:	4b01      	ldr	r3, [pc, #4]	; (800f594 <rcutils_get_zero_initialized_string_map+0x8>)
 800f590:	6018      	str	r0, [r3, #0]
 800f592:	4770      	bx	lr
 800f594:	20006814 	.word	0x20006814

0800f598 <rcutils_string_map_reserve>:
 800f598:	2800      	cmp	r0, #0
 800f59a:	d05d      	beq.n	800f658 <rcutils_string_map_reserve+0xc0>
 800f59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a0:	6805      	ldr	r5, [r0, #0]
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	b12d      	cbz	r5, 800f5b4 <rcutils_string_map_reserve+0x1c>
 800f5a8:	68eb      	ldr	r3, [r5, #12]
 800f5aa:	42a3      	cmp	r3, r4
 800f5ac:	d905      	bls.n	800f5ba <rcutils_string_map_reserve+0x22>
 800f5ae:	461c      	mov	r4, r3
 800f5b0:	2d00      	cmp	r5, #0
 800f5b2:	d1f9      	bne.n	800f5a8 <rcutils_string_map_reserve+0x10>
 800f5b4:	201f      	movs	r0, #31
 800f5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ba:	68ab      	ldr	r3, [r5, #8]
 800f5bc:	42a3      	cmp	r3, r4
 800f5be:	d047      	beq.n	800f650 <rcutils_string_map_reserve+0xb8>
 800f5c0:	6a2f      	ldr	r7, [r5, #32]
 800f5c2:	2c00      	cmp	r4, #0
 800f5c4:	d034      	beq.n	800f630 <rcutils_string_map_reserve+0x98>
 800f5c6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f5ca:	d243      	bcs.n	800f654 <rcutils_string_map_reserve+0xbc>
 800f5cc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f5d0:	4641      	mov	r1, r8
 800f5d2:	463a      	mov	r2, r7
 800f5d4:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f5d8:	6828      	ldr	r0, [r5, #0]
 800f5da:	47c8      	blx	r9
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d039      	beq.n	800f654 <rcutils_string_map_reserve+0xbc>
 800f5e0:	6833      	ldr	r3, [r6, #0]
 800f5e2:	463a      	mov	r2, r7
 800f5e4:	6018      	str	r0, [r3, #0]
 800f5e6:	4641      	mov	r1, r8
 800f5e8:	6858      	ldr	r0, [r3, #4]
 800f5ea:	47c8      	blx	r9
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	b388      	cbz	r0, 800f654 <rcutils_string_map_reserve+0xbc>
 800f5f0:	6835      	ldr	r5, [r6, #0]
 800f5f2:	68aa      	ldr	r2, [r5, #8]
 800f5f4:	6068      	str	r0, [r5, #4]
 800f5f6:	42a2      	cmp	r2, r4
 800f5f8:	d226      	bcs.n	800f648 <rcutils_string_map_reserve+0xb0>
 800f5fa:	682e      	ldr	r6, [r5, #0]
 800f5fc:	eb00 0c08 	add.w	ip, r0, r8
 800f600:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800f604:	4560      	cmp	r0, ip
 800f606:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800f60a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800f60e:	d203      	bcs.n	800f618 <rcutils_string_map_reserve+0x80>
 800f610:	eb06 0c08 	add.w	ip, r6, r8
 800f614:	4567      	cmp	r7, ip
 800f616:	d321      	bcc.n	800f65c <rcutils_string_map_reserve+0xc4>
 800f618:	1aa2      	subs	r2, r4, r2
 800f61a:	0096      	lsls	r6, r2, #2
 800f61c:	4632      	mov	r2, r6
 800f61e:	2100      	movs	r1, #0
 800f620:	f00a fa0c 	bl	8019a3c <memset>
 800f624:	4632      	mov	r2, r6
 800f626:	4638      	mov	r0, r7
 800f628:	2100      	movs	r1, #0
 800f62a:	f00a fa07 	bl	8019a3c <memset>
 800f62e:	e00b      	b.n	800f648 <rcutils_string_map_reserve+0xb0>
 800f630:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f634:	6828      	ldr	r0, [r5, #0]
 800f636:	4639      	mov	r1, r7
 800f638:	47c0      	blx	r8
 800f63a:	6833      	ldr	r3, [r6, #0]
 800f63c:	4639      	mov	r1, r7
 800f63e:	6858      	ldr	r0, [r3, #4]
 800f640:	601c      	str	r4, [r3, #0]
 800f642:	47c0      	blx	r8
 800f644:	6835      	ldr	r5, [r6, #0]
 800f646:	606c      	str	r4, [r5, #4]
 800f648:	2000      	movs	r0, #0
 800f64a:	60ac      	str	r4, [r5, #8]
 800f64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f650:	2000      	movs	r0, #0
 800f652:	e7b0      	b.n	800f5b6 <rcutils_string_map_reserve+0x1e>
 800f654:	200a      	movs	r0, #10
 800f656:	e7ae      	b.n	800f5b6 <rcutils_string_map_reserve+0x1e>
 800f658:	200b      	movs	r0, #11
 800f65a:	4770      	bx	lr
 800f65c:	2000      	movs	r0, #0
 800f65e:	3904      	subs	r1, #4
 800f660:	1f32      	subs	r2, r6, #4
 800f662:	440b      	add	r3, r1
 800f664:	4490      	add	r8, r2
 800f666:	4431      	add	r1, r6
 800f668:	f841 0f04 	str.w	r0, [r1, #4]!
 800f66c:	4541      	cmp	r1, r8
 800f66e:	f843 0f04 	str.w	r0, [r3, #4]!
 800f672:	d1f9      	bne.n	800f668 <rcutils_string_map_reserve+0xd0>
 800f674:	e7e8      	b.n	800f648 <rcutils_string_map_reserve+0xb0>
 800f676:	bf00      	nop

0800f678 <rcutils_string_map_init>:
 800f678:	b082      	sub	sp, #8
 800f67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f67c:	ac06      	add	r4, sp, #24
 800f67e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f682:	b370      	cbz	r0, 800f6e2 <rcutils_string_map_init+0x6a>
 800f684:	6806      	ldr	r6, [r0, #0]
 800f686:	4604      	mov	r4, r0
 800f688:	b12e      	cbz	r6, 800f696 <rcutils_string_map_init+0x1e>
 800f68a:	251e      	movs	r5, #30
 800f68c:	4628      	mov	r0, r5
 800f68e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f692:	b002      	add	sp, #8
 800f694:	4770      	bx	lr
 800f696:	a806      	add	r0, sp, #24
 800f698:	460d      	mov	r5, r1
 800f69a:	f7ff fe69 	bl	800f370 <rcutils_allocator_is_valid>
 800f69e:	b300      	cbz	r0, 800f6e2 <rcutils_string_map_init+0x6a>
 800f6a0:	2024      	movs	r0, #36	; 0x24
 800f6a2:	9b06      	ldr	r3, [sp, #24]
 800f6a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f6a6:	4798      	blx	r3
 800f6a8:	6020      	str	r0, [r4, #0]
 800f6aa:	b300      	cbz	r0, 800f6ee <rcutils_string_map_init+0x76>
 800f6ac:	f100 0710 	add.w	r7, r0, #16
 800f6b0:	f10d 0c18 	add.w	ip, sp, #24
 800f6b4:	e9c0 6600 	strd	r6, r6, [r0]
 800f6b8:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800f6bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f6c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	603b      	str	r3, [r7, #0]
 800f6cc:	f7ff ff64 	bl	800f598 <rcutils_string_map_reserve>
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d0da      	beq.n	800f68c <rcutils_string_map_init+0x14>
 800f6d6:	9b07      	ldr	r3, [sp, #28]
 800f6d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f6da:	6820      	ldr	r0, [r4, #0]
 800f6dc:	4798      	blx	r3
 800f6de:	6026      	str	r6, [r4, #0]
 800f6e0:	e7d4      	b.n	800f68c <rcutils_string_map_init+0x14>
 800f6e2:	250b      	movs	r5, #11
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f6ea:	b002      	add	sp, #8
 800f6ec:	4770      	bx	lr
 800f6ee:	250a      	movs	r5, #10
 800f6f0:	e7cc      	b.n	800f68c <rcutils_string_map_init+0x14>
 800f6f2:	bf00      	nop

0800f6f4 <rcutils_string_map_fini>:
 800f6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d036      	beq.n	800f76a <rcutils_string_map_fini+0x76>
 800f6fc:	6804      	ldr	r4, [r0, #0]
 800f6fe:	4606      	mov	r6, r0
 800f700:	2c00      	cmp	r4, #0
 800f702:	d02f      	beq.n	800f764 <rcutils_string_map_fini+0x70>
 800f704:	68a3      	ldr	r3, [r4, #8]
 800f706:	b313      	cbz	r3, 800f74e <rcutils_string_map_fini+0x5a>
 800f708:	2500      	movs	r5, #0
 800f70a:	46a8      	mov	r8, r5
 800f70c:	e017      	b.n	800f73e <rcutils_string_map_fini+0x4a>
 800f70e:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800f712:	6967      	ldr	r7, [r4, #20]
 800f714:	4649      	mov	r1, r9
 800f716:	47b8      	blx	r7
 800f718:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f71c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f720:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f724:	4649      	mov	r1, r9
 800f726:	47b8      	blx	r7
 800f728:	68e3      	ldr	r3, [r4, #12]
 800f72a:	6862      	ldr	r2, [r4, #4]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f732:	60e3      	str	r3, [r4, #12]
 800f734:	6834      	ldr	r4, [r6, #0]
 800f736:	3501      	adds	r5, #1
 800f738:	68a3      	ldr	r3, [r4, #8]
 800f73a:	429d      	cmp	r5, r3
 800f73c:	d207      	bcs.n	800f74e <rcutils_string_map_fini+0x5a>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f744:	2800      	cmp	r0, #0
 800f746:	d1e2      	bne.n	800f70e <rcutils_string_map_fini+0x1a>
 800f748:	3501      	adds	r5, #1
 800f74a:	429d      	cmp	r5, r3
 800f74c:	d3f8      	bcc.n	800f740 <rcutils_string_map_fini+0x4c>
 800f74e:	2100      	movs	r1, #0
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff ff21 	bl	800f598 <rcutils_string_map_reserve>
 800f756:	4604      	mov	r4, r0
 800f758:	b920      	cbnz	r0, 800f764 <rcutils_string_map_fini+0x70>
 800f75a:	6830      	ldr	r0, [r6, #0]
 800f75c:	6943      	ldr	r3, [r0, #20]
 800f75e:	6a01      	ldr	r1, [r0, #32]
 800f760:	4798      	blx	r3
 800f762:	6034      	str	r4, [r6, #0]
 800f764:	4620      	mov	r0, r4
 800f766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f76a:	240b      	movs	r4, #11
 800f76c:	4620      	mov	r0, r4
 800f76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f772:	bf00      	nop

0800f774 <rcutils_string_map_getn>:
 800f774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	b310      	cbz	r0, 800f7c0 <rcutils_string_map_getn+0x4c>
 800f77a:	6804      	ldr	r4, [r0, #0]
 800f77c:	b30c      	cbz	r4, 800f7c2 <rcutils_string_map_getn+0x4e>
 800f77e:	460d      	mov	r5, r1
 800f780:	b1f1      	cbz	r1, 800f7c0 <rcutils_string_map_getn+0x4c>
 800f782:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800f786:	6827      	ldr	r7, [r4, #0]
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	d018      	beq.n	800f7c0 <rcutils_string_map_getn+0x4c>
 800f78e:	4690      	mov	r8, r2
 800f790:	2600      	movs	r6, #0
 800f792:	3f04      	subs	r7, #4
 800f794:	f857 9f04 	ldr.w	r9, [r7, #4]!
 800f798:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800f79c:	3601      	adds	r6, #1
 800f79e:	f1b9 0f00 	cmp.w	r9, #0
 800f7a2:	d00b      	beq.n	800f7bc <rcutils_string_map_getn+0x48>
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	f7f0 fd4d 	bl	8000244 <strlen>
 800f7aa:	4540      	cmp	r0, r8
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	bf38      	it	cc
 800f7b2:	4642      	movcc	r2, r8
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f00a fb04 	bl	8019dc2 <strncmp>
 800f7ba:	b128      	cbz	r0, 800f7c8 <rcutils_string_map_getn+0x54>
 800f7bc:	45b2      	cmp	sl, r6
 800f7be:	d1e9      	bne.n	800f794 <rcutils_string_map_getn+0x20>
 800f7c0:	2400      	movs	r4, #0
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c8:	6863      	ldr	r3, [r4, #4]
 800f7ca:	f853 400b 	ldr.w	r4, [r3, fp]
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7d4 <rcutils_system_time_now>:
 800f7d4:	b310      	cbz	r0, 800f81c <rcutils_system_time_now+0x48>
 800f7d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d8:	b085      	sub	sp, #20
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4669      	mov	r1, sp
 800f7de:	2001      	movs	r0, #1
 800f7e0:	f7f4 f842 	bl	8003868 <clock_gettime>
 800f7e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f7e8:	2e00      	cmp	r6, #0
 800f7ea:	f177 0300 	sbcs.w	r3, r7, #0
 800f7ee:	db12      	blt.n	800f816 <rcutils_system_time_now+0x42>
 800f7f0:	9902      	ldr	r1, [sp, #8]
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	db0c      	blt.n	800f810 <rcutils_system_time_now+0x3c>
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	4d09      	ldr	r5, [pc, #36]	; (800f820 <rcutils_system_time_now+0x4c>)
 800f7fa:	fba6 2305 	umull	r2, r3, r6, r5
 800f7fe:	fb05 3307 	mla	r3, r5, r7, r3
 800f802:	1852      	adds	r2, r2, r1
 800f804:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800f808:	e9c4 2300 	strd	r2, r3, [r4]
 800f80c:	b005      	add	sp, #20
 800f80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f810:	ea56 0307 	orrs.w	r3, r6, r7
 800f814:	d1ef      	bne.n	800f7f6 <rcutils_system_time_now+0x22>
 800f816:	2002      	movs	r0, #2
 800f818:	b005      	add	sp, #20
 800f81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f81c:	200b      	movs	r0, #11
 800f81e:	4770      	bx	lr
 800f820:	3b9aca00 	.word	0x3b9aca00

0800f824 <rcutils_steady_time_now>:
 800f824:	b310      	cbz	r0, 800f86c <rcutils_steady_time_now+0x48>
 800f826:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f828:	b085      	sub	sp, #20
 800f82a:	4604      	mov	r4, r0
 800f82c:	4669      	mov	r1, sp
 800f82e:	2000      	movs	r0, #0
 800f830:	f7f4 f81a 	bl	8003868 <clock_gettime>
 800f834:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f838:	2e00      	cmp	r6, #0
 800f83a:	f177 0300 	sbcs.w	r3, r7, #0
 800f83e:	db12      	blt.n	800f866 <rcutils_steady_time_now+0x42>
 800f840:	9902      	ldr	r1, [sp, #8]
 800f842:	2900      	cmp	r1, #0
 800f844:	db0c      	blt.n	800f860 <rcutils_steady_time_now+0x3c>
 800f846:	2000      	movs	r0, #0
 800f848:	4d09      	ldr	r5, [pc, #36]	; (800f870 <rcutils_steady_time_now+0x4c>)
 800f84a:	fba6 2305 	umull	r2, r3, r6, r5
 800f84e:	fb05 3307 	mla	r3, r5, r7, r3
 800f852:	1852      	adds	r2, r2, r1
 800f854:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800f858:	e9c4 2300 	strd	r2, r3, [r4]
 800f85c:	b005      	add	sp, #20
 800f85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f860:	ea56 0307 	orrs.w	r3, r6, r7
 800f864:	d1ef      	bne.n	800f846 <rcutils_steady_time_now+0x22>
 800f866:	2002      	movs	r0, #2
 800f868:	b005      	add	sp, #20
 800f86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86c:	200b      	movs	r0, #11
 800f86e:	4770      	bx	lr
 800f870:	3b9aca00 	.word	0x3b9aca00

0800f874 <rmw_get_zero_initialized_init_options>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4604      	mov	r4, r0
 800f878:	2238      	movs	r2, #56	; 0x38
 800f87a:	2100      	movs	r1, #0
 800f87c:	f00a f8de 	bl	8019a3c <memset>
 800f880:	f104 0010 	add.w	r0, r4, #16
 800f884:	f000 f808 	bl	800f898 <rmw_get_default_security_options>
 800f888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f88c:	4620      	mov	r0, r4
 800f88e:	60e3      	str	r3, [r4, #12]
 800f890:	bd10      	pop	{r4, pc}
 800f892:	bf00      	nop

0800f894 <rmw_get_default_publisher_options>:
 800f894:	2000      	movs	r0, #0
 800f896:	4770      	bx	lr

0800f898 <rmw_get_default_security_options>:
 800f898:	2200      	movs	r2, #0
 800f89a:	7002      	strb	r2, [r0, #0]
 800f89c:	6042      	str	r2, [r0, #4]
 800f89e:	4770      	bx	lr

0800f8a0 <rmw_get_default_subscription_options>:
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	6002      	str	r2, [r0, #0]
 800f8a4:	7102      	strb	r2, [r0, #4]
 800f8a6:	4770      	bx	lr

0800f8a8 <rmw_get_zero_initialized_message_info>:
 800f8a8:	b470      	push	{r4, r5, r6}
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	4d06      	ldr	r5, [pc, #24]	; (800f8c8 <rmw_get_zero_initialized_message_info+0x20>)
 800f8b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f8bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	bc70      	pop	{r4, r5, r6}
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	0801c100 	.word	0x0801c100

0800f8cc <rmw_validate_full_topic_name>:
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d062      	beq.n	800f996 <rmw_validate_full_topic_name+0xca>
 800f8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8d4:	460d      	mov	r5, r1
 800f8d6:	2900      	cmp	r1, #0
 800f8d8:	d05f      	beq.n	800f99a <rmw_validate_full_topic_name+0xce>
 800f8da:	4616      	mov	r6, r2
 800f8dc:	4604      	mov	r4, r0
 800f8de:	f7f0 fcb1 	bl	8000244 <strlen>
 800f8e2:	b148      	cbz	r0, 800f8f8 <rmw_validate_full_topic_name+0x2c>
 800f8e4:	7823      	ldrb	r3, [r4, #0]
 800f8e6:	2b2f      	cmp	r3, #47	; 0x2f
 800f8e8:	d00d      	beq.n	800f906 <rmw_validate_full_topic_name+0x3a>
 800f8ea:	2302      	movs	r3, #2
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	b13e      	cbz	r6, 800f900 <rmw_validate_full_topic_name+0x34>
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	6030      	str	r0, [r6, #0]
 800f8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	602b      	str	r3, [r5, #0]
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	d1f7      	bne.n	800f8f0 <rmw_validate_full_topic_name+0x24>
 800f900:	2000      	movs	r0, #0
 800f902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f906:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800f90a:	f814 300c 	ldrb.w	r3, [r4, ip]
 800f90e:	2b2f      	cmp	r3, #47	; 0x2f
 800f910:	d045      	beq.n	800f99e <rmw_validate_full_topic_name+0xd2>
 800f912:	4627      	mov	r7, r4
 800f914:	1e63      	subs	r3, r4, #1
 800f916:	eb03 0900 	add.w	r9, r3, r0
 800f91a:	f1c4 0e01 	rsb	lr, r4, #1
 800f91e:	eb0e 0803 	add.w	r8, lr, r3
 800f922:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f926:	f021 0220 	bic.w	r2, r1, #32
 800f92a:	3a41      	subs	r2, #65	; 0x41
 800f92c:	2a19      	cmp	r2, #25
 800f92e:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 800f932:	d90b      	bls.n	800f94c <rmw_validate_full_topic_name+0x80>
 800f934:	295f      	cmp	r1, #95	; 0x5f
 800f936:	d009      	beq.n	800f94c <rmw_validate_full_topic_name+0x80>
 800f938:	2c0a      	cmp	r4, #10
 800f93a:	d907      	bls.n	800f94c <rmw_validate_full_topic_name+0x80>
 800f93c:	2304      	movs	r3, #4
 800f93e:	602b      	str	r3, [r5, #0]
 800f940:	2e00      	cmp	r6, #0
 800f942:	d0dd      	beq.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f944:	2000      	movs	r0, #0
 800f946:	f8c6 8000 	str.w	r8, [r6]
 800f94a:	e7d3      	b.n	800f8f4 <rmw_validate_full_topic_name+0x28>
 800f94c:	454b      	cmp	r3, r9
 800f94e:	d1e6      	bne.n	800f91e <rmw_validate_full_topic_name+0x52>
 800f950:	2300      	movs	r3, #0
 800f952:	f8df e084 	ldr.w	lr, [pc, #132]	; 800f9d8 <rmw_validate_full_topic_name+0x10c>
 800f956:	f10c 0801 	add.w	r8, ip, #1
 800f95a:	e005      	b.n	800f968 <rmw_validate_full_topic_name+0x9c>
 800f95c:	4611      	mov	r1, r2
 800f95e:	4288      	cmp	r0, r1
 800f960:	4613      	mov	r3, r2
 800f962:	f107 0701 	add.w	r7, r7, #1
 800f966:	d925      	bls.n	800f9b4 <rmw_validate_full_topic_name+0xe8>
 800f968:	459c      	cmp	ip, r3
 800f96a:	f103 0201 	add.w	r2, r3, #1
 800f96e:	d01d      	beq.n	800f9ac <rmw_validate_full_topic_name+0xe0>
 800f970:	7839      	ldrb	r1, [r7, #0]
 800f972:	292f      	cmp	r1, #47	; 0x2f
 800f974:	d1f2      	bne.n	800f95c <rmw_validate_full_topic_name+0x90>
 800f976:	787c      	ldrb	r4, [r7, #1]
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	2c2f      	cmp	r4, #47	; 0x2f
 800f97c:	4611      	mov	r1, r2
 800f97e:	d026      	beq.n	800f9ce <rmw_validate_full_topic_name+0x102>
 800f980:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f984:	075b      	lsls	r3, r3, #29
 800f986:	d5ea      	bpl.n	800f95e <rmw_validate_full_topic_name+0x92>
 800f988:	2306      	movs	r3, #6
 800f98a:	602b      	str	r3, [r5, #0]
 800f98c:	2e00      	cmp	r6, #0
 800f98e:	d0b7      	beq.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f990:	2000      	movs	r0, #0
 800f992:	6032      	str	r2, [r6, #0]
 800f994:	e7ae      	b.n	800f8f4 <rmw_validate_full_topic_name+0x28>
 800f996:	200b      	movs	r0, #11
 800f998:	4770      	bx	lr
 800f99a:	200b      	movs	r0, #11
 800f99c:	e7aa      	b.n	800f8f4 <rmw_validate_full_topic_name+0x28>
 800f99e:	2303      	movs	r3, #3
 800f9a0:	602b      	str	r3, [r5, #0]
 800f9a2:	2e00      	cmp	r6, #0
 800f9a4:	d0ac      	beq.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f9a6:	f8c6 c000 	str.w	ip, [r6]
 800f9aa:	e7a9      	b.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f9ac:	4641      	mov	r1, r8
 800f9ae:	f10c 0201 	add.w	r2, ip, #1
 800f9b2:	e7d4      	b.n	800f95e <rmw_validate_full_topic_name+0x92>
 800f9b4:	28f7      	cmp	r0, #247	; 0xf7
 800f9b6:	d802      	bhi.n	800f9be <rmw_validate_full_topic_name+0xf2>
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	6028      	str	r0, [r5, #0]
 800f9bc:	e79a      	b.n	800f8f4 <rmw_validate_full_topic_name+0x28>
 800f9be:	2307      	movs	r3, #7
 800f9c0:	602b      	str	r3, [r5, #0]
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	d09c      	beq.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f9c6:	23f6      	movs	r3, #246	; 0xf6
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	6033      	str	r3, [r6, #0]
 800f9cc:	e792      	b.n	800f8f4 <rmw_validate_full_topic_name+0x28>
 800f9ce:	2305      	movs	r3, #5
 800f9d0:	602b      	str	r3, [r5, #0]
 800f9d2:	2e00      	cmp	r6, #0
 800f9d4:	d1dc      	bne.n	800f990 <rmw_validate_full_topic_name+0xc4>
 800f9d6:	e793      	b.n	800f900 <rmw_validate_full_topic_name+0x34>
 800f9d8:	0801cc9b 	.word	0x0801cc9b

0800f9dc <rmw_uros_set_custom_transport>:
 800f9dc:	b4f0      	push	{r4, r5, r6, r7}
 800f9de:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800f9e2:	b16a      	cbz	r2, 800fa00 <rmw_uros_set_custom_transport+0x24>
 800f9e4:	b163      	cbz	r3, 800fa00 <rmw_uros_set_custom_transport+0x24>
 800f9e6:	b15e      	cbz	r6, 800fa00 <rmw_uros_set_custom_transport+0x24>
 800f9e8:	b157      	cbz	r7, 800fa00 <rmw_uros_set_custom_transport+0x24>
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	4c06      	ldr	r4, [pc, #24]	; (800fa08 <rmw_uros_set_custom_transport+0x2c>)
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f9f4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f9f8:	7025      	strb	r5, [r4, #0]
 800f9fa:	6167      	str	r7, [r4, #20]
 800f9fc:	bcf0      	pop	{r4, r5, r6, r7}
 800f9fe:	4770      	bx	lr
 800fa00:	200b      	movs	r0, #11
 800fa02:	bcf0      	pop	{r4, r5, r6, r7}
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	20009b20 	.word	0x20009b20

0800fa0c <rmw_init_options_init>:
 800fa0c:	b084      	sub	sp, #16
 800fa0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa12:	ad09      	add	r5, sp, #36	; 0x24
 800fa14:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800fa18:	b130      	cbz	r0, 800fa28 <rmw_init_options_init+0x1c>
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	f7ff fca7 	bl	800f370 <rcutils_allocator_is_valid>
 800fa22:	b108      	cbz	r0, 800fa28 <rmw_init_options_init+0x1c>
 800fa24:	68a3      	ldr	r3, [r4, #8]
 800fa26:	b123      	cbz	r3, 800fa32 <rmw_init_options_init+0x26>
 800fa28:	200b      	movs	r0, #11
 800fa2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa2e:	b004      	add	sp, #16
 800fa30:	4770      	bx	lr
 800fa32:	f04f 0800 	mov.w	r8, #0
 800fa36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa38:	f04f 0900 	mov.w	r9, #0
 800fa3c:	4e1a      	ldr	r6, [pc, #104]	; (800faa8 <rmw_init_options_init+0x9c>)
 800fa3e:	e9c4 8900 	strd	r8, r9, [r4]
 800fa42:	6837      	ldr	r7, [r6, #0]
 800fa44:	f104 0620 	add.w	r6, r4, #32
 800fa48:	60a7      	str	r7, [r4, #8]
 800fa4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fa4c:	682a      	ldr	r2, [r5, #0]
 800fa4e:	4b17      	ldr	r3, [pc, #92]	; (800faac <rmw_init_options_init+0xa0>)
 800fa50:	6032      	str	r2, [r6, #0]
 800fa52:	4817      	ldr	r0, [pc, #92]	; (800fab0 <rmw_init_options_init+0xa4>)
 800fa54:	2203      	movs	r2, #3
 800fa56:	4917      	ldr	r1, [pc, #92]	; (800fab4 <rmw_init_options_init+0xa8>)
 800fa58:	61e3      	str	r3, [r4, #28]
 800fa5a:	f000 ff9d 	bl	8010998 <rmw_uxrce_init_init_options_impl_memory>
 800fa5e:	4814      	ldr	r0, [pc, #80]	; (800fab0 <rmw_init_options_init+0xa4>)
 800fa60:	f008 fb56 	bl	8018110 <get_memory>
 800fa64:	b1e8      	cbz	r0, 800faa2 <rmw_init_options_init+0x96>
 800fa66:	4a14      	ldr	r2, [pc, #80]	; (800fab8 <rmw_init_options_init+0xac>)
 800fa68:	68c3      	ldr	r3, [r0, #12]
 800fa6a:	6851      	ldr	r1, [r2, #4]
 800fa6c:	7810      	ldrb	r0, [r2, #0]
 800fa6e:	6363      	str	r3, [r4, #52]	; 0x34
 800fa70:	7418      	strb	r0, [r3, #16]
 800fa72:	6159      	str	r1, [r3, #20]
 800fa74:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800fa78:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800fa7c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800fa80:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800fa84:	f004 fd32 	bl	80144ec <uxr_nanos>
 800fa88:	f00a f8ac 	bl	8019be4 <srand>
 800fa8c:	f00a f8d8 	bl	8019c40 <rand>
 800fa90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa92:	6298      	str	r0, [r3, #40]	; 0x28
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d0f9      	beq.n	800fa8c <rmw_init_options_init+0x80>
 800fa98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	b004      	add	sp, #16
 800faa0:	4770      	bx	lr
 800faa2:	2001      	movs	r0, #1
 800faa4:	e7c1      	b.n	800fa2a <rmw_init_options_init+0x1e>
 800faa6:	bf00      	nop
 800faa8:	0801cc5c 	.word	0x0801cc5c
 800faac:	0801c480 	.word	0x0801c480
 800fab0:	2000ce3c 	.word	0x2000ce3c
 800fab4:	2000ca90 	.word	0x2000ca90
 800fab8:	20009b20 	.word	0x20009b20

0800fabc <rmw_init_options_copy>:
 800fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fabe:	b158      	cbz	r0, 800fad8 <rmw_init_options_copy+0x1c>
 800fac0:	460d      	mov	r5, r1
 800fac2:	b149      	cbz	r1, 800fad8 <rmw_init_options_copy+0x1c>
 800fac4:	4604      	mov	r4, r0
 800fac6:	6880      	ldr	r0, [r0, #8]
 800fac8:	b120      	cbz	r0, 800fad4 <rmw_init_options_copy+0x18>
 800faca:	4b1b      	ldr	r3, [pc, #108]	; (800fb38 <rmw_init_options_copy+0x7c>)
 800facc:	6819      	ldr	r1, [r3, #0]
 800face:	f7f0 fbaf 	bl	8000230 <strcmp>
 800fad2:	bb60      	cbnz	r0, 800fb2e <rmw_init_options_copy+0x72>
 800fad4:	68ab      	ldr	r3, [r5, #8]
 800fad6:	b113      	cbz	r3, 800fade <rmw_init_options_copy+0x22>
 800fad8:	260b      	movs	r6, #11
 800fada:	4630      	mov	r0, r6
 800fadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fade:	4623      	mov	r3, r4
 800fae0:	462a      	mov	r2, r5
 800fae2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800fae6:	681f      	ldr	r7, [r3, #0]
 800fae8:	685e      	ldr	r6, [r3, #4]
 800faea:	6898      	ldr	r0, [r3, #8]
 800faec:	68d9      	ldr	r1, [r3, #12]
 800faee:	3310      	adds	r3, #16
 800faf0:	4563      	cmp	r3, ip
 800faf2:	6017      	str	r7, [r2, #0]
 800faf4:	6056      	str	r6, [r2, #4]
 800faf6:	6090      	str	r0, [r2, #8]
 800faf8:	60d1      	str	r1, [r2, #12]
 800fafa:	f102 0210 	add.w	r2, r2, #16
 800fafe:	d1f2      	bne.n	800fae6 <rmw_init_options_copy+0x2a>
 800fb00:	6819      	ldr	r1, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	480d      	ldr	r0, [pc, #52]	; (800fb3c <rmw_init_options_copy+0x80>)
 800fb06:	6011      	str	r1, [r2, #0]
 800fb08:	6053      	str	r3, [r2, #4]
 800fb0a:	f008 fb01 	bl	8018110 <get_memory>
 800fb0e:	b188      	cbz	r0, 800fb34 <rmw_init_options_copy+0x78>
 800fb10:	2600      	movs	r6, #0
 800fb12:	68c3      	ldr	r3, [r0, #12]
 800fb14:	636b      	str	r3, [r5, #52]	; 0x34
 800fb16:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800fb18:	f103 0410 	add.w	r4, r3, #16
 800fb1c:	3510      	adds	r5, #16
 800fb1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb2e:	260c      	movs	r6, #12
 800fb30:	4630      	mov	r0, r6
 800fb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb34:	2601      	movs	r6, #1
 800fb36:	e7d0      	b.n	800fada <rmw_init_options_copy+0x1e>
 800fb38:	0801cc5c 	.word	0x0801cc5c
 800fb3c:	2000ce3c 	.word	0x2000ce3c

0800fb40 <rmw_init_options_fini>:
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d036      	beq.n	800fbb2 <rmw_init_options_fini+0x72>
 800fb44:	b530      	push	{r4, r5, lr}
 800fb46:	4604      	mov	r4, r0
 800fb48:	b08f      	sub	sp, #60	; 0x3c
 800fb4a:	3020      	adds	r0, #32
 800fb4c:	f7ff fc10 	bl	800f370 <rcutils_allocator_is_valid>
 800fb50:	b328      	cbz	r0, 800fb9e <rmw_init_options_fini+0x5e>
 800fb52:	68a0      	ldr	r0, [r4, #8]
 800fb54:	b120      	cbz	r0, 800fb60 <rmw_init_options_fini+0x20>
 800fb56:	4b18      	ldr	r3, [pc, #96]	; (800fbb8 <rmw_init_options_fini+0x78>)
 800fb58:	6819      	ldr	r1, [r3, #0]
 800fb5a:	f7f0 fb69 	bl	8000230 <strcmp>
 800fb5e:	bb30      	cbnz	r0, 800fbae <rmw_init_options_fini+0x6e>
 800fb60:	4b16      	ldr	r3, [pc, #88]	; (800fbbc <rmw_init_options_fini+0x7c>)
 800fb62:	6819      	ldr	r1, [r3, #0]
 800fb64:	b1f9      	cbz	r1, 800fba6 <rmw_init_options_fini+0x66>
 800fb66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fb68:	e001      	b.n	800fb6e <rmw_init_options_fini+0x2e>
 800fb6a:	6889      	ldr	r1, [r1, #8]
 800fb6c:	b1d9      	cbz	r1, 800fba6 <rmw_init_options_fini+0x66>
 800fb6e:	68cb      	ldr	r3, [r1, #12]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d1fa      	bne.n	800fb6a <rmw_init_options_fini+0x2a>
 800fb74:	466d      	mov	r5, sp
 800fb76:	4811      	ldr	r0, [pc, #68]	; (800fbbc <rmw_init_options_fini+0x7c>)
 800fb78:	f008 fada 	bl	8018130 <put_memory>
 800fb7c:	4668      	mov	r0, sp
 800fb7e:	f7ff fe79 	bl	800f874 <rmw_get_zero_initialized_init_options>
 800fb82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb94:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	b00f      	add	sp, #60	; 0x3c
 800fb9c:	bd30      	pop	{r4, r5, pc}
 800fb9e:	230b      	movs	r3, #11
 800fba0:	4618      	mov	r0, r3
 800fba2:	b00f      	add	sp, #60	; 0x3c
 800fba4:	bd30      	pop	{r4, r5, pc}
 800fba6:	2301      	movs	r3, #1
 800fba8:	4618      	mov	r0, r3
 800fbaa:	b00f      	add	sp, #60	; 0x3c
 800fbac:	bd30      	pop	{r4, r5, pc}
 800fbae:	230c      	movs	r3, #12
 800fbb0:	e7f2      	b.n	800fb98 <rmw_init_options_fini+0x58>
 800fbb2:	230b      	movs	r3, #11
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	4770      	bx	lr
 800fbb8:	0801cc5c 	.word	0x0801cc5c
 800fbbc:	2000ce3c 	.word	0x2000ce3c

0800fbc0 <rmw_init>:
 800fbc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	f000 8087 	beq.w	800fcda <rmw_init+0x11a>
 800fbcc:	460e      	mov	r6, r1
 800fbce:	2900      	cmp	r1, #0
 800fbd0:	f000 8083 	beq.w	800fcda <rmw_init+0x11a>
 800fbd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d07e      	beq.n	800fcda <rmw_init+0x11a>
 800fbdc:	4b70      	ldr	r3, [pc, #448]	; (800fda0 <rmw_init+0x1e0>)
 800fbde:	6880      	ldr	r0, [r0, #8]
 800fbe0:	f8d3 8000 	ldr.w	r8, [r3]
 800fbe4:	b120      	cbz	r0, 800fbf0 <rmw_init+0x30>
 800fbe6:	4641      	mov	r1, r8
 800fbe8:	f7f0 fb22 	bl	8000230 <strcmp>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d17e      	bne.n	800fcee <rmw_init+0x12e>
 800fbf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbf4:	68e9      	ldr	r1, [r5, #12]
 800fbf6:	486b      	ldr	r0, [pc, #428]	; (800fda4 <rmw_init+0x1e4>)
 800fbf8:	e9c6 2300 	strd	r2, r3, [r6]
 800fbfc:	61f1      	str	r1, [r6, #28]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	4969      	ldr	r1, [pc, #420]	; (800fda8 <rmw_init+0x1e8>)
 800fc02:	f8c6 8008 	str.w	r8, [r6, #8]
 800fc06:	f000 fe6d 	bl	80108e4 <rmw_uxrce_init_session_memory>
 800fc0a:	4868      	ldr	r0, [pc, #416]	; (800fdac <rmw_init+0x1ec>)
 800fc0c:	2204      	movs	r2, #4
 800fc0e:	4968      	ldr	r1, [pc, #416]	; (800fdb0 <rmw_init+0x1f0>)
 800fc10:	f000 fea4 	bl	801095c <rmw_uxrce_init_static_input_buffer_memory>
 800fc14:	4863      	ldr	r0, [pc, #396]	; (800fda4 <rmw_init+0x1e4>)
 800fc16:	f008 fa7b 	bl	8018110 <get_memory>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d062      	beq.n	800fce4 <rmw_init+0x124>
 800fc1e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800fc20:	68c4      	ldr	r4, [r0, #12]
 800fc22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fc28:	7c39      	ldrb	r1, [r7, #16]
 800fc2a:	9001      	str	r0, [sp, #4]
 800fc2c:	6a38      	ldr	r0, [r7, #32]
 800fc2e:	f104 0910 	add.w	r9, r4, #16
 800fc32:	9000      	str	r0, [sp, #0]
 800fc34:	4648      	mov	r0, r9
 800fc36:	f002 fd51 	bl	80126dc <uxr_set_custom_transport_callbacks>
 800fc3a:	2700      	movs	r7, #0
 800fc3c:	f241 5194 	movw	r1, #5524	; 0x1594
 800fc40:	f241 5398 	movw	r3, #5528	; 0x1598
 800fc44:	f241 509c 	movw	r0, #5532	; 0x159c
 800fc48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fc4c:	5067      	str	r7, [r4, r1]
 800fc4e:	50e7      	str	r7, [r4, r3]
 800fc50:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800fc54:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800fc58:	5027      	str	r7, [r4, r0]
 800fc5a:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800fc5e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800fc62:	4854      	ldr	r0, [pc, #336]	; (800fdb4 <rmw_init+0x1f4>)
 800fc64:	600f      	str	r7, [r1, #0]
 800fc66:	2201      	movs	r2, #1
 800fc68:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 800fc6c:	4952      	ldr	r1, [pc, #328]	; (800fdb8 <rmw_init+0x1f8>)
 800fc6e:	64b4      	str	r4, [r6, #72]	; 0x48
 800fc70:	f000 fe1e 	bl	80108b0 <rmw_uxrce_init_node_memory>
 800fc74:	2205      	movs	r2, #5
 800fc76:	4951      	ldr	r1, [pc, #324]	; (800fdbc <rmw_init+0x1fc>)
 800fc78:	4851      	ldr	r0, [pc, #324]	; (800fdc0 <rmw_init+0x200>)
 800fc7a:	f000 fdff 	bl	801087c <rmw_uxrce_init_subscription_memory>
 800fc7e:	220a      	movs	r2, #10
 800fc80:	4950      	ldr	r1, [pc, #320]	; (800fdc4 <rmw_init+0x204>)
 800fc82:	4851      	ldr	r0, [pc, #324]	; (800fdc8 <rmw_init+0x208>)
 800fc84:	f000 fde0 	bl	8010848 <rmw_uxrce_init_publisher_memory>
 800fc88:	2201      	movs	r2, #1
 800fc8a:	4950      	ldr	r1, [pc, #320]	; (800fdcc <rmw_init+0x20c>)
 800fc8c:	4850      	ldr	r0, [pc, #320]	; (800fdd0 <rmw_init+0x210>)
 800fc8e:	f000 fda7 	bl	80107e0 <rmw_uxrce_init_service_memory>
 800fc92:	2201      	movs	r2, #1
 800fc94:	494f      	ldr	r1, [pc, #316]	; (800fdd4 <rmw_init+0x214>)
 800fc96:	4850      	ldr	r0, [pc, #320]	; (800fdd8 <rmw_init+0x218>)
 800fc98:	f000 fdbc 	bl	8010814 <rmw_uxrce_init_client_memory>
 800fc9c:	220f      	movs	r2, #15
 800fc9e:	494f      	ldr	r1, [pc, #316]	; (800fddc <rmw_init+0x21c>)
 800fca0:	484f      	ldr	r0, [pc, #316]	; (800fde0 <rmw_init+0x220>)
 800fca2:	f000 fe3f 	bl	8010924 <rmw_uxrce_init_topic_memory>
 800fca6:	2203      	movs	r2, #3
 800fca8:	494e      	ldr	r1, [pc, #312]	; (800fde4 <rmw_init+0x224>)
 800fcaa:	484f      	ldr	r0, [pc, #316]	; (800fde8 <rmw_init+0x228>)
 800fcac:	f000 fe74 	bl	8010998 <rmw_uxrce_init_init_options_impl_memory>
 800fcb0:	2204      	movs	r2, #4
 800fcb2:	494e      	ldr	r1, [pc, #312]	; (800fdec <rmw_init+0x22c>)
 800fcb4:	484e      	ldr	r0, [pc, #312]	; (800fdf0 <rmw_init+0x230>)
 800fcb6:	f000 fe89 	bl	80109cc <rmw_uxrce_init_wait_set_memory>
 800fcba:	2204      	movs	r2, #4
 800fcbc:	494d      	ldr	r1, [pc, #308]	; (800fdf4 <rmw_init+0x234>)
 800fcbe:	484e      	ldr	r0, [pc, #312]	; (800fdf8 <rmw_init+0x238>)
 800fcc0:	f000 fea0 	bl	8010a04 <rmw_uxrce_init_guard_condition_memory>
 800fcc4:	463a      	mov	r2, r7
 800fcc6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800fcc8:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800fcca:	f000 fd51 	bl	8010770 <rmw_uxrce_transport_init>
 800fcce:	4607      	mov	r7, r0
 800fcd0:	b190      	cbz	r0, 800fcf8 <rmw_init+0x138>
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	b003      	add	sp, #12
 800fcd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcda:	270b      	movs	r7, #11
 800fcdc:	4638      	mov	r0, r7
 800fcde:	b003      	add	sp, #12
 800fce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fce4:	2701      	movs	r7, #1
 800fce6:	4638      	mov	r0, r7
 800fce8:	b003      	add	sp, #12
 800fcea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcee:	270c      	movs	r7, #12
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	b003      	add	sp, #12
 800fcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fcfa:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800fcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd00:	4628      	mov	r0, r5
 800fd02:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800fd06:	f003 f9fd 	bl	8013104 <uxr_init_session>
 800fd0a:	4622      	mov	r2, r4
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	493b      	ldr	r1, [pc, #236]	; (800fdfc <rmw_init+0x23c>)
 800fd10:	f003 fa1a 	bl	8013148 <uxr_set_topic_callback>
 800fd14:	463a      	mov	r2, r7
 800fd16:	4628      	mov	r0, r5
 800fd18:	4939      	ldr	r1, [pc, #228]	; (800fe00 <rmw_init+0x240>)
 800fd1a:	f003 fa11 	bl	8013140 <uxr_set_status_callback>
 800fd1e:	463a      	mov	r2, r7
 800fd20:	4628      	mov	r0, r5
 800fd22:	4938      	ldr	r1, [pc, #224]	; (800fe04 <rmw_init+0x244>)
 800fd24:	f003 fa14 	bl	8013150 <uxr_set_request_callback>
 800fd28:	463a      	mov	r2, r7
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	4936      	ldr	r1, [pc, #216]	; (800fe08 <rmw_init+0x248>)
 800fd2e:	f003 fa13 	bl	8013158 <uxr_set_reply_callback>
 800fd32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fd36:	2304      	movs	r3, #4
 800fd38:	0092      	lsls	r2, r2, #2
 800fd3a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f003 fad8 	bl	80132f4 <uxr_create_input_reliable_stream>
 800fd44:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fd48:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	2304      	movs	r3, #4
 800fd50:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800fd54:	4628      	mov	r0, r5
 800fd56:	f003 faa3 	bl	80132a0 <uxr_create_output_reliable_stream>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800fd62:	f003 fac1 	bl	80132e8 <uxr_create_input_best_effort_stream>
 800fd66:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800fd6a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800fd6e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fd72:	4628      	mov	r0, r5
 800fd74:	3114      	adds	r1, #20
 800fd76:	f003 fa81 	bl	801327c <uxr_create_output_best_effort_stream>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 800fd82:	f003 f9ed 	bl	8013160 <uxr_create_session>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d1a3      	bne.n	800fcd2 <rmw_init+0x112>
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	f002 fce6 	bl	801275c <uxr_close_custom_transport>
 800fd90:	4621      	mov	r1, r4
 800fd92:	4804      	ldr	r0, [pc, #16]	; (800fda4 <rmw_init+0x1e4>)
 800fd94:	f008 f9cc 	bl	8018130 <put_memory>
 800fd98:	64b7      	str	r7, [r6, #72]	; 0x48
 800fd9a:	2701      	movs	r7, #1
 800fd9c:	e799      	b.n	800fcd2 <rmw_init+0x112>
 800fd9e:	bf00      	nop
 800fda0:	0801cc5c 	.word	0x0801cc5c
 800fda4:	2000cce8 	.word	0x2000cce8
 800fda8:	2000cf18 	.word	0x2000cf18
 800fdac:	20009b40 	.word	0x20009b40
 800fdb0:	2000a920 	.word	0x2000a920
 800fdb4:	2000cb14 	.word	0x2000cb14
 800fdb8:	2000ccf8 	.word	0x2000ccf8
 800fdbc:	2000a448 	.word	0x2000a448
 800fdc0:	2000cdac 	.word	0x2000cdac
 800fdc4:	20009b60 	.word	0x20009b60
 800fdc8:	20009b50 	.word	0x20009b50
 800fdcc:	2000ce50 	.word	0x2000ce50
 800fdd0:	2000cd9c 	.word	0x2000cd9c
 800fdd4:	2000a858 	.word	0x2000a858
 800fdd8:	2000a3d0 	.word	0x2000a3d0
 800fddc:	2000cb24 	.word	0x2000cb24
 800fde0:	2000ccd8 	.word	0x2000ccd8
 800fde4:	2000ca90 	.word	0x2000ca90
 800fde8:	2000ce3c 	.word	0x2000ce3c
 800fdec:	2000ca20 	.word	0x2000ca20
 800fdf0:	2000e4c0 	.word	0x2000e4c0
 800fdf4:	2000cdbc 	.word	0x2000cdbc
 800fdf8:	2000ccc8 	.word	0x2000ccc8
 800fdfc:	08017f49 	.word	0x08017f49
 800fe00:	08017f41 	.word	0x08017f41
 800fe04:	08017fdd 	.word	0x08017fdd
 800fe08:	08018079 	.word	0x08018079

0800fe0c <rmw_context_fini>:
 800fe0c:	4b17      	ldr	r3, [pc, #92]	; (800fe6c <rmw_context_fini+0x60>)
 800fe0e:	b570      	push	{r4, r5, r6, lr}
 800fe10:	681c      	ldr	r4, [r3, #0]
 800fe12:	4605      	mov	r5, r0
 800fe14:	b33c      	cbz	r4, 800fe66 <rmw_context_fini+0x5a>
 800fe16:	2600      	movs	r6, #0
 800fe18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800fe1a:	68e0      	ldr	r0, [r4, #12]
 800fe1c:	68a4      	ldr	r4, [r4, #8]
 800fe1e:	6902      	ldr	r2, [r0, #16]
 800fe20:	428a      	cmp	r2, r1
 800fe22:	d018      	beq.n	800fe56 <rmw_context_fini+0x4a>
 800fe24:	2c00      	cmp	r4, #0
 800fe26:	d1f8      	bne.n	800fe1a <rmw_context_fini+0xe>
 800fe28:	b189      	cbz	r1, 800fe4e <rmw_context_fini+0x42>
 800fe2a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800fe2e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800fe32:	789b      	ldrb	r3, [r3, #2]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	bf14      	ite	ne
 800fe38:	210a      	movne	r1, #10
 800fe3a:	2100      	moveq	r1, #0
 800fe3c:	f003 f9d4 	bl	80131e8 <uxr_delete_session_retries>
 800fe40:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fe42:	f000 fdf9 	bl	8010a38 <rmw_uxrce_fini_session_memory>
 800fe46:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800fe48:	3010      	adds	r0, #16
 800fe4a:	f002 fc87 	bl	801275c <uxr_close_custom_transport>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	4630      	mov	r0, r6
 800fe52:	64ab      	str	r3, [r5, #72]	; 0x48
 800fe54:	bd70      	pop	{r4, r5, r6, pc}
 800fe56:	3018      	adds	r0, #24
 800fe58:	f000 f89c 	bl	800ff94 <rmw_destroy_node>
 800fe5c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800fe5e:	4606      	mov	r6, r0
 800fe60:	2c00      	cmp	r4, #0
 800fe62:	d1da      	bne.n	800fe1a <rmw_context_fini+0xe>
 800fe64:	e7e0      	b.n	800fe28 <rmw_context_fini+0x1c>
 800fe66:	4626      	mov	r6, r4
 800fe68:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800fe6a:	e7dd      	b.n	800fe28 <rmw_context_fini+0x1c>
 800fe6c:	2000cb14 	.word	0x2000cb14

0800fe70 <create_node>:
 800fe70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe74:	b083      	sub	sp, #12
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d05f      	beq.n	800ff3a <create_node+0xca>
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	4835      	ldr	r0, [pc, #212]	; (800ff54 <create_node+0xe4>)
 800fe7e:	460f      	mov	r7, r1
 800fe80:	4690      	mov	r8, r2
 800fe82:	461d      	mov	r5, r3
 800fe84:	f008 f944 	bl	8018110 <get_memory>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d056      	beq.n	800ff3a <create_node+0xca>
 800fe8c:	68c4      	ldr	r4, [r0, #12]
 800fe8e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800fe90:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	f008 f9a3 	bl	80181e0 <rmw_get_implementation_identifier>
 800fe9a:	f8c4 9020 	str.w	r9, [r4, #32]
 800fe9e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7f0 f9ce 	bl	8000244 <strlen>
 800fea8:	1c42      	adds	r2, r0, #1
 800feaa:	2a3c      	cmp	r2, #60	; 0x3c
 800feac:	f104 0518 	add.w	r5, r4, #24
 800feb0:	d840      	bhi.n	800ff34 <create_node+0xc4>
 800feb2:	4648      	mov	r0, r9
 800feb4:	4631      	mov	r1, r6
 800feb6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800feba:	f009 fd97 	bl	80199ec <memcpy>
 800febe:	4638      	mov	r0, r7
 800fec0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800fec4:	f7f0 f9be 	bl	8000244 <strlen>
 800fec8:	1c42      	adds	r2, r0, #1
 800feca:	2a3c      	cmp	r2, #60	; 0x3c
 800fecc:	d832      	bhi.n	800ff34 <create_node+0xc4>
 800fece:	4639      	mov	r1, r7
 800fed0:	4648      	mov	r0, r9
 800fed2:	f009 fd8b 	bl	80199ec <memcpy>
 800fed6:	f241 5394 	movw	r3, #5524	; 0x1594
 800feda:	2101      	movs	r1, #1
 800fedc:	6922      	ldr	r2, [r4, #16]
 800fede:	5ad0      	ldrh	r0, [r2, r3]
 800fee0:	eb00 0c01 	add.w	ip, r0, r1
 800fee4:	f822 c003 	strh.w	ip, [r2, r3]
 800fee8:	f002 fc3c 	bl	8012764 <uxr_object_id>
 800feec:	6160      	str	r0, [r4, #20]
 800feee:	783b      	ldrb	r3, [r7, #0]
 800fef0:	2b2f      	cmp	r3, #47	; 0x2f
 800fef2:	d127      	bne.n	800ff44 <create_node+0xd4>
 800fef4:	787b      	ldrb	r3, [r7, #1]
 800fef6:	bb2b      	cbnz	r3, 800ff44 <create_node+0xd4>
 800fef8:	4633      	mov	r3, r6
 800fefa:	213c      	movs	r1, #60	; 0x3c
 800fefc:	4a16      	ldr	r2, [pc, #88]	; (800ff58 <create_node+0xe8>)
 800fefe:	4817      	ldr	r0, [pc, #92]	; (800ff5c <create_node+0xec>)
 800ff00:	f009 fef6 	bl	8019cf0 <sniprintf>
 800ff04:	2106      	movs	r1, #6
 800ff06:	6920      	ldr	r0, [r4, #16]
 800ff08:	4b14      	ldr	r3, [pc, #80]	; (800ff5c <create_node+0xec>)
 800ff0a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ff0e:	e9cd 3100 	strd	r3, r1, [sp]
 800ff12:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff16:	6811      	ldr	r1, [r2, #0]
 800ff18:	fa1f f388 	uxth.w	r3, r8
 800ff1c:	6962      	ldr	r2, [r4, #20]
 800ff1e:	f002 f999 	bl	8012254 <uxr_buffer_create_participant_bin>
 800ff22:	4602      	mov	r2, r0
 800ff24:	6920      	ldr	r0, [r4, #16]
 800ff26:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ff2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ff2e:	f000 fef3 	bl	8010d18 <run_xrce_session>
 800ff32:	b918      	cbnz	r0, 800ff3c <create_node+0xcc>
 800ff34:	4628      	mov	r0, r5
 800ff36:	f000 fd85 	bl	8010a44 <rmw_uxrce_fini_node_memory>
 800ff3a:	2500      	movs	r5, #0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	b003      	add	sp, #12
 800ff40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff44:	463b      	mov	r3, r7
 800ff46:	213c      	movs	r1, #60	; 0x3c
 800ff48:	4a05      	ldr	r2, [pc, #20]	; (800ff60 <create_node+0xf0>)
 800ff4a:	9600      	str	r6, [sp, #0]
 800ff4c:	4803      	ldr	r0, [pc, #12]	; (800ff5c <create_node+0xec>)
 800ff4e:	f009 fecf 	bl	8019cf0 <sniprintf>
 800ff52:	e7d7      	b.n	800ff04 <create_node+0x94>
 800ff54:	2000cb14 	.word	0x2000cb14
 800ff58:	0801c49c 	.word	0x0801c49c
 800ff5c:	20006818 	.word	0x20006818
 800ff60:	0801c484 	.word	0x0801c484

0800ff64 <rmw_create_node>:
 800ff64:	b199      	cbz	r1, 800ff8e <rmw_create_node+0x2a>
 800ff66:	b430      	push	{r4, r5}
 800ff68:	4614      	mov	r4, r2
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	780b      	ldrb	r3, [r1, #0]
 800ff6e:	4605      	mov	r5, r0
 800ff70:	4608      	mov	r0, r1
 800ff72:	b14b      	cbz	r3, 800ff88 <rmw_create_node+0x24>
 800ff74:	b144      	cbz	r4, 800ff88 <rmw_create_node+0x24>
 800ff76:	7823      	ldrb	r3, [r4, #0]
 800ff78:	b133      	cbz	r3, 800ff88 <rmw_create_node+0x24>
 800ff7a:	b902      	cbnz	r2, 800ff7e <rmw_create_node+0x1a>
 800ff7c:	69ea      	ldr	r2, [r5, #28]
 800ff7e:	462b      	mov	r3, r5
 800ff80:	4621      	mov	r1, r4
 800ff82:	bc30      	pop	{r4, r5}
 800ff84:	f7ff bf74 	b.w	800fe70 <create_node>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	bc30      	pop	{r4, r5}
 800ff8c:	4770      	bx	lr
 800ff8e:	2000      	movs	r0, #0
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop

0800ff94 <rmw_destroy_node>:
 800ff94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff96:	2800      	cmp	r0, #0
 800ff98:	d067      	beq.n	801006a <rmw_destroy_node+0xd6>
 800ff9a:	4607      	mov	r7, r0
 800ff9c:	6800      	ldr	r0, [r0, #0]
 800ff9e:	b128      	cbz	r0, 800ffac <rmw_destroy_node+0x18>
 800ffa0:	4b34      	ldr	r3, [pc, #208]	; (8010074 <rmw_destroy_node+0xe0>)
 800ffa2:	6819      	ldr	r1, [r3, #0]
 800ffa4:	f7f0 f944 	bl	8000230 <strcmp>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d15e      	bne.n	801006a <rmw_destroy_node+0xd6>
 800ffac:	687c      	ldr	r4, [r7, #4]
 800ffae:	2c00      	cmp	r4, #0
 800ffb0:	d05b      	beq.n	801006a <rmw_destroy_node+0xd6>
 800ffb2:	4b31      	ldr	r3, [pc, #196]	; (8010078 <rmw_destroy_node+0xe4>)
 800ffb4:	681d      	ldr	r5, [r3, #0]
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	d05a      	beq.n	8010070 <rmw_destroy_node+0xdc>
 800ffba:	2600      	movs	r6, #0
 800ffbc:	68e9      	ldr	r1, [r5, #12]
 800ffbe:	68ad      	ldr	r5, [r5, #8]
 800ffc0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800ffc4:	429c      	cmp	r4, r3
 800ffc6:	d048      	beq.n	801005a <rmw_destroy_node+0xc6>
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	d1f7      	bne.n	800ffbc <rmw_destroy_node+0x28>
 800ffcc:	4b2b      	ldr	r3, [pc, #172]	; (801007c <rmw_destroy_node+0xe8>)
 800ffce:	681d      	ldr	r5, [r3, #0]
 800ffd0:	b15d      	cbz	r5, 800ffea <rmw_destroy_node+0x56>
 800ffd2:	68e9      	ldr	r1, [r5, #12]
 800ffd4:	68ad      	ldr	r5, [r5, #8]
 800ffd6:	6a0b      	ldr	r3, [r1, #32]
 800ffd8:	429c      	cmp	r4, r3
 800ffda:	d1f9      	bne.n	800ffd0 <rmw_destroy_node+0x3c>
 800ffdc:	4638      	mov	r0, r7
 800ffde:	317c      	adds	r1, #124	; 0x7c
 800ffe0:	f000 fb14 	bl	801060c <rmw_destroy_subscription>
 800ffe4:	4606      	mov	r6, r0
 800ffe6:	2d00      	cmp	r5, #0
 800ffe8:	d1f3      	bne.n	800ffd2 <rmw_destroy_node+0x3e>
 800ffea:	4b25      	ldr	r3, [pc, #148]	; (8010080 <rmw_destroy_node+0xec>)
 800ffec:	681d      	ldr	r5, [r3, #0]
 800ffee:	b15d      	cbz	r5, 8010008 <rmw_destroy_node+0x74>
 800fff0:	68e9      	ldr	r1, [r5, #12]
 800fff2:	68ad      	ldr	r5, [r5, #8]
 800fff4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800fff6:	429c      	cmp	r4, r3
 800fff8:	d1f9      	bne.n	800ffee <rmw_destroy_node+0x5a>
 800fffa:	4638      	mov	r0, r7
 800fffc:	317c      	adds	r1, #124	; 0x7c
 800fffe:	f000 f9db 	bl	80103b8 <rmw_destroy_service>
 8010002:	4606      	mov	r6, r0
 8010004:	2d00      	cmp	r5, #0
 8010006:	d1f3      	bne.n	800fff0 <rmw_destroy_node+0x5c>
 8010008:	4b1e      	ldr	r3, [pc, #120]	; (8010084 <rmw_destroy_node+0xf0>)
 801000a:	681d      	ldr	r5, [r3, #0]
 801000c:	b15d      	cbz	r5, 8010026 <rmw_destroy_node+0x92>
 801000e:	68e9      	ldr	r1, [r5, #12]
 8010010:	68ad      	ldr	r5, [r5, #8]
 8010012:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010014:	429c      	cmp	r4, r3
 8010016:	d1f9      	bne.n	801000c <rmw_destroy_node+0x78>
 8010018:	4638      	mov	r0, r7
 801001a:	317c      	adds	r1, #124	; 0x7c
 801001c:	f008 f89c 	bl	8018158 <rmw_destroy_client>
 8010020:	4606      	mov	r6, r0
 8010022:	2d00      	cmp	r5, #0
 8010024:	d1f3      	bne.n	801000e <rmw_destroy_node+0x7a>
 8010026:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801002a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801002e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010032:	6819      	ldr	r1, [r3, #0]
 8010034:	f002 f8c0 	bl	80121b8 <uxr_buffer_delete_entity>
 8010038:	4602      	mov	r2, r0
 801003a:	6920      	ldr	r0, [r4, #16]
 801003c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010040:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010044:	f000 fe68 	bl	8010d18 <run_xrce_session>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	bf08      	it	eq
 801004e:	2602      	moveq	r6, #2
 8010050:	4638      	mov	r0, r7
 8010052:	f000 fcf7 	bl	8010a44 <rmw_uxrce_fini_node_memory>
 8010056:	4630      	mov	r0, r6
 8010058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005a:	4638      	mov	r0, r7
 801005c:	3184      	adds	r1, #132	; 0x84
 801005e:	f000 f95b 	bl	8010318 <rmw_destroy_publisher>
 8010062:	4606      	mov	r6, r0
 8010064:	2d00      	cmp	r5, #0
 8010066:	d1a9      	bne.n	800ffbc <rmw_destroy_node+0x28>
 8010068:	e7b0      	b.n	800ffcc <rmw_destroy_node+0x38>
 801006a:	2601      	movs	r6, #1
 801006c:	4630      	mov	r0, r6
 801006e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010070:	462e      	mov	r6, r5
 8010072:	e7ab      	b.n	800ffcc <rmw_destroy_node+0x38>
 8010074:	0801cc5c 	.word	0x0801cc5c
 8010078:	20009b50 	.word	0x20009b50
 801007c:	2000cdac 	.word	0x2000cdac
 8010080:	2000cd9c 	.word	0x2000cd9c
 8010084:	2000a3d0 	.word	0x2000a3d0

08010088 <rmw_node_get_graph_guard_condition>:
 8010088:	6843      	ldr	r3, [r0, #4]
 801008a:	6918      	ldr	r0, [r3, #16]
 801008c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop

08010094 <flush_session>:
 8010094:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8010096:	f003 ba3b 	b.w	8013510 <uxr_run_session_until_confirm_delivery>
 801009a:	bf00      	nop

0801009c <rmw_publish>:
 801009c:	2800      	cmp	r0, #0
 801009e:	d053      	beq.n	8010148 <rmw_publish+0xac>
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	460d      	mov	r5, r1
 80100a4:	b08e      	sub	sp, #56	; 0x38
 80100a6:	2900      	cmp	r1, #0
 80100a8:	d04b      	beq.n	8010142 <rmw_publish+0xa6>
 80100aa:	4604      	mov	r4, r0
 80100ac:	6800      	ldr	r0, [r0, #0]
 80100ae:	f000 feb7 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d045      	beq.n	8010142 <rmw_publish+0xa6>
 80100b6:	6866      	ldr	r6, [r4, #4]
 80100b8:	2e00      	cmp	r6, #0
 80100ba:	d042      	beq.n	8010142 <rmw_publish+0xa6>
 80100bc:	69b4      	ldr	r4, [r6, #24]
 80100be:	4628      	mov	r0, r5
 80100c0:	6923      	ldr	r3, [r4, #16]
 80100c2:	4798      	blx	r3
 80100c4:	69f3      	ldr	r3, [r6, #28]
 80100c6:	9005      	str	r0, [sp, #20]
 80100c8:	b113      	cbz	r3, 80100d0 <rmw_publish+0x34>
 80100ca:	a805      	add	r0, sp, #20
 80100cc:	4798      	blx	r3
 80100ce:	9805      	ldr	r0, [sp, #20]
 80100d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	9000      	str	r0, [sp, #0]
 80100d8:	6972      	ldr	r2, [r6, #20]
 80100da:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80100de:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80100e0:	ab06      	add	r3, sp, #24
 80100e2:	f004 faa5 	bl	8014630 <uxr_prepare_output_stream>
 80100e6:	b1d8      	cbz	r0, 8010120 <rmw_publish+0x84>
 80100e8:	68a3      	ldr	r3, [r4, #8]
 80100ea:	4628      	mov	r0, r5
 80100ec:	a906      	add	r1, sp, #24
 80100ee:	4798      	blx	r3
 80100f0:	6a33      	ldr	r3, [r6, #32]
 80100f2:	4604      	mov	r4, r0
 80100f4:	b10b      	cbz	r3, 80100fa <rmw_publish+0x5e>
 80100f6:	a806      	add	r0, sp, #24
 80100f8:	4798      	blx	r3
 80100fa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80100fe:	2b01      	cmp	r3, #1
 8010100:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010104:	d022      	beq.n	801014c <rmw_publish+0xb0>
 8010106:	6918      	ldr	r0, [r3, #16]
 8010108:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801010a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801010e:	f003 f9ff 	bl	8013510 <uxr_run_session_until_confirm_delivery>
 8010112:	4004      	ands	r4, r0
 8010114:	b2e4      	uxtb	r4, r4
 8010116:	f084 0001 	eor.w	r0, r4, #1
 801011a:	b2c0      	uxtb	r0, r0
 801011c:	b00e      	add	sp, #56	; 0x38
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 8010124:	4a0c      	ldr	r2, [pc, #48]	; (8010158 <rmw_publish+0xbc>)
 8010126:	6908      	ldr	r0, [r1, #16]
 8010128:	9b05      	ldr	r3, [sp, #20]
 801012a:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	6972      	ldr	r2, [r6, #20]
 8010132:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010134:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010138:	ab06      	add	r3, sp, #24
 801013a:	f004 faa9 	bl	8014690 <uxr_prepare_output_stream_fragmented>
 801013e:	2800      	cmp	r0, #0
 8010140:	d1d2      	bne.n	80100e8 <rmw_publish+0x4c>
 8010142:	2001      	movs	r0, #1
 8010144:	b00e      	add	sp, #56	; 0x38
 8010146:	bd70      	pop	{r4, r5, r6, pc}
 8010148:	2001      	movs	r0, #1
 801014a:	4770      	bx	lr
 801014c:	6918      	ldr	r0, [r3, #16]
 801014e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010152:	f003 f94b 	bl	80133ec <uxr_flash_output_streams>
 8010156:	e7de      	b.n	8010116 <rmw_publish+0x7a>
 8010158:	08010095 	.word	0x08010095

0801015c <rmw_create_publisher>:
 801015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010160:	b087      	sub	sp, #28
 8010162:	2800      	cmp	r0, #0
 8010164:	f000 80ca 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010168:	460e      	mov	r6, r1
 801016a:	2900      	cmp	r1, #0
 801016c:	f000 80c6 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010170:	4604      	mov	r4, r0
 8010172:	6800      	ldr	r0, [r0, #0]
 8010174:	4615      	mov	r5, r2
 8010176:	4698      	mov	r8, r3
 8010178:	f000 fe52 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 801017c:	2800      	cmp	r0, #0
 801017e:	f000 80bd 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010182:	2d00      	cmp	r5, #0
 8010184:	f000 80ba 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010188:	782b      	ldrb	r3, [r5, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 80b6 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010190:	f1b8 0f00 	cmp.w	r8, #0
 8010194:	f000 80b2 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 8010198:	485b      	ldr	r0, [pc, #364]	; (8010308 <rmw_create_publisher+0x1ac>)
 801019a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801019e:	f007 ffb7 	bl	8018110 <get_memory>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	f000 80aa 	beq.w	80102fc <rmw_create_publisher+0x1a0>
 80101a8:	2300      	movs	r3, #0
 80101aa:	68c4      	ldr	r4, [r0, #12]
 80101ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80101b0:	f008 f816 	bl	80181e0 <rmw_get_implementation_identifier>
 80101b4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 80101b8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80101bc:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7f0 f83f 	bl	8000244 <strlen>
 80101c6:	3001      	adds	r0, #1
 80101c8:	283c      	cmp	r0, #60	; 0x3c
 80101ca:	f104 0784 	add.w	r7, r4, #132	; 0x84
 80101ce:	f200 8092 	bhi.w	80102f6 <rmw_create_publisher+0x19a>
 80101d2:	462b      	mov	r3, r5
 80101d4:	213c      	movs	r1, #60	; 0x3c
 80101d6:	4a4d      	ldr	r2, [pc, #308]	; (801030c <rmw_create_publisher+0x1b0>)
 80101d8:	4650      	mov	r0, sl
 80101da:	f009 fd89 	bl	8019cf0 <sniprintf>
 80101de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101e2:	4641      	mov	r1, r8
 80101e4:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 80101e8:	2250      	movs	r2, #80	; 0x50
 80101ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80101ee:	f009 fbfd 	bl	80199ec <memcpy>
 80101f2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80101f6:	4630      	mov	r0, r6
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101fe:	4944      	ldr	r1, [pc, #272]	; (8010310 <rmw_create_publisher+0x1b4>)
 8010200:	bf0c      	ite	eq
 8010202:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010206:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 801020a:	67a3      	str	r3, [r4, #120]	; 0x78
 801020c:	2300      	movs	r3, #0
 801020e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010212:	f000 fe13 	bl	8010e3c <get_message_typesupport_handle>
 8010216:	2800      	cmp	r0, #0
 8010218:	d06d      	beq.n	80102f6 <rmw_create_publisher+0x19a>
 801021a:	6842      	ldr	r2, [r0, #4]
 801021c:	61a2      	str	r2, [r4, #24]
 801021e:	2a00      	cmp	r2, #0
 8010220:	d069      	beq.n	80102f6 <rmw_create_publisher+0x19a>
 8010222:	4629      	mov	r1, r5
 8010224:	4643      	mov	r3, r8
 8010226:	4648      	mov	r0, r9
 8010228:	f007 ffe0 	bl	80181ec <create_topic>
 801022c:	6260      	str	r0, [r4, #36]	; 0x24
 801022e:	2800      	cmp	r0, #0
 8010230:	d061      	beq.n	80102f6 <rmw_create_publisher+0x19a>
 8010232:	f241 5398 	movw	r3, #5528	; 0x1598
 8010236:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801023a:	2103      	movs	r1, #3
 801023c:	5ad0      	ldrh	r0, [r2, r3]
 801023e:	2606      	movs	r6, #6
 8010240:	1c45      	adds	r5, r0, #1
 8010242:	52d5      	strh	r5, [r2, r3]
 8010244:	f002 fa8e 	bl	8012764 <uxr_object_id>
 8010248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801024c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010250:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010254:	6912      	ldr	r2, [r2, #16]
 8010256:	6120      	str	r0, [r4, #16]
 8010258:	9600      	str	r6, [sp, #0]
 801025a:	6819      	ldr	r1, [r3, #0]
 801025c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8010260:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010264:	6922      	ldr	r2, [r4, #16]
 8010266:	f002 f863 	bl	8012330 <uxr_buffer_create_publisher_bin>
 801026a:	4602      	mov	r2, r0
 801026c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010270:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010274:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010278:	f000 fd4e 	bl	8010d18 <run_xrce_session>
 801027c:	b3b8      	cbz	r0, 80102ee <rmw_create_publisher+0x192>
 801027e:	f241 539a 	movw	r3, #5530	; 0x159a
 8010282:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010286:	2105      	movs	r1, #5
 8010288:	5ad0      	ldrh	r0, [r2, r3]
 801028a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801028e:	1c45      	adds	r5, r0, #1
 8010290:	52d5      	strh	r5, [r2, r3]
 8010292:	f002 fa67 	bl	8012764 <uxr_object_id>
 8010296:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801029a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801029e:	f10d 0a10 	add.w	sl, sp, #16
 80102a2:	6915      	ldr	r5, [r2, #16]
 80102a4:	4641      	mov	r1, r8
 80102a6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80102aa:	6160      	str	r0, [r4, #20]
 80102ac:	4650      	mov	r0, sl
 80102ae:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 80102b2:	f000 fd4d 	bl	8010d50 <convert_qos_profile>
 80102b6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80102ba:	9603      	str	r6, [sp, #12]
 80102bc:	9001      	str	r0, [sp, #4]
 80102be:	f8ad 1008 	strh.w	r1, [sp, #8]
 80102c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80102c6:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80102d0:	f8d8 1000 	ldr.w	r1, [r8]
 80102d4:	4628      	mov	r0, r5
 80102d6:	f002 f88b 	bl	80123f0 <uxr_buffer_create_datawriter_bin>
 80102da:	4602      	mov	r2, r0
 80102dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80102e0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80102e4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80102e8:	f000 fd16 	bl	8010d18 <run_xrce_session>
 80102ec:	b938      	cbnz	r0, 80102fe <rmw_create_publisher+0x1a2>
 80102ee:	4621      	mov	r1, r4
 80102f0:	4805      	ldr	r0, [pc, #20]	; (8010308 <rmw_create_publisher+0x1ac>)
 80102f2:	f007 ff1d 	bl	8018130 <put_memory>
 80102f6:	4638      	mov	r0, r7
 80102f8:	f000 fbbc 	bl	8010a74 <rmw_uxrce_fini_publisher_memory>
 80102fc:	2700      	movs	r7, #0
 80102fe:	4638      	mov	r0, r7
 8010300:	b007      	add	sp, #28
 8010302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010306:	bf00      	nop
 8010308:	20009b50 	.word	0x20009b50
 801030c:	0801c49c 	.word	0x0801c49c
 8010310:	0801c22c 	.word	0x0801c22c

08010314 <rmw_publisher_get_actual_qos>:
 8010314:	2000      	movs	r0, #0
 8010316:	4770      	bx	lr

08010318 <rmw_destroy_publisher>:
 8010318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031a:	b128      	cbz	r0, 8010328 <rmw_destroy_publisher+0x10>
 801031c:	4604      	mov	r4, r0
 801031e:	6800      	ldr	r0, [r0, #0]
 8010320:	460d      	mov	r5, r1
 8010322:	f000 fd7d 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 8010326:	b910      	cbnz	r0, 801032e <rmw_destroy_publisher+0x16>
 8010328:	2401      	movs	r4, #1
 801032a:	4620      	mov	r0, r4
 801032c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801032e:	6863      	ldr	r3, [r4, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d0f9      	beq.n	8010328 <rmw_destroy_publisher+0x10>
 8010334:	2d00      	cmp	r5, #0
 8010336:	d0f7      	beq.n	8010328 <rmw_destroy_publisher+0x10>
 8010338:	6828      	ldr	r0, [r5, #0]
 801033a:	f000 fd71 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 801033e:	2800      	cmp	r0, #0
 8010340:	d0f2      	beq.n	8010328 <rmw_destroy_publisher+0x10>
 8010342:	686c      	ldr	r4, [r5, #4]
 8010344:	2c00      	cmp	r4, #0
 8010346:	d0ef      	beq.n	8010328 <rmw_destroy_publisher+0x10>
 8010348:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801034a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 801034e:	f007 ff9b 	bl	8018288 <destroy_topic>
 8010352:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010356:	6962      	ldr	r2, [r4, #20]
 8010358:	6918      	ldr	r0, [r3, #16]
 801035a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801035e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010362:	6819      	ldr	r1, [r3, #0]
 8010364:	f001 ff28 	bl	80121b8 <uxr_buffer_delete_entity>
 8010368:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801036c:	6922      	ldr	r2, [r4, #16]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	4604      	mov	r4, r0
 8010372:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010376:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801037a:	6809      	ldr	r1, [r1, #0]
 801037c:	f001 ff1c 	bl	80121b8 <uxr_buffer_delete_entity>
 8010380:	4606      	mov	r6, r0
 8010382:	6938      	ldr	r0, [r7, #16]
 8010384:	4622      	mov	r2, r4
 8010386:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801038a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801038e:	f000 fcc3 	bl	8010d18 <run_xrce_session>
 8010392:	4604      	mov	r4, r0
 8010394:	6938      	ldr	r0, [r7, #16]
 8010396:	4632      	mov	r2, r6
 8010398:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801039c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80103a0:	f000 fcba 	bl	8010d18 <run_xrce_session>
 80103a4:	b12c      	cbz	r4, 80103b2 <rmw_destroy_publisher+0x9a>
 80103a6:	b120      	cbz	r0, 80103b2 <rmw_destroy_publisher+0x9a>
 80103a8:	2400      	movs	r4, #0
 80103aa:	4628      	mov	r0, r5
 80103ac:	f000 fb62 	bl	8010a74 <rmw_uxrce_fini_publisher_memory>
 80103b0:	e7bb      	b.n	801032a <rmw_destroy_publisher+0x12>
 80103b2:	2402      	movs	r4, #2
 80103b4:	e7f9      	b.n	80103aa <rmw_destroy_publisher+0x92>
 80103b6:	bf00      	nop

080103b8 <rmw_destroy_service>:
 80103b8:	b570      	push	{r4, r5, r6, lr}
 80103ba:	b128      	cbz	r0, 80103c8 <rmw_destroy_service+0x10>
 80103bc:	4604      	mov	r4, r0
 80103be:	6800      	ldr	r0, [r0, #0]
 80103c0:	460d      	mov	r5, r1
 80103c2:	f000 fd2d 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 80103c6:	b910      	cbnz	r0, 80103ce <rmw_destroy_service+0x16>
 80103c8:	2401      	movs	r4, #1
 80103ca:	4620      	mov	r0, r4
 80103cc:	bd70      	pop	{r4, r5, r6, pc}
 80103ce:	6863      	ldr	r3, [r4, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d0f9      	beq.n	80103c8 <rmw_destroy_service+0x10>
 80103d4:	2d00      	cmp	r5, #0
 80103d6:	d0f7      	beq.n	80103c8 <rmw_destroy_service+0x10>
 80103d8:	6828      	ldr	r0, [r5, #0]
 80103da:	f000 fd21 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d0f2      	beq.n	80103c8 <rmw_destroy_service+0x10>
 80103e2:	686e      	ldr	r6, [r5, #4]
 80103e4:	2e00      	cmp	r6, #0
 80103e6:	d0ef      	beq.n	80103c8 <rmw_destroy_service+0x10>
 80103e8:	6864      	ldr	r4, [r4, #4]
 80103ea:	6932      	ldr	r2, [r6, #16]
 80103ec:	6920      	ldr	r0, [r4, #16]
 80103ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80103f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103f6:	6819      	ldr	r1, [r3, #0]
 80103f8:	f002 fa1c 	bl	8012834 <uxr_buffer_cancel_data>
 80103fc:	4602      	mov	r2, r0
 80103fe:	6920      	ldr	r0, [r4, #16]
 8010400:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010404:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010408:	f000 fc86 	bl	8010d18 <run_xrce_session>
 801040c:	6920      	ldr	r0, [r4, #16]
 801040e:	6932      	ldr	r2, [r6, #16]
 8010410:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010414:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010418:	6819      	ldr	r1, [r3, #0]
 801041a:	f001 fecd 	bl	80121b8 <uxr_buffer_delete_entity>
 801041e:	4602      	mov	r2, r0
 8010420:	6920      	ldr	r0, [r4, #16]
 8010422:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010426:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801042a:	f000 fc75 	bl	8010d18 <run_xrce_session>
 801042e:	4603      	mov	r3, r0
 8010430:	4628      	mov	r0, r5
 8010432:	2b00      	cmp	r3, #0
 8010434:	bf14      	ite	ne
 8010436:	2400      	movne	r4, #0
 8010438:	2402      	moveq	r4, #2
 801043a:	f000 fb47 	bl	8010acc <rmw_uxrce_fini_service_memory>
 801043e:	e7c4      	b.n	80103ca <rmw_destroy_service+0x12>

08010440 <rmw_create_subscription>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	b08d      	sub	sp, #52	; 0x34
 8010446:	2800      	cmp	r0, #0
 8010448:	f000 80d3 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 801044c:	460e      	mov	r6, r1
 801044e:	2900      	cmp	r1, #0
 8010450:	f000 80cf 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 8010454:	4604      	mov	r4, r0
 8010456:	6800      	ldr	r0, [r0, #0]
 8010458:	4615      	mov	r5, r2
 801045a:	4698      	mov	r8, r3
 801045c:	f000 fce0 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 8010460:	2800      	cmp	r0, #0
 8010462:	f000 80c6 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 8010466:	2d00      	cmp	r5, #0
 8010468:	f000 80c3 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 801046c:	782b      	ldrb	r3, [r5, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 80bf 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 8010474:	f1b8 0f00 	cmp.w	r8, #0
 8010478:	f000 80bb 	beq.w	80105f2 <rmw_create_subscription+0x1b2>
 801047c:	485f      	ldr	r0, [pc, #380]	; (80105fc <rmw_create_subscription+0x1bc>)
 801047e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010482:	f007 fe45 	bl	8018110 <get_memory>
 8010486:	4604      	mov	r4, r0
 8010488:	2800      	cmp	r0, #0
 801048a:	f000 80b3 	beq.w	80105f4 <rmw_create_subscription+0x1b4>
 801048e:	2300      	movs	r3, #0
 8010490:	68c7      	ldr	r7, [r0, #12]
 8010492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010496:	f007 fea3 	bl	80181e0 <rmw_get_implementation_identifier>
 801049a:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 801049e:	67f8      	str	r0, [r7, #124]	; 0x7c
 80104a0:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80104a4:	4628      	mov	r0, r5
 80104a6:	f7ef fecd 	bl	8000244 <strlen>
 80104aa:	3001      	adds	r0, #1
 80104ac:	283c      	cmp	r0, #60	; 0x3c
 80104ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80104b2:	f200 809b 	bhi.w	80105ec <rmw_create_subscription+0x1ac>
 80104b6:	462b      	mov	r3, r5
 80104b8:	213c      	movs	r1, #60	; 0x3c
 80104ba:	4a51      	ldr	r2, [pc, #324]	; (8010600 <rmw_create_subscription+0x1c0>)
 80104bc:	4650      	mov	r0, sl
 80104be:	f009 fc17 	bl	8019cf0 <sniprintf>
 80104c2:	4641      	mov	r1, r8
 80104c4:	2250      	movs	r2, #80	; 0x50
 80104c6:	f8c7 9020 	str.w	r9, [r7, #32]
 80104ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80104ce:	f009 fa8d 	bl	80199ec <memcpy>
 80104d2:	4630      	mov	r0, r6
 80104d4:	494b      	ldr	r1, [pc, #300]	; (8010604 <rmw_create_subscription+0x1c4>)
 80104d6:	f000 fcb1 	bl	8010e3c <get_message_typesupport_handle>
 80104da:	2800      	cmp	r0, #0
 80104dc:	f000 8086 	beq.w	80105ec <rmw_create_subscription+0x1ac>
 80104e0:	6842      	ldr	r2, [r0, #4]
 80104e2:	61ba      	str	r2, [r7, #24]
 80104e4:	2a00      	cmp	r2, #0
 80104e6:	f000 8081 	beq.w	80105ec <rmw_create_subscription+0x1ac>
 80104ea:	4629      	mov	r1, r5
 80104ec:	4643      	mov	r3, r8
 80104ee:	4648      	mov	r0, r9
 80104f0:	f007 fe7c 	bl	80181ec <create_topic>
 80104f4:	61f8      	str	r0, [r7, #28]
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d078      	beq.n	80105ec <rmw_create_subscription+0x1ac>
 80104fa:	f241 539c 	movw	r3, #5532	; 0x159c
 80104fe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010502:	2104      	movs	r1, #4
 8010504:	5ad0      	ldrh	r0, [r2, r3]
 8010506:	2506      	movs	r5, #6
 8010508:	1c46      	adds	r6, r0, #1
 801050a:	52d6      	strh	r6, [r2, r3]
 801050c:	f002 f92a 	bl	8012764 <uxr_object_id>
 8010510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010514:	6138      	str	r0, [r7, #16]
 8010516:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801051a:	9500      	str	r5, [sp, #0]
 801051c:	6811      	ldr	r1, [r2, #0]
 801051e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010528:	f001 ff32 	bl	8012390 <uxr_buffer_create_subscriber_bin>
 801052c:	4602      	mov	r2, r0
 801052e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010532:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010536:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801053a:	f000 fbed 	bl	8010d18 <run_xrce_session>
 801053e:	2800      	cmp	r0, #0
 8010540:	d050      	beq.n	80105e4 <rmw_create_subscription+0x1a4>
 8010542:	f241 539e 	movw	r3, #5534	; 0x159e
 8010546:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801054a:	4629      	mov	r1, r5
 801054c:	5ad0      	ldrh	r0, [r2, r3]
 801054e:	ae08      	add	r6, sp, #32
 8010550:	f100 0c01 	add.w	ip, r0, #1
 8010554:	f822 c003 	strh.w	ip, [r2, r3]
 8010558:	f002 f904 	bl	8012764 <uxr_object_id>
 801055c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	4641      	mov	r1, r8
 8010564:	6178      	str	r0, [r7, #20]
 8010566:	4630      	mov	r0, r6
 8010568:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801056c:	9305      	str	r3, [sp, #20]
 801056e:	f000 fbef 	bl	8010d50 <convert_qos_profile>
 8010572:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010576:	9b05      	ldr	r3, [sp, #20]
 8010578:	9001      	str	r0, [sp, #4]
 801057a:	9503      	str	r5, [sp, #12]
 801057c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801058c:	f8db 1000 	ldr.w	r1, [fp]
 8010590:	f001 ffaa 	bl	80124e8 <uxr_buffer_create_datareader_bin>
 8010594:	4602      	mov	r2, r0
 8010596:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801059a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801059e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80105a2:	f000 fbb9 	bl	8010d18 <run_xrce_session>
 80105a6:	b1e8      	cbz	r0, 80105e4 <rmw_create_subscription+0x1a4>
 80105a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105ac:	2200      	movs	r2, #0
 80105ae:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80105b2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80105b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80105ba:	2b02      	cmp	r3, #2
 80105bc:	bf0c      	ite	eq
 80105be:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80105c2:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80105c6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80105ca:	9307      	str	r3, [sp, #28]
 80105cc:	aa0a      	add	r2, sp, #40	; 0x28
 80105ce:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80105d2:	9200      	str	r2, [sp, #0]
 80105d4:	6819      	ldr	r1, [r3, #0]
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	9b07      	ldr	r3, [sp, #28]
 80105da:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105de:	f002 f8ef 	bl	80127c0 <uxr_buffer_request_data>
 80105e2:	e007      	b.n	80105f4 <rmw_create_subscription+0x1b4>
 80105e4:	4639      	mov	r1, r7
 80105e6:	4805      	ldr	r0, [pc, #20]	; (80105fc <rmw_create_subscription+0x1bc>)
 80105e8:	f007 fda2 	bl	8018130 <put_memory>
 80105ec:	4620      	mov	r0, r4
 80105ee:	f000 fa57 	bl	8010aa0 <rmw_uxrce_fini_subscription_memory>
 80105f2:	2400      	movs	r4, #0
 80105f4:	4620      	mov	r0, r4
 80105f6:	b00d      	add	sp, #52	; 0x34
 80105f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fc:	2000cdac 	.word	0x2000cdac
 8010600:	0801c49c 	.word	0x0801c49c
 8010604:	0801c22c 	.word	0x0801c22c

08010608 <rmw_subscription_get_actual_qos>:
 8010608:	2000      	movs	r0, #0
 801060a:	4770      	bx	lr

0801060c <rmw_destroy_subscription>:
 801060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060e:	b128      	cbz	r0, 801061c <rmw_destroy_subscription+0x10>
 8010610:	4604      	mov	r4, r0
 8010612:	6800      	ldr	r0, [r0, #0]
 8010614:	460d      	mov	r5, r1
 8010616:	f000 fc03 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 801061a:	b910      	cbnz	r0, 8010622 <rmw_destroy_subscription+0x16>
 801061c:	2401      	movs	r4, #1
 801061e:	4620      	mov	r0, r4
 8010620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010622:	6863      	ldr	r3, [r4, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d0f9      	beq.n	801061c <rmw_destroy_subscription+0x10>
 8010628:	2d00      	cmp	r5, #0
 801062a:	d0f7      	beq.n	801061c <rmw_destroy_subscription+0x10>
 801062c:	6828      	ldr	r0, [r5, #0]
 801062e:	f000 fbf7 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 8010632:	2800      	cmp	r0, #0
 8010634:	d0f2      	beq.n	801061c <rmw_destroy_subscription+0x10>
 8010636:	686c      	ldr	r4, [r5, #4]
 8010638:	2c00      	cmp	r4, #0
 801063a:	d0ef      	beq.n	801061c <rmw_destroy_subscription+0x10>
 801063c:	6a26      	ldr	r6, [r4, #32]
 801063e:	6962      	ldr	r2, [r4, #20]
 8010640:	6930      	ldr	r0, [r6, #16]
 8010642:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010646:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801064a:	6819      	ldr	r1, [r3, #0]
 801064c:	f002 f8f2 	bl	8012834 <uxr_buffer_cancel_data>
 8010650:	4602      	mov	r2, r0
 8010652:	6930      	ldr	r0, [r6, #16]
 8010654:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010658:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801065c:	f000 fb5c 	bl	8010d18 <run_xrce_session>
 8010660:	69e0      	ldr	r0, [r4, #28]
 8010662:	f007 fe11 	bl	8018288 <destroy_topic>
 8010666:	6a23      	ldr	r3, [r4, #32]
 8010668:	6962      	ldr	r2, [r4, #20]
 801066a:	6918      	ldr	r0, [r3, #16]
 801066c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010670:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010674:	6819      	ldr	r1, [r3, #0]
 8010676:	f001 fd9f 	bl	80121b8 <uxr_buffer_delete_entity>
 801067a:	6a23      	ldr	r3, [r4, #32]
 801067c:	6922      	ldr	r2, [r4, #16]
 801067e:	691b      	ldr	r3, [r3, #16]
 8010680:	4604      	mov	r4, r0
 8010682:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010686:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801068a:	6809      	ldr	r1, [r1, #0]
 801068c:	f001 fd94 	bl	80121b8 <uxr_buffer_delete_entity>
 8010690:	4607      	mov	r7, r0
 8010692:	6930      	ldr	r0, [r6, #16]
 8010694:	4622      	mov	r2, r4
 8010696:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801069a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801069e:	f000 fb3b 	bl	8010d18 <run_xrce_session>
 80106a2:	4604      	mov	r4, r0
 80106a4:	6930      	ldr	r0, [r6, #16]
 80106a6:	463a      	mov	r2, r7
 80106a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80106ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80106b0:	f000 fb32 	bl	8010d18 <run_xrce_session>
 80106b4:	b12c      	cbz	r4, 80106c2 <rmw_destroy_subscription+0xb6>
 80106b6:	b120      	cbz	r0, 80106c2 <rmw_destroy_subscription+0xb6>
 80106b8:	2400      	movs	r4, #0
 80106ba:	4628      	mov	r0, r5
 80106bc:	f000 f9f0 	bl	8010aa0 <rmw_uxrce_fini_subscription_memory>
 80106c0:	e7ad      	b.n	801061e <rmw_destroy_subscription+0x12>
 80106c2:	2402      	movs	r4, #2
 80106c4:	e7f9      	b.n	80106ba <rmw_destroy_subscription+0xae>
 80106c6:	bf00      	nop

080106c8 <rmw_take_with_info>:
 80106c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ca:	4604      	mov	r4, r0
 80106cc:	6800      	ldr	r0, [r0, #0]
 80106ce:	460f      	mov	r7, r1
 80106d0:	4615      	mov	r5, r2
 80106d2:	b089      	sub	sp, #36	; 0x24
 80106d4:	b128      	cbz	r0, 80106e2 <rmw_take_with_info+0x1a>
 80106d6:	4b24      	ldr	r3, [pc, #144]	; (8010768 <rmw_take_with_info+0xa0>)
 80106d8:	6819      	ldr	r1, [r3, #0]
 80106da:	f7ef fda9 	bl	8000230 <strcmp>
 80106de:	2800      	cmp	r0, #0
 80106e0:	d13e      	bne.n	8010760 <rmw_take_with_info+0x98>
 80106e2:	b305      	cbz	r5, 8010726 <rmw_take_with_info+0x5e>
 80106e4:	2300      	movs	r3, #0
 80106e6:	6864      	ldr	r4, [r4, #4]
 80106e8:	702b      	strb	r3, [r5, #0]
 80106ea:	f000 fa9d 	bl	8010c28 <rmw_uxrce_clean_expired_static_input_buffer>
 80106ee:	4620      	mov	r0, r4
 80106f0:	f000 fa70 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80106f4:	4606      	mov	r6, r0
 80106f6:	b1f0      	cbz	r0, 8010736 <rmw_take_with_info+0x6e>
 80106f8:	68c1      	ldr	r1, [r0, #12]
 80106fa:	4668      	mov	r0, sp
 80106fc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8010700:	3110      	adds	r1, #16
 8010702:	f7fd fc75 	bl	800dff0 <ucdr_init_buffer>
 8010706:	69a3      	ldr	r3, [r4, #24]
 8010708:	4639      	mov	r1, r7
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	4668      	mov	r0, sp
 801070e:	4798      	blx	r3
 8010710:	4604      	mov	r4, r0
 8010712:	4631      	mov	r1, r6
 8010714:	4815      	ldr	r0, [pc, #84]	; (801076c <rmw_take_with_info+0xa4>)
 8010716:	f007 fd0b 	bl	8018130 <put_memory>
 801071a:	702c      	strb	r4, [r5, #0]
 801071c:	f084 0001 	eor.w	r0, r4, #1
 8010720:	b2c0      	uxtb	r0, r0
 8010722:	b009      	add	sp, #36	; 0x24
 8010724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010726:	6864      	ldr	r4, [r4, #4]
 8010728:	f000 fa7e 	bl	8010c28 <rmw_uxrce_clean_expired_static_input_buffer>
 801072c:	4620      	mov	r0, r4
 801072e:	f000 fa51 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8010732:	4605      	mov	r5, r0
 8010734:	b910      	cbnz	r0, 801073c <rmw_take_with_info+0x74>
 8010736:	2001      	movs	r0, #1
 8010738:	b009      	add	sp, #36	; 0x24
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073c:	68e9      	ldr	r1, [r5, #12]
 801073e:	4668      	mov	r0, sp
 8010740:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8010744:	3110      	adds	r1, #16
 8010746:	f7fd fc53 	bl	800dff0 <ucdr_init_buffer>
 801074a:	69a3      	ldr	r3, [r4, #24]
 801074c:	4639      	mov	r1, r7
 801074e:	4668      	mov	r0, sp
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	4798      	blx	r3
 8010754:	4629      	mov	r1, r5
 8010756:	4604      	mov	r4, r0
 8010758:	4804      	ldr	r0, [pc, #16]	; (801076c <rmw_take_with_info+0xa4>)
 801075a:	f007 fce9 	bl	8018130 <put_memory>
 801075e:	e7dd      	b.n	801071c <rmw_take_with_info+0x54>
 8010760:	200c      	movs	r0, #12
 8010762:	b009      	add	sp, #36	; 0x24
 8010764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010766:	bf00      	nop
 8010768:	0801cc5c 	.word	0x0801cc5c
 801076c:	20009b40 	.word	0x20009b40

08010770 <rmw_uxrce_transport_init>:
 8010770:	b508      	push	{r3, lr}
 8010772:	b108      	cbz	r0, 8010778 <rmw_uxrce_transport_init+0x8>
 8010774:	f100 0210 	add.w	r2, r0, #16
 8010778:	b139      	cbz	r1, 801078a <rmw_uxrce_transport_init+0x1a>
 801077a:	4610      	mov	r0, r2
 801077c:	6949      	ldr	r1, [r1, #20]
 801077e:	f001 ffb9 	bl	80126f4 <uxr_init_custom_transport>
 8010782:	f080 0001 	eor.w	r0, r0, #1
 8010786:	b2c0      	uxtb	r0, r0
 8010788:	bd08      	pop	{r3, pc}
 801078a:	4b04      	ldr	r3, [pc, #16]	; (801079c <rmw_uxrce_transport_init+0x2c>)
 801078c:	4610      	mov	r0, r2
 801078e:	6859      	ldr	r1, [r3, #4]
 8010790:	f001 ffb0 	bl	80126f4 <uxr_init_custom_transport>
 8010794:	f080 0001 	eor.w	r0, r0, #1
 8010798:	b2c0      	uxtb	r0, r0
 801079a:	bd08      	pop	{r3, pc}
 801079c:	20009b20 	.word	0x20009b20

080107a0 <rmw_uros_epoch_nanos>:
 80107a0:	4b05      	ldr	r3, [pc, #20]	; (80107b8 <rmw_uros_epoch_nanos+0x18>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	b123      	cbz	r3, 80107b0 <rmw_uros_epoch_nanos+0x10>
 80107a6:	68d8      	ldr	r0, [r3, #12]
 80107a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107ac:	f002 be14 	b.w	80133d8 <uxr_epoch_nanos>
 80107b0:	2000      	movs	r0, #0
 80107b2:	2100      	movs	r1, #0
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	2000cce8 	.word	0x2000cce8

080107bc <rmw_uros_sync_session>:
 80107bc:	b508      	push	{r3, lr}
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <rmw_uros_sync_session+0x20>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	b14b      	cbz	r3, 80107d8 <rmw_uros_sync_session+0x1c>
 80107c4:	4601      	mov	r1, r0
 80107c6:	68d8      	ldr	r0, [r3, #12]
 80107c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107cc:	f002 fdb0 	bl	8013330 <uxr_sync_session>
 80107d0:	f080 0001 	eor.w	r0, r0, #1
 80107d4:	b2c0      	uxtb	r0, r0
 80107d6:	bd08      	pop	{r3, pc}
 80107d8:	2001      	movs	r0, #1
 80107da:	bd08      	pop	{r3, pc}
 80107dc:	2000cce8 	.word	0x2000cce8

080107e0 <rmw_uxrce_init_service_memory>:
 80107e0:	b1ba      	cbz	r2, 8010812 <rmw_uxrce_init_service_memory+0x32>
 80107e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e4:	7a03      	ldrb	r3, [r0, #8]
 80107e6:	4605      	mov	r5, r0
 80107e8:	b993      	cbnz	r3, 8010810 <rmw_uxrce_init_service_memory+0x30>
 80107ea:	460c      	mov	r4, r1
 80107ec:	21c8      	movs	r1, #200	; 0xc8
 80107ee:	2001      	movs	r0, #1
 80107f0:	461f      	mov	r7, r3
 80107f2:	fb01 4602 	mla	r6, r1, r2, r4
 80107f6:	e9c5 3300 	strd	r3, r3, [r5]
 80107fa:	60e9      	str	r1, [r5, #12]
 80107fc:	7228      	strb	r0, [r5, #8]
 80107fe:	4621      	mov	r1, r4
 8010800:	4628      	mov	r0, r5
 8010802:	f007 fc95 	bl	8018130 <put_memory>
 8010806:	60e4      	str	r4, [r4, #12]
 8010808:	f804 7bc8 	strb.w	r7, [r4], #200
 801080c:	42a6      	cmp	r6, r4
 801080e:	d1f6      	bne.n	80107fe <rmw_uxrce_init_service_memory+0x1e>
 8010810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010812:	4770      	bx	lr

08010814 <rmw_uxrce_init_client_memory>:
 8010814:	b1ba      	cbz	r2, 8010846 <rmw_uxrce_init_client_memory+0x32>
 8010816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010818:	7a03      	ldrb	r3, [r0, #8]
 801081a:	4605      	mov	r5, r0
 801081c:	b993      	cbnz	r3, 8010844 <rmw_uxrce_init_client_memory+0x30>
 801081e:	460c      	mov	r4, r1
 8010820:	21c8      	movs	r1, #200	; 0xc8
 8010822:	2001      	movs	r0, #1
 8010824:	461f      	mov	r7, r3
 8010826:	fb01 4602 	mla	r6, r1, r2, r4
 801082a:	e9c5 3300 	strd	r3, r3, [r5]
 801082e:	60e9      	str	r1, [r5, #12]
 8010830:	7228      	strb	r0, [r5, #8]
 8010832:	4621      	mov	r1, r4
 8010834:	4628      	mov	r0, r5
 8010836:	f007 fc7b 	bl	8018130 <put_memory>
 801083a:	60e4      	str	r4, [r4, #12]
 801083c:	f804 7bc8 	strb.w	r7, [r4], #200
 8010840:	42a6      	cmp	r6, r4
 8010842:	d1f6      	bne.n	8010832 <rmw_uxrce_init_client_memory+0x1e>
 8010844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010846:	4770      	bx	lr

08010848 <rmw_uxrce_init_publisher_memory>:
 8010848:	b1ba      	cbz	r2, 801087a <rmw_uxrce_init_publisher_memory+0x32>
 801084a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084c:	7a03      	ldrb	r3, [r0, #8]
 801084e:	4605      	mov	r5, r0
 8010850:	b993      	cbnz	r3, 8010878 <rmw_uxrce_init_publisher_memory+0x30>
 8010852:	460c      	mov	r4, r1
 8010854:	21d8      	movs	r1, #216	; 0xd8
 8010856:	2001      	movs	r0, #1
 8010858:	461f      	mov	r7, r3
 801085a:	fb01 4602 	mla	r6, r1, r2, r4
 801085e:	e9c5 3300 	strd	r3, r3, [r5]
 8010862:	60e9      	str	r1, [r5, #12]
 8010864:	7228      	strb	r0, [r5, #8]
 8010866:	4621      	mov	r1, r4
 8010868:	4628      	mov	r0, r5
 801086a:	f007 fc61 	bl	8018130 <put_memory>
 801086e:	60e4      	str	r4, [r4, #12]
 8010870:	f804 7bd8 	strb.w	r7, [r4], #216
 8010874:	42a6      	cmp	r6, r4
 8010876:	d1f6      	bne.n	8010866 <rmw_uxrce_init_publisher_memory+0x1e>
 8010878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801087a:	4770      	bx	lr

0801087c <rmw_uxrce_init_subscription_memory>:
 801087c:	b1ba      	cbz	r2, 80108ae <rmw_uxrce_init_subscription_memory+0x32>
 801087e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010880:	7a03      	ldrb	r3, [r0, #8]
 8010882:	4605      	mov	r5, r0
 8010884:	b993      	cbnz	r3, 80108ac <rmw_uxrce_init_subscription_memory+0x30>
 8010886:	460c      	mov	r4, r1
 8010888:	21d0      	movs	r1, #208	; 0xd0
 801088a:	2001      	movs	r0, #1
 801088c:	461f      	mov	r7, r3
 801088e:	fb01 4602 	mla	r6, r1, r2, r4
 8010892:	e9c5 3300 	strd	r3, r3, [r5]
 8010896:	60e9      	str	r1, [r5, #12]
 8010898:	7228      	strb	r0, [r5, #8]
 801089a:	4621      	mov	r1, r4
 801089c:	4628      	mov	r0, r5
 801089e:	f007 fc47 	bl	8018130 <put_memory>
 80108a2:	60e4      	str	r4, [r4, #12]
 80108a4:	f804 7bd0 	strb.w	r7, [r4], #208
 80108a8:	42a6      	cmp	r6, r4
 80108aa:	d1f6      	bne.n	801089a <rmw_uxrce_init_subscription_memory+0x1e>
 80108ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ae:	4770      	bx	lr

080108b0 <rmw_uxrce_init_node_memory>:
 80108b0:	b1ba      	cbz	r2, 80108e2 <rmw_uxrce_init_node_memory+0x32>
 80108b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b4:	7a03      	ldrb	r3, [r0, #8]
 80108b6:	4605      	mov	r5, r0
 80108b8:	b993      	cbnz	r3, 80108e0 <rmw_uxrce_init_node_memory+0x30>
 80108ba:	460c      	mov	r4, r1
 80108bc:	21a4      	movs	r1, #164	; 0xa4
 80108be:	2001      	movs	r0, #1
 80108c0:	461f      	mov	r7, r3
 80108c2:	fb01 4602 	mla	r6, r1, r2, r4
 80108c6:	e9c5 3300 	strd	r3, r3, [r5]
 80108ca:	60e9      	str	r1, [r5, #12]
 80108cc:	7228      	strb	r0, [r5, #8]
 80108ce:	4621      	mov	r1, r4
 80108d0:	4628      	mov	r0, r5
 80108d2:	f007 fc2d 	bl	8018130 <put_memory>
 80108d6:	60e4      	str	r4, [r4, #12]
 80108d8:	f804 7ba4 	strb.w	r7, [r4], #164
 80108dc:	42a6      	cmp	r6, r4
 80108de:	d1f6      	bne.n	80108ce <rmw_uxrce_init_node_memory+0x1e>
 80108e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108e2:	4770      	bx	lr

080108e4 <rmw_uxrce_init_session_memory>:
 80108e4:	b1e2      	cbz	r2, 8010920 <rmw_uxrce_init_session_memory+0x3c>
 80108e6:	7a03      	ldrb	r3, [r0, #8]
 80108e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ec:	4605      	mov	r5, r0
 80108ee:	b9ab      	cbnz	r3, 801091c <rmw_uxrce_init_session_memory+0x38>
 80108f0:	f241 50a8 	movw	r0, #5544	; 0x15a8
 80108f4:	460c      	mov	r4, r1
 80108f6:	2101      	movs	r1, #1
 80108f8:	4698      	mov	r8, r3
 80108fa:	4607      	mov	r7, r0
 80108fc:	fb00 4602 	mla	r6, r0, r2, r4
 8010900:	e9c5 3300 	strd	r3, r3, [r5]
 8010904:	60e8      	str	r0, [r5, #12]
 8010906:	7229      	strb	r1, [r5, #8]
 8010908:	4621      	mov	r1, r4
 801090a:	4628      	mov	r0, r5
 801090c:	f007 fc10 	bl	8018130 <put_memory>
 8010910:	60e4      	str	r4, [r4, #12]
 8010912:	f884 8000 	strb.w	r8, [r4]
 8010916:	443c      	add	r4, r7
 8010918:	42a6      	cmp	r6, r4
 801091a:	d1f5      	bne.n	8010908 <rmw_uxrce_init_session_memory+0x24>
 801091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop

08010924 <rmw_uxrce_init_topic_memory>:
 8010924:	b1ca      	cbz	r2, 801095a <rmw_uxrce_init_topic_memory+0x36>
 8010926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010928:	7a03      	ldrb	r3, [r0, #8]
 801092a:	4606      	mov	r6, r0
 801092c:	b9a3      	cbnz	r3, 8010958 <rmw_uxrce_init_topic_memory+0x34>
 801092e:	460c      	mov	r4, r1
 8010930:	2001      	movs	r0, #1
 8010932:	211c      	movs	r1, #28
 8010934:	461f      	mov	r7, r3
 8010936:	e9c6 3300 	strd	r3, r3, [r6]
 801093a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801093e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010942:	7230      	strb	r0, [r6, #8]
 8010944:	60f1      	str	r1, [r6, #12]
 8010946:	4621      	mov	r1, r4
 8010948:	4630      	mov	r0, r6
 801094a:	f007 fbf1 	bl	8018130 <put_memory>
 801094e:	60e4      	str	r4, [r4, #12]
 8010950:	f804 7b1c 	strb.w	r7, [r4], #28
 8010954:	42a5      	cmp	r5, r4
 8010956:	d1f6      	bne.n	8010946 <rmw_uxrce_init_topic_memory+0x22>
 8010958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801095a:	4770      	bx	lr

0801095c <rmw_uxrce_init_static_input_buffer_memory>:
 801095c:	b1da      	cbz	r2, 8010996 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 801095e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010960:	7a03      	ldrb	r3, [r0, #8]
 8010962:	4606      	mov	r6, r0
 8010964:	b9b3      	cbnz	r3, 8010994 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8010966:	460c      	mov	r4, r1
 8010968:	2001      	movs	r0, #1
 801096a:	f44f 6104 	mov.w	r1, #2112	; 0x840
 801096e:	461f      	mov	r7, r3
 8010970:	e9c6 3300 	strd	r3, r3, [r6]
 8010974:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8010978:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 801097c:	7230      	strb	r0, [r6, #8]
 801097e:	60f1      	str	r1, [r6, #12]
 8010980:	4621      	mov	r1, r4
 8010982:	4630      	mov	r0, r6
 8010984:	f007 fbd4 	bl	8018130 <put_memory>
 8010988:	60e4      	str	r4, [r4, #12]
 801098a:	7027      	strb	r7, [r4, #0]
 801098c:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010990:	42a5      	cmp	r5, r4
 8010992:	d1f5      	bne.n	8010980 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 8010994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010996:	4770      	bx	lr

08010998 <rmw_uxrce_init_init_options_impl_memory>:
 8010998:	b1ba      	cbz	r2, 80109ca <rmw_uxrce_init_init_options_impl_memory+0x32>
 801099a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099c:	7a03      	ldrb	r3, [r0, #8]
 801099e:	4605      	mov	r5, r0
 80109a0:	b993      	cbnz	r3, 80109c8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 80109a2:	460c      	mov	r4, r1
 80109a4:	212c      	movs	r1, #44	; 0x2c
 80109a6:	2001      	movs	r0, #1
 80109a8:	461f      	mov	r7, r3
 80109aa:	fb01 4602 	mla	r6, r1, r2, r4
 80109ae:	e9c5 3300 	strd	r3, r3, [r5]
 80109b2:	60e9      	str	r1, [r5, #12]
 80109b4:	7228      	strb	r0, [r5, #8]
 80109b6:	4621      	mov	r1, r4
 80109b8:	4628      	mov	r0, r5
 80109ba:	f007 fbb9 	bl	8018130 <put_memory>
 80109be:	60e4      	str	r4, [r4, #12]
 80109c0:	f804 7b2c 	strb.w	r7, [r4], #44
 80109c4:	42a6      	cmp	r6, r4
 80109c6:	d1f6      	bne.n	80109b6 <rmw_uxrce_init_init_options_impl_memory+0x1e>
 80109c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ca:	4770      	bx	lr

080109cc <rmw_uxrce_init_wait_set_memory>:
 80109cc:	b1ca      	cbz	r2, 8010a02 <rmw_uxrce_init_wait_set_memory+0x36>
 80109ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d0:	7a03      	ldrb	r3, [r0, #8]
 80109d2:	4606      	mov	r6, r0
 80109d4:	b9a3      	cbnz	r3, 8010a00 <rmw_uxrce_init_wait_set_memory+0x34>
 80109d6:	460c      	mov	r4, r1
 80109d8:	2001      	movs	r0, #1
 80109da:	211c      	movs	r1, #28
 80109dc:	461f      	mov	r7, r3
 80109de:	e9c6 3300 	strd	r3, r3, [r6]
 80109e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80109e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109ea:	7230      	strb	r0, [r6, #8]
 80109ec:	60f1      	str	r1, [r6, #12]
 80109ee:	4621      	mov	r1, r4
 80109f0:	4630      	mov	r0, r6
 80109f2:	f007 fb9d 	bl	8018130 <put_memory>
 80109f6:	60e4      	str	r4, [r4, #12]
 80109f8:	f804 7b1c 	strb.w	r7, [r4], #28
 80109fc:	42a5      	cmp	r5, r4
 80109fe:	d1f6      	bne.n	80109ee <rmw_uxrce_init_wait_set_memory+0x22>
 8010a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a02:	4770      	bx	lr

08010a04 <rmw_uxrce_init_guard_condition_memory>:
 8010a04:	b1ba      	cbz	r2, 8010a36 <rmw_uxrce_init_guard_condition_memory+0x32>
 8010a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a08:	7a03      	ldrb	r3, [r0, #8]
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	b993      	cbnz	r3, 8010a34 <rmw_uxrce_init_guard_condition_memory+0x30>
 8010a0e:	460c      	mov	r4, r1
 8010a10:	2001      	movs	r0, #1
 8010a12:	2120      	movs	r1, #32
 8010a14:	461f      	mov	r7, r3
 8010a16:	e9c5 3300 	strd	r3, r3, [r5]
 8010a1a:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8010a1e:	7228      	strb	r0, [r5, #8]
 8010a20:	60e9      	str	r1, [r5, #12]
 8010a22:	4621      	mov	r1, r4
 8010a24:	4628      	mov	r0, r5
 8010a26:	f007 fb83 	bl	8018130 <put_memory>
 8010a2a:	60e4      	str	r4, [r4, #12]
 8010a2c:	f804 7b20 	strb.w	r7, [r4], #32
 8010a30:	42a6      	cmp	r6, r4
 8010a32:	d1f6      	bne.n	8010a22 <rmw_uxrce_init_guard_condition_memory+0x1e>
 8010a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a36:	4770      	bx	lr

08010a38 <rmw_uxrce_fini_session_memory>:
 8010a38:	4601      	mov	r1, r0
 8010a3a:	4801      	ldr	r0, [pc, #4]	; (8010a40 <rmw_uxrce_fini_session_memory+0x8>)
 8010a3c:	f007 bb78 	b.w	8018130 <put_memory>
 8010a40:	2000cce8 	.word	0x2000cce8

08010a44 <rmw_uxrce_fini_node_memory>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	4604      	mov	r4, r0
 8010a48:	6800      	ldr	r0, [r0, #0]
 8010a4a:	b128      	cbz	r0, 8010a58 <rmw_uxrce_fini_node_memory+0x14>
 8010a4c:	4b07      	ldr	r3, [pc, #28]	; (8010a6c <rmw_uxrce_fini_node_memory+0x28>)
 8010a4e:	6819      	ldr	r1, [r3, #0]
 8010a50:	f7ef fbee 	bl	8000230 <strcmp>
 8010a54:	b940      	cbnz	r0, 8010a68 <rmw_uxrce_fini_node_memory+0x24>
 8010a56:	6020      	str	r0, [r4, #0]
 8010a58:	6861      	ldr	r1, [r4, #4]
 8010a5a:	b129      	cbz	r1, 8010a68 <rmw_uxrce_fini_node_memory+0x24>
 8010a5c:	2500      	movs	r5, #0
 8010a5e:	4804      	ldr	r0, [pc, #16]	; (8010a70 <rmw_uxrce_fini_node_memory+0x2c>)
 8010a60:	610d      	str	r5, [r1, #16]
 8010a62:	f007 fb65 	bl	8018130 <put_memory>
 8010a66:	6065      	str	r5, [r4, #4]
 8010a68:	bd38      	pop	{r3, r4, r5, pc}
 8010a6a:	bf00      	nop
 8010a6c:	0801cc5c 	.word	0x0801cc5c
 8010a70:	2000cb14 	.word	0x2000cb14

08010a74 <rmw_uxrce_fini_publisher_memory>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	4604      	mov	r4, r0
 8010a78:	6800      	ldr	r0, [r0, #0]
 8010a7a:	b128      	cbz	r0, 8010a88 <rmw_uxrce_fini_publisher_memory+0x14>
 8010a7c:	4b06      	ldr	r3, [pc, #24]	; (8010a98 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010a7e:	6819      	ldr	r1, [r3, #0]
 8010a80:	f7ef fbd6 	bl	8000230 <strcmp>
 8010a84:	b938      	cbnz	r0, 8010a96 <rmw_uxrce_fini_publisher_memory+0x22>
 8010a86:	6020      	str	r0, [r4, #0]
 8010a88:	6861      	ldr	r1, [r4, #4]
 8010a8a:	b121      	cbz	r1, 8010a96 <rmw_uxrce_fini_publisher_memory+0x22>
 8010a8c:	4803      	ldr	r0, [pc, #12]	; (8010a9c <rmw_uxrce_fini_publisher_memory+0x28>)
 8010a8e:	f007 fb4f 	bl	8018130 <put_memory>
 8010a92:	2300      	movs	r3, #0
 8010a94:	6063      	str	r3, [r4, #4]
 8010a96:	bd10      	pop	{r4, pc}
 8010a98:	0801cc5c 	.word	0x0801cc5c
 8010a9c:	20009b50 	.word	0x20009b50

08010aa0 <rmw_uxrce_fini_subscription_memory>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	6800      	ldr	r0, [r0, #0]
 8010aa6:	b128      	cbz	r0, 8010ab4 <rmw_uxrce_fini_subscription_memory+0x14>
 8010aa8:	4b06      	ldr	r3, [pc, #24]	; (8010ac4 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010aaa:	6819      	ldr	r1, [r3, #0]
 8010aac:	f7ef fbc0 	bl	8000230 <strcmp>
 8010ab0:	b938      	cbnz	r0, 8010ac2 <rmw_uxrce_fini_subscription_memory+0x22>
 8010ab2:	6020      	str	r0, [r4, #0]
 8010ab4:	6861      	ldr	r1, [r4, #4]
 8010ab6:	b121      	cbz	r1, 8010ac2 <rmw_uxrce_fini_subscription_memory+0x22>
 8010ab8:	4803      	ldr	r0, [pc, #12]	; (8010ac8 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010aba:	f007 fb39 	bl	8018130 <put_memory>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	6063      	str	r3, [r4, #4]
 8010ac2:	bd10      	pop	{r4, pc}
 8010ac4:	0801cc5c 	.word	0x0801cc5c
 8010ac8:	2000cdac 	.word	0x2000cdac

08010acc <rmw_uxrce_fini_service_memory>:
 8010acc:	b510      	push	{r4, lr}
 8010ace:	4604      	mov	r4, r0
 8010ad0:	6800      	ldr	r0, [r0, #0]
 8010ad2:	b128      	cbz	r0, 8010ae0 <rmw_uxrce_fini_service_memory+0x14>
 8010ad4:	4b06      	ldr	r3, [pc, #24]	; (8010af0 <rmw_uxrce_fini_service_memory+0x24>)
 8010ad6:	6819      	ldr	r1, [r3, #0]
 8010ad8:	f7ef fbaa 	bl	8000230 <strcmp>
 8010adc:	b938      	cbnz	r0, 8010aee <rmw_uxrce_fini_service_memory+0x22>
 8010ade:	6020      	str	r0, [r4, #0]
 8010ae0:	6861      	ldr	r1, [r4, #4]
 8010ae2:	b121      	cbz	r1, 8010aee <rmw_uxrce_fini_service_memory+0x22>
 8010ae4:	4803      	ldr	r0, [pc, #12]	; (8010af4 <rmw_uxrce_fini_service_memory+0x28>)
 8010ae6:	f007 fb23 	bl	8018130 <put_memory>
 8010aea:	2300      	movs	r3, #0
 8010aec:	6063      	str	r3, [r4, #4]
 8010aee:	bd10      	pop	{r4, pc}
 8010af0:	0801cc5c 	.word	0x0801cc5c
 8010af4:	2000cd9c 	.word	0x2000cd9c

08010af8 <rmw_uxrce_fini_client_memory>:
 8010af8:	b510      	push	{r4, lr}
 8010afa:	4604      	mov	r4, r0
 8010afc:	6800      	ldr	r0, [r0, #0]
 8010afe:	b128      	cbz	r0, 8010b0c <rmw_uxrce_fini_client_memory+0x14>
 8010b00:	4b06      	ldr	r3, [pc, #24]	; (8010b1c <rmw_uxrce_fini_client_memory+0x24>)
 8010b02:	6819      	ldr	r1, [r3, #0]
 8010b04:	f7ef fb94 	bl	8000230 <strcmp>
 8010b08:	b938      	cbnz	r0, 8010b1a <rmw_uxrce_fini_client_memory+0x22>
 8010b0a:	6020      	str	r0, [r4, #0]
 8010b0c:	6861      	ldr	r1, [r4, #4]
 8010b0e:	b121      	cbz	r1, 8010b1a <rmw_uxrce_fini_client_memory+0x22>
 8010b10:	4803      	ldr	r0, [pc, #12]	; (8010b20 <rmw_uxrce_fini_client_memory+0x28>)
 8010b12:	f007 fb0d 	bl	8018130 <put_memory>
 8010b16:	2300      	movs	r3, #0
 8010b18:	6063      	str	r3, [r4, #4]
 8010b1a:	bd10      	pop	{r4, pc}
 8010b1c:	0801cc5c 	.word	0x0801cc5c
 8010b20:	2000a3d0 	.word	0x2000a3d0

08010b24 <rmw_uxrce_fini_topic_memory>:
 8010b24:	b510      	push	{r4, lr}
 8010b26:	4604      	mov	r4, r0
 8010b28:	4803      	ldr	r0, [pc, #12]	; (8010b38 <rmw_uxrce_fini_topic_memory+0x14>)
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	f007 fb00 	bl	8018130 <put_memory>
 8010b30:	2300      	movs	r3, #0
 8010b32:	61a3      	str	r3, [r4, #24]
 8010b34:	bd10      	pop	{r4, pc}
 8010b36:	bf00      	nop
 8010b38:	2000ccd8 	.word	0x2000ccd8

08010b3c <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010b3c:	b082      	sub	sp, #8
 8010b3e:	b4f0      	push	{r4, r5, r6, r7}
 8010b40:	4923      	ldr	r1, [pc, #140]	; (8010bd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010b42:	ac04      	add	r4, sp, #16
 8010b44:	e884 000c 	stmia.w	r4, {r2, r3}
 8010b48:	680d      	ldr	r5, [r1, #0]
 8010b4a:	9c05      	ldr	r4, [sp, #20]
 8010b4c:	4601      	mov	r1, r0
 8010b4e:	2d00      	cmp	r5, #0
 8010b50:	d03c      	beq.n	8010bcc <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010b52:	462b      	mov	r3, r5
 8010b54:	2000      	movs	r0, #0
 8010b56:	68da      	ldr	r2, [r3, #12]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010b5e:	4291      	cmp	r1, r2
 8010b60:	bf08      	it	eq
 8010b62:	3001      	addeq	r0, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1f6      	bne.n	8010b56 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 8010b68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	d025      	beq.n	8010bbc <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8010b70:	d905      	bls.n	8010b7e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010b72:	2b03      	cmp	r3, #3
 8010b74:	d003      	beq.n	8010b7e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010b76:	2000      	movs	r0, #0
 8010b78:	bcf0      	pop	{r4, r5, r6, r7}
 8010b7a:	b002      	add	sp, #8
 8010b7c:	4770      	bx	lr
 8010b7e:	b304      	cbz	r4, 8010bc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010b80:	4284      	cmp	r4, r0
 8010b82:	d81e      	bhi.n	8010bc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	d0f6      	beq.n	8010b76 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010b88:	2000      	movs	r0, #0
 8010b8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010b8e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010b92:	e002      	b.n	8010b9a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8010b94:	68ad      	ldr	r5, [r5, #8]
 8010b96:	2d00      	cmp	r5, #0
 8010b98:	d0ee      	beq.n	8010b78 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 8010b9a:	68eb      	ldr	r3, [r5, #12]
 8010b9c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010ba0:	4291      	cmp	r1, r2
 8010ba2:	d1f7      	bne.n	8010b94 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010ba4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	42b2      	cmp	r2, r6
 8010bae:	eb73 0407 	sbcs.w	r4, r3, r7
 8010bb2:	daef      	bge.n	8010b94 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010bb4:	4616      	mov	r6, r2
 8010bb6:	461f      	mov	r7, r3
 8010bb8:	4628      	mov	r0, r5
 8010bba:	e7eb      	b.n	8010b94 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010bbc:	b10c      	cbz	r4, 8010bc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010bbe:	4284      	cmp	r4, r0
 8010bc0:	d9d9      	bls.n	8010b76 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010bc2:	bcf0      	pop	{r4, r5, r6, r7}
 8010bc4:	4802      	ldr	r0, [pc, #8]	; (8010bd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010bc6:	b002      	add	sp, #8
 8010bc8:	f007 baa2 	b.w	8018110 <get_memory>
 8010bcc:	4628      	mov	r0, r5
 8010bce:	e7cb      	b.n	8010b68 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 8010bd0:	20009b40 	.word	0x20009b40

08010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010bd4:	4b12      	ldr	r3, [pc, #72]	; (8010c20 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	b303      	cbz	r3, 8010c1c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 8010bda:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 8010bde:	4604      	mov	r4, r0
 8010be0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010be4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010be8:	2000      	movs	r0, #0
 8010bea:	e001      	b.n	8010bf0 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	b193      	cbz	r3, 8010c16 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010bf0:	68da      	ldr	r2, [r3, #12]
 8010bf2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8010bf6:	428c      	cmp	r4, r1
 8010bf8:	d1f8      	bne.n	8010bec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010bfa:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010bfe:	e9d2 8900 	ldrd	r8, r9, [r2]
 8010c02:	45b0      	cmp	r8, r6
 8010c04:	eb79 0207 	sbcs.w	r2, r9, r7
 8010c08:	daf0      	bge.n	8010bec <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	689b      	ldr	r3, [r3, #8]
 8010c0e:	4646      	mov	r6, r8
 8010c10:	464f      	mov	r7, r9
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1ec      	bne.n	8010bf0 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 8010c16:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 8010c1a:	4770      	bx	lr
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	4770      	bx	lr
 8010c20:	20009b40 	.word	0x20009b40
 8010c24:	00000000 	.word	0x00000000

08010c28 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c2c:	4e38      	ldr	r6, [pc, #224]	; (8010d10 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 8010c2e:	b083      	sub	sp, #12
 8010c30:	f8d6 8000 	ldr.w	r8, [r6]
 8010c34:	f7ff fdb4 	bl	80107a0 <rmw_uros_epoch_nanos>
 8010c38:	f1b8 0f00 	cmp.w	r8, #0
 8010c3c:	d05f      	beq.n	8010cfe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010c3e:	46b1      	mov	r9, r6
 8010c40:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010c44:	4682      	mov	sl, r0
 8010c46:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010c4a:	468b      	mov	fp, r1
 8010c4c:	2b04      	cmp	r3, #4
 8010c4e:	d02d      	beq.n	8010cac <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010c50:	2b05      	cmp	r3, #5
 8010c52:	d041      	beq.n	8010cd8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010c54:	2b03      	cmp	r3, #3
 8010c56:	d029      	beq.n	8010cac <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010c58:	2200      	movs	r2, #0
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2001      	movs	r0, #1
 8010c5e:	2100      	movs	r1, #0
 8010c60:	e9cd 2300 	strd	r2, r3, [sp]
 8010c64:	9b00      	ldr	r3, [sp, #0]
 8010c66:	f606 0618 	addw	r6, r6, #2072	; 0x818
 8010c6a:	18c2      	adds	r2, r0, r3
 8010c6c:	9b01      	ldr	r3, [sp, #4]
 8010c6e:	cec0      	ldmia	r6, {r6, r7}
 8010c70:	eb41 0303 	adc.w	r3, r1, r3
 8010c74:	1994      	adds	r4, r2, r6
 8010c76:	eb43 0507 	adc.w	r5, r3, r7
 8010c7a:	4554      	cmp	r4, sl
 8010c7c:	eb75 020b 	sbcs.w	r2, r5, fp
 8010c80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c84:	db03      	blt.n	8010c8e <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 8010c86:	45b2      	cmp	sl, r6
 8010c88:	eb7b 0207 	sbcs.w	r2, fp, r7
 8010c8c:	da05      	bge.n	8010c9a <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 8010c8e:	4641      	mov	r1, r8
 8010c90:	4648      	mov	r0, r9
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	f007 fa4c 	bl	8018130 <put_memory>
 8010c98:	9b00      	ldr	r3, [sp, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d02f      	beq.n	8010cfe <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010c9e:	4698      	mov	r8, r3
 8010ca0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010ca4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010ca8:	2b04      	cmp	r3, #4
 8010caa:	d1d1      	bne.n	8010c50 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 8010cac:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010cb0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 8010cb4:	e9cd 2300 	strd	r2, r3, [sp]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 8010cbe:	d015      	beq.n	8010cec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010cc0:	9a01      	ldr	r2, [sp, #4]
 8010cc2:	4b14      	ldr	r3, [pc, #80]	; (8010d14 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 8010cc4:	fb03 f702 	mul.w	r7, r3, r2
 8010cc8:	9a00      	ldr	r2, [sp, #0]
 8010cca:	fba2 2303 	umull	r2, r3, r2, r3
 8010cce:	e9cd 2300 	strd	r2, r3, [sp]
 8010cd2:	443b      	add	r3, r7
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	e7c5      	b.n	8010c64 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010cd8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010cdc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010ce0:	e9cd 2300 	strd	r2, r3, [sp]
 8010ce4:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	d1e9      	bne.n	8010cc0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010cec:	ea50 0301 	orrs.w	r3, r0, r1
 8010cf0:	d1b8      	bne.n	8010c64 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010cf2:	a305      	add	r3, pc, #20	; (adr r3, 8010d08 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8010cfc:	e7b2      	b.n	8010c64 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010cfe:	b003      	add	sp, #12
 8010d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d04:	f3af 8000 	nop.w
 8010d08:	fc23ac00 	.word	0xfc23ac00
 8010d0c:	00000006 	.word	0x00000006
 8010d10:	20009b40 	.word	0x20009b40
 8010d14:	3b9aca00 	.word	0x3b9aca00

08010d18 <run_xrce_session>:
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	788c      	ldrb	r4, [r1, #2]
 8010d1c:	b086      	sub	sp, #24
 8010d1e:	2c01      	cmp	r4, #1
 8010d20:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010d24:	d00c      	beq.n	8010d40 <run_xrce_session+0x28>
 8010d26:	4619      	mov	r1, r3
 8010d28:	2301      	movs	r3, #1
 8010d2a:	f10d 020e 	add.w	r2, sp, #14
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d34:	f10d 0317 	add.w	r3, sp, #23
 8010d38:	f002 fc0e 	bl	8013558 <uxr_run_session_until_all_status>
 8010d3c:	b006      	add	sp, #24
 8010d3e:	bd10      	pop	{r4, pc}
 8010d40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d44:	f002 fb52 	bl	80133ec <uxr_flash_output_streams>
 8010d48:	4620      	mov	r0, r4
 8010d4a:	b006      	add	sp, #24
 8010d4c:	bd10      	pop	{r4, pc}
 8010d4e:	bf00      	nop

08010d50 <convert_qos_profile>:
 8010d50:	b430      	push	{r4, r5}
 8010d52:	7a0d      	ldrb	r5, [r1, #8]
 8010d54:	780c      	ldrb	r4, [r1, #0]
 8010d56:	7a4a      	ldrb	r2, [r1, #9]
 8010d58:	f1a5 0502 	sub.w	r5, r5, #2
 8010d5c:	f1a4 0402 	sub.w	r4, r4, #2
 8010d60:	fab5 f585 	clz	r5, r5
 8010d64:	fab4 f484 	clz	r4, r4
 8010d68:	2a02      	cmp	r2, #2
 8010d6a:	bf18      	it	ne
 8010d6c:	2200      	movne	r2, #0
 8010d6e:	8889      	ldrh	r1, [r1, #4]
 8010d70:	096d      	lsrs	r5, r5, #5
 8010d72:	0964      	lsrs	r4, r4, #5
 8010d74:	7045      	strb	r5, [r0, #1]
 8010d76:	7084      	strb	r4, [r0, #2]
 8010d78:	7002      	strb	r2, [r0, #0]
 8010d7a:	8081      	strh	r1, [r0, #4]
 8010d7c:	bc30      	pop	{r4, r5}
 8010d7e:	4770      	bx	lr

08010d80 <generate_type_name>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	4606      	mov	r6, r0
 8010d86:	b086      	sub	sp, #24
 8010d88:	6840      	ldr	r0, [r0, #4]
 8010d8a:	4688      	mov	r8, r1
 8010d8c:	4617      	mov	r7, r2
 8010d8e:	f7ef fa59 	bl	8000244 <strlen>
 8010d92:	6834      	ldr	r4, [r6, #0]
 8010d94:	4605      	mov	r5, r0
 8010d96:	b11c      	cbz	r4, 8010da0 <generate_type_name+0x20>
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f7ef fa53 	bl	8000244 <strlen>
 8010d9e:	4604      	mov	r4, r0
 8010da0:	2300      	movs	r3, #0
 8010da2:	f888 3000 	strb.w	r3, [r8]
 8010da6:	6833      	ldr	r3, [r6, #0]
 8010da8:	3508      	adds	r5, #8
 8010daa:	442c      	add	r4, r5
 8010dac:	b19b      	cbz	r3, 8010dd6 <generate_type_name+0x56>
 8010dae:	490c      	ldr	r1, [pc, #48]	; (8010de0 <generate_type_name+0x60>)
 8010db0:	4608      	mov	r0, r1
 8010db2:	6875      	ldr	r5, [r6, #4]
 8010db4:	4a0b      	ldr	r2, [pc, #44]	; (8010de4 <generate_type_name+0x64>)
 8010db6:	9504      	str	r5, [sp, #16]
 8010db8:	4d0b      	ldr	r5, [pc, #44]	; (8010de8 <generate_type_name+0x68>)
 8010dba:	9103      	str	r1, [sp, #12]
 8010dbc:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8010dc0:	9000      	str	r0, [sp, #0]
 8010dc2:	9205      	str	r2, [sp, #20]
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	4640      	mov	r0, r8
 8010dc8:	4a08      	ldr	r2, [pc, #32]	; (8010dec <generate_type_name+0x6c>)
 8010dca:	f008 ff91 	bl	8019cf0 <sniprintf>
 8010dce:	4620      	mov	r0, r4
 8010dd0:	b006      	add	sp, #24
 8010dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd6:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <generate_type_name+0x70>)
 8010dd8:	4901      	ldr	r1, [pc, #4]	; (8010de0 <generate_type_name+0x60>)
 8010dda:	4618      	mov	r0, r3
 8010ddc:	e7e9      	b.n	8010db2 <generate_type_name+0x32>
 8010dde:	bf00      	nop
 8010de0:	0801c48c 	.word	0x0801c48c
 8010de4:	0801c4a0 	.word	0x0801c4a0
 8010de8:	0801c4a4 	.word	0x0801c4a4
 8010dec:	0801c490 	.word	0x0801c490
 8010df0:	0801ca34 	.word	0x0801ca34

08010df4 <generate_topic_name>:
 8010df4:	b510      	push	{r4, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	9000      	str	r0, [sp, #0]
 8010dfa:	4614      	mov	r4, r2
 8010dfc:	4608      	mov	r0, r1
 8010dfe:	4b06      	ldr	r3, [pc, #24]	; (8010e18 <generate_topic_name+0x24>)
 8010e00:	4611      	mov	r1, r2
 8010e02:	4a06      	ldr	r2, [pc, #24]	; (8010e1c <generate_topic_name+0x28>)
 8010e04:	f008 ff74 	bl	8019cf0 <sniprintf>
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	da02      	bge.n	8010e12 <generate_topic_name+0x1e>
 8010e0c:	4284      	cmp	r4, r0
 8010e0e:	bfd8      	it	le
 8010e10:	2000      	movle	r0, #0
 8010e12:	b002      	add	sp, #8
 8010e14:	bd10      	pop	{r4, pc}
 8010e16:	bf00      	nop
 8010e18:	0801c4b0 	.word	0x0801c4b0
 8010e1c:	0801c4a8 	.word	0x0801c4a8

08010e20 <is_uxrce_rmw_identifier_valid>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	4604      	mov	r4, r0
 8010e24:	b140      	cbz	r0, 8010e38 <is_uxrce_rmw_identifier_valid+0x18>
 8010e26:	f007 f9db 	bl	80181e0 <rmw_get_implementation_identifier>
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f7ef f9ff 	bl	8000230 <strcmp>
 8010e32:	fab0 f080 	clz	r0, r0
 8010e36:	0940      	lsrs	r0, r0, #5
 8010e38:	bd10      	pop	{r4, pc}
 8010e3a:	bf00      	nop

08010e3c <get_message_typesupport_handle>:
 8010e3c:	6883      	ldr	r3, [r0, #8]
 8010e3e:	4718      	bx	r3

08010e40 <get_message_typesupport_handle_function>:
 8010e40:	b510      	push	{r4, lr}
 8010e42:	4604      	mov	r4, r0
 8010e44:	6800      	ldr	r0, [r0, #0]
 8010e46:	f7ef f9f3 	bl	8000230 <strcmp>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	bf0c      	ite	eq
 8010e4e:	4620      	moveq	r0, r4
 8010e50:	2000      	movne	r0, #0
 8010e52:	bd10      	pop	{r4, pc}

08010e54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8010e54:	f000 b8e8 	b.w	8011028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>

08010e58 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 8010e58:	f000 b9c4 	b.w	80111e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

08010e5c <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8010e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5e:	4607      	mov	r7, r0
 8010e60:	460e      	mov	r6, r1
 8010e62:	f000 fac7 	bl	80113f4 <get_serialized_size_std_msgs__msg__Header>
 8010e66:	1835      	adds	r5, r6, r0
 8010e68:	4629      	mov	r1, r5
 8010e6a:	f107 0018 	add.w	r0, r7, #24
 8010e6e:	f000 fd73 	bl	8011958 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8010e72:	4405      	add	r5, r0
 8010e74:	4628      	mov	r0, r5
 8010e76:	2108      	movs	r1, #8
 8010e78:	f7fd f8be 	bl	800dff8 <ucdr_alignment>
 8010e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e80:	4425      	add	r5, r4
 8010e82:	4629      	mov	r1, r5
 8010e84:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8010e88:	f7fb fbb2 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010e8c:	4405      	add	r5, r0
 8010e8e:	4628      	mov	r0, r5
 8010e90:	2108      	movs	r1, #8
 8010e92:	f7fd f8b1 	bl	800dff8 <ucdr_alignment>
 8010e96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e9a:	442c      	add	r4, r5
 8010e9c:	4621      	mov	r1, r4
 8010e9e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8010ea2:	f7fb fba5 	bl	800c5f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8010ea6:	4404      	add	r4, r0
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	2108      	movs	r1, #8
 8010eac:	f7fd f8a4 	bl	800dff8 <ucdr_alignment>
 8010eb0:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 8010eb4:	4430      	add	r0, r6
 8010eb6:	4420      	add	r0, r4
 8010eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eba:	bf00      	nop

08010ebc <get_serialized_size_sensor_msgs__msg__Imu>:
 8010ebc:	b108      	cbz	r0, 8010ec2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8010ebe:	f7ff bfcd 	b.w	8010e5c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010ec2:	4770      	bx	lr

08010ec4 <_Imu__get_serialized_size>:
 8010ec4:	b110      	cbz	r0, 8010ecc <_Imu__get_serialized_size+0x8>
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f7ff bfc8 	b.w	8010e5c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop

08010ed0 <_Imu__cdr_deserialize>:
 8010ed0:	b538      	push	{r3, r4, r5, lr}
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	b399      	cbz	r1, 8010f3e <_Imu__cdr_deserialize+0x6e>
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	f000 fb0e 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010edc:	6843      	ldr	r3, [r0, #4]
 8010ede:	4621      	mov	r1, r4
 8010ee0:	68db      	ldr	r3, [r3, #12]
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	4798      	blx	r3
 8010ee6:	f000 fded 	bl	8011ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010eea:	6843      	ldr	r3, [r0, #4]
 8010eec:	f104 0118 	add.w	r1, r4, #24
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	4798      	blx	r3
 8010ef6:	2209      	movs	r2, #9
 8010ef8:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010efc:	4628      	mov	r0, r5
 8010efe:	f001 f883 	bl	8012008 <ucdr_deserialize_array_double>
 8010f02:	f7fb fc01 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010f06:	6843      	ldr	r3, [r0, #4]
 8010f08:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	4628      	mov	r0, r5
 8010f10:	4798      	blx	r3
 8010f12:	2209      	movs	r2, #9
 8010f14:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f001 f875 	bl	8012008 <ucdr_deserialize_array_double>
 8010f1e:	f7fb fbf3 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010f22:	6843      	ldr	r3, [r0, #4]
 8010f24:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8010f28:	4628      	mov	r0, r5
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	4798      	blx	r3
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8010f34:	2209      	movs	r2, #9
 8010f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f3a:	f001 b865 	b.w	8012008 <ucdr_deserialize_array_double>
 8010f3e:	4608      	mov	r0, r1
 8010f40:	bd38      	pop	{r3, r4, r5, pc}
 8010f42:	bf00      	nop

08010f44 <_Imu__cdr_serialize>:
 8010f44:	2800      	cmp	r0, #0
 8010f46:	d035      	beq.n	8010fb4 <_Imu__cdr_serialize+0x70>
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	f000 fad3 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010f52:	6843      	ldr	r3, [r0, #4]
 8010f54:	4629      	mov	r1, r5
 8010f56:	689b      	ldr	r3, [r3, #8]
 8010f58:	4620      	mov	r0, r4
 8010f5a:	4798      	blx	r3
 8010f5c:	f000 fdb2 	bl	8011ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8010f60:	6843      	ldr	r3, [r0, #4]
 8010f62:	4629      	mov	r1, r5
 8010f64:	689b      	ldr	r3, [r3, #8]
 8010f66:	f104 0018 	add.w	r0, r4, #24
 8010f6a:	4798      	blx	r3
 8010f6c:	2209      	movs	r2, #9
 8010f6e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010f72:	4628      	mov	r0, r5
 8010f74:	f000 fff2 	bl	8011f5c <ucdr_serialize_array_double>
 8010f78:	f7fb fbc6 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010f7c:	6843      	ldr	r3, [r0, #4]
 8010f7e:	4629      	mov	r1, r5
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8010f86:	4798      	blx	r3
 8010f88:	2209      	movs	r2, #9
 8010f8a:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f000 ffe4 	bl	8011f5c <ucdr_serialize_array_double>
 8010f94:	f7fb fbb8 	bl	800c708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8010f98:	6843      	ldr	r3, [r0, #4]
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8010fa2:	4798      	blx	r3
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8010faa:	2209      	movs	r2, #9
 8010fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fb0:	f000 bfd4 	b.w	8011f5c <ucdr_serialize_array_double>
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop

08010fb8 <max_serialized_size_sensor_msgs__msg__Imu>:
 8010fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fba:	2301      	movs	r3, #1
 8010fbc:	7003      	strb	r3, [r0, #0]
 8010fbe:	4607      	mov	r7, r0
 8010fc0:	460e      	mov	r6, r1
 8010fc2:	f000 fa8f 	bl	80114e4 <max_serialized_size_std_msgs__msg__Header>
 8010fc6:	1835      	adds	r5, r6, r0
 8010fc8:	4629      	mov	r1, r5
 8010fca:	4638      	mov	r0, r7
 8010fcc:	f000 fd56 	bl	8011a7c <max_serialized_size_geometry_msgs__msg__Quaternion>
 8010fd0:	4405      	add	r5, r0
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	2108      	movs	r1, #8
 8010fd6:	f7fd f80f 	bl	800dff8 <ucdr_alignment>
 8010fda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fde:	4425      	add	r5, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	f7fb fb74 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8010fe8:	4405      	add	r5, r0
 8010fea:	4628      	mov	r0, r5
 8010fec:	2108      	movs	r1, #8
 8010fee:	f7fd f803 	bl	800dff8 <ucdr_alignment>
 8010ff2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ff6:	442c      	add	r4, r5
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	f7fb fb68 	bl	800c6d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011000:	4404      	add	r4, r0
 8011002:	4620      	mov	r0, r4
 8011004:	2108      	movs	r1, #8
 8011006:	f7fc fff7 	bl	800dff8 <ucdr_alignment>
 801100a:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 801100e:	4430      	add	r0, r6
 8011010:	4420      	add	r0, r4
 8011012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011014 <_Imu__max_serialized_size>:
 8011014:	b500      	push	{lr}
 8011016:	b083      	sub	sp, #12
 8011018:	2100      	movs	r1, #0
 801101a:	f10d 0007 	add.w	r0, sp, #7
 801101e:	f7ff ffcb 	bl	8010fb8 <max_serialized_size_sensor_msgs__msg__Imu>
 8011022:	b003      	add	sp, #12
 8011024:	f85d fb04 	ldr.w	pc, [sp], #4

08011028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011028:	4800      	ldr	r0, [pc, #0]	; (801102c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 801102a:	4770      	bx	lr
 801102c:	200000a4 	.word	0x200000a4

08011030 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>:
 8011030:	b570      	push	{r4, r5, r6, lr}
 8011032:	460c      	mov	r4, r1
 8011034:	4606      	mov	r6, r0
 8011036:	f000 f9dd 	bl	80113f4 <get_serialized_size_std_msgs__msg__Header>
 801103a:	1825      	adds	r5, r4, r0
 801103c:	4629      	mov	r1, r5
 801103e:	f106 0014 	add.w	r0, r6, #20
 8011042:	f000 f8d3 	bl	80111ec <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 8011046:	4405      	add	r5, r0
 8011048:	4628      	mov	r0, r5
 801104a:	2108      	movs	r1, #8
 801104c:	f7fc ffd4 	bl	800dff8 <ucdr_alignment>
 8011050:	f100 0608 	add.w	r6, r0, #8
 8011054:	4435      	add	r5, r6
 8011056:	4628      	mov	r0, r5
 8011058:	2108      	movs	r1, #8
 801105a:	f7fc ffcd 	bl	800dff8 <ucdr_alignment>
 801105e:	f100 0608 	add.w	r6, r0, #8
 8011062:	442e      	add	r6, r5
 8011064:	4630      	mov	r0, r6
 8011066:	2108      	movs	r1, #8
 8011068:	f7fc ffc6 	bl	800dff8 <ucdr_alignment>
 801106c:	f100 0508 	add.w	r5, r0, #8
 8011070:	442e      	add	r6, r5
 8011072:	4630      	mov	r0, r6
 8011074:	2108      	movs	r1, #8
 8011076:	f7fc ffbf 	bl	800dff8 <ucdr_alignment>
 801107a:	f100 0548 	add.w	r5, r0, #72	; 0x48
 801107e:	4435      	add	r5, r6
 8011080:	4628      	mov	r0, r5
 8011082:	2101      	movs	r1, #1
 8011084:	f7fc ffb8 	bl	800dff8 <ucdr_alignment>
 8011088:	f1c4 0401 	rsb	r4, r4, #1
 801108c:	4420      	add	r0, r4
 801108e:	4428      	add	r0, r5
 8011090:	bd70      	pop	{r4, r5, r6, pc}
 8011092:	bf00      	nop

08011094 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 8011094:	b108      	cbz	r0, 801109a <get_serialized_size_sensor_msgs__msg__NavSatFix+0x6>
 8011096:	f7ff bfcb 	b.w	8011030 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 801109a:	4770      	bx	lr

0801109c <_NavSatFix__get_serialized_size>:
 801109c:	b110      	cbz	r0, 80110a4 <_NavSatFix__get_serialized_size+0x8>
 801109e:	2100      	movs	r1, #0
 80110a0:	f7ff bfc6 	b.w	8011030 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop

080110a8 <_NavSatFix__cdr_deserialize>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	460c      	mov	r4, r1
 80110ac:	b359      	cbz	r1, 8011106 <_NavSatFix__cdr_deserialize+0x5e>
 80110ae:	4605      	mov	r5, r0
 80110b0:	f000 fa22 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80110b4:	6843      	ldr	r3, [r0, #4]
 80110b6:	4621      	mov	r1, r4
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	4628      	mov	r0, r5
 80110bc:	4798      	blx	r3
 80110be:	f000 f8f9 	bl	80112b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 80110c2:	6843      	ldr	r3, [r0, #4]
 80110c4:	f104 0114 	add.w	r1, r4, #20
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	4628      	mov	r0, r5
 80110cc:	4798      	blx	r3
 80110ce:	f104 0118 	add.w	r1, r4, #24
 80110d2:	4628      	mov	r0, r5
 80110d4:	f7fc fda2 	bl	800dc1c <ucdr_deserialize_double>
 80110d8:	f104 0120 	add.w	r1, r4, #32
 80110dc:	4628      	mov	r0, r5
 80110de:	f7fc fd9d 	bl	800dc1c <ucdr_deserialize_double>
 80110e2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80110e6:	4628      	mov	r0, r5
 80110e8:	f7fc fd98 	bl	800dc1c <ucdr_deserialize_double>
 80110ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80110f0:	4628      	mov	r0, r5
 80110f2:	2209      	movs	r2, #9
 80110f4:	f000 ff88 	bl	8012008 <ucdr_deserialize_array_double>
 80110f8:	4628      	mov	r0, r5
 80110fa:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80110fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011102:	f7fb bb49 	b.w	800c798 <ucdr_deserialize_uint8_t>
 8011106:	4608      	mov	r0, r1
 8011108:	bd38      	pop	{r3, r4, r5, pc}
 801110a:	bf00      	nop

0801110c <_NavSatFix__cdr_serialize>:
 801110c:	b368      	cbz	r0, 801116a <_NavSatFix__cdr_serialize+0x5e>
 801110e:	b538      	push	{r3, r4, r5, lr}
 8011110:	460d      	mov	r5, r1
 8011112:	4604      	mov	r4, r0
 8011114:	f000 f9f0 	bl	80114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011118:	6843      	ldr	r3, [r0, #4]
 801111a:	4629      	mov	r1, r5
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	4620      	mov	r0, r4
 8011120:	4798      	blx	r3
 8011122:	f000 f8c7 	bl	80112b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 8011126:	6843      	ldr	r3, [r0, #4]
 8011128:	4629      	mov	r1, r5
 801112a:	689b      	ldr	r3, [r3, #8]
 801112c:	f104 0014 	add.w	r0, r4, #20
 8011130:	4798      	blx	r3
 8011132:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011136:	4628      	mov	r0, r5
 8011138:	f7fc fbce 	bl	800d8d8 <ucdr_serialize_double>
 801113c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011140:	4628      	mov	r0, r5
 8011142:	f7fc fbc9 	bl	800d8d8 <ucdr_serialize_double>
 8011146:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801114a:	4628      	mov	r0, r5
 801114c:	f7fc fbc4 	bl	800d8d8 <ucdr_serialize_double>
 8011150:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011154:	4628      	mov	r0, r5
 8011156:	2209      	movs	r2, #9
 8011158:	f000 ff00 	bl	8011f5c <ucdr_serialize_array_double>
 801115c:	4628      	mov	r0, r5
 801115e:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8011162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011166:	f7fb bb01 	b.w	800c76c <ucdr_serialize_uint8_t>
 801116a:	4770      	bx	lr

0801116c <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	2701      	movs	r7, #1
 8011170:	7007      	strb	r7, [r0, #0]
 8011172:	460c      	mov	r4, r1
 8011174:	4606      	mov	r6, r0
 8011176:	f000 f9b5 	bl	80114e4 <max_serialized_size_std_msgs__msg__Header>
 801117a:	1825      	adds	r5, r4, r0
 801117c:	4629      	mov	r1, r5
 801117e:	4630      	mov	r0, r6
 8011180:	f000 f884 	bl	801128c <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 8011184:	4405      	add	r5, r0
 8011186:	4628      	mov	r0, r5
 8011188:	2108      	movs	r1, #8
 801118a:	f7fc ff35 	bl	800dff8 <ucdr_alignment>
 801118e:	f100 0608 	add.w	r6, r0, #8
 8011192:	4435      	add	r5, r6
 8011194:	4628      	mov	r0, r5
 8011196:	2108      	movs	r1, #8
 8011198:	f7fc ff2e 	bl	800dff8 <ucdr_alignment>
 801119c:	f100 0608 	add.w	r6, r0, #8
 80111a0:	442e      	add	r6, r5
 80111a2:	4630      	mov	r0, r6
 80111a4:	2108      	movs	r1, #8
 80111a6:	f7fc ff27 	bl	800dff8 <ucdr_alignment>
 80111aa:	f100 0508 	add.w	r5, r0, #8
 80111ae:	442e      	add	r6, r5
 80111b0:	4630      	mov	r0, r6
 80111b2:	2108      	movs	r1, #8
 80111b4:	f7fc ff20 	bl	800dff8 <ucdr_alignment>
 80111b8:	f100 0548 	add.w	r5, r0, #72	; 0x48
 80111bc:	4435      	add	r5, r6
 80111be:	4639      	mov	r1, r7
 80111c0:	4628      	mov	r0, r5
 80111c2:	f7fc ff19 	bl	800dff8 <ucdr_alignment>
 80111c6:	1b3c      	subs	r4, r7, r4
 80111c8:	4420      	add	r0, r4
 80111ca:	4428      	add	r0, r5
 80111cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ce:	bf00      	nop

080111d0 <_NavSatFix__max_serialized_size>:
 80111d0:	b500      	push	{lr}
 80111d2:	b083      	sub	sp, #12
 80111d4:	2100      	movs	r1, #0
 80111d6:	f10d 0007 	add.w	r0, sp, #7
 80111da:	f7ff ffc7 	bl	801116c <max_serialized_size_sensor_msgs__msg__NavSatFix>
 80111de:	b003      	add	sp, #12
 80111e0:	f85d fb04 	ldr.w	pc, [sp], #4

080111e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 80111e4:	4800      	ldr	r0, [pc, #0]	; (80111e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 80111e6:	4770      	bx	lr
 80111e8:	200000cc 	.word	0x200000cc

080111ec <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 80111ec:	b180      	cbz	r0, 8011210 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 80111ee:	b538      	push	{r3, r4, r5, lr}
 80111f0:	460d      	mov	r5, r1
 80111f2:	2101      	movs	r1, #1
 80111f4:	4628      	mov	r0, r5
 80111f6:	f7fc feff 	bl	800dff8 <ucdr_alignment>
 80111fa:	1c6c      	adds	r4, r5, #1
 80111fc:	4404      	add	r4, r0
 80111fe:	4620      	mov	r0, r4
 8011200:	2102      	movs	r1, #2
 8011202:	f7fc fef9 	bl	800dff8 <ucdr_alignment>
 8011206:	f1c5 0502 	rsb	r5, r5, #2
 801120a:	4428      	add	r0, r5
 801120c:	4420      	add	r0, r4
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop

08011214 <_NavSatStatus__cdr_deserialize>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	460c      	mov	r4, r1
 8011218:	b141      	cbz	r1, 801122c <_NavSatStatus__cdr_deserialize+0x18>
 801121a:	4605      	mov	r5, r0
 801121c:	f7fb fffc 	bl	800d218 <ucdr_deserialize_int8_t>
 8011220:	4628      	mov	r0, r5
 8011222:	1ca1      	adds	r1, r4, #2
 8011224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011228:	f7fb bbcc 	b.w	800c9c4 <ucdr_deserialize_uint16_t>
 801122c:	4608      	mov	r0, r1
 801122e:	bd38      	pop	{r3, r4, r5, pc}

08011230 <_NavSatStatus__cdr_serialize>:
 8011230:	b168      	cbz	r0, 801124e <_NavSatStatus__cdr_serialize+0x1e>
 8011232:	b538      	push	{r3, r4, r5, lr}
 8011234:	460d      	mov	r5, r1
 8011236:	4604      	mov	r4, r0
 8011238:	f990 1000 	ldrsb.w	r1, [r0]
 801123c:	4628      	mov	r0, r5
 801123e:	f7fb ffd5 	bl	800d1ec <ucdr_serialize_int8_t>
 8011242:	4628      	mov	r0, r5
 8011244:	8861      	ldrh	r1, [r4, #2]
 8011246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801124a:	f7fb babb 	b.w	800c7c4 <ucdr_serialize_uint16_t>
 801124e:	4770      	bx	lr

08011250 <_NavSatStatus__get_serialized_size>:
 8011250:	b160      	cbz	r0, 801126c <_NavSatStatus__get_serialized_size+0x1c>
 8011252:	b510      	push	{r4, lr}
 8011254:	2101      	movs	r1, #1
 8011256:	2000      	movs	r0, #0
 8011258:	f7fc fece 	bl	800dff8 <ucdr_alignment>
 801125c:	1c44      	adds	r4, r0, #1
 801125e:	4620      	mov	r0, r4
 8011260:	2102      	movs	r1, #2
 8011262:	f7fc fec9 	bl	800dff8 <ucdr_alignment>
 8011266:	3002      	adds	r0, #2
 8011268:	4420      	add	r0, r4
 801126a:	bd10      	pop	{r4, pc}
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop

08011270 <_NavSatStatus__max_serialized_size>:
 8011270:	b510      	push	{r4, lr}
 8011272:	2101      	movs	r1, #1
 8011274:	2000      	movs	r0, #0
 8011276:	f7fc febf 	bl	800dff8 <ucdr_alignment>
 801127a:	1c44      	adds	r4, r0, #1
 801127c:	4620      	mov	r0, r4
 801127e:	2102      	movs	r1, #2
 8011280:	f7fc feba 	bl	800dff8 <ucdr_alignment>
 8011284:	3002      	adds	r0, #2
 8011286:	4420      	add	r0, r4
 8011288:	bd10      	pop	{r4, pc}
 801128a:	bf00      	nop

0801128c <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 801128c:	b538      	push	{r3, r4, r5, lr}
 801128e:	4603      	mov	r3, r0
 8011290:	460c      	mov	r4, r1
 8011292:	2101      	movs	r1, #1
 8011294:	4620      	mov	r0, r4
 8011296:	7019      	strb	r1, [r3, #0]
 8011298:	f7fc feae 	bl	800dff8 <ucdr_alignment>
 801129c:	1c65      	adds	r5, r4, #1
 801129e:	4405      	add	r5, r0
 80112a0:	4628      	mov	r0, r5
 80112a2:	2102      	movs	r1, #2
 80112a4:	f7fc fea8 	bl	800dff8 <ucdr_alignment>
 80112a8:	f1c4 0402 	rsb	r4, r4, #2
 80112ac:	4420      	add	r0, r4
 80112ae:	4428      	add	r0, r5
 80112b0:	bd38      	pop	{r3, r4, r5, pc}
 80112b2:	bf00      	nop

080112b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 80112b4:	4800      	ldr	r0, [pc, #0]	; (80112b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 80112b6:	4770      	bx	lr
 80112b8:	200000f4 	.word	0x200000f4

080112bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 80112bc:	f000 b888 	b.w	80113d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>

080112c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8>:
 80112c0:	f000 b9ec 	b.w	801169c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8>

080112c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 80112c4:	f000 ba6c 	b.w	80117a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>

080112c8 <_Float32MultiArray__max_serialized_size>:
 80112c8:	2301      	movs	r3, #1
 80112ca:	b500      	push	{lr}
 80112cc:	b083      	sub	sp, #12
 80112ce:	2100      	movs	r1, #0
 80112d0:	f10d 0007 	add.w	r0, sp, #7
 80112d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80112d8:	f000 f9aa 	bl	8011630 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80112dc:	b003      	add	sp, #12
 80112de:	f85d fb04 	ldr.w	pc, [sp], #4
 80112e2:	bf00      	nop

080112e4 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 80112e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e6:	4604      	mov	r4, r0
 80112e8:	b190      	cbz	r0, 8011310 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x2c>
 80112ea:	460d      	mov	r5, r1
 80112ec:	f000 f944 	bl	8011578 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80112f0:	182e      	adds	r6, r5, r0
 80112f2:	2104      	movs	r1, #4
 80112f4:	4630      	mov	r0, r6
 80112f6:	6967      	ldr	r7, [r4, #20]
 80112f8:	f7fc fe7e 	bl	800dff8 <ucdr_alignment>
 80112fc:	1d04      	adds	r4, r0, #4
 80112fe:	4434      	add	r4, r6
 8011300:	4620      	mov	r0, r4
 8011302:	2104      	movs	r1, #4
 8011304:	f7fc fe78 	bl	800dff8 <ucdr_alignment>
 8011308:	ebc5 0587 	rsb	r5, r5, r7, lsl #2
 801130c:	4428      	add	r0, r5
 801130e:	4420      	add	r0, r4
 8011310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011312:	bf00      	nop

08011314 <_Float32MultiArray__cdr_deserialize>:
 8011314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011316:	460c      	mov	r4, r1
 8011318:	b083      	sub	sp, #12
 801131a:	b1d1      	cbz	r1, 8011352 <_Float32MultiArray__cdr_deserialize+0x3e>
 801131c:	4606      	mov	r6, r0
 801131e:	f000 f991 	bl	8011644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011322:	6843      	ldr	r3, [r0, #4]
 8011324:	4621      	mov	r1, r4
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	4630      	mov	r0, r6
 801132a:	4798      	blx	r3
 801132c:	69a7      	ldr	r7, [r4, #24]
 801132e:	ab01      	add	r3, sp, #4
 8011330:	463a      	mov	r2, r7
 8011332:	4630      	mov	r0, r6
 8011334:	6921      	ldr	r1, [r4, #16]
 8011336:	f000 ff25 	bl	8012184 <ucdr_deserialize_sequence_float>
 801133a:	9b01      	ldr	r3, [sp, #4]
 801133c:	4605      	mov	r5, r0
 801133e:	b920      	cbnz	r0, 801134a <_Float32MultiArray__cdr_deserialize+0x36>
 8011340:	429f      	cmp	r7, r3
 8011342:	d30a      	bcc.n	801135a <_Float32MultiArray__cdr_deserialize+0x46>
 8011344:	4628      	mov	r0, r5
 8011346:	b003      	add	sp, #12
 8011348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134a:	4628      	mov	r0, r5
 801134c:	6163      	str	r3, [r4, #20]
 801134e:	b003      	add	sp, #12
 8011350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011352:	460d      	mov	r5, r1
 8011354:	4628      	mov	r0, r5
 8011356:	b003      	add	sp, #12
 8011358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135a:	2301      	movs	r3, #1
 801135c:	75b0      	strb	r0, [r6, #22]
 801135e:	7573      	strb	r3, [r6, #21]
 8011360:	2104      	movs	r1, #4
 8011362:	6160      	str	r0, [r4, #20]
 8011364:	4630      	mov	r0, r6
 8011366:	f7fc fe5f 	bl	800e028 <ucdr_align_to>
 801136a:	9901      	ldr	r1, [sp, #4]
 801136c:	4630      	mov	r0, r6
 801136e:	0089      	lsls	r1, r1, #2
 8011370:	f7fc fe90 	bl	800e094 <ucdr_advance_buffer>
 8011374:	4628      	mov	r0, r5
 8011376:	b003      	add	sp, #12
 8011378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801137a:	bf00      	nop

0801137c <_Float32MultiArray__cdr_serialize>:
 801137c:	b180      	cbz	r0, 80113a0 <_Float32MultiArray__cdr_serialize+0x24>
 801137e:	b538      	push	{r3, r4, r5, lr}
 8011380:	460d      	mov	r5, r1
 8011382:	4604      	mov	r4, r0
 8011384:	f000 f95e 	bl	8011644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011388:	6843      	ldr	r3, [r0, #4]
 801138a:	4629      	mov	r1, r5
 801138c:	4620      	mov	r0, r4
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	4798      	blx	r3
 8011392:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011396:	4628      	mov	r0, r5
 8011398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801139c:	f000 bee0 	b.w	8012160 <ucdr_serialize_sequence_float>
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop

080113a4 <_Float32MultiArray__get_serialized_size>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4604      	mov	r4, r0
 80113a8:	b180      	cbz	r0, 80113cc <_Float32MultiArray__get_serialized_size+0x28>
 80113aa:	2100      	movs	r1, #0
 80113ac:	f000 f8e4 	bl	8011578 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80113b0:	2104      	movs	r1, #4
 80113b2:	6965      	ldr	r5, [r4, #20]
 80113b4:	4604      	mov	r4, r0
 80113b6:	f7fc fe1f 	bl	800dff8 <ucdr_alignment>
 80113ba:	4404      	add	r4, r0
 80113bc:	3404      	adds	r4, #4
 80113be:	4620      	mov	r0, r4
 80113c0:	2104      	movs	r1, #4
 80113c2:	f7fc fe19 	bl	800dff8 <ucdr_alignment>
 80113c6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80113ca:	4420      	add	r0, r4
 80113cc:	bd38      	pop	{r3, r4, r5, pc}
 80113ce:	bf00      	nop

080113d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 80113d0:	4800      	ldr	r0, [pc, #0]	; (80113d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 80113d2:	4770      	bx	lr
 80113d4:	2000011c 	.word	0x2000011c

080113d8 <_Header__max_serialized_size>:
 80113d8:	2301      	movs	r3, #1
 80113da:	b500      	push	{lr}
 80113dc:	b083      	sub	sp, #12
 80113de:	2100      	movs	r1, #0
 80113e0:	f10d 0007 	add.w	r0, sp, #7
 80113e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80113e8:	f000 fa2e 	bl	8011848 <max_serialized_size_builtin_interfaces__msg__Time>
 80113ec:	b003      	add	sp, #12
 80113ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80113f2:	bf00      	nop

080113f4 <get_serialized_size_std_msgs__msg__Header>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	4605      	mov	r5, r0
 80113f8:	b168      	cbz	r0, 8011416 <get_serialized_size_std_msgs__msg__Header+0x22>
 80113fa:	460c      	mov	r4, r1
 80113fc:	f000 f9d4 	bl	80117a8 <get_serialized_size_builtin_interfaces__msg__Time>
 8011400:	1826      	adds	r6, r4, r0
 8011402:	2104      	movs	r1, #4
 8011404:	4630      	mov	r0, r6
 8011406:	f7fc fdf7 	bl	800dff8 <ucdr_alignment>
 801140a:	68e9      	ldr	r1, [r5, #12]
 801140c:	f1c4 0405 	rsb	r4, r4, #5
 8011410:	440c      	add	r4, r1
 8011412:	4404      	add	r4, r0
 8011414:	19a0      	adds	r0, r4, r6
 8011416:	bd70      	pop	{r4, r5, r6, pc}

08011418 <_Header__cdr_deserialize>:
 8011418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801141a:	460c      	mov	r4, r1
 801141c:	b083      	sub	sp, #12
 801141e:	b1e1      	cbz	r1, 801145a <_Header__cdr_deserialize+0x42>
 8011420:	4606      	mov	r6, r0
 8011422:	f000 fa25 	bl	8011870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011426:	6843      	ldr	r3, [r0, #4]
 8011428:	4621      	mov	r1, r4
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	4630      	mov	r0, r6
 801142e:	4798      	blx	r3
 8011430:	6927      	ldr	r7, [r4, #16]
 8011432:	ab01      	add	r3, sp, #4
 8011434:	463a      	mov	r2, r7
 8011436:	4630      	mov	r0, r6
 8011438:	68a1      	ldr	r1, [r4, #8]
 801143a:	f000 fe4b 	bl	80120d4 <ucdr_deserialize_sequence_char>
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	4605      	mov	r5, r0
 8011442:	b920      	cbnz	r0, 801144e <_Header__cdr_deserialize+0x36>
 8011444:	429f      	cmp	r7, r3
 8011446:	d30c      	bcc.n	8011462 <_Header__cdr_deserialize+0x4a>
 8011448:	4628      	mov	r0, r5
 801144a:	b003      	add	sp, #12
 801144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801144e:	b103      	cbz	r3, 8011452 <_Header__cdr_deserialize+0x3a>
 8011450:	3b01      	subs	r3, #1
 8011452:	4628      	mov	r0, r5
 8011454:	60e3      	str	r3, [r4, #12]
 8011456:	b003      	add	sp, #12
 8011458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801145a:	460d      	mov	r5, r1
 801145c:	4628      	mov	r0, r5
 801145e:	b003      	add	sp, #12
 8011460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011462:	2101      	movs	r1, #1
 8011464:	75b0      	strb	r0, [r6, #22]
 8011466:	7571      	strb	r1, [r6, #21]
 8011468:	60e0      	str	r0, [r4, #12]
 801146a:	4630      	mov	r0, r6
 801146c:	f7fc fddc 	bl	800e028 <ucdr_align_to>
 8011470:	4630      	mov	r0, r6
 8011472:	9901      	ldr	r1, [sp, #4]
 8011474:	f7fc fe0e 	bl	800e094 <ucdr_advance_buffer>
 8011478:	4628      	mov	r0, r5
 801147a:	b003      	add	sp, #12
 801147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801147e:	bf00      	nop

08011480 <_Header__cdr_serialize>:
 8011480:	b1f8      	cbz	r0, 80114c2 <_Header__cdr_serialize+0x42>
 8011482:	b570      	push	{r4, r5, r6, lr}
 8011484:	4604      	mov	r4, r0
 8011486:	460d      	mov	r5, r1
 8011488:	f000 f9f2 	bl	8011870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801148c:	6843      	ldr	r3, [r0, #4]
 801148e:	4629      	mov	r1, r5
 8011490:	4620      	mov	r0, r4
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	4798      	blx	r3
 8011496:	68a6      	ldr	r6, [r4, #8]
 8011498:	b156      	cbz	r6, 80114b0 <_Header__cdr_serialize+0x30>
 801149a:	4630      	mov	r0, r6
 801149c:	f7ee fed2 	bl	8000244 <strlen>
 80114a0:	4631      	mov	r1, r6
 80114a2:	60e0      	str	r0, [r4, #12]
 80114a4:	1c42      	adds	r2, r0, #1
 80114a6:	4628      	mov	r0, r5
 80114a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114ac:	f000 be00 	b.w	80120b0 <ucdr_serialize_sequence_char>
 80114b0:	4630      	mov	r0, r6
 80114b2:	4632      	mov	r2, r6
 80114b4:	60e0      	str	r0, [r4, #12]
 80114b6:	4631      	mov	r1, r6
 80114b8:	4628      	mov	r0, r5
 80114ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114be:	f000 bdf7 	b.w	80120b0 <ucdr_serialize_sequence_char>
 80114c2:	4770      	bx	lr

080114c4 <_Header__get_serialized_size>:
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	b150      	cbz	r0, 80114e0 <_Header__get_serialized_size+0x1c>
 80114ca:	2100      	movs	r1, #0
 80114cc:	f000 f96c 	bl	80117a8 <get_serialized_size_builtin_interfaces__msg__Time>
 80114d0:	2104      	movs	r1, #4
 80114d2:	4605      	mov	r5, r0
 80114d4:	f7fc fd90 	bl	800dff8 <ucdr_alignment>
 80114d8:	68e4      	ldr	r4, [r4, #12]
 80114da:	3405      	adds	r4, #5
 80114dc:	442c      	add	r4, r5
 80114de:	4420      	add	r0, r4
 80114e0:	bd38      	pop	{r3, r4, r5, pc}
 80114e2:	bf00      	nop

080114e4 <max_serialized_size_std_msgs__msg__Header>:
 80114e4:	2301      	movs	r3, #1
 80114e6:	b510      	push	{r4, lr}
 80114e8:	7003      	strb	r3, [r0, #0]
 80114ea:	4604      	mov	r4, r0
 80114ec:	f000 f9ac 	bl	8011848 <max_serialized_size_builtin_interfaces__msg__Time>
 80114f0:	2300      	movs	r3, #0
 80114f2:	7023      	strb	r3, [r4, #0]
 80114f4:	bd10      	pop	{r4, pc}
 80114f6:	bf00      	nop

080114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80114f8:	4800      	ldr	r0, [pc, #0]	; (80114fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80114fa:	4770      	bx	lr
 80114fc:	20000144 	.word	0x20000144

08011500 <_MultiArrayLayout__max_serialized_size>:
 8011500:	2104      	movs	r1, #4
 8011502:	b508      	push	{r3, lr}
 8011504:	2000      	movs	r0, #0
 8011506:	f7fc fd77 	bl	800dff8 <ucdr_alignment>
 801150a:	3004      	adds	r0, #4
 801150c:	bd08      	pop	{r3, pc}
 801150e:	bf00      	nop

08011510 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011514:	4607      	mov	r7, r0
 8011516:	4689      	mov	r9, r1
 8011518:	4608      	mov	r0, r1
 801151a:	2104      	movs	r1, #4
 801151c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8011520:	f7fc fd6a 	bl	800dff8 <ucdr_alignment>
 8011524:	f109 0304 	add.w	r3, r9, #4
 8011528:	18c6      	adds	r6, r0, r3
 801152a:	f1b8 0f00 	cmp.w	r8, #0
 801152e:	d018      	beq.n	8011562 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8011530:	2500      	movs	r5, #0
 8011532:	f007 f9ff 	bl	8018934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	6843      	ldr	r3, [r0, #4]
 801153a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801153e:	4631      	mov	r1, r6
 8011540:	695b      	ldr	r3, [r3, #20]
 8011542:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011546:	4798      	blx	r3
 8011548:	4604      	mov	r4, r0
 801154a:	2c04      	cmp	r4, #4
 801154c:	4621      	mov	r1, r4
 801154e:	4630      	mov	r0, r6
 8011550:	bf28      	it	cs
 8011552:	2104      	movcs	r1, #4
 8011554:	f7fc fd50 	bl	800dff8 <ucdr_alignment>
 8011558:	3501      	adds	r5, #1
 801155a:	4404      	add	r4, r0
 801155c:	45a8      	cmp	r8, r5
 801155e:	4426      	add	r6, r4
 8011560:	d1e7      	bne.n	8011532 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8011562:	2104      	movs	r1, #4
 8011564:	4630      	mov	r0, r6
 8011566:	f7fc fd47 	bl	800dff8 <ucdr_alignment>
 801156a:	f1c9 0904 	rsb	r9, r9, #4
 801156e:	444e      	add	r6, r9
 8011570:	4430      	add	r0, r6
 8011572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011576:	bf00      	nop

08011578 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011578:	b108      	cbz	r0, 801157e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 801157a:	f7ff bfc9 	b.w	8011510 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 801157e:	4770      	bx	lr

08011580 <_MultiArrayLayout__get_serialized_size>:
 8011580:	b110      	cbz	r0, 8011588 <_MultiArrayLayout__get_serialized_size+0x8>
 8011582:	2100      	movs	r1, #0
 8011584:	f7ff bfc4 	b.w	8011510 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop

0801158c <_MultiArrayLayout__cdr_deserialize>:
 801158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801158e:	460d      	mov	r5, r1
 8011590:	b083      	sub	sp, #12
 8011592:	b329      	cbz	r1, 80115e0 <_MultiArrayLayout__cdr_deserialize+0x54>
 8011594:	a901      	add	r1, sp, #4
 8011596:	4607      	mov	r7, r0
 8011598:	f7fb fc32 	bl	800ce00 <ucdr_deserialize_uint32_t>
 801159c:	9b01      	ldr	r3, [sp, #4]
 801159e:	68aa      	ldr	r2, [r5, #8]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d31a      	bcc.n	80115da <_MultiArrayLayout__cdr_deserialize+0x4e>
 80115a4:	606b      	str	r3, [r5, #4]
 80115a6:	b18b      	cbz	r3, 80115cc <_MultiArrayLayout__cdr_deserialize+0x40>
 80115a8:	2400      	movs	r4, #0
 80115aa:	4626      	mov	r6, r4
 80115ac:	e002      	b.n	80115b4 <_MultiArrayLayout__cdr_deserialize+0x28>
 80115ae:	9b01      	ldr	r3, [sp, #4]
 80115b0:	429e      	cmp	r6, r3
 80115b2:	d20b      	bcs.n	80115cc <_MultiArrayLayout__cdr_deserialize+0x40>
 80115b4:	f007 f9be 	bl	8018934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80115b8:	6829      	ldr	r1, [r5, #0]
 80115ba:	6843      	ldr	r3, [r0, #4]
 80115bc:	4421      	add	r1, r4
 80115be:	4638      	mov	r0, r7
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	4798      	blx	r3
 80115c4:	3601      	adds	r6, #1
 80115c6:	3414      	adds	r4, #20
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d1f0      	bne.n	80115ae <_MultiArrayLayout__cdr_deserialize+0x22>
 80115cc:	4638      	mov	r0, r7
 80115ce:	f105 010c 	add.w	r1, r5, #12
 80115d2:	f7fb fc15 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80115d6:	b003      	add	sp, #12
 80115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115da:	2000      	movs	r0, #0
 80115dc:	b003      	add	sp, #12
 80115de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115e0:	4608      	mov	r0, r1
 80115e2:	b003      	add	sp, #12
 80115e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115e6:	bf00      	nop

080115e8 <_MultiArrayLayout__cdr_serialize>:
 80115e8:	b308      	cbz	r0, 801162e <_MultiArrayLayout__cdr_serialize+0x46>
 80115ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ec:	6847      	ldr	r7, [r0, #4]
 80115ee:	460e      	mov	r6, r1
 80115f0:	4605      	mov	r5, r0
 80115f2:	4608      	mov	r0, r1
 80115f4:	4639      	mov	r1, r7
 80115f6:	f7fb fad3 	bl	800cba0 <ucdr_serialize_uint32_t>
 80115fa:	b190      	cbz	r0, 8011622 <_MultiArrayLayout__cdr_serialize+0x3a>
 80115fc:	b18f      	cbz	r7, 8011622 <_MultiArrayLayout__cdr_serialize+0x3a>
 80115fe:	2400      	movs	r4, #0
 8011600:	e001      	b.n	8011606 <_MultiArrayLayout__cdr_serialize+0x1e>
 8011602:	42a7      	cmp	r7, r4
 8011604:	d00d      	beq.n	8011622 <_MultiArrayLayout__cdr_serialize+0x3a>
 8011606:	f007 f995 	bl	8018934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801160a:	682a      	ldr	r2, [r5, #0]
 801160c:	6843      	ldr	r3, [r0, #4]
 801160e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8011612:	4631      	mov	r1, r6
 8011614:	689b      	ldr	r3, [r3, #8]
 8011616:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801161a:	4798      	blx	r3
 801161c:	3401      	adds	r4, #1
 801161e:	2800      	cmp	r0, #0
 8011620:	d1ef      	bne.n	8011602 <_MultiArrayLayout__cdr_serialize+0x1a>
 8011622:	4630      	mov	r0, r6
 8011624:	68e9      	ldr	r1, [r5, #12]
 8011626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801162a:	f7fb bab9 	b.w	800cba0 <ucdr_serialize_uint32_t>
 801162e:	4770      	bx	lr

08011630 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011630:	b508      	push	{r3, lr}
 8011632:	2200      	movs	r2, #0
 8011634:	4603      	mov	r3, r0
 8011636:	4608      	mov	r0, r1
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	2104      	movs	r1, #4
 801163c:	f7fc fcdc 	bl	800dff8 <ucdr_alignment>
 8011640:	3004      	adds	r0, #4
 8011642:	bd08      	pop	{r3, pc}

08011644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011644:	4800      	ldr	r0, [pc, #0]	; (8011648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8011646:	4770      	bx	lr
 8011648:	2000016c 	.word	0x2000016c

0801164c <_UInt8__max_serialized_size>:
 801164c:	2101      	movs	r1, #1
 801164e:	b508      	push	{r3, lr}
 8011650:	2000      	movs	r0, #0
 8011652:	f7fc fcd1 	bl	800dff8 <ucdr_alignment>
 8011656:	3001      	adds	r0, #1
 8011658:	bd08      	pop	{r3, pc}
 801165a:	bf00      	nop

0801165c <_UInt8__cdr_deserialize>:
 801165c:	b109      	cbz	r1, 8011662 <_UInt8__cdr_deserialize+0x6>
 801165e:	f7fb b89b 	b.w	800c798 <ucdr_deserialize_uint8_t>
 8011662:	4608      	mov	r0, r1
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop

08011668 <get_serialized_size_std_msgs__msg__UInt8>:
 8011668:	b508      	push	{r3, lr}
 801166a:	b120      	cbz	r0, 8011676 <get_serialized_size_std_msgs__msg__UInt8+0xe>
 801166c:	4608      	mov	r0, r1
 801166e:	2101      	movs	r1, #1
 8011670:	f7fc fcc2 	bl	800dff8 <ucdr_alignment>
 8011674:	3001      	adds	r0, #1
 8011676:	bd08      	pop	{r3, pc}

08011678 <_UInt8__cdr_serialize>:
 8011678:	460a      	mov	r2, r1
 801167a:	b118      	cbz	r0, 8011684 <_UInt8__cdr_serialize+0xc>
 801167c:	7801      	ldrb	r1, [r0, #0]
 801167e:	4610      	mov	r0, r2
 8011680:	f7fb b874 	b.w	800c76c <ucdr_serialize_uint8_t>
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <_UInt8__get_serialized_size>:
 8011688:	b130      	cbz	r0, 8011698 <_UInt8__get_serialized_size+0x10>
 801168a:	2101      	movs	r1, #1
 801168c:	b508      	push	{r3, lr}
 801168e:	2000      	movs	r0, #0
 8011690:	f7fc fcb2 	bl	800dff8 <ucdr_alignment>
 8011694:	3001      	adds	r0, #1
 8011696:	bd08      	pop	{r3, pc}
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop

0801169c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8>:
 801169c:	4800      	ldr	r0, [pc, #0]	; (80116a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8+0x4>)
 801169e:	4770      	bx	lr
 80116a0:	20000194 	.word	0x20000194

080116a4 <_UInt8MultiArray__max_serialized_size>:
 80116a4:	2301      	movs	r3, #1
 80116a6:	b500      	push	{lr}
 80116a8:	b083      	sub	sp, #12
 80116aa:	2100      	movs	r1, #0
 80116ac:	f10d 0007 	add.w	r0, sp, #7
 80116b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80116b4:	f7ff ffbc 	bl	8011630 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 80116b8:	b003      	add	sp, #12
 80116ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80116be:	bf00      	nop

080116c0 <get_serialized_size_std_msgs__msg__UInt8MultiArray>:
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c2:	4604      	mov	r4, r0
 80116c4:	b188      	cbz	r0, 80116ea <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x2a>
 80116c6:	460e      	mov	r6, r1
 80116c8:	f7ff ff56 	bl	8011578 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 80116cc:	1837      	adds	r7, r6, r0
 80116ce:	4638      	mov	r0, r7
 80116d0:	2104      	movs	r1, #4
 80116d2:	6965      	ldr	r5, [r4, #20]
 80116d4:	f7fc fc90 	bl	800dff8 <ucdr_alignment>
 80116d8:	3004      	adds	r0, #4
 80116da:	4407      	add	r7, r0
 80116dc:	4638      	mov	r0, r7
 80116de:	2101      	movs	r1, #1
 80116e0:	f7fc fc8a 	bl	800dff8 <ucdr_alignment>
 80116e4:	1bad      	subs	r5, r5, r6
 80116e6:	4405      	add	r5, r0
 80116e8:	19e8      	adds	r0, r5, r7
 80116ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116ec <_UInt8MultiArray__cdr_deserialize>:
 80116ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ee:	460c      	mov	r4, r1
 80116f0:	b083      	sub	sp, #12
 80116f2:	b1d1      	cbz	r1, 801172a <_UInt8MultiArray__cdr_deserialize+0x3e>
 80116f4:	4606      	mov	r6, r0
 80116f6:	f7ff ffa5 	bl	8011644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80116fa:	6843      	ldr	r3, [r0, #4]
 80116fc:	4621      	mov	r1, r4
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	4630      	mov	r0, r6
 8011702:	4798      	blx	r3
 8011704:	69a7      	ldr	r7, [r4, #24]
 8011706:	ab01      	add	r3, sp, #4
 8011708:	463a      	mov	r2, r7
 801170a:	4630      	mov	r0, r6
 801170c:	6921      	ldr	r1, [r4, #16]
 801170e:	f000 fd0d 	bl	801212c <ucdr_deserialize_sequence_uint8_t>
 8011712:	9b01      	ldr	r3, [sp, #4]
 8011714:	4605      	mov	r5, r0
 8011716:	b920      	cbnz	r0, 8011722 <_UInt8MultiArray__cdr_deserialize+0x36>
 8011718:	429f      	cmp	r7, r3
 801171a:	d30a      	bcc.n	8011732 <_UInt8MultiArray__cdr_deserialize+0x46>
 801171c:	4628      	mov	r0, r5
 801171e:	b003      	add	sp, #12
 8011720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011722:	4628      	mov	r0, r5
 8011724:	6163      	str	r3, [r4, #20]
 8011726:	b003      	add	sp, #12
 8011728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801172a:	460d      	mov	r5, r1
 801172c:	4628      	mov	r0, r5
 801172e:	b003      	add	sp, #12
 8011730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011732:	2101      	movs	r1, #1
 8011734:	75b0      	strb	r0, [r6, #22]
 8011736:	7571      	strb	r1, [r6, #21]
 8011738:	6160      	str	r0, [r4, #20]
 801173a:	4630      	mov	r0, r6
 801173c:	f7fc fc74 	bl	800e028 <ucdr_align_to>
 8011740:	4630      	mov	r0, r6
 8011742:	9901      	ldr	r1, [sp, #4]
 8011744:	f7fc fca6 	bl	800e094 <ucdr_advance_buffer>
 8011748:	4628      	mov	r0, r5
 801174a:	b003      	add	sp, #12
 801174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174e:	bf00      	nop

08011750 <_UInt8MultiArray__cdr_serialize>:
 8011750:	b180      	cbz	r0, 8011774 <_UInt8MultiArray__cdr_serialize+0x24>
 8011752:	b538      	push	{r3, r4, r5, lr}
 8011754:	460d      	mov	r5, r1
 8011756:	4604      	mov	r4, r0
 8011758:	f7ff ff74 	bl	8011644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 801175c:	6843      	ldr	r3, [r0, #4]
 801175e:	4629      	mov	r1, r5
 8011760:	4620      	mov	r0, r4
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	4798      	blx	r3
 8011766:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801176a:	4628      	mov	r0, r5
 801176c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011770:	f000 bcca 	b.w	8012108 <ucdr_serialize_sequence_uint8_t>
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <_UInt8MultiArray__get_serialized_size>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	4604      	mov	r4, r0
 801177c:	b178      	cbz	r0, 801179e <_UInt8MultiArray__get_serialized_size+0x26>
 801177e:	2100      	movs	r1, #0
 8011780:	f7ff fefa 	bl	8011578 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011784:	2104      	movs	r1, #4
 8011786:	6965      	ldr	r5, [r4, #20]
 8011788:	4604      	mov	r4, r0
 801178a:	f7fc fc35 	bl	800dff8 <ucdr_alignment>
 801178e:	4404      	add	r4, r0
 8011790:	3404      	adds	r4, #4
 8011792:	4620      	mov	r0, r4
 8011794:	2101      	movs	r1, #1
 8011796:	f7fc fc2f 	bl	800dff8 <ucdr_alignment>
 801179a:	4428      	add	r0, r5
 801179c:	4420      	add	r0, r4
 801179e:	bd38      	pop	{r3, r4, r5, pc}

080117a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 80117a0:	4800      	ldr	r0, [pc, #0]	; (80117a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x4>)
 80117a2:	4770      	bx	lr
 80117a4:	200001bc 	.word	0x200001bc

080117a8 <get_serialized_size_builtin_interfaces__msg__Time>:
 80117a8:	b180      	cbz	r0, 80117cc <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80117aa:	b538      	push	{r3, r4, r5, lr}
 80117ac:	460d      	mov	r5, r1
 80117ae:	2104      	movs	r1, #4
 80117b0:	4628      	mov	r0, r5
 80117b2:	f7fc fc21 	bl	800dff8 <ucdr_alignment>
 80117b6:	1d2c      	adds	r4, r5, #4
 80117b8:	4404      	add	r4, r0
 80117ba:	4620      	mov	r0, r4
 80117bc:	2104      	movs	r1, #4
 80117be:	f7fc fc1b 	bl	800dff8 <ucdr_alignment>
 80117c2:	f1c5 0504 	rsb	r5, r5, #4
 80117c6:	4428      	add	r0, r5
 80117c8:	4420      	add	r0, r4
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop

080117d0 <_Time__cdr_deserialize>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	460c      	mov	r4, r1
 80117d4:	b141      	cbz	r1, 80117e8 <_Time__cdr_deserialize+0x18>
 80117d6:	4605      	mov	r5, r0
 80117d8:	f7fb fec0 	bl	800d55c <ucdr_deserialize_int32_t>
 80117dc:	4628      	mov	r0, r5
 80117de:	1d21      	adds	r1, r4, #4
 80117e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117e4:	f7fb bb0c 	b.w	800ce00 <ucdr_deserialize_uint32_t>
 80117e8:	4608      	mov	r0, r1
 80117ea:	bd38      	pop	{r3, r4, r5, pc}

080117ec <_Time__cdr_serialize>:
 80117ec:	b160      	cbz	r0, 8011808 <_Time__cdr_serialize+0x1c>
 80117ee:	b538      	push	{r3, r4, r5, lr}
 80117f0:	460d      	mov	r5, r1
 80117f2:	4604      	mov	r4, r0
 80117f4:	6801      	ldr	r1, [r0, #0]
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7fb fe18 	bl	800d42c <ucdr_serialize_int32_t>
 80117fc:	4628      	mov	r0, r5
 80117fe:	6861      	ldr	r1, [r4, #4]
 8011800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011804:	f7fb b9cc 	b.w	800cba0 <ucdr_serialize_uint32_t>
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop

0801180c <_Time__get_serialized_size>:
 801180c:	b160      	cbz	r0, 8011828 <_Time__get_serialized_size+0x1c>
 801180e:	b510      	push	{r4, lr}
 8011810:	2104      	movs	r1, #4
 8011812:	2000      	movs	r0, #0
 8011814:	f7fc fbf0 	bl	800dff8 <ucdr_alignment>
 8011818:	1d04      	adds	r4, r0, #4
 801181a:	4620      	mov	r0, r4
 801181c:	2104      	movs	r1, #4
 801181e:	f7fc fbeb 	bl	800dff8 <ucdr_alignment>
 8011822:	3004      	adds	r0, #4
 8011824:	4420      	add	r0, r4
 8011826:	bd10      	pop	{r4, pc}
 8011828:	4770      	bx	lr
 801182a:	bf00      	nop

0801182c <_Time__max_serialized_size>:
 801182c:	b510      	push	{r4, lr}
 801182e:	2104      	movs	r1, #4
 8011830:	2000      	movs	r0, #0
 8011832:	f7fc fbe1 	bl	800dff8 <ucdr_alignment>
 8011836:	1d04      	adds	r4, r0, #4
 8011838:	4620      	mov	r0, r4
 801183a:	2104      	movs	r1, #4
 801183c:	f7fc fbdc 	bl	800dff8 <ucdr_alignment>
 8011840:	3004      	adds	r0, #4
 8011842:	4420      	add	r0, r4
 8011844:	bd10      	pop	{r4, pc}
 8011846:	bf00      	nop

08011848 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	2201      	movs	r2, #1
 801184c:	4603      	mov	r3, r0
 801184e:	460c      	mov	r4, r1
 8011850:	701a      	strb	r2, [r3, #0]
 8011852:	4608      	mov	r0, r1
 8011854:	2104      	movs	r1, #4
 8011856:	f7fc fbcf 	bl	800dff8 <ucdr_alignment>
 801185a:	1d25      	adds	r5, r4, #4
 801185c:	4405      	add	r5, r0
 801185e:	4628      	mov	r0, r5
 8011860:	2104      	movs	r1, #4
 8011862:	f7fc fbc9 	bl	800dff8 <ucdr_alignment>
 8011866:	f1c4 0404 	rsb	r4, r4, #4
 801186a:	4420      	add	r0, r4
 801186c:	4428      	add	r0, r5
 801186e:	bd38      	pop	{r3, r4, r5, pc}

08011870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011870:	4800      	ldr	r0, [pc, #0]	; (8011874 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011872:	4770      	bx	lr
 8011874:	200001e4 	.word	0x200001e4

08011878 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	b158      	cbz	r0, 8011894 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 801187c:	460d      	mov	r5, r1
 801187e:	f007 f85d 	bl	801893c <get_serialized_size_geometry_msgs__msg__Pose>
 8011882:	182c      	adds	r4, r5, r0
 8011884:	4620      	mov	r0, r4
 8011886:	2108      	movs	r1, #8
 8011888:	f7fc fbb6 	bl	800dff8 <ucdr_alignment>
 801188c:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 8011890:	4428      	add	r0, r5
 8011892:	4420      	add	r0, r4
 8011894:	bd38      	pop	{r3, r4, r5, pc}
 8011896:	bf00      	nop

08011898 <_PoseWithCovariance__cdr_deserialize>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	460c      	mov	r4, r1
 801189c:	b179      	cbz	r1, 80118be <_PoseWithCovariance__cdr_deserialize+0x26>
 801189e:	4605      	mov	r5, r0
 80118a0:	f007 f8b8 	bl	8018a14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80118a4:	6843      	ldr	r3, [r0, #4]
 80118a6:	4621      	mov	r1, r4
 80118a8:	4628      	mov	r0, r5
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	4798      	blx	r3
 80118ae:	4628      	mov	r0, r5
 80118b0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80118b4:	2224      	movs	r2, #36	; 0x24
 80118b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118ba:	f000 bba5 	b.w	8012008 <ucdr_deserialize_array_double>
 80118be:	4608      	mov	r0, r1
 80118c0:	bd38      	pop	{r3, r4, r5, pc}
 80118c2:	bf00      	nop

080118c4 <_PoseWithCovariance__cdr_serialize>:
 80118c4:	b188      	cbz	r0, 80118ea <_PoseWithCovariance__cdr_serialize+0x26>
 80118c6:	b538      	push	{r3, r4, r5, lr}
 80118c8:	460d      	mov	r5, r1
 80118ca:	4604      	mov	r4, r0
 80118cc:	f007 f8a2 	bl	8018a14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80118d0:	6843      	ldr	r3, [r0, #4]
 80118d2:	4629      	mov	r1, r5
 80118d4:	4620      	mov	r0, r4
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	4798      	blx	r3
 80118da:	4628      	mov	r0, r5
 80118dc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80118e0:	2224      	movs	r2, #36	; 0x24
 80118e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118e6:	f000 bb39 	b.w	8011f5c <ucdr_serialize_array_double>
 80118ea:	4770      	bx	lr

080118ec <_PoseWithCovariance__get_serialized_size>:
 80118ec:	b158      	cbz	r0, 8011906 <_PoseWithCovariance__get_serialized_size+0x1a>
 80118ee:	b510      	push	{r4, lr}
 80118f0:	2100      	movs	r1, #0
 80118f2:	f007 f823 	bl	801893c <get_serialized_size_geometry_msgs__msg__Pose>
 80118f6:	2108      	movs	r1, #8
 80118f8:	4604      	mov	r4, r0
 80118fa:	f7fc fb7d 	bl	800dff8 <ucdr_alignment>
 80118fe:	4420      	add	r0, r4
 8011900:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011904:	bd10      	pop	{r4, pc}
 8011906:	4770      	bx	lr

08011908 <_PoseWithCovariance__max_serialized_size>:
 8011908:	2301      	movs	r3, #1
 801190a:	b510      	push	{r4, lr}
 801190c:	b082      	sub	sp, #8
 801190e:	2100      	movs	r1, #0
 8011910:	f10d 0007 	add.w	r0, sp, #7
 8011914:	f88d 3007 	strb.w	r3, [sp, #7]
 8011918:	f007 f86e 	bl	80189f8 <max_serialized_size_geometry_msgs__msg__Pose>
 801191c:	2108      	movs	r1, #8
 801191e:	4604      	mov	r4, r0
 8011920:	f7fc fb6a 	bl	800dff8 <ucdr_alignment>
 8011924:	4420      	add	r0, r4
 8011926:	f500 7090 	add.w	r0, r0, #288	; 0x120
 801192a:	b002      	add	sp, #8
 801192c:	bd10      	pop	{r4, pc}
 801192e:	bf00      	nop

08011930 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	2301      	movs	r3, #1
 8011934:	7003      	strb	r3, [r0, #0]
 8011936:	460c      	mov	r4, r1
 8011938:	f007 f85e 	bl	80189f8 <max_serialized_size_geometry_msgs__msg__Pose>
 801193c:	1825      	adds	r5, r4, r0
 801193e:	4628      	mov	r0, r5
 8011940:	2108      	movs	r1, #8
 8011942:	f7fc fb59 	bl	800dff8 <ucdr_alignment>
 8011946:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 801194a:	4420      	add	r0, r4
 801194c:	4428      	add	r0, r5
 801194e:	bd38      	pop	{r3, r4, r5, pc}

08011950 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8011950:	4800      	ldr	r0, [pc, #0]	; (8011954 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 8011952:	4770      	bx	lr
 8011954:	2000020c 	.word	0x2000020c

08011958 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8011958:	b1f0      	cbz	r0, 8011998 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801195a:	b570      	push	{r4, r5, r6, lr}
 801195c:	460d      	mov	r5, r1
 801195e:	2108      	movs	r1, #8
 8011960:	4628      	mov	r0, r5
 8011962:	f7fc fb49 	bl	800dff8 <ucdr_alignment>
 8011966:	f105 0408 	add.w	r4, r5, #8
 801196a:	1826      	adds	r6, r4, r0
 801196c:	4630      	mov	r0, r6
 801196e:	2108      	movs	r1, #8
 8011970:	f7fc fb42 	bl	800dff8 <ucdr_alignment>
 8011974:	f100 0408 	add.w	r4, r0, #8
 8011978:	4434      	add	r4, r6
 801197a:	4620      	mov	r0, r4
 801197c:	2108      	movs	r1, #8
 801197e:	f7fc fb3b 	bl	800dff8 <ucdr_alignment>
 8011982:	3008      	adds	r0, #8
 8011984:	4404      	add	r4, r0
 8011986:	4620      	mov	r0, r4
 8011988:	2108      	movs	r1, #8
 801198a:	f7fc fb35 	bl	800dff8 <ucdr_alignment>
 801198e:	f1c5 0508 	rsb	r5, r5, #8
 8011992:	4428      	add	r0, r5
 8011994:	4420      	add	r0, r4
 8011996:	bd70      	pop	{r4, r5, r6, pc}
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop

0801199c <_Quaternion__cdr_deserialize>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	460c      	mov	r4, r1
 80119a0:	b199      	cbz	r1, 80119ca <_Quaternion__cdr_deserialize+0x2e>
 80119a2:	4605      	mov	r5, r0
 80119a4:	f7fc f93a 	bl	800dc1c <ucdr_deserialize_double>
 80119a8:	f104 0108 	add.w	r1, r4, #8
 80119ac:	4628      	mov	r0, r5
 80119ae:	f7fc f935 	bl	800dc1c <ucdr_deserialize_double>
 80119b2:	f104 0110 	add.w	r1, r4, #16
 80119b6:	4628      	mov	r0, r5
 80119b8:	f7fc f930 	bl	800dc1c <ucdr_deserialize_double>
 80119bc:	4628      	mov	r0, r5
 80119be:	f104 0118 	add.w	r1, r4, #24
 80119c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119c6:	f7fc b929 	b.w	800dc1c <ucdr_deserialize_double>
 80119ca:	4608      	mov	r0, r1
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	bf00      	nop

080119d0 <_Quaternion__cdr_serialize>:
 80119d0:	b1c0      	cbz	r0, 8011a04 <_Quaternion__cdr_serialize+0x34>
 80119d2:	e9d0 2300 	ldrd	r2, r3, [r0]
 80119d6:	b570      	push	{r4, r5, r6, lr}
 80119d8:	460d      	mov	r5, r1
 80119da:	4604      	mov	r4, r0
 80119dc:	4608      	mov	r0, r1
 80119de:	f7fb ff7b 	bl	800d8d8 <ucdr_serialize_double>
 80119e2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80119e6:	4628      	mov	r0, r5
 80119e8:	f7fb ff76 	bl	800d8d8 <ucdr_serialize_double>
 80119ec:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80119f0:	4628      	mov	r0, r5
 80119f2:	f7fb ff71 	bl	800d8d8 <ucdr_serialize_double>
 80119f6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80119fa:	4628      	mov	r0, r5
 80119fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a00:	f7fb bf6a 	b.w	800d8d8 <ucdr_serialize_double>
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop

08011a08 <_Quaternion__get_serialized_size>:
 8011a08:	b1d0      	cbz	r0, 8011a40 <_Quaternion__get_serialized_size+0x38>
 8011a0a:	b538      	push	{r3, r4, r5, lr}
 8011a0c:	2108      	movs	r1, #8
 8011a0e:	2000      	movs	r0, #0
 8011a10:	f7fc faf2 	bl	800dff8 <ucdr_alignment>
 8011a14:	f100 0508 	add.w	r5, r0, #8
 8011a18:	4628      	mov	r0, r5
 8011a1a:	2108      	movs	r1, #8
 8011a1c:	f7fc faec 	bl	800dff8 <ucdr_alignment>
 8011a20:	f100 0408 	add.w	r4, r0, #8
 8011a24:	442c      	add	r4, r5
 8011a26:	4620      	mov	r0, r4
 8011a28:	2108      	movs	r1, #8
 8011a2a:	f7fc fae5 	bl	800dff8 <ucdr_alignment>
 8011a2e:	3008      	adds	r0, #8
 8011a30:	4404      	add	r4, r0
 8011a32:	4620      	mov	r0, r4
 8011a34:	2108      	movs	r1, #8
 8011a36:	f7fc fadf 	bl	800dff8 <ucdr_alignment>
 8011a3a:	3008      	adds	r0, #8
 8011a3c:	4420      	add	r0, r4
 8011a3e:	bd38      	pop	{r3, r4, r5, pc}
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop

08011a44 <_Quaternion__max_serialized_size>:
 8011a44:	b538      	push	{r3, r4, r5, lr}
 8011a46:	2108      	movs	r1, #8
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f7fc fad5 	bl	800dff8 <ucdr_alignment>
 8011a4e:	f100 0508 	add.w	r5, r0, #8
 8011a52:	4628      	mov	r0, r5
 8011a54:	2108      	movs	r1, #8
 8011a56:	f7fc facf 	bl	800dff8 <ucdr_alignment>
 8011a5a:	f100 0408 	add.w	r4, r0, #8
 8011a5e:	4425      	add	r5, r4
 8011a60:	4628      	mov	r0, r5
 8011a62:	2108      	movs	r1, #8
 8011a64:	f7fc fac8 	bl	800dff8 <ucdr_alignment>
 8011a68:	f100 0408 	add.w	r4, r0, #8
 8011a6c:	442c      	add	r4, r5
 8011a6e:	4620      	mov	r0, r4
 8011a70:	2108      	movs	r1, #8
 8011a72:	f7fc fac1 	bl	800dff8 <ucdr_alignment>
 8011a76:	3008      	adds	r0, #8
 8011a78:	4420      	add	r0, r4
 8011a7a:	bd38      	pop	{r3, r4, r5, pc}

08011a7c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2201      	movs	r2, #1
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	4608      	mov	r0, r1
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	460c      	mov	r4, r1
 8011a88:	2108      	movs	r1, #8
 8011a8a:	f7fc fab5 	bl	800dff8 <ucdr_alignment>
 8011a8e:	f104 0608 	add.w	r6, r4, #8
 8011a92:	4406      	add	r6, r0
 8011a94:	4630      	mov	r0, r6
 8011a96:	2108      	movs	r1, #8
 8011a98:	f7fc faae 	bl	800dff8 <ucdr_alignment>
 8011a9c:	f100 0508 	add.w	r5, r0, #8
 8011aa0:	442e      	add	r6, r5
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	2108      	movs	r1, #8
 8011aa6:	f7fc faa7 	bl	800dff8 <ucdr_alignment>
 8011aaa:	f100 0508 	add.w	r5, r0, #8
 8011aae:	4435      	add	r5, r6
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	2108      	movs	r1, #8
 8011ab4:	f7fc faa0 	bl	800dff8 <ucdr_alignment>
 8011ab8:	f1c4 0408 	rsb	r4, r4, #8
 8011abc:	4420      	add	r0, r4
 8011abe:	4428      	add	r0, r5
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
 8011ac2:	bf00      	nop

08011ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011ac4:	4800      	ldr	r0, [pc, #0]	; (8011ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011ac6:	4770      	bx	lr
 8011ac8:	20000234 	.word	0x20000234

08011acc <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	b158      	cbz	r0, 8011ae8 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	f7fa fd1d 	bl	800c510 <get_serialized_size_geometry_msgs__msg__Twist>
 8011ad6:	182c      	adds	r4, r5, r0
 8011ad8:	4620      	mov	r0, r4
 8011ada:	2108      	movs	r1, #8
 8011adc:	f7fc fa8c 	bl	800dff8 <ucdr_alignment>
 8011ae0:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 8011ae4:	4428      	add	r0, r5
 8011ae6:	4420      	add	r0, r4
 8011ae8:	bd38      	pop	{r3, r4, r5, pc}
 8011aea:	bf00      	nop

08011aec <_TwistWithCovariance__cdr_deserialize>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	460c      	mov	r4, r1
 8011af0:	b179      	cbz	r1, 8011b12 <_TwistWithCovariance__cdr_deserialize+0x26>
 8011af2:	4605      	mov	r5, r0
 8011af4:	f7fa fd78 	bl	800c5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8011af8:	6843      	ldr	r3, [r0, #4]
 8011afa:	4621      	mov	r1, r4
 8011afc:	4628      	mov	r0, r5
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	4798      	blx	r3
 8011b02:	4628      	mov	r0, r5
 8011b04:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011b08:	2224      	movs	r2, #36	; 0x24
 8011b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b0e:	f000 ba7b 	b.w	8012008 <ucdr_deserialize_array_double>
 8011b12:	4608      	mov	r0, r1
 8011b14:	bd38      	pop	{r3, r4, r5, pc}
 8011b16:	bf00      	nop

08011b18 <_TwistWithCovariance__cdr_serialize>:
 8011b18:	b188      	cbz	r0, 8011b3e <_TwistWithCovariance__cdr_serialize+0x26>
 8011b1a:	b538      	push	{r3, r4, r5, lr}
 8011b1c:	460d      	mov	r5, r1
 8011b1e:	4604      	mov	r4, r0
 8011b20:	f7fa fd62 	bl	800c5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8011b24:	6843      	ldr	r3, [r0, #4]
 8011b26:	4629      	mov	r1, r5
 8011b28:	4620      	mov	r0, r4
 8011b2a:	689b      	ldr	r3, [r3, #8]
 8011b2c:	4798      	blx	r3
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011b34:	2224      	movs	r2, #36	; 0x24
 8011b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b3a:	f000 ba0f 	b.w	8011f5c <ucdr_serialize_array_double>
 8011b3e:	4770      	bx	lr

08011b40 <_TwistWithCovariance__get_serialized_size>:
 8011b40:	b158      	cbz	r0, 8011b5a <_TwistWithCovariance__get_serialized_size+0x1a>
 8011b42:	b510      	push	{r4, lr}
 8011b44:	2100      	movs	r1, #0
 8011b46:	f7fa fce3 	bl	800c510 <get_serialized_size_geometry_msgs__msg__Twist>
 8011b4a:	2108      	movs	r1, #8
 8011b4c:	4604      	mov	r4, r0
 8011b4e:	f7fc fa53 	bl	800dff8 <ucdr_alignment>
 8011b52:	4420      	add	r0, r4
 8011b54:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	4770      	bx	lr

08011b5c <_TwistWithCovariance__max_serialized_size>:
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	b510      	push	{r4, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	2100      	movs	r1, #0
 8011b64:	f10d 0007 	add.w	r0, sp, #7
 8011b68:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b6c:	f7fa fd2e 	bl	800c5cc <max_serialized_size_geometry_msgs__msg__Twist>
 8011b70:	2108      	movs	r1, #8
 8011b72:	4604      	mov	r4, r0
 8011b74:	f7fc fa40 	bl	800dff8 <ucdr_alignment>
 8011b78:	4420      	add	r0, r4
 8011b7a:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011b7e:	b002      	add	sp, #8
 8011b80:	bd10      	pop	{r4, pc}
 8011b82:	bf00      	nop

08011b84 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	2301      	movs	r3, #1
 8011b88:	7003      	strb	r3, [r0, #0]
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	f7fa fd1e 	bl	800c5cc <max_serialized_size_geometry_msgs__msg__Twist>
 8011b90:	1825      	adds	r5, r4, r0
 8011b92:	4628      	mov	r0, r5
 8011b94:	2108      	movs	r1, #8
 8011b96:	f7fc fa2f 	bl	800dff8 <ucdr_alignment>
 8011b9a:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 8011b9e:	4420      	add	r0, r4
 8011ba0:	4428      	add	r0, r5
 8011ba2:	bd38      	pop	{r3, r4, r5, pc}

08011ba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8011ba4:	4800      	ldr	r0, [pc, #0]	; (8011ba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8011ba6:	4770      	bx	lr
 8011ba8:	2000025c 	.word	0x2000025c

08011bac <ucdr_serialize_endian_array_char>:
 8011bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	461e      	mov	r6, r3
 8011bb4:	4690      	mov	r8, r2
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	f7fc f9c8 	bl	800df4c <ucdr_check_buffer_available_for>
 8011bbc:	b9e0      	cbnz	r0, 8011bf8 <ucdr_serialize_endian_array_char+0x4c>
 8011bbe:	4637      	mov	r7, r6
 8011bc0:	e00a      	b.n	8011bd8 <ucdr_serialize_endian_array_char+0x2c>
 8011bc2:	462a      	mov	r2, r5
 8011bc4:	68a0      	ldr	r0, [r4, #8]
 8011bc6:	f007 ff11 	bl	80199ec <memcpy>
 8011bca:	68a2      	ldr	r2, [r4, #8]
 8011bcc:	6923      	ldr	r3, [r4, #16]
 8011bce:	442a      	add	r2, r5
 8011bd0:	442b      	add	r3, r5
 8011bd2:	1b7f      	subs	r7, r7, r5
 8011bd4:	60a2      	str	r2, [r4, #8]
 8011bd6:	6123      	str	r3, [r4, #16]
 8011bd8:	4639      	mov	r1, r7
 8011bda:	2201      	movs	r2, #1
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f7fc fa3d 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011be2:	1bf1      	subs	r1, r6, r7
 8011be4:	4605      	mov	r5, r0
 8011be6:	4441      	add	r1, r8
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d1ea      	bne.n	8011bc2 <ucdr_serialize_endian_array_char+0x16>
 8011bec:	2301      	movs	r3, #1
 8011bee:	7da0      	ldrb	r0, [r4, #22]
 8011bf0:	7563      	strb	r3, [r4, #21]
 8011bf2:	4058      	eors	r0, r3
 8011bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf8:	4632      	mov	r2, r6
 8011bfa:	4641      	mov	r1, r8
 8011bfc:	68a0      	ldr	r0, [r4, #8]
 8011bfe:	f007 fef5 	bl	80199ec <memcpy>
 8011c02:	68a2      	ldr	r2, [r4, #8]
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	4432      	add	r2, r6
 8011c08:	4433      	add	r3, r6
 8011c0a:	60a2      	str	r2, [r4, #8]
 8011c0c:	6123      	str	r3, [r4, #16]
 8011c0e:	e7ed      	b.n	8011bec <ucdr_serialize_endian_array_char+0x40>

08011c10 <ucdr_deserialize_endian_array_char>:
 8011c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	4619      	mov	r1, r3
 8011c16:	461e      	mov	r6, r3
 8011c18:	4690      	mov	r8, r2
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	f7fc f996 	bl	800df4c <ucdr_check_buffer_available_for>
 8011c20:	b9e0      	cbnz	r0, 8011c5c <ucdr_deserialize_endian_array_char+0x4c>
 8011c22:	4637      	mov	r7, r6
 8011c24:	e00a      	b.n	8011c3c <ucdr_deserialize_endian_array_char+0x2c>
 8011c26:	462a      	mov	r2, r5
 8011c28:	68a1      	ldr	r1, [r4, #8]
 8011c2a:	f007 fedf 	bl	80199ec <memcpy>
 8011c2e:	68a2      	ldr	r2, [r4, #8]
 8011c30:	6923      	ldr	r3, [r4, #16]
 8011c32:	442a      	add	r2, r5
 8011c34:	442b      	add	r3, r5
 8011c36:	1b7f      	subs	r7, r7, r5
 8011c38:	60a2      	str	r2, [r4, #8]
 8011c3a:	6123      	str	r3, [r4, #16]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	4639      	mov	r1, r7
 8011c40:	4620      	mov	r0, r4
 8011c42:	f7fc fa0b 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011c46:	4605      	mov	r5, r0
 8011c48:	1bf0      	subs	r0, r6, r7
 8011c4a:	4440      	add	r0, r8
 8011c4c:	2d00      	cmp	r5, #0
 8011c4e:	d1ea      	bne.n	8011c26 <ucdr_deserialize_endian_array_char+0x16>
 8011c50:	2301      	movs	r3, #1
 8011c52:	7da0      	ldrb	r0, [r4, #22]
 8011c54:	7563      	strb	r3, [r4, #21]
 8011c56:	4058      	eors	r0, r3
 8011c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	4640      	mov	r0, r8
 8011c60:	68a1      	ldr	r1, [r4, #8]
 8011c62:	f007 fec3 	bl	80199ec <memcpy>
 8011c66:	68a2      	ldr	r2, [r4, #8]
 8011c68:	6923      	ldr	r3, [r4, #16]
 8011c6a:	4432      	add	r2, r6
 8011c6c:	4433      	add	r3, r6
 8011c6e:	60a2      	str	r2, [r4, #8]
 8011c70:	6123      	str	r3, [r4, #16]
 8011c72:	e7ed      	b.n	8011c50 <ucdr_deserialize_endian_array_char+0x40>

08011c74 <ucdr_serialize_array_uint8_t>:
 8011c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c78:	4688      	mov	r8, r1
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	4616      	mov	r6, r2
 8011c7e:	4604      	mov	r4, r0
 8011c80:	f7fc f964 	bl	800df4c <ucdr_check_buffer_available_for>
 8011c84:	b9e0      	cbnz	r0, 8011cc0 <ucdr_serialize_array_uint8_t+0x4c>
 8011c86:	4637      	mov	r7, r6
 8011c88:	e00a      	b.n	8011ca0 <ucdr_serialize_array_uint8_t+0x2c>
 8011c8a:	462a      	mov	r2, r5
 8011c8c:	68a0      	ldr	r0, [r4, #8]
 8011c8e:	f007 fead 	bl	80199ec <memcpy>
 8011c92:	68a2      	ldr	r2, [r4, #8]
 8011c94:	6923      	ldr	r3, [r4, #16]
 8011c96:	442a      	add	r2, r5
 8011c98:	442b      	add	r3, r5
 8011c9a:	1b7f      	subs	r7, r7, r5
 8011c9c:	60a2      	str	r2, [r4, #8]
 8011c9e:	6123      	str	r3, [r4, #16]
 8011ca0:	4639      	mov	r1, r7
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f7fc f9d9 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011caa:	1bf1      	subs	r1, r6, r7
 8011cac:	4605      	mov	r5, r0
 8011cae:	4441      	add	r1, r8
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d1ea      	bne.n	8011c8a <ucdr_serialize_array_uint8_t+0x16>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	7da0      	ldrb	r0, [r4, #22]
 8011cb8:	7563      	strb	r3, [r4, #21]
 8011cba:	4058      	eors	r0, r3
 8011cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc0:	4632      	mov	r2, r6
 8011cc2:	4641      	mov	r1, r8
 8011cc4:	68a0      	ldr	r0, [r4, #8]
 8011cc6:	f007 fe91 	bl	80199ec <memcpy>
 8011cca:	68a3      	ldr	r3, [r4, #8]
 8011ccc:	6922      	ldr	r2, [r4, #16]
 8011cce:	4433      	add	r3, r6
 8011cd0:	4432      	add	r2, r6
 8011cd2:	60a3      	str	r3, [r4, #8]
 8011cd4:	6122      	str	r2, [r4, #16]
 8011cd6:	e7ed      	b.n	8011cb4 <ucdr_serialize_array_uint8_t+0x40>

08011cd8 <ucdr_serialize_endian_array_uint8_t>:
 8011cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cdc:	4619      	mov	r1, r3
 8011cde:	461e      	mov	r6, r3
 8011ce0:	4690      	mov	r8, r2
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	f7fc f932 	bl	800df4c <ucdr_check_buffer_available_for>
 8011ce8:	b9e0      	cbnz	r0, 8011d24 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011cea:	4637      	mov	r7, r6
 8011cec:	e00a      	b.n	8011d04 <ucdr_serialize_endian_array_uint8_t+0x2c>
 8011cee:	462a      	mov	r2, r5
 8011cf0:	68a0      	ldr	r0, [r4, #8]
 8011cf2:	f007 fe7b 	bl	80199ec <memcpy>
 8011cf6:	68a2      	ldr	r2, [r4, #8]
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	442a      	add	r2, r5
 8011cfc:	442b      	add	r3, r5
 8011cfe:	1b7f      	subs	r7, r7, r5
 8011d00:	60a2      	str	r2, [r4, #8]
 8011d02:	6123      	str	r3, [r4, #16]
 8011d04:	4639      	mov	r1, r7
 8011d06:	2201      	movs	r2, #1
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f7fc f9a7 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011d0e:	1bf1      	subs	r1, r6, r7
 8011d10:	4605      	mov	r5, r0
 8011d12:	4441      	add	r1, r8
 8011d14:	2800      	cmp	r0, #0
 8011d16:	d1ea      	bne.n	8011cee <ucdr_serialize_endian_array_uint8_t+0x16>
 8011d18:	2301      	movs	r3, #1
 8011d1a:	7da0      	ldrb	r0, [r4, #22]
 8011d1c:	7563      	strb	r3, [r4, #21]
 8011d1e:	4058      	eors	r0, r3
 8011d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d24:	4632      	mov	r2, r6
 8011d26:	4641      	mov	r1, r8
 8011d28:	68a0      	ldr	r0, [r4, #8]
 8011d2a:	f007 fe5f 	bl	80199ec <memcpy>
 8011d2e:	68a2      	ldr	r2, [r4, #8]
 8011d30:	6923      	ldr	r3, [r4, #16]
 8011d32:	4432      	add	r2, r6
 8011d34:	4433      	add	r3, r6
 8011d36:	60a2      	str	r2, [r4, #8]
 8011d38:	6123      	str	r3, [r4, #16]
 8011d3a:	e7ed      	b.n	8011d18 <ucdr_serialize_endian_array_uint8_t+0x40>

08011d3c <ucdr_deserialize_array_uint8_t>:
 8011d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d40:	4688      	mov	r8, r1
 8011d42:	4611      	mov	r1, r2
 8011d44:	4616      	mov	r6, r2
 8011d46:	4604      	mov	r4, r0
 8011d48:	f7fc f900 	bl	800df4c <ucdr_check_buffer_available_for>
 8011d4c:	b9e0      	cbnz	r0, 8011d88 <ucdr_deserialize_array_uint8_t+0x4c>
 8011d4e:	4637      	mov	r7, r6
 8011d50:	e00a      	b.n	8011d68 <ucdr_deserialize_array_uint8_t+0x2c>
 8011d52:	462a      	mov	r2, r5
 8011d54:	68a1      	ldr	r1, [r4, #8]
 8011d56:	f007 fe49 	bl	80199ec <memcpy>
 8011d5a:	68a2      	ldr	r2, [r4, #8]
 8011d5c:	6923      	ldr	r3, [r4, #16]
 8011d5e:	442a      	add	r2, r5
 8011d60:	442b      	add	r3, r5
 8011d62:	1b7f      	subs	r7, r7, r5
 8011d64:	60a2      	str	r2, [r4, #8]
 8011d66:	6123      	str	r3, [r4, #16]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	4639      	mov	r1, r7
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f7fc f975 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011d72:	4605      	mov	r5, r0
 8011d74:	1bf0      	subs	r0, r6, r7
 8011d76:	4440      	add	r0, r8
 8011d78:	2d00      	cmp	r5, #0
 8011d7a:	d1ea      	bne.n	8011d52 <ucdr_deserialize_array_uint8_t+0x16>
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	7da0      	ldrb	r0, [r4, #22]
 8011d80:	7563      	strb	r3, [r4, #21]
 8011d82:	4058      	eors	r0, r3
 8011d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d88:	4632      	mov	r2, r6
 8011d8a:	4640      	mov	r0, r8
 8011d8c:	68a1      	ldr	r1, [r4, #8]
 8011d8e:	f007 fe2d 	bl	80199ec <memcpy>
 8011d92:	68a3      	ldr	r3, [r4, #8]
 8011d94:	6922      	ldr	r2, [r4, #16]
 8011d96:	4433      	add	r3, r6
 8011d98:	4432      	add	r2, r6
 8011d9a:	60a3      	str	r3, [r4, #8]
 8011d9c:	6122      	str	r2, [r4, #16]
 8011d9e:	e7ed      	b.n	8011d7c <ucdr_deserialize_array_uint8_t+0x40>

08011da0 <ucdr_deserialize_endian_array_uint8_t>:
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	4619      	mov	r1, r3
 8011da6:	461e      	mov	r6, r3
 8011da8:	4690      	mov	r8, r2
 8011daa:	4604      	mov	r4, r0
 8011dac:	f7fc f8ce 	bl	800df4c <ucdr_check_buffer_available_for>
 8011db0:	b9e0      	cbnz	r0, 8011dec <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011db2:	4637      	mov	r7, r6
 8011db4:	e00a      	b.n	8011dcc <ucdr_deserialize_endian_array_uint8_t+0x2c>
 8011db6:	462a      	mov	r2, r5
 8011db8:	68a1      	ldr	r1, [r4, #8]
 8011dba:	f007 fe17 	bl	80199ec <memcpy>
 8011dbe:	68a2      	ldr	r2, [r4, #8]
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	442a      	add	r2, r5
 8011dc4:	442b      	add	r3, r5
 8011dc6:	1b7f      	subs	r7, r7, r5
 8011dc8:	60a2      	str	r2, [r4, #8]
 8011dca:	6123      	str	r3, [r4, #16]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	4639      	mov	r1, r7
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f7fc f943 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	1bf0      	subs	r0, r6, r7
 8011dda:	4440      	add	r0, r8
 8011ddc:	2d00      	cmp	r5, #0
 8011dde:	d1ea      	bne.n	8011db6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011de0:	2301      	movs	r3, #1
 8011de2:	7da0      	ldrb	r0, [r4, #22]
 8011de4:	7563      	strb	r3, [r4, #21]
 8011de6:	4058      	eors	r0, r3
 8011de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dec:	4632      	mov	r2, r6
 8011dee:	4640      	mov	r0, r8
 8011df0:	68a1      	ldr	r1, [r4, #8]
 8011df2:	f007 fdfb 	bl	80199ec <memcpy>
 8011df6:	68a2      	ldr	r2, [r4, #8]
 8011df8:	6923      	ldr	r3, [r4, #16]
 8011dfa:	4432      	add	r2, r6
 8011dfc:	4433      	add	r3, r6
 8011dfe:	60a2      	str	r2, [r4, #8]
 8011e00:	6123      	str	r3, [r4, #16]
 8011e02:	e7ed      	b.n	8011de0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08011e04 <ucdr_serialize_endian_array_float>:
 8011e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e08:	460f      	mov	r7, r1
 8011e0a:	2104      	movs	r1, #4
 8011e0c:	4605      	mov	r5, r0
 8011e0e:	4614      	mov	r4, r2
 8011e10:	461e      	mov	r6, r3
 8011e12:	f7fc f8f9 	bl	800e008 <ucdr_buffer_alignment>
 8011e16:	f895 8015 	ldrb.w	r8, [r5, #21]
 8011e1a:	4601      	mov	r1, r0
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7fc f939 	bl	800e094 <ucdr_advance_buffer>
 8011e22:	2f01      	cmp	r7, #1
 8011e24:	f885 8015 	strb.w	r8, [r5, #21]
 8011e28:	d010      	beq.n	8011e4c <ucdr_serialize_endian_array_float+0x48>
 8011e2a:	b156      	cbz	r6, 8011e42 <ucdr_serialize_endian_array_float+0x3e>
 8011e2c:	3c04      	subs	r4, #4
 8011e2e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011e32:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8011e36:	4639      	mov	r1, r7
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f7fb fc1f 	bl	800d67c <ucdr_serialize_endian_float>
 8011e3e:	42b4      	cmp	r4, r6
 8011e40:	d1f7      	bne.n	8011e32 <ucdr_serialize_endian_array_float+0x2e>
 8011e42:	7da8      	ldrb	r0, [r5, #22]
 8011e44:	f080 0001 	eor.w	r0, r0, #1
 8011e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e4c:	00b6      	lsls	r6, r6, #2
 8011e4e:	4631      	mov	r1, r6
 8011e50:	4628      	mov	r0, r5
 8011e52:	f7fc f87b 	bl	800df4c <ucdr_check_buffer_available_for>
 8011e56:	b9f8      	cbnz	r0, 8011e98 <ucdr_serialize_endian_array_float+0x94>
 8011e58:	46b0      	mov	r8, r6
 8011e5a:	e00b      	b.n	8011e74 <ucdr_serialize_endian_array_float+0x70>
 8011e5c:	463a      	mov	r2, r7
 8011e5e:	68a8      	ldr	r0, [r5, #8]
 8011e60:	f007 fdc4 	bl	80199ec <memcpy>
 8011e64:	68aa      	ldr	r2, [r5, #8]
 8011e66:	692b      	ldr	r3, [r5, #16]
 8011e68:	443a      	add	r2, r7
 8011e6a:	443b      	add	r3, r7
 8011e6c:	eba8 0807 	sub.w	r8, r8, r7
 8011e70:	60aa      	str	r2, [r5, #8]
 8011e72:	612b      	str	r3, [r5, #16]
 8011e74:	4641      	mov	r1, r8
 8011e76:	2204      	movs	r2, #4
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f7fc f8ef 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011e7e:	eba6 0108 	sub.w	r1, r6, r8
 8011e82:	4607      	mov	r7, r0
 8011e84:	4421      	add	r1, r4
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d1e8      	bne.n	8011e5c <ucdr_serialize_endian_array_float+0x58>
 8011e8a:	2304      	movs	r3, #4
 8011e8c:	7da8      	ldrb	r0, [r5, #22]
 8011e8e:	756b      	strb	r3, [r5, #21]
 8011e90:	f080 0001 	eor.w	r0, r0, #1
 8011e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e98:	4632      	mov	r2, r6
 8011e9a:	4621      	mov	r1, r4
 8011e9c:	68a8      	ldr	r0, [r5, #8]
 8011e9e:	f007 fda5 	bl	80199ec <memcpy>
 8011ea2:	68aa      	ldr	r2, [r5, #8]
 8011ea4:	692b      	ldr	r3, [r5, #16]
 8011ea6:	4432      	add	r2, r6
 8011ea8:	441e      	add	r6, r3
 8011eaa:	60aa      	str	r2, [r5, #8]
 8011eac:	612e      	str	r6, [r5, #16]
 8011eae:	e7ec      	b.n	8011e8a <ucdr_serialize_endian_array_float+0x86>

08011eb0 <ucdr_deserialize_endian_array_float>:
 8011eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb4:	460f      	mov	r7, r1
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	4605      	mov	r5, r0
 8011eba:	4614      	mov	r4, r2
 8011ebc:	461e      	mov	r6, r3
 8011ebe:	f7fc f8a3 	bl	800e008 <ucdr_buffer_alignment>
 8011ec2:	f895 8015 	ldrb.w	r8, [r5, #21]
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f7fc f8e3 	bl	800e094 <ucdr_advance_buffer>
 8011ece:	2f01      	cmp	r7, #1
 8011ed0:	f885 8015 	strb.w	r8, [r5, #21]
 8011ed4:	d00f      	beq.n	8011ef6 <ucdr_deserialize_endian_array_float+0x46>
 8011ed6:	b14e      	cbz	r6, 8011eec <ucdr_deserialize_endian_array_float+0x3c>
 8011ed8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011edc:	4622      	mov	r2, r4
 8011ede:	4639      	mov	r1, r7
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	3404      	adds	r4, #4
 8011ee4:	f7fb fc62 	bl	800d7ac <ucdr_deserialize_endian_float>
 8011ee8:	42a6      	cmp	r6, r4
 8011eea:	d1f7      	bne.n	8011edc <ucdr_deserialize_endian_array_float+0x2c>
 8011eec:	7da8      	ldrb	r0, [r5, #22]
 8011eee:	f080 0001 	eor.w	r0, r0, #1
 8011ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ef6:	00b6      	lsls	r6, r6, #2
 8011ef8:	4631      	mov	r1, r6
 8011efa:	4628      	mov	r0, r5
 8011efc:	f7fc f826 	bl	800df4c <ucdr_check_buffer_available_for>
 8011f00:	b9f8      	cbnz	r0, 8011f42 <ucdr_deserialize_endian_array_float+0x92>
 8011f02:	46b0      	mov	r8, r6
 8011f04:	e00b      	b.n	8011f1e <ucdr_deserialize_endian_array_float+0x6e>
 8011f06:	463a      	mov	r2, r7
 8011f08:	68a9      	ldr	r1, [r5, #8]
 8011f0a:	f007 fd6f 	bl	80199ec <memcpy>
 8011f0e:	68aa      	ldr	r2, [r5, #8]
 8011f10:	692b      	ldr	r3, [r5, #16]
 8011f12:	443a      	add	r2, r7
 8011f14:	443b      	add	r3, r7
 8011f16:	eba8 0807 	sub.w	r8, r8, r7
 8011f1a:	60aa      	str	r2, [r5, #8]
 8011f1c:	612b      	str	r3, [r5, #16]
 8011f1e:	2204      	movs	r2, #4
 8011f20:	4641      	mov	r1, r8
 8011f22:	4628      	mov	r0, r5
 8011f24:	f7fc f89a 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011f28:	4607      	mov	r7, r0
 8011f2a:	eba6 0008 	sub.w	r0, r6, r8
 8011f2e:	4420      	add	r0, r4
 8011f30:	2f00      	cmp	r7, #0
 8011f32:	d1e8      	bne.n	8011f06 <ucdr_deserialize_endian_array_float+0x56>
 8011f34:	2304      	movs	r3, #4
 8011f36:	7da8      	ldrb	r0, [r5, #22]
 8011f38:	756b      	strb	r3, [r5, #21]
 8011f3a:	f080 0001 	eor.w	r0, r0, #1
 8011f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f42:	4632      	mov	r2, r6
 8011f44:	4620      	mov	r0, r4
 8011f46:	68a9      	ldr	r1, [r5, #8]
 8011f48:	f007 fd50 	bl	80199ec <memcpy>
 8011f4c:	68aa      	ldr	r2, [r5, #8]
 8011f4e:	692b      	ldr	r3, [r5, #16]
 8011f50:	4432      	add	r2, r6
 8011f52:	441e      	add	r6, r3
 8011f54:	60aa      	str	r2, [r5, #8]
 8011f56:	612e      	str	r6, [r5, #16]
 8011f58:	e7ec      	b.n	8011f34 <ucdr_deserialize_endian_array_float+0x84>
 8011f5a:	bf00      	nop

08011f5c <ucdr_serialize_array_double>:
 8011f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f60:	460d      	mov	r5, r1
 8011f62:	2108      	movs	r1, #8
 8011f64:	4604      	mov	r4, r0
 8011f66:	4616      	mov	r6, r2
 8011f68:	f7fc f84e 	bl	800e008 <ucdr_buffer_alignment>
 8011f6c:	4601      	mov	r1, r0
 8011f6e:	4620      	mov	r0, r4
 8011f70:	7d67      	ldrb	r7, [r4, #21]
 8011f72:	f7fc f88f 	bl	800e094 <ucdr_advance_buffer>
 8011f76:	7d21      	ldrb	r1, [r4, #20]
 8011f78:	7567      	strb	r7, [r4, #21]
 8011f7a:	2901      	cmp	r1, #1
 8011f7c:	d011      	beq.n	8011fa2 <ucdr_serialize_array_double+0x46>
 8011f7e:	b15e      	cbz	r6, 8011f98 <ucdr_serialize_array_double+0x3c>
 8011f80:	3d08      	subs	r5, #8
 8011f82:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8011f86:	e000      	b.n	8011f8a <ucdr_serialize_array_double+0x2e>
 8011f88:	7d21      	ldrb	r1, [r4, #20]
 8011f8a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f7fb fd72 	bl	800da78 <ucdr_serialize_endian_double>
 8011f94:	42b5      	cmp	r5, r6
 8011f96:	d1f7      	bne.n	8011f88 <ucdr_serialize_array_double+0x2c>
 8011f98:	7da0      	ldrb	r0, [r4, #22]
 8011f9a:	f080 0001 	eor.w	r0, r0, #1
 8011f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa2:	00f6      	lsls	r6, r6, #3
 8011fa4:	4631      	mov	r1, r6
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f7fb ffd0 	bl	800df4c <ucdr_check_buffer_available_for>
 8011fac:	b9f8      	cbnz	r0, 8011fee <ucdr_serialize_array_double+0x92>
 8011fae:	46b0      	mov	r8, r6
 8011fb0:	e00b      	b.n	8011fca <ucdr_serialize_array_double+0x6e>
 8011fb2:	463a      	mov	r2, r7
 8011fb4:	68a0      	ldr	r0, [r4, #8]
 8011fb6:	f007 fd19 	bl	80199ec <memcpy>
 8011fba:	68a2      	ldr	r2, [r4, #8]
 8011fbc:	6923      	ldr	r3, [r4, #16]
 8011fbe:	443a      	add	r2, r7
 8011fc0:	443b      	add	r3, r7
 8011fc2:	eba8 0807 	sub.w	r8, r8, r7
 8011fc6:	60a2      	str	r2, [r4, #8]
 8011fc8:	6123      	str	r3, [r4, #16]
 8011fca:	4641      	mov	r1, r8
 8011fcc:	2208      	movs	r2, #8
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f7fc f844 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 8011fd4:	eba6 0108 	sub.w	r1, r6, r8
 8011fd8:	4607      	mov	r7, r0
 8011fda:	4429      	add	r1, r5
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d1e8      	bne.n	8011fb2 <ucdr_serialize_array_double+0x56>
 8011fe0:	2308      	movs	r3, #8
 8011fe2:	7da0      	ldrb	r0, [r4, #22]
 8011fe4:	7563      	strb	r3, [r4, #21]
 8011fe6:	f080 0001 	eor.w	r0, r0, #1
 8011fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fee:	4632      	mov	r2, r6
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	68a0      	ldr	r0, [r4, #8]
 8011ff4:	f007 fcfa 	bl	80199ec <memcpy>
 8011ff8:	68a2      	ldr	r2, [r4, #8]
 8011ffa:	6923      	ldr	r3, [r4, #16]
 8011ffc:	4432      	add	r2, r6
 8011ffe:	441e      	add	r6, r3
 8012000:	60a2      	str	r2, [r4, #8]
 8012002:	6126      	str	r6, [r4, #16]
 8012004:	e7ec      	b.n	8011fe0 <ucdr_serialize_array_double+0x84>
 8012006:	bf00      	nop

08012008 <ucdr_deserialize_array_double>:
 8012008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801200c:	460d      	mov	r5, r1
 801200e:	2108      	movs	r1, #8
 8012010:	4604      	mov	r4, r0
 8012012:	4616      	mov	r6, r2
 8012014:	f7fb fff8 	bl	800e008 <ucdr_buffer_alignment>
 8012018:	4601      	mov	r1, r0
 801201a:	4620      	mov	r0, r4
 801201c:	7d67      	ldrb	r7, [r4, #21]
 801201e:	f7fc f839 	bl	800e094 <ucdr_advance_buffer>
 8012022:	7d21      	ldrb	r1, [r4, #20]
 8012024:	7567      	strb	r7, [r4, #21]
 8012026:	2901      	cmp	r1, #1
 8012028:	d010      	beq.n	801204c <ucdr_deserialize_array_double+0x44>
 801202a:	b156      	cbz	r6, 8012042 <ucdr_deserialize_array_double+0x3a>
 801202c:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012030:	e000      	b.n	8012034 <ucdr_deserialize_array_double+0x2c>
 8012032:	7d21      	ldrb	r1, [r4, #20]
 8012034:	462a      	mov	r2, r5
 8012036:	4620      	mov	r0, r4
 8012038:	3508      	adds	r5, #8
 801203a:	f7fb feb5 	bl	800dda8 <ucdr_deserialize_endian_double>
 801203e:	42ae      	cmp	r6, r5
 8012040:	d1f7      	bne.n	8012032 <ucdr_deserialize_array_double+0x2a>
 8012042:	7da0      	ldrb	r0, [r4, #22]
 8012044:	f080 0001 	eor.w	r0, r0, #1
 8012048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204c:	00f6      	lsls	r6, r6, #3
 801204e:	4631      	mov	r1, r6
 8012050:	4620      	mov	r0, r4
 8012052:	f7fb ff7b 	bl	800df4c <ucdr_check_buffer_available_for>
 8012056:	b9f8      	cbnz	r0, 8012098 <ucdr_deserialize_array_double+0x90>
 8012058:	46b0      	mov	r8, r6
 801205a:	e00b      	b.n	8012074 <ucdr_deserialize_array_double+0x6c>
 801205c:	463a      	mov	r2, r7
 801205e:	68a1      	ldr	r1, [r4, #8]
 8012060:	f007 fcc4 	bl	80199ec <memcpy>
 8012064:	68a2      	ldr	r2, [r4, #8]
 8012066:	6923      	ldr	r3, [r4, #16]
 8012068:	443a      	add	r2, r7
 801206a:	443b      	add	r3, r7
 801206c:	eba8 0807 	sub.w	r8, r8, r7
 8012070:	60a2      	str	r2, [r4, #8]
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	2208      	movs	r2, #8
 8012076:	4641      	mov	r1, r8
 8012078:	4620      	mov	r0, r4
 801207a:	f7fb ffef 	bl	800e05c <ucdr_check_final_buffer_behavior_array>
 801207e:	4607      	mov	r7, r0
 8012080:	eba6 0008 	sub.w	r0, r6, r8
 8012084:	4428      	add	r0, r5
 8012086:	2f00      	cmp	r7, #0
 8012088:	d1e8      	bne.n	801205c <ucdr_deserialize_array_double+0x54>
 801208a:	2308      	movs	r3, #8
 801208c:	7da0      	ldrb	r0, [r4, #22]
 801208e:	7563      	strb	r3, [r4, #21]
 8012090:	f080 0001 	eor.w	r0, r0, #1
 8012094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012098:	4632      	mov	r2, r6
 801209a:	4628      	mov	r0, r5
 801209c:	68a1      	ldr	r1, [r4, #8]
 801209e:	f007 fca5 	bl	80199ec <memcpy>
 80120a2:	68a2      	ldr	r2, [r4, #8]
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	4432      	add	r2, r6
 80120a8:	441e      	add	r6, r3
 80120aa:	60a2      	str	r2, [r4, #8]
 80120ac:	6126      	str	r6, [r4, #16]
 80120ae:	e7ec      	b.n	801208a <ucdr_deserialize_array_double+0x82>

080120b0 <ucdr_serialize_sequence_char>:
 80120b0:	b570      	push	{r4, r5, r6, lr}
 80120b2:	4615      	mov	r5, r2
 80120b4:	460e      	mov	r6, r1
 80120b6:	7d01      	ldrb	r1, [r0, #20]
 80120b8:	4604      	mov	r4, r0
 80120ba:	f7fa fe09 	bl	800ccd0 <ucdr_serialize_endian_uint32_t>
 80120be:	b90d      	cbnz	r5, 80120c4 <ucdr_serialize_sequence_char+0x14>
 80120c0:	2001      	movs	r0, #1
 80120c2:	bd70      	pop	{r4, r5, r6, pc}
 80120c4:	462b      	mov	r3, r5
 80120c6:	4632      	mov	r2, r6
 80120c8:	4620      	mov	r0, r4
 80120ca:	7d21      	ldrb	r1, [r4, #20]
 80120cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120d0:	f7ff bd6c 	b.w	8011bac <ucdr_serialize_endian_array_char>

080120d4 <ucdr_deserialize_sequence_char>:
 80120d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d8:	461d      	mov	r5, r3
 80120da:	4616      	mov	r6, r2
 80120dc:	460f      	mov	r7, r1
 80120de:	461a      	mov	r2, r3
 80120e0:	7d01      	ldrb	r1, [r0, #20]
 80120e2:	4604      	mov	r4, r0
 80120e4:	f7fa ff1c 	bl	800cf20 <ucdr_deserialize_endian_uint32_t>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	429e      	cmp	r6, r3
 80120ec:	bf3c      	itt	cc
 80120ee:	2201      	movcc	r2, #1
 80120f0:	75a2      	strbcc	r2, [r4, #22]
 80120f2:	b913      	cbnz	r3, 80120fa <ucdr_deserialize_sequence_char+0x26>
 80120f4:	2001      	movs	r0, #1
 80120f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120fa:	463a      	mov	r2, r7
 80120fc:	4620      	mov	r0, r4
 80120fe:	7d21      	ldrb	r1, [r4, #20]
 8012100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012104:	f7ff bd84 	b.w	8011c10 <ucdr_deserialize_endian_array_char>

08012108 <ucdr_serialize_sequence_uint8_t>:
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	4615      	mov	r5, r2
 801210c:	460e      	mov	r6, r1
 801210e:	7d01      	ldrb	r1, [r0, #20]
 8012110:	4604      	mov	r4, r0
 8012112:	f7fa fddd 	bl	800ccd0 <ucdr_serialize_endian_uint32_t>
 8012116:	b90d      	cbnz	r5, 801211c <ucdr_serialize_sequence_uint8_t+0x14>
 8012118:	2001      	movs	r0, #1
 801211a:	bd70      	pop	{r4, r5, r6, pc}
 801211c:	462b      	mov	r3, r5
 801211e:	4632      	mov	r2, r6
 8012120:	4620      	mov	r0, r4
 8012122:	7d21      	ldrb	r1, [r4, #20]
 8012124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012128:	f7ff bdd6 	b.w	8011cd8 <ucdr_serialize_endian_array_uint8_t>

0801212c <ucdr_deserialize_sequence_uint8_t>:
 801212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012130:	461d      	mov	r5, r3
 8012132:	4616      	mov	r6, r2
 8012134:	460f      	mov	r7, r1
 8012136:	461a      	mov	r2, r3
 8012138:	7d01      	ldrb	r1, [r0, #20]
 801213a:	4604      	mov	r4, r0
 801213c:	f7fa fef0 	bl	800cf20 <ucdr_deserialize_endian_uint32_t>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	429e      	cmp	r6, r3
 8012144:	bf3c      	itt	cc
 8012146:	2201      	movcc	r2, #1
 8012148:	75a2      	strbcc	r2, [r4, #22]
 801214a:	b913      	cbnz	r3, 8012152 <ucdr_deserialize_sequence_uint8_t+0x26>
 801214c:	2001      	movs	r0, #1
 801214e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012152:	463a      	mov	r2, r7
 8012154:	4620      	mov	r0, r4
 8012156:	7d21      	ldrb	r1, [r4, #20]
 8012158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801215c:	f7ff be20 	b.w	8011da0 <ucdr_deserialize_endian_array_uint8_t>

08012160 <ucdr_serialize_sequence_float>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	4615      	mov	r5, r2
 8012164:	460e      	mov	r6, r1
 8012166:	7d01      	ldrb	r1, [r0, #20]
 8012168:	4604      	mov	r4, r0
 801216a:	f7fa fdb1 	bl	800ccd0 <ucdr_serialize_endian_uint32_t>
 801216e:	b90d      	cbnz	r5, 8012174 <ucdr_serialize_sequence_float+0x14>
 8012170:	2001      	movs	r0, #1
 8012172:	bd70      	pop	{r4, r5, r6, pc}
 8012174:	462b      	mov	r3, r5
 8012176:	4632      	mov	r2, r6
 8012178:	4620      	mov	r0, r4
 801217a:	7d21      	ldrb	r1, [r4, #20]
 801217c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012180:	f7ff be40 	b.w	8011e04 <ucdr_serialize_endian_array_float>

08012184 <ucdr_deserialize_sequence_float>:
 8012184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012188:	461d      	mov	r5, r3
 801218a:	4616      	mov	r6, r2
 801218c:	460f      	mov	r7, r1
 801218e:	461a      	mov	r2, r3
 8012190:	7d01      	ldrb	r1, [r0, #20]
 8012192:	4604      	mov	r4, r0
 8012194:	f7fa fec4 	bl	800cf20 <ucdr_deserialize_endian_uint32_t>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	429e      	cmp	r6, r3
 801219c:	bf3c      	itt	cc
 801219e:	2201      	movcc	r2, #1
 80121a0:	75a2      	strbcc	r2, [r4, #22]
 80121a2:	b913      	cbnz	r3, 80121aa <ucdr_deserialize_sequence_float+0x26>
 80121a4:	2001      	movs	r0, #1
 80121a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121aa:	463a      	mov	r2, r7
 80121ac:	4620      	mov	r0, r4
 80121ae:	7d21      	ldrb	r1, [r4, #20]
 80121b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121b4:	f7ff be7c 	b.w	8011eb0 <ucdr_deserialize_endian_array_float>

080121b8 <uxr_buffer_delete_entity>:
 80121b8:	b510      	push	{r4, lr}
 80121ba:	2303      	movs	r3, #3
 80121bc:	2400      	movs	r4, #0
 80121be:	b08e      	sub	sp, #56	; 0x38
 80121c0:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	2204      	movs	r2, #4
 80121c8:	ab06      	add	r3, sp, #24
 80121ca:	4604      	mov	r4, r0
 80121cc:	9103      	str	r1, [sp, #12]
 80121ce:	f001 fa17 	bl	8013600 <uxr_prepare_stream_to_write_submessage>
 80121d2:	b918      	cbnz	r0, 80121dc <uxr_buffer_delete_entity+0x24>
 80121d4:	4604      	mov	r4, r0
 80121d6:	4620      	mov	r0, r4
 80121d8:	b00e      	add	sp, #56	; 0x38
 80121da:	bd10      	pop	{r4, pc}
 80121dc:	9902      	ldr	r1, [sp, #8]
 80121de:	aa05      	add	r2, sp, #20
 80121e0:	4620      	mov	r0, r4
 80121e2:	f001 fb3f 	bl	8013864 <uxr_init_base_object_request>
 80121e6:	4604      	mov	r4, r0
 80121e8:	a905      	add	r1, sp, #20
 80121ea:	a806      	add	r0, sp, #24
 80121ec:	f003 f88a 	bl	8015304 <uxr_serialize_DELETE_Payload>
 80121f0:	4620      	mov	r0, r4
 80121f2:	b00e      	add	sp, #56	; 0x38
 80121f4:	bd10      	pop	{r4, pc}
 80121f6:	bf00      	nop

080121f8 <uxr_common_create_entity>:
 80121f8:	b530      	push	{r4, r5, lr}
 80121fa:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80121fe:	b08d      	sub	sp, #52	; 0x34
 8012200:	2d01      	cmp	r5, #1
 8012202:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012206:	bf18      	it	ne
 8012208:	2200      	movne	r2, #0
 801220a:	4604      	mov	r4, r0
 801220c:	f04f 0101 	mov.w	r1, #1
 8012210:	bf08      	it	eq
 8012212:	f003 0201 	andeq.w	r2, r3, #1
 8012216:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801221a:	330e      	adds	r3, #14
 801221c:	441a      	add	r2, r3
 801221e:	e9cd 1000 	strd	r1, r0, [sp]
 8012222:	b292      	uxth	r2, r2
 8012224:	4620      	mov	r0, r4
 8012226:	9903      	ldr	r1, [sp, #12]
 8012228:	ab04      	add	r3, sp, #16
 801222a:	f001 f9e9 	bl	8013600 <uxr_prepare_stream_to_write_submessage>
 801222e:	b918      	cbnz	r0, 8012238 <uxr_common_create_entity+0x40>
 8012230:	4604      	mov	r4, r0
 8012232:	4620      	mov	r0, r4
 8012234:	b00d      	add	sp, #52	; 0x34
 8012236:	bd30      	pop	{r4, r5, pc}
 8012238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801223a:	9902      	ldr	r1, [sp, #8]
 801223c:	4620      	mov	r0, r4
 801223e:	f001 fb11 	bl	8013864 <uxr_init_base_object_request>
 8012242:	4604      	mov	r4, r0
 8012244:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012246:	a804      	add	r0, sp, #16
 8012248:	f002 ffc4 	bl	80151d4 <uxr_serialize_CREATE_Payload>
 801224c:	4620      	mov	r0, r4
 801224e:	b00d      	add	sp, #52	; 0x34
 8012250:	bd30      	pop	{r4, r5, pc}
 8012252:	bf00      	nop

08012254 <uxr_buffer_create_participant_bin>:
 8012254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012258:	f04f 0c00 	mov.w	ip, #0
 801225c:	f04f 0e03 	mov.w	lr, #3
 8012260:	2701      	movs	r7, #1
 8012262:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8012266:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8012268:	ac11      	add	r4, sp, #68	; 0x44
 801226a:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 801226e:	f884 e008 	strb.w	lr, [r4, #8]
 8012272:	7127      	strb	r7, [r4, #4]
 8012274:	4605      	mov	r5, r0
 8012276:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801227a:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 801227e:	f88d c014 	strb.w	ip, [sp, #20]
 8012282:	b1de      	cbz	r6, 80122bc <uxr_buffer_create_participant_bin+0x68>
 8012284:	f88d 701c 	strb.w	r7, [sp, #28]
 8012288:	9608      	str	r6, [sp, #32]
 801228a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801228e:	a809      	add	r0, sp, #36	; 0x24
 8012290:	a915      	add	r1, sp, #84	; 0x54
 8012292:	f7fb fead 	bl	800dff0 <ucdr_init_buffer>
 8012296:	a905      	add	r1, sp, #20
 8012298:	a809      	add	r0, sp, #36	; 0x24
 801229a:	f002 fc2d 	bl	8014af8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801229e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80122a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80122a4:	9401      	str	r4, [sp, #4]
 80122a6:	f8cd 8000 	str.w	r8, [sp]
 80122aa:	4628      	mov	r0, r5
 80122ac:	b2b3      	uxth	r3, r6
 80122ae:	60e6      	str	r6, [r4, #12]
 80122b0:	f7ff ffa2 	bl	80121f8 <uxr_common_create_entity>
 80122b4:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	f88d 601c 	strb.w	r6, [sp, #28]
 80122c0:	e7e3      	b.n	801228a <uxr_buffer_create_participant_bin+0x36>
 80122c2:	bf00      	nop

080122c4 <uxr_buffer_create_topic_bin>:
 80122c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122c6:	2602      	movs	r6, #2
 80122c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80122cc:	4605      	mov	r5, r0
 80122ce:	9105      	str	r1, [sp, #20]
 80122d0:	4618      	mov	r0, r3
 80122d2:	a997      	add	r1, sp, #604	; 0x25c
 80122d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80122d8:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 80122dc:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 80122e0:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 80122e2:	f000 fa61 	bl	80127a8 <uxr_object_id_to_raw>
 80122e6:	2203      	movs	r2, #3
 80122e8:	2101      	movs	r1, #1
 80122ea:	2300      	movs	r3, #0
 80122ec:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 80122f0:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 80122f2:	a80b      	add	r0, sp, #44	; 0x2c
 80122f4:	9206      	str	r2, [sp, #24]
 80122f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80122fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122fe:	a917      	add	r1, sp, #92	; 0x5c
 8012300:	f88d 301c 	strb.w	r3, [sp, #28]
 8012304:	960a      	str	r6, [sp, #40]	; 0x28
 8012306:	f7fb fe73 	bl	800dff0 <ucdr_init_buffer>
 801230a:	a906      	add	r1, sp, #24
 801230c:	a80b      	add	r0, sp, #44	; 0x2c
 801230e:	f002 fc15 	bl	8014b3c <uxr_serialize_OBJK_Topic_Binary>
 8012312:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012316:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012318:	ac13      	add	r4, sp, #76	; 0x4c
 801231a:	e9cd 7400 	strd	r7, r4, [sp]
 801231e:	4628      	mov	r0, r5
 8012320:	b2b3      	uxth	r3, r6
 8012322:	60e6      	str	r6, [r4, #12]
 8012324:	f7ff ff68 	bl	80121f8 <uxr_common_create_entity>
 8012328:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232e:	bf00      	nop

08012330 <uxr_buffer_create_publisher_bin>:
 8012330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012332:	2603      	movs	r6, #3
 8012334:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8012338:	4605      	mov	r5, r0
 801233a:	9105      	str	r1, [sp, #20]
 801233c:	4618      	mov	r0, r3
 801233e:	a992      	add	r1, sp, #584	; 0x248
 8012340:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012344:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8012348:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801234c:	f000 fa2c 	bl	80127a8 <uxr_object_id_to_raw>
 8012350:	2300      	movs	r3, #0
 8012352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012356:	a806      	add	r0, sp, #24
 8012358:	a912      	add	r1, sp, #72	; 0x48
 801235a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801235e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8012362:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8012366:	f7fb fe43 	bl	800dff0 <ucdr_init_buffer>
 801236a:	a993      	add	r1, sp, #588	; 0x24c
 801236c:	a806      	add	r0, sp, #24
 801236e:	f002 fc99 	bl	8014ca4 <uxr_serialize_OBJK_Publisher_Binary>
 8012372:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012376:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012378:	ac0e      	add	r4, sp, #56	; 0x38
 801237a:	9700      	str	r7, [sp, #0]
 801237c:	9401      	str	r4, [sp, #4]
 801237e:	4628      	mov	r0, r5
 8012380:	b2b3      	uxth	r3, r6
 8012382:	60e6      	str	r6, [r4, #12]
 8012384:	f7ff ff38 	bl	80121f8 <uxr_common_create_entity>
 8012388:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238e:	bf00      	nop

08012390 <uxr_buffer_create_subscriber_bin>:
 8012390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012392:	2604      	movs	r6, #4
 8012394:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8012398:	4605      	mov	r5, r0
 801239a:	9105      	str	r1, [sp, #20]
 801239c:	4618      	mov	r0, r3
 801239e:	a992      	add	r1, sp, #584	; 0x248
 80123a0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80123a4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80123a8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80123ac:	f000 f9fc 	bl	80127a8 <uxr_object_id_to_raw>
 80123b0:	2103      	movs	r1, #3
 80123b2:	2300      	movs	r3, #0
 80123b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123b8:	a806      	add	r0, sp, #24
 80123ba:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80123be:	a912      	add	r1, sp, #72	; 0x48
 80123c0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80123c4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80123c8:	f7fb fe12 	bl	800dff0 <ucdr_init_buffer>
 80123cc:	a993      	add	r1, sp, #588	; 0x24c
 80123ce:	a806      	add	r0, sp, #24
 80123d0:	f002 fd18 	bl	8014e04 <uxr_serialize_OBJK_Subscriber_Binary>
 80123d4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80123d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80123da:	ac0e      	add	r4, sp, #56	; 0x38
 80123dc:	9700      	str	r7, [sp, #0]
 80123de:	9401      	str	r4, [sp, #4]
 80123e0:	4628      	mov	r0, r5
 80123e2:	b2b3      	uxth	r3, r6
 80123e4:	60e6      	str	r6, [r4, #12]
 80123e6:	f7ff ff07 	bl	80121f8 <uxr_common_create_entity>
 80123ea:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80123ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123f0 <uxr_buffer_create_datawriter_bin>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	2705      	movs	r7, #5
 80123f6:	2603      	movs	r6, #3
 80123f8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80123fc:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 8012400:	9105      	str	r1, [sp, #20]
 8012402:	4605      	mov	r5, r0
 8012404:	a9a1      	add	r1, sp, #644	; 0x284
 8012406:	4618      	mov	r0, r3
 8012408:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 801240c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012410:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 8012414:	f000 f9c8 	bl	80127a8 <uxr_object_id_to_raw>
 8012418:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801241a:	a90e      	add	r1, sp, #56	; 0x38
 801241c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 8012420:	f000 f9c2 	bl	80127a8 <uxr_object_id_to_raw>
 8012424:	f1b8 0000 	subs.w	r0, r8, #0
 8012428:	f04f 0300 	mov.w	r3, #0
 801242c:	bf18      	it	ne
 801242e:	2001      	movne	r0, #1
 8012430:	2201      	movs	r2, #1
 8012432:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8012436:	ac1d      	add	r4, sp, #116	; 0x74
 8012438:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801243c:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8012440:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8012444:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012448:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801244c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012450:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012454:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012458:	bb89      	cbnz	r1, 80124be <uxr_buffer_create_datawriter_bin+0xce>
 801245a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801245e:	f04f 0823 	mov.w	r8, #35	; 0x23
 8012462:	f04f 0e13 	mov.w	lr, #19
 8012466:	f04f 0c0b 	mov.w	ip, #11
 801246a:	2221      	movs	r2, #33	; 0x21
 801246c:	2111      	movs	r1, #17
 801246e:	2009      	movs	r0, #9
 8012470:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8012474:	b923      	cbnz	r3, 8012480 <uxr_buffer_create_datawriter_bin+0x90>
 8012476:	4642      	mov	r2, r8
 8012478:	4671      	mov	r1, lr
 801247a:	4660      	mov	r0, ip
 801247c:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8012480:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8012484:	2b01      	cmp	r3, #1
 8012486:	d025      	beq.n	80124d4 <uxr_buffer_create_datawriter_bin+0xe4>
 8012488:	2b03      	cmp	r3, #3
 801248a:	d029      	beq.n	80124e0 <uxr_buffer_create_datawriter_bin+0xf0>
 801248c:	b32b      	cbz	r3, 80124da <uxr_buffer_create_datawriter_bin+0xea>
 801248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012492:	a806      	add	r0, sp, #24
 8012494:	a921      	add	r1, sp, #132	; 0x84
 8012496:	f7fb fdab 	bl	800dff0 <ucdr_init_buffer>
 801249a:	a90e      	add	r1, sp, #56	; 0x38
 801249c:	a806      	add	r0, sp, #24
 801249e:	f002 fd53 	bl	8014f48 <uxr_serialize_OBJK_DataWriter_Binary>
 80124a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80124a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80124a8:	9401      	str	r4, [sp, #4]
 80124aa:	9700      	str	r7, [sp, #0]
 80124ac:	4628      	mov	r0, r5
 80124ae:	b2b3      	uxth	r3, r6
 80124b0:	60e6      	str	r6, [r4, #12]
 80124b2:	f7ff fea1 	bl	80121f8 <uxr_common_create_entity>
 80124b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80124ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124be:	f04f 0822 	mov.w	r8, #34	; 0x22
 80124c2:	f04f 0e12 	mov.w	lr, #18
 80124c6:	f04f 0c0a 	mov.w	ip, #10
 80124ca:	2220      	movs	r2, #32
 80124cc:	2110      	movs	r1, #16
 80124ce:	2008      	movs	r0, #8
 80124d0:	2602      	movs	r6, #2
 80124d2:	e7cd      	b.n	8012470 <uxr_buffer_create_datawriter_bin+0x80>
 80124d4:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80124d8:	e7d9      	b.n	801248e <uxr_buffer_create_datawriter_bin+0x9e>
 80124da:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80124de:	e7d6      	b.n	801248e <uxr_buffer_create_datawriter_bin+0x9e>
 80124e0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80124e4:	e7d3      	b.n	801248e <uxr_buffer_create_datawriter_bin+0x9e>
 80124e6:	bf00      	nop

080124e8 <uxr_buffer_create_datareader_bin>:
 80124e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ec:	2706      	movs	r7, #6
 80124ee:	2603      	movs	r6, #3
 80124f0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80124f4:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 80124f8:	9105      	str	r1, [sp, #20]
 80124fa:	4605      	mov	r5, r0
 80124fc:	a9a3      	add	r1, sp, #652	; 0x28c
 80124fe:	4618      	mov	r0, r3
 8012500:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 8012504:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012508:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 801250c:	f000 f94c 	bl	80127a8 <uxr_object_id_to_raw>
 8012510:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8012512:	a90e      	add	r1, sp, #56	; 0x38
 8012514:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 8012518:	f000 f946 	bl	80127a8 <uxr_object_id_to_raw>
 801251c:	f1b8 0000 	subs.w	r0, r8, #0
 8012520:	f04f 0300 	mov.w	r3, #0
 8012524:	bf18      	it	ne
 8012526:	2001      	movne	r0, #1
 8012528:	2201      	movs	r2, #1
 801252a:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 801252e:	ac1f      	add	r4, sp, #124	; 0x7c
 8012530:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8012534:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8012538:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801253c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8012540:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012544:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8012548:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801254c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012550:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012554:	bb89      	cbnz	r1, 80125ba <uxr_buffer_create_datareader_bin+0xd2>
 8012556:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801255a:	f04f 0823 	mov.w	r8, #35	; 0x23
 801255e:	f04f 0e13 	mov.w	lr, #19
 8012562:	f04f 0c0b 	mov.w	ip, #11
 8012566:	2221      	movs	r2, #33	; 0x21
 8012568:	2111      	movs	r1, #17
 801256a:	2009      	movs	r0, #9
 801256c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8012570:	b923      	cbnz	r3, 801257c <uxr_buffer_create_datareader_bin+0x94>
 8012572:	4642      	mov	r2, r8
 8012574:	4671      	mov	r1, lr
 8012576:	4660      	mov	r0, ip
 8012578:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801257c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8012580:	2b01      	cmp	r3, #1
 8012582:	d025      	beq.n	80125d0 <uxr_buffer_create_datareader_bin+0xe8>
 8012584:	2b03      	cmp	r3, #3
 8012586:	d029      	beq.n	80125dc <uxr_buffer_create_datareader_bin+0xf4>
 8012588:	b32b      	cbz	r3, 80125d6 <uxr_buffer_create_datareader_bin+0xee>
 801258a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801258e:	a806      	add	r0, sp, #24
 8012590:	a923      	add	r1, sp, #140	; 0x8c
 8012592:	f7fb fd2d 	bl	800dff0 <ucdr_init_buffer>
 8012596:	a90e      	add	r1, sp, #56	; 0x38
 8012598:	a806      	add	r0, sp, #24
 801259a:	f002 fc99 	bl	8014ed0 <uxr_serialize_OBJK_DataReader_Binary>
 801259e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80125a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80125a4:	9401      	str	r4, [sp, #4]
 80125a6:	9700      	str	r7, [sp, #0]
 80125a8:	4628      	mov	r0, r5
 80125aa:	b2b3      	uxth	r3, r6
 80125ac:	60e6      	str	r6, [r4, #12]
 80125ae:	f7ff fe23 	bl	80121f8 <uxr_common_create_entity>
 80125b2:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ba:	f04f 0822 	mov.w	r8, #34	; 0x22
 80125be:	f04f 0e12 	mov.w	lr, #18
 80125c2:	f04f 0c0a 	mov.w	ip, #10
 80125c6:	2220      	movs	r2, #32
 80125c8:	2110      	movs	r1, #16
 80125ca:	2008      	movs	r0, #8
 80125cc:	2602      	movs	r6, #2
 80125ce:	e7cd      	b.n	801256c <uxr_buffer_create_datareader_bin+0x84>
 80125d0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80125d4:	e7d9      	b.n	801258a <uxr_buffer_create_datareader_bin+0xa2>
 80125d6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80125da:	e7d6      	b.n	801258a <uxr_buffer_create_datareader_bin+0xa2>
 80125dc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80125e0:	e7d3      	b.n	801258a <uxr_buffer_create_datareader_bin+0xa2>
 80125e2:	bf00      	nop

080125e4 <get_custom_error>:
 80125e4:	4b01      	ldr	r3, [pc, #4]	; (80125ec <get_custom_error+0x8>)
 80125e6:	7818      	ldrb	r0, [r3, #0]
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	20006854 	.word	0x20006854

080125f0 <recv_custom_msg>:
 80125f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f4:	2600      	movs	r6, #0
 80125f6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80125fa:	b089      	sub	sp, #36	; 0x24
 80125fc:	4604      	mov	r4, r0
 80125fe:	468a      	mov	sl, r1
 8012600:	4693      	mov	fp, r2
 8012602:	9305      	str	r3, [sp, #20]
 8012604:	f88d 601e 	strb.w	r6, [sp, #30]
 8012608:	b325      	cbz	r5, 8012654 <recv_custom_msg+0x64>
 801260a:	f44f 7900 	mov.w	r9, #512	; 0x200
 801260e:	f200 2802 	addw	r8, r0, #514	; 0x202
 8012612:	f10d 071f 	add.w	r7, sp, #31
 8012616:	ae05      	add	r6, sp, #20
 8012618:	f10d 051e 	add.w	r5, sp, #30
 801261c:	e002      	b.n	8012624 <recv_custom_msg+0x34>
 801261e:	9b05      	ldr	r3, [sp, #20]
 8012620:	2b00      	cmp	r3, #0
 8012622:	dd0f      	ble.n	8012644 <recv_custom_msg+0x54>
 8012624:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012628:	e9cd 9500 	strd	r9, r5, [sp]
 801262c:	4623      	mov	r3, r4
 801262e:	4622      	mov	r2, r4
 8012630:	4640      	mov	r0, r8
 8012632:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8012636:	f001 fb3d 	bl	8013cb4 <uxr_read_framed_msg>
 801263a:	2800      	cmp	r0, #0
 801263c:	d0ef      	beq.n	801261e <recv_custom_msg+0x2e>
 801263e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012642:	b1b3      	cbz	r3, 8012672 <recv_custom_msg+0x82>
 8012644:	2000      	movs	r0, #0
 8012646:	4b0f      	ldr	r3, [pc, #60]	; (8012684 <recv_custom_msg+0x94>)
 8012648:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	b009      	add	sp, #36	; 0x24
 8012650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	f10d 021f 	add.w	r2, sp, #31
 8012658:	9200      	str	r2, [sp, #0]
 801265a:	4601      	mov	r1, r0
 801265c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012660:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012664:	47a8      	blx	r5
 8012666:	2800      	cmp	r0, #0
 8012668:	d0ec      	beq.n	8012644 <recv_custom_msg+0x54>
 801266a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1e8      	bne.n	8012644 <recv_custom_msg+0x54>
 8012672:	f8cb 0000 	str.w	r0, [fp]
 8012676:	2001      	movs	r0, #1
 8012678:	f8ca 4000 	str.w	r4, [sl]
 801267c:	b009      	add	sp, #36	; 0x24
 801267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012682:	bf00      	nop
 8012684:	20006854 	.word	0x20006854

08012688 <send_custom_msg>:
 8012688:	b570      	push	{r4, r5, r6, lr}
 801268a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801268e:	4616      	mov	r6, r2
 8012690:	b086      	sub	sp, #24
 8012692:	b975      	cbnz	r5, 80126b2 <send_custom_msg+0x2a>
 8012694:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012698:	f10d 0317 	add.w	r3, sp, #23
 801269c:	47a0      	blx	r4
 801269e:	b108      	cbz	r0, 80126a4 <send_custom_msg+0x1c>
 80126a0:	42b0      	cmp	r0, r6
 80126a2:	d015      	beq.n	80126d0 <send_custom_msg+0x48>
 80126a4:	2000      	movs	r0, #0
 80126a6:	4b0c      	ldr	r3, [pc, #48]	; (80126d8 <send_custom_msg+0x50>)
 80126a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80126ac:	701a      	strb	r2, [r3, #0]
 80126ae:	b006      	add	sp, #24
 80126b0:	bd70      	pop	{r4, r5, r6, pc}
 80126b2:	460b      	mov	r3, r1
 80126b4:	2100      	movs	r1, #0
 80126b6:	e9cd 6100 	strd	r6, r1, [sp]
 80126ba:	f10d 0217 	add.w	r2, sp, #23
 80126be:	9202      	str	r2, [sp, #8]
 80126c0:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80126c4:	4602      	mov	r2, r0
 80126c6:	f200 2002 	addw	r0, r0, #514	; 0x202
 80126ca:	f001 f901 	bl	80138d0 <uxr_write_framed_msg>
 80126ce:	e7e6      	b.n	801269e <send_custom_msg+0x16>
 80126d0:	2001      	movs	r0, #1
 80126d2:	b006      	add	sp, #24
 80126d4:	bd70      	pop	{r4, r5, r6, pc}
 80126d6:	bf00      	nop
 80126d8:	20006854 	.word	0x20006854

080126dc <uxr_set_custom_transport_callbacks>:
 80126dc:	b430      	push	{r4, r5}
 80126de:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80126e2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80126e6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80126ea:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80126ee:	bc30      	pop	{r4, r5}
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop

080126f4 <uxr_init_custom_transport>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80126fa:	b303      	cbz	r3, 801273e <uxr_init_custom_transport+0x4a>
 80126fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8012700:	4604      	mov	r4, r0
 8012702:	b1e2      	cbz	r2, 801273e <uxr_init_custom_transport+0x4a>
 8012704:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8012708:	b1ca      	cbz	r2, 801273e <uxr_init_custom_transport+0x4a>
 801270a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801270e:	b1b2      	cbz	r2, 801273e <uxr_init_custom_transport+0x4a>
 8012710:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8012714:	4798      	blx	r3
 8012716:	4605      	mov	r5, r0
 8012718:	b188      	cbz	r0, 801273e <uxr_init_custom_transport+0x4a>
 801271a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801271e:	b98b      	cbnz	r3, 8012744 <uxr_init_custom_transport+0x50>
 8012720:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012724:	490a      	ldr	r1, [pc, #40]	; (8012750 <uxr_init_custom_transport+0x5c>)
 8012726:	4a0b      	ldr	r2, [pc, #44]	; (8012754 <uxr_init_custom_transport+0x60>)
 8012728:	4b0b      	ldr	r3, [pc, #44]	; (8012758 <uxr_init_custom_transport+0x64>)
 801272a:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 801272e:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 8012732:	4628      	mov	r0, r5
 8012734:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8012738:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 801273c:	bd38      	pop	{r3, r4, r5, pc}
 801273e:	2500      	movs	r5, #0
 8012740:	4628      	mov	r0, r5
 8012742:	bd38      	pop	{r3, r4, r5, pc}
 8012744:	2100      	movs	r1, #0
 8012746:	f204 2002 	addw	r0, r4, #514	; 0x202
 801274a:	f001 f8bb 	bl	80138c4 <uxr_init_framing_io>
 801274e:	e7e7      	b.n	8012720 <uxr_init_custom_transport+0x2c>
 8012750:	08012689 	.word	0x08012689
 8012754:	080125f1 	.word	0x080125f1
 8012758:	080125e5 	.word	0x080125e5

0801275c <uxr_close_custom_transport>:
 801275c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012760:	4718      	bx	r3
 8012762:	bf00      	nop

08012764 <uxr_object_id>:
 8012764:	2300      	movs	r3, #0
 8012766:	b082      	sub	sp, #8
 8012768:	f88d 1006 	strb.w	r1, [sp, #6]
 801276c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012770:	f360 030f 	bfi	r3, r0, #0, #16
 8012774:	f362 431f 	bfi	r3, r2, #16, #16
 8012778:	4618      	mov	r0, r3
 801277a:	b002      	add	sp, #8
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop

08012780 <uxr_object_id_from_raw>:
 8012780:	4602      	mov	r2, r0
 8012782:	2000      	movs	r0, #0
 8012784:	7853      	ldrb	r3, [r2, #1]
 8012786:	b082      	sub	sp, #8
 8012788:	7812      	ldrb	r2, [r2, #0]
 801278a:	f003 010f 	and.w	r1, r3, #15
 801278e:	f88d 1006 	strb.w	r1, [sp, #6]
 8012792:	091b      	lsrs	r3, r3, #4
 8012794:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8012798:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801279c:	f363 000f 	bfi	r0, r3, #0, #16
 80127a0:	f362 401f 	bfi	r0, r2, #16, #16
 80127a4:	b002      	add	sp, #8
 80127a6:	4770      	bx	lr

080127a8 <uxr_object_id_to_raw>:
 80127a8:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80127ac:	b082      	sub	sp, #8
 80127ae:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80127b2:	f3c0 100b 	ubfx	r0, r0, #4, #12
 80127b6:	7008      	strb	r0, [r1, #0]
 80127b8:	704b      	strb	r3, [r1, #1]
 80127ba:	b002      	add	sp, #8
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop

080127c0 <uxr_buffer_request_data>:
 80127c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c2:	b095      	sub	sp, #84	; 0x54
 80127c4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80127c6:	2600      	movs	r6, #0
 80127c8:	2d00      	cmp	r5, #0
 80127ca:	bf14      	ite	ne
 80127cc:	2701      	movne	r7, #1
 80127ce:	2700      	moveq	r7, #0
 80127d0:	4604      	mov	r4, r0
 80127d2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80127d6:	9303      	str	r3, [sp, #12]
 80127d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80127dc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80127e0:	f88d 601d 	strb.w	r6, [sp, #29]
 80127e4:	f88d 601e 	strb.w	r6, [sp, #30]
 80127e8:	d021      	beq.n	801282e <uxr_buffer_request_data+0x6e>
 80127ea:	686a      	ldr	r2, [r5, #4]
 80127ec:	682b      	ldr	r3, [r5, #0]
 80127ee:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 80127f2:	2210      	movs	r2, #16
 80127f4:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80127f8:	2308      	movs	r3, #8
 80127fa:	2100      	movs	r1, #0
 80127fc:	4620      	mov	r0, r4
 80127fe:	e9cd 3100 	strd	r3, r1, [sp]
 8012802:	9905      	ldr	r1, [sp, #20]
 8012804:	ab0c      	add	r3, sp, #48	; 0x30
 8012806:	f000 fefb 	bl	8013600 <uxr_prepare_stream_to_write_submessage>
 801280a:	b918      	cbnz	r0, 8012814 <uxr_buffer_request_data+0x54>
 801280c:	4604      	mov	r4, r0
 801280e:	4620      	mov	r0, r4
 8012810:	b015      	add	sp, #84	; 0x54
 8012812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012814:	9904      	ldr	r1, [sp, #16]
 8012816:	aa06      	add	r2, sp, #24
 8012818:	4620      	mov	r0, r4
 801281a:	f001 f823 	bl	8013864 <uxr_init_base_object_request>
 801281e:	4604      	mov	r4, r0
 8012820:	a906      	add	r1, sp, #24
 8012822:	a80c      	add	r0, sp, #48	; 0x30
 8012824:	f002 fdcc 	bl	80153c0 <uxr_serialize_READ_DATA_Payload>
 8012828:	4620      	mov	r0, r4
 801282a:	b015      	add	sp, #84	; 0x54
 801282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801282e:	2208      	movs	r2, #8
 8012830:	e7e2      	b.n	80127f8 <uxr_buffer_request_data+0x38>
 8012832:	bf00      	nop

08012834 <uxr_buffer_cancel_data>:
 8012834:	b530      	push	{r4, r5, lr}
 8012836:	2308      	movs	r3, #8
 8012838:	2400      	movs	r4, #0
 801283a:	2501      	movs	r5, #1
 801283c:	b095      	sub	sp, #84	; 0x54
 801283e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8012842:	9300      	str	r3, [sp, #0]
 8012844:	9205      	str	r2, [sp, #20]
 8012846:	ab0c      	add	r3, sp, #48	; 0x30
 8012848:	2210      	movs	r2, #16
 801284a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801284e:	f88d 401e 	strb.w	r4, [sp, #30]
 8012852:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8012856:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 801285a:	9103      	str	r1, [sp, #12]
 801285c:	4604      	mov	r4, r0
 801285e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012862:	f000 fecd 	bl	8013600 <uxr_prepare_stream_to_write_submessage>
 8012866:	b918      	cbnz	r0, 8012870 <uxr_buffer_cancel_data+0x3c>
 8012868:	4604      	mov	r4, r0
 801286a:	4620      	mov	r0, r4
 801286c:	b015      	add	sp, #84	; 0x54
 801286e:	bd30      	pop	{r4, r5, pc}
 8012870:	9905      	ldr	r1, [sp, #20]
 8012872:	aa06      	add	r2, sp, #24
 8012874:	4620      	mov	r0, r4
 8012876:	f000 fff5 	bl	8013864 <uxr_init_base_object_request>
 801287a:	4604      	mov	r4, r0
 801287c:	a906      	add	r1, sp, #24
 801287e:	a80c      	add	r0, sp, #48	; 0x30
 8012880:	f002 fd9e 	bl	80153c0 <uxr_serialize_READ_DATA_Payload>
 8012884:	4620      	mov	r0, r4
 8012886:	b015      	add	sp, #84	; 0x54
 8012888:	bd30      	pop	{r4, r5, pc}
 801288a:	bf00      	nop

0801288c <read_submessage_format>:
 801288c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012890:	b095      	sub	sp, #84	; 0x54
 8012892:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8012896:	b113      	cbz	r3, 801289e <read_submessage_format+0x12>
 8012898:	b015      	add	sp, #84	; 0x54
 801289a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801289e:	460c      	mov	r4, r1
 80128a0:	4606      	mov	r6, r0
 80128a2:	4690      	mov	r8, r2
 80128a4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80128a8:	a80c      	add	r0, sp, #48	; 0x30
 80128aa:	1a52      	subs	r2, r2, r1
 80128ac:	461d      	mov	r5, r3
 80128ae:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 80128b2:	e9cd 7304 	strd	r7, r3, [sp, #16]
 80128b6:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 80128ba:	f7fb fb99 	bl	800dff0 <ucdr_init_buffer>
 80128be:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80128c2:	a80c      	add	r0, sp, #48	; 0x30
 80128c4:	f7fb fb6a 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 80128c8:	69e3      	ldr	r3, [r4, #28]
 80128ca:	b17b      	cbz	r3, 80128ec <read_submessage_format+0x60>
 80128cc:	2f07      	cmp	r7, #7
 80128ce:	751d      	strb	r5, [r3, #20]
 80128d0:	d03a      	beq.n	8012948 <read_submessage_format+0xbc>
 80128d2:	2f08      	cmp	r7, #8
 80128d4:	d029      	beq.n	801292a <read_submessage_format+0x9e>
 80128d6:	2f06      	cmp	r7, #6
 80128d8:	d00e      	beq.n	80128f8 <read_submessage_format+0x6c>
 80128da:	2201      	movs	r2, #1
 80128dc:	751a      	strb	r2, [r3, #20]
 80128de:	4641      	mov	r1, r8
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7fb fbd7 	bl	800e094 <ucdr_advance_buffer>
 80128e6:	b015      	add	sp, #84	; 0x54
 80128e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ec:	2f07      	cmp	r7, #7
 80128ee:	d02b      	beq.n	8012948 <read_submessage_format+0xbc>
 80128f0:	2f08      	cmp	r7, #8
 80128f2:	d01a      	beq.n	801292a <read_submessage_format+0x9e>
 80128f4:	2f06      	cmp	r7, #6
 80128f6:	d1f2      	bne.n	80128de <read_submessage_format+0x52>
 80128f8:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 80128fc:	b195      	cbz	r5, 8012924 <read_submessage_format+0x98>
 80128fe:	2206      	movs	r2, #6
 8012900:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8012904:	f88d 2016 	strb.w	r2, [sp, #22]
 8012908:	aa0c      	add	r2, sp, #48	; 0x30
 801290a:	9200      	str	r2, [sp, #0]
 801290c:	9302      	str	r3, [sp, #8]
 801290e:	464a      	mov	r2, r9
 8012910:	9b04      	ldr	r3, [sp, #16]
 8012912:	4630      	mov	r0, r6
 8012914:	9905      	ldr	r1, [sp, #20]
 8012916:	f8cd 8004 	str.w	r8, [sp, #4]
 801291a:	47a8      	blx	r5
 801291c:	2201      	movs	r2, #1
 801291e:	69e3      	ldr	r3, [r4, #28]
 8012920:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1d8      	bne.n	80128da <read_submessage_format+0x4e>
 8012928:	e7d9      	b.n	80128de <read_submessage_format+0x52>
 801292a:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801292e:	2a00      	cmp	r2, #0
 8012930:	d0f8      	beq.n	8012924 <read_submessage_format+0x98>
 8012932:	a906      	add	r1, sp, #24
 8012934:	a80c      	add	r0, sp, #48	; 0x30
 8012936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012938:	f002 fe16 	bl	8015568 <uxr_deserialize_SampleIdentity>
 801293c:	2800      	cmp	r0, #0
 801293e:	d13c      	bne.n	80129ba <read_submessage_format+0x12e>
 8012940:	69e3      	ldr	r3, [r4, #28]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d1c9      	bne.n	80128da <read_submessage_format+0x4e>
 8012946:	e7ca      	b.n	80128de <read_submessage_format+0x52>
 8012948:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 801294c:	b132      	cbz	r2, 801295c <read_submessage_format+0xd0>
 801294e:	a906      	add	r1, sp, #24
 8012950:	a80c      	add	r0, sp, #48	; 0x30
 8012952:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012954:	f002 fbd2 	bl	80150fc <uxr_deserialize_BaseObjectRequest>
 8012958:	b930      	cbnz	r0, 8012968 <read_submessage_format+0xdc>
 801295a:	69e3      	ldr	r3, [r4, #28]
 801295c:	68a2      	ldr	r2, [r4, #8]
 801295e:	4442      	add	r2, r8
 8012960:	60a2      	str	r2, [r4, #8]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d1b9      	bne.n	80128da <read_submessage_format+0x4e>
 8012966:	e7ba      	b.n	80128de <read_submessage_format+0x52>
 8012968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801296a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801296e:	a80c      	add	r0, sp, #48	; 0x30
 8012970:	1a52      	subs	r2, r2, r1
 8012972:	1aed      	subs	r5, r5, r3
 8012974:	f7fb fb3c 	bl	800dff0 <ucdr_init_buffer>
 8012978:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801297c:	a80c      	add	r0, sp, #48	; 0x30
 801297e:	f7fb fb0d 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 8012982:	2107      	movs	r1, #7
 8012984:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8012988:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801298c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 8012990:	4445      	add	r5, r8
 8012992:	b2ad      	uxth	r5, r5
 8012994:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012998:	aa0c      	add	r2, sp, #48	; 0x30
 801299a:	9200      	str	r2, [sp, #0]
 801299c:	9002      	str	r0, [sp, #8]
 801299e:	f88d 1016 	strb.w	r1, [sp, #22]
 80129a2:	9501      	str	r5, [sp, #4]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	464a      	mov	r2, r9
 80129a8:	4630      	mov	r0, r6
 80129aa:	9905      	ldr	r1, [sp, #20]
 80129ac:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 80129b0:	47a8      	blx	r5
 80129b2:	2301      	movs	r3, #1
 80129b4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80129b8:	e7cf      	b.n	801295a <read_submessage_format+0xce>
 80129ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80129bc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80129c0:	a80c      	add	r0, sp, #48	; 0x30
 80129c2:	1a52      	subs	r2, r2, r1
 80129c4:	1aed      	subs	r5, r5, r3
 80129c6:	f7fb fb13 	bl	800dff0 <ucdr_init_buffer>
 80129ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80129ce:	a80c      	add	r0, sp, #48	; 0x30
 80129d0:	f7fb fae4 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 80129d4:	2308      	movs	r3, #8
 80129d6:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 80129da:	4445      	add	r5, r8
 80129dc:	f88d 3016 	strb.w	r3, [sp, #22]
 80129e0:	b2ad      	uxth	r5, r5
 80129e2:	ab0c      	add	r3, sp, #48	; 0x30
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	9002      	str	r0, [sp, #8]
 80129e8:	9501      	str	r5, [sp, #4]
 80129ea:	ab06      	add	r3, sp, #24
 80129ec:	464a      	mov	r2, r9
 80129ee:	4630      	mov	r0, r6
 80129f0:	9905      	ldr	r1, [sp, #20]
 80129f2:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 80129f6:	47a8      	blx	r5
 80129f8:	2301      	movs	r3, #1
 80129fa:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80129fe:	e79f      	b.n	8012940 <read_submessage_format+0xb4>

08012a00 <on_get_fragmentation_info>:
 8012a00:	b500      	push	{lr}
 8012a02:	b08b      	sub	sp, #44	; 0x2c
 8012a04:	4601      	mov	r1, r0
 8012a06:	2204      	movs	r2, #4
 8012a08:	a802      	add	r0, sp, #8
 8012a0a:	f7fb faf1 	bl	800dff0 <ucdr_init_buffer>
 8012a0e:	f10d 0305 	add.w	r3, sp, #5
 8012a12:	a802      	add	r0, sp, #8
 8012a14:	f10d 0206 	add.w	r2, sp, #6
 8012a18:	a901      	add	r1, sp, #4
 8012a1a:	f001 fd1f 	bl	801445c <uxr_read_submessage_header>
 8012a1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012a22:	2b0d      	cmp	r3, #13
 8012a24:	d003      	beq.n	8012a2e <on_get_fragmentation_info+0x2e>
 8012a26:	2000      	movs	r0, #0
 8012a28:	b00b      	add	sp, #44	; 0x2c
 8012a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012a32:	f013 0f02 	tst.w	r3, #2
 8012a36:	bf14      	ite	ne
 8012a38:	2002      	movne	r0, #2
 8012a3a:	2001      	moveq	r0, #1
 8012a3c:	b00b      	add	sp, #44	; 0x2c
 8012a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a42:	bf00      	nop

08012a44 <write_submessage_acknack.isra.0>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	4614      	mov	r4, r2
 8012a48:	b092      	sub	sp, #72	; 0x48
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	460e      	mov	r6, r1
 8012a4e:	f000 ff01 	bl	8013854 <uxr_session_header_offset>
 8012a52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012a56:	9000      	str	r0, [sp, #0]
 8012a58:	a905      	add	r1, sp, #20
 8012a5a:	a80a      	add	r0, sp, #40	; 0x28
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	2211      	movs	r2, #17
 8012a60:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8012a64:	f7fb fab2 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8012a68:	3450      	adds	r4, #80	; 0x50
 8012a6a:	2205      	movs	r2, #5
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	210a      	movs	r1, #10
 8012a70:	a80a      	add	r0, sp, #40	; 0x28
 8012a72:	f001 fcd9 	bl	8014428 <uxr_buffer_submessage_header>
 8012a76:	a903      	add	r1, sp, #12
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f006 f97d 	bl	8018d78 <uxr_compute_acknack>
 8012a7e:	a903      	add	r1, sp, #12
 8012a80:	ba43      	rev16	r3, r0
 8012a82:	a80a      	add	r0, sp, #40	; 0x28
 8012a84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012a88:	f88d 6010 	strb.w	r6, [sp, #16]
 8012a8c:	f002 fcbc 	bl	8015408 <uxr_serialize_ACKNACK_Payload>
 8012a90:	2200      	movs	r2, #0
 8012a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a94:	4611      	mov	r1, r2
 8012a96:	4628      	mov	r0, r5
 8012a98:	f000 fe88 	bl	80137ac <uxr_stamp_session_header>
 8012a9c:	a80a      	add	r0, sp, #40	; 0x28
 8012a9e:	f7fb fad5 	bl	800e04c <ucdr_buffer_length>
 8012aa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012aaa:	a905      	add	r1, sp, #20
 8012aac:	47a0      	blx	r4
 8012aae:	b012      	add	sp, #72	; 0x48
 8012ab0:	bd70      	pop	{r4, r5, r6, pc}
 8012ab2:	bf00      	nop

08012ab4 <uxr_acknack_pong.part.0>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	2400      	movs	r4, #0
 8012ab8:	4605      	mov	r5, r0
 8012aba:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8012abe:	f10d 0306 	add.w	r3, sp, #6
 8012ac2:	a901      	add	r1, sp, #4
 8012ac4:	f10d 0205 	add.w	r2, sp, #5
 8012ac8:	f88d 4004 	strb.w	r4, [sp, #4]
 8012acc:	f88d 4005 	strb.w	r4, [sp, #5]
 8012ad0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012ad4:	f001 fef8 	bl	80148c8 <uxr_deserialize_submessage_header>
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f7fb fabb 	bl	800e054 <ucdr_buffer_remaining>
 8012ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012ae2:	4298      	cmp	r0, r3
 8012ae4:	d31d      	bcc.n	8012b22 <uxr_acknack_pong.part.0+0x6e>
 8012ae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012aea:	2b06      	cmp	r3, #6
 8012aec:	d003      	beq.n	8012af6 <uxr_acknack_pong.part.0+0x42>
 8012aee:	4620      	mov	r0, r4
 8012af0:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8012af4:	bd70      	pop	{r4, r5, r6, pc}
 8012af6:	a902      	add	r1, sp, #8
 8012af8:	4628      	mov	r0, r5
 8012afa:	f002 fb0f 	bl	801511c <uxr_deserialize_BaseObjectReply>
 8012afe:	a904      	add	r1, sp, #16
 8012b00:	4604      	mov	r4, r0
 8012b02:	4628      	mov	r0, r5
 8012b04:	f7f9 fe1a 	bl	800c73c <ucdr_deserialize_bool>
 8012b08:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012b0c:	4004      	ands	r4, r0
 8012b0e:	b2e4      	uxtb	r4, r4
 8012b10:	bb23      	cbnz	r3, 8012b5c <uxr_acknack_pong.part.0+0xa8>
 8012b12:	4628      	mov	r0, r5
 8012b14:	a989      	add	r1, sp, #548	; 0x224
 8012b16:	f7f9 fe11 	bl	800c73c <ucdr_deserialize_bool>
 8012b1a:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 8012b1e:	4606      	mov	r6, r0
 8012b20:	b91b      	cbnz	r3, 8012b2a <uxr_acknack_pong.part.0+0x76>
 8012b22:	2000      	movs	r0, #0
 8012b24:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	a98a      	add	r1, sp, #552	; 0x228
 8012b2e:	f7f9 fe33 	bl	800c798 <ucdr_deserialize_uint8_t>
 8012b32:	4226      	tst	r6, r4
 8012b34:	d0f5      	beq.n	8012b22 <uxr_acknack_pong.part.0+0x6e>
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0f3      	beq.n	8012b22 <uxr_acknack_pong.part.0+0x6e>
 8012b3a:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 8012b3e:	2b0d      	cmp	r3, #13
 8012b40:	d1ef      	bne.n	8012b22 <uxr_acknack_pong.part.0+0x6e>
 8012b42:	4628      	mov	r0, r5
 8012b44:	a98c      	add	r1, sp, #560	; 0x230
 8012b46:	f7fa fbfd 	bl	800d344 <ucdr_deserialize_int16_t>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d0ea      	beq.n	8012b24 <uxr_acknack_pong.part.0+0x70>
 8012b4e:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 8012b52:	2c00      	cmp	r4, #0
 8012b54:	bfd4      	ite	le
 8012b56:	2000      	movle	r0, #0
 8012b58:	2001      	movgt	r0, #1
 8012b5a:	e7e3      	b.n	8012b24 <uxr_acknack_pong.part.0+0x70>
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	a905      	add	r1, sp, #20
 8012b60:	f002 fa1e 	bl	8014fa0 <uxr_deserialize_ObjectVariant>
 8012b64:	4004      	ands	r4, r0
 8012b66:	e7d4      	b.n	8012b12 <uxr_acknack_pong.part.0+0x5e>

08012b68 <read_submessage_list>:
 8012b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	460d      	mov	r5, r1
 8012b70:	b099      	sub	sp, #100	; 0x64
 8012b72:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8012e68 <read_submessage_list+0x300>
 8012b76:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b78:	4628      	mov	r0, r5
 8012b7a:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8012b7e:	aa0e      	add	r2, sp, #56	; 0x38
 8012b80:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8012b84:	f001 fc6a 	bl	801445c <uxr_read_submessage_header>
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	f000 810d 	beq.w	8012da8 <read_submessage_list+0x240>
 8012b8e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8012b92:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8012b96:	3b04      	subs	r3, #4
 8012b98:	2b0b      	cmp	r3, #11
 8012b9a:	d8ed      	bhi.n	8012b78 <read_submessage_list+0x10>
 8012b9c:	a101      	add	r1, pc, #4	; (adr r1, 8012ba4 <read_submessage_list+0x3c>)
 8012b9e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ba2:	bf00      	nop
 8012ba4:	08012d99 	.word	0x08012d99
 8012ba8:	08012d8d 	.word	0x08012d8d
 8012bac:	08012b79 	.word	0x08012b79
 8012bb0:	08012b79 	.word	0x08012b79
 8012bb4:	08012b79 	.word	0x08012b79
 8012bb8:	08012ced 	.word	0x08012ced
 8012bbc:	08012c7d 	.word	0x08012c7d
 8012bc0:	08012c3b 	.word	0x08012c3b
 8012bc4:	08012b79 	.word	0x08012b79
 8012bc8:	08012b79 	.word	0x08012b79
 8012bcc:	08012b79 	.word	0x08012b79
 8012bd0:	08012bd5 	.word	0x08012bd5
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	a912      	add	r1, sp, #72	; 0x48
 8012bd8:	f002 fc74 	bl	80154c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012bdc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8012be0:	2e00      	cmp	r6, #0
 8012be2:	f000 8112 	beq.w	8012e0a <read_submessage_list+0x2a2>
 8012be6:	f001 fc81 	bl	80144ec <uxr_nanos>
 8012bea:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8012bec:	f04f 0900 	mov.w	r9, #0
 8012bf0:	46b8      	mov	r8, r7
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012bf6:	f04f 0c00 	mov.w	ip, #0
 8012bfa:	4683      	mov	fp, r0
 8012bfc:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8012bfe:	460b      	mov	r3, r1
 8012c00:	fbca 8907 	smlal	r8, r9, sl, r7
 8012c04:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8012c08:	46d8      	mov	r8, fp
 8012c0a:	46e1      	mov	r9, ip
 8012c0c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012c0e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012c10:	4608      	mov	r0, r1
 8012c12:	2100      	movs	r1, #0
 8012c14:	fbca 8907 	smlal	r8, r9, sl, r7
 8012c18:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012c1a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012c1e:	fbca 0107 	smlal	r0, r1, sl, r7
 8012c22:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 8012c26:	e9cd 0100 	strd	r0, r1, [sp]
 8012c2a:	9706      	str	r7, [sp, #24]
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	47b0      	blx	r6
 8012c30:	f04f 0301 	mov.w	r3, #1
 8012c34:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012c38:	e79e      	b.n	8012b78 <read_submessage_list+0x10>
 8012c3a:	a912      	add	r1, sp, #72	; 0x48
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	f002 fc21 	bl	8015484 <uxr_deserialize_HEARTBEAT_Payload>
 8012c42:	2100      	movs	r1, #0
 8012c44:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012c48:	f001 fade 	bl	8014208 <uxr_stream_id_from_raw>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012c52:	4631      	mov	r1, r6
 8012c54:	f104 0008 	add.w	r0, r4, #8
 8012c58:	9311      	str	r3, [sp, #68]	; 0x44
 8012c5a:	f001 fbc3 	bl	80143e4 <uxr_get_input_reliable_stream>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d08a      	beq.n	8012b78 <read_submessage_list+0x10>
 8012c62:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8012c66:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8012c6a:	f006 f879 	bl	8018d60 <uxr_process_heartbeat>
 8012c6e:	4632      	mov	r2, r6
 8012c70:	4620      	mov	r0, r4
 8012c72:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8012c76:	f7ff fee5 	bl	8012a44 <write_submessage_acknack.isra.0>
 8012c7a:	e77d      	b.n	8012b78 <read_submessage_list+0x10>
 8012c7c:	a912      	add	r1, sp, #72	; 0x48
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f002 fbd8 	bl	8015434 <uxr_deserialize_ACKNACK_Payload>
 8012c84:	2100      	movs	r1, #0
 8012c86:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012c8a:	f001 fabd 	bl	8014208 <uxr_stream_id_from_raw>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	f104 0008 	add.w	r0, r4, #8
 8012c94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012c98:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c9a:	f001 fb8d 	bl	80143b8 <uxr_get_output_reliable_stream>
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f43f af69 	beq.w	8012b78 <read_submessage_list+0x10>
 8012ca6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8012caa:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8012cae:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012cb2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012cb6:	b289      	uxth	r1, r1
 8012cb8:	f006 fb92 	bl	80193e0 <uxr_process_acknack>
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f006 fb55 	bl	801936c <uxr_begin_output_nack_buffer_it>
 8012cc2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012cc6:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012cca:	e005      	b.n	8012cd8 <read_submessage_list+0x170>
 8012ccc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012cd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012cd2:	e9d3 0700 	ldrd	r0, r7, [r3]
 8012cd6:	47b8      	blx	r7
 8012cd8:	4641      	mov	r1, r8
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8012ce0:	aa11      	add	r2, sp, #68	; 0x44
 8012ce2:	f006 fb45 	bl	8019370 <uxr_next_reliable_nack_buffer_to_send>
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d1f0      	bne.n	8012ccc <read_submessage_list+0x164>
 8012cea:	e745      	b.n	8012b78 <read_submessage_list+0x10>
 8012cec:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8012cf0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8012cf4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012cf8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012cfc:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8012d00:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8012d04:	4641      	mov	r1, r8
 8012d06:	4628      	mov	r0, r5
 8012d08:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 8012d0c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8012d10:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8012d14:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8012d18:	f002 f9f0 	bl	80150fc <uxr_deserialize_BaseObjectRequest>
 8012d1c:	4640      	mov	r0, r8
 8012d1e:	a911      	add	r1, sp, #68	; 0x44
 8012d20:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012d24:	f000 fdbc 	bl	80138a0 <uxr_parse_base_object_request>
 8012d28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012d2a:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 8012d2e:	3e04      	subs	r6, #4
 8012d30:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 8012d34:	f007 070e 	and.w	r7, r7, #14
 8012d38:	b2b6      	uxth	r6, r6
 8012d3a:	9112      	str	r1, [sp, #72]	; 0x48
 8012d3c:	f1b9 0f00 	cmp.w	r9, #0
 8012d40:	d006      	beq.n	8012d50 <read_submessage_list+0x1e8>
 8012d42:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012d46:	4642      	mov	r2, r8
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	47c8      	blx	r9
 8012d50:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8012d52:	b168      	cbz	r0, 8012d70 <read_submessage_list+0x208>
 8012d54:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012d56:	2300      	movs	r3, #0
 8012d58:	3902      	subs	r1, #2
 8012d5a:	e002      	b.n	8012d62 <read_submessage_list+0x1fa>
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	4283      	cmp	r3, r0
 8012d60:	d006      	beq.n	8012d70 <read_submessage_list+0x208>
 8012d62:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8012d66:	4542      	cmp	r2, r8
 8012d68:	d1f8      	bne.n	8012d5c <read_submessage_list+0x1f4>
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012d6e:	54d1      	strb	r1, [r2, r3]
 8012d70:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8012d74:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012d76:	463b      	mov	r3, r7
 8012d78:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8012d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012d7e:	4632      	mov	r2, r6
 8012d80:	9100      	str	r1, [sp, #0]
 8012d82:	4620      	mov	r0, r4
 8012d84:	4629      	mov	r1, r5
 8012d86:	f7ff fd81 	bl	801288c <read_submessage_format>
 8012d8a:	e6f5      	b.n	8012b78 <read_submessage_list+0x10>
 8012d8c:	b97a      	cbnz	r2, 8012dae <read_submessage_list+0x246>
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4620      	mov	r0, r4
 8012d92:	f000 fcd9 	bl	8013748 <uxr_read_delete_session_status>
 8012d96:	e6ef      	b.n	8012b78 <read_submessage_list+0x10>
 8012d98:	2a00      	cmp	r2, #0
 8012d9a:	f47f aeed 	bne.w	8012b78 <read_submessage_list+0x10>
 8012d9e:	4629      	mov	r1, r5
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fcc5 	bl	8013730 <uxr_read_create_session_status>
 8012da6:	e6e7      	b.n	8012b78 <read_submessage_list+0x10>
 8012da8:	b019      	add	sp, #100	; 0x64
 8012daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dae:	a912      	add	r1, sp, #72	; 0x48
 8012db0:	4628      	mov	r0, r5
 8012db2:	f002 fae7 	bl	8015384 <uxr_deserialize_STATUS_Payload>
 8012db6:	a910      	add	r1, sp, #64	; 0x40
 8012db8:	aa0f      	add	r2, sp, #60	; 0x3c
 8012dba:	a812      	add	r0, sp, #72	; 0x48
 8012dbc:	f000 fd70 	bl	80138a0 <uxr_parse_base_object_request>
 8012dc0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012dc2:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 8012dc6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8012dca:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8012dce:	9111      	str	r1, [sp, #68]	; 0x44
 8012dd0:	f1b8 0f00 	cmp.w	r8, #0
 8012dd4:	d006      	beq.n	8012de4 <read_submessage_list+0x27c>
 8012dd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012dda:	4632      	mov	r2, r6
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	4620      	mov	r0, r4
 8012de0:	463b      	mov	r3, r7
 8012de2:	47c0      	blx	r8
 8012de4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012de6:	2a00      	cmp	r2, #0
 8012de8:	f43f aec6 	beq.w	8012b78 <read_submessage_list+0x10>
 8012dec:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012dee:	2100      	movs	r1, #0
 8012df0:	3802      	subs	r0, #2
 8012df2:	e003      	b.n	8012dfc <read_submessage_list+0x294>
 8012df4:	3101      	adds	r1, #1
 8012df6:	4291      	cmp	r1, r2
 8012df8:	f43f aebe 	beq.w	8012b78 <read_submessage_list+0x10>
 8012dfc:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012e00:	42b3      	cmp	r3, r6
 8012e02:	d1f7      	bne.n	8012df4 <read_submessage_list+0x28c>
 8012e04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012e06:	545f      	strb	r7, [r3, r1]
 8012e08:	e6b6      	b.n	8012b78 <read_submessage_list+0x10>
 8012e0a:	f001 fb6f 	bl	80144ec <uxr_nanos>
 8012e0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012e10:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8012e12:	4693      	mov	fp, r2
 8012e14:	f04f 0c00 	mov.w	ip, #0
 8012e18:	46b8      	mov	r8, r7
 8012e1a:	f04f 0900 	mov.w	r9, #0
 8012e1e:	2700      	movs	r7, #0
 8012e20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e24:	fbca bc03 	smlal	fp, ip, sl, r3
 8012e28:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e2c:	fbca 6702 	smlal	r6, r7, sl, r2
 8012e30:	fbca 8903 	smlal	r8, r9, sl, r3
 8012e34:	eb1b 0000 	adds.w	r0, fp, r0
 8012e38:	eb4c 0101 	adc.w	r1, ip, r1
 8012e3c:	eb18 0306 	adds.w	r3, r8, r6
 8012e40:	eb49 0207 	adc.w	r2, r9, r7
 8012e44:	1ac3      	subs	r3, r0, r3
 8012e46:	9308      	str	r3, [sp, #32]
 8012e48:	eb61 0302 	sbc.w	r3, r1, r2
 8012e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e4e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012e52:	0fd3      	lsrs	r3, r2, #31
 8012e54:	18c9      	adds	r1, r1, r3
 8012e56:	f142 0200 	adc.w	r2, r2, #0
 8012e5a:	084b      	lsrs	r3, r1, #1
 8012e5c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012e60:	1052      	asrs	r2, r2, #1
 8012e62:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8012e66:	e6e3      	b.n	8012c30 <read_submessage_list+0xc8>
 8012e68:	3b9aca00 	.word	0x3b9aca00

08012e6c <listen_message>:
 8012e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e70:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8012e72:	b099      	sub	sp, #100	; 0x64
 8012e74:	6894      	ldr	r4, [r2, #8]
 8012e76:	460b      	mov	r3, r1
 8012e78:	4605      	mov	r5, r0
 8012e7a:	a904      	add	r1, sp, #16
 8012e7c:	6810      	ldr	r0, [r2, #0]
 8012e7e:	aa05      	add	r2, sp, #20
 8012e80:	47a0      	blx	r4
 8012e82:	4604      	mov	r4, r0
 8012e84:	b918      	cbnz	r0, 8012e8e <listen_message+0x22>
 8012e86:	4620      	mov	r0, r4
 8012e88:	b019      	add	sp, #100	; 0x64
 8012e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8e:	2600      	movs	r6, #0
 8012e90:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8012e94:	a808      	add	r0, sp, #32
 8012e96:	f7fb f8ab 	bl	800dff0 <ucdr_init_buffer>
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	a908      	add	r1, sp, #32
 8012e9e:	f10d 030e 	add.w	r3, sp, #14
 8012ea2:	aa03      	add	r2, sp, #12
 8012ea4:	f88d 600c 	strb.w	r6, [sp, #12]
 8012ea8:	f000 fc94 	bl	80137d4 <uxr_read_session_header>
 8012eac:	b1e8      	cbz	r0, 8012eea <listen_message+0x7e>
 8012eae:	4631      	mov	r1, r6
 8012eb0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8012eb4:	f001 f9a8 	bl	8014208 <uxr_stream_id_from_raw>
 8012eb8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012ebc:	2f01      	cmp	r7, #1
 8012ebe:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 8012ec2:	9007      	str	r0, [sp, #28]
 8012ec4:	fa5f f880 	uxtb.w	r8, r0
 8012ec8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012ecc:	d01b      	beq.n	8012f06 <listen_message+0x9a>
 8012ece:	2f02      	cmp	r7, #2
 8012ed0:	d031      	beq.n	8012f36 <listen_message+0xca>
 8012ed2:	2f00      	cmp	r7, #0
 8012ed4:	d1d7      	bne.n	8012e86 <listen_message+0x1a>
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	4638      	mov	r0, r7
 8012eda:	f001 f995 	bl	8014208 <uxr_stream_id_from_raw>
 8012ede:	a908      	add	r1, sp, #32
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f7ff fe40 	bl	8012b68 <read_submessage_list>
 8012ee8:	e7cd      	b.n	8012e86 <listen_message+0x1a>
 8012eea:	a808      	add	r0, sp, #32
 8012eec:	f7fb f8b2 	bl	800e054 <ucdr_buffer_remaining>
 8012ef0:	2804      	cmp	r0, #4
 8012ef2:	d9c8      	bls.n	8012e86 <listen_message+0x1a>
 8012ef4:	a808      	add	r0, sp, #32
 8012ef6:	f7ff fddd 	bl	8012ab4 <uxr_acknack_pong.part.0>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	d0c3      	beq.n	8012e86 <listen_message+0x1a>
 8012efe:	2301      	movs	r3, #1
 8012f00:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8012f04:	e7bf      	b.n	8012e86 <listen_message+0x1a>
 8012f06:	4631      	mov	r1, r6
 8012f08:	f105 0008 	add.w	r0, r5, #8
 8012f0c:	f001 fa60 	bl	80143d0 <uxr_get_input_best_effort_stream>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d0b8      	beq.n	8012e86 <listen_message+0x1a>
 8012f14:	4651      	mov	r1, sl
 8012f16:	f005 fd9f 	bl	8018a58 <uxr_receive_best_effort_message>
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	d0b3      	beq.n	8012e86 <listen_message+0x1a>
 8012f1e:	f88d 801c 	strb.w	r8, [sp, #28]
 8012f22:	f88d 601d 	strb.w	r6, [sp, #29]
 8012f26:	f88d 701e 	strb.w	r7, [sp, #30]
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	9a07      	ldr	r2, [sp, #28]
 8012f2e:	a908      	add	r1, sp, #32
 8012f30:	f7ff fe1a 	bl	8012b68 <read_submessage_list>
 8012f34:	e7a7      	b.n	8012e86 <listen_message+0x1a>
 8012f36:	4631      	mov	r1, r6
 8012f38:	f105 0008 	add.w	r0, r5, #8
 8012f3c:	f001 fa52 	bl	80143e4 <uxr_get_input_reliable_stream>
 8012f40:	4681      	mov	r9, r0
 8012f42:	b328      	cbz	r0, 8012f90 <listen_message+0x124>
 8012f44:	a808      	add	r0, sp, #32
 8012f46:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8012f4a:	f7fb f883 	bl	800e054 <ucdr_buffer_remaining>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f10d 000d 	add.w	r0, sp, #13
 8012f54:	9000      	str	r0, [sp, #0]
 8012f56:	465a      	mov	r2, fp
 8012f58:	4651      	mov	r1, sl
 8012f5a:	4648      	mov	r0, r9
 8012f5c:	f005 fe00 	bl	8018b60 <uxr_receive_reliable_message>
 8012f60:	b1b0      	cbz	r0, 8012f90 <listen_message+0x124>
 8012f62:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8012f66:	b1cb      	cbz	r3, 8012f9c <listen_message+0x130>
 8012f68:	2702      	movs	r7, #2
 8012f6a:	e00a      	b.n	8012f82 <listen_message+0x116>
 8012f6c:	f88d 801c 	strb.w	r8, [sp, #28]
 8012f70:	f88d 601d 	strb.w	r6, [sp, #29]
 8012f74:	f88d 701e 	strb.w	r7, [sp, #30]
 8012f78:	4628      	mov	r0, r5
 8012f7a:	9a07      	ldr	r2, [sp, #28]
 8012f7c:	a910      	add	r1, sp, #64	; 0x40
 8012f7e:	f7ff fdf3 	bl	8012b68 <read_submessage_list>
 8012f82:	2204      	movs	r2, #4
 8012f84:	4648      	mov	r0, r9
 8012f86:	a910      	add	r1, sp, #64	; 0x40
 8012f88:	f005 fe6a 	bl	8018c60 <uxr_next_input_reliable_buffer_available>
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d1ed      	bne.n	8012f6c <listen_message+0x100>
 8012f90:	4632      	mov	r2, r6
 8012f92:	4641      	mov	r1, r8
 8012f94:	4628      	mov	r0, r5
 8012f96:	f7ff fd55 	bl	8012a44 <write_submessage_acknack.isra.0>
 8012f9a:	e774      	b.n	8012e86 <listen_message+0x1a>
 8012f9c:	f88d 801c 	strb.w	r8, [sp, #28]
 8012fa0:	f88d 601d 	strb.w	r6, [sp, #29]
 8012fa4:	f88d 701e 	strb.w	r7, [sp, #30]
 8012fa8:	4628      	mov	r0, r5
 8012faa:	9a07      	ldr	r2, [sp, #28]
 8012fac:	a908      	add	r1, sp, #32
 8012fae:	f7ff fddb 	bl	8012b68 <read_submessage_list>
 8012fb2:	e7d9      	b.n	8012f68 <listen_message+0xfc>

08012fb4 <listen_message_reliably>:
 8012fb4:	1e0b      	subs	r3, r1, #0
 8012fb6:	bfb8      	it	lt
 8012fb8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8012fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc0:	4683      	mov	fp, r0
 8012fc2:	b095      	sub	sp, #84	; 0x54
 8012fc4:	9303      	str	r3, [sp, #12]
 8012fc6:	f001 fa75 	bl	80144b4 <uxr_millis>
 8012fca:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8012fce:	4688      	mov	r8, r1
 8012fd0:	4607      	mov	r7, r0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f000 8093 	beq.w	80130fe <listen_message_reliably+0x14a>
 8012fd8:	2600      	movs	r6, #0
 8012fda:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012fde:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	e00f      	b.n	8013006 <listen_message_reliably+0x52>
 8012fe6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012fea:	454a      	cmp	r2, r9
 8012fec:	eb73 010a 	sbcs.w	r1, r3, sl
 8012ff0:	bfb8      	it	lt
 8012ff2:	469a      	movlt	sl, r3
 8012ff4:	f106 0601 	add.w	r6, r6, #1
 8012ff8:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8012ffc:	b2f0      	uxtb	r0, r6
 8012ffe:	bfb8      	it	lt
 8013000:	4691      	movlt	r9, r2
 8013002:	4283      	cmp	r3, r0
 8013004:	d953      	bls.n	80130ae <listen_message_reliably+0xfa>
 8013006:	2201      	movs	r2, #1
 8013008:	2102      	movs	r1, #2
 801300a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801300e:	f001 f8d1 	bl	80141b4 <uxr_stream_id>
 8013012:	4601      	mov	r1, r0
 8013014:	00e4      	lsls	r4, r4, #3
 8013016:	f104 0520 	add.w	r5, r4, #32
 801301a:	445d      	add	r5, fp
 801301c:	4643      	mov	r3, r8
 801301e:	463a      	mov	r2, r7
 8013020:	4628      	mov	r0, r5
 8013022:	9104      	str	r1, [sp, #16]
 8013024:	f006 f976 	bl	8019314 <uxr_update_output_stream_heartbeat_timestamp>
 8013028:	eb0b 0304 	add.w	r3, fp, r4
 801302c:	2800      	cmp	r0, #0
 801302e:	d0da      	beq.n	8012fe6 <listen_message_reliably+0x32>
 8013030:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013034:	4658      	mov	r0, fp
 8013036:	f89d 5011 	ldrb.w	r5, [sp, #17]
 801303a:	9302      	str	r3, [sp, #8]
 801303c:	f000 fc0a 	bl	8013854 <uxr_session_header_offset>
 8013040:	3501      	adds	r5, #1
 8013042:	2300      	movs	r3, #0
 8013044:	2211      	movs	r2, #17
 8013046:	9000      	str	r0, [sp, #0]
 8013048:	a907      	add	r1, sp, #28
 801304a:	a80c      	add	r0, sp, #48	; 0x30
 801304c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013050:	f7fa ffbc 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8013054:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8013058:	2300      	movs	r3, #0
 801305a:	2205      	movs	r2, #5
 801305c:	210b      	movs	r1, #11
 801305e:	a80c      	add	r0, sp, #48	; 0x30
 8013060:	f001 f9e2 	bl	8014428 <uxr_buffer_submessage_header>
 8013064:	2101      	movs	r1, #1
 8013066:	8968      	ldrh	r0, [r5, #10]
 8013068:	f006 fa14 	bl	8019494 <uxr_seq_num_add>
 801306c:	4603      	mov	r3, r0
 801306e:	892a      	ldrh	r2, [r5, #8]
 8013070:	9d02      	ldr	r5, [sp, #8]
 8013072:	a905      	add	r1, sp, #20
 8013074:	a80c      	add	r0, sp, #48	; 0x30
 8013076:	f88d 5018 	strb.w	r5, [sp, #24]
 801307a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801307e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013082:	f002 f9eb 	bl	801545c <uxr_serialize_HEARTBEAT_Payload>
 8013086:	2200      	movs	r2, #0
 8013088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801308a:	4611      	mov	r1, r2
 801308c:	4658      	mov	r0, fp
 801308e:	f000 fb8d 	bl	80137ac <uxr_stamp_session_header>
 8013092:	a80c      	add	r0, sp, #48	; 0x30
 8013094:	f7fa ffda 	bl	800e04c <ucdr_buffer_length>
 8013098:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 801309c:	4602      	mov	r2, r0
 801309e:	e9d3 0500 	ldrd	r0, r5, [r3]
 80130a2:	a907      	add	r1, sp, #28
 80130a4:	445c      	add	r4, fp
 80130a6:	47a8      	blx	r5
 80130a8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80130ac:	e79d      	b.n	8012fea <listen_message_reliably+0x36>
 80130ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80130b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130b6:	45a2      	cmp	sl, r4
 80130b8:	bf08      	it	eq
 80130ba:	4599      	cmpeq	r9, r3
 80130bc:	d01f      	beq.n	80130fe <listen_message_reliably+0x14a>
 80130be:	eba9 0107 	sub.w	r1, r9, r7
 80130c2:	2900      	cmp	r1, #0
 80130c4:	bf08      	it	eq
 80130c6:	2101      	moveq	r1, #1
 80130c8:	9c03      	ldr	r4, [sp, #12]
 80130ca:	4658      	mov	r0, fp
 80130cc:	428c      	cmp	r4, r1
 80130ce:	4623      	mov	r3, r4
 80130d0:	bfa8      	it	ge
 80130d2:	460b      	movge	r3, r1
 80130d4:	4619      	mov	r1, r3
 80130d6:	461f      	mov	r7, r3
 80130d8:	f7ff fec8 	bl	8012e6c <listen_message>
 80130dc:	b110      	cbz	r0, 80130e4 <listen_message_reliably+0x130>
 80130de:	b015      	add	sp, #84	; 0x54
 80130e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e4:	1be3      	subs	r3, r4, r7
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	9303      	str	r3, [sp, #12]
 80130ea:	ddf8      	ble.n	80130de <listen_message_reliably+0x12a>
 80130ec:	f001 f9e2 	bl	80144b4 <uxr_millis>
 80130f0:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80130f4:	4688      	mov	r8, r1
 80130f6:	4607      	mov	r7, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f47f af6d 	bne.w	8012fd8 <listen_message_reliably+0x24>
 80130fe:	9903      	ldr	r1, [sp, #12]
 8013100:	e7df      	b.n	80130c2 <listen_message_reliably+0x10e>
 8013102:	bf00      	nop

08013104 <uxr_init_session>:
 8013104:	b5d0      	push	{r4, r6, r7, lr}
 8013106:	2300      	movs	r3, #0
 8013108:	2600      	movs	r6, #0
 801310a:	2700      	movs	r7, #0
 801310c:	4604      	mov	r4, r0
 801310e:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8013112:	6701      	str	r1, [r0, #112]	; 0x70
 8013114:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8013118:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 801311c:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8013120:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8013124:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8013128:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801312c:	2181      	movs	r1, #129	; 0x81
 801312e:	f000 faab 	bl	8013688 <uxr_init_session_info>
 8013132:	f104 0008 	add.w	r0, r4, #8
 8013136:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801313a:	f001 b891 	b.w	8014260 <uxr_init_stream_storage>
 801313e:	bf00      	nop

08013140 <uxr_set_status_callback>:
 8013140:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop

08013148 <uxr_set_topic_callback>:
 8013148:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop

08013150 <uxr_set_request_callback>:
 8013150:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop

08013158 <uxr_set_reply_callback>:
 8013158:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop

08013160 <uxr_create_session>:
 8013160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013164:	4604      	mov	r4, r0
 8013166:	f100 0708 	add.w	r7, r0, #8
 801316a:	b092      	sub	sp, #72	; 0x48
 801316c:	4638      	mov	r0, r7
 801316e:	f001 f881 	bl	8014274 <uxr_reset_stream_storage>
 8013172:	4620      	mov	r0, r4
 8013174:	f000 fb6e 	bl	8013854 <uxr_session_header_offset>
 8013178:	2300      	movs	r3, #0
 801317a:	221c      	movs	r2, #28
 801317c:	9000      	str	r0, [sp, #0]
 801317e:	a903      	add	r1, sp, #12
 8013180:	a80a      	add	r0, sp, #40	; 0x28
 8013182:	f7fa ff23 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8013186:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013188:	4620      	mov	r0, r4
 801318a:	8a1a      	ldrh	r2, [r3, #16]
 801318c:	a90a      	add	r1, sp, #40	; 0x28
 801318e:	3a04      	subs	r2, #4
 8013190:	b292      	uxth	r2, r2
 8013192:	f000 fa8b 	bl	80136ac <uxr_buffer_create_session>
 8013196:	4620      	mov	r0, r4
 8013198:	990a      	ldr	r1, [sp, #40]	; 0x28
 801319a:	f000 faf3 	bl	8013784 <uxr_stamp_create_session_header>
 801319e:	a80a      	add	r0, sp, #40	; 0x28
 80131a0:	f7fa ff54 	bl	800e04c <ucdr_buffer_length>
 80131a4:	23ff      	movs	r3, #255	; 0xff
 80131a6:	4606      	mov	r6, r0
 80131a8:	250a      	movs	r5, #10
 80131aa:	7163      	strb	r3, [r4, #5]
 80131ac:	e001      	b.n	80131b2 <uxr_create_session+0x52>
 80131ae:	2bff      	cmp	r3, #255	; 0xff
 80131b0:	d10d      	bne.n	80131ce <uxr_create_session+0x6e>
 80131b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80131b4:	4632      	mov	r2, r6
 80131b6:	e9d3 0800 	ldrd	r0, r8, [r3]
 80131ba:	a903      	add	r1, sp, #12
 80131bc:	47c0      	blx	r8
 80131be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7ff fe52 	bl	8012e6c <listen_message>
 80131c8:	3d01      	subs	r5, #1
 80131ca:	7963      	ldrb	r3, [r4, #5]
 80131cc:	d1ef      	bne.n	80131ae <uxr_create_session+0x4e>
 80131ce:	b11b      	cbz	r3, 80131d8 <uxr_create_session+0x78>
 80131d0:	2000      	movs	r0, #0
 80131d2:	b012      	add	sp, #72	; 0x48
 80131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d8:	4638      	mov	r0, r7
 80131da:	f001 f84b 	bl	8014274 <uxr_reset_stream_storage>
 80131de:	2001      	movs	r0, #1
 80131e0:	b012      	add	sp, #72	; 0x48
 80131e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e6:	bf00      	nop

080131e8 <uxr_delete_session_retries>:
 80131e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ec:	b08e      	sub	sp, #56	; 0x38
 80131ee:	4604      	mov	r4, r0
 80131f0:	460d      	mov	r5, r1
 80131f2:	f000 fb2f 	bl	8013854 <uxr_session_header_offset>
 80131f6:	2300      	movs	r3, #0
 80131f8:	2210      	movs	r2, #16
 80131fa:	9000      	str	r0, [sp, #0]
 80131fc:	a902      	add	r1, sp, #8
 80131fe:	a806      	add	r0, sp, #24
 8013200:	f7fa fee4 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8013204:	4620      	mov	r0, r4
 8013206:	a906      	add	r1, sp, #24
 8013208:	f000 fa76 	bl	80136f8 <uxr_buffer_delete_session>
 801320c:	2200      	movs	r2, #0
 801320e:	9b06      	ldr	r3, [sp, #24]
 8013210:	4620      	mov	r0, r4
 8013212:	4611      	mov	r1, r2
 8013214:	f000 faca 	bl	80137ac <uxr_stamp_session_header>
 8013218:	a806      	add	r0, sp, #24
 801321a:	f7fa ff17 	bl	800e04c <ucdr_buffer_length>
 801321e:	23ff      	movs	r3, #255	; 0xff
 8013220:	4606      	mov	r6, r0
 8013222:	7163      	strb	r3, [r4, #5]
 8013224:	b1f5      	cbz	r5, 8013264 <uxr_delete_session_retries+0x7c>
 8013226:	2700      	movs	r7, #0
 8013228:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801322a:	4632      	mov	r2, r6
 801322c:	e9d3 0800 	ldrd	r0, r8, [r3]
 8013230:	a902      	add	r1, sp, #8
 8013232:	47c0      	blx	r8
 8013234:	3701      	adds	r7, #1
 8013236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801323a:	4620      	mov	r0, r4
 801323c:	f7ff fe16 	bl	8012e6c <listen_message>
 8013240:	42bd      	cmp	r5, r7
 8013242:	7963      	ldrb	r3, [r4, #5]
 8013244:	d007      	beq.n	8013256 <uxr_delete_session_retries+0x6e>
 8013246:	2bff      	cmp	r3, #255	; 0xff
 8013248:	d0ee      	beq.n	8013228 <uxr_delete_session_retries+0x40>
 801324a:	fab3 f083 	clz	r0, r3
 801324e:	0940      	lsrs	r0, r0, #5
 8013250:	b00e      	add	sp, #56	; 0x38
 8013252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013256:	2bff      	cmp	r3, #255	; 0xff
 8013258:	bf08      	it	eq
 801325a:	2000      	moveq	r0, #0
 801325c:	d1f5      	bne.n	801324a <uxr_delete_session_retries+0x62>
 801325e:	b00e      	add	sp, #56	; 0x38
 8013260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013264:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013266:	4602      	mov	r2, r0
 8013268:	e9d3 0500 	ldrd	r0, r5, [r3]
 801326c:	a902      	add	r1, sp, #8
 801326e:	47a8      	blx	r5
 8013270:	7963      	ldrb	r3, [r4, #5]
 8013272:	fab3 f083 	clz	r0, r3
 8013276:	0940      	lsrs	r0, r0, #5
 8013278:	e7ea      	b.n	8013250 <uxr_delete_session_retries+0x68>
 801327a:	bf00      	nop

0801327c <uxr_create_output_best_effort_stream>:
 801327c:	b570      	push	{r4, r5, r6, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	4604      	mov	r4, r0
 8013282:	460d      	mov	r5, r1
 8013284:	4616      	mov	r6, r2
 8013286:	f000 fae5 	bl	8013854 <uxr_session_header_offset>
 801328a:	4632      	mov	r2, r6
 801328c:	4603      	mov	r3, r0
 801328e:	4629      	mov	r1, r5
 8013290:	f104 0008 	add.w	r0, r4, #8
 8013294:	b002      	add	sp, #8
 8013296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801329a:	f001 b82b 	b.w	80142f4 <uxr_add_output_best_effort_buffer>
 801329e:	bf00      	nop

080132a0 <uxr_create_output_reliable_stream>:
 80132a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132a2:	b085      	sub	sp, #20
 80132a4:	460d      	mov	r5, r1
 80132a6:	4616      	mov	r6, r2
 80132a8:	461f      	mov	r7, r3
 80132aa:	4604      	mov	r4, r0
 80132ac:	f000 fad2 	bl	8013854 <uxr_session_header_offset>
 80132b0:	4684      	mov	ip, r0
 80132b2:	463b      	mov	r3, r7
 80132b4:	4632      	mov	r2, r6
 80132b6:	4629      	mov	r1, r5
 80132b8:	f104 0008 	add.w	r0, r4, #8
 80132bc:	f8cd c000 	str.w	ip, [sp]
 80132c0:	f001 f82a 	bl	8014318 <uxr_add_output_reliable_buffer>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2000      	movs	r0, #0
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	f362 0007 	bfi	r0, r2, #0, #8
 80132ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80132d2:	f362 200f 	bfi	r0, r2, #8, #8
 80132d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80132da:	f362 4017 	bfi	r0, r2, #16, #8
 80132de:	0e1b      	lsrs	r3, r3, #24
 80132e0:	f363 601f 	bfi	r0, r3, #24, #8
 80132e4:	b005      	add	sp, #20
 80132e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132e8 <uxr_create_input_best_effort_stream>:
 80132e8:	b082      	sub	sp, #8
 80132ea:	3008      	adds	r0, #8
 80132ec:	b002      	add	sp, #8
 80132ee:	f001 b82d 	b.w	801434c <uxr_add_input_best_effort_buffer>
 80132f2:	bf00      	nop

080132f4 <uxr_create_input_reliable_stream>:
 80132f4:	b510      	push	{r4, lr}
 80132f6:	4c0c      	ldr	r4, [pc, #48]	; (8013328 <uxr_create_input_reliable_stream+0x34>)
 80132f8:	b084      	sub	sp, #16
 80132fa:	9400      	str	r4, [sp, #0]
 80132fc:	3008      	adds	r0, #8
 80132fe:	f001 f83b 	bl	8014378 <uxr_add_input_reliable_buffer>
 8013302:	4603      	mov	r3, r0
 8013304:	2000      	movs	r0, #0
 8013306:	b2da      	uxtb	r2, r3
 8013308:	f362 0007 	bfi	r0, r2, #0, #8
 801330c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013310:	f362 200f 	bfi	r0, r2, #8, #8
 8013314:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013318:	f362 4017 	bfi	r0, r2, #16, #8
 801331c:	0e1b      	lsrs	r3, r3, #24
 801331e:	f363 601f 	bfi	r0, r3, #24, #8
 8013322:	b004      	add	sp, #16
 8013324:	bd10      	pop	{r4, pc}
 8013326:	bf00      	nop
 8013328:	08012a01 	.word	0x08012a01
 801332c:	00000000 	.word	0x00000000

08013330 <uxr_sync_session>:
 8013330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013332:	b093      	sub	sp, #76	; 0x4c
 8013334:	4604      	mov	r4, r0
 8013336:	460d      	mov	r5, r1
 8013338:	f000 fa8c 	bl	8013854 <uxr_session_header_offset>
 801333c:	2300      	movs	r3, #0
 801333e:	2214      	movs	r2, #20
 8013340:	9000      	str	r0, [sp, #0]
 8013342:	a905      	add	r1, sp, #20
 8013344:	a80a      	add	r0, sp, #40	; 0x28
 8013346:	f7fa fe41 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 801334a:	2300      	movs	r3, #0
 801334c:	2208      	movs	r2, #8
 801334e:	210e      	movs	r1, #14
 8013350:	a80a      	add	r0, sp, #40	; 0x28
 8013352:	f001 f869 	bl	8014428 <uxr_buffer_submessage_header>
 8013356:	f001 f8c9 	bl	80144ec <uxr_nanos>
 801335a:	a31d      	add	r3, pc, #116	; (adr r3, 80133d0 <uxr_sync_session+0xa0>)
 801335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013360:	4606      	mov	r6, r0
 8013362:	460f      	mov	r7, r1
 8013364:	f7ed ff54 	bl	8001210 <__aeabi_ldivmod>
 8013368:	a319      	add	r3, pc, #100	; (adr r3, 80133d0 <uxr_sync_session+0xa0>)
 801336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336e:	4684      	mov	ip, r0
 8013370:	4639      	mov	r1, r7
 8013372:	4630      	mov	r0, r6
 8013374:	f8cd c00c 	str.w	ip, [sp, #12]
 8013378:	f7ed ff4a 	bl	8001210 <__aeabi_ldivmod>
 801337c:	a903      	add	r1, sp, #12
 801337e:	a80a      	add	r0, sp, #40	; 0x28
 8013380:	9204      	str	r2, [sp, #16]
 8013382:	f002 f891 	bl	80154a8 <uxr_serialize_TIMESTAMP_Payload>
 8013386:	2200      	movs	r2, #0
 8013388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338a:	4611      	mov	r1, r2
 801338c:	4620      	mov	r0, r4
 801338e:	f000 fa0d 	bl	80137ac <uxr_stamp_session_header>
 8013392:	a80a      	add	r0, sp, #40	; 0x28
 8013394:	f7fa fe5a 	bl	800e04c <ucdr_buffer_length>
 8013398:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801339a:	4602      	mov	r2, r0
 801339c:	e9d3 0600 	ldrd	r0, r6, [r3]
 80133a0:	a905      	add	r1, sp, #20
 80133a2:	47b0      	blx	r6
 80133a4:	f001 f886 	bl	80144b4 <uxr_millis>
 80133a8:	2300      	movs	r3, #0
 80133aa:	4606      	mov	r6, r0
 80133ac:	4629      	mov	r1, r5
 80133ae:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80133b2:	e000      	b.n	80133b6 <uxr_sync_session+0x86>
 80133b4:	b950      	cbnz	r0, 80133cc <uxr_sync_session+0x9c>
 80133b6:	4620      	mov	r0, r4
 80133b8:	f7ff fdfc 	bl	8012fb4 <listen_message_reliably>
 80133bc:	f001 f87a 	bl	80144b4 <uxr_millis>
 80133c0:	1b83      	subs	r3, r0, r6
 80133c2:	1ae9      	subs	r1, r5, r3
 80133c4:	2900      	cmp	r1, #0
 80133c6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 80133ca:	dcf3      	bgt.n	80133b4 <uxr_sync_session+0x84>
 80133cc:	b013      	add	sp, #76	; 0x4c
 80133ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133d0:	3b9aca00 	.word	0x3b9aca00
 80133d4:	00000000 	.word	0x00000000

080133d8 <uxr_epoch_nanos>:
 80133d8:	b510      	push	{r4, lr}
 80133da:	4604      	mov	r4, r0
 80133dc:	f001 f886 	bl	80144ec <uxr_nanos>
 80133e0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80133e4:	1ac0      	subs	r0, r0, r3
 80133e6:	eb61 0102 	sbc.w	r1, r1, r2
 80133ea:	bd10      	pop	{r4, pc}

080133ec <uxr_flash_output_streams>:
 80133ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f0:	7e03      	ldrb	r3, [r0, #24]
 80133f2:	4604      	mov	r4, r0
 80133f4:	b084      	sub	sp, #16
 80133f6:	b1fb      	cbz	r3, 8013438 <uxr_flash_output_streams+0x4c>
 80133f8:	f04f 0900 	mov.w	r9, #0
 80133fc:	4648      	mov	r0, r9
 80133fe:	f10d 0802 	add.w	r8, sp, #2
 8013402:	af03      	add	r7, sp, #12
 8013404:	ae02      	add	r6, sp, #8
 8013406:	2201      	movs	r2, #1
 8013408:	4611      	mov	r1, r2
 801340a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801340e:	f000 fed1 	bl	80141b4 <uxr_stream_id>
 8013412:	4684      	mov	ip, r0
 8013414:	3508      	adds	r5, #8
 8013416:	4643      	mov	r3, r8
 8013418:	4628      	mov	r0, r5
 801341a:	463a      	mov	r2, r7
 801341c:	4631      	mov	r1, r6
 801341e:	f8cd c004 	str.w	ip, [sp, #4]
 8013422:	f005 fd2f 	bl	8018e84 <uxr_prepare_best_effort_buffer_to_send>
 8013426:	2800      	cmp	r0, #0
 8013428:	d13c      	bne.n	80134a4 <uxr_flash_output_streams+0xb8>
 801342a:	7e23      	ldrb	r3, [r4, #24]
 801342c:	f109 0901 	add.w	r9, r9, #1
 8013430:	fa5f f089 	uxtb.w	r0, r9
 8013434:	4283      	cmp	r3, r0
 8013436:	d8e6      	bhi.n	8013406 <uxr_flash_output_streams+0x1a>
 8013438:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801343c:	b37b      	cbz	r3, 801349e <uxr_flash_output_streams+0xb2>
 801343e:	f04f 0900 	mov.w	r9, #0
 8013442:	4648      	mov	r0, r9
 8013444:	f10d 0802 	add.w	r8, sp, #2
 8013448:	af03      	add	r7, sp, #12
 801344a:	ae02      	add	r6, sp, #8
 801344c:	2201      	movs	r2, #1
 801344e:	2102      	movs	r1, #2
 8013450:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8013454:	f000 feae 	bl	80141b4 <uxr_stream_id>
 8013458:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801345c:	3520      	adds	r5, #32
 801345e:	9001      	str	r0, [sp, #4]
 8013460:	e00d      	b.n	801347e <uxr_flash_output_streams+0x92>
 8013462:	4620      	mov	r0, r4
 8013464:	9b02      	ldr	r3, [sp, #8]
 8013466:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801346a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801346e:	f000 f99d 	bl	80137ac <uxr_stamp_session_header>
 8013472:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013474:	9a03      	ldr	r2, [sp, #12]
 8013476:	9902      	ldr	r1, [sp, #8]
 8013478:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801347c:	47d0      	blx	sl
 801347e:	4643      	mov	r3, r8
 8013480:	463a      	mov	r2, r7
 8013482:	4631      	mov	r1, r6
 8013484:	4628      	mov	r0, r5
 8013486:	f005 feff 	bl	8019288 <uxr_prepare_next_reliable_buffer_to_send>
 801348a:	2800      	cmp	r0, #0
 801348c:	d1e9      	bne.n	8013462 <uxr_flash_output_streams+0x76>
 801348e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013492:	f109 0901 	add.w	r9, r9, #1
 8013496:	fa5f f089 	uxtb.w	r0, r9
 801349a:	4283      	cmp	r3, r0
 801349c:	d8d6      	bhi.n	801344c <uxr_flash_output_streams+0x60>
 801349e:	b004      	add	sp, #16
 80134a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a4:	4620      	mov	r0, r4
 80134a6:	9b02      	ldr	r3, [sp, #8]
 80134a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80134ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80134b0:	f000 f97c 	bl	80137ac <uxr_stamp_session_header>
 80134b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80134b6:	9a03      	ldr	r2, [sp, #12]
 80134b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80134bc:	9902      	ldr	r1, [sp, #8]
 80134be:	47a8      	blx	r5
 80134c0:	f109 0901 	add.w	r9, r9, #1
 80134c4:	7e23      	ldrb	r3, [r4, #24]
 80134c6:	fa5f f089 	uxtb.w	r0, r9
 80134ca:	4283      	cmp	r3, r0
 80134cc:	d89b      	bhi.n	8013406 <uxr_flash_output_streams+0x1a>
 80134ce:	e7b3      	b.n	8013438 <uxr_flash_output_streams+0x4c>

080134d0 <uxr_run_session_until_data>:
 80134d0:	b570      	push	{r4, r5, r6, lr}
 80134d2:	4604      	mov	r4, r0
 80134d4:	460d      	mov	r5, r1
 80134d6:	f000 ffed 	bl	80144b4 <uxr_millis>
 80134da:	4606      	mov	r6, r0
 80134dc:	4620      	mov	r0, r4
 80134de:	f7ff ff85 	bl	80133ec <uxr_flash_output_streams>
 80134e2:	2300      	movs	r3, #0
 80134e4:	4629      	mov	r1, r5
 80134e6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80134ea:	e005      	b.n	80134f8 <uxr_run_session_until_data+0x28>
 80134ec:	f000 ffe2 	bl	80144b4 <uxr_millis>
 80134f0:	1b81      	subs	r1, r0, r6
 80134f2:	1a69      	subs	r1, r5, r1
 80134f4:	2900      	cmp	r1, #0
 80134f6:	dd07      	ble.n	8013508 <uxr_run_session_until_data+0x38>
 80134f8:	4620      	mov	r0, r4
 80134fa:	f7ff fd5b 	bl	8012fb4 <listen_message_reliably>
 80134fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8013502:	2800      	cmp	r0, #0
 8013504:	d0f2      	beq.n	80134ec <uxr_run_session_until_data+0x1c>
 8013506:	bd70      	pop	{r4, r5, r6, pc}
 8013508:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801350c:	bd70      	pop	{r4, r5, r6, pc}
 801350e:	bf00      	nop

08013510 <uxr_run_session_until_confirm_delivery>:
 8013510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013514:	4606      	mov	r6, r0
 8013516:	460d      	mov	r5, r1
 8013518:	f000 ffcc 	bl	80144b4 <uxr_millis>
 801351c:	4607      	mov	r7, r0
 801351e:	4630      	mov	r0, r6
 8013520:	f7ff ff64 	bl	80133ec <uxr_flash_output_streams>
 8013524:	2d00      	cmp	r5, #0
 8013526:	bfa8      	it	ge
 8013528:	462c      	movge	r4, r5
 801352a:	f106 0808 	add.w	r8, r6, #8
 801352e:	da09      	bge.n	8013544 <uxr_run_session_until_confirm_delivery+0x34>
 8013530:	e00d      	b.n	801354e <uxr_run_session_until_confirm_delivery+0x3e>
 8013532:	4621      	mov	r1, r4
 8013534:	4630      	mov	r0, r6
 8013536:	f7ff fd3d 	bl	8012fb4 <listen_message_reliably>
 801353a:	f000 ffbb 	bl	80144b4 <uxr_millis>
 801353e:	1bc1      	subs	r1, r0, r7
 8013540:	1a6c      	subs	r4, r5, r1
 8013542:	d404      	bmi.n	801354e <uxr_run_session_until_confirm_delivery+0x3e>
 8013544:	4640      	mov	r0, r8
 8013546:	f000 ff59 	bl	80143fc <uxr_output_streams_confirmed>
 801354a:	2800      	cmp	r0, #0
 801354c:	d0f1      	beq.n	8013532 <uxr_run_session_until_confirm_delivery+0x22>
 801354e:	4640      	mov	r0, r8
 8013550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013554:	f000 bf52 	b.w	80143fc <uxr_output_streams_confirmed>

08013558 <uxr_run_session_until_all_status>:
 8013558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801355c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801355e:	4688      	mov	r8, r1
 8013560:	4615      	mov	r5, r2
 8013562:	461c      	mov	r4, r3
 8013564:	4607      	mov	r7, r0
 8013566:	f7ff ff41 	bl	80133ec <uxr_flash_output_streams>
 801356a:	b126      	cbz	r6, 8013576 <uxr_run_session_until_all_status+0x1e>
 801356c:	4632      	mov	r2, r6
 801356e:	21ff      	movs	r1, #255	; 0xff
 8013570:	4620      	mov	r0, r4
 8013572:	f006 fa63 	bl	8019a3c <memset>
 8013576:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 801357a:	67fe      	str	r6, [r7, #124]	; 0x7c
 801357c:	f000 ff9a 	bl	80144b4 <uxr_millis>
 8013580:	4641      	mov	r1, r8
 8013582:	4681      	mov	r9, r0
 8013584:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8013588:	f1a5 0a02 	sub.w	sl, r5, #2
 801358c:	4638      	mov	r0, r7
 801358e:	f7ff fd11 	bl	8012fb4 <listen_message_reliably>
 8013592:	f000 ff8f 	bl	80144b4 <uxr_millis>
 8013596:	eba0 0109 	sub.w	r1, r0, r9
 801359a:	eba8 0101 	sub.w	r1, r8, r1
 801359e:	b33e      	cbz	r6, 80135f0 <uxr_run_session_until_all_status+0x98>
 80135a0:	4658      	mov	r0, fp
 80135a2:	465c      	mov	r4, fp
 80135a4:	2301      	movs	r3, #1
 80135a6:	e002      	b.n	80135ae <uxr_run_session_until_all_status+0x56>
 80135a8:	42b3      	cmp	r3, r6
 80135aa:	d20c      	bcs.n	80135c6 <uxr_run_session_until_all_status+0x6e>
 80135ac:	3301      	adds	r3, #1
 80135ae:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80135b2:	2dff      	cmp	r5, #255	; 0xff
 80135b4:	d1f8      	bne.n	80135a8 <uxr_run_session_until_all_status+0x50>
 80135b6:	42b3      	cmp	r3, r6
 80135b8:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 80135bc:	d213      	bcs.n	80135e6 <uxr_run_session_until_all_status+0x8e>
 80135be:	2a00      	cmp	r2, #0
 80135c0:	d0f4      	beq.n	80135ac <uxr_run_session_until_all_status+0x54>
 80135c2:	2900      	cmp	r1, #0
 80135c4:	dce2      	bgt.n	801358c <uxr_run_session_until_all_status+0x34>
 80135c6:	2300      	movs	r3, #0
 80135c8:	445e      	add	r6, fp
 80135ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80135cc:	e001      	b.n	80135d2 <uxr_run_session_until_all_status+0x7a>
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d812      	bhi.n	80135f8 <uxr_run_session_until_all_status+0xa0>
 80135d2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80135d6:	4286      	cmp	r6, r0
 80135d8:	d1f9      	bne.n	80135ce <uxr_run_session_until_all_status+0x76>
 80135da:	2b01      	cmp	r3, #1
 80135dc:	bf8c      	ite	hi
 80135de:	2000      	movhi	r0, #0
 80135e0:	2001      	movls	r0, #1
 80135e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e6:	2900      	cmp	r1, #0
 80135e8:	dded      	ble.n	80135c6 <uxr_run_session_until_all_status+0x6e>
 80135ea:	2a00      	cmp	r2, #0
 80135ec:	d1ce      	bne.n	801358c <uxr_run_session_until_all_status+0x34>
 80135ee:	e7ea      	b.n	80135c6 <uxr_run_session_until_all_status+0x6e>
 80135f0:	2001      	movs	r0, #1
 80135f2:	67fe      	str	r6, [r7, #124]	; 0x7c
 80135f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f8:	2000      	movs	r0, #0
 80135fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fe:	bf00      	nop

08013600 <uxr_prepare_stream_to_write_submessage>:
 8013600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013604:	4615      	mov	r5, r2
 8013606:	b082      	sub	sp, #8
 8013608:	4682      	mov	sl, r0
 801360a:	4610      	mov	r0, r2
 801360c:	461e      	mov	r6, r3
 801360e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8013612:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8013616:	9101      	str	r1, [sp, #4]
 8013618:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801361c:	f000 ff44 	bl	80144a8 <uxr_submessage_padding>
 8013620:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013624:	f105 0904 	add.w	r9, r5, #4
 8013628:	2b01      	cmp	r3, #1
 801362a:	4481      	add	r9, r0
 801362c:	d01d      	beq.n	801366a <uxr_prepare_stream_to_write_submessage+0x6a>
 801362e:	2b02      	cmp	r3, #2
 8013630:	d116      	bne.n	8013660 <uxr_prepare_stream_to_write_submessage+0x60>
 8013632:	4621      	mov	r1, r4
 8013634:	f10a 0008 	add.w	r0, sl, #8
 8013638:	f000 febe 	bl	80143b8 <uxr_get_output_reliable_stream>
 801363c:	4604      	mov	r4, r0
 801363e:	b158      	cbz	r0, 8013658 <uxr_prepare_stream_to_write_submessage+0x58>
 8013640:	4649      	mov	r1, r9
 8013642:	4632      	mov	r2, r6
 8013644:	f005 fcc2 	bl	8018fcc <uxr_prepare_reliable_buffer_to_write>
 8013648:	4604      	mov	r4, r0
 801364a:	b12c      	cbz	r4, 8013658 <uxr_prepare_stream_to_write_submessage+0x58>
 801364c:	4643      	mov	r3, r8
 801364e:	4639      	mov	r1, r7
 8013650:	4630      	mov	r0, r6
 8013652:	b2aa      	uxth	r2, r5
 8013654:	f000 fee8 	bl	8014428 <uxr_buffer_submessage_header>
 8013658:	4620      	mov	r0, r4
 801365a:	b002      	add	sp, #8
 801365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013660:	2400      	movs	r4, #0
 8013662:	4620      	mov	r0, r4
 8013664:	b002      	add	sp, #8
 8013666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801366a:	4621      	mov	r1, r4
 801366c:	f10a 0008 	add.w	r0, sl, #8
 8013670:	f000 fe9a 	bl	80143a8 <uxr_get_output_best_effort_stream>
 8013674:	4604      	mov	r4, r0
 8013676:	2800      	cmp	r0, #0
 8013678:	d0ee      	beq.n	8013658 <uxr_prepare_stream_to_write_submessage+0x58>
 801367a:	4649      	mov	r1, r9
 801367c:	4632      	mov	r2, r6
 801367e:	f005 fbe1 	bl	8018e44 <uxr_prepare_best_effort_buffer_to_write>
 8013682:	4604      	mov	r4, r0
 8013684:	e7e1      	b.n	801364a <uxr_prepare_stream_to_write_submessage+0x4a>
 8013686:	bf00      	nop

08013688 <uxr_init_session_info>:
 8013688:	b430      	push	{r4, r5}
 801368a:	23ff      	movs	r3, #255	; 0xff
 801368c:	2409      	movs	r4, #9
 801368e:	0e15      	lsrs	r5, r2, #24
 8013690:	7102      	strb	r2, [r0, #4]
 8013692:	7001      	strb	r1, [r0, #0]
 8013694:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8013698:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801369c:	7045      	strb	r5, [r0, #1]
 801369e:	80c4      	strh	r4, [r0, #6]
 80136a0:	7081      	strb	r1, [r0, #2]
 80136a2:	70c2      	strb	r2, [r0, #3]
 80136a4:	7143      	strb	r3, [r0, #5]
 80136a6:	bc30      	pop	{r4, r5}
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop

080136ac <uxr_buffer_create_session>:
 80136ac:	b570      	push	{r4, r5, r6, lr}
 80136ae:	460c      	mov	r4, r1
 80136b0:	2101      	movs	r1, #1
 80136b2:	2300      	movs	r3, #0
 80136b4:	b088      	sub	sp, #32
 80136b6:	4d0f      	ldr	r5, [pc, #60]	; (80136f4 <uxr_buffer_create_session+0x48>)
 80136b8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80136bc:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80136c0:	80c1      	strh	r1, [r0, #6]
 80136c2:	9202      	str	r2, [sp, #8]
 80136c4:	7800      	ldrb	r0, [r0, #0]
 80136c6:	88aa      	ldrh	r2, [r5, #4]
 80136c8:	682e      	ldr	r6, [r5, #0]
 80136ca:	f88d 000c 	strb.w	r0, [sp, #12]
 80136ce:	f8ad 1004 	strh.w	r1, [sp, #4]
 80136d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80136d6:	4619      	mov	r1, r3
 80136d8:	2210      	movs	r2, #16
 80136da:	4620      	mov	r0, r4
 80136dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80136e0:	9600      	str	r6, [sp, #0]
 80136e2:	f000 fea1 	bl	8014428 <uxr_buffer_submessage_header>
 80136e6:	4620      	mov	r0, r4
 80136e8:	4669      	mov	r1, sp
 80136ea:	f001 fd71 	bl	80151d0 <uxr_serialize_CREATE_CLIENT_Payload>
 80136ee:	b008      	add	sp, #32
 80136f0:	bd70      	pop	{r4, r5, r6, pc}
 80136f2:	bf00      	nop
 80136f4:	0801c130 	.word	0x0801c130

080136f8 <uxr_buffer_delete_session>:
 80136f8:	b530      	push	{r4, r5, lr}
 80136fa:	2202      	movs	r2, #2
 80136fc:	460c      	mov	r4, r1
 80136fe:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013702:	4b0a      	ldr	r3, [pc, #40]	; (801372c <uxr_buffer_delete_session+0x34>)
 8013704:	b083      	sub	sp, #12
 8013706:	8919      	ldrh	r1, [r3, #8]
 8013708:	80c2      	strh	r2, [r0, #6]
 801370a:	2300      	movs	r3, #0
 801370c:	2204      	movs	r2, #4
 801370e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8013712:	4620      	mov	r0, r4
 8013714:	2103      	movs	r1, #3
 8013716:	f8ad 5004 	strh.w	r5, [sp, #4]
 801371a:	f000 fe85 	bl	8014428 <uxr_buffer_submessage_header>
 801371e:	4620      	mov	r0, r4
 8013720:	a901      	add	r1, sp, #4
 8013722:	f001 fdef 	bl	8015304 <uxr_serialize_DELETE_Payload>
 8013726:	b003      	add	sp, #12
 8013728:	bd30      	pop	{r4, r5, pc}
 801372a:	bf00      	nop
 801372c:	0801c130 	.word	0x0801c130

08013730 <uxr_read_create_session_status>:
 8013730:	b510      	push	{r4, lr}
 8013732:	b088      	sub	sp, #32
 8013734:	4604      	mov	r4, r0
 8013736:	4608      	mov	r0, r1
 8013738:	a901      	add	r1, sp, #4
 801373a:	f001 fdf3 	bl	8015324 <uxr_deserialize_STATUS_AGENT_Payload>
 801373e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013742:	7163      	strb	r3, [r4, #5]
 8013744:	b008      	add	sp, #32
 8013746:	bd10      	pop	{r4, pc}

08013748 <uxr_read_delete_session_status>:
 8013748:	b510      	push	{r4, lr}
 801374a:	4604      	mov	r4, r0
 801374c:	b084      	sub	sp, #16
 801374e:	4608      	mov	r0, r1
 8013750:	a902      	add	r1, sp, #8
 8013752:	f001 fe17 	bl	8015384 <uxr_deserialize_STATUS_Payload>
 8013756:	88e3      	ldrh	r3, [r4, #6]
 8013758:	2b02      	cmp	r3, #2
 801375a:	d001      	beq.n	8013760 <uxr_read_delete_session_status+0x18>
 801375c:	b004      	add	sp, #16
 801375e:	bd10      	pop	{r4, pc}
 8013760:	f10d 000a 	add.w	r0, sp, #10
 8013764:	f7ff f80c 	bl	8012780 <uxr_object_id_from_raw>
 8013768:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801376c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013770:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013774:	b29b      	uxth	r3, r3
 8013776:	2b02      	cmp	r3, #2
 8013778:	bf04      	itt	eq
 801377a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801377e:	7163      	strbeq	r3, [r4, #5]
 8013780:	b004      	add	sp, #16
 8013782:	bd10      	pop	{r4, pc}

08013784 <uxr_stamp_create_session_header>:
 8013784:	b510      	push	{r4, lr}
 8013786:	4604      	mov	r4, r0
 8013788:	b08a      	sub	sp, #40	; 0x28
 801378a:	a802      	add	r0, sp, #8
 801378c:	2208      	movs	r2, #8
 801378e:	f7fa fc2f 	bl	800dff0 <ucdr_init_buffer>
 8013792:	2300      	movs	r3, #0
 8013794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013798:	461a      	mov	r2, r3
 801379a:	a802      	add	r0, sp, #8
 801379c:	9400      	str	r4, [sp, #0]
 801379e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80137a2:	f001 f841 	bl	8014828 <uxr_serialize_message_header>
 80137a6:	b00a      	add	sp, #40	; 0x28
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	bf00      	nop

080137ac <uxr_stamp_session_header>:
 80137ac:	b570      	push	{r4, r5, r6, lr}
 80137ae:	4604      	mov	r4, r0
 80137b0:	460d      	mov	r5, r1
 80137b2:	4616      	mov	r6, r2
 80137b4:	b08a      	sub	sp, #40	; 0x28
 80137b6:	4619      	mov	r1, r3
 80137b8:	a802      	add	r0, sp, #8
 80137ba:	2208      	movs	r2, #8
 80137bc:	f7fa fc18 	bl	800dff0 <ucdr_init_buffer>
 80137c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c4:	4633      	mov	r3, r6
 80137c6:	462a      	mov	r2, r5
 80137c8:	a802      	add	r0, sp, #8
 80137ca:	9400      	str	r4, [sp, #0]
 80137cc:	f001 f82c 	bl	8014828 <uxr_serialize_message_header>
 80137d0:	b00a      	add	sp, #40	; 0x28
 80137d2:	bd70      	pop	{r4, r5, r6, pc}

080137d4 <uxr_read_session_header>:
 80137d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d8:	4607      	mov	r7, r0
 80137da:	b084      	sub	sp, #16
 80137dc:	4608      	mov	r0, r1
 80137de:	460c      	mov	r4, r1
 80137e0:	4615      	mov	r5, r2
 80137e2:	461e      	mov	r6, r3
 80137e4:	f7fa fc36 	bl	800e054 <ucdr_buffer_remaining>
 80137e8:	2808      	cmp	r0, #8
 80137ea:	d803      	bhi.n	80137f4 <uxr_read_session_header+0x20>
 80137ec:	2000      	movs	r0, #0
 80137ee:	b004      	add	sp, #16
 80137f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f4:	f10d 080c 	add.w	r8, sp, #12
 80137f8:	4633      	mov	r3, r6
 80137fa:	462a      	mov	r2, r5
 80137fc:	4620      	mov	r0, r4
 80137fe:	f8cd 8000 	str.w	r8, [sp]
 8013802:	f10d 010b 	add.w	r1, sp, #11
 8013806:	f001 f82d 	bl	8014864 <uxr_deserialize_message_header>
 801380a:	783a      	ldrb	r2, [r7, #0]
 801380c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013810:	4293      	cmp	r3, r2
 8013812:	d1eb      	bne.n	80137ec <uxr_read_session_header+0x18>
 8013814:	061b      	lsls	r3, r3, #24
 8013816:	d41b      	bmi.n	8013850 <uxr_read_session_header+0x7c>
 8013818:	f898 2000 	ldrb.w	r2, [r8]
 801381c:	787b      	ldrb	r3, [r7, #1]
 801381e:	429a      	cmp	r2, r3
 8013820:	d003      	beq.n	801382a <uxr_read_session_header+0x56>
 8013822:	2001      	movs	r0, #1
 8013824:	f080 0001 	eor.w	r0, r0, #1
 8013828:	e7e1      	b.n	80137ee <uxr_read_session_header+0x1a>
 801382a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801382e:	78bb      	ldrb	r3, [r7, #2]
 8013830:	1cb9      	adds	r1, r7, #2
 8013832:	429a      	cmp	r2, r3
 8013834:	d1f5      	bne.n	8013822 <uxr_read_session_header+0x4e>
 8013836:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801383a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801383e:	429a      	cmp	r2, r3
 8013840:	d1ef      	bne.n	8013822 <uxr_read_session_header+0x4e>
 8013842:	784b      	ldrb	r3, [r1, #1]
 8013844:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013848:	429a      	cmp	r2, r3
 801384a:	d1ea      	bne.n	8013822 <uxr_read_session_header+0x4e>
 801384c:	2000      	movs	r0, #0
 801384e:	e7e9      	b.n	8013824 <uxr_read_session_header+0x50>
 8013850:	2001      	movs	r0, #1
 8013852:	e7cc      	b.n	80137ee <uxr_read_session_header+0x1a>

08013854 <uxr_session_header_offset>:
 8013854:	f990 3000 	ldrsb.w	r3, [r0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	bfac      	ite	ge
 801385c:	2008      	movge	r0, #8
 801385e:	2004      	movlt	r0, #4
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <uxr_init_base_object_request>:
 8013864:	b530      	push	{r4, r5, lr}
 8013866:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 801386a:	88c3      	ldrh	r3, [r0, #6]
 801386c:	b083      	sub	sp, #12
 801386e:	f1a3 040a 	sub.w	r4, r3, #10
 8013872:	b2a4      	uxth	r4, r4
 8013874:	42ac      	cmp	r4, r5
 8013876:	9101      	str	r1, [sp, #4]
 8013878:	d80e      	bhi.n	8013898 <uxr_init_base_object_request+0x34>
 801387a:	3301      	adds	r3, #1
 801387c:	b29c      	uxth	r4, r3
 801387e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8013882:	b2db      	uxtb	r3, r3
 8013884:	80c4      	strh	r4, [r0, #6]
 8013886:	1c91      	adds	r1, r2, #2
 8013888:	9801      	ldr	r0, [sp, #4]
 801388a:	7015      	strb	r5, [r2, #0]
 801388c:	7053      	strb	r3, [r2, #1]
 801388e:	f7fe ff8b 	bl	80127a8 <uxr_object_id_to_raw>
 8013892:	4620      	mov	r0, r4
 8013894:	b003      	add	sp, #12
 8013896:	bd30      	pop	{r4, r5, pc}
 8013898:	230a      	movs	r3, #10
 801389a:	2500      	movs	r5, #0
 801389c:	461c      	mov	r4, r3
 801389e:	e7f1      	b.n	8013884 <uxr_init_base_object_request+0x20>

080138a0 <uxr_parse_base_object_request>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	4604      	mov	r4, r0
 80138a4:	3002      	adds	r0, #2
 80138a6:	460d      	mov	r5, r1
 80138a8:	4616      	mov	r6, r2
 80138aa:	f7fe ff69 	bl	8012780 <uxr_object_id_from_raw>
 80138ae:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80138b2:	8028      	strh	r0, [r5, #0]
 80138b4:	806b      	strh	r3, [r5, #2]
 80138b6:	7822      	ldrb	r2, [r4, #0]
 80138b8:	7863      	ldrb	r3, [r4, #1]
 80138ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80138be:	8033      	strh	r3, [r6, #0]
 80138c0:	bd70      	pop	{r4, r5, r6, pc}
 80138c2:	bf00      	nop

080138c4 <uxr_init_framing_io>:
 80138c4:	2300      	movs	r3, #0
 80138c6:	7041      	strb	r1, [r0, #1]
 80138c8:	7003      	strb	r3, [r0, #0]
 80138ca:	8583      	strh	r3, [r0, #44]	; 0x2c
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop

080138d0 <uxr_write_framed_msg>:
 80138d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138d4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80138d8:	4604      	mov	r4, r0
 80138da:	7840      	ldrb	r0, [r0, #1]
 80138dc:	b085      	sub	sp, #20
 80138de:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 80138e2:	2d01      	cmp	r5, #1
 80138e4:	460e      	mov	r6, r1
 80138e6:	4617      	mov	r7, r2
 80138e8:	469b      	mov	fp, r3
 80138ea:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80138ee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80138f2:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 80138f6:	f240 8131 	bls.w	8013b5c <uxr_write_framed_msg+0x28c>
 80138fa:	2302      	movs	r3, #2
 80138fc:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8013900:	2a01      	cmp	r2, #1
 8013902:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8013906:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801390a:	f240 8092 	bls.w	8013a32 <uxr_write_framed_msg+0x162>
 801390e:	2303      	movs	r3, #3
 8013910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013912:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8013916:	b2d0      	uxtb	r0, r2
 8013918:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801391c:	2a01      	cmp	r2, #1
 801391e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013922:	f240 809c 	bls.w	8013a5e <uxr_write_framed_msg+0x18e>
 8013926:	18e2      	adds	r2, r4, r3
 8013928:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801392c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801392e:	3301      	adds	r3, #1
 8013930:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8013934:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8013938:	2a01      	cmp	r2, #1
 801393a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801393e:	f240 80a1 	bls.w	8013a84 <uxr_write_framed_msg+0x1b4>
 8013942:	1c5a      	adds	r2, r3, #1
 8013944:	4423      	add	r3, r4
 8013946:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801394a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801394c:	b2d2      	uxtb	r2, r2
 801394e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013952:	2b00      	cmp	r3, #0
 8013954:	f000 80a6 	beq.w	8013aa4 <uxr_write_framed_msg+0x1d4>
 8013958:	f04f 0a00 	mov.w	sl, #0
 801395c:	46d1      	mov	r9, sl
 801395e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8013962:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013966:	2901      	cmp	r1, #1
 8013968:	f240 80bf 	bls.w	8013aea <uxr_write_framed_msg+0x21a>
 801396c:	2a29      	cmp	r2, #41	; 0x29
 801396e:	f200 809c 	bhi.w	8013aaa <uxr_write_framed_msg+0x1da>
 8013972:	1c50      	adds	r0, r2, #1
 8013974:	18a1      	adds	r1, r4, r2
 8013976:	b2c2      	uxtb	r2, r0
 8013978:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 801397c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013980:	ea8a 0303 	eor.w	r3, sl, r3
 8013984:	4988      	ldr	r1, [pc, #544]	; (8013ba8 <uxr_write_framed_msg+0x2d8>)
 8013986:	b2db      	uxtb	r3, r3
 8013988:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801398c:	f109 0901 	add.w	r9, r9, #1
 8013990:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8013994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013996:	454b      	cmp	r3, r9
 8013998:	d8e1      	bhi.n	801395e <uxr_write_framed_msg+0x8e>
 801399a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801399e:	fa5f f98a 	uxtb.w	r9, sl
 80139a2:	9301      	str	r3, [sp, #4]
 80139a4:	f04f 0b00 	mov.w	fp, #0
 80139a8:	f88d 900c 	strb.w	r9, [sp, #12]
 80139ac:	f88d 300d 	strb.w	r3, [sp, #13]
 80139b0:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80139b4:	fa5f f18a 	uxtb.w	r1, sl
 80139b8:	2901      	cmp	r1, #1
 80139ba:	d921      	bls.n	8013a00 <uxr_write_framed_msg+0x130>
 80139bc:	2a29      	cmp	r2, #41	; 0x29
 80139be:	f240 80a6 	bls.w	8013b0e <uxr_write_framed_msg+0x23e>
 80139c2:	2500      	movs	r5, #0
 80139c4:	e000      	b.n	80139c8 <uxr_write_framed_msg+0xf8>
 80139c6:	b160      	cbz	r0, 80139e2 <uxr_write_framed_msg+0x112>
 80139c8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80139cc:	1b52      	subs	r2, r2, r5
 80139ce:	4643      	mov	r3, r8
 80139d0:	4638      	mov	r0, r7
 80139d2:	4421      	add	r1, r4
 80139d4:	47b0      	blx	r6
 80139d6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80139da:	4405      	add	r5, r0
 80139dc:	4295      	cmp	r5, r2
 80139de:	d3f2      	bcc.n	80139c6 <uxr_write_framed_msg+0xf6>
 80139e0:	d003      	beq.n	80139ea <uxr_write_framed_msg+0x11a>
 80139e2:	2000      	movs	r0, #0
 80139e4:	b005      	add	sp, #20
 80139e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ea:	f04f 0300 	mov.w	r3, #0
 80139ee:	fa5f f18a 	uxtb.w	r1, sl
 80139f2:	2901      	cmp	r1, #1
 80139f4:	f04f 0200 	mov.w	r2, #0
 80139f8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80139fc:	f200 8087 	bhi.w	8013b0e <uxr_write_framed_msg+0x23e>
 8013a00:	1c51      	adds	r1, r2, #1
 8013a02:	b2c9      	uxtb	r1, r1
 8013a04:	2929      	cmp	r1, #41	; 0x29
 8013a06:	d8dc      	bhi.n	80139c2 <uxr_write_framed_msg+0xf2>
 8013a08:	1c91      	adds	r1, r2, #2
 8013a0a:	18a0      	adds	r0, r4, r2
 8013a0c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8013a10:	b2ca      	uxtb	r2, r1
 8013a12:	4659      	mov	r1, fp
 8013a14:	f089 0920 	eor.w	r9, r9, #32
 8013a18:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8013a1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013a20:	f04f 0b01 	mov.w	fp, #1
 8013a24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	d17c      	bne.n	8013b26 <uxr_write_framed_msg+0x256>
 8013a2c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013a30:	e7be      	b.n	80139b0 <uxr_write_framed_msg+0xe0>
 8013a32:	461a      	mov	r2, r3
 8013a34:	2503      	movs	r5, #3
 8013a36:	2304      	movs	r3, #4
 8013a38:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013a3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013a3e:	4422      	add	r2, r4
 8013a40:	b2c0      	uxtb	r0, r0
 8013a42:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 8013a46:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8013a4a:	4425      	add	r5, r4
 8013a4c:	f081 0120 	eor.w	r1, r1, #32
 8013a50:	2a01      	cmp	r2, #1
 8013a52:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 8013a56:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013a5a:	f63f af64 	bhi.w	8013926 <uxr_write_framed_msg+0x56>
 8013a5e:	217d      	movs	r1, #125	; 0x7d
 8013a60:	18e2      	adds	r2, r4, r3
 8013a62:	f080 0020 	eor.w	r0, r0, #32
 8013a66:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8013a6a:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 8013a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a70:	3302      	adds	r3, #2
 8013a72:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8013a76:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8013a7a:	2a01      	cmp	r2, #1
 8013a7c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013a80:	f63f af5f 	bhi.w	8013942 <uxr_write_framed_msg+0x72>
 8013a84:	257d      	movs	r5, #125	; 0x7d
 8013a86:	18e0      	adds	r0, r4, r3
 8013a88:	3302      	adds	r3, #2
 8013a8a:	b2da      	uxtb	r2, r3
 8013a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a8e:	f081 0120 	eor.w	r1, r1, #32
 8013a92:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8013a96:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013a9a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f47f af5a 	bne.w	8013958 <uxr_write_framed_msg+0x88>
 8013aa4:	4699      	mov	r9, r3
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	e77c      	b.n	80139a4 <uxr_write_framed_msg+0xd4>
 8013aaa:	2500      	movs	r5, #0
 8013aac:	e001      	b.n	8013ab2 <uxr_write_framed_msg+0x1e2>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d097      	beq.n	80139e2 <uxr_write_framed_msg+0x112>
 8013ab2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013ab6:	1b52      	subs	r2, r2, r5
 8013ab8:	4643      	mov	r3, r8
 8013aba:	4638      	mov	r0, r7
 8013abc:	4421      	add	r1, r4
 8013abe:	47b0      	blx	r6
 8013ac0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013ac4:	4405      	add	r5, r0
 8013ac6:	4295      	cmp	r5, r2
 8013ac8:	d3f1      	bcc.n	8013aae <uxr_write_framed_msg+0x1de>
 8013aca:	d18a      	bne.n	80139e2 <uxr_write_framed_msg+0x112>
 8013acc:	f04f 0300 	mov.w	r3, #0
 8013ad0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad6:	454b      	cmp	r3, r9
 8013ad8:	d95f      	bls.n	8013b9a <uxr_write_framed_msg+0x2ca>
 8013ada:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013ae4:	2901      	cmp	r1, #1
 8013ae6:	f63f af41 	bhi.w	801396c <uxr_write_framed_msg+0x9c>
 8013aea:	1c51      	adds	r1, r2, #1
 8013aec:	b2c9      	uxtb	r1, r1
 8013aee:	2929      	cmp	r1, #41	; 0x29
 8013af0:	d8db      	bhi.n	8013aaa <uxr_write_framed_msg+0x1da>
 8013af2:	1c95      	adds	r5, r2, #2
 8013af4:	18a0      	adds	r0, r4, r2
 8013af6:	b2ea      	uxtb	r2, r5
 8013af8:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013afc:	f083 0120 	eor.w	r1, r3, #32
 8013b00:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013b04:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8013b08:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b0c:	e738      	b.n	8013980 <uxr_write_framed_msg+0xb0>
 8013b0e:	4659      	mov	r1, fp
 8013b10:	1c55      	adds	r5, r2, #1
 8013b12:	18a0      	adds	r0, r4, r2
 8013b14:	b2ea      	uxtb	r2, r5
 8013b16:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8013b1a:	f04f 0b01 	mov.w	fp, #1
 8013b1e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b22:	2900      	cmp	r1, #0
 8013b24:	d082      	beq.n	8013a2c <uxr_write_framed_msg+0x15c>
 8013b26:	2500      	movs	r5, #0
 8013b28:	e002      	b.n	8013b30 <uxr_write_framed_msg+0x260>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	f43f af59 	beq.w	80139e2 <uxr_write_framed_msg+0x112>
 8013b30:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013b34:	1b52      	subs	r2, r2, r5
 8013b36:	4643      	mov	r3, r8
 8013b38:	4638      	mov	r0, r7
 8013b3a:	4421      	add	r1, r4
 8013b3c:	47b0      	blx	r6
 8013b3e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013b42:	4405      	add	r5, r0
 8013b44:	4295      	cmp	r5, r2
 8013b46:	d3f0      	bcc.n	8013b2a <uxr_write_framed_msg+0x25a>
 8013b48:	f47f af4b 	bne.w	80139e2 <uxr_write_framed_msg+0x112>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b50:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013b54:	b290      	uxth	r0, r2
 8013b56:	b005      	add	sp, #20
 8013b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5c:	2303      	movs	r3, #3
 8013b5e:	257d      	movs	r5, #125	; 0x7d
 8013b60:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8013b64:	f080 0020 	eor.w	r0, r0, #32
 8013b68:	2a01      	cmp	r2, #1
 8013b6a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8013b6e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013b72:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8013b76:	d803      	bhi.n	8013b80 <uxr_write_framed_msg+0x2b0>
 8013b78:	461a      	mov	r2, r3
 8013b7a:	2504      	movs	r5, #4
 8013b7c:	2305      	movs	r3, #5
 8013b7e:	e75b      	b.n	8013a38 <uxr_write_framed_msg+0x168>
 8013b80:	2304      	movs	r3, #4
 8013b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b84:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8013b88:	b2d0      	uxtb	r0, r2
 8013b8a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8013b8e:	2a01      	cmp	r2, #1
 8013b90:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013b94:	f63f aec7 	bhi.w	8013926 <uxr_write_framed_msg+0x56>
 8013b98:	e761      	b.n	8013a5e <uxr_write_framed_msg+0x18e>
 8013b9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	fa5f f98a 	uxtb.w	r9, sl
 8013ba4:	9301      	str	r3, [sp, #4]
 8013ba6:	e6fd      	b.n	80139a4 <uxr_write_framed_msg+0xd4>
 8013ba8:	0801c594 	.word	0x0801c594

08013bac <uxr_framing_read_transport>:
 8013bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	461f      	mov	r7, r3
 8013bb6:	4689      	mov	r9, r1
 8013bb8:	4692      	mov	sl, r2
 8013bba:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013bbe:	f000 fc79 	bl	80144b4 <uxr_millis>
 8013bc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013bc6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013bca:	4680      	mov	r8, r0
 8013bcc:	42b3      	cmp	r3, r6
 8013bce:	d060      	beq.n	8013c92 <uxr_framing_read_transport+0xe6>
 8013bd0:	d81c      	bhi.n	8013c0c <uxr_framing_read_transport+0x60>
 8013bd2:	1e75      	subs	r5, r6, #1
 8013bd4:	2600      	movs	r6, #0
 8013bd6:	1aed      	subs	r5, r5, r3
 8013bd8:	b2ed      	uxtb	r5, r5
 8013bda:	455d      	cmp	r5, fp
 8013bdc:	d81f      	bhi.n	8013c1e <uxr_framing_read_transport+0x72>
 8013bde:	19ab      	adds	r3, r5, r6
 8013be0:	455b      	cmp	r3, fp
 8013be2:	bf84      	itt	hi
 8013be4:	ebab 0605 	subhi.w	r6, fp, r5
 8013be8:	b2f6      	uxtbhi	r6, r6
 8013bea:	b9ed      	cbnz	r5, 8013c28 <uxr_framing_read_transport+0x7c>
 8013bec:	f04f 0b00 	mov.w	fp, #0
 8013bf0:	f000 fc60 	bl	80144b4 <uxr_millis>
 8013bf4:	eba0 0808 	sub.w	r8, r0, r8
 8013bf8:	4658      	mov	r0, fp
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	eba3 0308 	sub.w	r3, r3, r8
 8013c00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c04:	603b      	str	r3, [r7, #0]
 8013c06:	b003      	add	sp, #12
 8013c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0c:	2e00      	cmp	r6, #0
 8013c0e:	d048      	beq.n	8013ca2 <uxr_framing_read_transport+0xf6>
 8013c10:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013c14:	b2ed      	uxtb	r5, r5
 8013c16:	3e01      	subs	r6, #1
 8013c18:	455d      	cmp	r5, fp
 8013c1a:	b2f6      	uxtb	r6, r6
 8013c1c:	d9df      	bls.n	8013bde <uxr_framing_read_transport+0x32>
 8013c1e:	fa5f f58b 	uxtb.w	r5, fp
 8013c22:	2600      	movs	r6, #0
 8013c24:	2d00      	cmp	r5, #0
 8013c26:	d0e1      	beq.n	8013bec <uxr_framing_read_transport+0x40>
 8013c28:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013c2c:	3102      	adds	r1, #2
 8013c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c30:	462a      	mov	r2, r5
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	4421      	add	r1, r4
 8013c38:	4650      	mov	r0, sl
 8013c3a:	47c8      	blx	r9
 8013c3c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013c40:	4a1b      	ldr	r2, [pc, #108]	; (8013cb0 <uxr_framing_read_transport+0x104>)
 8013c42:	4403      	add	r3, r0
 8013c44:	0859      	lsrs	r1, r3, #1
 8013c46:	fba2 2101 	umull	r2, r1, r2, r1
 8013c4a:	222a      	movs	r2, #42	; 0x2a
 8013c4c:	0889      	lsrs	r1, r1, #2
 8013c4e:	fb02 3111 	mls	r1, r2, r1, r3
 8013c52:	4683      	mov	fp, r0
 8013c54:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d0c7      	beq.n	8013bec <uxr_framing_read_transport+0x40>
 8013c5c:	42a8      	cmp	r0, r5
 8013c5e:	d1c7      	bne.n	8013bf0 <uxr_framing_read_transport+0x44>
 8013c60:	b31e      	cbz	r6, 8013caa <uxr_framing_read_transport+0xfe>
 8013c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c64:	3102      	adds	r1, #2
 8013c66:	4632      	mov	r2, r6
 8013c68:	4421      	add	r1, r4
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	4650      	mov	r0, sl
 8013c6e:	2300      	movs	r3, #0
 8013c70:	47c8      	blx	r9
 8013c72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013c76:	4a0e      	ldr	r2, [pc, #56]	; (8013cb0 <uxr_framing_read_transport+0x104>)
 8013c78:	1819      	adds	r1, r3, r0
 8013c7a:	084b      	lsrs	r3, r1, #1
 8013c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8013c80:	222a      	movs	r2, #42	; 0x2a
 8013c82:	089b      	lsrs	r3, r3, #2
 8013c84:	fb02 1313 	mls	r3, r2, r3, r1
 8013c88:	eb00 0b05 	add.w	fp, r0, r5
 8013c8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013c90:	e7ae      	b.n	8013bf0 <uxr_framing_read_transport+0x44>
 8013c92:	2600      	movs	r6, #0
 8013c94:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013c98:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013c9a:	d9c0      	bls.n	8013c1e <uxr_framing_read_transport+0x72>
 8013c9c:	2102      	movs	r1, #2
 8013c9e:	2529      	movs	r5, #41	; 0x29
 8013ca0:	e7c5      	b.n	8013c2e <uxr_framing_read_transport+0x82>
 8013ca2:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013ca6:	b2ed      	uxtb	r5, r5
 8013ca8:	e797      	b.n	8013bda <uxr_framing_read_transport+0x2e>
 8013caa:	46ab      	mov	fp, r5
 8013cac:	e7a0      	b.n	8013bf0 <uxr_framing_read_transport+0x44>
 8013cae:	bf00      	nop
 8013cb0:	30c30c31 	.word	0x30c30c31

08013cb4 <uxr_read_framed_msg>:
 8013cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb8:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8013cbc:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	42ae      	cmp	r6, r5
 8013cc4:	461f      	mov	r7, r3
 8013cc6:	4689      	mov	r9, r1
 8013cc8:	4692      	mov	sl, r2
 8013cca:	b083      	sub	sp, #12
 8013ccc:	f000 8176 	beq.w	8013fbc <uxr_read_framed_msg+0x308>
 8013cd0:	7823      	ldrb	r3, [r4, #0]
 8013cd2:	4ec7      	ldr	r6, [pc, #796]	; (8013ff0 <uxr_read_framed_msg+0x33c>)
 8013cd4:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8013ff4 <uxr_read_framed_msg+0x340>
 8013cd8:	2b07      	cmp	r3, #7
 8013cda:	d8fd      	bhi.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013cdc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013ce0:	00ee010d 	.word	0x00ee010d
 8013ce4:	00b100ce 	.word	0x00b100ce
 8013ce8:	004d0088 	.word	0x004d0088
 8013cec:	00080030 	.word	0x00080030
 8013cf0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013cf4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	f000 813a 	beq.w	8013f72 <uxr_read_framed_msg+0x2be>
 8013cfe:	18e1      	adds	r1, r4, r3
 8013d00:	7889      	ldrb	r1, [r1, #2]
 8013d02:	202a      	movs	r0, #42	; 0x2a
 8013d04:	297d      	cmp	r1, #125	; 0x7d
 8013d06:	f000 81b0 	beq.w	801406a <uxr_read_framed_msg+0x3b6>
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	085a      	lsrs	r2, r3, #1
 8013d0e:	fba6 5202 	umull	r5, r2, r6, r2
 8013d12:	0892      	lsrs	r2, r2, #2
 8013d14:	fb00 3312 	mls	r3, r0, r2, r3
 8013d18:	297e      	cmp	r1, #126	; 0x7e
 8013d1a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013d1e:	f000 8244 	beq.w	80141aa <uxr_read_framed_msg+0x4f6>
 8013d22:	2000      	movs	r0, #0
 8013d24:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013d26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013d28:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013d32:	7020      	strb	r0, [r4, #0]
 8013d34:	f000 8176 	beq.w	8014024 <uxr_read_framed_msg+0x370>
 8013d38:	2000      	movs	r0, #0
 8013d3a:	b003      	add	sp, #12
 8013d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d40:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013d44:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	f000 8121 	beq.w	8013f90 <uxr_read_framed_msg+0x2dc>
 8013d4e:	18e1      	adds	r1, r4, r3
 8013d50:	7889      	ldrb	r1, [r1, #2]
 8013d52:	202a      	movs	r0, #42	; 0x2a
 8013d54:	297d      	cmp	r1, #125	; 0x7d
 8013d56:	f000 816d 	beq.w	8014034 <uxr_read_framed_msg+0x380>
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	085a      	lsrs	r2, r3, #1
 8013d5e:	fba6 5202 	umull	r5, r2, r6, r2
 8013d62:	0892      	lsrs	r2, r2, #2
 8013d64:	fb00 3312 	mls	r3, r0, r2, r3
 8013d68:	297e      	cmp	r1, #126	; 0x7e
 8013d6a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013d6e:	f000 820c 	beq.w	801418a <uxr_read_framed_msg+0x4d6>
 8013d72:	2307      	movs	r3, #7
 8013d74:	86a1      	strh	r1, [r4, #52]	; 0x34
 8013d76:	7023      	strb	r3, [r4, #0]
 8013d78:	e7ae      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013d7a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013d7c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013d80:	459e      	cmp	lr, r3
 8013d82:	d930      	bls.n	8013de6 <uxr_read_framed_msg+0x132>
 8013d84:	252a      	movs	r5, #42	; 0x2a
 8013d86:	e021      	b.n	8013dcc <uxr_read_framed_msg+0x118>
 8013d88:	7889      	ldrb	r1, [r1, #2]
 8013d8a:	297d      	cmp	r1, #125	; 0x7d
 8013d8c:	f000 80d1 	beq.w	8013f32 <uxr_read_framed_msg+0x27e>
 8013d90:	fba6 2000 	umull	r2, r0, r6, r0
 8013d94:	0880      	lsrs	r0, r0, #2
 8013d96:	fb05 c010 	mls	r0, r5, r0, ip
 8013d9a:	297e      	cmp	r1, #126	; 0x7e
 8013d9c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8013da0:	f000 80c4 	beq.w	8013f2c <uxr_read_framed_msg+0x278>
 8013da4:	54f9      	strb	r1, [r7, r3]
 8013da6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8013daa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013dac:	ea8c 0001 	eor.w	r0, ip, r1
 8013db0:	b2c0      	uxtb	r0, r0
 8013db2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 8013db6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013dba:	3301      	adds	r3, #1
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 8013dc2:	4573      	cmp	r3, lr
 8013dc4:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013dc6:	8663      	strh	r3, [r4, #50]	; 0x32
 8013dc8:	f080 8116 	bcs.w	8013ff8 <uxr_read_framed_msg+0x344>
 8013dcc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013dd0:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 8013dd4:	f102 0c01 	add.w	ip, r2, #1
 8013dd8:	4593      	cmp	fp, r2
 8013dda:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8013dde:	eb04 0102 	add.w	r1, r4, r2
 8013de2:	d1d1      	bne.n	8013d88 <uxr_read_framed_msg+0xd4>
 8013de4:	459e      	cmp	lr, r3
 8013de6:	f040 810b 	bne.w	8014000 <uxr_read_framed_msg+0x34c>
 8013dea:	2306      	movs	r3, #6
 8013dec:	7023      	strb	r3, [r4, #0]
 8013dee:	e773      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013df0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013df4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	f000 80ba 	beq.w	8013f72 <uxr_read_framed_msg+0x2be>
 8013dfe:	18e1      	adds	r1, r4, r3
 8013e00:	7889      	ldrb	r1, [r1, #2]
 8013e02:	202a      	movs	r0, #42	; 0x2a
 8013e04:	297d      	cmp	r1, #125	; 0x7d
 8013e06:	f000 818a 	beq.w	801411e <uxr_read_framed_msg+0x46a>
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	085a      	lsrs	r2, r3, #1
 8013e0e:	fba6 5202 	umull	r5, r2, r6, r2
 8013e12:	0892      	lsrs	r2, r2, #2
 8013e14:	fb00 3212 	mls	r2, r0, r2, r3
 8013e18:	297e      	cmp	r1, #126	; 0x7e
 8013e1a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013e1e:	f000 81c4 	beq.w	80141aa <uxr_read_framed_msg+0x4f6>
 8013e22:	2000      	movs	r0, #0
 8013e24:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013e26:	8660      	strh	r0, [r4, #50]	; 0x32
 8013e28:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	428b      	cmp	r3, r1
 8013e32:	8623      	strh	r3, [r4, #48]	; 0x30
 8013e34:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013e36:	f240 80d8 	bls.w	8013fea <uxr_read_framed_msg+0x336>
 8013e3a:	7020      	strb	r0, [r4, #0]
 8013e3c:	b003      	add	sp, #12
 8013e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e42:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013e46:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	f000 80a0 	beq.w	8013f90 <uxr_read_framed_msg+0x2dc>
 8013e50:	18e1      	adds	r1, r4, r3
 8013e52:	7889      	ldrb	r1, [r1, #2]
 8013e54:	202a      	movs	r0, #42	; 0x2a
 8013e56:	297d      	cmp	r1, #125	; 0x7d
 8013e58:	f000 817c 	beq.w	8014154 <uxr_read_framed_msg+0x4a0>
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	085a      	lsrs	r2, r3, #1
 8013e60:	fba6 5202 	umull	r5, r2, r6, r2
 8013e64:	0892      	lsrs	r2, r2, #2
 8013e66:	fb00 3312 	mls	r3, r0, r2, r3
 8013e6a:	297e      	cmp	r1, #126	; 0x7e
 8013e6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013e70:	f000 818b 	beq.w	801418a <uxr_read_framed_msg+0x4d6>
 8013e74:	2304      	movs	r3, #4
 8013e76:	8621      	strh	r1, [r4, #48]	; 0x30
 8013e78:	7023      	strb	r3, [r4, #0]
 8013e7a:	e72d      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013e7c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e80:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013e84:	4291      	cmp	r1, r2
 8013e86:	f000 80ae 	beq.w	8013fe6 <uxr_read_framed_msg+0x332>
 8013e8a:	18a3      	adds	r3, r4, r2
 8013e8c:	7898      	ldrb	r0, [r3, #2]
 8013e8e:	287d      	cmp	r0, #125	; 0x7d
 8013e90:	f000 8107 	beq.w	80140a2 <uxr_read_framed_msg+0x3ee>
 8013e94:	232a      	movs	r3, #42	; 0x2a
 8013e96:	3201      	adds	r2, #1
 8013e98:	0851      	lsrs	r1, r2, #1
 8013e9a:	fba6 5101 	umull	r5, r1, r6, r1
 8013e9e:	0889      	lsrs	r1, r1, #2
 8013ea0:	fb03 2211 	mls	r2, r3, r1, r2
 8013ea4:	287e      	cmp	r0, #126	; 0x7e
 8013ea6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013eaa:	f000 8180 	beq.w	80141ae <uxr_read_framed_msg+0x4fa>
 8013eae:	7863      	ldrb	r3, [r4, #1]
 8013eb0:	4283      	cmp	r3, r0
 8013eb2:	bf0c      	ite	eq
 8013eb4:	2303      	moveq	r3, #3
 8013eb6:	2300      	movne	r3, #0
 8013eb8:	7023      	strb	r3, [r4, #0]
 8013eba:	e70d      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013ec2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8013ec6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013eca:	4288      	cmp	r0, r1
 8013ecc:	d062      	beq.n	8013f94 <uxr_read_framed_msg+0x2e0>
 8013ece:	1862      	adds	r2, r4, r1
 8013ed0:	7892      	ldrb	r2, [r2, #2]
 8013ed2:	2a7d      	cmp	r2, #125	; 0x7d
 8013ed4:	f000 8100 	beq.w	80140d8 <uxr_read_framed_msg+0x424>
 8013ed8:	202a      	movs	r0, #42	; 0x2a
 8013eda:	3101      	adds	r1, #1
 8013edc:	084b      	lsrs	r3, r1, #1
 8013ede:	fba6 5303 	umull	r5, r3, r6, r3
 8013ee2:	089b      	lsrs	r3, r3, #2
 8013ee4:	fb00 1313 	mls	r3, r0, r3, r1
 8013ee8:	2a7e      	cmp	r2, #126	; 0x7e
 8013eea:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8013eee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013ef2:	d04f      	beq.n	8013f94 <uxr_read_framed_msg+0x2e0>
 8013ef4:	2302      	movs	r3, #2
 8013ef6:	7023      	strb	r3, [r4, #0]
 8013ef8:	e6ee      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013efa:	252a      	movs	r5, #42	; 0x2a
 8013efc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013f00:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013f04:	f103 0c01 	add.w	ip, r3, #1
 8013f08:	4298      	cmp	r0, r3
 8013f0a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013f0e:	eb04 0103 	add.w	r1, r4, r3
 8013f12:	f43f af11 	beq.w	8013d38 <uxr_read_framed_msg+0x84>
 8013f16:	fba6 3202 	umull	r3, r2, r6, r2
 8013f1a:	0892      	lsrs	r2, r2, #2
 8013f1c:	fb05 c212 	mls	r2, r5, r2, ip
 8013f20:	7889      	ldrb	r1, [r1, #2]
 8013f22:	b2d3      	uxtb	r3, r2
 8013f24:	297e      	cmp	r1, #126	; 0x7e
 8013f26:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013f2a:	d1eb      	bne.n	8013f04 <uxr_read_framed_msg+0x250>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	7023      	strb	r3, [r4, #0]
 8013f30:	e6d2      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013f32:	f102 0c01 	add.w	ip, r2, #1
 8013f36:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8013f3a:	fba6 0101 	umull	r0, r1, r6, r1
 8013f3e:	0889      	lsrs	r1, r1, #2
 8013f40:	fb05 c111 	mls	r1, r5, r1, ip
 8013f44:	eb04 0c01 	add.w	ip, r4, r1
 8013f48:	b2c9      	uxtb	r1, r1
 8013f4a:	3202      	adds	r2, #2
 8013f4c:	458b      	cmp	fp, r1
 8013f4e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8013f52:	f43f af47 	beq.w	8013de4 <uxr_read_framed_msg+0x130>
 8013f56:	fba6 1000 	umull	r1, r0, r6, r0
 8013f5a:	0880      	lsrs	r0, r0, #2
 8013f5c:	fb05 2210 	mls	r2, r5, r0, r2
 8013f60:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8013f64:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013f68:	297e      	cmp	r1, #126	; 0x7e
 8013f6a:	d036      	beq.n	8013fda <uxr_read_framed_msg+0x326>
 8013f6c:	f081 0120 	eor.w	r1, r1, #32
 8013f70:	e718      	b.n	8013da4 <uxr_read_framed_msg+0xf0>
 8013f72:	2301      	movs	r3, #1
 8013f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f76:	4649      	mov	r1, r9
 8013f78:	e9cd 2300 	strd	r2, r3, [sp]
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	4652      	mov	r2, sl
 8013f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f82:	f7ff fe13 	bl	8013bac <uxr_framing_read_transport>
 8013f86:	2800      	cmp	r0, #0
 8013f88:	f43f aed6 	beq.w	8013d38 <uxr_read_framed_msg+0x84>
 8013f8c:	7823      	ldrb	r3, [r4, #0]
 8013f8e:	e6a3      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013f90:	2302      	movs	r3, #2
 8013f92:	e7ef      	b.n	8013f74 <uxr_read_framed_msg+0x2c0>
 8013f94:	2304      	movs	r3, #4
 8013f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f98:	4649      	mov	r1, r9
 8013f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	4652      	mov	r2, sl
 8013fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fa4:	f7ff fe02 	bl	8013bac <uxr_framing_read_transport>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d1ef      	bne.n	8013f8c <uxr_read_framed_msg+0x2d8>
 8013fac:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8013fb0:	387e      	subs	r0, #126	; 0x7e
 8013fb2:	bf18      	it	ne
 8013fb4:	2001      	movne	r0, #1
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d0e8      	beq.n	8013f8c <uxr_read_framed_msg+0x2d8>
 8013fba:	e6bd      	b.n	8013d38 <uxr_read_framed_msg+0x84>
 8013fbc:	2305      	movs	r3, #5
 8013fbe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013fc0:	e9cd 5300 	strd	r5, r3, [sp]
 8013fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fc6:	f7ff fdf1 	bl	8013bac <uxr_framing_read_transport>
 8013fca:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013fce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	f43f aeb0 	beq.w	8013d38 <uxr_read_framed_msg+0x84>
 8013fd8:	e67a      	b.n	8013cd0 <uxr_read_framed_msg+0x1c>
 8013fda:	459e      	cmp	lr, r3
 8013fdc:	f43f af05 	beq.w	8013dea <uxr_read_framed_msg+0x136>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	7023      	strb	r3, [r4, #0]
 8013fe4:	e678      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013fe6:	2303      	movs	r3, #3
 8013fe8:	e7c4      	b.n	8013f74 <uxr_read_framed_msg+0x2c0>
 8013fea:	2305      	movs	r3, #5
 8013fec:	7023      	strb	r3, [r4, #0]
 8013fee:	e673      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 8013ff0:	30c30c31 	.word	0x30c30c31
 8013ff4:	0801c594 	.word	0x0801c594
 8013ff8:	f43f aef7 	beq.w	8013dea <uxr_read_framed_msg+0x136>
 8013ffc:	297e      	cmp	r1, #126	; 0x7e
 8013ffe:	d095      	beq.n	8013f2c <uxr_read_framed_msg+0x278>
 8014000:	ebae 0303 	sub.w	r3, lr, r3
 8014004:	3302      	adds	r3, #2
 8014006:	9301      	str	r3, [sp, #4]
 8014008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801400a:	4652      	mov	r2, sl
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	4649      	mov	r1, r9
 8014010:	4620      	mov	r0, r4
 8014012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014014:	f7ff fdca 	bl	8013bac <uxr_framing_read_transport>
 8014018:	fab0 f080 	clz	r0, r0
 801401c:	0940      	lsrs	r0, r0, #5
 801401e:	2800      	cmp	r0, #0
 8014020:	d0b4      	beq.n	8013f8c <uxr_read_framed_msg+0x2d8>
 8014022:	e689      	b.n	8013d38 <uxr_read_framed_msg+0x84>
 8014024:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801402a:	7013      	strb	r3, [r2, #0]
 801402c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801402e:	b003      	add	sp, #12
 8014030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014034:	1c5d      	adds	r5, r3, #1
 8014036:	0869      	lsrs	r1, r5, #1
 8014038:	fba6 c101 	umull	ip, r1, r6, r1
 801403c:	0889      	lsrs	r1, r1, #2
 801403e:	fb00 5111 	mls	r1, r0, r1, r5
 8014042:	b2cd      	uxtb	r5, r1
 8014044:	42aa      	cmp	r2, r5
 8014046:	d0a3      	beq.n	8013f90 <uxr_read_framed_msg+0x2dc>
 8014048:	3302      	adds	r3, #2
 801404a:	085a      	lsrs	r2, r3, #1
 801404c:	fba6 5202 	umull	r5, r2, r6, r2
 8014050:	0892      	lsrs	r2, r2, #2
 8014052:	fb00 3212 	mls	r2, r0, r2, r3
 8014056:	1863      	adds	r3, r4, r1
 8014058:	7899      	ldrb	r1, [r3, #2]
 801405a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801405e:	297e      	cmp	r1, #126	; 0x7e
 8014060:	f000 8093 	beq.w	801418a <uxr_read_framed_msg+0x4d6>
 8014064:	f081 0120 	eor.w	r1, r1, #32
 8014068:	e683      	b.n	8013d72 <uxr_read_framed_msg+0xbe>
 801406a:	1c5d      	adds	r5, r3, #1
 801406c:	0869      	lsrs	r1, r5, #1
 801406e:	fba6 c101 	umull	ip, r1, r6, r1
 8014072:	0889      	lsrs	r1, r1, #2
 8014074:	fb00 5111 	mls	r1, r0, r1, r5
 8014078:	b2cd      	uxtb	r5, r1
 801407a:	42aa      	cmp	r2, r5
 801407c:	f43f af79 	beq.w	8013f72 <uxr_read_framed_msg+0x2be>
 8014080:	3302      	adds	r3, #2
 8014082:	085a      	lsrs	r2, r3, #1
 8014084:	fba6 5202 	umull	r5, r2, r6, r2
 8014088:	0892      	lsrs	r2, r2, #2
 801408a:	fb00 3212 	mls	r2, r0, r2, r3
 801408e:	1863      	adds	r3, r4, r1
 8014090:	789b      	ldrb	r3, [r3, #2]
 8014092:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014096:	2b7e      	cmp	r3, #126	; 0x7e
 8014098:	f000 8087 	beq.w	80141aa <uxr_read_framed_msg+0x4f6>
 801409c:	f083 0120 	eor.w	r1, r3, #32
 80140a0:	e63f      	b.n	8013d22 <uxr_read_framed_msg+0x6e>
 80140a2:	202a      	movs	r0, #42	; 0x2a
 80140a4:	1c55      	adds	r5, r2, #1
 80140a6:	086b      	lsrs	r3, r5, #1
 80140a8:	fba6 c303 	umull	ip, r3, r6, r3
 80140ac:	089b      	lsrs	r3, r3, #2
 80140ae:	fb00 5313 	mls	r3, r0, r3, r5
 80140b2:	b2dd      	uxtb	r5, r3
 80140b4:	42a9      	cmp	r1, r5
 80140b6:	d096      	beq.n	8013fe6 <uxr_read_framed_msg+0x332>
 80140b8:	3202      	adds	r2, #2
 80140ba:	0851      	lsrs	r1, r2, #1
 80140bc:	fba6 5101 	umull	r5, r1, r6, r1
 80140c0:	0889      	lsrs	r1, r1, #2
 80140c2:	fb00 2211 	mls	r2, r0, r1, r2
 80140c6:	4423      	add	r3, r4
 80140c8:	789b      	ldrb	r3, [r3, #2]
 80140ca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80140ce:	2b7e      	cmp	r3, #126	; 0x7e
 80140d0:	d06d      	beq.n	80141ae <uxr_read_framed_msg+0x4fa>
 80140d2:	f083 0020 	eor.w	r0, r3, #32
 80140d6:	e6ea      	b.n	8013eae <uxr_read_framed_msg+0x1fa>
 80140d8:	252a      	movs	r5, #42	; 0x2a
 80140da:	f101 0c01 	add.w	ip, r1, #1
 80140de:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80140e2:	fba6 2303 	umull	r2, r3, r6, r3
 80140e6:	089a      	lsrs	r2, r3, #2
 80140e8:	fb05 c212 	mls	r2, r5, r2, ip
 80140ec:	b2d3      	uxtb	r3, r2
 80140ee:	4298      	cmp	r0, r3
 80140f0:	f43f af50 	beq.w	8013f94 <uxr_read_framed_msg+0x2e0>
 80140f4:	1c8b      	adds	r3, r1, #2
 80140f6:	0859      	lsrs	r1, r3, #1
 80140f8:	fba6 0101 	umull	r0, r1, r6, r1
 80140fc:	0889      	lsrs	r1, r1, #2
 80140fe:	fb05 3111 	mls	r1, r5, r1, r3
 8014102:	18a3      	adds	r3, r4, r2
 8014104:	789b      	ldrb	r3, [r3, #2]
 8014106:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801410a:	2b7e      	cmp	r3, #126	; 0x7e
 801410c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014110:	f43f af40 	beq.w	8013f94 <uxr_read_framed_msg+0x2e0>
 8014114:	f083 0320 	eor.w	r3, r3, #32
 8014118:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801411c:	e6ea      	b.n	8013ef4 <uxr_read_framed_msg+0x240>
 801411e:	1c5d      	adds	r5, r3, #1
 8014120:	0869      	lsrs	r1, r5, #1
 8014122:	fba6 c101 	umull	ip, r1, r6, r1
 8014126:	0889      	lsrs	r1, r1, #2
 8014128:	fb00 5111 	mls	r1, r0, r1, r5
 801412c:	b2cd      	uxtb	r5, r1
 801412e:	42aa      	cmp	r2, r5
 8014130:	f43f af1f 	beq.w	8013f72 <uxr_read_framed_msg+0x2be>
 8014134:	3302      	adds	r3, #2
 8014136:	085a      	lsrs	r2, r3, #1
 8014138:	fba6 5202 	umull	r5, r2, r6, r2
 801413c:	0892      	lsrs	r2, r2, #2
 801413e:	fb00 3212 	mls	r2, r0, r2, r3
 8014142:	1863      	adds	r3, r4, r1
 8014144:	789b      	ldrb	r3, [r3, #2]
 8014146:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801414a:	2b7e      	cmp	r3, #126	; 0x7e
 801414c:	d02d      	beq.n	80141aa <uxr_read_framed_msg+0x4f6>
 801414e:	f083 0120 	eor.w	r1, r3, #32
 8014152:	e666      	b.n	8013e22 <uxr_read_framed_msg+0x16e>
 8014154:	1c5d      	adds	r5, r3, #1
 8014156:	0869      	lsrs	r1, r5, #1
 8014158:	fba6 c101 	umull	ip, r1, r6, r1
 801415c:	0889      	lsrs	r1, r1, #2
 801415e:	fb00 5111 	mls	r1, r0, r1, r5
 8014162:	b2cd      	uxtb	r5, r1
 8014164:	42aa      	cmp	r2, r5
 8014166:	f43f af13 	beq.w	8013f90 <uxr_read_framed_msg+0x2dc>
 801416a:	3302      	adds	r3, #2
 801416c:	085a      	lsrs	r2, r3, #1
 801416e:	fba6 5202 	umull	r5, r2, r6, r2
 8014172:	0892      	lsrs	r2, r2, #2
 8014174:	fb00 3212 	mls	r2, r0, r2, r3
 8014178:	1863      	adds	r3, r4, r1
 801417a:	7899      	ldrb	r1, [r3, #2]
 801417c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014180:	297e      	cmp	r1, #126	; 0x7e
 8014182:	d002      	beq.n	801418a <uxr_read_framed_msg+0x4d6>
 8014184:	f081 0120 	eor.w	r1, r1, #32
 8014188:	e674      	b.n	8013e74 <uxr_read_framed_msg+0x1c0>
 801418a:	2302      	movs	r3, #2
 801418c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801418e:	4649      	mov	r1, r9
 8014190:	e9cd 2300 	strd	r2, r3, [sp]
 8014194:	4620      	mov	r0, r4
 8014196:	4652      	mov	r2, sl
 8014198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801419a:	f7ff fd07 	bl	8013bac <uxr_framing_read_transport>
 801419e:	2800      	cmp	r0, #0
 80141a0:	f47f aef4 	bne.w	8013f8c <uxr_read_framed_msg+0x2d8>
 80141a4:	2301      	movs	r3, #1
 80141a6:	7023      	strb	r3, [r4, #0]
 80141a8:	e596      	b.n	8013cd8 <uxr_read_framed_msg+0x24>
 80141aa:	2301      	movs	r3, #1
 80141ac:	e7ee      	b.n	801418c <uxr_read_framed_msg+0x4d8>
 80141ae:	2303      	movs	r3, #3
 80141b0:	e7ec      	b.n	801418c <uxr_read_framed_msg+0x4d8>
 80141b2:	bf00      	nop

080141b4 <uxr_stream_id>:
 80141b4:	b430      	push	{r4, r5}
 80141b6:	2901      	cmp	r1, #1
 80141b8:	4604      	mov	r4, r0
 80141ba:	b082      	sub	sp, #8
 80141bc:	d01e      	beq.n	80141fc <uxr_stream_id+0x48>
 80141be:	2902      	cmp	r1, #2
 80141c0:	f04f 0500 	mov.w	r5, #0
 80141c4:	d01d      	beq.n	8014202 <uxr_stream_id+0x4e>
 80141c6:	2300      	movs	r3, #0
 80141c8:	4618      	mov	r0, r3
 80141ca:	f365 0307 	bfi	r3, r5, #0, #8
 80141ce:	f364 230f 	bfi	r3, r4, #8, #8
 80141d2:	f361 4317 	bfi	r3, r1, #16, #8
 80141d6:	f362 631f 	bfi	r3, r2, #24, #8
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	f362 0007 	bfi	r0, r2, #0, #8
 80141e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80141e4:	f362 200f 	bfi	r0, r2, #8, #8
 80141e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80141ec:	f362 4017 	bfi	r0, r2, #16, #8
 80141f0:	0e1b      	lsrs	r3, r3, #24
 80141f2:	f363 601f 	bfi	r0, r3, #24, #8
 80141f6:	b002      	add	sp, #8
 80141f8:	bc30      	pop	{r4, r5}
 80141fa:	4770      	bx	lr
 80141fc:	1c45      	adds	r5, r0, #1
 80141fe:	b2ed      	uxtb	r5, r5
 8014200:	e7e1      	b.n	80141c6 <uxr_stream_id+0x12>
 8014202:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 8014206:	e7de      	b.n	80141c6 <uxr_stream_id+0x12>

08014208 <uxr_stream_id_from_raw>:
 8014208:	b430      	push	{r4, r5}
 801420a:	4602      	mov	r2, r0
 801420c:	b082      	sub	sp, #8
 801420e:	b128      	cbz	r0, 801421c <uxr_stream_id_from_raw+0x14>
 8014210:	0603      	lsls	r3, r0, #24
 8014212:	d420      	bmi.n	8014256 <uxr_stream_id_from_raw+0x4e>
 8014214:	1e44      	subs	r4, r0, #1
 8014216:	2501      	movs	r5, #1
 8014218:	b2e4      	uxtb	r4, r4
 801421a:	e001      	b.n	8014220 <uxr_stream_id_from_raw+0x18>
 801421c:	4605      	mov	r5, r0
 801421e:	4604      	mov	r4, r0
 8014220:	2300      	movs	r3, #0
 8014222:	4618      	mov	r0, r3
 8014224:	f362 0307 	bfi	r3, r2, #0, #8
 8014228:	f364 230f 	bfi	r3, r4, #8, #8
 801422c:	f365 4317 	bfi	r3, r5, #16, #8
 8014230:	f361 631f 	bfi	r3, r1, #24, #8
 8014234:	b2da      	uxtb	r2, r3
 8014236:	f362 0007 	bfi	r0, r2, #0, #8
 801423a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801423e:	f362 200f 	bfi	r0, r2, #8, #8
 8014242:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014246:	f362 4017 	bfi	r0, r2, #16, #8
 801424a:	0e1b      	lsrs	r3, r3, #24
 801424c:	f363 601f 	bfi	r0, r3, #24, #8
 8014250:	b002      	add	sp, #8
 8014252:	bc30      	pop	{r4, r5}
 8014254:	4770      	bx	lr
 8014256:	2502      	movs	r5, #2
 8014258:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 801425c:	e7e0      	b.n	8014220 <uxr_stream_id_from_raw+0x18>
 801425e:	bf00      	nop

08014260 <uxr_init_stream_storage>:
 8014260:	2300      	movs	r3, #0
 8014262:	7403      	strb	r3, [r0, #16]
 8014264:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8014268:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801426c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop

08014274 <uxr_reset_stream_storage>:
 8014274:	b570      	push	{r4, r5, r6, lr}
 8014276:	7c03      	ldrb	r3, [r0, #16]
 8014278:	4604      	mov	r4, r0
 801427a:	b153      	cbz	r3, 8014292 <uxr_reset_stream_storage+0x1e>
 801427c:	4606      	mov	r6, r0
 801427e:	2500      	movs	r5, #0
 8014280:	4630      	mov	r0, r6
 8014282:	f004 fdd9 	bl	8018e38 <uxr_reset_output_best_effort_stream>
 8014286:	7c23      	ldrb	r3, [r4, #16]
 8014288:	3501      	adds	r5, #1
 801428a:	42ab      	cmp	r3, r5
 801428c:	f106 0610 	add.w	r6, r6, #16
 8014290:	d8f6      	bhi.n	8014280 <uxr_reset_stream_storage+0xc>
 8014292:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014296:	b163      	cbz	r3, 80142b2 <uxr_reset_stream_storage+0x3e>
 8014298:	2600      	movs	r6, #0
 801429a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801429e:	4628      	mov	r0, r5
 80142a0:	f004 fbd6 	bl	8018a50 <uxr_reset_input_best_effort_stream>
 80142a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80142a8:	3601      	adds	r6, #1
 80142aa:	42b3      	cmp	r3, r6
 80142ac:	f105 0502 	add.w	r5, r5, #2
 80142b0:	d8f5      	bhi.n	801429e <uxr_reset_stream_storage+0x2a>
 80142b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80142b6:	b163      	cbz	r3, 80142d2 <uxr_reset_stream_storage+0x5e>
 80142b8:	2600      	movs	r6, #0
 80142ba:	f104 0518 	add.w	r5, r4, #24
 80142be:	4628      	mov	r0, r5
 80142c0:	f004 fe5a 	bl	8018f78 <uxr_reset_output_reliable_stream>
 80142c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80142c8:	3601      	adds	r6, #1
 80142ca:	42b3      	cmp	r3, r6
 80142cc:	f105 0528 	add.w	r5, r5, #40	; 0x28
 80142d0:	d8f5      	bhi.n	80142be <uxr_reset_stream_storage+0x4a>
 80142d2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80142d6:	b163      	cbz	r3, 80142f2 <uxr_reset_stream_storage+0x7e>
 80142d8:	2600      	movs	r6, #0
 80142da:	f104 0548 	add.w	r5, r4, #72	; 0x48
 80142de:	4628      	mov	r0, r5
 80142e0:	f004 fc1e 	bl	8018b20 <uxr_reset_input_reliable_stream>
 80142e4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80142e8:	3601      	adds	r6, #1
 80142ea:	42b3      	cmp	r3, r6
 80142ec:	f105 0518 	add.w	r5, r5, #24
 80142f0:	d8f5      	bhi.n	80142de <uxr_reset_stream_storage+0x6a>
 80142f2:	bd70      	pop	{r4, r5, r6, pc}

080142f4 <uxr_add_output_best_effort_buffer>:
 80142f4:	b530      	push	{r4, r5, lr}
 80142f6:	7c04      	ldrb	r4, [r0, #16]
 80142f8:	b083      	sub	sp, #12
 80142fa:	1c65      	adds	r5, r4, #1
 80142fc:	7405      	strb	r5, [r0, #16]
 80142fe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8014302:	f004 fd8f 	bl	8018e24 <uxr_init_output_best_effort_stream>
 8014306:	2201      	movs	r2, #1
 8014308:	4620      	mov	r0, r4
 801430a:	4611      	mov	r1, r2
 801430c:	b003      	add	sp, #12
 801430e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014312:	f7ff bf4f 	b.w	80141b4 <uxr_stream_id>
 8014316:	bf00      	nop

08014318 <uxr_add_output_reliable_buffer>:
 8014318:	b570      	push	{r4, r5, r6, lr}
 801431a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801431e:	b084      	sub	sp, #16
 8014320:	1c66      	adds	r6, r4, #1
 8014322:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8014326:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801432a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 801432e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8014332:	3018      	adds	r0, #24
 8014334:	9500      	str	r5, [sp, #0]
 8014336:	f004 fded 	bl	8018f14 <uxr_init_output_reliable_stream>
 801433a:	4620      	mov	r0, r4
 801433c:	2201      	movs	r2, #1
 801433e:	2102      	movs	r1, #2
 8014340:	b004      	add	sp, #16
 8014342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014346:	f7ff bf35 	b.w	80141b4 <uxr_stream_id>
 801434a:	bf00      	nop

0801434c <uxr_add_input_best_effort_buffer>:
 801434c:	b510      	push	{r4, lr}
 801434e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8014352:	b082      	sub	sp, #8
 8014354:	1c62      	adds	r2, r4, #1
 8014356:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801435a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801435e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014362:	f004 fb71 	bl	8018a48 <uxr_init_input_best_effort_stream>
 8014366:	4620      	mov	r0, r4
 8014368:	2200      	movs	r2, #0
 801436a:	2101      	movs	r1, #1
 801436c:	b002      	add	sp, #8
 801436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014372:	f7ff bf1f 	b.w	80141b4 <uxr_stream_id>
 8014376:	bf00      	nop

08014378 <uxr_add_input_reliable_buffer>:
 8014378:	b570      	push	{r4, r5, r6, lr}
 801437a:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801437e:	b084      	sub	sp, #16
 8014380:	1c66      	adds	r6, r4, #1
 8014382:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8014386:	9d08      	ldr	r5, [sp, #32]
 8014388:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 801438c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8014390:	3048      	adds	r0, #72	; 0x48
 8014392:	9500      	str	r5, [sp, #0]
 8014394:	f004 fba0 	bl	8018ad8 <uxr_init_input_reliable_stream>
 8014398:	4620      	mov	r0, r4
 801439a:	2200      	movs	r2, #0
 801439c:	2102      	movs	r1, #2
 801439e:	b004      	add	sp, #16
 80143a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143a4:	f7ff bf06 	b.w	80141b4 <uxr_stream_id>

080143a8 <uxr_get_output_best_effort_stream>:
 80143a8:	7c03      	ldrb	r3, [r0, #16]
 80143aa:	428b      	cmp	r3, r1
 80143ac:	bf8c      	ite	hi
 80143ae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80143b2:	2000      	movls	r0, #0
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop

080143b8 <uxr_get_output_reliable_stream>:
 80143b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80143bc:	428b      	cmp	r3, r1
 80143be:	bf83      	ittte	hi
 80143c0:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 80143c4:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80143c8:	3018      	addhi	r0, #24
 80143ca:	2000      	movls	r0, #0
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop

080143d0 <uxr_get_input_best_effort_stream>:
 80143d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80143d4:	428b      	cmp	r3, r1
 80143d6:	bf86      	itte	hi
 80143d8:	3121      	addhi	r1, #33	; 0x21
 80143da:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80143de:	2000      	movls	r0, #0
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop

080143e4 <uxr_get_input_reliable_stream>:
 80143e4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80143e8:	428b      	cmp	r3, r1
 80143ea:	bf83      	ittte	hi
 80143ec:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 80143f0:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80143f4:	3048      	addhi	r0, #72	; 0x48
 80143f6:	2000      	movls	r0, #0
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop

080143fc <uxr_output_streams_confirmed>:
 80143fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014400:	b183      	cbz	r3, 8014424 <uxr_output_streams_confirmed+0x28>
 8014402:	b570      	push	{r4, r5, r6, lr}
 8014404:	4606      	mov	r6, r0
 8014406:	2400      	movs	r4, #0
 8014408:	f100 0518 	add.w	r5, r0, #24
 801440c:	e001      	b.n	8014412 <uxr_output_streams_confirmed+0x16>
 801440e:	3528      	adds	r5, #40	; 0x28
 8014410:	b138      	cbz	r0, 8014422 <uxr_output_streams_confirmed+0x26>
 8014412:	4628      	mov	r0, r5
 8014414:	f005 f812 	bl	801943c <uxr_is_output_up_to_date>
 8014418:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801441c:	3401      	adds	r4, #1
 801441e:	42a3      	cmp	r3, r4
 8014420:	d8f5      	bhi.n	801440e <uxr_output_streams_confirmed+0x12>
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	2001      	movs	r0, #1
 8014426:	4770      	bx	lr

08014428 <uxr_buffer_submessage_header>:
 8014428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801442a:	460e      	mov	r6, r1
 801442c:	2104      	movs	r1, #4
 801442e:	4615      	mov	r5, r2
 8014430:	4604      	mov	r4, r0
 8014432:	461f      	mov	r7, r3
 8014434:	f7f9 fdf8 	bl	800e028 <ucdr_align_to>
 8014438:	2301      	movs	r3, #1
 801443a:	4631      	mov	r1, r6
 801443c:	ea47 0203 	orr.w	r2, r7, r3
 8014440:	4620      	mov	r0, r4
 8014442:	7523      	strb	r3, [r4, #20]
 8014444:	462b      	mov	r3, r5
 8014446:	f000 fa2d 	bl	80148a4 <uxr_serialize_submessage_header>
 801444a:	4620      	mov	r0, r4
 801444c:	f7f9 fe02 	bl	800e054 <ucdr_buffer_remaining>
 8014450:	42a8      	cmp	r0, r5
 8014452:	bf34      	ite	cc
 8014454:	2000      	movcc	r0, #0
 8014456:	2001      	movcs	r0, #1
 8014458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801445a:	bf00      	nop

0801445c <uxr_read_submessage_header>:
 801445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014460:	4604      	mov	r4, r0
 8014462:	460d      	mov	r5, r1
 8014464:	2104      	movs	r1, #4
 8014466:	4616      	mov	r6, r2
 8014468:	4698      	mov	r8, r3
 801446a:	f7f9 fddd 	bl	800e028 <ucdr_align_to>
 801446e:	4620      	mov	r0, r4
 8014470:	f7f9 fdf0 	bl	800e054 <ucdr_buffer_remaining>
 8014474:	2803      	cmp	r0, #3
 8014476:	bf8c      	ite	hi
 8014478:	2701      	movhi	r7, #1
 801447a:	2700      	movls	r7, #0
 801447c:	d802      	bhi.n	8014484 <uxr_read_submessage_header+0x28>
 801447e:	4638      	mov	r0, r7
 8014480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014484:	4633      	mov	r3, r6
 8014486:	4642      	mov	r2, r8
 8014488:	4620      	mov	r0, r4
 801448a:	4629      	mov	r1, r5
 801448c:	f000 fa1c 	bl	80148c8 <uxr_deserialize_submessage_header>
 8014490:	f898 3000 	ldrb.w	r3, [r8]
 8014494:	4638      	mov	r0, r7
 8014496:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801449a:	f003 0301 	and.w	r3, r3, #1
 801449e:	f888 2000 	strb.w	r2, [r8]
 80144a2:	7523      	strb	r3, [r4, #20]
 80144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080144a8 <uxr_submessage_padding>:
 80144a8:	f010 0003 	ands.w	r0, r0, #3
 80144ac:	bf18      	it	ne
 80144ae:	f1c0 0004 	rsbne	r0, r0, #4
 80144b2:	4770      	bx	lr

080144b4 <uxr_millis>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	4669      	mov	r1, sp
 80144ba:	2001      	movs	r0, #1
 80144bc:	f7ef f9d4 	bl	8003868 <clock_gettime>
 80144c0:	e9dd 0200 	ldrd	r0, r2, [sp]
 80144c4:	4b07      	ldr	r3, [pc, #28]	; (80144e4 <uxr_millis+0x30>)
 80144c6:	9c02      	ldr	r4, [sp, #8]
 80144c8:	fba0 0103 	umull	r0, r1, r0, r3
 80144cc:	fb03 1102 	mla	r1, r3, r2, r1
 80144d0:	1900      	adds	r0, r0, r4
 80144d2:	f04f 0300 	mov.w	r3, #0
 80144d6:	4a04      	ldr	r2, [pc, #16]	; (80144e8 <uxr_millis+0x34>)
 80144d8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80144dc:	f7ec fe98 	bl	8001210 <__aeabi_ldivmod>
 80144e0:	b004      	add	sp, #16
 80144e2:	bd10      	pop	{r4, pc}
 80144e4:	3b9aca00 	.word	0x3b9aca00
 80144e8:	000f4240 	.word	0x000f4240

080144ec <uxr_nanos>:
 80144ec:	b500      	push	{lr}
 80144ee:	b085      	sub	sp, #20
 80144f0:	4669      	mov	r1, sp
 80144f2:	2001      	movs	r0, #1
 80144f4:	f7ef f9b8 	bl	8003868 <clock_gettime>
 80144f8:	e9dd 2000 	ldrd	r2, r0, [sp]
 80144fc:	4906      	ldr	r1, [pc, #24]	; (8014518 <uxr_nanos+0x2c>)
 80144fe:	fba2 2301 	umull	r2, r3, r2, r1
 8014502:	fb01 3300 	mla	r3, r1, r0, r3
 8014506:	9802      	ldr	r0, [sp, #8]
 8014508:	4684      	mov	ip, r0
 801450a:	1810      	adds	r0, r2, r0
 801450c:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 8014510:	b005      	add	sp, #20
 8014512:	f85d fb04 	ldr.w	pc, [sp], #4
 8014516:	bf00      	nop
 8014518:	3b9aca00 	.word	0x3b9aca00

0801451c <on_full_output_buffer_fragmented>:
 801451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014520:	460c      	mov	r4, r1
 8014522:	b08a      	sub	sp, #40	; 0x28
 8014524:	4606      	mov	r6, r0
 8014526:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801452a:	f104 0008 	add.w	r0, r4, #8
 801452e:	f7ff ff43 	bl	80143b8 <uxr_get_output_reliable_stream>
 8014532:	4605      	mov	r5, r0
 8014534:	f004 ff8c 	bl	8019450 <get_available_free_slots>
 8014538:	b968      	cbnz	r0, 8014556 <on_full_output_buffer_fragmented+0x3a>
 801453a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801453e:	4620      	mov	r0, r4
 8014540:	4798      	blx	r3
 8014542:	b918      	cbnz	r0, 801454c <on_full_output_buffer_fragmented+0x30>
 8014544:	2001      	movs	r0, #1
 8014546:	b00a      	add	sp, #40	; 0x28
 8014548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454c:	4628      	mov	r0, r5
 801454e:	f004 ff7f 	bl	8019450 <get_available_free_slots>
 8014552:	2800      	cmp	r0, #0
 8014554:	d0f6      	beq.n	8014544 <on_full_output_buffer_fragmented+0x28>
 8014556:	892a      	ldrh	r2, [r5, #8]
 8014558:	89e8      	ldrh	r0, [r5, #14]
 801455a:	686b      	ldr	r3, [r5, #4]
 801455c:	fbb0 f1f2 	udiv	r1, r0, r2
 8014560:	fbb3 f8f2 	udiv	r8, r3, r2
 8014564:	fb02 0111 	mls	r1, r2, r1, r0
 8014568:	7b2b      	ldrb	r3, [r5, #12]
 801456a:	b289      	uxth	r1, r1
 801456c:	fb08 f101 	mul.w	r1, r8, r1
 8014570:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8014574:	f1a8 0804 	sub.w	r8, r8, #4
 8014578:	33fc      	adds	r3, #252	; 0xfc
 801457a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 801457e:	4443      	add	r3, r8
 8014580:	682a      	ldr	r2, [r5, #0]
 8014582:	b29f      	uxth	r7, r3
 8014584:	1bc0      	subs	r0, r0, r7
 8014586:	3104      	adds	r1, #4
 8014588:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 801458c:	4411      	add	r1, r2
 801458e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014592:	4642      	mov	r2, r8
 8014594:	9300      	str	r3, [sp, #0]
 8014596:	a802      	add	r0, sp, #8
 8014598:	2300      	movs	r3, #0
 801459a:	f7f9 fd17 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 801459e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80145a2:	f102 0308 	add.w	r3, r2, #8
 80145a6:	4543      	cmp	r3, r8
 80145a8:	d928      	bls.n	80145fc <on_full_output_buffer_fragmented+0xe0>
 80145aa:	463a      	mov	r2, r7
 80145ac:	2300      	movs	r3, #0
 80145ae:	210d      	movs	r1, #13
 80145b0:	a802      	add	r0, sp, #8
 80145b2:	f7ff ff39 	bl	8014428 <uxr_buffer_submessage_header>
 80145b6:	8929      	ldrh	r1, [r5, #8]
 80145b8:	89e8      	ldrh	r0, [r5, #14]
 80145ba:	686b      	ldr	r3, [r5, #4]
 80145bc:	fbb0 f2f1 	udiv	r2, r0, r1
 80145c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80145c4:	fb01 0212 	mls	r2, r1, r2, r0
 80145c8:	b292      	uxth	r2, r2
 80145ca:	fb03 f302 	mul.w	r3, r3, r2
 80145ce:	682a      	ldr	r2, [r5, #0]
 80145d0:	f842 8003 	str.w	r8, [r2, r3]
 80145d4:	2101      	movs	r1, #1
 80145d6:	89e8      	ldrh	r0, [r5, #14]
 80145d8:	f004 ff5c 	bl	8019494 <uxr_seq_num_add>
 80145dc:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80145e0:	81e8      	strh	r0, [r5, #14]
 80145e2:	1a52      	subs	r2, r2, r1
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7f9 fd03 	bl	800dff0 <ucdr_init_buffer>
 80145ea:	4630      	mov	r0, r6
 80145ec:	4622      	mov	r2, r4
 80145ee:	490f      	ldr	r1, [pc, #60]	; (801462c <on_full_output_buffer_fragmented+0x110>)
 80145f0:	f7f9 fcd4 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 80145f4:	2000      	movs	r0, #0
 80145f6:	b00a      	add	sp, #40	; 0x28
 80145f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145fc:	2302      	movs	r3, #2
 80145fe:	210d      	movs	r1, #13
 8014600:	b292      	uxth	r2, r2
 8014602:	a802      	add	r0, sp, #8
 8014604:	f7ff ff10 	bl	8014428 <uxr_buffer_submessage_header>
 8014608:	8929      	ldrh	r1, [r5, #8]
 801460a:	89e8      	ldrh	r0, [r5, #14]
 801460c:	686b      	ldr	r3, [r5, #4]
 801460e:	fbb0 f2f1 	udiv	r2, r0, r1
 8014612:	fbb3 f3f1 	udiv	r3, r3, r1
 8014616:	fb01 0212 	mls	r2, r1, r2, r0
 801461a:	b292      	uxth	r2, r2
 801461c:	fb03 f302 	mul.w	r3, r3, r2
 8014620:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014624:	6829      	ldr	r1, [r5, #0]
 8014626:	3208      	adds	r2, #8
 8014628:	50ca      	str	r2, [r1, r3]
 801462a:	e7d3      	b.n	80145d4 <on_full_output_buffer_fragmented+0xb8>
 801462c:	0801451d 	.word	0x0801451d

08014630 <uxr_prepare_output_stream>:
 8014630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014632:	2407      	movs	r4, #7
 8014634:	2500      	movs	r5, #0
 8014636:	b087      	sub	sp, #28
 8014638:	9202      	str	r2, [sp, #8]
 801463a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801463c:	e9cd 4500 	strd	r4, r5, [sp]
 8014640:	3204      	adds	r2, #4
 8014642:	461c      	mov	r4, r3
 8014644:	4606      	mov	r6, r0
 8014646:	9103      	str	r1, [sp, #12]
 8014648:	f7fe ffda 	bl	8013600 <uxr_prepare_stream_to_write_submessage>
 801464c:	f080 0201 	eor.w	r2, r0, #1
 8014650:	b2d2      	uxtb	r2, r2
 8014652:	75a2      	strb	r2, [r4, #22]
 8014654:	b112      	cbz	r2, 801465c <uxr_prepare_output_stream+0x2c>
 8014656:	4628      	mov	r0, r5
 8014658:	b007      	add	sp, #28
 801465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801465c:	aa05      	add	r2, sp, #20
 801465e:	9902      	ldr	r1, [sp, #8]
 8014660:	4630      	mov	r0, r6
 8014662:	f7ff f8ff 	bl	8013864 <uxr_init_base_object_request>
 8014666:	4605      	mov	r5, r0
 8014668:	a905      	add	r1, sp, #20
 801466a:	4620      	mov	r0, r4
 801466c:	f000 febc 	bl	80153e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014670:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014674:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8014678:	4620      	mov	r0, r4
 801467a:	1a52      	subs	r2, r2, r1
 801467c:	f7f9 fcb8 	bl	800dff0 <ucdr_init_buffer>
 8014680:	4620      	mov	r0, r4
 8014682:	463a      	mov	r2, r7
 8014684:	4631      	mov	r1, r6
 8014686:	f7f9 fc89 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 801468a:	4628      	mov	r0, r5
 801468c:	b007      	add	sp, #28
 801468e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014690 <uxr_prepare_output_stream_fragmented>:
 8014690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	b093      	sub	sp, #76	; 0x4c
 8014696:	9107      	str	r1, [sp, #28]
 8014698:	4605      	mov	r5, r0
 801469a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801469e:	3008      	adds	r0, #8
 80146a0:	9303      	str	r3, [sp, #12]
 80146a2:	9206      	str	r2, [sp, #24]
 80146a4:	f7ff fe88 	bl	80143b8 <uxr_get_output_reliable_stream>
 80146a8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	f000 8094 	beq.w	80147da <uxr_prepare_output_stream_fragmented+0x14a>
 80146b2:	4604      	mov	r4, r0
 80146b4:	2800      	cmp	r0, #0
 80146b6:	f000 8090 	beq.w	80147da <uxr_prepare_output_stream_fragmented+0x14a>
 80146ba:	f004 fec9 	bl	8019450 <get_available_free_slots>
 80146be:	2800      	cmp	r0, #0
 80146c0:	f000 8086 	beq.w	80147d0 <uxr_prepare_output_stream_fragmented+0x140>
 80146c4:	8923      	ldrh	r3, [r4, #8]
 80146c6:	89e7      	ldrh	r7, [r4, #14]
 80146c8:	6862      	ldr	r2, [r4, #4]
 80146ca:	fbb7 f8f3 	udiv	r8, r7, r3
 80146ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80146d2:	fb03 7818 	mls	r8, r3, r8, r7
 80146d6:	fa1f f888 	uxth.w	r8, r8
 80146da:	fb02 f808 	mul.w	r8, r2, r8
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	f108 0804 	add.w	r8, r8, #4
 80146e4:	4498      	add	r8, r3
 80146e6:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80146ea:	7b23      	ldrb	r3, [r4, #12]
 80146ec:	9204      	str	r2, [sp, #16]
 80146ee:	4553      	cmp	r3, sl
 80146f0:	f1a2 0b04 	sub.w	fp, r2, #4
 80146f4:	d37d      	bcc.n	80147f2 <uxr_prepare_output_stream_fragmented+0x162>
 80146f6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80146f8:	f1ab 0904 	sub.w	r9, fp, #4
 80146fc:	eba9 0903 	sub.w	r9, r9, r3
 8014700:	3608      	adds	r6, #8
 8014702:	2300      	movs	r3, #0
 8014704:	465a      	mov	r2, fp
 8014706:	4641      	mov	r1, r8
 8014708:	a80a      	add	r0, sp, #40	; 0x28
 801470a:	f8cd a000 	str.w	sl, [sp]
 801470e:	fa1f f989 	uxth.w	r9, r9
 8014712:	9605      	str	r6, [sp, #20]
 8014714:	f7f9 fc5a 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8014718:	455e      	cmp	r6, fp
 801471a:	bf34      	ite	cc
 801471c:	2302      	movcc	r3, #2
 801471e:	2300      	movcs	r3, #0
 8014720:	464a      	mov	r2, r9
 8014722:	210d      	movs	r1, #13
 8014724:	a80a      	add	r0, sp, #40	; 0x28
 8014726:	f7ff fe7f 	bl	8014428 <uxr_buffer_submessage_header>
 801472a:	8921      	ldrh	r1, [r4, #8]
 801472c:	6862      	ldr	r2, [r4, #4]
 801472e:	fbb7 f3f1 	udiv	r3, r7, r1
 8014732:	fbb2 f2f1 	udiv	r2, r2, r1
 8014736:	fb01 7313 	mls	r3, r1, r3, r7
 801473a:	b29b      	uxth	r3, r3
 801473c:	fb03 f302 	mul.w	r3, r3, r2
 8014740:	6822      	ldr	r2, [r4, #0]
 8014742:	4638      	mov	r0, r7
 8014744:	f842 b003 	str.w	fp, [r2, r3]
 8014748:	2101      	movs	r1, #1
 801474a:	f004 fea3 	bl	8019494 <uxr_seq_num_add>
 801474e:	9b04      	ldr	r3, [sp, #16]
 8014750:	9e03      	ldr	r6, [sp, #12]
 8014752:	f1a3 0208 	sub.w	r2, r3, #8
 8014756:	f10a 0104 	add.w	r1, sl, #4
 801475a:	4607      	mov	r7, r0
 801475c:	eba2 020a 	sub.w	r2, r2, sl
 8014760:	4630      	mov	r0, r6
 8014762:	4441      	add	r1, r8
 8014764:	f7f9 fc44 	bl	800dff0 <ucdr_init_buffer>
 8014768:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801476a:	2107      	movs	r1, #7
 801476c:	1d1a      	adds	r2, r3, #4
 801476e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8014772:	bf28      	it	cs
 8014774:	2200      	movcs	r2, #0
 8014776:	2300      	movs	r3, #0
 8014778:	81e7      	strh	r7, [r4, #14]
 801477a:	b292      	uxth	r2, r2
 801477c:	4630      	mov	r0, r6
 801477e:	f7ff fe53 	bl	8014428 <uxr_buffer_submessage_header>
 8014782:	4628      	mov	r0, r5
 8014784:	9906      	ldr	r1, [sp, #24]
 8014786:	aa09      	add	r2, sp, #36	; 0x24
 8014788:	f7ff f86c 	bl	8013864 <uxr_init_base_object_request>
 801478c:	4604      	mov	r4, r0
 801478e:	b328      	cbz	r0, 80147dc <uxr_prepare_output_stream_fragmented+0x14c>
 8014790:	9e03      	ldr	r6, [sp, #12]
 8014792:	a909      	add	r1, sp, #36	; 0x24
 8014794:	4630      	mov	r0, r6
 8014796:	f000 fe27 	bl	80153e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 801479a:	68b1      	ldr	r1, [r6, #8]
 801479c:	6872      	ldr	r2, [r6, #4]
 801479e:	4630      	mov	r0, r6
 80147a0:	1a52      	subs	r2, r2, r1
 80147a2:	f7f9 fc25 	bl	800dff0 <ucdr_init_buffer>
 80147a6:	9a05      	ldr	r2, [sp, #20]
 80147a8:	9b07      	ldr	r3, [sp, #28]
 80147aa:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80147ae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80147b0:	4630      	mov	r0, r6
 80147b2:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80147b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80147b8:	491a      	ldr	r1, [pc, #104]	; (8014824 <uxr_prepare_output_stream_fragmented+0x194>)
 80147ba:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80147be:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80147c2:	462a      	mov	r2, r5
 80147c4:	f7f9 fbea 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 80147c8:	4620      	mov	r0, r4
 80147ca:	b013      	add	sp, #76	; 0x4c
 80147cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d0:	4628      	mov	r0, r5
 80147d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80147d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147d6:	4798      	blx	r3
 80147d8:	b920      	cbnz	r0, 80147e4 <uxr_prepare_output_stream_fragmented+0x154>
 80147da:	2400      	movs	r4, #0
 80147dc:	4620      	mov	r0, r4
 80147de:	b013      	add	sp, #76	; 0x4c
 80147e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e4:	4620      	mov	r0, r4
 80147e6:	f004 fe33 	bl	8019450 <get_available_free_slots>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	f47f af6a 	bne.w	80146c4 <uxr_prepare_output_stream_fragmented+0x34>
 80147f0:	e7f3      	b.n	80147da <uxr_prepare_output_stream_fragmented+0x14a>
 80147f2:	4638      	mov	r0, r7
 80147f4:	2101      	movs	r1, #1
 80147f6:	f004 fe4d 	bl	8019494 <uxr_seq_num_add>
 80147fa:	8922      	ldrh	r2, [r4, #8]
 80147fc:	6863      	ldr	r3, [r4, #4]
 80147fe:	fbb0 f8f2 	udiv	r8, r0, r2
 8014802:	fbb3 f3f2 	udiv	r3, r3, r2
 8014806:	fb02 0818 	mls	r8, r2, r8, r0
 801480a:	fa1f f888 	uxth.w	r8, r8
 801480e:	fb08 f803 	mul.w	r8, r8, r3
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	f108 0804 	add.w	r8, r8, #4
 8014818:	4498      	add	r8, r3
 801481a:	4607      	mov	r7, r0
 801481c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8014820:	7b23      	ldrb	r3, [r4, #12]
 8014822:	e768      	b.n	80146f6 <uxr_prepare_output_stream_fragmented+0x66>
 8014824:	0801451d 	.word	0x0801451d

08014828 <uxr_serialize_message_header>:
 8014828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801482c:	4617      	mov	r7, r2
 801482e:	4604      	mov	r4, r0
 8014830:	461e      	mov	r6, r3
 8014832:	460d      	mov	r5, r1
 8014834:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014838:	f7f7 ff98 	bl	800c76c <ucdr_serialize_uint8_t>
 801483c:	4639      	mov	r1, r7
 801483e:	4620      	mov	r0, r4
 8014840:	f7f7 ff94 	bl	800c76c <ucdr_serialize_uint8_t>
 8014844:	4632      	mov	r2, r6
 8014846:	4620      	mov	r0, r4
 8014848:	2101      	movs	r1, #1
 801484a:	f7f8 f83b 	bl	800c8c4 <ucdr_serialize_endian_uint16_t>
 801484e:	062b      	lsls	r3, r5, #24
 8014850:	d501      	bpl.n	8014856 <uxr_serialize_message_header+0x2e>
 8014852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014856:	4641      	mov	r1, r8
 8014858:	4620      	mov	r0, r4
 801485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801485e:	2204      	movs	r2, #4
 8014860:	f7fd ba08 	b.w	8011c74 <ucdr_serialize_array_uint8_t>

08014864 <uxr_deserialize_message_header>:
 8014864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014868:	4617      	mov	r7, r2
 801486a:	4604      	mov	r4, r0
 801486c:	461e      	mov	r6, r3
 801486e:	460d      	mov	r5, r1
 8014870:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014874:	f7f7 ff90 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014878:	4639      	mov	r1, r7
 801487a:	4620      	mov	r0, r4
 801487c:	f7f7 ff8c 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014880:	4632      	mov	r2, r6
 8014882:	4620      	mov	r0, r4
 8014884:	2101      	movs	r1, #1
 8014886:	f7f8 f911 	bl	800caac <ucdr_deserialize_endian_uint16_t>
 801488a:	f995 3000 	ldrsb.w	r3, [r5]
 801488e:	2b00      	cmp	r3, #0
 8014890:	da01      	bge.n	8014896 <uxr_deserialize_message_header+0x32>
 8014892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014896:	4641      	mov	r1, r8
 8014898:	4620      	mov	r0, r4
 801489a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801489e:	2204      	movs	r2, #4
 80148a0:	f7fd ba4c 	b.w	8011d3c <ucdr_deserialize_array_uint8_t>

080148a4 <uxr_serialize_submessage_header>:
 80148a4:	b570      	push	{r4, r5, r6, lr}
 80148a6:	4616      	mov	r6, r2
 80148a8:	4604      	mov	r4, r0
 80148aa:	461d      	mov	r5, r3
 80148ac:	f7f7 ff5e 	bl	800c76c <ucdr_serialize_uint8_t>
 80148b0:	4631      	mov	r1, r6
 80148b2:	4620      	mov	r0, r4
 80148b4:	f7f7 ff5a 	bl	800c76c <ucdr_serialize_uint8_t>
 80148b8:	462a      	mov	r2, r5
 80148ba:	4620      	mov	r0, r4
 80148bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148c0:	2101      	movs	r1, #1
 80148c2:	f7f7 bfff 	b.w	800c8c4 <ucdr_serialize_endian_uint16_t>
 80148c6:	bf00      	nop

080148c8 <uxr_deserialize_submessage_header>:
 80148c8:	b570      	push	{r4, r5, r6, lr}
 80148ca:	4616      	mov	r6, r2
 80148cc:	4604      	mov	r4, r0
 80148ce:	461d      	mov	r5, r3
 80148d0:	f7f7 ff62 	bl	800c798 <ucdr_deserialize_uint8_t>
 80148d4:	4631      	mov	r1, r6
 80148d6:	4620      	mov	r0, r4
 80148d8:	f7f7 ff5e 	bl	800c798 <ucdr_deserialize_uint8_t>
 80148dc:	462a      	mov	r2, r5
 80148de:	4620      	mov	r0, r4
 80148e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148e4:	2101      	movs	r1, #1
 80148e6:	f7f8 b8e1 	b.w	800caac <ucdr_deserialize_endian_uint16_t>
 80148ea:	bf00      	nop

080148ec <uxr_serialize_CLIENT_Representation>:
 80148ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148f0:	2204      	movs	r2, #4
 80148f2:	460c      	mov	r4, r1
 80148f4:	4605      	mov	r5, r0
 80148f6:	f7fd f9bd 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80148fa:	2202      	movs	r2, #2
 80148fc:	4606      	mov	r6, r0
 80148fe:	1d21      	adds	r1, r4, #4
 8014900:	4628      	mov	r0, r5
 8014902:	f7fd f9b7 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014906:	2202      	movs	r2, #2
 8014908:	1da1      	adds	r1, r4, #6
 801490a:	4006      	ands	r6, r0
 801490c:	4628      	mov	r0, r5
 801490e:	f7fd f9b1 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014912:	4603      	mov	r3, r0
 8014914:	2204      	movs	r2, #4
 8014916:	f104 0108 	add.w	r1, r4, #8
 801491a:	4628      	mov	r0, r5
 801491c:	b2f6      	uxtb	r6, r6
 801491e:	401e      	ands	r6, r3
 8014920:	f7fd f9a8 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014924:	4603      	mov	r3, r0
 8014926:	7b21      	ldrb	r1, [r4, #12]
 8014928:	4628      	mov	r0, r5
 801492a:	401e      	ands	r6, r3
 801492c:	f7f7 ff1e 	bl	800c76c <ucdr_serialize_uint8_t>
 8014930:	4603      	mov	r3, r0
 8014932:	7b61      	ldrb	r1, [r4, #13]
 8014934:	4628      	mov	r0, r5
 8014936:	401e      	ands	r6, r3
 8014938:	f7f7 feea 	bl	800c710 <ucdr_serialize_bool>
 801493c:	7b63      	ldrb	r3, [r4, #13]
 801493e:	4006      	ands	r6, r0
 8014940:	b933      	cbnz	r3, 8014950 <uxr_serialize_CLIENT_Representation+0x64>
 8014942:	4628      	mov	r0, r5
 8014944:	8ba1      	ldrh	r1, [r4, #28]
 8014946:	f7f7 ff3d 	bl	800c7c4 <ucdr_serialize_uint16_t>
 801494a:	4030      	ands	r0, r6
 801494c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014950:	4628      	mov	r0, r5
 8014952:	6921      	ldr	r1, [r4, #16]
 8014954:	f7f8 f924 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014958:	6923      	ldr	r3, [r4, #16]
 801495a:	b1cb      	cbz	r3, 8014990 <uxr_serialize_CLIENT_Representation+0xa4>
 801495c:	b1d0      	cbz	r0, 8014994 <uxr_serialize_CLIENT_Representation+0xa8>
 801495e:	46a0      	mov	r8, r4
 8014960:	f04f 0900 	mov.w	r9, #0
 8014964:	e002      	b.n	801496c <uxr_serialize_CLIENT_Representation+0x80>
 8014966:	f108 0808 	add.w	r8, r8, #8
 801496a:	b198      	cbz	r0, 8014994 <uxr_serialize_CLIENT_Representation+0xa8>
 801496c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014970:	4628      	mov	r0, r5
 8014972:	f004 f853 	bl	8018a1c <ucdr_serialize_string>
 8014976:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801497a:	4607      	mov	r7, r0
 801497c:	4628      	mov	r0, r5
 801497e:	f004 f84d 	bl	8018a1c <ucdr_serialize_string>
 8014982:	6923      	ldr	r3, [r4, #16]
 8014984:	f109 0901 	add.w	r9, r9, #1
 8014988:	4038      	ands	r0, r7
 801498a:	4599      	cmp	r9, r3
 801498c:	b2c0      	uxtb	r0, r0
 801498e:	d3ea      	bcc.n	8014966 <uxr_serialize_CLIENT_Representation+0x7a>
 8014990:	4006      	ands	r6, r0
 8014992:	e7d6      	b.n	8014942 <uxr_serialize_CLIENT_Representation+0x56>
 8014994:	2600      	movs	r6, #0
 8014996:	e7d4      	b.n	8014942 <uxr_serialize_CLIENT_Representation+0x56>

08014998 <uxr_deserialize_CLIENT_Representation>:
 8014998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801499c:	2204      	movs	r2, #4
 801499e:	460c      	mov	r4, r1
 80149a0:	4605      	mov	r5, r0
 80149a2:	f7fd f9cb 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80149a6:	2202      	movs	r2, #2
 80149a8:	4606      	mov	r6, r0
 80149aa:	1d21      	adds	r1, r4, #4
 80149ac:	4628      	mov	r0, r5
 80149ae:	f7fd f9c5 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80149b2:	2202      	movs	r2, #2
 80149b4:	1da1      	adds	r1, r4, #6
 80149b6:	4006      	ands	r6, r0
 80149b8:	4628      	mov	r0, r5
 80149ba:	f7fd f9bf 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80149be:	4603      	mov	r3, r0
 80149c0:	2204      	movs	r2, #4
 80149c2:	f104 0108 	add.w	r1, r4, #8
 80149c6:	4628      	mov	r0, r5
 80149c8:	b2f6      	uxtb	r6, r6
 80149ca:	401e      	ands	r6, r3
 80149cc:	f7fd f9b6 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80149d0:	4603      	mov	r3, r0
 80149d2:	f104 010c 	add.w	r1, r4, #12
 80149d6:	4628      	mov	r0, r5
 80149d8:	401e      	ands	r6, r3
 80149da:	f7f7 fedd 	bl	800c798 <ucdr_deserialize_uint8_t>
 80149de:	4603      	mov	r3, r0
 80149e0:	f104 010d 	add.w	r1, r4, #13
 80149e4:	4628      	mov	r0, r5
 80149e6:	401e      	ands	r6, r3
 80149e8:	f7f7 fea8 	bl	800c73c <ucdr_deserialize_bool>
 80149ec:	7b63      	ldrb	r3, [r4, #13]
 80149ee:	4006      	ands	r6, r0
 80149f0:	b93b      	cbnz	r3, 8014a02 <uxr_deserialize_CLIENT_Representation+0x6a>
 80149f2:	4628      	mov	r0, r5
 80149f4:	f104 011c 	add.w	r1, r4, #28
 80149f8:	f7f7 ffe4 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 80149fc:	4030      	ands	r0, r6
 80149fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a02:	4628      	mov	r0, r5
 8014a04:	f104 0110 	add.w	r1, r4, #16
 8014a08:	f7f8 f9fa 	bl	800ce00 <ucdr_deserialize_uint32_t>
 8014a0c:	6923      	ldr	r3, [r4, #16]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d903      	bls.n	8014a1a <uxr_deserialize_CLIENT_Representation+0x82>
 8014a12:	2301      	movs	r3, #1
 8014a14:	2600      	movs	r6, #0
 8014a16:	75ab      	strb	r3, [r5, #22]
 8014a18:	e7eb      	b.n	80149f2 <uxr_deserialize_CLIENT_Representation+0x5a>
 8014a1a:	b1eb      	cbz	r3, 8014a58 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014a1c:	b1f0      	cbz	r0, 8014a5c <uxr_deserialize_CLIENT_Representation+0xc4>
 8014a1e:	46a0      	mov	r8, r4
 8014a20:	f04f 0900 	mov.w	r9, #0
 8014a24:	e002      	b.n	8014a2c <uxr_deserialize_CLIENT_Representation+0x94>
 8014a26:	f108 0808 	add.w	r8, r8, #8
 8014a2a:	b1b8      	cbz	r0, 8014a5c <uxr_deserialize_CLIENT_Representation+0xc4>
 8014a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014a30:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a34:	4628      	mov	r0, r5
 8014a36:	f003 ffff 	bl	8018a38 <ucdr_deserialize_string>
 8014a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014a3e:	4607      	mov	r7, r0
 8014a40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014a44:	4628      	mov	r0, r5
 8014a46:	f003 fff7 	bl	8018a38 <ucdr_deserialize_string>
 8014a4a:	6923      	ldr	r3, [r4, #16]
 8014a4c:	f109 0901 	add.w	r9, r9, #1
 8014a50:	4038      	ands	r0, r7
 8014a52:	4599      	cmp	r9, r3
 8014a54:	b2c0      	uxtb	r0, r0
 8014a56:	d3e6      	bcc.n	8014a26 <uxr_deserialize_CLIENT_Representation+0x8e>
 8014a58:	4006      	ands	r6, r0
 8014a5a:	e7ca      	b.n	80149f2 <uxr_deserialize_CLIENT_Representation+0x5a>
 8014a5c:	2600      	movs	r6, #0
 8014a5e:	e7c8      	b.n	80149f2 <uxr_deserialize_CLIENT_Representation+0x5a>

08014a60 <uxr_serialize_AGENT_Representation>:
 8014a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a64:	2204      	movs	r2, #4
 8014a66:	460c      	mov	r4, r1
 8014a68:	4605      	mov	r5, r0
 8014a6a:	f7fd f903 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014a6e:	2202      	movs	r2, #2
 8014a70:	4606      	mov	r6, r0
 8014a72:	1d21      	adds	r1, r4, #4
 8014a74:	4628      	mov	r0, r5
 8014a76:	f7fd f8fd 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014a7a:	2202      	movs	r2, #2
 8014a7c:	1da1      	adds	r1, r4, #6
 8014a7e:	4006      	ands	r6, r0
 8014a80:	4628      	mov	r0, r5
 8014a82:	f7fd f8f7 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014a86:	4603      	mov	r3, r0
 8014a88:	7a21      	ldrb	r1, [r4, #8]
 8014a8a:	4628      	mov	r0, r5
 8014a8c:	b2f6      	uxtb	r6, r6
 8014a8e:	401e      	ands	r6, r3
 8014a90:	f7f7 fe3e 	bl	800c710 <ucdr_serialize_bool>
 8014a94:	7a23      	ldrb	r3, [r4, #8]
 8014a96:	ea00 0706 	and.w	r7, r0, r6
 8014a9a:	b913      	cbnz	r3, 8014aa2 <uxr_serialize_AGENT_Representation+0x42>
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aa2:	4628      	mov	r0, r5
 8014aa4:	68e1      	ldr	r1, [r4, #12]
 8014aa6:	f7f8 f87b 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014aaa:	68e3      	ldr	r3, [r4, #12]
 8014aac:	b313      	cbz	r3, 8014af4 <uxr_serialize_AGENT_Representation+0x94>
 8014aae:	b1e8      	cbz	r0, 8014aec <uxr_serialize_AGENT_Representation+0x8c>
 8014ab0:	46a0      	mov	r8, r4
 8014ab2:	f04f 0900 	mov.w	r9, #0
 8014ab6:	e002      	b.n	8014abe <uxr_serialize_AGENT_Representation+0x5e>
 8014ab8:	f108 0808 	add.w	r8, r8, #8
 8014abc:	b1b3      	cbz	r3, 8014aec <uxr_serialize_AGENT_Representation+0x8c>
 8014abe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f003 ffaa 	bl	8018a1c <ucdr_serialize_string>
 8014ac8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014acc:	4606      	mov	r6, r0
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f003 ffa4 	bl	8018a1c <ucdr_serialize_string>
 8014ad4:	68e2      	ldr	r2, [r4, #12]
 8014ad6:	f109 0901 	add.w	r9, r9, #1
 8014ada:	ea06 0300 	and.w	r3, r6, r0
 8014ade:	4591      	cmp	r9, r2
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	d3e9      	bcc.n	8014ab8 <uxr_serialize_AGENT_Representation+0x58>
 8014ae4:	401f      	ands	r7, r3
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aec:	2700      	movs	r7, #0
 8014aee:	4638      	mov	r0, r7
 8014af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014af4:	4007      	ands	r7, r0
 8014af6:	e7d1      	b.n	8014a9c <uxr_serialize_AGENT_Representation+0x3c>

08014af8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014af8:	b570      	push	{r4, r5, r6, lr}
 8014afa:	460d      	mov	r5, r1
 8014afc:	7809      	ldrb	r1, [r1, #0]
 8014afe:	4606      	mov	r6, r0
 8014b00:	f7f7 fe06 	bl	800c710 <ucdr_serialize_bool>
 8014b04:	782b      	ldrb	r3, [r5, #0]
 8014b06:	4604      	mov	r4, r0
 8014b08:	b94b      	cbnz	r3, 8014b1e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	7a29      	ldrb	r1, [r5, #8]
 8014b0e:	f7f7 fdff 	bl	800c710 <ucdr_serialize_bool>
 8014b12:	7a2b      	ldrb	r3, [r5, #8]
 8014b14:	4004      	ands	r4, r0
 8014b16:	b2e4      	uxtb	r4, r4
 8014b18:	b943      	cbnz	r3, 8014b2c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	bd70      	pop	{r4, r5, r6, pc}
 8014b1e:	4630      	mov	r0, r6
 8014b20:	6869      	ldr	r1, [r5, #4]
 8014b22:	f003 ff7b 	bl	8018a1c <ucdr_serialize_string>
 8014b26:	4004      	ands	r4, r0
 8014b28:	b2e4      	uxtb	r4, r4
 8014b2a:	e7ee      	b.n	8014b0a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	68e9      	ldr	r1, [r5, #12]
 8014b30:	f003 ff74 	bl	8018a1c <ucdr_serialize_string>
 8014b34:	4004      	ands	r4, r0
 8014b36:	4620      	mov	r0, r4
 8014b38:	bd70      	pop	{r4, r5, r6, pc}
 8014b3a:	bf00      	nop

08014b3c <uxr_serialize_OBJK_Topic_Binary>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	460d      	mov	r5, r1
 8014b40:	6809      	ldr	r1, [r1, #0]
 8014b42:	4606      	mov	r6, r0
 8014b44:	f003 ff6a 	bl	8018a1c <ucdr_serialize_string>
 8014b48:	7929      	ldrb	r1, [r5, #4]
 8014b4a:	4604      	mov	r4, r0
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f7f7 fddf 	bl	800c710 <ucdr_serialize_bool>
 8014b52:	792b      	ldrb	r3, [r5, #4]
 8014b54:	4004      	ands	r4, r0
 8014b56:	b2e4      	uxtb	r4, r4
 8014b58:	b943      	cbnz	r3, 8014b6c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	7b29      	ldrb	r1, [r5, #12]
 8014b5e:	f7f7 fdd7 	bl	800c710 <ucdr_serialize_bool>
 8014b62:	7b2b      	ldrb	r3, [r5, #12]
 8014b64:	4004      	ands	r4, r0
 8014b66:	b93b      	cbnz	r3, 8014b78 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014b68:	4620      	mov	r0, r4
 8014b6a:	bd70      	pop	{r4, r5, r6, pc}
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	68a9      	ldr	r1, [r5, #8]
 8014b70:	f003 ff54 	bl	8018a1c <ucdr_serialize_string>
 8014b74:	4004      	ands	r4, r0
 8014b76:	e7f0      	b.n	8014b5a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014b78:	4630      	mov	r0, r6
 8014b7a:	6929      	ldr	r1, [r5, #16]
 8014b7c:	f003 ff4e 	bl	8018a1c <ucdr_serialize_string>
 8014b80:	4004      	ands	r4, r0
 8014b82:	b2e4      	uxtb	r4, r4
 8014b84:	4620      	mov	r0, r4
 8014b86:	bd70      	pop	{r4, r5, r6, pc}

08014b88 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	7809      	ldrb	r1, [r1, #0]
 8014b90:	4606      	mov	r6, r0
 8014b92:	f7f7 fdbd 	bl	800c710 <ucdr_serialize_bool>
 8014b96:	7823      	ldrb	r3, [r4, #0]
 8014b98:	4605      	mov	r5, r0
 8014b9a:	b96b      	cbnz	r3, 8014bb8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014ba2:	f7f7 fdb5 	bl	800c710 <ucdr_serialize_bool>
 8014ba6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014baa:	4005      	ands	r5, r0
 8014bac:	b2ed      	uxtb	r5, r5
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d169      	bne.n	8014c86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb8:	4630      	mov	r0, r6
 8014bba:	6861      	ldr	r1, [r4, #4]
 8014bbc:	f7f7 fff0 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014bc0:	6863      	ldr	r3, [r4, #4]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d06b      	beq.n	8014c9e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014bc6:	2800      	cmp	r0, #0
 8014bc8:	d067      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014bca:	4630      	mov	r0, r6
 8014bcc:	68a1      	ldr	r1, [r4, #8]
 8014bce:	f003 ff25 	bl	8018a1c <ucdr_serialize_string>
 8014bd2:	6863      	ldr	r3, [r4, #4]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d953      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d05e      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014bdc:	4630      	mov	r0, r6
 8014bde:	68e1      	ldr	r1, [r4, #12]
 8014be0:	f003 ff1c 	bl	8018a1c <ucdr_serialize_string>
 8014be4:	6863      	ldr	r3, [r4, #4]
 8014be6:	2b02      	cmp	r3, #2
 8014be8:	d94a      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d055      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014bee:	4630      	mov	r0, r6
 8014bf0:	6921      	ldr	r1, [r4, #16]
 8014bf2:	f003 ff13 	bl	8018a1c <ucdr_serialize_string>
 8014bf6:	6863      	ldr	r3, [r4, #4]
 8014bf8:	2b03      	cmp	r3, #3
 8014bfa:	d941      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d04c      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c00:	4630      	mov	r0, r6
 8014c02:	6961      	ldr	r1, [r4, #20]
 8014c04:	f003 ff0a 	bl	8018a1c <ucdr_serialize_string>
 8014c08:	6863      	ldr	r3, [r4, #4]
 8014c0a:	2b04      	cmp	r3, #4
 8014c0c:	d938      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d043      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c12:	4630      	mov	r0, r6
 8014c14:	69a1      	ldr	r1, [r4, #24]
 8014c16:	f003 ff01 	bl	8018a1c <ucdr_serialize_string>
 8014c1a:	6863      	ldr	r3, [r4, #4]
 8014c1c:	2b05      	cmp	r3, #5
 8014c1e:	d92f      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d03a      	beq.n	8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c24:	4630      	mov	r0, r6
 8014c26:	69e1      	ldr	r1, [r4, #28]
 8014c28:	f003 fef8 	bl	8018a1c <ucdr_serialize_string>
 8014c2c:	6863      	ldr	r3, [r4, #4]
 8014c2e:	2b06      	cmp	r3, #6
 8014c30:	d926      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c32:	b390      	cbz	r0, 8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c34:	4630      	mov	r0, r6
 8014c36:	6a21      	ldr	r1, [r4, #32]
 8014c38:	f003 fef0 	bl	8018a1c <ucdr_serialize_string>
 8014c3c:	6863      	ldr	r3, [r4, #4]
 8014c3e:	2b07      	cmp	r3, #7
 8014c40:	d91e      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c42:	b350      	cbz	r0, 8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c44:	4630      	mov	r0, r6
 8014c46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014c48:	f003 fee8 	bl	8018a1c <ucdr_serialize_string>
 8014c4c:	6863      	ldr	r3, [r4, #4]
 8014c4e:	2b08      	cmp	r3, #8
 8014c50:	d916      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c52:	b310      	cbz	r0, 8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c54:	4630      	mov	r0, r6
 8014c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014c58:	f003 fee0 	bl	8018a1c <ucdr_serialize_string>
 8014c5c:	6863      	ldr	r3, [r4, #4]
 8014c5e:	2b09      	cmp	r3, #9
 8014c60:	d90e      	bls.n	8014c80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014c62:	b1d0      	cbz	r0, 8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c64:	2709      	movs	r7, #9
 8014c66:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8014c6a:	e000      	b.n	8014c6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014c6c:	b1a8      	cbz	r0, 8014c9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014c6e:	4630      	mov	r0, r6
 8014c70:	f858 1b04 	ldr.w	r1, [r8], #4
 8014c74:	f003 fed2 	bl	8018a1c <ucdr_serialize_string>
 8014c78:	6862      	ldr	r2, [r4, #4]
 8014c7a:	3701      	adds	r7, #1
 8014c7c:	4297      	cmp	r7, r2
 8014c7e:	d3f5      	bcc.n	8014c6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014c80:	4005      	ands	r5, r0
 8014c82:	b2ed      	uxtb	r5, r5
 8014c84:	e78a      	b.n	8014b9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014c86:	4630      	mov	r0, r6
 8014c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014c8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014c8e:	f7fd fa3b 	bl	8012108 <ucdr_serialize_sequence_uint8_t>
 8014c92:	4005      	ands	r5, r0
 8014c94:	4628      	mov	r0, r5
 8014c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c9a:	2500      	movs	r5, #0
 8014c9c:	e77e      	b.n	8014b9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014c9e:	4028      	ands	r0, r5
 8014ca0:	b2c5      	uxtb	r5, r0
 8014ca2:	e77b      	b.n	8014b9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014ca4 <uxr_serialize_OBJK_Publisher_Binary>:
 8014ca4:	b570      	push	{r4, r5, r6, lr}
 8014ca6:	460d      	mov	r5, r1
 8014ca8:	7809      	ldrb	r1, [r1, #0]
 8014caa:	4606      	mov	r6, r0
 8014cac:	f7f7 fd30 	bl	800c710 <ucdr_serialize_bool>
 8014cb0:	782b      	ldrb	r3, [r5, #0]
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	b94b      	cbnz	r3, 8014cca <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014cb6:	4630      	mov	r0, r6
 8014cb8:	7a29      	ldrb	r1, [r5, #8]
 8014cba:	f7f7 fd29 	bl	800c710 <ucdr_serialize_bool>
 8014cbe:	7a2b      	ldrb	r3, [r5, #8]
 8014cc0:	4004      	ands	r4, r0
 8014cc2:	b2e4      	uxtb	r4, r4
 8014cc4:	b943      	cbnz	r3, 8014cd8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	bd70      	pop	{r4, r5, r6, pc}
 8014cca:	4630      	mov	r0, r6
 8014ccc:	6869      	ldr	r1, [r5, #4]
 8014cce:	f003 fea5 	bl	8018a1c <ucdr_serialize_string>
 8014cd2:	4004      	ands	r4, r0
 8014cd4:	b2e4      	uxtb	r4, r4
 8014cd6:	e7ee      	b.n	8014cb6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014cd8:	4630      	mov	r0, r6
 8014cda:	f105 010c 	add.w	r1, r5, #12
 8014cde:	f7ff ff53 	bl	8014b88 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014ce2:	4004      	ands	r4, r0
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}

08014ce8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cec:	460c      	mov	r4, r1
 8014cee:	7809      	ldrb	r1, [r1, #0]
 8014cf0:	4606      	mov	r6, r0
 8014cf2:	f7f7 fd0d 	bl	800c710 <ucdr_serialize_bool>
 8014cf6:	7823      	ldrb	r3, [r4, #0]
 8014cf8:	4605      	mov	r5, r0
 8014cfa:	b96b      	cbnz	r3, 8014d18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014d02:	f7f7 fd05 	bl	800c710 <ucdr_serialize_bool>
 8014d06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014d0a:	4005      	ands	r5, r0
 8014d0c:	b2ed      	uxtb	r5, r5
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d169      	bne.n	8014de6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014d12:	4628      	mov	r0, r5
 8014d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d18:	4630      	mov	r0, r6
 8014d1a:	6861      	ldr	r1, [r4, #4]
 8014d1c:	f7f7 ff40 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014d20:	6863      	ldr	r3, [r4, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d06b      	beq.n	8014dfe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d067      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	68a1      	ldr	r1, [r4, #8]
 8014d2e:	f003 fe75 	bl	8018a1c <ucdr_serialize_string>
 8014d32:	6863      	ldr	r3, [r4, #4]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d953      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d05e      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	68e1      	ldr	r1, [r4, #12]
 8014d40:	f003 fe6c 	bl	8018a1c <ucdr_serialize_string>
 8014d44:	6863      	ldr	r3, [r4, #4]
 8014d46:	2b02      	cmp	r3, #2
 8014d48:	d94a      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d055      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d4e:	4630      	mov	r0, r6
 8014d50:	6921      	ldr	r1, [r4, #16]
 8014d52:	f003 fe63 	bl	8018a1c <ucdr_serialize_string>
 8014d56:	6863      	ldr	r3, [r4, #4]
 8014d58:	2b03      	cmp	r3, #3
 8014d5a:	d941      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d04c      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d60:	4630      	mov	r0, r6
 8014d62:	6961      	ldr	r1, [r4, #20]
 8014d64:	f003 fe5a 	bl	8018a1c <ucdr_serialize_string>
 8014d68:	6863      	ldr	r3, [r4, #4]
 8014d6a:	2b04      	cmp	r3, #4
 8014d6c:	d938      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d6e:	2800      	cmp	r0, #0
 8014d70:	d043      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d72:	4630      	mov	r0, r6
 8014d74:	69a1      	ldr	r1, [r4, #24]
 8014d76:	f003 fe51 	bl	8018a1c <ucdr_serialize_string>
 8014d7a:	6863      	ldr	r3, [r4, #4]
 8014d7c:	2b05      	cmp	r3, #5
 8014d7e:	d92f      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d03a      	beq.n	8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d84:	4630      	mov	r0, r6
 8014d86:	69e1      	ldr	r1, [r4, #28]
 8014d88:	f003 fe48 	bl	8018a1c <ucdr_serialize_string>
 8014d8c:	6863      	ldr	r3, [r4, #4]
 8014d8e:	2b06      	cmp	r3, #6
 8014d90:	d926      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014d92:	b390      	cbz	r0, 8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014d94:	4630      	mov	r0, r6
 8014d96:	6a21      	ldr	r1, [r4, #32]
 8014d98:	f003 fe40 	bl	8018a1c <ucdr_serialize_string>
 8014d9c:	6863      	ldr	r3, [r4, #4]
 8014d9e:	2b07      	cmp	r3, #7
 8014da0:	d91e      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014da2:	b350      	cbz	r0, 8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014da4:	4630      	mov	r0, r6
 8014da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014da8:	f003 fe38 	bl	8018a1c <ucdr_serialize_string>
 8014dac:	6863      	ldr	r3, [r4, #4]
 8014dae:	2b08      	cmp	r3, #8
 8014db0:	d916      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014db2:	b310      	cbz	r0, 8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014db4:	4630      	mov	r0, r6
 8014db6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014db8:	f003 fe30 	bl	8018a1c <ucdr_serialize_string>
 8014dbc:	6863      	ldr	r3, [r4, #4]
 8014dbe:	2b09      	cmp	r3, #9
 8014dc0:	d90e      	bls.n	8014de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014dc2:	b1d0      	cbz	r0, 8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014dc4:	2709      	movs	r7, #9
 8014dc6:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8014dca:	e000      	b.n	8014dce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014dcc:	b1a8      	cbz	r0, 8014dfa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f858 1b04 	ldr.w	r1, [r8], #4
 8014dd4:	f003 fe22 	bl	8018a1c <ucdr_serialize_string>
 8014dd8:	6862      	ldr	r2, [r4, #4]
 8014dda:	3701      	adds	r7, #1
 8014ddc:	4297      	cmp	r7, r2
 8014dde:	d3f5      	bcc.n	8014dcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014de0:	4005      	ands	r5, r0
 8014de2:	b2ed      	uxtb	r5, r5
 8014de4:	e78a      	b.n	8014cfc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014de6:	4630      	mov	r0, r6
 8014de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014dea:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014dee:	f7fd f98b 	bl	8012108 <ucdr_serialize_sequence_uint8_t>
 8014df2:	4005      	ands	r5, r0
 8014df4:	4628      	mov	r0, r5
 8014df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dfa:	2500      	movs	r5, #0
 8014dfc:	e77e      	b.n	8014cfc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014dfe:	4028      	ands	r0, r5
 8014e00:	b2c5      	uxtb	r5, r0
 8014e02:	e77b      	b.n	8014cfc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014e04 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	460d      	mov	r5, r1
 8014e08:	7809      	ldrb	r1, [r1, #0]
 8014e0a:	4606      	mov	r6, r0
 8014e0c:	f7f7 fc80 	bl	800c710 <ucdr_serialize_bool>
 8014e10:	782b      	ldrb	r3, [r5, #0]
 8014e12:	4604      	mov	r4, r0
 8014e14:	b94b      	cbnz	r3, 8014e2a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8014e16:	4630      	mov	r0, r6
 8014e18:	7a29      	ldrb	r1, [r5, #8]
 8014e1a:	f7f7 fc79 	bl	800c710 <ucdr_serialize_bool>
 8014e1e:	7a2b      	ldrb	r3, [r5, #8]
 8014e20:	4004      	ands	r4, r0
 8014e22:	b2e4      	uxtb	r4, r4
 8014e24:	b943      	cbnz	r3, 8014e38 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8014e26:	4620      	mov	r0, r4
 8014e28:	bd70      	pop	{r4, r5, r6, pc}
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	6869      	ldr	r1, [r5, #4]
 8014e2e:	f003 fdf5 	bl	8018a1c <ucdr_serialize_string>
 8014e32:	4004      	ands	r4, r0
 8014e34:	b2e4      	uxtb	r4, r4
 8014e36:	e7ee      	b.n	8014e16 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f105 010c 	add.w	r1, r5, #12
 8014e3e:	f7ff ff53 	bl	8014ce8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014e42:	4004      	ands	r4, r0
 8014e44:	4620      	mov	r0, r4
 8014e46:	bd70      	pop	{r4, r5, r6, pc}

08014e48 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014e48:	b570      	push	{r4, r5, r6, lr}
 8014e4a:	460d      	mov	r5, r1
 8014e4c:	8809      	ldrh	r1, [r1, #0]
 8014e4e:	4606      	mov	r6, r0
 8014e50:	f7f7 fcb8 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8014e54:	78a9      	ldrb	r1, [r5, #2]
 8014e56:	4604      	mov	r4, r0
 8014e58:	4630      	mov	r0, r6
 8014e5a:	f7f7 fc59 	bl	800c710 <ucdr_serialize_bool>
 8014e5e:	78ab      	ldrb	r3, [r5, #2]
 8014e60:	4004      	ands	r4, r0
 8014e62:	b2e4      	uxtb	r4, r4
 8014e64:	b9b3      	cbnz	r3, 8014e94 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8014e66:	4630      	mov	r0, r6
 8014e68:	79a9      	ldrb	r1, [r5, #6]
 8014e6a:	f7f7 fc51 	bl	800c710 <ucdr_serialize_bool>
 8014e6e:	79ab      	ldrb	r3, [r5, #6]
 8014e70:	4004      	ands	r4, r0
 8014e72:	bb33      	cbnz	r3, 8014ec2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8014e74:	4630      	mov	r0, r6
 8014e76:	7b29      	ldrb	r1, [r5, #12]
 8014e78:	f7f7 fc4a 	bl	800c710 <ucdr_serialize_bool>
 8014e7c:	7b2b      	ldrb	r3, [r5, #12]
 8014e7e:	4004      	ands	r4, r0
 8014e80:	b9c3      	cbnz	r3, 8014eb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8014e82:	4630      	mov	r0, r6
 8014e84:	7d29      	ldrb	r1, [r5, #20]
 8014e86:	f7f7 fc43 	bl	800c710 <ucdr_serialize_bool>
 8014e8a:	7d2b      	ldrb	r3, [r5, #20]
 8014e8c:	4004      	ands	r4, r0
 8014e8e:	b93b      	cbnz	r3, 8014ea0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8014e90:	4620      	mov	r0, r4
 8014e92:	bd70      	pop	{r4, r5, r6, pc}
 8014e94:	4630      	mov	r0, r6
 8014e96:	88a9      	ldrh	r1, [r5, #4]
 8014e98:	f7f7 fc94 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8014e9c:	4004      	ands	r4, r0
 8014e9e:	e7e2      	b.n	8014e66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	69aa      	ldr	r2, [r5, #24]
 8014ea4:	f105 011c 	add.w	r1, r5, #28
 8014ea8:	f7fd f92e 	bl	8012108 <ucdr_serialize_sequence_uint8_t>
 8014eac:	4004      	ands	r4, r0
 8014eae:	b2e4      	uxtb	r4, r4
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	bd70      	pop	{r4, r5, r6, pc}
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	6929      	ldr	r1, [r5, #16]
 8014eb8:	f7f7 fe72 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014ebc:	4004      	ands	r4, r0
 8014ebe:	b2e4      	uxtb	r4, r4
 8014ec0:	e7df      	b.n	8014e82 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	68a9      	ldr	r1, [r5, #8]
 8014ec6:	f7f7 fe6b 	bl	800cba0 <ucdr_serialize_uint32_t>
 8014eca:	4004      	ands	r4, r0
 8014ecc:	b2e4      	uxtb	r4, r4
 8014ece:	e7d1      	b.n	8014e74 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08014ed0 <uxr_serialize_OBJK_DataReader_Binary>:
 8014ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed2:	2202      	movs	r2, #2
 8014ed4:	460c      	mov	r4, r1
 8014ed6:	4606      	mov	r6, r0
 8014ed8:	f7fc fecc 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014edc:	78a1      	ldrb	r1, [r4, #2]
 8014ede:	4605      	mov	r5, r0
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	f7f7 fc15 	bl	800c710 <ucdr_serialize_bool>
 8014ee6:	78a3      	ldrb	r3, [r4, #2]
 8014ee8:	4005      	ands	r5, r0
 8014eea:	b2ed      	uxtb	r5, r5
 8014eec:	b90b      	cbnz	r3, 8014ef2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014eee:	4628      	mov	r0, r5
 8014ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ef2:	f104 0108 	add.w	r1, r4, #8
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f7ff ffa6 	bl	8014e48 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014efc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014f00:	4607      	mov	r7, r0
 8014f02:	4630      	mov	r0, r6
 8014f04:	f7f7 fc04 	bl	800c710 <ucdr_serialize_bool>
 8014f08:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014f0c:	4007      	ands	r7, r0
 8014f0e:	b2ff      	uxtb	r7, r7
 8014f10:	b95b      	cbnz	r3, 8014f2a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014f12:	4630      	mov	r0, r6
 8014f14:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8014f18:	f7f7 fbfa 	bl	800c710 <ucdr_serialize_bool>
 8014f1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f20:	4007      	ands	r7, r0
 8014f22:	b94b      	cbnz	r3, 8014f38 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014f24:	403d      	ands	r5, r7
 8014f26:	4628      	mov	r0, r5
 8014f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014f30:	f7f8 f88c 	bl	800d04c <ucdr_serialize_uint64_t>
 8014f34:	4007      	ands	r7, r0
 8014f36:	e7ec      	b.n	8014f12 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014f38:	4630      	mov	r0, r6
 8014f3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014f3c:	f003 fd6e 	bl	8018a1c <ucdr_serialize_string>
 8014f40:	4007      	ands	r7, r0
 8014f42:	b2ff      	uxtb	r7, r7
 8014f44:	e7ee      	b.n	8014f24 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014f46:	bf00      	nop

08014f48 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4a:	2202      	movs	r2, #2
 8014f4c:	460d      	mov	r5, r1
 8014f4e:	4606      	mov	r6, r0
 8014f50:	f7fc fe90 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8014f54:	78a9      	ldrb	r1, [r5, #2]
 8014f56:	4604      	mov	r4, r0
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f7f7 fbd9 	bl	800c710 <ucdr_serialize_bool>
 8014f5e:	78ab      	ldrb	r3, [r5, #2]
 8014f60:	4004      	ands	r4, r0
 8014f62:	b2e4      	uxtb	r4, r4
 8014f64:	b90b      	cbnz	r3, 8014f6a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014f66:	4620      	mov	r0, r4
 8014f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f6a:	f105 0108 	add.w	r1, r5, #8
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f7ff ff6a 	bl	8014e48 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014f74:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014f78:	4607      	mov	r7, r0
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	f7f7 fbc8 	bl	800c710 <ucdr_serialize_bool>
 8014f80:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014f84:	4007      	ands	r7, r0
 8014f86:	b2ff      	uxtb	r7, r7
 8014f88:	b913      	cbnz	r3, 8014f90 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014f8a:	403c      	ands	r4, r7
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f90:	4630      	mov	r0, r6
 8014f92:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014f96:	f7f8 f859 	bl	800d04c <ucdr_serialize_uint64_t>
 8014f9a:	4007      	ands	r7, r0
 8014f9c:	e7f5      	b.n	8014f8a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014f9e:	bf00      	nop

08014fa0 <uxr_deserialize_ObjectVariant>:
 8014fa0:	b570      	push	{r4, r5, r6, lr}
 8014fa2:	4605      	mov	r5, r0
 8014fa4:	460e      	mov	r6, r1
 8014fa6:	f7f7 fbf7 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014faa:	b320      	cbz	r0, 8014ff6 <uxr_deserialize_ObjectVariant+0x56>
 8014fac:	7833      	ldrb	r3, [r6, #0]
 8014fae:	4604      	mov	r4, r0
 8014fb0:	3b01      	subs	r3, #1
 8014fb2:	2b0d      	cmp	r3, #13
 8014fb4:	d81d      	bhi.n	8014ff2 <uxr_deserialize_ObjectVariant+0x52>
 8014fb6:	e8df f003 	tbb	[pc, r3]
 8014fba:	2107      	.short	0x2107
 8014fbc:	21214b4b 	.word	0x21214b4b
 8014fc0:	381c2121 	.word	0x381c2121
 8014fc4:	876a3838 	.word	0x876a3838
 8014fc8:	4628      	mov	r0, r5
 8014fca:	1d31      	adds	r1, r6, #4
 8014fcc:	f7f7 fbe4 	bl	800c798 <ucdr_deserialize_uint8_t>
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	b138      	cbz	r0, 8014fe4 <uxr_deserialize_ObjectVariant+0x44>
 8014fd4:	7933      	ldrb	r3, [r6, #4]
 8014fd6:	2b02      	cmp	r3, #2
 8014fd8:	d07c      	beq.n	80150d4 <uxr_deserialize_ObjectVariant+0x134>
 8014fda:	2b03      	cmp	r3, #3
 8014fdc:	f000 8082 	beq.w	80150e4 <uxr_deserialize_ObjectVariant+0x144>
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d077      	beq.n	80150d4 <uxr_deserialize_ObjectVariant+0x134>
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014fea:	f7f8 f9ab 	bl	800d344 <ucdr_deserialize_int16_t>
 8014fee:	4004      	ands	r4, r0
 8014ff0:	b2e4      	uxtb	r4, r4
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	bd70      	pop	{r4, r5, r6, pc}
 8014ff6:	2400      	movs	r4, #0
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	bd70      	pop	{r4, r5, r6, pc}
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	1d31      	adds	r1, r6, #4
 8015000:	f7f7 fbca 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015004:	4604      	mov	r4, r0
 8015006:	b130      	cbz	r0, 8015016 <uxr_deserialize_ObjectVariant+0x76>
 8015008:	7933      	ldrb	r3, [r6, #4]
 801500a:	2b02      	cmp	r3, #2
 801500c:	d037      	beq.n	801507e <uxr_deserialize_ObjectVariant+0xde>
 801500e:	2b03      	cmp	r3, #3
 8015010:	d02a      	beq.n	8015068 <uxr_deserialize_ObjectVariant+0xc8>
 8015012:	2b01      	cmp	r3, #1
 8015014:	d033      	beq.n	801507e <uxr_deserialize_ObjectVariant+0xde>
 8015016:	4628      	mov	r0, r5
 8015018:	2202      	movs	r2, #2
 801501a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801501e:	f7fc fe8d 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015022:	4004      	ands	r4, r0
 8015024:	b2e4      	uxtb	r4, r4
 8015026:	4620      	mov	r0, r4
 8015028:	bd70      	pop	{r4, r5, r6, pc}
 801502a:	4628      	mov	r0, r5
 801502c:	1d31      	adds	r1, r6, #4
 801502e:	f7f7 fbb3 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015032:	2800      	cmp	r0, #0
 8015034:	d0df      	beq.n	8014ff6 <uxr_deserialize_ObjectVariant+0x56>
 8015036:	7933      	ldrb	r3, [r6, #4]
 8015038:	2b01      	cmp	r3, #1
 801503a:	d001      	beq.n	8015040 <uxr_deserialize_ObjectVariant+0xa0>
 801503c:	2b02      	cmp	r3, #2
 801503e:	d1d8      	bne.n	8014ff2 <uxr_deserialize_ObjectVariant+0x52>
 8015040:	4628      	mov	r0, r5
 8015042:	68b1      	ldr	r1, [r6, #8]
 8015044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801504c:	f003 bcf4 	b.w	8018a38 <ucdr_deserialize_string>
 8015050:	4628      	mov	r0, r5
 8015052:	1d31      	adds	r1, r6, #4
 8015054:	f7f7 fba0 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015058:	4604      	mov	r4, r0
 801505a:	2800      	cmp	r0, #0
 801505c:	d0db      	beq.n	8015016 <uxr_deserialize_ObjectVariant+0x76>
 801505e:	7933      	ldrb	r3, [r6, #4]
 8015060:	2b02      	cmp	r3, #2
 8015062:	d00c      	beq.n	801507e <uxr_deserialize_ObjectVariant+0xde>
 8015064:	2b03      	cmp	r3, #3
 8015066:	d1d6      	bne.n	8015016 <uxr_deserialize_ObjectVariant+0x76>
 8015068:	f44f 7200 	mov.w	r2, #512	; 0x200
 801506c:	4628      	mov	r0, r5
 801506e:	f106 0308 	add.w	r3, r6, #8
 8015072:	f106 010c 	add.w	r1, r6, #12
 8015076:	f7fd f859 	bl	801212c <ucdr_deserialize_sequence_uint8_t>
 801507a:	4604      	mov	r4, r0
 801507c:	e7cb      	b.n	8015016 <uxr_deserialize_ObjectVariant+0x76>
 801507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015082:	4628      	mov	r0, r5
 8015084:	68b1      	ldr	r1, [r6, #8]
 8015086:	f003 fcd7 	bl	8018a38 <ucdr_deserialize_string>
 801508a:	4604      	mov	r4, r0
 801508c:	e7c3      	b.n	8015016 <uxr_deserialize_ObjectVariant+0x76>
 801508e:	2204      	movs	r2, #4
 8015090:	4628      	mov	r0, r5
 8015092:	18b1      	adds	r1, r6, r2
 8015094:	f7fc fe52 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015098:	2202      	movs	r2, #2
 801509a:	4604      	mov	r4, r0
 801509c:	f106 0108 	add.w	r1, r6, #8
 80150a0:	4628      	mov	r0, r5
 80150a2:	f7fc fe4b 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80150a6:	2202      	movs	r2, #2
 80150a8:	4004      	ands	r4, r0
 80150aa:	f106 010a 	add.w	r1, r6, #10
 80150ae:	4628      	mov	r0, r5
 80150b0:	f7fc fe44 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80150b4:	4603      	mov	r3, r0
 80150b6:	b2e4      	uxtb	r4, r4
 80150b8:	4628      	mov	r0, r5
 80150ba:	f106 010c 	add.w	r1, r6, #12
 80150be:	401c      	ands	r4, r3
 80150c0:	f7f7 fb3c 	bl	800c73c <ucdr_deserialize_bool>
 80150c4:	4004      	ands	r4, r0
 80150c6:	e794      	b.n	8014ff2 <uxr_deserialize_ObjectVariant+0x52>
 80150c8:	4628      	mov	r0, r5
 80150ca:	1d31      	adds	r1, r6, #4
 80150cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d0:	f7ff bc62 	b.w	8014998 <uxr_deserialize_CLIENT_Representation>
 80150d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150d8:	4628      	mov	r0, r5
 80150da:	68b1      	ldr	r1, [r6, #8]
 80150dc:	f003 fcac 	bl	8018a38 <ucdr_deserialize_string>
 80150e0:	4604      	mov	r4, r0
 80150e2:	e77f      	b.n	8014fe4 <uxr_deserialize_ObjectVariant+0x44>
 80150e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150e8:	4628      	mov	r0, r5
 80150ea:	f106 0308 	add.w	r3, r6, #8
 80150ee:	f106 010c 	add.w	r1, r6, #12
 80150f2:	f7fd f81b 	bl	801212c <ucdr_deserialize_sequence_uint8_t>
 80150f6:	4604      	mov	r4, r0
 80150f8:	e774      	b.n	8014fe4 <uxr_deserialize_ObjectVariant+0x44>
 80150fa:	bf00      	nop

080150fc <uxr_deserialize_BaseObjectRequest>:
 80150fc:	b570      	push	{r4, r5, r6, lr}
 80150fe:	2202      	movs	r2, #2
 8015100:	4605      	mov	r5, r0
 8015102:	460e      	mov	r6, r1
 8015104:	f7fc fe1a 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015108:	2202      	movs	r2, #2
 801510a:	4604      	mov	r4, r0
 801510c:	1cb1      	adds	r1, r6, #2
 801510e:	4628      	mov	r0, r5
 8015110:	f7fc fe14 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015114:	4020      	ands	r0, r4
 8015116:	b2c0      	uxtb	r0, r0
 8015118:	bd70      	pop	{r4, r5, r6, pc}
 801511a:	bf00      	nop

0801511c <uxr_deserialize_BaseObjectReply>:
 801511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015120:	2202      	movs	r2, #2
 8015122:	4606      	mov	r6, r0
 8015124:	460f      	mov	r7, r1
 8015126:	f7fc fe09 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 801512a:	2202      	movs	r2, #2
 801512c:	1cb9      	adds	r1, r7, #2
 801512e:	4605      	mov	r5, r0
 8015130:	4630      	mov	r0, r6
 8015132:	f7fc fe03 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015136:	1d39      	adds	r1, r7, #4
 8015138:	4680      	mov	r8, r0
 801513a:	4630      	mov	r0, r6
 801513c:	f7f7 fb2c 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015140:	1d79      	adds	r1, r7, #5
 8015142:	4604      	mov	r4, r0
 8015144:	4630      	mov	r0, r6
 8015146:	f7f7 fb27 	bl	800c798 <ucdr_deserialize_uint8_t>
 801514a:	ea05 0508 	and.w	r5, r5, r8
 801514e:	402c      	ands	r4, r5
 8015150:	4020      	ands	r0, r4
 8015152:	b2c0      	uxtb	r0, r0
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015158 <uxr_serialize_ReadSpecification>:
 8015158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515a:	460d      	mov	r5, r1
 801515c:	7809      	ldrb	r1, [r1, #0]
 801515e:	4606      	mov	r6, r0
 8015160:	f7f7 fb04 	bl	800c76c <ucdr_serialize_uint8_t>
 8015164:	7869      	ldrb	r1, [r5, #1]
 8015166:	4604      	mov	r4, r0
 8015168:	4630      	mov	r0, r6
 801516a:	f7f7 faff 	bl	800c76c <ucdr_serialize_uint8_t>
 801516e:	78a9      	ldrb	r1, [r5, #2]
 8015170:	4004      	ands	r4, r0
 8015172:	4630      	mov	r0, r6
 8015174:	f7f7 facc 	bl	800c710 <ucdr_serialize_bool>
 8015178:	78ab      	ldrb	r3, [r5, #2]
 801517a:	b2e4      	uxtb	r4, r4
 801517c:	4004      	ands	r4, r0
 801517e:	b943      	cbnz	r3, 8015192 <uxr_serialize_ReadSpecification+0x3a>
 8015180:	4630      	mov	r0, r6
 8015182:	7a29      	ldrb	r1, [r5, #8]
 8015184:	f7f7 fac4 	bl	800c710 <ucdr_serialize_bool>
 8015188:	7a2b      	ldrb	r3, [r5, #8]
 801518a:	4004      	ands	r4, r0
 801518c:	b93b      	cbnz	r3, 801519e <uxr_serialize_ReadSpecification+0x46>
 801518e:	4620      	mov	r0, r4
 8015190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015192:	4630      	mov	r0, r6
 8015194:	6869      	ldr	r1, [r5, #4]
 8015196:	f003 fc41 	bl	8018a1c <ucdr_serialize_string>
 801519a:	4004      	ands	r4, r0
 801519c:	e7f0      	b.n	8015180 <uxr_serialize_ReadSpecification+0x28>
 801519e:	8969      	ldrh	r1, [r5, #10]
 80151a0:	4630      	mov	r0, r6
 80151a2:	f7f7 fb0f 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80151a6:	89a9      	ldrh	r1, [r5, #12]
 80151a8:	4607      	mov	r7, r0
 80151aa:	4630      	mov	r0, r6
 80151ac:	f7f7 fb0a 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80151b0:	89e9      	ldrh	r1, [r5, #14]
 80151b2:	4007      	ands	r7, r0
 80151b4:	4630      	mov	r0, r6
 80151b6:	f7f7 fb05 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80151ba:	8a29      	ldrh	r1, [r5, #16]
 80151bc:	4605      	mov	r5, r0
 80151be:	4630      	mov	r0, r6
 80151c0:	f7f7 fb00 	bl	800c7c4 <ucdr_serialize_uint16_t>
 80151c4:	b2ff      	uxtb	r7, r7
 80151c6:	403c      	ands	r4, r7
 80151c8:	402c      	ands	r4, r5
 80151ca:	4004      	ands	r4, r0
 80151cc:	4620      	mov	r0, r4
 80151ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080151d0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80151d0:	f7ff bb8c 	b.w	80148ec <uxr_serialize_CLIENT_Representation>

080151d4 <uxr_serialize_CREATE_Payload>:
 80151d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151d6:	2202      	movs	r2, #2
 80151d8:	4606      	mov	r6, r0
 80151da:	460d      	mov	r5, r1
 80151dc:	f7fc fd4a 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80151e0:	1ca9      	adds	r1, r5, #2
 80151e2:	4604      	mov	r4, r0
 80151e4:	2202      	movs	r2, #2
 80151e6:	4630      	mov	r0, r6
 80151e8:	f7fc fd44 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80151ec:	7929      	ldrb	r1, [r5, #4]
 80151ee:	4607      	mov	r7, r0
 80151f0:	4630      	mov	r0, r6
 80151f2:	f7f7 fabb 	bl	800c76c <ucdr_serialize_uint8_t>
 80151f6:	b328      	cbz	r0, 8015244 <uxr_serialize_CREATE_Payload+0x70>
 80151f8:	792b      	ldrb	r3, [r5, #4]
 80151fa:	403c      	ands	r4, r7
 80151fc:	3b01      	subs	r3, #1
 80151fe:	b2e4      	uxtb	r4, r4
 8015200:	2b0d      	cmp	r3, #13
 8015202:	d81d      	bhi.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 8015204:	e8df f003 	tbb	[pc, r3]
 8015208:	32320753 	.word	0x32320753
 801520c:	07070707 	.word	0x07070707
 8015210:	2121211c 	.word	0x2121211c
 8015214:	684c      	.short	0x684c
 8015216:	4630      	mov	r0, r6
 8015218:	7a29      	ldrb	r1, [r5, #8]
 801521a:	f7f7 faa7 	bl	800c76c <ucdr_serialize_uint8_t>
 801521e:	4607      	mov	r7, r0
 8015220:	b130      	cbz	r0, 8015230 <uxr_serialize_CREATE_Payload+0x5c>
 8015222:	7a2b      	ldrb	r3, [r5, #8]
 8015224:	2b02      	cmp	r3, #2
 8015226:	d035      	beq.n	8015294 <uxr_serialize_CREATE_Payload+0xc0>
 8015228:	2b03      	cmp	r3, #3
 801522a:	d02b      	beq.n	8015284 <uxr_serialize_CREATE_Payload+0xb0>
 801522c:	2b01      	cmp	r3, #1
 801522e:	d031      	beq.n	8015294 <uxr_serialize_CREATE_Payload+0xc0>
 8015230:	4630      	mov	r0, r6
 8015232:	2202      	movs	r2, #2
 8015234:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8015238:	f7fc fd1c 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 801523c:	4038      	ands	r0, r7
 801523e:	4004      	ands	r4, r0
 8015240:	4620      	mov	r0, r4
 8015242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015244:	2400      	movs	r4, #0
 8015246:	4620      	mov	r0, r4
 8015248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801524a:	4630      	mov	r0, r6
 801524c:	7a29      	ldrb	r1, [r5, #8]
 801524e:	f7f7 fa8d 	bl	800c76c <ucdr_serialize_uint8_t>
 8015252:	2800      	cmp	r0, #0
 8015254:	d0f6      	beq.n	8015244 <uxr_serialize_CREATE_Payload+0x70>
 8015256:	7a2b      	ldrb	r3, [r5, #8]
 8015258:	2b01      	cmp	r3, #1
 801525a:	d001      	beq.n	8015260 <uxr_serialize_CREATE_Payload+0x8c>
 801525c:	2b02      	cmp	r3, #2
 801525e:	d1ef      	bne.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 8015260:	4630      	mov	r0, r6
 8015262:	68e9      	ldr	r1, [r5, #12]
 8015264:	f003 fbda 	bl	8018a1c <ucdr_serialize_string>
 8015268:	4004      	ands	r4, r0
 801526a:	e7e9      	b.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 801526c:	4630      	mov	r0, r6
 801526e:	7a29      	ldrb	r1, [r5, #8]
 8015270:	f7f7 fa7c 	bl	800c76c <ucdr_serialize_uint8_t>
 8015274:	4607      	mov	r7, r0
 8015276:	2800      	cmp	r0, #0
 8015278:	d0da      	beq.n	8015230 <uxr_serialize_CREATE_Payload+0x5c>
 801527a:	7a2b      	ldrb	r3, [r5, #8]
 801527c:	2b02      	cmp	r3, #2
 801527e:	d009      	beq.n	8015294 <uxr_serialize_CREATE_Payload+0xc0>
 8015280:	2b03      	cmp	r3, #3
 8015282:	d1d5      	bne.n	8015230 <uxr_serialize_CREATE_Payload+0x5c>
 8015284:	4630      	mov	r0, r6
 8015286:	68ea      	ldr	r2, [r5, #12]
 8015288:	f105 0110 	add.w	r1, r5, #16
 801528c:	f7fc ff3c 	bl	8012108 <ucdr_serialize_sequence_uint8_t>
 8015290:	4607      	mov	r7, r0
 8015292:	e7cd      	b.n	8015230 <uxr_serialize_CREATE_Payload+0x5c>
 8015294:	4630      	mov	r0, r6
 8015296:	68e9      	ldr	r1, [r5, #12]
 8015298:	f003 fbc0 	bl	8018a1c <ucdr_serialize_string>
 801529c:	4607      	mov	r7, r0
 801529e:	e7c7      	b.n	8015230 <uxr_serialize_CREATE_Payload+0x5c>
 80152a0:	4630      	mov	r0, r6
 80152a2:	f105 0108 	add.w	r1, r5, #8
 80152a6:	f7ff fbdb 	bl	8014a60 <uxr_serialize_AGENT_Representation>
 80152aa:	4004      	ands	r4, r0
 80152ac:	e7c8      	b.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 80152ae:	4630      	mov	r0, r6
 80152b0:	7a29      	ldrb	r1, [r5, #8]
 80152b2:	f7f7 fa5b 	bl	800c76c <ucdr_serialize_uint8_t>
 80152b6:	4607      	mov	r7, r0
 80152b8:	b130      	cbz	r0, 80152c8 <uxr_serialize_CREATE_Payload+0xf4>
 80152ba:	7a2b      	ldrb	r3, [r5, #8]
 80152bc:	2b02      	cmp	r3, #2
 80152be:	d012      	beq.n	80152e6 <uxr_serialize_CREATE_Payload+0x112>
 80152c0:	2b03      	cmp	r3, #3
 80152c2:	d016      	beq.n	80152f2 <uxr_serialize_CREATE_Payload+0x11e>
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d00e      	beq.n	80152e6 <uxr_serialize_CREATE_Payload+0x112>
 80152c8:	4630      	mov	r0, r6
 80152ca:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 80152ce:	f7f7 ffb9 	bl	800d244 <ucdr_serialize_int16_t>
 80152d2:	4038      	ands	r0, r7
 80152d4:	4004      	ands	r4, r0
 80152d6:	e7b3      	b.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 80152d8:	4630      	mov	r0, r6
 80152da:	f105 0108 	add.w	r1, r5, #8
 80152de:	f7ff fb05 	bl	80148ec <uxr_serialize_CLIENT_Representation>
 80152e2:	4004      	ands	r4, r0
 80152e4:	e7ac      	b.n	8015240 <uxr_serialize_CREATE_Payload+0x6c>
 80152e6:	4630      	mov	r0, r6
 80152e8:	68e9      	ldr	r1, [r5, #12]
 80152ea:	f003 fb97 	bl	8018a1c <ucdr_serialize_string>
 80152ee:	4607      	mov	r7, r0
 80152f0:	e7ea      	b.n	80152c8 <uxr_serialize_CREATE_Payload+0xf4>
 80152f2:	4630      	mov	r0, r6
 80152f4:	68ea      	ldr	r2, [r5, #12]
 80152f6:	f105 0110 	add.w	r1, r5, #16
 80152fa:	f7fc ff05 	bl	8012108 <ucdr_serialize_sequence_uint8_t>
 80152fe:	4607      	mov	r7, r0
 8015300:	e7e2      	b.n	80152c8 <uxr_serialize_CREATE_Payload+0xf4>
 8015302:	bf00      	nop

08015304 <uxr_serialize_DELETE_Payload>:
 8015304:	b570      	push	{r4, r5, r6, lr}
 8015306:	2202      	movs	r2, #2
 8015308:	4605      	mov	r5, r0
 801530a:	460e      	mov	r6, r1
 801530c:	f7fc fcb2 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8015310:	2202      	movs	r2, #2
 8015312:	4604      	mov	r4, r0
 8015314:	1cb1      	adds	r1, r6, #2
 8015316:	4628      	mov	r0, r5
 8015318:	f7fc fcac 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 801531c:	4020      	ands	r0, r4
 801531e:	b2c0      	uxtb	r0, r0
 8015320:	bd70      	pop	{r4, r5, r6, pc}
 8015322:	bf00      	nop

08015324 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015328:	4606      	mov	r6, r0
 801532a:	460f      	mov	r7, r1
 801532c:	f7f7 fa34 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015330:	1c79      	adds	r1, r7, #1
 8015332:	4605      	mov	r5, r0
 8015334:	4630      	mov	r0, r6
 8015336:	f7f7 fa2f 	bl	800c798 <ucdr_deserialize_uint8_t>
 801533a:	1d39      	adds	r1, r7, #4
 801533c:	4682      	mov	sl, r0
 801533e:	2204      	movs	r2, #4
 8015340:	4630      	mov	r0, r6
 8015342:	f7fc fcfb 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015346:	f107 0108 	add.w	r1, r7, #8
 801534a:	4681      	mov	r9, r0
 801534c:	2202      	movs	r2, #2
 801534e:	4630      	mov	r0, r6
 8015350:	f7fc fcf4 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015354:	2202      	movs	r2, #2
 8015356:	4680      	mov	r8, r0
 8015358:	f107 010a 	add.w	r1, r7, #10
 801535c:	4630      	mov	r0, r6
 801535e:	f7fc fced 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015362:	ea05 050a 	and.w	r5, r5, sl
 8015366:	b2ec      	uxtb	r4, r5
 8015368:	f107 010c 	add.w	r1, r7, #12
 801536c:	4605      	mov	r5, r0
 801536e:	4630      	mov	r0, r6
 8015370:	f7f7 f9e4 	bl	800c73c <ucdr_deserialize_bool>
 8015374:	ea04 0409 	and.w	r4, r4, r9
 8015378:	ea08 0404 	and.w	r4, r8, r4
 801537c:	4025      	ands	r5, r4
 801537e:	4028      	ands	r0, r5
 8015380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015384 <uxr_deserialize_STATUS_Payload>:
 8015384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015388:	2202      	movs	r2, #2
 801538a:	4606      	mov	r6, r0
 801538c:	460f      	mov	r7, r1
 801538e:	f7fc fcd5 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015392:	2202      	movs	r2, #2
 8015394:	1cb9      	adds	r1, r7, #2
 8015396:	4605      	mov	r5, r0
 8015398:	4630      	mov	r0, r6
 801539a:	f7fc fccf 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 801539e:	1d39      	adds	r1, r7, #4
 80153a0:	4680      	mov	r8, r0
 80153a2:	4630      	mov	r0, r6
 80153a4:	f7f7 f9f8 	bl	800c798 <ucdr_deserialize_uint8_t>
 80153a8:	1d79      	adds	r1, r7, #5
 80153aa:	4604      	mov	r4, r0
 80153ac:	4630      	mov	r0, r6
 80153ae:	f7f7 f9f3 	bl	800c798 <ucdr_deserialize_uint8_t>
 80153b2:	ea05 0508 	and.w	r5, r5, r8
 80153b6:	402c      	ands	r4, r5
 80153b8:	4020      	ands	r0, r4
 80153ba:	b2c0      	uxtb	r0, r0
 80153bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153c0 <uxr_serialize_READ_DATA_Payload>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	2202      	movs	r2, #2
 80153c4:	4605      	mov	r5, r0
 80153c6:	460e      	mov	r6, r1
 80153c8:	f7fc fc54 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80153cc:	2202      	movs	r2, #2
 80153ce:	1cb1      	adds	r1, r6, #2
 80153d0:	4604      	mov	r4, r0
 80153d2:	4628      	mov	r0, r5
 80153d4:	f7fc fc4e 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80153d8:	1d31      	adds	r1, r6, #4
 80153da:	4004      	ands	r4, r0
 80153dc:	4628      	mov	r0, r5
 80153de:	f7ff febb 	bl	8015158 <uxr_serialize_ReadSpecification>
 80153e2:	b2e4      	uxtb	r4, r4
 80153e4:	4020      	ands	r0, r4
 80153e6:	bd70      	pop	{r4, r5, r6, pc}

080153e8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80153e8:	b570      	push	{r4, r5, r6, lr}
 80153ea:	2202      	movs	r2, #2
 80153ec:	4605      	mov	r5, r0
 80153ee:	460e      	mov	r6, r1
 80153f0:	f7fc fc40 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 80153f4:	2202      	movs	r2, #2
 80153f6:	4604      	mov	r4, r0
 80153f8:	1cb1      	adds	r1, r6, #2
 80153fa:	4628      	mov	r0, r5
 80153fc:	f7fc fc3a 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8015400:	4020      	ands	r0, r4
 8015402:	b2c0      	uxtb	r0, r0
 8015404:	bd70      	pop	{r4, r5, r6, pc}
 8015406:	bf00      	nop

08015408 <uxr_serialize_ACKNACK_Payload>:
 8015408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540a:	460f      	mov	r7, r1
 801540c:	460e      	mov	r6, r1
 801540e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8015412:	4605      	mov	r5, r0
 8015414:	f7f7 f9d6 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8015418:	4639      	mov	r1, r7
 801541a:	2202      	movs	r2, #2
 801541c:	4604      	mov	r4, r0
 801541e:	4628      	mov	r0, r5
 8015420:	f7fc fc28 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8015424:	7931      	ldrb	r1, [r6, #4]
 8015426:	4004      	ands	r4, r0
 8015428:	4628      	mov	r0, r5
 801542a:	f7f7 f99f 	bl	800c76c <ucdr_serialize_uint8_t>
 801542e:	b2e4      	uxtb	r4, r4
 8015430:	4020      	ands	r0, r4
 8015432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015434 <uxr_deserialize_ACKNACK_Payload>:
 8015434:	b570      	push	{r4, r5, r6, lr}
 8015436:	4605      	mov	r5, r0
 8015438:	460e      	mov	r6, r1
 801543a:	f7f7 fac3 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 801543e:	2202      	movs	r2, #2
 8015440:	1cb1      	adds	r1, r6, #2
 8015442:	4604      	mov	r4, r0
 8015444:	4628      	mov	r0, r5
 8015446:	f7fc fc79 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 801544a:	1d31      	adds	r1, r6, #4
 801544c:	4004      	ands	r4, r0
 801544e:	4628      	mov	r0, r5
 8015450:	f7f7 f9a2 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015454:	b2e4      	uxtb	r4, r4
 8015456:	4020      	ands	r0, r4
 8015458:	bd70      	pop	{r4, r5, r6, pc}
 801545a:	bf00      	nop

0801545c <uxr_serialize_HEARTBEAT_Payload>:
 801545c:	b570      	push	{r4, r5, r6, lr}
 801545e:	460d      	mov	r5, r1
 8015460:	8809      	ldrh	r1, [r1, #0]
 8015462:	4606      	mov	r6, r0
 8015464:	f7f7 f9ae 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8015468:	8869      	ldrh	r1, [r5, #2]
 801546a:	4604      	mov	r4, r0
 801546c:	4630      	mov	r0, r6
 801546e:	f7f7 f9a9 	bl	800c7c4 <ucdr_serialize_uint16_t>
 8015472:	7929      	ldrb	r1, [r5, #4]
 8015474:	4004      	ands	r4, r0
 8015476:	4630      	mov	r0, r6
 8015478:	f7f7 f978 	bl	800c76c <ucdr_serialize_uint8_t>
 801547c:	b2e4      	uxtb	r4, r4
 801547e:	4020      	ands	r0, r4
 8015480:	bd70      	pop	{r4, r5, r6, pc}
 8015482:	bf00      	nop

08015484 <uxr_deserialize_HEARTBEAT_Payload>:
 8015484:	b570      	push	{r4, r5, r6, lr}
 8015486:	4605      	mov	r5, r0
 8015488:	460e      	mov	r6, r1
 801548a:	f7f7 fa9b 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 801548e:	1cb1      	adds	r1, r6, #2
 8015490:	4604      	mov	r4, r0
 8015492:	4628      	mov	r0, r5
 8015494:	f7f7 fa96 	bl	800c9c4 <ucdr_deserialize_uint16_t>
 8015498:	1d31      	adds	r1, r6, #4
 801549a:	4004      	ands	r4, r0
 801549c:	4628      	mov	r0, r5
 801549e:	f7f7 f97b 	bl	800c798 <ucdr_deserialize_uint8_t>
 80154a2:	b2e4      	uxtb	r4, r4
 80154a4:	4020      	ands	r0, r4
 80154a6:	bd70      	pop	{r4, r5, r6, pc}

080154a8 <uxr_serialize_TIMESTAMP_Payload>:
 80154a8:	b570      	push	{r4, r5, r6, lr}
 80154aa:	460d      	mov	r5, r1
 80154ac:	6809      	ldr	r1, [r1, #0]
 80154ae:	4606      	mov	r6, r0
 80154b0:	f7f7 ffbc 	bl	800d42c <ucdr_serialize_int32_t>
 80154b4:	6869      	ldr	r1, [r5, #4]
 80154b6:	4604      	mov	r4, r0
 80154b8:	4630      	mov	r0, r6
 80154ba:	f7f7 fb71 	bl	800cba0 <ucdr_serialize_uint32_t>
 80154be:	4020      	ands	r0, r4
 80154c0:	b2c0      	uxtb	r0, r0
 80154c2:	bd70      	pop	{r4, r5, r6, pc}

080154c4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80154c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154c8:	4605      	mov	r5, r0
 80154ca:	460e      	mov	r6, r1
 80154cc:	f7f8 f846 	bl	800d55c <ucdr_deserialize_int32_t>
 80154d0:	1d31      	adds	r1, r6, #4
 80154d2:	4607      	mov	r7, r0
 80154d4:	4628      	mov	r0, r5
 80154d6:	f7f7 fc93 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80154da:	f106 0108 	add.w	r1, r6, #8
 80154de:	4680      	mov	r8, r0
 80154e0:	4628      	mov	r0, r5
 80154e2:	f7f8 f83b 	bl	800d55c <ucdr_deserialize_int32_t>
 80154e6:	f106 010c 	add.w	r1, r6, #12
 80154ea:	4604      	mov	r4, r0
 80154ec:	4628      	mov	r0, r5
 80154ee:	f7f7 fc87 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80154f2:	ea07 0708 	and.w	r7, r7, r8
 80154f6:	403c      	ands	r4, r7
 80154f8:	f106 0110 	add.w	r1, r6, #16
 80154fc:	4004      	ands	r4, r0
 80154fe:	4628      	mov	r0, r5
 8015500:	f7f8 f82c 	bl	800d55c <ucdr_deserialize_int32_t>
 8015504:	4603      	mov	r3, r0
 8015506:	f106 0114 	add.w	r1, r6, #20
 801550a:	4628      	mov	r0, r5
 801550c:	461d      	mov	r5, r3
 801550e:	f7f7 fc77 	bl	800ce00 <ucdr_deserialize_uint32_t>
 8015512:	b2e4      	uxtb	r4, r4
 8015514:	402c      	ands	r4, r5
 8015516:	4020      	ands	r0, r4
 8015518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801551c <uxr_serialize_SampleIdentity>:
 801551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015520:	220c      	movs	r2, #12
 8015522:	4604      	mov	r4, r0
 8015524:	460d      	mov	r5, r1
 8015526:	f7fc fba5 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 801552a:	2203      	movs	r2, #3
 801552c:	f105 010c 	add.w	r1, r5, #12
 8015530:	4607      	mov	r7, r0
 8015532:	4620      	mov	r0, r4
 8015534:	f7fc fb9e 	bl	8011c74 <ucdr_serialize_array_uint8_t>
 8015538:	7be9      	ldrb	r1, [r5, #15]
 801553a:	4680      	mov	r8, r0
 801553c:	4620      	mov	r0, r4
 801553e:	f7f7 f915 	bl	800c76c <ucdr_serialize_uint8_t>
 8015542:	6929      	ldr	r1, [r5, #16]
 8015544:	4606      	mov	r6, r0
 8015546:	4620      	mov	r0, r4
 8015548:	f7f7 ff70 	bl	800d42c <ucdr_serialize_int32_t>
 801554c:	4603      	mov	r3, r0
 801554e:	6969      	ldr	r1, [r5, #20]
 8015550:	4620      	mov	r0, r4
 8015552:	461c      	mov	r4, r3
 8015554:	f7f7 fb24 	bl	800cba0 <ucdr_serialize_uint32_t>
 8015558:	ea07 0708 	and.w	r7, r7, r8
 801555c:	403e      	ands	r6, r7
 801555e:	4034      	ands	r4, r6
 8015560:	4020      	ands	r0, r4
 8015562:	b2c0      	uxtb	r0, r0
 8015564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015568 <uxr_deserialize_SampleIdentity>:
 8015568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801556c:	220c      	movs	r2, #12
 801556e:	4604      	mov	r4, r0
 8015570:	460d      	mov	r5, r1
 8015572:	f7fc fbe3 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015576:	2203      	movs	r2, #3
 8015578:	f105 010c 	add.w	r1, r5, #12
 801557c:	4607      	mov	r7, r0
 801557e:	4620      	mov	r0, r4
 8015580:	f7fc fbdc 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8015584:	f105 010f 	add.w	r1, r5, #15
 8015588:	4680      	mov	r8, r0
 801558a:	4620      	mov	r0, r4
 801558c:	f7f7 f904 	bl	800c798 <ucdr_deserialize_uint8_t>
 8015590:	f105 0110 	add.w	r1, r5, #16
 8015594:	4606      	mov	r6, r0
 8015596:	4620      	mov	r0, r4
 8015598:	f7f7 ffe0 	bl	800d55c <ucdr_deserialize_int32_t>
 801559c:	4603      	mov	r3, r0
 801559e:	f105 0114 	add.w	r1, r5, #20
 80155a2:	4620      	mov	r0, r4
 80155a4:	461c      	mov	r4, r3
 80155a6:	f7f7 fc2b 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80155aa:	ea07 0708 	and.w	r7, r7, r8
 80155ae:	403e      	ands	r6, r7
 80155b0:	4034      	ands	r4, r6
 80155b2:	4020      	ands	r0, r4
 80155b4:	b2c0      	uxtb	r0, r0
 80155b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ba:	bf00      	nop

080155bc <rcl_client_get_rmw_handle>:
 80155bc:	b110      	cbz	r0, 80155c4 <rcl_client_get_rmw_handle+0x8>
 80155be:	6800      	ldr	r0, [r0, #0]
 80155c0:	b100      	cbz	r0, 80155c4 <rcl_client_get_rmw_handle+0x8>
 80155c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80155c4:	4770      	bx	lr
 80155c6:	bf00      	nop

080155c8 <rcl_take_response>:
 80155c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ca:	460e      	mov	r6, r1
 80155cc:	4607      	mov	r7, r0
 80155ce:	b08d      	sub	sp, #52	; 0x34
 80155d0:	ad06      	add	r5, sp, #24
 80155d2:	460c      	mov	r4, r1
 80155d4:	4694      	mov	ip, r2
 80155d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80155d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80155da:	e896 0003 	ldmia.w	r6, {r0, r1}
 80155de:	e885 0003 	stmia.w	r5, {r0, r1}
 80155e2:	b337      	cbz	r7, 8015632 <rcl_take_response+0x6a>
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	b323      	cbz	r3, 8015632 <rcl_take_response+0x6a>
 80155e8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80155ea:	b310      	cbz	r0, 8015632 <rcl_take_response+0x6a>
 80155ec:	4662      	mov	r2, ip
 80155ee:	b31a      	cbz	r2, 8015638 <rcl_take_response+0x70>
 80155f0:	2300      	movs	r3, #0
 80155f2:	2600      	movs	r6, #0
 80155f4:	2700      	movs	r7, #0
 80155f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80155fa:	a902      	add	r1, sp, #8
 80155fc:	f10d 0307 	add.w	r3, sp, #7
 8015600:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015604:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015608:	f002 ff1c 	bl	8018444 <rmw_take_response>
 801560c:	4606      	mov	r6, r0
 801560e:	b9a8      	cbnz	r0, 801563c <rcl_take_response+0x74>
 8015610:	f240 13f5 	movw	r3, #501	; 0x1f5
 8015614:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015618:	2a00      	cmp	r2, #0
 801561a:	bf08      	it	eq
 801561c:	461e      	moveq	r6, r3
 801561e:	ad06      	add	r5, sp, #24
 8015620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015624:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015628:	e884 0003 	stmia.w	r4, {r0, r1}
 801562c:	4630      	mov	r0, r6
 801562e:	b00d      	add	sp, #52	; 0x34
 8015630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015632:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8015636:	e7f2      	b.n	801561e <rcl_take_response+0x56>
 8015638:	260b      	movs	r6, #11
 801563a:	e7f0      	b.n	801561e <rcl_take_response+0x56>
 801563c:	2601      	movs	r6, #1
 801563e:	e7ee      	b.n	801561e <rcl_take_response+0x56>

08015640 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015640:	280b      	cmp	r0, #11
 8015642:	dc0d      	bgt.n	8015660 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015644:	2800      	cmp	r0, #0
 8015646:	db09      	blt.n	801565c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015648:	280b      	cmp	r0, #11
 801564a:	d807      	bhi.n	801565c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801564c:	e8df f000 	tbb	[pc, r0]
 8015650:	07060607 	.word	0x07060607
 8015654:	06060606 	.word	0x06060606
 8015658:	07070606 	.word	0x07070606
 801565c:	2001      	movs	r0, #1
 801565e:	4770      	bx	lr
 8015660:	28cb      	cmp	r0, #203	; 0xcb
 8015662:	bf18      	it	ne
 8015664:	2001      	movne	r0, #1
 8015666:	4770      	bx	lr

08015668 <rcl_get_zero_initialized_context>:
 8015668:	b4d0      	push	{r4, r6, r7}
 801566a:	2600      	movs	r6, #0
 801566c:	2700      	movs	r7, #0
 801566e:	4604      	mov	r4, r0
 8015670:	4b04      	ldr	r3, [pc, #16]	; (8015684 <rcl_get_zero_initialized_context+0x1c>)
 8015672:	e9c3 6702 	strd	r6, r7, [r3, #8]
 8015676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801567c:	4620      	mov	r0, r4
 801567e:	bcd0      	pop	{r4, r6, r7}
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	20006858 	.word	0x20006858

08015688 <rcl_context_is_valid>:
 8015688:	b150      	cbz	r0, 80156a0 <rcl_context_is_valid+0x18>
 801568a:	b508      	push	{r3, lr}
 801568c:	2105      	movs	r1, #5
 801568e:	3008      	adds	r0, #8
 8015690:	f002 f942 	bl	8017918 <__atomic_load_8>
 8015694:	ea51 0300 	orrs.w	r3, r1, r0
 8015698:	bf14      	ite	ne
 801569a:	2001      	movne	r0, #1
 801569c:	2000      	moveq	r0, #0
 801569e:	bd08      	pop	{r3, pc}
 80156a0:	4770      	bx	lr
 80156a2:	bf00      	nop

080156a4 <__cleanup_context>:
 80156a4:	2305      	movs	r3, #5
 80156a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156aa:	4606      	mov	r6, r0
 80156ac:	b087      	sub	sp, #28
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	3008      	adds	r0, #8
 80156b2:	2200      	movs	r2, #0
 80156b4:	2300      	movs	r3, #0
 80156b6:	f002 f963 	bl	8017980 <__atomic_store_8>
 80156ba:	6830      	ldr	r0, [r6, #0]
 80156bc:	2800      	cmp	r0, #0
 80156be:	d052      	beq.n	8015766 <__cleanup_context+0xc2>
 80156c0:	6947      	ldr	r7, [r0, #20]
 80156c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80156c6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80156ca:	b137      	cbz	r7, 80156da <__cleanup_context+0x36>
 80156cc:	3014      	adds	r0, #20
 80156ce:	f7f8 fe19 	bl	800e304 <rcl_init_options_fini>
 80156d2:	4607      	mov	r7, r0
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d148      	bne.n	801576a <__cleanup_context+0xc6>
 80156d8:	6830      	ldr	r0, [r6, #0]
 80156da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80156dc:	b143      	cbz	r3, 80156f0 <__cleanup_context+0x4c>
 80156de:	3028      	adds	r0, #40	; 0x28
 80156e0:	f7fa fb94 	bl	800fe0c <rmw_context_fini>
 80156e4:	b118      	cbz	r0, 80156ee <__cleanup_context+0x4a>
 80156e6:	2f00      	cmp	r7, #0
 80156e8:	d042      	beq.n	8015770 <__cleanup_context+0xcc>
 80156ea:	f7f9 ff31 	bl	800f550 <rcutils_reset_error>
 80156ee:	6830      	ldr	r0, [r6, #0]
 80156f0:	6a01      	ldr	r1, [r0, #32]
 80156f2:	b1d9      	cbz	r1, 801572c <__cleanup_context+0x88>
 80156f4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80156f8:	2a01      	cmp	r2, #1
 80156fa:	f173 0000 	sbcs.w	r0, r3, #0
 80156fe:	db11      	blt.n	8015724 <__cleanup_context+0x80>
 8015700:	2400      	movs	r4, #0
 8015702:	2500      	movs	r5, #0
 8015704:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8015708:	b308      	cbz	r0, 801574e <__cleanup_context+0xaa>
 801570a:	4649      	mov	r1, r9
 801570c:	47c0      	blx	r8
 801570e:	6831      	ldr	r1, [r6, #0]
 8015710:	3401      	adds	r4, #1
 8015712:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8015716:	f145 0500 	adc.w	r5, r5, #0
 801571a:	4294      	cmp	r4, r2
 801571c:	eb75 0003 	sbcs.w	r0, r5, r3
 8015720:	6a09      	ldr	r1, [r1, #32]
 8015722:	dbef      	blt.n	8015704 <__cleanup_context+0x60>
 8015724:	4608      	mov	r0, r1
 8015726:	4649      	mov	r1, r9
 8015728:	47c0      	blx	r8
 801572a:	6830      	ldr	r0, [r6, #0]
 801572c:	4649      	mov	r1, r9
 801572e:	47c0      	blx	r8
 8015730:	2000      	movs	r0, #0
 8015732:	2100      	movs	r1, #0
 8015734:	4b10      	ldr	r3, [pc, #64]	; (8015778 <__cleanup_context+0xd4>)
 8015736:	ac02      	add	r4, sp, #8
 8015738:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801573c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801573e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015742:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8015746:	4638      	mov	r0, r7
 8015748:	b007      	add	sp, #28
 801574a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801574e:	3401      	adds	r4, #1
 8015750:	f145 0500 	adc.w	r5, r5, #0
 8015754:	4294      	cmp	r4, r2
 8015756:	eb75 0003 	sbcs.w	r0, r5, r3
 801575a:	dbd3      	blt.n	8015704 <__cleanup_context+0x60>
 801575c:	4608      	mov	r0, r1
 801575e:	4649      	mov	r1, r9
 8015760:	47c0      	blx	r8
 8015762:	6830      	ldr	r0, [r6, #0]
 8015764:	e7e2      	b.n	801572c <__cleanup_context+0x88>
 8015766:	4607      	mov	r7, r0
 8015768:	e7e2      	b.n	8015730 <__cleanup_context+0x8c>
 801576a:	f7f9 fef1 	bl	800f550 <rcutils_reset_error>
 801576e:	e7b3      	b.n	80156d8 <__cleanup_context+0x34>
 8015770:	f7ff ff66 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 8015774:	4607      	mov	r7, r0
 8015776:	e7b8      	b.n	80156ea <__cleanup_context+0x46>
 8015778:	20006858 	.word	0x20006858

0801577c <rcl_expand_topic_name>:
 801577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015780:	b08b      	sub	sp, #44	; 0x2c
 8015782:	9306      	str	r3, [sp, #24]
 8015784:	2800      	cmp	r0, #0
 8015786:	f000 80d6 	beq.w	8015936 <rcl_expand_topic_name+0x1ba>
 801578a:	460e      	mov	r6, r1
 801578c:	2900      	cmp	r1, #0
 801578e:	f000 80d2 	beq.w	8015936 <rcl_expand_topic_name+0x1ba>
 8015792:	4617      	mov	r7, r2
 8015794:	2a00      	cmp	r2, #0
 8015796:	f000 80ce 	beq.w	8015936 <rcl_expand_topic_name+0x1ba>
 801579a:	2b00      	cmp	r3, #0
 801579c:	f000 80cb 	beq.w	8015936 <rcl_expand_topic_name+0x1ba>
 80157a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	f000 80c7 	beq.w	8015936 <rcl_expand_topic_name+0x1ba>
 80157a8:	2200      	movs	r2, #0
 80157aa:	a909      	add	r1, sp, #36	; 0x24
 80157ac:	4680      	mov	r8, r0
 80157ae:	f001 f9cf 	bl	8016b50 <rcl_validate_topic_name>
 80157b2:	4604      	mov	r4, r0
 80157b4:	2800      	cmp	r0, #0
 80157b6:	f040 80ba 	bne.w	801592e <rcl_expand_topic_name+0x1b2>
 80157ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f040 80c3 	bne.w	8015948 <rcl_expand_topic_name+0x1cc>
 80157c2:	4602      	mov	r2, r0
 80157c4:	a909      	add	r1, sp, #36	; 0x24
 80157c6:	4630      	mov	r0, r6
 80157c8:	f002 fb5c 	bl	8017e84 <rmw_validate_node_name>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	f040 80b7 	bne.w	8015940 <rcl_expand_topic_name+0x1c4>
 80157d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157d4:	2a00      	cmp	r2, #0
 80157d6:	f040 80bc 	bne.w	8015952 <rcl_expand_topic_name+0x1d6>
 80157da:	4638      	mov	r0, r7
 80157dc:	a909      	add	r1, sp, #36	; 0x24
 80157de:	f002 fb33 	bl	8017e48 <rmw_validate_namespace>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	f040 80ac 	bne.w	8015940 <rcl_expand_topic_name+0x1c4>
 80157e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80157ea:	2c00      	cmp	r4, #0
 80157ec:	f040 80f4 	bne.w	80159d8 <rcl_expand_topic_name+0x25c>
 80157f0:	217b      	movs	r1, #123	; 0x7b
 80157f2:	4640      	mov	r0, r8
 80157f4:	f004 fad0 	bl	8019d98 <strchr>
 80157f8:	f898 3000 	ldrb.w	r3, [r8]
 80157fc:	4683      	mov	fp, r0
 80157fe:	2b2f      	cmp	r3, #47	; 0x2f
 8015800:	f000 80a9 	beq.w	8015956 <rcl_expand_topic_name+0x1da>
 8015804:	2b7e      	cmp	r3, #126	; 0x7e
 8015806:	f040 80ad 	bne.w	8015964 <rcl_expand_topic_name+0x1e8>
 801580a:	4638      	mov	r0, r7
 801580c:	f7ea fd1a 	bl	8000244 <strlen>
 8015810:	4681      	mov	r9, r0
 8015812:	f8df e228 	ldr.w	lr, [pc, #552]	; 8015a3c <rcl_expand_topic_name+0x2c0>
 8015816:	f8df c228 	ldr.w	ip, [pc, #552]	; 8015a40 <rcl_expand_topic_name+0x2c4>
 801581a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801581c:	f1b9 0f01 	cmp.w	r9, #1
 8015820:	bf18      	it	ne
 8015822:	46f4      	movne	ip, lr
 8015824:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8015828:	ab14      	add	r3, sp, #80	; 0x50
 801582a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801582c:	e9cd c702 	strd	ip, r7, [sp, #8]
 8015830:	f108 0c01 	add.w	ip, r8, #1
 8015834:	9500      	str	r5, [sp, #0]
 8015836:	9604      	str	r6, [sp, #16]
 8015838:	f8cd e004 	str.w	lr, [sp, #4]
 801583c:	f8cd c014 	str.w	ip, [sp, #20]
 8015840:	f002 f954 	bl	8017aec <rcutils_format_string_limit>
 8015844:	4605      	mov	r5, r0
 8015846:	2800      	cmp	r0, #0
 8015848:	f000 80c8 	beq.w	80159dc <rcl_expand_topic_name+0x260>
 801584c:	465b      	mov	r3, fp
 801584e:	2b00      	cmp	r3, #0
 8015850:	f000 80a4 	beq.w	801599c <rcl_expand_topic_name+0x220>
 8015854:	217b      	movs	r1, #123	; 0x7b
 8015856:	f004 fa9f 	bl	8019d98 <strchr>
 801585a:	46a9      	mov	r9, r5
 801585c:	4683      	mov	fp, r0
 801585e:	46aa      	mov	sl, r5
 8015860:	9407      	str	r4, [sp, #28]
 8015862:	465d      	mov	r5, fp
 8015864:	464c      	mov	r4, r9
 8015866:	2d00      	cmp	r5, #0
 8015868:	f000 80bd 	beq.w	80159e6 <rcl_expand_topic_name+0x26a>
 801586c:	217d      	movs	r1, #125	; 0x7d
 801586e:	4620      	mov	r0, r4
 8015870:	f004 fa92 	bl	8019d98 <strchr>
 8015874:	eba0 0905 	sub.w	r9, r0, r5
 8015878:	f109 0b01 	add.w	fp, r9, #1
 801587c:	465a      	mov	r2, fp
 801587e:	4629      	mov	r1, r5
 8015880:	4869      	ldr	r0, [pc, #420]	; (8015a28 <rcl_expand_topic_name+0x2ac>)
 8015882:	f004 fa9e 	bl	8019dc2 <strncmp>
 8015886:	2800      	cmp	r0, #0
 8015888:	d06a      	beq.n	8015960 <rcl_expand_topic_name+0x1e4>
 801588a:	465a      	mov	r2, fp
 801588c:	4629      	mov	r1, r5
 801588e:	4867      	ldr	r0, [pc, #412]	; (8015a2c <rcl_expand_topic_name+0x2b0>)
 8015890:	f004 fa97 	bl	8019dc2 <strncmp>
 8015894:	b128      	cbz	r0, 80158a2 <rcl_expand_topic_name+0x126>
 8015896:	465a      	mov	r2, fp
 8015898:	4629      	mov	r1, r5
 801589a:	4865      	ldr	r0, [pc, #404]	; (8015a30 <rcl_expand_topic_name+0x2b4>)
 801589c:	f004 fa91 	bl	8019dc2 <strncmp>
 80158a0:	bb38      	cbnz	r0, 80158f2 <rcl_expand_topic_name+0x176>
 80158a2:	46b9      	mov	r9, r7
 80158a4:	ab16      	add	r3, sp, #88	; 0x58
 80158a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80158aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80158ae:	ab14      	add	r3, sp, #80	; 0x50
 80158b0:	4628      	mov	r0, r5
 80158b2:	cb0c      	ldmia	r3, {r2, r3}
 80158b4:	4659      	mov	r1, fp
 80158b6:	f002 fa55 	bl	8017d64 <rcutils_strndup>
 80158ba:	4605      	mov	r5, r0
 80158bc:	2800      	cmp	r0, #0
 80158be:	f000 809c 	beq.w	80159fa <rcl_expand_topic_name+0x27e>
 80158c2:	464a      	mov	r2, r9
 80158c4:	4620      	mov	r0, r4
 80158c6:	4629      	mov	r1, r5
 80158c8:	ab14      	add	r3, sp, #80	; 0x50
 80158ca:	f002 f961 	bl	8017b90 <rcutils_repl_str>
 80158ce:	4604      	mov	r4, r0
 80158d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158d2:	4628      	mov	r0, r5
 80158d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80158d6:	4798      	blx	r3
 80158d8:	4650      	mov	r0, sl
 80158da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80158de:	4798      	blx	r3
 80158e0:	2c00      	cmp	r4, #0
 80158e2:	d07b      	beq.n	80159dc <rcl_expand_topic_name+0x260>
 80158e4:	217b      	movs	r1, #123	; 0x7b
 80158e6:	4620      	mov	r0, r4
 80158e8:	f004 fa56 	bl	8019d98 <strchr>
 80158ec:	46a2      	mov	sl, r4
 80158ee:	4605      	mov	r5, r0
 80158f0:	e7b9      	b.n	8015866 <rcl_expand_topic_name+0xea>
 80158f2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80158f6:	9806      	ldr	r0, [sp, #24]
 80158f8:	1c69      	adds	r1, r5, #1
 80158fa:	f7f9 ff3b 	bl	800f774 <rcutils_string_map_getn>
 80158fe:	4681      	mov	r9, r0
 8015900:	2800      	cmp	r0, #0
 8015902:	d1cf      	bne.n	80158a4 <rcl_expand_topic_name+0x128>
 8015904:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015906:	ab16      	add	r3, sp, #88	; 0x58
 8015908:	6010      	str	r0, [r2, #0]
 801590a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801590e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015912:	ab14      	add	r3, sp, #80	; 0x50
 8015914:	cb0c      	ldmia	r3, {r2, r3}
 8015916:	4659      	mov	r1, fp
 8015918:	4628      	mov	r0, r5
 801591a:	f002 fa23 	bl	8017d64 <rcutils_strndup>
 801591e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015920:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015922:	4798      	blx	r3
 8015924:	4650      	mov	r0, sl
 8015926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015928:	9918      	ldr	r1, [sp, #96]	; 0x60
 801592a:	4798      	blx	r3
 801592c:	2469      	movs	r4, #105	; 0x69
 801592e:	4620      	mov	r0, r4
 8015930:	b00b      	add	sp, #44	; 0x2c
 8015932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015936:	240b      	movs	r4, #11
 8015938:	4620      	mov	r0, r4
 801593a:	b00b      	add	sp, #44	; 0x2c
 801593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015940:	f7ff fe7e 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 8015944:	4604      	mov	r4, r0
 8015946:	e7f2      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 8015948:	2467      	movs	r4, #103	; 0x67
 801594a:	4620      	mov	r0, r4
 801594c:	b00b      	add	sp, #44	; 0x2c
 801594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015952:	24c9      	movs	r4, #201	; 0xc9
 8015954:	e7eb      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 8015956:	2800      	cmp	r0, #0
 8015958:	d057      	beq.n	8015a0a <rcl_expand_topic_name+0x28e>
 801595a:	46c1      	mov	r9, r8
 801595c:	4625      	mov	r5, r4
 801595e:	e77e      	b.n	801585e <rcl_expand_topic_name+0xe2>
 8015960:	46b1      	mov	r9, r6
 8015962:	e79f      	b.n	80158a4 <rcl_expand_topic_name+0x128>
 8015964:	2800      	cmp	r0, #0
 8015966:	d1f8      	bne.n	801595a <rcl_expand_topic_name+0x1de>
 8015968:	4638      	mov	r0, r7
 801596a:	f7ea fc6b 	bl	8000244 <strlen>
 801596e:	4a31      	ldr	r2, [pc, #196]	; (8015a34 <rcl_expand_topic_name+0x2b8>)
 8015970:	4b31      	ldr	r3, [pc, #196]	; (8015a38 <rcl_expand_topic_name+0x2bc>)
 8015972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015976:	2801      	cmp	r0, #1
 8015978:	bf18      	it	ne
 801597a:	4613      	movne	r3, r2
 801597c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801597e:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8015982:	e9cd 2100 	strd	r2, r1, [sp]
 8015986:	f8cd 8010 	str.w	r8, [sp, #16]
 801598a:	ab14      	add	r3, sp, #80	; 0x50
 801598c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801598e:	f002 f8ad 	bl	8017aec <rcutils_format_string_limit>
 8015992:	4605      	mov	r5, r0
 8015994:	b315      	cbz	r5, 80159dc <rcl_expand_topic_name+0x260>
 8015996:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015998:	601d      	str	r5, [r3, #0]
 801599a:	e7c8      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 801599c:	782b      	ldrb	r3, [r5, #0]
 801599e:	2b2f      	cmp	r3, #47	; 0x2f
 80159a0:	d0f9      	beq.n	8015996 <rcl_expand_topic_name+0x21a>
 80159a2:	4638      	mov	r0, r7
 80159a4:	f7ea fc4e 	bl	8000244 <strlen>
 80159a8:	4a22      	ldr	r2, [pc, #136]	; (8015a34 <rcl_expand_topic_name+0x2b8>)
 80159aa:	4b23      	ldr	r3, [pc, #140]	; (8015a38 <rcl_expand_topic_name+0x2bc>)
 80159ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80159b0:	2801      	cmp	r0, #1
 80159b2:	bf18      	it	ne
 80159b4:	4613      	movne	r3, r2
 80159b6:	e9cd 7503 	strd	r7, r5, [sp, #12]
 80159ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80159be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80159c0:	ab14      	add	r3, sp, #80	; 0x50
 80159c2:	9200      	str	r2, [sp, #0]
 80159c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159c6:	f002 f891 	bl	8017aec <rcutils_format_string_limit>
 80159ca:	4603      	mov	r3, r0
 80159cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80159ce:	4628      	mov	r0, r5
 80159d0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80159d2:	461d      	mov	r5, r3
 80159d4:	4790      	blx	r2
 80159d6:	e7dd      	b.n	8015994 <rcl_expand_topic_name+0x218>
 80159d8:	24ca      	movs	r4, #202	; 0xca
 80159da:	e7a8      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 80159dc:	2300      	movs	r3, #0
 80159de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80159e0:	240a      	movs	r4, #10
 80159e2:	6013      	str	r3, [r2, #0]
 80159e4:	e7a3      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 80159e6:	4653      	mov	r3, sl
 80159e8:	4655      	mov	r5, sl
 80159ea:	9c07      	ldr	r4, [sp, #28]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d1d5      	bne.n	801599c <rcl_expand_topic_name+0x220>
 80159f0:	f898 3000 	ldrb.w	r3, [r8]
 80159f4:	2b2f      	cmp	r3, #47	; 0x2f
 80159f6:	d0ce      	beq.n	8015996 <rcl_expand_topic_name+0x21a>
 80159f8:	e7b6      	b.n	8015968 <rcl_expand_topic_name+0x1ec>
 80159fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159fc:	4650      	mov	r0, sl
 80159fe:	601d      	str	r5, [r3, #0]
 8015a00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a04:	4798      	blx	r3
 8015a06:	240a      	movs	r4, #10
 8015a08:	e791      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 8015a0a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8015a0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015a12:	ab14      	add	r3, sp, #80	; 0x50
 8015a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015a16:	4640      	mov	r0, r8
 8015a18:	f002 f982 	bl	8017d20 <rcutils_strdup>
 8015a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	bf08      	it	eq
 8015a22:	240a      	moveq	r4, #10
 8015a24:	6018      	str	r0, [r3, #0]
 8015a26:	e782      	b.n	801592e <rcl_expand_topic_name+0x1b2>
 8015a28:	0801c79c 	.word	0x0801c79c
 8015a2c:	0801c7a4 	.word	0x0801c7a4
 8015a30:	0801c7ac 	.word	0x0801c7ac
 8015a34:	0801c484 	.word	0x0801c484
 8015a38:	0801c4a8 	.word	0x0801c4a8
 8015a3c:	0801c794 	.word	0x0801c794
 8015a40:	0801c498 	.word	0x0801c498

08015a44 <rcl_get_default_topic_name_substitutions>:
 8015a44:	2800      	cmp	r0, #0
 8015a46:	bf0c      	ite	eq
 8015a48:	200b      	moveq	r0, #11
 8015a4a:	2000      	movne	r0, #0
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop

08015a50 <rcl_init>:
 8015a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a54:	1e07      	subs	r7, r0, #0
 8015a56:	4688      	mov	r8, r1
 8015a58:	4692      	mov	sl, r2
 8015a5a:	4699      	mov	r9, r3
 8015a5c:	b09f      	sub	sp, #124	; 0x7c
 8015a5e:	f340 8096 	ble.w	8015b8e <rcl_init+0x13e>
 8015a62:	2900      	cmp	r1, #0
 8015a64:	f000 8096 	beq.w	8015b94 <rcl_init+0x144>
 8015a68:	2400      	movs	r4, #0
 8015a6a:	1f0d      	subs	r5, r1, #4
 8015a6c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8015a70:	3401      	adds	r4, #1
 8015a72:	2e00      	cmp	r6, #0
 8015a74:	f000 808e 	beq.w	8015b94 <rcl_init+0x144>
 8015a78:	42a7      	cmp	r7, r4
 8015a7a:	d1f7      	bne.n	8015a6c <rcl_init+0x1c>
 8015a7c:	f1ba 0f00 	cmp.w	sl, #0
 8015a80:	f000 8088 	beq.w	8015b94 <rcl_init+0x144>
 8015a84:	f8da 4000 	ldr.w	r4, [sl]
 8015a88:	2c00      	cmp	r4, #0
 8015a8a:	f000 8083 	beq.w	8015b94 <rcl_init+0x144>
 8015a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a90:	ad19      	add	r5, sp, #100	; 0x64
 8015a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a94:	6823      	ldr	r3, [r4, #0]
 8015a96:	a819      	add	r0, sp, #100	; 0x64
 8015a98:	602b      	str	r3, [r5, #0]
 8015a9a:	f7f9 fc69 	bl	800f370 <rcutils_allocator_is_valid>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d078      	beq.n	8015b94 <rcl_init+0x144>
 8015aa2:	f1b9 0f00 	cmp.w	r9, #0
 8015aa6:	d075      	beq.n	8015b94 <rcl_init+0x144>
 8015aa8:	f8d9 3000 	ldr.w	r3, [r9]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d176      	bne.n	8015b9e <rcl_init+0x14e>
 8015ab0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015ab4:	2178      	movs	r1, #120	; 0x78
 8015ab6:	2001      	movs	r0, #1
 8015ab8:	4798      	blx	r3
 8015aba:	4604      	mov	r4, r0
 8015abc:	f8c9 0000 	str.w	r0, [r9]
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	f000 80c6 	beq.w	8015c52 <rcl_init+0x202>
 8015ac6:	a802      	add	r0, sp, #8
 8015ac8:	f002 f968 	bl	8017d9c <rmw_get_zero_initialized_context>
 8015acc:	2250      	movs	r2, #80	; 0x50
 8015ace:	a902      	add	r1, sp, #8
 8015ad0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015ad4:	f003 ff8a 	bl	80199ec <memcpy>
 8015ad8:	f8d9 6000 	ldr.w	r6, [r9]
 8015adc:	ac19      	add	r4, sp, #100	; 0x64
 8015ade:	4635      	mov	r5, r6
 8015ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	f106 0114 	add.w	r1, r6, #20
 8015aea:	4650      	mov	r0, sl
 8015aec:	602b      	str	r3, [r5, #0]
 8015aee:	f7f8 fc2d 	bl	800e34c <rcl_init_options_copy>
 8015af2:	4606      	mov	r6, r0
 8015af4:	2800      	cmp	r0, #0
 8015af6:	d143      	bne.n	8015b80 <rcl_init+0x130>
 8015af8:	463c      	mov	r4, r7
 8015afa:	f8d9 a000 	ldr.w	sl, [r9]
 8015afe:	17fd      	asrs	r5, r7, #31
 8015b00:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8015b04:	f8ca 0020 	str.w	r0, [sl, #32]
 8015b08:	2f00      	cmp	r7, #0
 8015b0a:	d04d      	beq.n	8015ba8 <rcl_init+0x158>
 8015b0c:	f1b8 0f00 	cmp.w	r8, #0
 8015b10:	d04a      	beq.n	8015ba8 <rcl_init+0x158>
 8015b12:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015b16:	4638      	mov	r0, r7
 8015b18:	2104      	movs	r1, #4
 8015b1a:	4798      	blx	r3
 8015b1c:	f8d9 b000 	ldr.w	fp, [r9]
 8015b20:	f8ca 0020 	str.w	r0, [sl, #32]
 8015b24:	f8db 3020 	ldr.w	r3, [fp, #32]
 8015b28:	b34b      	cbz	r3, 8015b7e <rcl_init+0x12e>
 8015b2a:	2f01      	cmp	r7, #1
 8015b2c:	f175 0300 	sbcs.w	r3, r5, #0
 8015b30:	db3a      	blt.n	8015ba8 <rcl_init+0x158>
 8015b32:	2600      	movs	r6, #0
 8015b34:	2700      	movs	r7, #0
 8015b36:	f1a8 0804 	sub.w	r8, r8, #4
 8015b3a:	e00d      	b.n	8015b58 <rcl_init+0x108>
 8015b3c:	4652      	mov	r2, sl
 8015b3e:	f8d8 1000 	ldr.w	r1, [r8]
 8015b42:	f003 ff53 	bl	80199ec <memcpy>
 8015b46:	3601      	adds	r6, #1
 8015b48:	f147 0700 	adc.w	r7, r7, #0
 8015b4c:	42bd      	cmp	r5, r7
 8015b4e:	bf08      	it	eq
 8015b50:	42b4      	cmpeq	r4, r6
 8015b52:	d029      	beq.n	8015ba8 <rcl_init+0x158>
 8015b54:	f8d9 b000 	ldr.w	fp, [r9]
 8015b58:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8015b5c:	f7ea fb72 	bl	8000244 <strlen>
 8015b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b62:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015b64:	f8db b020 	ldr.w	fp, [fp, #32]
 8015b68:	4682      	mov	sl, r0
 8015b6a:	4798      	blx	r3
 8015b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8015b70:	00b3      	lsls	r3, r6, #2
 8015b72:	6a12      	ldr	r2, [r2, #32]
 8015b74:	f84b 0003 	str.w	r0, [fp, r3]
 8015b78:	58d0      	ldr	r0, [r2, r3]
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d1de      	bne.n	8015b3c <rcl_init+0xec>
 8015b7e:	260a      	movs	r6, #10
 8015b80:	4648      	mov	r0, r9
 8015b82:	f7ff fd8f 	bl	80156a4 <__cleanup_context>
 8015b86:	4630      	mov	r0, r6
 8015b88:	b01f      	add	sp, #124	; 0x7c
 8015b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b8e:	2900      	cmp	r1, #0
 8015b90:	f43f af74 	beq.w	8015a7c <rcl_init+0x2c>
 8015b94:	260b      	movs	r6, #11
 8015b96:	4630      	mov	r0, r6
 8015b98:	b01f      	add	sp, #124	; 0x7c
 8015b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b9e:	2664      	movs	r6, #100	; 0x64
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	b01f      	add	sp, #124	; 0x7c
 8015ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba8:	2605      	movs	r6, #5
 8015baa:	2300      	movs	r3, #0
 8015bac:	2201      	movs	r2, #1
 8015bae:	4832      	ldr	r0, [pc, #200]	; (8015c78 <rcl_init+0x228>)
 8015bb0:	9600      	str	r6, [sp, #0]
 8015bb2:	f001 ff51 	bl	8017a58 <__atomic_fetch_add_8>
 8015bb6:	4604      	mov	r4, r0
 8015bb8:	460d      	mov	r5, r1
 8015bba:	ea54 0305 	orrs.w	r3, r4, r5
 8015bbe:	d03e      	beq.n	8015c3e <rcl_init+0x1ee>
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	9600      	str	r6, [sp, #0]
 8015bc6:	f109 0008 	add.w	r0, r9, #8
 8015bca:	f001 fed9 	bl	8017980 <__atomic_store_8>
 8015bce:	f8d9 3000 	ldr.w	r3, [r9]
 8015bd2:	695f      	ldr	r7, [r3, #20]
 8015bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	d03d      	beq.n	8015c5a <rcl_init+0x20a>
 8015bde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8015be2:	b94b      	cbnz	r3, 8015bf8 <rcl_init+0x1a8>
 8015be4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015be8:	f000 f848 	bl	8015c7c <rcl_get_localhost_only>
 8015bec:	4606      	mov	r6, r0
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	d1c6      	bne.n	8015b80 <rcl_init+0x130>
 8015bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8015bf6:	695f      	ldr	r7, [r3, #20]
 8015bf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015bfa:	aa18      	add	r2, sp, #96	; 0x60
 8015bfc:	a917      	add	r1, sp, #92	; 0x5c
 8015bfe:	f000 ff95 	bl	8016b2c <rcl_validate_enclave_name>
 8015c02:	4606      	mov	r6, r0
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d1bb      	bne.n	8015b80 <rcl_init+0x130>
 8015c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c0a:	bb23      	cbnz	r3, 8015c56 <rcl_init+0x206>
 8015c0c:	f8d9 1000 	ldr.w	r1, [r9]
 8015c10:	694b      	ldr	r3, [r1, #20]
 8015c12:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c14:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015c18:	f000 fad6 	bl	80161c8 <rcl_get_security_options_from_environment>
 8015c1c:	4606      	mov	r6, r0
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	d1ae      	bne.n	8015b80 <rcl_init+0x130>
 8015c22:	f8d9 1000 	ldr.w	r1, [r9]
 8015c26:	6948      	ldr	r0, [r1, #20]
 8015c28:	3128      	adds	r1, #40	; 0x28
 8015c2a:	3018      	adds	r0, #24
 8015c2c:	f7f9 ffc8 	bl	800fbc0 <rmw_init>
 8015c30:	4606      	mov	r6, r0
 8015c32:	2800      	cmp	r0, #0
 8015c34:	d0af      	beq.n	8015b96 <rcl_init+0x146>
 8015c36:	f7ff fd03 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 8015c3a:	4606      	mov	r6, r0
 8015c3c:	e7a0      	b.n	8015b80 <rcl_init+0x130>
 8015c3e:	9600      	str	r6, [sp, #0]
 8015c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c48:	480b      	ldr	r0, [pc, #44]	; (8015c78 <rcl_init+0x228>)
 8015c4a:	f001 fe99 	bl	8017980 <__atomic_store_8>
 8015c4e:	2601      	movs	r6, #1
 8015c50:	e796      	b.n	8015b80 <rcl_init+0x130>
 8015c52:	260a      	movs	r6, #10
 8015c54:	e79f      	b.n	8015b96 <rcl_init+0x146>
 8015c56:	2601      	movs	r6, #1
 8015c58:	e792      	b.n	8015b80 <rcl_init+0x130>
 8015c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015c5e:	f003 fc39 	bl	80194d4 <rcl_get_default_domain_id>
 8015c62:	4606      	mov	r6, r0
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d18b      	bne.n	8015b80 <rcl_init+0x130>
 8015c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	f8d9 3000 	ldr.w	r3, [r9]
 8015c70:	bf08      	it	eq
 8015c72:	6278      	streq	r0, [r7, #36]	; 0x24
 8015c74:	695f      	ldr	r7, [r3, #20]
 8015c76:	e7b2      	b.n	8015bde <rcl_init+0x18e>
 8015c78:	20000288 	.word	0x20000288

08015c7c <rcl_get_localhost_only>:
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	b510      	push	{r4, lr}
 8015c80:	b082      	sub	sp, #8
 8015c82:	9301      	str	r3, [sp, #4]
 8015c84:	b1b8      	cbz	r0, 8015cb6 <rcl_get_localhost_only+0x3a>
 8015c86:	4604      	mov	r4, r0
 8015c88:	a901      	add	r1, sp, #4
 8015c8a:	480c      	ldr	r0, [pc, #48]	; (8015cbc <rcl_get_localhost_only+0x40>)
 8015c8c:	f001 ff68 	bl	8017b60 <rcutils_get_env>
 8015c90:	b110      	cbz	r0, 8015c98 <rcl_get_localhost_only+0x1c>
 8015c92:	2001      	movs	r0, #1
 8015c94:	b002      	add	sp, #8
 8015c96:	bd10      	pop	{r4, pc}
 8015c98:	9b01      	ldr	r3, [sp, #4]
 8015c9a:	b113      	cbz	r3, 8015ca2 <rcl_get_localhost_only+0x26>
 8015c9c:	781a      	ldrb	r2, [r3, #0]
 8015c9e:	2a31      	cmp	r2, #49	; 0x31
 8015ca0:	d004      	beq.n	8015cac <rcl_get_localhost_only+0x30>
 8015ca2:	2302      	movs	r3, #2
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	7023      	strb	r3, [r4, #0]
 8015ca8:	b002      	add	sp, #8
 8015caa:	bd10      	pop	{r4, pc}
 8015cac:	785b      	ldrb	r3, [r3, #1]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d1f7      	bne.n	8015ca2 <rcl_get_localhost_only+0x26>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	e7f6      	b.n	8015ca4 <rcl_get_localhost_only+0x28>
 8015cb6:	200b      	movs	r0, #11
 8015cb8:	b002      	add	sp, #8
 8015cba:	bd10      	pop	{r4, pc}
 8015cbc:	0801c7b8 	.word	0x0801c7b8

08015cc0 <rcl_get_zero_initialized_node>:
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	4a03      	ldr	r2, [pc, #12]	; (8015cd0 <rcl_get_zero_initialized_node+0x10>)
 8015cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015cc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	4770      	bx	lr
 8015cd0:	0801c7d4 	.word	0x0801c7d4

08015cd4 <rcl_node_init>:
 8015cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd8:	2700      	movs	r7, #0
 8015cda:	b09b      	sub	sp, #108	; 0x6c
 8015cdc:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	a815      	add	r0, sp, #84	; 0x54
 8015ce4:	460e      	mov	r6, r1
 8015ce6:	4615      	mov	r5, r2
 8015ce8:	4698      	mov	r8, r3
 8015cea:	9713      	str	r7, [sp, #76]	; 0x4c
 8015cec:	f003 fd00 	bl	80196f0 <rcl_guard_condition_get_default_options>
 8015cf0:	f1b9 0f00 	cmp.w	r9, #0
 8015cf4:	f000 80fa 	beq.w	8015eec <rcl_node_init+0x218>
 8015cf8:	f109 0a04 	add.w	sl, r9, #4
 8015cfc:	4650      	mov	r0, sl
 8015cfe:	f7f9 fb37 	bl	800f370 <rcutils_allocator_is_valid>
 8015d02:	2800      	cmp	r0, #0
 8015d04:	f000 80f2 	beq.w	8015eec <rcl_node_init+0x218>
 8015d08:	2e00      	cmp	r6, #0
 8015d0a:	f000 80ef 	beq.w	8015eec <rcl_node_init+0x218>
 8015d0e:	2d00      	cmp	r5, #0
 8015d10:	f000 80ec 	beq.w	8015eec <rcl_node_init+0x218>
 8015d14:	2c00      	cmp	r4, #0
 8015d16:	f000 80e9 	beq.w	8015eec <rcl_node_init+0x218>
 8015d1a:	6867      	ldr	r7, [r4, #4]
 8015d1c:	2f00      	cmp	r7, #0
 8015d1e:	f040 810f 	bne.w	8015f40 <rcl_node_init+0x26c>
 8015d22:	f1b8 0f00 	cmp.w	r8, #0
 8015d26:	f000 80e1 	beq.w	8015eec <rcl_node_init+0x218>
 8015d2a:	4640      	mov	r0, r8
 8015d2c:	f7ff fcac 	bl	8015688 <rcl_context_is_valid>
 8015d30:	4683      	mov	fp, r0
 8015d32:	2800      	cmp	r0, #0
 8015d34:	f000 80df 	beq.w	8015ef6 <rcl_node_init+0x222>
 8015d38:	463a      	mov	r2, r7
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	a914      	add	r1, sp, #80	; 0x50
 8015d3e:	9714      	str	r7, [sp, #80]	; 0x50
 8015d40:	f002 f8a0 	bl	8017e84 <rmw_validate_node_name>
 8015d44:	4607      	mov	r7, r0
 8015d46:	2800      	cmp	r0, #0
 8015d48:	f040 80d1 	bne.w	8015eee <rcl_node_init+0x21a>
 8015d4c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	f040 8100 	bne.w	8015f54 <rcl_node_init+0x280>
 8015d54:	4628      	mov	r0, r5
 8015d56:	f7ea fa75 	bl	8000244 <strlen>
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	f040 80cd 	bne.w	8015efa <rcl_node_init+0x226>
 8015d60:	4d8d      	ldr	r5, [pc, #564]	; (8015f98 <rcl_node_init+0x2c4>)
 8015d62:	2200      	movs	r2, #0
 8015d64:	4628      	mov	r0, r5
 8015d66:	a914      	add	r1, sp, #80	; 0x50
 8015d68:	f002 f86e 	bl	8017e48 <rmw_validate_namespace>
 8015d6c:	4607      	mov	r7, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	f040 80bd 	bne.w	8015eee <rcl_node_init+0x21a>
 8015d74:	4683      	mov	fp, r0
 8015d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f040 80ef 	bne.w	8015f5c <rcl_node_init+0x288>
 8015d7e:	2030      	movs	r0, #48	; 0x30
 8015d80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8015d84:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015d88:	9307      	str	r3, [sp, #28]
 8015d8a:	4790      	blx	r2
 8015d8c:	4607      	mov	r7, r0
 8015d8e:	6060      	str	r0, [r4, #4]
 8015d90:	2800      	cmp	r0, #0
 8015d92:	f000 80da 	beq.w	8015f4a <rcl_node_init+0x276>
 8015d96:	9b07      	ldr	r3, [sp, #28]
 8015d98:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8015d9c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015da0:	a80a      	add	r0, sp, #40	; 0x28
 8015da2:	f000 f929 	bl	8015ff8 <rcl_node_get_default_options>
 8015da6:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8015daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015db0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015db4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015db8:	4648      	mov	r0, r9
 8015dba:	6861      	ldr	r1, [r4, #4]
 8015dbc:	f8c4 8000 	str.w	r8, [r4]
 8015dc0:	f000 f936 	bl	8016030 <rcl_node_options_copy>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d168      	bne.n	8015e9a <rcl_node_init+0x1c6>
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f7ea fa3b 	bl	8000244 <strlen>
 8015dce:	4428      	add	r0, r5
 8015dd0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8015dd6:	f000 80c9 	beq.w	8015f6c <rcl_node_init+0x298>
 8015dda:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8015dde:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8015de2:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8015fa0 <rcl_node_init+0x2cc>
 8015de6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015dea:	9701      	str	r7, [sp, #4]
 8015dec:	f8da 7010 	ldr.w	r7, [sl, #16]
 8015df0:	f8cd c008 	str.w	ip, [sp, #8]
 8015df4:	9700      	str	r7, [sp, #0]
 8015df6:	6867      	ldr	r7, [r4, #4]
 8015df8:	f001 fe78 	bl	8017aec <rcutils_format_string_limit>
 8015dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015dfe:	6867      	ldr	r7, [r4, #4]
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	1c59      	adds	r1, r3, #1
 8015e04:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e06:	f000 80ba 	beq.w	8015f7e <rcl_node_init+0x2aa>
 8015e0a:	f8d8 2000 	ldr.w	r2, [r8]
 8015e0e:	61fb      	str	r3, [r7, #28]
 8015e10:	6952      	ldr	r2, [r2, #20]
 8015e12:	6821      	ldr	r1, [r4, #0]
 8015e14:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8015e18:	6808      	ldr	r0, [r1, #0]
 8015e1a:	f1a2 0201 	sub.w	r2, r2, #1
 8015e1e:	fab2 f282 	clz	r2, r2
 8015e22:	0952      	lsrs	r2, r2, #5
 8015e24:	9200      	str	r2, [sp, #0]
 8015e26:	4631      	mov	r1, r6
 8015e28:	462a      	mov	r2, r5
 8015e2a:	3028      	adds	r0, #40	; 0x28
 8015e2c:	f7fa f89a 	bl	800ff64 <rmw_create_node>
 8015e30:	6863      	ldr	r3, [r4, #4]
 8015e32:	6238      	str	r0, [r7, #32]
 8015e34:	6a18      	ldr	r0, [r3, #32]
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d031      	beq.n	8015e9e <rcl_node_init+0x1ca>
 8015e3a:	f7fa f925 	bl	8010088 <rmw_node_get_graph_guard_condition>
 8015e3e:	4607      	mov	r7, r0
 8015e40:	b358      	cbz	r0, 8015e9a <rcl_node_init+0x1c6>
 8015e42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015e46:	2008      	movs	r0, #8
 8015e48:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015e4c:	6866      	ldr	r6, [r4, #4]
 8015e4e:	4798      	blx	r3
 8015e50:	6863      	ldr	r3, [r4, #4]
 8015e52:	6270      	str	r0, [r6, #36]	; 0x24
 8015e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e56:	9207      	str	r2, [sp, #28]
 8015e58:	b30a      	cbz	r2, 8015e9e <rcl_node_init+0x1ca>
 8015e5a:	ae08      	add	r6, sp, #32
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	f003 fb6d 	bl	801953c <rcl_get_zero_initialized_guard_condition>
 8015e62:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015e66:	9a07      	ldr	r2, [sp, #28]
 8015e68:	ae15      	add	r6, sp, #84	; 0x54
 8015e6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8015e6e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015e72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015e74:	6862      	ldr	r2, [r4, #4]
 8015e76:	f8da 3000 	ldr.w	r3, [sl]
 8015e7a:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 8015e7e:	6033      	str	r3, [r6, #0]
 8015e80:	ab1a      	add	r3, sp, #104	; 0x68
 8015e82:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015e86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015e8a:	4639      	mov	r1, r7
 8015e8c:	4660      	mov	r0, ip
 8015e8e:	4642      	mov	r2, r8
 8015e90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e92:	f003 fbb3 	bl	80195fc <rcl_guard_condition_init_from_rmw>
 8015e96:	4607      	mov	r7, r0
 8015e98:	b320      	cbz	r0, 8015ee4 <rcl_node_init+0x210>
 8015e9a:	6863      	ldr	r3, [r4, #4]
 8015e9c:	b1f3      	cbz	r3, 8015edc <rcl_node_init+0x208>
 8015e9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015ea0:	b128      	cbz	r0, 8015eae <rcl_node_init+0x1da>
 8015ea2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015ea6:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015eaa:	4798      	blx	r3
 8015eac:	6863      	ldr	r3, [r4, #4]
 8015eae:	6a18      	ldr	r0, [r3, #32]
 8015eb0:	b110      	cbz	r0, 8015eb8 <rcl_node_init+0x1e4>
 8015eb2:	f7fa f86f 	bl	800ff94 <rmw_destroy_node>
 8015eb6:	6863      	ldr	r3, [r4, #4]
 8015eb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015eba:	b148      	cbz	r0, 8015ed0 <rcl_node_init+0x1fc>
 8015ebc:	f003 fbf6 	bl	80196ac <rcl_guard_condition_fini>
 8015ec0:	6862      	ldr	r2, [r4, #4]
 8015ec2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015ec6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8015ec8:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015ecc:	4798      	blx	r3
 8015ece:	6863      	ldr	r3, [r4, #4]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015ed6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015eda:	4798      	blx	r3
 8015edc:	2300      	movs	r3, #0
 8015ede:	2701      	movs	r7, #1
 8015ee0:	e9c4 3300 	strd	r3, r3, [r4]
 8015ee4:	f1bb 0f00 	cmp.w	fp, #0
 8015ee8:	d123      	bne.n	8015f32 <rcl_node_init+0x25e>
 8015eea:	e000      	b.n	8015eee <rcl_node_init+0x21a>
 8015eec:	270b      	movs	r7, #11
 8015eee:	4638      	mov	r0, r7
 8015ef0:	b01b      	add	sp, #108	; 0x6c
 8015ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef6:	2765      	movs	r7, #101	; 0x65
 8015ef8:	e7f9      	b.n	8015eee <rcl_node_init+0x21a>
 8015efa:	782b      	ldrb	r3, [r5, #0]
 8015efc:	2b2f      	cmp	r3, #47	; 0x2f
 8015efe:	f43f af30 	beq.w	8015d62 <rcl_node_init+0x8e>
 8015f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015f06:	4a25      	ldr	r2, [pc, #148]	; (8015f9c <rcl_node_init+0x2c8>)
 8015f08:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015f0c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015f10:	9503      	str	r5, [sp, #12]
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8015f18:	f001 fde8 	bl	8017aec <rcutils_format_string_limit>
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	b360      	cbz	r0, 8015f7a <rcl_node_init+0x2a6>
 8015f20:	2200      	movs	r2, #0
 8015f22:	a914      	add	r1, sp, #80	; 0x50
 8015f24:	9214      	str	r2, [sp, #80]	; 0x50
 8015f26:	f001 ff8f 	bl	8017e48 <rmw_validate_namespace>
 8015f2a:	4607      	mov	r7, r0
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	f43f af22 	beq.w	8015d76 <rcl_node_init+0xa2>
 8015f32:	4628      	mov	r0, r5
 8015f34:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015f38:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015f3c:	4798      	blx	r3
 8015f3e:	e7d6      	b.n	8015eee <rcl_node_init+0x21a>
 8015f40:	2764      	movs	r7, #100	; 0x64
 8015f42:	4638      	mov	r0, r7
 8015f44:	b01b      	add	sp, #108	; 0x6c
 8015f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4a:	270a      	movs	r7, #10
 8015f4c:	f1bb 0f00 	cmp.w	fp, #0
 8015f50:	d1ef      	bne.n	8015f32 <rcl_node_init+0x25e>
 8015f52:	e7cc      	b.n	8015eee <rcl_node_init+0x21a>
 8015f54:	f001 ffe8 	bl	8017f28 <rmw_node_name_validation_result_string>
 8015f58:	27c9      	movs	r7, #201	; 0xc9
 8015f5a:	e7c8      	b.n	8015eee <rcl_node_init+0x21a>
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f001 ff85 	bl	8017e6c <rmw_namespace_validation_result_string>
 8015f62:	27ca      	movs	r7, #202	; 0xca
 8015f64:	f1bb 0f00 	cmp.w	fp, #0
 8015f68:	d1e3      	bne.n	8015f32 <rcl_node_init+0x25e>
 8015f6a:	e7c0      	b.n	8015eee <rcl_node_init+0x21a>
 8015f6c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8015f70:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8015f74:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8015fa4 <rcl_node_init+0x2d0>
 8015f78:	e735      	b.n	8015de6 <rcl_node_init+0x112>
 8015f7a:	270a      	movs	r7, #10
 8015f7c:	e7b7      	b.n	8015eee <rcl_node_init+0x21a>
 8015f7e:	a813      	add	r0, sp, #76	; 0x4c
 8015f80:	f003 faa8 	bl	80194d4 <rcl_get_default_domain_id>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	d188      	bne.n	8015e9a <rcl_node_init+0x1c6>
 8015f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f8a:	1c5a      	adds	r2, r3, #1
 8015f8c:	bf09      	itett	eq
 8015f8e:	4603      	moveq	r3, r0
 8015f90:	6867      	ldrne	r7, [r4, #4]
 8015f92:	6867      	ldreq	r7, [r4, #4]
 8015f94:	9013      	streq	r0, [sp, #76]	; 0x4c
 8015f96:	e738      	b.n	8015e0a <rcl_node_init+0x136>
 8015f98:	0801c480 	.word	0x0801c480
 8015f9c:	0801c7d0 	.word	0x0801c7d0
 8015fa0:	0801c484 	.word	0x0801c484
 8015fa4:	0801c4a8 	.word	0x0801c4a8

08015fa8 <rcl_node_is_valid>:
 8015fa8:	b130      	cbz	r0, 8015fb8 <rcl_node_is_valid+0x10>
 8015faa:	6843      	ldr	r3, [r0, #4]
 8015fac:	b123      	cbz	r3, 8015fb8 <rcl_node_is_valid+0x10>
 8015fae:	6a1b      	ldr	r3, [r3, #32]
 8015fb0:	b113      	cbz	r3, 8015fb8 <rcl_node_is_valid+0x10>
 8015fb2:	6800      	ldr	r0, [r0, #0]
 8015fb4:	f7ff bb68 	b.w	8015688 <rcl_context_is_valid>
 8015fb8:	2000      	movs	r0, #0
 8015fba:	4770      	bx	lr

08015fbc <rcl_node_get_name>:
 8015fbc:	b120      	cbz	r0, 8015fc8 <rcl_node_get_name+0xc>
 8015fbe:	6840      	ldr	r0, [r0, #4]
 8015fc0:	b110      	cbz	r0, 8015fc8 <rcl_node_get_name+0xc>
 8015fc2:	6a00      	ldr	r0, [r0, #32]
 8015fc4:	b100      	cbz	r0, 8015fc8 <rcl_node_get_name+0xc>
 8015fc6:	6880      	ldr	r0, [r0, #8]
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop

08015fcc <rcl_node_get_namespace>:
 8015fcc:	b120      	cbz	r0, 8015fd8 <rcl_node_get_namespace+0xc>
 8015fce:	6840      	ldr	r0, [r0, #4]
 8015fd0:	b110      	cbz	r0, 8015fd8 <rcl_node_get_namespace+0xc>
 8015fd2:	6a00      	ldr	r0, [r0, #32]
 8015fd4:	b100      	cbz	r0, 8015fd8 <rcl_node_get_namespace+0xc>
 8015fd6:	68c0      	ldr	r0, [r0, #12]
 8015fd8:	4770      	bx	lr
 8015fda:	bf00      	nop

08015fdc <rcl_node_get_options>:
 8015fdc:	b128      	cbz	r0, 8015fea <rcl_node_get_options+0xe>
 8015fde:	6840      	ldr	r0, [r0, #4]
 8015fe0:	b118      	cbz	r0, 8015fea <rcl_node_get_options+0xe>
 8015fe2:	6a03      	ldr	r3, [r0, #32]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	bf08      	it	eq
 8015fe8:	2000      	moveq	r0, #0
 8015fea:	4770      	bx	lr

08015fec <rcl_node_get_rmw_handle>:
 8015fec:	b110      	cbz	r0, 8015ff4 <rcl_node_get_rmw_handle+0x8>
 8015fee:	6840      	ldr	r0, [r0, #4]
 8015ff0:	b100      	cbz	r0, 8015ff4 <rcl_node_get_rmw_handle+0x8>
 8015ff2:	6a00      	ldr	r0, [r0, #32]
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop

08015ff8 <rcl_node_get_default_options>:
 8015ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffc:	4680      	mov	r8, r0
 8015ffe:	b086      	sub	sp, #24
 8016000:	466d      	mov	r5, sp
 8016002:	4c0a      	ldr	r4, [pc, #40]	; (801602c <rcl_node_get_default_options+0x34>)
 8016004:	4646      	mov	r6, r8
 8016006:	4627      	mov	r7, r4
 8016008:	4668      	mov	r0, sp
 801600a:	3404      	adds	r4, #4
 801600c:	f7f9 f9a2 	bl	800f354 <rcutils_get_default_allocator>
 8016010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016014:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016016:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016018:	682b      	ldr	r3, [r5, #0]
 801601a:	6023      	str	r3, [r4, #0]
 801601c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016020:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8016024:	4640      	mov	r0, r8
 8016026:	b006      	add	sp, #24
 8016028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801602c:	20000290 	.word	0x20000290

08016030 <rcl_node_options_copy>:
 8016030:	b1d8      	cbz	r0, 801606a <rcl_node_options_copy+0x3a>
 8016032:	b4f0      	push	{r4, r5, r6, r7}
 8016034:	460f      	mov	r7, r1
 8016036:	b1a9      	cbz	r1, 8016064 <rcl_node_options_copy+0x34>
 8016038:	4288      	cmp	r0, r1
 801603a:	4606      	mov	r6, r0
 801603c:	d012      	beq.n	8016064 <rcl_node_options_copy+0x34>
 801603e:	4605      	mov	r5, r0
 8016040:	460c      	mov	r4, r1
 8016042:	f855 3b04 	ldr.w	r3, [r5], #4
 8016046:	f890 c018 	ldrb.w	ip, [r0, #24]
 801604a:	f844 3b04 	str.w	r3, [r4], #4
 801604e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016052:	7e73      	ldrb	r3, [r6, #25]
 8016054:	682a      	ldr	r2, [r5, #0]
 8016056:	2000      	movs	r0, #0
 8016058:	6022      	str	r2, [r4, #0]
 801605a:	f887 c018 	strb.w	ip, [r7, #24]
 801605e:	767b      	strb	r3, [r7, #25]
 8016060:	bcf0      	pop	{r4, r5, r6, r7}
 8016062:	4770      	bx	lr
 8016064:	200b      	movs	r0, #11
 8016066:	bcf0      	pop	{r4, r5, r6, r7}
 8016068:	4770      	bx	lr
 801606a:	200b      	movs	r0, #11
 801606c:	4770      	bx	lr
 801606e:	bf00      	nop

08016070 <exact_match_lookup>:
 8016070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016072:	460d      	mov	r5, r1
 8016074:	4614      	mov	r4, r2
 8016076:	b085      	sub	sp, #20
 8016078:	f102 0608 	add.w	r6, r2, #8
 801607c:	4607      	mov	r7, r0
 801607e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016082:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016086:	4628      	mov	r0, r5
 8016088:	e894 000c 	ldmia.w	r4, {r2, r3}
 801608c:	4917      	ldr	r1, [pc, #92]	; (80160ec <exact_match_lookup+0x7c>)
 801608e:	f001 fd1f 	bl	8017ad0 <rcutils_join_path>
 8016092:	783b      	ldrb	r3, [r7, #0]
 8016094:	4605      	mov	r5, r0
 8016096:	2b2f      	cmp	r3, #47	; 0x2f
 8016098:	d021      	beq.n	80160de <exact_match_lookup+0x6e>
 801609a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801609e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80160a2:	1c78      	adds	r0, r7, #1
 80160a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80160a8:	f001 fd18 	bl	8017adc <rcutils_to_native_path>
 80160ac:	4603      	mov	r3, r0
 80160ae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80160b2:	461e      	mov	r6, r3
 80160b4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160b8:	4631      	mov	r1, r6
 80160ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80160be:	4628      	mov	r0, r5
 80160c0:	f001 fd06 	bl	8017ad0 <rcutils_join_path>
 80160c4:	4607      	mov	r7, r0
 80160c6:	6863      	ldr	r3, [r4, #4]
 80160c8:	4630      	mov	r0, r6
 80160ca:	6921      	ldr	r1, [r4, #16]
 80160cc:	4798      	blx	r3
 80160ce:	4628      	mov	r0, r5
 80160d0:	463d      	mov	r5, r7
 80160d2:	6863      	ldr	r3, [r4, #4]
 80160d4:	6921      	ldr	r1, [r4, #16]
 80160d6:	4798      	blx	r3
 80160d8:	4628      	mov	r0, r5
 80160da:	b005      	add	sp, #20
 80160dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160de:	787b      	ldrb	r3, [r7, #1]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d1da      	bne.n	801609a <exact_match_lookup+0x2a>
 80160e4:	4628      	mov	r0, r5
 80160e6:	b005      	add	sp, #20
 80160e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ea:	bf00      	nop
 80160ec:	0801c818 	.word	0x0801c818

080160f0 <rcl_get_secure_root>:
 80160f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160f4:	b085      	sub	sp, #20
 80160f6:	b168      	cbz	r0, 8016114 <rcl_get_secure_root+0x24>
 80160f8:	4607      	mov	r7, r0
 80160fa:	4608      	mov	r0, r1
 80160fc:	460c      	mov	r4, r1
 80160fe:	f7f9 f937 	bl	800f370 <rcutils_allocator_is_valid>
 8016102:	b138      	cbz	r0, 8016114 <rcl_get_secure_root+0x24>
 8016104:	2300      	movs	r3, #0
 8016106:	482e      	ldr	r0, [pc, #184]	; (80161c0 <rcl_get_secure_root+0xd0>)
 8016108:	a903      	add	r1, sp, #12
 801610a:	9303      	str	r3, [sp, #12]
 801610c:	f001 fd28 	bl	8017b60 <rcutils_get_env>
 8016110:	4605      	mov	r5, r0
 8016112:	b120      	cbz	r0, 801611e <rcl_get_secure_root+0x2e>
 8016114:	2500      	movs	r5, #0
 8016116:	4628      	mov	r0, r5
 8016118:	b005      	add	sp, #20
 801611a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801611e:	9e03      	ldr	r6, [sp, #12]
 8016120:	7833      	ldrb	r3, [r6, #0]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d0f6      	beq.n	8016114 <rcl_get_secure_root+0x24>
 8016126:	f104 090c 	add.w	r9, r4, #12
 801612a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801612e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016132:	4630      	mov	r0, r6
 8016134:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016138:	f001 fdf2 	bl	8017d20 <rcutils_strdup>
 801613c:	4680      	mov	r8, r0
 801613e:	2800      	cmp	r0, #0
 8016140:	d0e8      	beq.n	8016114 <rcl_get_secure_root+0x24>
 8016142:	4820      	ldr	r0, [pc, #128]	; (80161c4 <rcl_get_secure_root+0xd4>)
 8016144:	a903      	add	r1, sp, #12
 8016146:	9503      	str	r5, [sp, #12]
 8016148:	f001 fd0a 	bl	8017b60 <rcutils_get_env>
 801614c:	b160      	cbz	r0, 8016168 <rcl_get_secure_root+0x78>
 801614e:	2600      	movs	r6, #0
 8016150:	4630      	mov	r0, r6
 8016152:	6863      	ldr	r3, [r4, #4]
 8016154:	6921      	ldr	r1, [r4, #16]
 8016156:	4798      	blx	r3
 8016158:	4640      	mov	r0, r8
 801615a:	6863      	ldr	r3, [r4, #4]
 801615c:	6921      	ldr	r1, [r4, #16]
 801615e:	4798      	blx	r3
 8016160:	4628      	mov	r0, r5
 8016162:	b005      	add	sp, #20
 8016164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016168:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801616c:	f89c 6000 	ldrb.w	r6, [ip]
 8016170:	b1f6      	cbz	r6, 80161b0 <rcl_get_secure_root+0xc0>
 8016172:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016176:	e88d 0003 	stmia.w	sp, {r0, r1}
 801617a:	4660      	mov	r0, ip
 801617c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016180:	f001 fdce 	bl	8017d20 <rcutils_strdup>
 8016184:	4606      	mov	r6, r0
 8016186:	2800      	cmp	r0, #0
 8016188:	d0e1      	beq.n	801614e <rcl_get_secure_root+0x5e>
 801618a:	4622      	mov	r2, r4
 801618c:	4641      	mov	r1, r8
 801618e:	f7ff ff6f 	bl	8016070 <exact_match_lookup>
 8016192:	4605      	mov	r5, r0
 8016194:	2d00      	cmp	r5, #0
 8016196:	d0db      	beq.n	8016150 <rcl_get_secure_root+0x60>
 8016198:	4628      	mov	r0, r5
 801619a:	f001 fc97 	bl	8017acc <rcutils_is_directory>
 801619e:	4603      	mov	r3, r0
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d1d5      	bne.n	8016150 <rcl_get_secure_root+0x60>
 80161a4:	4628      	mov	r0, r5
 80161a6:	6862      	ldr	r2, [r4, #4]
 80161a8:	6921      	ldr	r1, [r4, #16]
 80161aa:	461d      	mov	r5, r3
 80161ac:	4790      	blx	r2
 80161ae:	e7cf      	b.n	8016150 <rcl_get_secure_root+0x60>
 80161b0:	4638      	mov	r0, r7
 80161b2:	4622      	mov	r2, r4
 80161b4:	4641      	mov	r1, r8
 80161b6:	f7ff ff5b 	bl	8016070 <exact_match_lookup>
 80161ba:	4605      	mov	r5, r0
 80161bc:	e7ea      	b.n	8016194 <rcl_get_secure_root+0xa4>
 80161be:	bf00      	nop
 80161c0:	0801c824 	.word	0x0801c824
 80161c4:	0801c83c 	.word	0x0801c83c

080161c8 <rcl_get_security_options_from_environment>:
 80161c8:	2300      	movs	r3, #0
 80161ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	4606      	mov	r6, r0
 80161d2:	460f      	mov	r7, r1
 80161d4:	4820      	ldr	r0, [pc, #128]	; (8016258 <rcl_get_security_options_from_environment+0x90>)
 80161d6:	a901      	add	r1, sp, #4
 80161d8:	4690      	mov	r8, r2
 80161da:	9301      	str	r3, [sp, #4]
 80161dc:	f001 fcc0 	bl	8017b60 <rcutils_get_env>
 80161e0:	b120      	cbz	r0, 80161ec <rcl_get_security_options_from_environment+0x24>
 80161e2:	2501      	movs	r5, #1
 80161e4:	4628      	mov	r0, r5
 80161e6:	b002      	add	sp, #8
 80161e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ec:	4604      	mov	r4, r0
 80161ee:	491b      	ldr	r1, [pc, #108]	; (801625c <rcl_get_security_options_from_environment+0x94>)
 80161f0:	9801      	ldr	r0, [sp, #4]
 80161f2:	f7ea f81d 	bl	8000230 <strcmp>
 80161f6:	4605      	mov	r5, r0
 80161f8:	b9e8      	cbnz	r0, 8016236 <rcl_get_security_options_from_environment+0x6e>
 80161fa:	9001      	str	r0, [sp, #4]
 80161fc:	f1b8 0f00 	cmp.w	r8, #0
 8016200:	d020      	beq.n	8016244 <rcl_get_security_options_from_environment+0x7c>
 8016202:	4817      	ldr	r0, [pc, #92]	; (8016260 <rcl_get_security_options_from_environment+0x98>)
 8016204:	a901      	add	r1, sp, #4
 8016206:	f001 fcab 	bl	8017b60 <rcutils_get_env>
 801620a:	2800      	cmp	r0, #0
 801620c:	d1e9      	bne.n	80161e2 <rcl_get_security_options_from_environment+0x1a>
 801620e:	4915      	ldr	r1, [pc, #84]	; (8016264 <rcl_get_security_options_from_environment+0x9c>)
 8016210:	9801      	ldr	r0, [sp, #4]
 8016212:	f7ea f80d 	bl	8000230 <strcmp>
 8016216:	fab0 f080 	clz	r0, r0
 801621a:	0940      	lsrs	r0, r0, #5
 801621c:	f888 0000 	strb.w	r0, [r8]
 8016220:	4639      	mov	r1, r7
 8016222:	4630      	mov	r0, r6
 8016224:	f7ff ff64 	bl	80160f0 <rcl_get_secure_root>
 8016228:	b170      	cbz	r0, 8016248 <rcl_get_security_options_from_environment+0x80>
 801622a:	f8c8 0004 	str.w	r0, [r8, #4]
 801622e:	4628      	mov	r0, r5
 8016230:	b002      	add	sp, #8
 8016232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016236:	4625      	mov	r5, r4
 8016238:	4628      	mov	r0, r5
 801623a:	f888 4000 	strb.w	r4, [r8]
 801623e:	b002      	add	sp, #8
 8016240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016244:	250b      	movs	r5, #11
 8016246:	e7cd      	b.n	80161e4 <rcl_get_security_options_from_environment+0x1c>
 8016248:	f898 5000 	ldrb.w	r5, [r8]
 801624c:	f1a5 0501 	sub.w	r5, r5, #1
 8016250:	fab5 f585 	clz	r5, r5
 8016254:	096d      	lsrs	r5, r5, #5
 8016256:	e7c5      	b.n	80161e4 <rcl_get_security_options_from_environment+0x1c>
 8016258:	0801c7dc 	.word	0x0801c7dc
 801625c:	0801c7f0 	.word	0x0801c7f0
 8016260:	0801c7f8 	.word	0x0801c7f8
 8016264:	0801c810 	.word	0x0801c810

08016268 <rcl_service_get_rmw_handle>:
 8016268:	b110      	cbz	r0, 8016270 <rcl_service_get_rmw_handle+0x8>
 801626a:	6800      	ldr	r0, [r0, #0]
 801626c:	b100      	cbz	r0, 8016270 <rcl_service_get_rmw_handle+0x8>
 801626e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop

08016274 <rcl_take_request>:
 8016274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016276:	460e      	mov	r6, r1
 8016278:	4607      	mov	r7, r0
 801627a:	b08d      	sub	sp, #52	; 0x34
 801627c:	ad06      	add	r5, sp, #24
 801627e:	460c      	mov	r4, r1
 8016280:	4694      	mov	ip, r2
 8016282:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016286:	e896 0003 	ldmia.w	r6, {r0, r1}
 801628a:	e885 0003 	stmia.w	r5, {r0, r1}
 801628e:	b1e7      	cbz	r7, 80162ca <rcl_take_request+0x56>
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	b1d3      	cbz	r3, 80162ca <rcl_take_request+0x56>
 8016294:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016296:	b1c0      	cbz	r0, 80162ca <rcl_take_request+0x56>
 8016298:	4662      	mov	r2, ip
 801629a:	b30a      	cbz	r2, 80162e0 <rcl_take_request+0x6c>
 801629c:	2500      	movs	r5, #0
 801629e:	f10d 0307 	add.w	r3, sp, #7
 80162a2:	a902      	add	r1, sp, #8
 80162a4:	f88d 5007 	strb.w	r5, [sp, #7]
 80162a8:	f002 f810 	bl	80182cc <rmw_take_request>
 80162ac:	4606      	mov	r6, r0
 80162ae:	b178      	cbz	r0, 80162d0 <rcl_take_request+0x5c>
 80162b0:	280a      	cmp	r0, #10
 80162b2:	bf18      	it	ne
 80162b4:	2601      	movne	r6, #1
 80162b6:	ad06      	add	r5, sp, #24
 80162b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80162bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80162c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80162c4:	4630      	mov	r0, r6
 80162c6:	b00d      	add	sp, #52	; 0x34
 80162c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ca:	f44f 7616 	mov.w	r6, #600	; 0x258
 80162ce:	e7f2      	b.n	80162b6 <rcl_take_request+0x42>
 80162d0:	f240 2359 	movw	r3, #601	; 0x259
 80162d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80162d8:	2a00      	cmp	r2, #0
 80162da:	bf08      	it	eq
 80162dc:	461e      	moveq	r6, r3
 80162de:	e7ea      	b.n	80162b6 <rcl_take_request+0x42>
 80162e0:	260b      	movs	r6, #11
 80162e2:	e7e8      	b.n	80162b6 <rcl_take_request+0x42>

080162e4 <rcl_send_response>:
 80162e4:	b160      	cbz	r0, 8016300 <rcl_send_response+0x1c>
 80162e6:	6800      	ldr	r0, [r0, #0]
 80162e8:	b150      	cbz	r0, 8016300 <rcl_send_response+0x1c>
 80162ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80162ec:	b140      	cbz	r0, 8016300 <rcl_send_response+0x1c>
 80162ee:	b151      	cbz	r1, 8016306 <rcl_send_response+0x22>
 80162f0:	b510      	push	{r4, lr}
 80162f2:	b152      	cbz	r2, 801630a <rcl_send_response+0x26>
 80162f4:	f002 f848 	bl	8018388 <rmw_send_response>
 80162f8:	3800      	subs	r0, #0
 80162fa:	bf18      	it	ne
 80162fc:	2001      	movne	r0, #1
 80162fe:	bd10      	pop	{r4, pc}
 8016300:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016304:	4770      	bx	lr
 8016306:	200b      	movs	r0, #11
 8016308:	4770      	bx	lr
 801630a:	200b      	movs	r0, #11
 801630c:	bd10      	pop	{r4, pc}
 801630e:	bf00      	nop

08016310 <rcl_get_system_time>:
 8016310:	4608      	mov	r0, r1
 8016312:	f7f9 ba5f 	b.w	800f7d4 <rcutils_system_time_now>
 8016316:	bf00      	nop

08016318 <rcl_get_steady_time>:
 8016318:	4608      	mov	r0, r1
 801631a:	f7f9 ba83 	b.w	800f824 <rcutils_steady_time_now>
 801631e:	bf00      	nop

08016320 <rcl_get_ros_time>:
 8016320:	7a03      	ldrb	r3, [r0, #8]
 8016322:	b510      	push	{r4, lr}
 8016324:	460c      	mov	r4, r1
 8016326:	b143      	cbz	r3, 801633a <rcl_get_ros_time+0x1a>
 8016328:	2105      	movs	r1, #5
 801632a:	f001 faf5 	bl	8017918 <__atomic_load_8>
 801632e:	4602      	mov	r2, r0
 8016330:	460b      	mov	r3, r1
 8016332:	2000      	movs	r0, #0
 8016334:	e9c4 2300 	strd	r2, r3, [r4]
 8016338:	bd10      	pop	{r4, pc}
 801633a:	4608      	mov	r0, r1
 801633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016340:	f7f9 ba48 	b.w	800f7d4 <rcutils_system_time_now>

08016344 <rcl_clock_init>:
 8016344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016348:	4605      	mov	r5, r0
 801634a:	4610      	mov	r0, r2
 801634c:	4614      	mov	r4, r2
 801634e:	460e      	mov	r6, r1
 8016350:	f7f9 f80e 	bl	800f370 <rcutils_allocator_is_valid>
 8016354:	b128      	cbz	r0, 8016362 <rcl_clock_init+0x1e>
 8016356:	2d03      	cmp	r5, #3
 8016358:	d803      	bhi.n	8016362 <rcl_clock_init+0x1e>
 801635a:	e8df f005 	tbb	[pc, r5]
 801635e:	2e1d      	.short	0x2e1d
 8016360:	0555      	.short	0x0555
 8016362:	200b      	movs	r0, #11
 8016364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016368:	2e00      	cmp	r6, #0
 801636a:	d0fa      	beq.n	8016362 <rcl_clock_init+0x1e>
 801636c:	2c00      	cmp	r4, #0
 801636e:	d0f8      	beq.n	8016362 <rcl_clock_init+0x1e>
 8016370:	2700      	movs	r7, #0
 8016372:	f04f 0c03 	mov.w	ip, #3
 8016376:	7037      	strb	r7, [r6, #0]
 8016378:	f106 0514 	add.w	r5, r6, #20
 801637c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801637e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016382:	6137      	str	r7, [r6, #16]
 8016384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016386:	4b2a      	ldr	r3, [pc, #168]	; (8016430 <rcl_clock_init+0xec>)
 8016388:	6822      	ldr	r2, [r4, #0]
 801638a:	4638      	mov	r0, r7
 801638c:	602a      	str	r2, [r5, #0]
 801638e:	f886 c000 	strb.w	ip, [r6]
 8016392:	60f3      	str	r3, [r6, #12]
 8016394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016398:	2e00      	cmp	r6, #0
 801639a:	d0e2      	beq.n	8016362 <rcl_clock_init+0x1e>
 801639c:	2700      	movs	r7, #0
 801639e:	f106 0514 	add.w	r5, r6, #20
 80163a2:	7037      	strb	r7, [r6, #0]
 80163a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163a6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80163aa:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80163ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	4638      	mov	r0, r7
 80163b4:	602b      	str	r3, [r5, #0]
 80163b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163ba:	2e00      	cmp	r6, #0
 80163bc:	d0d1      	beq.n	8016362 <rcl_clock_init+0x1e>
 80163be:	2c00      	cmp	r4, #0
 80163c0:	d0cf      	beq.n	8016362 <rcl_clock_init+0x1e>
 80163c2:	f04f 0800 	mov.w	r8, #0
 80163c6:	4627      	mov	r7, r4
 80163c8:	f886 8000 	strb.w	r8, [r6]
 80163cc:	f106 0514 	add.w	r5, r6, #20
 80163d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80163d2:	e9c6 8801 	strd	r8, r8, [r6, #4]
 80163d6:	e9c6 8803 	strd	r8, r8, [r6, #12]
 80163da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80163dc:	683a      	ldr	r2, [r7, #0]
 80163de:	6823      	ldr	r3, [r4, #0]
 80163e0:	602a      	str	r2, [r5, #0]
 80163e2:	2010      	movs	r0, #16
 80163e4:	6921      	ldr	r1, [r4, #16]
 80163e6:	4798      	blx	r3
 80163e8:	4603      	mov	r3, r0
 80163ea:	6130      	str	r0, [r6, #16]
 80163ec:	b1e8      	cbz	r0, 801642a <rcl_clock_init+0xe6>
 80163ee:	2400      	movs	r4, #0
 80163f0:	2500      	movs	r5, #0
 80163f2:	2201      	movs	r2, #1
 80163f4:	f880 8008 	strb.w	r8, [r0, #8]
 80163f8:	e9c3 4500 	strd	r4, r5, [r3]
 80163fc:	4b0d      	ldr	r3, [pc, #52]	; (8016434 <rcl_clock_init+0xf0>)
 80163fe:	7032      	strb	r2, [r6, #0]
 8016400:	4640      	mov	r0, r8
 8016402:	60f3      	str	r3, [r6, #12]
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	2e00      	cmp	r6, #0
 801640a:	d0aa      	beq.n	8016362 <rcl_clock_init+0x1e>
 801640c:	2c00      	cmp	r4, #0
 801640e:	d0a8      	beq.n	8016362 <rcl_clock_init+0x1e>
 8016410:	2700      	movs	r7, #0
 8016412:	f106 0514 	add.w	r5, r6, #20
 8016416:	7037      	strb	r7, [r6, #0]
 8016418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801641a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801641e:	6137      	str	r7, [r6, #16]
 8016420:	f04f 0c02 	mov.w	ip, #2
 8016424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016426:	4b04      	ldr	r3, [pc, #16]	; (8016438 <rcl_clock_init+0xf4>)
 8016428:	e7ae      	b.n	8016388 <rcl_clock_init+0x44>
 801642a:	200a      	movs	r0, #10
 801642c:	e79a      	b.n	8016364 <rcl_clock_init+0x20>
 801642e:	bf00      	nop
 8016430:	08016319 	.word	0x08016319
 8016434:	08016321 	.word	0x08016321
 8016438:	08016311 	.word	0x08016311

0801643c <rcl_clock_get_now>:
 801643c:	b140      	cbz	r0, 8016450 <rcl_clock_get_now+0x14>
 801643e:	b139      	cbz	r1, 8016450 <rcl_clock_get_now+0x14>
 8016440:	7803      	ldrb	r3, [r0, #0]
 8016442:	b11b      	cbz	r3, 801644c <rcl_clock_get_now+0x10>
 8016444:	68c3      	ldr	r3, [r0, #12]
 8016446:	b10b      	cbz	r3, 801644c <rcl_clock_get_now+0x10>
 8016448:	6900      	ldr	r0, [r0, #16]
 801644a:	4718      	bx	r3
 801644c:	2001      	movs	r0, #1
 801644e:	4770      	bx	lr
 8016450:	200b      	movs	r0, #11
 8016452:	4770      	bx	lr

08016454 <rcl_clock_add_jump_callback>:
 8016454:	b082      	sub	sp, #8
 8016456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801645a:	a906      	add	r1, sp, #24
 801645c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016460:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8016464:	b338      	cbz	r0, 80164b6 <rcl_clock_add_jump_callback+0x62>
 8016466:	4604      	mov	r4, r0
 8016468:	3014      	adds	r0, #20
 801646a:	f7f8 ff81 	bl	800f370 <rcutils_allocator_is_valid>
 801646e:	b310      	cbz	r0, 80164b6 <rcl_clock_add_jump_callback+0x62>
 8016470:	b30e      	cbz	r6, 80164b6 <rcl_clock_add_jump_callback+0x62>
 8016472:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016476:	2a00      	cmp	r2, #0
 8016478:	f173 0300 	sbcs.w	r3, r3, #0
 801647c:	db1b      	blt.n	80164b6 <rcl_clock_add_jump_callback+0x62>
 801647e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016482:	2a01      	cmp	r2, #1
 8016484:	f173 0300 	sbcs.w	r3, r3, #0
 8016488:	da15      	bge.n	80164b6 <rcl_clock_add_jump_callback+0x62>
 801648a:	68a7      	ldr	r7, [r4, #8]
 801648c:	2f00      	cmp	r7, #0
 801648e:	d03f      	beq.n	8016510 <rcl_clock_add_jump_callback+0xbc>
 8016490:	6860      	ldr	r0, [r4, #4]
 8016492:	2300      	movs	r3, #0
 8016494:	f100 0220 	add.w	r2, r0, #32
 8016498:	e003      	b.n	80164a2 <rcl_clock_add_jump_callback+0x4e>
 801649a:	42bb      	cmp	r3, r7
 801649c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80164a0:	d00e      	beq.n	80164c0 <rcl_clock_add_jump_callback+0x6c>
 80164a2:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80164a6:	3301      	adds	r3, #1
 80164a8:	42b1      	cmp	r1, r6
 80164aa:	d1f6      	bne.n	801649a <rcl_clock_add_jump_callback+0x46>
 80164ac:	6811      	ldr	r1, [r2, #0]
 80164ae:	42a9      	cmp	r1, r5
 80164b0:	d1f3      	bne.n	801649a <rcl_clock_add_jump_callback+0x46>
 80164b2:	2001      	movs	r0, #1
 80164b4:	e000      	b.n	80164b8 <rcl_clock_add_jump_callback+0x64>
 80164b6:	200b      	movs	r0, #11
 80164b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164bc:	b002      	add	sp, #8
 80164be:	4770      	bx	lr
 80164c0:	3301      	adds	r3, #1
 80164c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80164c6:	00d9      	lsls	r1, r3, #3
 80164c8:	69e3      	ldr	r3, [r4, #28]
 80164ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80164cc:	4798      	blx	r3
 80164ce:	b1e8      	cbz	r0, 801650c <rcl_clock_add_jump_callback+0xb8>
 80164d0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80164d4:	f10d 0c18 	add.w	ip, sp, #24
 80164d8:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80164dc:	eb00 08c3 	add.w	r8, r0, r3, lsl #3
 80164e0:	f108 0708 	add.w	r7, r8, #8
 80164e4:	6060      	str	r0, [r4, #4]
 80164e6:	f840 6033 	str.w	r6, [r0, r3, lsl #3]
 80164ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164ee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80164f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80164f4:	f10e 0301 	add.w	r3, lr, #1
 80164f8:	e887 0003 	stmia.w	r7, {r0, r1}
 80164fc:	f8c8 5020 	str.w	r5, [r8, #32]
 8016500:	2000      	movs	r0, #0
 8016502:	60a3      	str	r3, [r4, #8]
 8016504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016508:	b002      	add	sp, #8
 801650a:	4770      	bx	lr
 801650c:	200a      	movs	r0, #10
 801650e:	e7d3      	b.n	80164b8 <rcl_clock_add_jump_callback+0x64>
 8016510:	2128      	movs	r1, #40	; 0x28
 8016512:	6860      	ldr	r0, [r4, #4]
 8016514:	e7d8      	b.n	80164c8 <rcl_clock_add_jump_callback+0x74>
 8016516:	bf00      	nop

08016518 <rcl_clock_remove_jump_callback>:
 8016518:	2800      	cmp	r0, #0
 801651a:	d057      	beq.n	80165cc <rcl_clock_remove_jump_callback+0xb4>
 801651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016520:	4607      	mov	r7, r0
 8016522:	3014      	adds	r0, #20
 8016524:	460c      	mov	r4, r1
 8016526:	4615      	mov	r5, r2
 8016528:	f7f8 ff22 	bl	800f370 <rcutils_allocator_is_valid>
 801652c:	2800      	cmp	r0, #0
 801652e:	d03a      	beq.n	80165a6 <rcl_clock_remove_jump_callback+0x8e>
 8016530:	2c00      	cmp	r4, #0
 8016532:	d038      	beq.n	80165a6 <rcl_clock_remove_jump_callback+0x8e>
 8016534:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8016538:	f1b8 0f00 	cmp.w	r8, #0
 801653c:	d00c      	beq.n	8016558 <rcl_clock_remove_jump_callback+0x40>
 801653e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8016542:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8016546:	4676      	mov	r6, lr
 8016548:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 801654c:	6833      	ldr	r3, [r6, #0]
 801654e:	42a3      	cmp	r3, r4
 8016550:	d005      	beq.n	801655e <rcl_clock_remove_jump_callback+0x46>
 8016552:	3628      	adds	r6, #40	; 0x28
 8016554:	45b4      	cmp	ip, r6
 8016556:	d1f9      	bne.n	801654c <rcl_clock_remove_jump_callback+0x34>
 8016558:	2001      	movs	r0, #1
 801655a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655e:	6a33      	ldr	r3, [r6, #32]
 8016560:	3628      	adds	r6, #40	; 0x28
 8016562:	4566      	cmp	r6, ip
 8016564:	d02a      	beq.n	80165bc <rcl_clock_remove_jump_callback+0xa4>
 8016566:	42ab      	cmp	r3, r5
 8016568:	d1f0      	bne.n	801654c <rcl_clock_remove_jump_callback+0x34>
 801656a:	4635      	mov	r5, r6
 801656c:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8016570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016578:	3628      	adds	r6, #40	; 0x28
 801657a:	4566      	cmp	r6, ip
 801657c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016580:	e884 0003 	stmia.w	r4, {r0, r1}
 8016584:	d1f1      	bne.n	801656a <rcl_clock_remove_jump_callback+0x52>
 8016586:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801658a:	60bc      	str	r4, [r7, #8]
 801658c:	b174      	cbz	r4, 80165ac <rcl_clock_remove_jump_callback+0x94>
 801658e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016592:	4670      	mov	r0, lr
 8016594:	69fb      	ldr	r3, [r7, #28]
 8016596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016598:	00e1      	lsls	r1, r4, #3
 801659a:	4798      	blx	r3
 801659c:	b1c0      	cbz	r0, 80165d0 <rcl_clock_remove_jump_callback+0xb8>
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	2000      	movs	r0, #0
 80165a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165a6:	200b      	movs	r0, #11
 80165a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ac:	4670      	mov	r0, lr
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165b2:	4798      	blx	r3
 80165b4:	4620      	mov	r0, r4
 80165b6:	607c      	str	r4, [r7, #4]
 80165b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165bc:	42ab      	cmp	r3, r5
 80165be:	d1cb      	bne.n	8016558 <rcl_clock_remove_jump_callback+0x40>
 80165c0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80165c4:	60bc      	str	r4, [r7, #8]
 80165c6:	2c00      	cmp	r4, #0
 80165c8:	d1e1      	bne.n	801658e <rcl_clock_remove_jump_callback+0x76>
 80165ca:	e7ef      	b.n	80165ac <rcl_clock_remove_jump_callback+0x94>
 80165cc:	200b      	movs	r0, #11
 80165ce:	4770      	bx	lr
 80165d0:	200a      	movs	r0, #10
 80165d2:	e7e9      	b.n	80165a8 <rcl_clock_remove_jump_callback+0x90>

080165d4 <_rcl_timer_time_jump>:
 80165d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d8:	4683      	mov	fp, r0
 80165da:	4614      	mov	r4, r2
 80165dc:	b085      	sub	sp, #20
 80165de:	b131      	cbz	r1, 80165ee <_rcl_timer_time_jump+0x1a>
 80165e0:	7803      	ldrb	r3, [r0, #0]
 80165e2:	3b02      	subs	r3, #2
 80165e4:	2b01      	cmp	r3, #1
 80165e6:	d940      	bls.n	801666a <_rcl_timer_time_jump+0x96>
 80165e8:	b005      	add	sp, #20
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ee:	6813      	ldr	r3, [r2, #0]
 80165f0:	a902      	add	r1, sp, #8
 80165f2:	6818      	ldr	r0, [r3, #0]
 80165f4:	f7ff ff22 	bl	801643c <rcl_clock_get_now>
 80165f8:	2800      	cmp	r0, #0
 80165fa:	d1f5      	bne.n	80165e8 <_rcl_timer_time_jump+0x14>
 80165fc:	6820      	ldr	r0, [r4, #0]
 80165fe:	2105      	movs	r1, #5
 8016600:	3020      	adds	r0, #32
 8016602:	f001 f989 	bl	8017918 <__atomic_load_8>
 8016606:	460b      	mov	r3, r1
 8016608:	4680      	mov	r8, r0
 801660a:	6820      	ldr	r0, [r4, #0]
 801660c:	2105      	movs	r1, #5
 801660e:	3028      	adds	r0, #40	; 0x28
 8016610:	4699      	mov	r9, r3
 8016612:	f001 f981 	bl	8017918 <__atomic_load_8>
 8016616:	460b      	mov	r3, r1
 8016618:	4606      	mov	r6, r0
 801661a:	6820      	ldr	r0, [r4, #0]
 801661c:	2105      	movs	r1, #5
 801661e:	3018      	adds	r0, #24
 8016620:	461f      	mov	r7, r3
 8016622:	f001 f979 	bl	8017918 <__atomic_load_8>
 8016626:	f89b 3000 	ldrb.w	r3, [fp]
 801662a:	4605      	mov	r5, r0
 801662c:	3b02      	subs	r3, #2
 801662e:	2b01      	cmp	r3, #1
 8016630:	468a      	mov	sl, r1
 8016632:	d937      	bls.n	80166a4 <_rcl_timer_time_jump+0xd0>
 8016634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016638:	42b0      	cmp	r0, r6
 801663a:	eb71 0307 	sbcs.w	r3, r1, r7
 801663e:	da5f      	bge.n	8016700 <_rcl_timer_time_jump+0x12c>
 8016640:	4540      	cmp	r0, r8
 8016642:	eb71 0309 	sbcs.w	r3, r1, r9
 8016646:	dacf      	bge.n	80165e8 <_rcl_timer_time_jump+0x14>
 8016648:	2605      	movs	r6, #5
 801664a:	182a      	adds	r2, r5, r0
 801664c:	6820      	ldr	r0, [r4, #0]
 801664e:	eb4a 0301 	adc.w	r3, sl, r1
 8016652:	9600      	str	r6, [sp, #0]
 8016654:	3028      	adds	r0, #40	; 0x28
 8016656:	f001 f993 	bl	8017980 <__atomic_store_8>
 801665a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801665e:	6820      	ldr	r0, [r4, #0]
 8016660:	9600      	str	r6, [sp, #0]
 8016662:	3020      	adds	r0, #32
 8016664:	f001 f98c 	bl	8017980 <__atomic_store_8>
 8016668:	e7be      	b.n	80165e8 <_rcl_timer_time_jump+0x14>
 801666a:	6813      	ldr	r3, [r2, #0]
 801666c:	a902      	add	r1, sp, #8
 801666e:	6818      	ldr	r0, [r3, #0]
 8016670:	f7ff fee4 	bl	801643c <rcl_clock_get_now>
 8016674:	2800      	cmp	r0, #0
 8016676:	d1b7      	bne.n	80165e8 <_rcl_timer_time_jump+0x14>
 8016678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801667c:	4313      	orrs	r3, r2
 801667e:	d0b3      	beq.n	80165e8 <_rcl_timer_time_jump+0x14>
 8016680:	6820      	ldr	r0, [r4, #0]
 8016682:	2105      	movs	r1, #5
 8016684:	3028      	adds	r0, #40	; 0x28
 8016686:	f001 f947 	bl	8017918 <__atomic_load_8>
 801668a:	2505      	movs	r5, #5
 801668c:	9a02      	ldr	r2, [sp, #8]
 801668e:	6824      	ldr	r4, [r4, #0]
 8016690:	9b03      	ldr	r3, [sp, #12]
 8016692:	1a82      	subs	r2, r0, r2
 8016694:	eb61 0303 	sbc.w	r3, r1, r3
 8016698:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801669c:	9500      	str	r5, [sp, #0]
 801669e:	f001 f96f 	bl	8017980 <__atomic_store_8>
 80166a2:	e7a1      	b.n	80165e8 <_rcl_timer_time_jump+0x14>
 80166a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166a8:	4313      	orrs	r3, r2
 80166aa:	d09d      	beq.n	80165e8 <_rcl_timer_time_jump+0x14>
 80166ac:	f04f 0805 	mov.w	r8, #5
 80166b0:	6820      	ldr	r0, [r4, #0]
 80166b2:	2300      	movs	r3, #0
 80166b4:	2200      	movs	r2, #0
 80166b6:	f8cd 8000 	str.w	r8, [sp]
 80166ba:	3030      	adds	r0, #48	; 0x30
 80166bc:	f001 f994 	bl	80179e8 <__atomic_exchange_8>
 80166c0:	4606      	mov	r6, r0
 80166c2:	460f      	mov	r7, r1
 80166c4:	ea56 0307 	orrs.w	r3, r6, r7
 80166c8:	d08e      	beq.n	80165e8 <_rcl_timer_time_jump+0x14>
 80166ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166ce:	1a12      	subs	r2, r2, r0
 80166d0:	6820      	ldr	r0, [r4, #0]
 80166d2:	eb63 0301 	sbc.w	r3, r3, r1
 80166d6:	1952      	adds	r2, r2, r5
 80166d8:	eb43 030a 	adc.w	r3, r3, sl
 80166dc:	f8cd 8000 	str.w	r8, [sp]
 80166e0:	3028      	adds	r0, #40	; 0x28
 80166e2:	f001 f94d 	bl	8017980 <__atomic_store_8>
 80166e6:	9a02      	ldr	r2, [sp, #8]
 80166e8:	6820      	ldr	r0, [r4, #0]
 80166ea:	9b03      	ldr	r3, [sp, #12]
 80166ec:	1b92      	subs	r2, r2, r6
 80166ee:	f100 0020 	add.w	r0, r0, #32
 80166f2:	f8cd 8000 	str.w	r8, [sp]
 80166f6:	eb63 0307 	sbc.w	r3, r3, r7
 80166fa:	f001 f941 	bl	8017980 <__atomic_store_8>
 80166fe:	e773      	b.n	80165e8 <_rcl_timer_time_jump+0x14>
 8016700:	6820      	ldr	r0, [r4, #0]
 8016702:	3008      	adds	r0, #8
 8016704:	f003 f80c 	bl	8019720 <rcl_trigger_guard_condition>
 8016708:	e76e      	b.n	80165e8 <_rcl_timer_time_jump+0x14>
 801670a:	bf00      	nop

0801670c <rcl_get_zero_initialized_timer>:
 801670c:	4b01      	ldr	r3, [pc, #4]	; (8016714 <rcl_get_zero_initialized_timer+0x8>)
 801670e:	6818      	ldr	r0, [r3, #0]
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	0801c85c 	.word	0x0801c85c

08016718 <rcl_timer_init>:
 8016718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671c:	b0ab      	sub	sp, #172	; 0xac
 801671e:	4604      	mov	r4, r0
 8016720:	a837      	add	r0, sp, #220	; 0xdc
 8016722:	460d      	mov	r5, r1
 8016724:	4617      	mov	r7, r2
 8016726:	f7f8 fe23 	bl	800f370 <rcutils_allocator_is_valid>
 801672a:	2800      	cmp	r0, #0
 801672c:	d06a      	beq.n	8016804 <rcl_timer_init+0xec>
 801672e:	2c00      	cmp	r4, #0
 8016730:	d068      	beq.n	8016804 <rcl_timer_init+0xec>
 8016732:	2d00      	cmp	r5, #0
 8016734:	d066      	beq.n	8016804 <rcl_timer_init+0xec>
 8016736:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801673a:	2a00      	cmp	r2, #0
 801673c:	f173 0300 	sbcs.w	r3, r3, #0
 8016740:	db60      	blt.n	8016804 <rcl_timer_init+0xec>
 8016742:	6823      	ldr	r3, [r4, #0]
 8016744:	b123      	cbz	r3, 8016750 <rcl_timer_init+0x38>
 8016746:	2664      	movs	r6, #100	; 0x64
 8016748:	4630      	mov	r0, r6
 801674a:	b02b      	add	sp, #172	; 0xac
 801674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016750:	4628      	mov	r0, r5
 8016752:	a908      	add	r1, sp, #32
 8016754:	f7ff fe72 	bl	801643c <rcl_clock_get_now>
 8016758:	4606      	mov	r6, r0
 801675a:	2800      	cmp	r0, #0
 801675c:	d1f4      	bne.n	8016748 <rcl_timer_init+0x30>
 801675e:	f10d 0b18 	add.w	fp, sp, #24
 8016762:	ae0b      	add	r6, sp, #44	; 0x2c
 8016764:	4658      	mov	r0, fp
 8016766:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 801676a:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
 801676e:	f002 fee5 	bl	801953c <rcl_get_zero_initialized_guard_condition>
 8016772:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8016776:	e88a 0003 	stmia.w	sl, {r0, r1}
 801677a:	4630      	mov	r0, r6
 801677c:	f002 ffb8 	bl	80196f0 <rcl_guard_condition_get_default_options>
 8016780:	ab0d      	add	r3, sp, #52	; 0x34
 8016782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016786:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801678a:	4639      	mov	r1, r7
 801678c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016790:	4650      	mov	r0, sl
 8016792:	f002 fedd 	bl	8019550 <rcl_guard_condition_init>
 8016796:	4606      	mov	r6, r0
 8016798:	2800      	cmp	r0, #0
 801679a:	d1d5      	bne.n	8016748 <rcl_timer_init+0x30>
 801679c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801679e:	781f      	ldrb	r7, [r3, #0]
 80167a0:	2f01      	cmp	r7, #1
 80167a2:	d034      	beq.n	801680e <rcl_timer_init+0xf6>
 80167a4:	9b08      	ldr	r3, [sp, #32]
 80167a6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80167a8:	af37      	add	r7, sp, #220	; 0xdc
 80167aa:	eb13 0802 	adds.w	r8, r3, r2
 80167ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80167b2:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 80167b6:	eb43 0902 	adc.w	r9, r3, r2
 80167ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80167bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80167c4:	f04f 0e00 	mov.w	lr, #0
 80167c8:	921a      	str	r2, [sp, #104]	; 0x68
 80167ca:	2100      	movs	r1, #0
 80167cc:	f8cc 3000 	str.w	r3, [ip]
 80167d0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80167d4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80167d8:	2200      	movs	r2, #0
 80167da:	4603      	mov	r3, r0
 80167dc:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
 80167e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80167e4:	2050      	movs	r0, #80	; 0x50
 80167e6:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 80167ea:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 80167ee:	993b      	ldr	r1, [sp, #236]	; 0xec
 80167f0:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
 80167f4:	4798      	blx	r3
 80167f6:	6020      	str	r0, [r4, #0]
 80167f8:	b358      	cbz	r0, 8016852 <rcl_timer_init+0x13a>
 80167fa:	2250      	movs	r2, #80	; 0x50
 80167fc:	a916      	add	r1, sp, #88	; 0x58
 80167fe:	f003 f8f5 	bl	80199ec <memcpy>
 8016802:	e7a1      	b.n	8016748 <rcl_timer_init+0x30>
 8016804:	260b      	movs	r6, #11
 8016806:	4630      	mov	r0, r6
 8016808:	b02b      	add	sp, #172	; 0xac
 801680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680e:	2001      	movs	r0, #1
 8016810:	2100      	movs	r1, #0
 8016812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801681a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801681e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016822:	f8df c044 	ldr.w	ip, [pc, #68]	; 8016868 <rcl_timer_init+0x150>
 8016826:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
 801682a:	9405      	str	r4, [sp, #20]
 801682c:	ab12      	add	r3, sp, #72	; 0x48
 801682e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016830:	f8cd c010 	str.w	ip, [sp, #16]
 8016834:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801683c:	4628      	mov	r0, r5
 801683e:	f7ff fe09 	bl	8016454 <rcl_clock_add_jump_callback>
 8016842:	4607      	mov	r7, r0
 8016844:	2800      	cmp	r0, #0
 8016846:	d0ad      	beq.n	80167a4 <rcl_timer_init+0x8c>
 8016848:	4650      	mov	r0, sl
 801684a:	f002 ff2f 	bl	80196ac <rcl_guard_condition_fini>
 801684e:	463e      	mov	r6, r7
 8016850:	e77a      	b.n	8016748 <rcl_timer_init+0x30>
 8016852:	4650      	mov	r0, sl
 8016854:	f002 ff2a 	bl	80196ac <rcl_guard_condition_fini>
 8016858:	4622      	mov	r2, r4
 801685a:	4628      	mov	r0, r5
 801685c:	4902      	ldr	r1, [pc, #8]	; (8016868 <rcl_timer_init+0x150>)
 801685e:	f7ff fe5b 	bl	8016518 <rcl_clock_remove_jump_callback>
 8016862:	260a      	movs	r6, #10
 8016864:	e770      	b.n	8016748 <rcl_timer_init+0x30>
 8016866:	bf00      	nop
 8016868:	080165d5 	.word	0x080165d5

0801686c <rcl_timer_call>:
 801686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016870:	b08b      	sub	sp, #44	; 0x2c
 8016872:	2800      	cmp	r0, #0
 8016874:	d070      	beq.n	8016958 <rcl_timer_call+0xec>
 8016876:	6803      	ldr	r3, [r0, #0]
 8016878:	f3bf 8f5b 	dmb	ish
 801687c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016880:	4604      	mov	r4, r0
 8016882:	f3bf 8f5b 	dmb	ish
 8016886:	2b00      	cmp	r3, #0
 8016888:	d15b      	bne.n	8016942 <rcl_timer_call+0xd6>
 801688a:	6803      	ldr	r3, [r0, #0]
 801688c:	a908      	add	r1, sp, #32
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	f7ff fdd4 	bl	801643c <rcl_clock_get_now>
 8016894:	4605      	mov	r5, r0
 8016896:	2800      	cmp	r0, #0
 8016898:	d14f      	bne.n	801693a <rcl_timer_call+0xce>
 801689a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801689e:	2a00      	cmp	r2, #0
 80168a0:	f173 0100 	sbcs.w	r1, r3, #0
 80168a4:	db53      	blt.n	801694e <rcl_timer_call+0xe2>
 80168a6:	2605      	movs	r6, #5
 80168a8:	6820      	ldr	r0, [r4, #0]
 80168aa:	9600      	str	r6, [sp, #0]
 80168ac:	3020      	adds	r0, #32
 80168ae:	f001 f89b 	bl	80179e8 <__atomic_exchange_8>
 80168b2:	6822      	ldr	r2, [r4, #0]
 80168b4:	f3bf 8f5b 	dmb	ish
 80168b8:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80168bc:	f3bf 8f5b 	dmb	ish
 80168c0:	460b      	mov	r3, r1
 80168c2:	4682      	mov	sl, r0
 80168c4:	6820      	ldr	r0, [r4, #0]
 80168c6:	4631      	mov	r1, r6
 80168c8:	3028      	adds	r0, #40	; 0x28
 80168ca:	9305      	str	r3, [sp, #20]
 80168cc:	f001 f824 	bl	8017918 <__atomic_load_8>
 80168d0:	4603      	mov	r3, r0
 80168d2:	460a      	mov	r2, r1
 80168d4:	6820      	ldr	r0, [r4, #0]
 80168d6:	4631      	mov	r1, r6
 80168d8:	3018      	adds	r0, #24
 80168da:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80168de:	f001 f81b 	bl	8017918 <__atomic_load_8>
 80168e2:	4684      	mov	ip, r0
 80168e4:	468e      	mov	lr, r1
 80168e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168ea:	9b04      	ldr	r3, [sp, #16]
 80168ec:	9a03      	ldr	r2, [sp, #12]
 80168ee:	eb13 080c 	adds.w	r8, r3, ip
 80168f2:	eb42 090e 	adc.w	r9, r2, lr
 80168f6:	4580      	cmp	r8, r0
 80168f8:	eb79 0301 	sbcs.w	r3, r9, r1
 80168fc:	4666      	mov	r6, ip
 80168fe:	4677      	mov	r7, lr
 8016900:	460a      	mov	r2, r1
 8016902:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016906:	da04      	bge.n	8016912 <rcl_timer_call+0xa6>
 8016908:	ea56 0307 	orrs.w	r3, r6, r7
 801690c:	d129      	bne.n	8016962 <rcl_timer_call+0xf6>
 801690e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8016912:	2105      	movs	r1, #5
 8016914:	6820      	ldr	r0, [r4, #0]
 8016916:	4642      	mov	r2, r8
 8016918:	464b      	mov	r3, r9
 801691a:	9100      	str	r1, [sp, #0]
 801691c:	3028      	adds	r0, #40	; 0x28
 801691e:	f001 f82f 	bl	8017980 <__atomic_store_8>
 8016922:	f1bb 0f00 	cmp.w	fp, #0
 8016926:	d008      	beq.n	801693a <rcl_timer_call+0xce>
 8016928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801692c:	9905      	ldr	r1, [sp, #20]
 801692e:	ebb2 020a 	subs.w	r2, r2, sl
 8016932:	4620      	mov	r0, r4
 8016934:	eb63 0301 	sbc.w	r3, r3, r1
 8016938:	47d8      	blx	fp
 801693a:	4628      	mov	r0, r5
 801693c:	b00b      	add	sp, #44	; 0x2c
 801693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016942:	f240 3521 	movw	r5, #801	; 0x321
 8016946:	4628      	mov	r0, r5
 8016948:	b00b      	add	sp, #44	; 0x2c
 801694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801694e:	2501      	movs	r5, #1
 8016950:	4628      	mov	r0, r5
 8016952:	b00b      	add	sp, #44	; 0x2c
 8016954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016958:	250b      	movs	r5, #11
 801695a:	4628      	mov	r0, r5
 801695c:	b00b      	add	sp, #44	; 0x2c
 801695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016962:	ebb0 0008 	subs.w	r0, r0, r8
 8016966:	eb62 0109 	sbc.w	r1, r2, r9
 801696a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 801696e:	4673      	mov	r3, lr
 8016970:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8016974:	4662      	mov	r2, ip
 8016976:	f7ea fc4b 	bl	8001210 <__aeabi_ldivmod>
 801697a:	fb00 7307 	mla	r3, r0, r7, r7
 801697e:	3001      	adds	r0, #1
 8016980:	f141 0100 	adc.w	r1, r1, #0
 8016984:	fb06 3101 	mla	r1, r6, r1, r3
 8016988:	fba0 6706 	umull	r6, r7, r0, r6
 801698c:	440f      	add	r7, r1
 801698e:	eb18 0806 	adds.w	r8, r8, r6
 8016992:	eb49 0907 	adc.w	r9, r9, r7
 8016996:	e7bc      	b.n	8016912 <rcl_timer_call+0xa6>

08016998 <rcl_timer_is_ready>:
 8016998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801699c:	b082      	sub	sp, #8
 801699e:	b310      	cbz	r0, 80169e6 <rcl_timer_is_ready+0x4e>
 80169a0:	4688      	mov	r8, r1
 80169a2:	b301      	cbz	r1, 80169e6 <rcl_timer_is_ready+0x4e>
 80169a4:	6803      	ldr	r3, [r0, #0]
 80169a6:	4604      	mov	r4, r0
 80169a8:	4669      	mov	r1, sp
 80169aa:	6818      	ldr	r0, [r3, #0]
 80169ac:	f7ff fd46 	bl	801643c <rcl_clock_get_now>
 80169b0:	4605      	mov	r5, r0
 80169b2:	b118      	cbz	r0, 80169bc <rcl_timer_is_ready+0x24>
 80169b4:	4628      	mov	r0, r5
 80169b6:	b002      	add	sp, #8
 80169b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169bc:	6820      	ldr	r0, [r4, #0]
 80169be:	2105      	movs	r1, #5
 80169c0:	3028      	adds	r0, #40	; 0x28
 80169c2:	f000 ffa9 	bl	8017918 <__atomic_load_8>
 80169c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80169ca:	1ac6      	subs	r6, r0, r3
 80169cc:	eb61 0702 	sbc.w	r7, r1, r2
 80169d0:	2e01      	cmp	r6, #1
 80169d2:	f177 0300 	sbcs.w	r3, r7, #0
 80169d6:	db0b      	blt.n	80169f0 <rcl_timer_is_ready+0x58>
 80169d8:	462b      	mov	r3, r5
 80169da:	4628      	mov	r0, r5
 80169dc:	f888 3000 	strb.w	r3, [r8]
 80169e0:	b002      	add	sp, #8
 80169e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e6:	250b      	movs	r5, #11
 80169e8:	4628      	mov	r0, r5
 80169ea:	b002      	add	sp, #8
 80169ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f0:	6823      	ldr	r3, [r4, #0]
 80169f2:	f3bf 8f5b 	dmb	ish
 80169f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80169fa:	f3bf 8f5b 	dmb	ish
 80169fe:	fab3 f383 	clz	r3, r3
 8016a02:	095b      	lsrs	r3, r3, #5
 8016a04:	e7e9      	b.n	80169da <rcl_timer_is_ready+0x42>
 8016a06:	bf00      	nop

08016a08 <rcl_timer_get_time_until_next_call>:
 8016a08:	b570      	push	{r4, r5, r6, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	b1d8      	cbz	r0, 8016a46 <rcl_timer_get_time_until_next_call+0x3e>
 8016a0e:	460d      	mov	r5, r1
 8016a10:	b1c9      	cbz	r1, 8016a46 <rcl_timer_get_time_until_next_call+0x3e>
 8016a12:	6803      	ldr	r3, [r0, #0]
 8016a14:	4604      	mov	r4, r0
 8016a16:	4669      	mov	r1, sp
 8016a18:	6818      	ldr	r0, [r3, #0]
 8016a1a:	f7ff fd0f 	bl	801643c <rcl_clock_get_now>
 8016a1e:	4606      	mov	r6, r0
 8016a20:	b110      	cbz	r0, 8016a28 <rcl_timer_get_time_until_next_call+0x20>
 8016a22:	4630      	mov	r0, r6
 8016a24:	b002      	add	sp, #8
 8016a26:	bd70      	pop	{r4, r5, r6, pc}
 8016a28:	6820      	ldr	r0, [r4, #0]
 8016a2a:	2105      	movs	r1, #5
 8016a2c:	3028      	adds	r0, #40	; 0x28
 8016a2e:	f000 ff73 	bl	8017918 <__atomic_load_8>
 8016a32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016a36:	1ac0      	subs	r0, r0, r3
 8016a38:	eb61 0102 	sbc.w	r1, r1, r2
 8016a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8016a40:	4630      	mov	r0, r6
 8016a42:	b002      	add	sp, #8
 8016a44:	bd70      	pop	{r4, r5, r6, pc}
 8016a46:	260b      	movs	r6, #11
 8016a48:	4630      	mov	r0, r6
 8016a4a:	b002      	add	sp, #8
 8016a4c:	bd70      	pop	{r4, r5, r6, pc}
 8016a4e:	bf00      	nop

08016a50 <rcl_timer_is_canceled>:
 8016a50:	b168      	cbz	r0, 8016a6e <rcl_timer_is_canceled+0x1e>
 8016a52:	b161      	cbz	r1, 8016a6e <rcl_timer_is_canceled+0x1e>
 8016a54:	6803      	ldr	r3, [r0, #0]
 8016a56:	f3bf 8f5b 	dmb	ish
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016a60:	f3bf 8f5b 	dmb	ish
 8016a64:	1a1b      	subs	r3, r3, r0
 8016a66:	bf18      	it	ne
 8016a68:	2301      	movne	r3, #1
 8016a6a:	700b      	strb	r3, [r1, #0]
 8016a6c:	4770      	bx	lr
 8016a6e:	200b      	movs	r0, #11
 8016a70:	4770      	bx	lr
 8016a72:	bf00      	nop

08016a74 <rcl_timer_get_guard_condition>:
 8016a74:	b130      	cbz	r0, 8016a84 <rcl_timer_get_guard_condition+0x10>
 8016a76:	6800      	ldr	r0, [r0, #0]
 8016a78:	b120      	cbz	r0, 8016a84 <rcl_timer_get_guard_condition+0x10>
 8016a7a:	68c3      	ldr	r3, [r0, #12]
 8016a7c:	b10b      	cbz	r3, 8016a82 <rcl_timer_get_guard_condition+0xe>
 8016a7e:	3008      	adds	r0, #8
 8016a80:	4770      	bx	lr
 8016a82:	4618      	mov	r0, r3
 8016a84:	4770      	bx	lr
 8016a86:	bf00      	nop

08016a88 <rcl_validate_enclave_name_with_size>:
 8016a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a8a:	b0c3      	sub	sp, #268	; 0x10c
 8016a8c:	b1d0      	cbz	r0, 8016ac4 <rcl_validate_enclave_name_with_size+0x3c>
 8016a8e:	4615      	mov	r5, r2
 8016a90:	b1c2      	cbz	r2, 8016ac4 <rcl_validate_enclave_name_with_size+0x3c>
 8016a92:	461f      	mov	r7, r3
 8016a94:	466a      	mov	r2, sp
 8016a96:	ab01      	add	r3, sp, #4
 8016a98:	460e      	mov	r6, r1
 8016a9a:	f001 f987 	bl	8017dac <rmw_validate_namespace_with_size>
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	b9e0      	cbnz	r0, 8016adc <rcl_validate_enclave_name_with_size+0x54>
 8016aa2:	9b00      	ldr	r3, [sp, #0]
 8016aa4:	b923      	cbnz	r3, 8016ab0 <rcl_validate_enclave_name_with_size+0x28>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	602b      	str	r3, [r5, #0]
 8016aaa:	4620      	mov	r0, r4
 8016aac:	b043      	add	sp, #268	; 0x10c
 8016aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab0:	2b07      	cmp	r3, #7
 8016ab2:	d00b      	beq.n	8016acc <rcl_validate_enclave_name_with_size+0x44>
 8016ab4:	1e5a      	subs	r2, r3, #1
 8016ab6:	2a05      	cmp	r2, #5
 8016ab8:	d82e      	bhi.n	8016b18 <rcl_validate_enclave_name_with_size+0x90>
 8016aba:	e8df f002 	tbb	[pc, r2]
 8016abe:	211e      	.short	0x211e
 8016ac0:	152a2724 	.word	0x152a2724
 8016ac4:	240b      	movs	r4, #11
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	b043      	add	sp, #268	; 0x10c
 8016aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016acc:	2eff      	cmp	r6, #255	; 0xff
 8016ace:	d9ea      	bls.n	8016aa6 <rcl_validate_enclave_name_with_size+0x1e>
 8016ad0:	602b      	str	r3, [r5, #0]
 8016ad2:	2f00      	cmp	r7, #0
 8016ad4:	d0e9      	beq.n	8016aaa <rcl_validate_enclave_name_with_size+0x22>
 8016ad6:	23fe      	movs	r3, #254	; 0xfe
 8016ad8:	603b      	str	r3, [r7, #0]
 8016ada:	e7e6      	b.n	8016aaa <rcl_validate_enclave_name_with_size+0x22>
 8016adc:	f7fe fdb0 	bl	8015640 <rcl_convert_rmw_ret_to_rcl_ret>
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	b043      	add	sp, #268	; 0x10c
 8016ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ae8:	2306      	movs	r3, #6
 8016aea:	602b      	str	r3, [r5, #0]
 8016aec:	2f00      	cmp	r7, #0
 8016aee:	d0dc      	beq.n	8016aaa <rcl_validate_enclave_name_with_size+0x22>
 8016af0:	4620      	mov	r0, r4
 8016af2:	9b01      	ldr	r3, [sp, #4]
 8016af4:	603b      	str	r3, [r7, #0]
 8016af6:	b043      	add	sp, #268	; 0x10c
 8016af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016afa:	2301      	movs	r3, #1
 8016afc:	602b      	str	r3, [r5, #0]
 8016afe:	e7f5      	b.n	8016aec <rcl_validate_enclave_name_with_size+0x64>
 8016b00:	2302      	movs	r3, #2
 8016b02:	602b      	str	r3, [r5, #0]
 8016b04:	e7f2      	b.n	8016aec <rcl_validate_enclave_name_with_size+0x64>
 8016b06:	2303      	movs	r3, #3
 8016b08:	602b      	str	r3, [r5, #0]
 8016b0a:	e7ef      	b.n	8016aec <rcl_validate_enclave_name_with_size+0x64>
 8016b0c:	2304      	movs	r3, #4
 8016b0e:	602b      	str	r3, [r5, #0]
 8016b10:	e7ec      	b.n	8016aec <rcl_validate_enclave_name_with_size+0x64>
 8016b12:	2305      	movs	r3, #5
 8016b14:	602b      	str	r3, [r5, #0]
 8016b16:	e7e9      	b.n	8016aec <rcl_validate_enclave_name_with_size+0x64>
 8016b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016b1c:	4a02      	ldr	r2, [pc, #8]	; (8016b28 <rcl_validate_enclave_name_with_size+0xa0>)
 8016b1e:	a802      	add	r0, sp, #8
 8016b20:	f001 f8d0 	bl	8017cc4 <rcutils_snprintf>
 8016b24:	2401      	movs	r4, #1
 8016b26:	e7c0      	b.n	8016aaa <rcl_validate_enclave_name_with_size+0x22>
 8016b28:	0801c860 	.word	0x0801c860

08016b2c <rcl_validate_enclave_name>:
 8016b2c:	b168      	cbz	r0, 8016b4a <rcl_validate_enclave_name+0x1e>
 8016b2e:	b570      	push	{r4, r5, r6, lr}
 8016b30:	460d      	mov	r5, r1
 8016b32:	4616      	mov	r6, r2
 8016b34:	4604      	mov	r4, r0
 8016b36:	f7e9 fb85 	bl	8000244 <strlen>
 8016b3a:	4633      	mov	r3, r6
 8016b3c:	4601      	mov	r1, r0
 8016b3e:	462a      	mov	r2, r5
 8016b40:	4620      	mov	r0, r4
 8016b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b46:	f7ff bf9f 	b.w	8016a88 <rcl_validate_enclave_name_with_size>
 8016b4a:	200b      	movs	r0, #11
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop

08016b50 <rcl_validate_topic_name>:
 8016b50:	2800      	cmp	r0, #0
 8016b52:	f000 808c 	beq.w	8016c6e <rcl_validate_topic_name+0x11e>
 8016b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b5a:	460e      	mov	r6, r1
 8016b5c:	2900      	cmp	r1, #0
 8016b5e:	f000 808d 	beq.w	8016c7c <rcl_validate_topic_name+0x12c>
 8016b62:	4617      	mov	r7, r2
 8016b64:	4605      	mov	r5, r0
 8016b66:	f7e9 fb6d 	bl	8000244 <strlen>
 8016b6a:	b1b0      	cbz	r0, 8016b9a <rcl_validate_topic_name+0x4a>
 8016b6c:	f895 9000 	ldrb.w	r9, [r5]
 8016b70:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8016d18 <rcl_validate_topic_name+0x1c8>
 8016b74:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016b78:	f013 0304 	ands.w	r3, r3, #4
 8016b7c:	d179      	bne.n	8016c72 <rcl_validate_topic_name+0x122>
 8016b7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8016b82:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016b86:	2a2f      	cmp	r2, #47	; 0x2f
 8016b88:	d10e      	bne.n	8016ba8 <rcl_validate_topic_name+0x58>
 8016b8a:	2202      	movs	r2, #2
 8016b8c:	6032      	str	r2, [r6, #0]
 8016b8e:	b377      	cbz	r7, 8016bee <rcl_validate_topic_name+0x9e>
 8016b90:	4618      	mov	r0, r3
 8016b92:	f8c7 8000 	str.w	r8, [r7]
 8016b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	6033      	str	r3, [r6, #0]
 8016b9e:	b337      	cbz	r7, 8016bee <rcl_validate_topic_name+0x9e>
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	6038      	str	r0, [r7, #0]
 8016ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ba8:	461c      	mov	r4, r3
 8016baa:	4619      	mov	r1, r3
 8016bac:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8016bb0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016bb4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016bb8:	f1be 0f09 	cmp.w	lr, #9
 8016bbc:	d947      	bls.n	8016c4e <rcl_validate_topic_name+0xfe>
 8016bbe:	f022 0e20 	bic.w	lr, r2, #32
 8016bc2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8016bc6:	f1be 0f19 	cmp.w	lr, #25
 8016bca:	d940      	bls.n	8016c4e <rcl_validate_topic_name+0xfe>
 8016bcc:	2a5f      	cmp	r2, #95	; 0x5f
 8016bce:	d015      	beq.n	8016bfc <rcl_validate_topic_name+0xac>
 8016bd0:	2a2f      	cmp	r2, #47	; 0x2f
 8016bd2:	d072      	beq.n	8016cba <rcl_validate_topic_name+0x16a>
 8016bd4:	2a7e      	cmp	r2, #126	; 0x7e
 8016bd6:	d053      	beq.n	8016c80 <rcl_validate_topic_name+0x130>
 8016bd8:	2a7b      	cmp	r2, #123	; 0x7b
 8016bda:	d00b      	beq.n	8016bf4 <rcl_validate_topic_name+0xa4>
 8016bdc:	2a7d      	cmp	r2, #125	; 0x7d
 8016bde:	f040 808a 	bne.w	8016cf6 <rcl_validate_topic_name+0x1a6>
 8016be2:	2c00      	cmp	r4, #0
 8016be4:	d174      	bne.n	8016cd0 <rcl_validate_topic_name+0x180>
 8016be6:	2305      	movs	r3, #5
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	b107      	cbz	r7, 8016bee <rcl_validate_topic_name+0x9e>
 8016bec:	6039      	str	r1, [r7, #0]
 8016bee:	2000      	movs	r0, #0
 8016bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf4:	2c00      	cmp	r4, #0
 8016bf6:	d162      	bne.n	8016cbe <rcl_validate_topic_name+0x16e>
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	2401      	movs	r4, #1
 8016bfc:	3101      	adds	r1, #1
 8016bfe:	4288      	cmp	r0, r1
 8016c00:	d1d6      	bne.n	8016bb0 <rcl_validate_topic_name+0x60>
 8016c02:	2c00      	cmp	r4, #0
 8016c04:	d16c      	bne.n	8016ce0 <rcl_validate_topic_name+0x190>
 8016c06:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	f108 0401 	add.w	r4, r8, #1
 8016c10:	d108      	bne.n	8016c24 <rcl_validate_topic_name+0xd4>
 8016c12:	e044      	b.n	8016c9e <rcl_validate_topic_name+0x14e>
 8016c14:	2801      	cmp	r0, #1
 8016c16:	d05d      	beq.n	8016cd4 <rcl_validate_topic_name+0x184>
 8016c18:	461a      	mov	r2, r3
 8016c1a:	4291      	cmp	r1, r2
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f105 0501 	add.w	r5, r5, #1
 8016c22:	d95a      	bls.n	8016cda <rcl_validate_topic_name+0x18a>
 8016c24:	4580      	cmp	r8, r0
 8016c26:	f100 0301 	add.w	r3, r0, #1
 8016c2a:	d04d      	beq.n	8016cc8 <rcl_validate_topic_name+0x178>
 8016c2c:	782a      	ldrb	r2, [r5, #0]
 8016c2e:	2a2f      	cmp	r2, #47	; 0x2f
 8016c30:	d1f0      	bne.n	8016c14 <rcl_validate_topic_name+0xc4>
 8016c32:	786a      	ldrb	r2, [r5, #1]
 8016c34:	1c43      	adds	r3, r0, #1
 8016c36:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8016c3a:	461a      	mov	r2, r3
 8016c3c:	0740      	lsls	r0, r0, #29
 8016c3e:	d5ec      	bpl.n	8016c1a <rcl_validate_topic_name+0xca>
 8016c40:	2304      	movs	r3, #4
 8016c42:	6033      	str	r3, [r6, #0]
 8016c44:	2f00      	cmp	r7, #0
 8016c46:	d0d2      	beq.n	8016bee <rcl_validate_topic_name+0x9e>
 8016c48:	2000      	movs	r0, #0
 8016c4a:	603a      	str	r2, [r7, #0]
 8016c4c:	e7aa      	b.n	8016ba4 <rcl_validate_topic_name+0x54>
 8016c4e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c52:	0752      	lsls	r2, r2, #29
 8016c54:	d5d2      	bpl.n	8016bfc <rcl_validate_topic_name+0xac>
 8016c56:	2c00      	cmp	r4, #0
 8016c58:	d0d0      	beq.n	8016bfc <rcl_validate_topic_name+0xac>
 8016c5a:	2900      	cmp	r1, #0
 8016c5c:	d0ce      	beq.n	8016bfc <rcl_validate_topic_name+0xac>
 8016c5e:	1e4a      	subs	r2, r1, #1
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d1cb      	bne.n	8016bfc <rcl_validate_topic_name+0xac>
 8016c64:	2309      	movs	r3, #9
 8016c66:	6033      	str	r3, [r6, #0]
 8016c68:	2f00      	cmp	r7, #0
 8016c6a:	d1bf      	bne.n	8016bec <rcl_validate_topic_name+0x9c>
 8016c6c:	e7bf      	b.n	8016bee <rcl_validate_topic_name+0x9e>
 8016c6e:	200b      	movs	r0, #11
 8016c70:	4770      	bx	lr
 8016c72:	2304      	movs	r3, #4
 8016c74:	6033      	str	r3, [r6, #0]
 8016c76:	2f00      	cmp	r7, #0
 8016c78:	d192      	bne.n	8016ba0 <rcl_validate_topic_name+0x50>
 8016c7a:	e7b8      	b.n	8016bee <rcl_validate_topic_name+0x9e>
 8016c7c:	200b      	movs	r0, #11
 8016c7e:	e791      	b.n	8016ba4 <rcl_validate_topic_name+0x54>
 8016c80:	2900      	cmp	r1, #0
 8016c82:	d0bb      	beq.n	8016bfc <rcl_validate_topic_name+0xac>
 8016c84:	2306      	movs	r3, #6
 8016c86:	6033      	str	r3, [r6, #0]
 8016c88:	2f00      	cmp	r7, #0
 8016c8a:	d1af      	bne.n	8016bec <rcl_validate_topic_name+0x9c>
 8016c8c:	e7af      	b.n	8016bee <rcl_validate_topic_name+0x9e>
 8016c8e:	2801      	cmp	r0, #1
 8016c90:	d03a      	beq.n	8016d08 <rcl_validate_topic_name+0x1b8>
 8016c92:	461a      	mov	r2, r3
 8016c94:	4291      	cmp	r1, r2
 8016c96:	4618      	mov	r0, r3
 8016c98:	f105 0501 	add.w	r5, r5, #1
 8016c9c:	d91d      	bls.n	8016cda <rcl_validate_topic_name+0x18a>
 8016c9e:	4580      	cmp	r8, r0
 8016ca0:	f100 0301 	add.w	r3, r0, #1
 8016ca4:	d023      	beq.n	8016cee <rcl_validate_topic_name+0x19e>
 8016ca6:	782a      	ldrb	r2, [r5, #0]
 8016ca8:	2a2f      	cmp	r2, #47	; 0x2f
 8016caa:	d1f0      	bne.n	8016c8e <rcl_validate_topic_name+0x13e>
 8016cac:	786a      	ldrb	r2, [r5, #1]
 8016cae:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	0740      	lsls	r0, r0, #29
 8016cb6:	d5ed      	bpl.n	8016c94 <rcl_validate_topic_name+0x144>
 8016cb8:	e7c2      	b.n	8016c40 <rcl_validate_topic_name+0xf0>
 8016cba:	2c00      	cmp	r4, #0
 8016cbc:	d09e      	beq.n	8016bfc <rcl_validate_topic_name+0xac>
 8016cbe:	2308      	movs	r3, #8
 8016cc0:	6033      	str	r3, [r6, #0]
 8016cc2:	2f00      	cmp	r7, #0
 8016cc4:	d192      	bne.n	8016bec <rcl_validate_topic_name+0x9c>
 8016cc6:	e792      	b.n	8016bee <rcl_validate_topic_name+0x9e>
 8016cc8:	4622      	mov	r2, r4
 8016cca:	f108 0301 	add.w	r3, r8, #1
 8016cce:	e7a4      	b.n	8016c1a <rcl_validate_topic_name+0xca>
 8016cd0:	2400      	movs	r4, #0
 8016cd2:	e793      	b.n	8016bfc <rcl_validate_topic_name+0xac>
 8016cd4:	2202      	movs	r2, #2
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	e79f      	b.n	8016c1a <rcl_validate_topic_name+0xca>
 8016cda:	2000      	movs	r0, #0
 8016cdc:	6030      	str	r0, [r6, #0]
 8016cde:	e761      	b.n	8016ba4 <rcl_validate_topic_name+0x54>
 8016ce0:	2205      	movs	r2, #5
 8016ce2:	6032      	str	r2, [r6, #0]
 8016ce4:	2f00      	cmp	r7, #0
 8016ce6:	d082      	beq.n	8016bee <rcl_validate_topic_name+0x9e>
 8016ce8:	2000      	movs	r0, #0
 8016cea:	603b      	str	r3, [r7, #0]
 8016cec:	e75a      	b.n	8016ba4 <rcl_validate_topic_name+0x54>
 8016cee:	4622      	mov	r2, r4
 8016cf0:	f108 0301 	add.w	r3, r8, #1
 8016cf4:	e7ce      	b.n	8016c94 <rcl_validate_topic_name+0x144>
 8016cf6:	2c00      	cmp	r4, #0
 8016cf8:	bf14      	ite	ne
 8016cfa:	2308      	movne	r3, #8
 8016cfc:	2303      	moveq	r3, #3
 8016cfe:	6033      	str	r3, [r6, #0]
 8016d00:	2f00      	cmp	r7, #0
 8016d02:	f47f af73 	bne.w	8016bec <rcl_validate_topic_name+0x9c>
 8016d06:	e772      	b.n	8016bee <rcl_validate_topic_name+0x9e>
 8016d08:	2307      	movs	r3, #7
 8016d0a:	6033      	str	r3, [r6, #0]
 8016d0c:	2f00      	cmp	r7, #0
 8016d0e:	f43f af6e 	beq.w	8016bee <rcl_validate_topic_name+0x9e>
 8016d12:	6038      	str	r0, [r7, #0]
 8016d14:	2000      	movs	r0, #0
 8016d16:	e745      	b.n	8016ba4 <rcl_validate_topic_name+0x54>
 8016d18:	0801cc9b 	.word	0x0801cc9b

08016d1c <rcl_get_zero_initialized_wait_set>:
 8016d1c:	b470      	push	{r4, r5, r6}
 8016d1e:	4604      	mov	r4, r0
 8016d20:	4606      	mov	r6, r0
 8016d22:	4d06      	ldr	r5, [pc, #24]	; (8016d3c <rcl_get_zero_initialized_wait_set+0x20>)
 8016d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d30:	682b      	ldr	r3, [r5, #0]
 8016d32:	4630      	mov	r0, r6
 8016d34:	6023      	str	r3, [r4, #0]
 8016d36:	bc70      	pop	{r4, r5, r6}
 8016d38:	4770      	bx	lr
 8016d3a:	bf00      	nop
 8016d3c:	0801c8c0 	.word	0x0801c8c0

08016d40 <rcl_wait_set_is_valid>:
 8016d40:	b118      	cbz	r0, 8016d4a <rcl_wait_set_is_valid+0xa>
 8016d42:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016d44:	3800      	subs	r0, #0
 8016d46:	bf18      	it	ne
 8016d48:	2001      	movne	r0, #1
 8016d4a:	4770      	bx	lr

08016d4c <rcl_wait_set_fini>:
 8016d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d50:	b083      	sub	sp, #12
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f000 8098 	beq.w	8016e88 <rcl_wait_set_fini+0x13c>
 8016d58:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	2e00      	cmp	r6, #0
 8016d5e:	f000 808f 	beq.w	8016e80 <rcl_wait_set_fini+0x134>
 8016d62:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8016d64:	f001 fd44 	bl	80187f0 <rmw_destroy_wait_set>
 8016d68:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016d6a:	1e06      	subs	r6, r0, #0
 8016d6c:	bf18      	it	ne
 8016d6e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8016d72:	2d00      	cmp	r5, #0
 8016d74:	f000 8084 	beq.w	8016e80 <rcl_wait_set_fini+0x134>
 8016d78:	2700      	movs	r7, #0
 8016d7a:	6820      	ldr	r0, [r4, #0]
 8016d7c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016d80:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8016d84:	6067      	str	r7, [r4, #4]
 8016d86:	602f      	str	r7, [r5, #0]
 8016d88:	b118      	cbz	r0, 8016d92 <rcl_wait_set_fini+0x46>
 8016d8a:	4649      	mov	r1, r9
 8016d8c:	47c0      	blx	r8
 8016d8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016d90:	6027      	str	r7, [r4, #0]
 8016d92:	68a8      	ldr	r0, [r5, #8]
 8016d94:	b128      	cbz	r0, 8016da2 <rcl_wait_set_fini+0x56>
 8016d96:	4649      	mov	r1, r9
 8016d98:	47c0      	blx	r8
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016d9e:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016da2:	f04f 0800 	mov.w	r8, #0
 8016da6:	68a0      	ldr	r0, [r4, #8]
 8016da8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016daa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016dac:	f8c4 800c 	str.w	r8, [r4, #12]
 8016db0:	f8c5 800c 	str.w	r8, [r5, #12]
 8016db4:	b128      	cbz	r0, 8016dc2 <rcl_wait_set_fini+0x76>
 8016db6:	47b8      	blx	r7
 8016db8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016dba:	f8c4 8008 	str.w	r8, [r4, #8]
 8016dbe:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016dc0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016dc2:	f04f 0800 	mov.w	r8, #0
 8016dc6:	6968      	ldr	r0, [r5, #20]
 8016dc8:	f8c5 8010 	str.w	r8, [r5, #16]
 8016dcc:	b128      	cbz	r0, 8016dda <rcl_wait_set_fini+0x8e>
 8016dce:	47b8      	blx	r7
 8016dd0:	f8c5 8014 	str.w	r8, [r5, #20]
 8016dd4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016dd6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016dd8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016dda:	f04f 0800 	mov.w	r8, #0
 8016dde:	6920      	ldr	r0, [r4, #16]
 8016de0:	f8c4 8014 	str.w	r8, [r4, #20]
 8016de4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016de8:	b128      	cbz	r0, 8016df6 <rcl_wait_set_fini+0xaa>
 8016dea:	47b8      	blx	r7
 8016dec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016dee:	f8c4 8010 	str.w	r8, [r4, #16]
 8016df2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016df4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016df6:	f04f 0800 	mov.w	r8, #0
 8016dfa:	69a0      	ldr	r0, [r4, #24]
 8016dfc:	f8c4 801c 	str.w	r8, [r4, #28]
 8016e00:	f8c5 8018 	str.w	r8, [r5, #24]
 8016e04:	b128      	cbz	r0, 8016e12 <rcl_wait_set_fini+0xc6>
 8016e06:	9101      	str	r1, [sp, #4]
 8016e08:	47b8      	blx	r7
 8016e0a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e0c:	9901      	ldr	r1, [sp, #4]
 8016e0e:	f8c4 8018 	str.w	r8, [r4, #24]
 8016e12:	6a28      	ldr	r0, [r5, #32]
 8016e14:	b120      	cbz	r0, 8016e20 <rcl_wait_set_fini+0xd4>
 8016e16:	47b8      	blx	r7
 8016e18:	2300      	movs	r3, #0
 8016e1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e1c:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016e20:	2700      	movs	r7, #0
 8016e22:	6a20      	ldr	r0, [r4, #32]
 8016e24:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016e28:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8016e2c:	6267      	str	r7, [r4, #36]	; 0x24
 8016e2e:	626f      	str	r7, [r5, #36]	; 0x24
 8016e30:	b118      	cbz	r0, 8016e3a <rcl_wait_set_fini+0xee>
 8016e32:	4649      	mov	r1, r9
 8016e34:	47c0      	blx	r8
 8016e36:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e38:	6227      	str	r7, [r4, #32]
 8016e3a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016e3c:	b128      	cbz	r0, 8016e4a <rcl_wait_set_fini+0xfe>
 8016e3e:	4649      	mov	r1, r9
 8016e40:	47c0      	blx	r8
 8016e42:	2300      	movs	r3, #0
 8016e44:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e46:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016e4a:	2700      	movs	r7, #0
 8016e4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016e4e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016e52:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8016e56:	62e7      	str	r7, [r4, #44]	; 0x2c
 8016e58:	632f      	str	r7, [r5, #48]	; 0x30
 8016e5a:	b118      	cbz	r0, 8016e64 <rcl_wait_set_fini+0x118>
 8016e5c:	4649      	mov	r1, r9
 8016e5e:	47c0      	blx	r8
 8016e60:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e62:	62a7      	str	r7, [r4, #40]	; 0x28
 8016e64:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8016e66:	b128      	cbz	r0, 8016e74 <rcl_wait_set_fini+0x128>
 8016e68:	4649      	mov	r1, r9
 8016e6a:	47c0      	blx	r8
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016e70:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8016e74:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016e76:	4628      	mov	r0, r5
 8016e78:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016e7a:	4798      	blx	r3
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8016e80:	4630      	mov	r0, r6
 8016e82:	b003      	add	sp, #12
 8016e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e88:	260b      	movs	r6, #11
 8016e8a:	4630      	mov	r0, r6
 8016e8c:	b003      	add	sp, #12
 8016e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e92:	bf00      	nop

08016e94 <rcl_wait_set_add_subscription>:
 8016e94:	b320      	cbz	r0, 8016ee0 <rcl_wait_set_add_subscription+0x4c>
 8016e96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016e98:	b570      	push	{r4, r5, r6, lr}
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	b1d3      	cbz	r3, 8016ed4 <rcl_wait_set_add_subscription+0x40>
 8016e9e:	b319      	cbz	r1, 8016ee8 <rcl_wait_set_add_subscription+0x54>
 8016ea0:	681d      	ldr	r5, [r3, #0]
 8016ea2:	6860      	ldr	r0, [r4, #4]
 8016ea4:	4285      	cmp	r5, r0
 8016ea6:	d218      	bcs.n	8016eda <rcl_wait_set_add_subscription+0x46>
 8016ea8:	6820      	ldr	r0, [r4, #0]
 8016eaa:	1c6e      	adds	r6, r5, #1
 8016eac:	601e      	str	r6, [r3, #0]
 8016eae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016eb2:	b102      	cbz	r2, 8016eb6 <rcl_wait_set_add_subscription+0x22>
 8016eb4:	6015      	str	r5, [r2, #0]
 8016eb6:	4608      	mov	r0, r1
 8016eb8:	f7f7 fdbc 	bl	800ea34 <rcl_subscription_get_rmw_handle>
 8016ebc:	b190      	cbz	r0, 8016ee4 <rcl_wait_set_add_subscription+0x50>
 8016ebe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016ec0:	6842      	ldr	r2, [r0, #4]
 8016ec2:	689b      	ldr	r3, [r3, #8]
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016eca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016ecc:	6853      	ldr	r3, [r2, #4]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	6053      	str	r3, [r2, #4]
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016ed8:	bd70      	pop	{r4, r5, r6, pc}
 8016eda:	f240 3086 	movw	r0, #902	; 0x386
 8016ede:	bd70      	pop	{r4, r5, r6, pc}
 8016ee0:	200b      	movs	r0, #11
 8016ee2:	4770      	bx	lr
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	200b      	movs	r0, #11
 8016eea:	bd70      	pop	{r4, r5, r6, pc}

08016eec <rcl_wait_set_clear>:
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d074      	beq.n	8016fda <rcl_wait_set_clear+0xee>
 8016ef0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016ef2:	b510      	push	{r4, lr}
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d071      	beq.n	8016fde <rcl_wait_set_clear+0xf2>
 8016efa:	6800      	ldr	r0, [r0, #0]
 8016efc:	b138      	cbz	r0, 8016f0e <rcl_wait_set_clear+0x22>
 8016efe:	6862      	ldr	r2, [r4, #4]
 8016f00:	2100      	movs	r1, #0
 8016f02:	0092      	lsls	r2, r2, #2
 8016f04:	f002 fd9a 	bl	8019a3c <memset>
 8016f08:	2200      	movs	r2, #0
 8016f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f0c:	601a      	str	r2, [r3, #0]
 8016f0e:	68a0      	ldr	r0, [r4, #8]
 8016f10:	b138      	cbz	r0, 8016f22 <rcl_wait_set_clear+0x36>
 8016f12:	68e2      	ldr	r2, [r4, #12]
 8016f14:	2100      	movs	r1, #0
 8016f16:	0092      	lsls	r2, r2, #2
 8016f18:	f002 fd90 	bl	8019a3c <memset>
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f20:	60da      	str	r2, [r3, #12]
 8016f22:	69a0      	ldr	r0, [r4, #24]
 8016f24:	b138      	cbz	r0, 8016f36 <rcl_wait_set_clear+0x4a>
 8016f26:	69e2      	ldr	r2, [r4, #28]
 8016f28:	2100      	movs	r1, #0
 8016f2a:	0092      	lsls	r2, r2, #2
 8016f2c:	f002 fd86 	bl	8019a3c <memset>
 8016f30:	2200      	movs	r2, #0
 8016f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f34:	619a      	str	r2, [r3, #24]
 8016f36:	6a20      	ldr	r0, [r4, #32]
 8016f38:	b138      	cbz	r0, 8016f4a <rcl_wait_set_clear+0x5e>
 8016f3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016f3c:	2100      	movs	r1, #0
 8016f3e:	0092      	lsls	r2, r2, #2
 8016f40:	f002 fd7c 	bl	8019a3c <memset>
 8016f44:	2200      	movs	r2, #0
 8016f46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f48:	625a      	str	r2, [r3, #36]	; 0x24
 8016f4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016f4c:	b138      	cbz	r0, 8016f5e <rcl_wait_set_clear+0x72>
 8016f4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016f50:	2100      	movs	r1, #0
 8016f52:	0092      	lsls	r2, r2, #2
 8016f54:	f002 fd72 	bl	8019a3c <memset>
 8016f58:	2200      	movs	r2, #0
 8016f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8016f5e:	6920      	ldr	r0, [r4, #16]
 8016f60:	b138      	cbz	r0, 8016f72 <rcl_wait_set_clear+0x86>
 8016f62:	6962      	ldr	r2, [r4, #20]
 8016f64:	2100      	movs	r1, #0
 8016f66:	0092      	lsls	r2, r2, #2
 8016f68:	f002 fd68 	bl	8019a3c <memset>
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f70:	641a      	str	r2, [r3, #64]	; 0x40
 8016f72:	6898      	ldr	r0, [r3, #8]
 8016f74:	b138      	cbz	r0, 8016f86 <rcl_wait_set_clear+0x9a>
 8016f76:	685a      	ldr	r2, [r3, #4]
 8016f78:	2100      	movs	r1, #0
 8016f7a:	0092      	lsls	r2, r2, #2
 8016f7c:	f002 fd5e 	bl	8019a3c <memset>
 8016f80:	2200      	movs	r2, #0
 8016f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f84:	605a      	str	r2, [r3, #4]
 8016f86:	6958      	ldr	r0, [r3, #20]
 8016f88:	b138      	cbz	r0, 8016f9a <rcl_wait_set_clear+0xae>
 8016f8a:	691a      	ldr	r2, [r3, #16]
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	0092      	lsls	r2, r2, #2
 8016f90:	f002 fd54 	bl	8019a3c <memset>
 8016f94:	2200      	movs	r2, #0
 8016f96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f98:	611a      	str	r2, [r3, #16]
 8016f9a:	6a18      	ldr	r0, [r3, #32]
 8016f9c:	b138      	cbz	r0, 8016fae <rcl_wait_set_clear+0xc2>
 8016f9e:	69da      	ldr	r2, [r3, #28]
 8016fa0:	2100      	movs	r1, #0
 8016fa2:	0092      	lsls	r2, r2, #2
 8016fa4:	f002 fd4a 	bl	8019a3c <memset>
 8016fa8:	2200      	movs	r2, #0
 8016faa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016fac:	61da      	str	r2, [r3, #28]
 8016fae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016fb0:	b138      	cbz	r0, 8016fc2 <rcl_wait_set_clear+0xd6>
 8016fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016fb4:	2100      	movs	r1, #0
 8016fb6:	0092      	lsls	r2, r2, #2
 8016fb8:	f002 fd40 	bl	8019a3c <memset>
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016fc0:	629a      	str	r2, [r3, #40]	; 0x28
 8016fc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016fc4:	b140      	cbz	r0, 8016fd8 <rcl_wait_set_clear+0xec>
 8016fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016fc8:	2100      	movs	r1, #0
 8016fca:	0092      	lsls	r2, r2, #2
 8016fcc:	f002 fd36 	bl	8019a3c <memset>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8016fd8:	bd10      	pop	{r4, pc}
 8016fda:	200b      	movs	r0, #11
 8016fdc:	4770      	bx	lr
 8016fde:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016fe2:	bd10      	pop	{r4, pc}

08016fe4 <rcl_wait_set_resize>:
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	f000 81a7 	beq.w	8017338 <rcl_wait_set_resize+0x354>
 8016fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fee:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	b083      	sub	sp, #12
 8016ff6:	f1ba 0f00 	cmp.w	sl, #0
 8016ffa:	f000 819f 	beq.w	801733c <rcl_wait_set_resize+0x358>
 8016ffe:	f04f 0800 	mov.w	r8, #0
 8017002:	461e      	mov	r6, r3
 8017004:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8017008:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801700c:	460f      	mov	r7, r1
 801700e:	f8c0 8004 	str.w	r8, [r0, #4]
 8017012:	4615      	mov	r5, r2
 8017014:	9300      	str	r3, [sp, #0]
 8017016:	f8ca 8000 	str.w	r8, [sl]
 801701a:	2900      	cmp	r1, #0
 801701c:	f000 80ca 	beq.w	80171b4 <rcl_wait_set_resize+0x1d0>
 8017020:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8017024:	4651      	mov	r1, sl
 8017026:	464a      	mov	r2, r9
 8017028:	6800      	ldr	r0, [r0, #0]
 801702a:	4798      	blx	r3
 801702c:	6020      	str	r0, [r4, #0]
 801702e:	2800      	cmp	r0, #0
 8017030:	f000 80d9 	beq.w	80171e6 <rcl_wait_set_resize+0x202>
 8017034:	4652      	mov	r2, sl
 8017036:	4641      	mov	r1, r8
 8017038:	f002 fd00 	bl	8019a3c <memset>
 801703c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801703e:	6067      	str	r7, [r4, #4]
 8017040:	464a      	mov	r2, r9
 8017042:	6898      	ldr	r0, [r3, #8]
 8017044:	f8c3 8004 	str.w	r8, [r3, #4]
 8017048:	9301      	str	r3, [sp, #4]
 801704a:	4651      	mov	r1, sl
 801704c:	9b00      	ldr	r3, [sp, #0]
 801704e:	4798      	blx	r3
 8017050:	9b01      	ldr	r3, [sp, #4]
 8017052:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017054:	6098      	str	r0, [r3, #8]
 8017056:	6897      	ldr	r7, [r2, #8]
 8017058:	2f00      	cmp	r7, #0
 801705a:	f000 80bf 	beq.w	80171dc <rcl_wait_set_resize+0x1f8>
 801705e:	4652      	mov	r2, sl
 8017060:	4641      	mov	r1, r8
 8017062:	4638      	mov	r0, r7
 8017064:	f002 fcea 	bl	8019a3c <memset>
 8017068:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801706c:	2700      	movs	r7, #0
 801706e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8017072:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017076:	60e7      	str	r7, [r4, #12]
 8017078:	f8ca 700c 	str.w	r7, [sl, #12]
 801707c:	2d00      	cmp	r5, #0
 801707e:	f040 80b6 	bne.w	80171ee <rcl_wait_set_resize+0x20a>
 8017082:	68a0      	ldr	r0, [r4, #8]
 8017084:	b130      	cbz	r0, 8017094 <rcl_wait_set_resize+0xb0>
 8017086:	4641      	mov	r1, r8
 8017088:	4790      	blx	r2
 801708a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801708e:	60a5      	str	r5, [r4, #8]
 8017090:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017094:	2700      	movs	r7, #0
 8017096:	19ad      	adds	r5, r5, r6
 8017098:	f8ca 7010 	str.w	r7, [sl, #16]
 801709c:	f040 80bf 	bne.w	801721e <rcl_wait_set_resize+0x23a>
 80170a0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80170a4:	b148      	cbz	r0, 80170ba <rcl_wait_set_resize+0xd6>
 80170a6:	4641      	mov	r1, r8
 80170a8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80170ac:	4798      	blx	r3
 80170ae:	f8ca 5014 	str.w	r5, [sl, #20]
 80170b2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80170b6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80170ba:	2500      	movs	r5, #0
 80170bc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80170c0:	6165      	str	r5, [r4, #20]
 80170c2:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80170c6:	2e00      	cmp	r6, #0
 80170c8:	f040 80c0 	bne.w	801724c <rcl_wait_set_resize+0x268>
 80170cc:	6920      	ldr	r0, [r4, #16]
 80170ce:	b140      	cbz	r0, 80170e2 <rcl_wait_set_resize+0xfe>
 80170d0:	4641      	mov	r1, r8
 80170d2:	47c8      	blx	r9
 80170d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80170d8:	6126      	str	r6, [r4, #16]
 80170da:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80170de:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80170e2:	2500      	movs	r5, #0
 80170e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170e6:	61e5      	str	r5, [r4, #28]
 80170e8:	f8ca 5018 	str.w	r5, [sl, #24]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	f040 80c2 	bne.w	8017276 <rcl_wait_set_resize+0x292>
 80170f2:	69a0      	ldr	r0, [r4, #24]
 80170f4:	b128      	cbz	r0, 8017102 <rcl_wait_set_resize+0x11e>
 80170f6:	4641      	mov	r1, r8
 80170f8:	47c8      	blx	r9
 80170fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017100:	61a3      	str	r3, [r4, #24]
 8017102:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017106:	b130      	cbz	r0, 8017116 <rcl_wait_set_resize+0x132>
 8017108:	4641      	mov	r1, r8
 801710a:	47c8      	blx	r9
 801710c:	2300      	movs	r3, #0
 801710e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017112:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8017116:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 801711a:	2600      	movs	r6, #0
 801711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801711e:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8017122:	6266      	str	r6, [r4, #36]	; 0x24
 8017124:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8017128:	2b00      	cmp	r3, #0
 801712a:	f000 80c9 	beq.w	80172c0 <rcl_wait_set_resize+0x2dc>
 801712e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017132:	4651      	mov	r1, sl
 8017134:	463a      	mov	r2, r7
 8017136:	6a20      	ldr	r0, [r4, #32]
 8017138:	47c8      	blx	r9
 801713a:	6220      	str	r0, [r4, #32]
 801713c:	2800      	cmp	r0, #0
 801713e:	d052      	beq.n	80171e6 <rcl_wait_set_resize+0x202>
 8017140:	4652      	mov	r2, sl
 8017142:	4631      	mov	r1, r6
 8017144:	f002 fc7a 	bl	8019a3c <memset>
 8017148:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801714c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801714e:	6263      	str	r3, [r4, #36]	; 0x24
 8017150:	463a      	mov	r2, r7
 8017152:	62ae      	str	r6, [r5, #40]	; 0x28
 8017154:	4651      	mov	r1, sl
 8017156:	47c8      	blx	r9
 8017158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801715a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801715c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801715e:	2d00      	cmp	r5, #0
 8017160:	f000 8106 	beq.w	8017370 <rcl_wait_set_resize+0x38c>
 8017164:	4652      	mov	r2, sl
 8017166:	4631      	mov	r1, r6
 8017168:	4628      	mov	r0, r5
 801716a:	f002 fc67 	bl	8019a3c <memset>
 801716e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017172:	2500      	movs	r5, #0
 8017174:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8017178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801717a:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 801717e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8017180:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8017184:	2b00      	cmp	r3, #0
 8017186:	f040 80b0 	bne.w	80172ea <rcl_wait_set_resize+0x306>
 801718a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801718c:	b128      	cbz	r0, 801719a <rcl_wait_set_resize+0x1b6>
 801718e:	4631      	mov	r1, r6
 8017190:	47b8      	blx	r7
 8017192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017194:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017198:	62a3      	str	r3, [r4, #40]	; 0x28
 801719a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801719e:	b318      	cbz	r0, 80171e8 <rcl_wait_set_resize+0x204>
 80171a0:	4631      	mov	r1, r6
 80171a2:	47b8      	blx	r7
 80171a4:	2300      	movs	r3, #0
 80171a6:	4618      	mov	r0, r3
 80171a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80171aa:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80171ae:	b003      	add	sp, #12
 80171b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171b4:	6800      	ldr	r0, [r0, #0]
 80171b6:	b120      	cbz	r0, 80171c2 <rcl_wait_set_resize+0x1de>
 80171b8:	4649      	mov	r1, r9
 80171ba:	47d8      	blx	fp
 80171bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80171c0:	6027      	str	r7, [r4, #0]
 80171c2:	f8da 0008 	ldr.w	r0, [sl, #8]
 80171c6:	2800      	cmp	r0, #0
 80171c8:	f43f af50 	beq.w	801706c <rcl_wait_set_resize+0x88>
 80171cc:	4649      	mov	r1, r9
 80171ce:	47d8      	blx	fp
 80171d0:	2300      	movs	r3, #0
 80171d2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80171d6:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80171da:	e747      	b.n	801706c <rcl_wait_set_resize+0x88>
 80171dc:	4649      	mov	r1, r9
 80171de:	6820      	ldr	r0, [r4, #0]
 80171e0:	47d8      	blx	fp
 80171e2:	e9c4 7700 	strd	r7, r7, [r4]
 80171e6:	200a      	movs	r0, #10
 80171e8:	b003      	add	sp, #12
 80171ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80171f2:	4642      	mov	r2, r8
 80171f4:	4649      	mov	r1, r9
 80171f6:	68a0      	ldr	r0, [r4, #8]
 80171f8:	4798      	blx	r3
 80171fa:	60a0      	str	r0, [r4, #8]
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d0f2      	beq.n	80171e6 <rcl_wait_set_resize+0x202>
 8017200:	4639      	mov	r1, r7
 8017202:	2700      	movs	r7, #0
 8017204:	464a      	mov	r2, r9
 8017206:	f002 fc19 	bl	8019a3c <memset>
 801720a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801720e:	60e5      	str	r5, [r4, #12]
 8017210:	19ad      	adds	r5, r5, r6
 8017212:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017216:	f8ca 7010 	str.w	r7, [sl, #16]
 801721a:	f43f af41 	beq.w	80170a0 <rcl_wait_set_resize+0xbc>
 801721e:	00ad      	lsls	r5, r5, #2
 8017220:	4642      	mov	r2, r8
 8017222:	4629      	mov	r1, r5
 8017224:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8017228:	f8da 0014 	ldr.w	r0, [sl, #20]
 801722c:	4798      	blx	r3
 801722e:	4680      	mov	r8, r0
 8017230:	f8ca 0014 	str.w	r0, [sl, #20]
 8017234:	2800      	cmp	r0, #0
 8017236:	f000 8084 	beq.w	8017342 <rcl_wait_set_resize+0x35e>
 801723a:	462a      	mov	r2, r5
 801723c:	4639      	mov	r1, r7
 801723e:	f002 fbfd 	bl	8019a3c <memset>
 8017242:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017246:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801724a:	e736      	b.n	80170ba <rcl_wait_set_resize+0xd6>
 801724c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8017250:	4642      	mov	r2, r8
 8017252:	4649      	mov	r1, r9
 8017254:	6920      	ldr	r0, [r4, #16]
 8017256:	47b8      	blx	r7
 8017258:	6120      	str	r0, [r4, #16]
 801725a:	2800      	cmp	r0, #0
 801725c:	d0c3      	beq.n	80171e6 <rcl_wait_set_resize+0x202>
 801725e:	464a      	mov	r2, r9
 8017260:	4629      	mov	r1, r5
 8017262:	f002 fbeb 	bl	8019a3c <memset>
 8017266:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801726a:	6166      	str	r6, [r4, #20]
 801726c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017270:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8017274:	e735      	b.n	80170e2 <rcl_wait_set_resize+0xfe>
 8017276:	009e      	lsls	r6, r3, #2
 8017278:	4631      	mov	r1, r6
 801727a:	4642      	mov	r2, r8
 801727c:	69a0      	ldr	r0, [r4, #24]
 801727e:	47b8      	blx	r7
 8017280:	61a0      	str	r0, [r4, #24]
 8017282:	2800      	cmp	r0, #0
 8017284:	d0af      	beq.n	80171e6 <rcl_wait_set_resize+0x202>
 8017286:	4632      	mov	r2, r6
 8017288:	4629      	mov	r1, r5
 801728a:	f002 fbd7 	bl	8019a3c <memset>
 801728e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017294:	4642      	mov	r2, r8
 8017296:	61e3      	str	r3, [r4, #28]
 8017298:	4631      	mov	r1, r6
 801729a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801729e:	f8ca 501c 	str.w	r5, [sl, #28]
 80172a2:	47b8      	blx	r7
 80172a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80172a6:	f8ca 0020 	str.w	r0, [sl, #32]
 80172aa:	6a1f      	ldr	r7, [r3, #32]
 80172ac:	2f00      	cmp	r7, #0
 80172ae:	d058      	beq.n	8017362 <rcl_wait_set_resize+0x37e>
 80172b0:	4632      	mov	r2, r6
 80172b2:	4629      	mov	r1, r5
 80172b4:	4638      	mov	r0, r7
 80172b6:	f002 fbc1 	bl	8019a3c <memset>
 80172ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80172be:	e72a      	b.n	8017116 <rcl_wait_set_resize+0x132>
 80172c0:	6a20      	ldr	r0, [r4, #32]
 80172c2:	b128      	cbz	r0, 80172d0 <rcl_wait_set_resize+0x2ec>
 80172c4:	4639      	mov	r1, r7
 80172c6:	47c0      	blx	r8
 80172c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172ca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80172ce:	6223      	str	r3, [r4, #32]
 80172d0:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80172d4:	2800      	cmp	r0, #0
 80172d6:	f43f af4c 	beq.w	8017172 <rcl_wait_set_resize+0x18e>
 80172da:	4639      	mov	r1, r7
 80172dc:	47c0      	blx	r8
 80172de:	2300      	movs	r3, #0
 80172e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80172e4:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80172e8:	e743      	b.n	8017172 <rcl_wait_set_resize+0x18e>
 80172ea:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80172ee:	4641      	mov	r1, r8
 80172f0:	4632      	mov	r2, r6
 80172f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80172f4:	47c8      	blx	r9
 80172f6:	62a0      	str	r0, [r4, #40]	; 0x28
 80172f8:	2800      	cmp	r0, #0
 80172fa:	f43f af74 	beq.w	80171e6 <rcl_wait_set_resize+0x202>
 80172fe:	4642      	mov	r2, r8
 8017300:	4629      	mov	r1, r5
 8017302:	f002 fb9b 	bl	8019a3c <memset>
 8017306:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801730a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801730c:	4632      	mov	r2, r6
 801730e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017310:	4641      	mov	r1, r8
 8017312:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017316:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 801731a:	47c8      	blx	r9
 801731c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801731e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017324:	b35b      	cbz	r3, 801737e <rcl_wait_set_resize+0x39a>
 8017326:	4642      	mov	r2, r8
 8017328:	4618      	mov	r0, r3
 801732a:	4629      	mov	r1, r5
 801732c:	f002 fb86 	bl	8019a3c <memset>
 8017330:	4628      	mov	r0, r5
 8017332:	b003      	add	sp, #12
 8017334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017338:	200b      	movs	r0, #11
 801733a:	4770      	bx	lr
 801733c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017340:	e752      	b.n	80171e8 <rcl_wait_set_resize+0x204>
 8017342:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017344:	68a0      	ldr	r0, [r4, #8]
 8017346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017348:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801734a:	4790      	blx	r2
 801734c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801734e:	6920      	ldr	r0, [r4, #16]
 8017350:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8017354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017356:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017358:	4790      	blx	r2
 801735a:	200a      	movs	r0, #10
 801735c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8017360:	e742      	b.n	80171e8 <rcl_wait_set_resize+0x204>
 8017362:	69a0      	ldr	r0, [r4, #24]
 8017364:	4641      	mov	r1, r8
 8017366:	47c8      	blx	r9
 8017368:	200a      	movs	r0, #10
 801736a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801736e:	e73b      	b.n	80171e8 <rcl_wait_set_resize+0x204>
 8017370:	6a20      	ldr	r0, [r4, #32]
 8017372:	4639      	mov	r1, r7
 8017374:	47c0      	blx	r8
 8017376:	200a      	movs	r0, #10
 8017378:	e9c4 5508 	strd	r5, r5, [r4, #32]
 801737c:	e734      	b.n	80171e8 <rcl_wait_set_resize+0x204>
 801737e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017380:	4631      	mov	r1, r6
 8017382:	9300      	str	r3, [sp, #0]
 8017384:	47b8      	blx	r7
 8017386:	9b00      	ldr	r3, [sp, #0]
 8017388:	200a      	movs	r0, #10
 801738a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801738e:	e72b      	b.n	80171e8 <rcl_wait_set_resize+0x204>

08017390 <rcl_wait_set_init>:
 8017390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017394:	b084      	sub	sp, #16
 8017396:	4604      	mov	r4, r0
 8017398:	a810      	add	r0, sp, #64	; 0x40
 801739a:	460f      	mov	r7, r1
 801739c:	4690      	mov	r8, r2
 801739e:	4699      	mov	r9, r3
 80173a0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80173a4:	f7f7 ffe4 	bl	800f370 <rcutils_allocator_is_valid>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d06b      	beq.n	8017484 <rcl_wait_set_init+0xf4>
 80173ac:	2c00      	cmp	r4, #0
 80173ae:	d069      	beq.n	8017484 <rcl_wait_set_init+0xf4>
 80173b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80173b2:	b125      	cbz	r5, 80173be <rcl_wait_set_init+0x2e>
 80173b4:	2564      	movs	r5, #100	; 0x64
 80173b6:	4628      	mov	r0, r5
 80173b8:	b004      	add	sp, #16
 80173ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173be:	f1ba 0f00 	cmp.w	sl, #0
 80173c2:	d05f      	beq.n	8017484 <rcl_wait_set_init+0xf4>
 80173c4:	4650      	mov	r0, sl
 80173c6:	f7fe f95f 	bl	8015688 <rcl_context_is_valid>
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d067      	beq.n	801749e <rcl_wait_set_init+0x10e>
 80173ce:	205c      	movs	r0, #92	; 0x5c
 80173d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80173d4:	4798      	blx	r3
 80173d6:	6320      	str	r0, [r4, #48]	; 0x30
 80173d8:	2800      	cmp	r0, #0
 80173da:	d062      	beq.n	80174a2 <rcl_wait_set_init+0x112>
 80173dc:	225c      	movs	r2, #92	; 0x5c
 80173de:	4629      	mov	r1, r5
 80173e0:	f002 fb2c 	bl	8019a3c <memset>
 80173e4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80173e6:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 80173ea:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80173ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80173f2:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80173f6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80173fa:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80173fe:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017402:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8017406:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801740a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801740e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017412:	1899      	adds	r1, r3, r2
 8017414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017416:	f8de 3000 	ldr.w	r3, [lr]
 801741a:	f8da 0000 	ldr.w	r0, [sl]
 801741e:	4411      	add	r1, r2
 8017420:	4441      	add	r1, r8
 8017422:	f8cc 3000 	str.w	r3, [ip]
 8017426:	3028      	adds	r0, #40	; 0x28
 8017428:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801742c:	f001 f9d6 	bl	80187dc <rmw_create_wait_set>
 8017430:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017432:	63f0      	str	r0, [r6, #60]	; 0x3c
 8017434:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017436:	b350      	cbz	r0, 801748e <rcl_wait_set_init+0xfe>
 8017438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801743a:	4642      	mov	r2, r8
 801743c:	9302      	str	r3, [sp, #8]
 801743e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017440:	4639      	mov	r1, r7
 8017442:	9301      	str	r3, [sp, #4]
 8017444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017446:	4620      	mov	r0, r4
 8017448:	9300      	str	r3, [sp, #0]
 801744a:	464b      	mov	r3, r9
 801744c:	f7ff fdca 	bl	8016fe4 <rcl_wait_set_resize>
 8017450:	4605      	mov	r5, r0
 8017452:	2800      	cmp	r0, #0
 8017454:	d0af      	beq.n	80173b6 <rcl_wait_set_init+0x26>
 8017456:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017458:	bb2b      	cbnz	r3, 80174a6 <rcl_wait_set_init+0x116>
 801745a:	2600      	movs	r6, #0
 801745c:	4620      	mov	r0, r4
 801745e:	4633      	mov	r3, r6
 8017460:	4632      	mov	r2, r6
 8017462:	4631      	mov	r1, r6
 8017464:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017468:	9600      	str	r6, [sp, #0]
 801746a:	f7ff fdbb 	bl	8016fe4 <rcl_wait_set_resize>
 801746e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017470:	2800      	cmp	r0, #0
 8017472:	d0a0      	beq.n	80173b6 <rcl_wait_set_init+0x26>
 8017474:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017476:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017478:	4798      	blx	r3
 801747a:	4628      	mov	r0, r5
 801747c:	6326      	str	r6, [r4, #48]	; 0x30
 801747e:	b004      	add	sp, #16
 8017480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017484:	250b      	movs	r5, #11
 8017486:	4628      	mov	r0, r5
 8017488:	b004      	add	sp, #16
 801748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801748e:	2501      	movs	r5, #1
 8017490:	f001 f9ae 	bl	80187f0 <rmw_destroy_wait_set>
 8017494:	2800      	cmp	r0, #0
 8017496:	bf18      	it	ne
 8017498:	f44f 7561 	movne.w	r5, #900	; 0x384
 801749c:	e7dd      	b.n	801745a <rcl_wait_set_init+0xca>
 801749e:	2565      	movs	r5, #101	; 0x65
 80174a0:	e789      	b.n	80173b6 <rcl_wait_set_init+0x26>
 80174a2:	250a      	movs	r5, #10
 80174a4:	e787      	b.n	80173b6 <rcl_wait_set_init+0x26>
 80174a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80174a8:	e7f2      	b.n	8017490 <rcl_wait_set_init+0x100>
 80174aa:	bf00      	nop

080174ac <rcl_wait_set_add_guard_condition>:
 80174ac:	b320      	cbz	r0, 80174f8 <rcl_wait_set_add_guard_condition+0x4c>
 80174ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80174b0:	b570      	push	{r4, r5, r6, lr}
 80174b2:	4604      	mov	r4, r0
 80174b4:	b1d3      	cbz	r3, 80174ec <rcl_wait_set_add_guard_condition+0x40>
 80174b6:	b319      	cbz	r1, 8017500 <rcl_wait_set_add_guard_condition+0x54>
 80174b8:	68dd      	ldr	r5, [r3, #12]
 80174ba:	68e0      	ldr	r0, [r4, #12]
 80174bc:	4285      	cmp	r5, r0
 80174be:	d218      	bcs.n	80174f2 <rcl_wait_set_add_guard_condition+0x46>
 80174c0:	68a0      	ldr	r0, [r4, #8]
 80174c2:	1c6e      	adds	r6, r5, #1
 80174c4:	60de      	str	r6, [r3, #12]
 80174c6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80174ca:	b102      	cbz	r2, 80174ce <rcl_wait_set_add_guard_condition+0x22>
 80174cc:	6015      	str	r5, [r2, #0]
 80174ce:	4608      	mov	r0, r1
 80174d0:	f002 f936 	bl	8019740 <rcl_guard_condition_get_rmw_handle>
 80174d4:	b190      	cbz	r0, 80174fc <rcl_wait_set_add_guard_condition+0x50>
 80174d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80174d8:	6842      	ldr	r2, [r0, #4]
 80174da:	695b      	ldr	r3, [r3, #20]
 80174dc:	2000      	movs	r0, #0
 80174de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80174e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80174e4:	6913      	ldr	r3, [r2, #16]
 80174e6:	3301      	adds	r3, #1
 80174e8:	6113      	str	r3, [r2, #16]
 80174ea:	bd70      	pop	{r4, r5, r6, pc}
 80174ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 80174f0:	bd70      	pop	{r4, r5, r6, pc}
 80174f2:	f240 3086 	movw	r0, #902	; 0x386
 80174f6:	bd70      	pop	{r4, r5, r6, pc}
 80174f8:	200b      	movs	r0, #11
 80174fa:	4770      	bx	lr
 80174fc:	2001      	movs	r0, #1
 80174fe:	bd70      	pop	{r4, r5, r6, pc}
 8017500:	200b      	movs	r0, #11
 8017502:	bd70      	pop	{r4, r5, r6, pc}

08017504 <rcl_wait_set_add_timer>:
 8017504:	b340      	cbz	r0, 8017558 <rcl_wait_set_add_timer+0x54>
 8017506:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	4604      	mov	r4, r0
 801750c:	b1f3      	cbz	r3, 801754c <rcl_wait_set_add_timer+0x48>
 801750e:	b329      	cbz	r1, 801755c <rcl_wait_set_add_timer+0x58>
 8017510:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017512:	6965      	ldr	r5, [r4, #20]
 8017514:	42a8      	cmp	r0, r5
 8017516:	d21c      	bcs.n	8017552 <rcl_wait_set_add_timer+0x4e>
 8017518:	6925      	ldr	r5, [r4, #16]
 801751a:	1c46      	adds	r6, r0, #1
 801751c:	641e      	str	r6, [r3, #64]	; 0x40
 801751e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017522:	b102      	cbz	r2, 8017526 <rcl_wait_set_add_timer+0x22>
 8017524:	6010      	str	r0, [r2, #0]
 8017526:	4608      	mov	r0, r1
 8017528:	f7ff faa4 	bl	8016a74 <rcl_timer_get_guard_condition>
 801752c:	b168      	cbz	r0, 801754a <rcl_wait_set_add_timer+0x46>
 801752e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017530:	68e3      	ldr	r3, [r4, #12]
 8017532:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017534:	3b01      	subs	r3, #1
 8017536:	441d      	add	r5, r3
 8017538:	f002 f902 	bl	8019740 <rcl_guard_condition_get_rmw_handle>
 801753c:	b180      	cbz	r0, 8017560 <rcl_wait_set_add_timer+0x5c>
 801753e:	6842      	ldr	r2, [r0, #4]
 8017540:	2000      	movs	r0, #0
 8017542:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017544:	695b      	ldr	r3, [r3, #20]
 8017546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801754a:	bd70      	pop	{r4, r5, r6, pc}
 801754c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017550:	bd70      	pop	{r4, r5, r6, pc}
 8017552:	f240 3086 	movw	r0, #902	; 0x386
 8017556:	bd70      	pop	{r4, r5, r6, pc}
 8017558:	200b      	movs	r0, #11
 801755a:	4770      	bx	lr
 801755c:	200b      	movs	r0, #11
 801755e:	bd70      	pop	{r4, r5, r6, pc}
 8017560:	2001      	movs	r0, #1
 8017562:	bd70      	pop	{r4, r5, r6, pc}

08017564 <rcl_wait_set_add_client>:
 8017564:	b320      	cbz	r0, 80175b0 <rcl_wait_set_add_client+0x4c>
 8017566:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017568:	b570      	push	{r4, r5, r6, lr}
 801756a:	4604      	mov	r4, r0
 801756c:	b1d3      	cbz	r3, 80175a4 <rcl_wait_set_add_client+0x40>
 801756e:	b319      	cbz	r1, 80175b8 <rcl_wait_set_add_client+0x54>
 8017570:	699d      	ldr	r5, [r3, #24]
 8017572:	69e0      	ldr	r0, [r4, #28]
 8017574:	4285      	cmp	r5, r0
 8017576:	d218      	bcs.n	80175aa <rcl_wait_set_add_client+0x46>
 8017578:	69a0      	ldr	r0, [r4, #24]
 801757a:	1c6e      	adds	r6, r5, #1
 801757c:	619e      	str	r6, [r3, #24]
 801757e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017582:	b102      	cbz	r2, 8017586 <rcl_wait_set_add_client+0x22>
 8017584:	6015      	str	r5, [r2, #0]
 8017586:	4608      	mov	r0, r1
 8017588:	f7fe f818 	bl	80155bc <rcl_client_get_rmw_handle>
 801758c:	b190      	cbz	r0, 80175b4 <rcl_wait_set_add_client+0x50>
 801758e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017590:	6842      	ldr	r2, [r0, #4]
 8017592:	6a1b      	ldr	r3, [r3, #32]
 8017594:	2000      	movs	r0, #0
 8017596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801759a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801759c:	69d3      	ldr	r3, [r2, #28]
 801759e:	3301      	adds	r3, #1
 80175a0:	61d3      	str	r3, [r2, #28]
 80175a2:	bd70      	pop	{r4, r5, r6, pc}
 80175a4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80175a8:	bd70      	pop	{r4, r5, r6, pc}
 80175aa:	f240 3086 	movw	r0, #902	; 0x386
 80175ae:	bd70      	pop	{r4, r5, r6, pc}
 80175b0:	200b      	movs	r0, #11
 80175b2:	4770      	bx	lr
 80175b4:	2001      	movs	r0, #1
 80175b6:	bd70      	pop	{r4, r5, r6, pc}
 80175b8:	200b      	movs	r0, #11
 80175ba:	bd70      	pop	{r4, r5, r6, pc}

080175bc <rcl_wait_set_add_service>:
 80175bc:	b320      	cbz	r0, 8017608 <rcl_wait_set_add_service+0x4c>
 80175be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80175c0:	b570      	push	{r4, r5, r6, lr}
 80175c2:	4604      	mov	r4, r0
 80175c4:	b1d3      	cbz	r3, 80175fc <rcl_wait_set_add_service+0x40>
 80175c6:	b319      	cbz	r1, 8017610 <rcl_wait_set_add_service+0x54>
 80175c8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80175ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80175cc:	4285      	cmp	r5, r0
 80175ce:	d218      	bcs.n	8017602 <rcl_wait_set_add_service+0x46>
 80175d0:	6a20      	ldr	r0, [r4, #32]
 80175d2:	1c6e      	adds	r6, r5, #1
 80175d4:	625e      	str	r6, [r3, #36]	; 0x24
 80175d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80175da:	b102      	cbz	r2, 80175de <rcl_wait_set_add_service+0x22>
 80175dc:	6015      	str	r5, [r2, #0]
 80175de:	4608      	mov	r0, r1
 80175e0:	f7fe fe42 	bl	8016268 <rcl_service_get_rmw_handle>
 80175e4:	b190      	cbz	r0, 801760c <rcl_wait_set_add_service+0x50>
 80175e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80175e8:	6842      	ldr	r2, [r0, #4]
 80175ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175ec:	2000      	movs	r0, #0
 80175ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80175f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80175f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80175f6:	3301      	adds	r3, #1
 80175f8:	6293      	str	r3, [r2, #40]	; 0x28
 80175fa:	bd70      	pop	{r4, r5, r6, pc}
 80175fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017600:	bd70      	pop	{r4, r5, r6, pc}
 8017602:	f240 3086 	movw	r0, #902	; 0x386
 8017606:	bd70      	pop	{r4, r5, r6, pc}
 8017608:	200b      	movs	r0, #11
 801760a:	4770      	bx	lr
 801760c:	2001      	movs	r0, #1
 801760e:	bd70      	pop	{r4, r5, r6, pc}
 8017610:	200b      	movs	r0, #11
 8017612:	bd70      	pop	{r4, r5, r6, pc}
 8017614:	0000      	movs	r0, r0
	...

08017618 <rcl_wait>:
 8017618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761c:	b08f      	sub	sp, #60	; 0x3c
 801761e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017622:	2800      	cmp	r0, #0
 8017624:	f000 8152 	beq.w	80178cc <rcl_wait+0x2b4>
 8017628:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801762a:	4604      	mov	r4, r0
 801762c:	2d00      	cmp	r5, #0
 801762e:	f000 80c0 	beq.w	80177b2 <rcl_wait+0x19a>
 8017632:	6843      	ldr	r3, [r0, #4]
 8017634:	b973      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 8017636:	68e3      	ldr	r3, [r4, #12]
 8017638:	b963      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 801763a:	6963      	ldr	r3, [r4, #20]
 801763c:	b953      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 801763e:	69e3      	ldr	r3, [r4, #28]
 8017640:	b943      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 8017642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017644:	b933      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 8017646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017648:	b923      	cbnz	r3, 8017654 <rcl_wait+0x3c>
 801764a:	f240 3085 	movw	r0, #901	; 0x385
 801764e:	b00f      	add	sp, #60	; 0x3c
 8017650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017658:	2a01      	cmp	r2, #1
 801765a:	f173 0300 	sbcs.w	r3, r3, #0
 801765e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017660:	db56      	blt.n	8017710 <rcl_wait+0xf8>
 8017662:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8017666:	2900      	cmp	r1, #0
 8017668:	f000 814f 	beq.w	801790a <rcl_wait+0x2f2>
 801766c:	2300      	movs	r3, #0
 801766e:	f04f 0800 	mov.w	r8, #0
 8017672:	f04f 0900 	mov.w	r9, #0
 8017676:	469b      	mov	fp, r3
 8017678:	9307      	str	r3, [sp, #28]
 801767a:	e00d      	b.n	8017698 <rcl_wait+0x80>
 801767c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801767e:	6922      	ldr	r2, [r4, #16]
 8017680:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8017682:	f842 000a 	str.w	r0, [r2, sl]
 8017686:	2300      	movs	r3, #0
 8017688:	f118 0801 	adds.w	r8, r8, #1
 801768c:	f149 0900 	adc.w	r9, r9, #0
 8017690:	4599      	cmp	r9, r3
 8017692:	bf08      	it	eq
 8017694:	4588      	cmpeq	r8, r1
 8017696:	d243      	bcs.n	8017720 <rcl_wait+0x108>
 8017698:	6922      	ldr	r2, [r4, #16]
 801769a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801769e:	f852 000a 	ldr.w	r0, [r2, sl]
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d0ef      	beq.n	8017686 <rcl_wait+0x6e>
 80176a6:	68e2      	ldr	r2, [r4, #12]
 80176a8:	6969      	ldr	r1, [r5, #20]
 80176aa:	4442      	add	r2, r8
 80176ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80176b0:	b13b      	cbz	r3, 80176c2 <rcl_wait+0xaa>
 80176b2:	692a      	ldr	r2, [r5, #16]
 80176b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80176b8:	6921      	ldr	r1, [r4, #16]
 80176ba:	3201      	adds	r2, #1
 80176bc:	f851 000a 	ldr.w	r0, [r1, sl]
 80176c0:	612a      	str	r2, [r5, #16]
 80176c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80176c6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80176ca:	f7ff f9c1 	bl	8016a50 <rcl_timer_is_canceled>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	d1bd      	bne.n	801764e <rcl_wait+0x36>
 80176d2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80176d6:	2a00      	cmp	r2, #0
 80176d8:	d1d0      	bne.n	801767c <rcl_wait+0x64>
 80176da:	6922      	ldr	r2, [r4, #16]
 80176dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80176e0:	f852 000a 	ldr.w	r0, [r2, sl]
 80176e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176e8:	a90a      	add	r1, sp, #40	; 0x28
 80176ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80176ee:	f7ff f98b 	bl	8016a08 <rcl_timer_get_time_until_next_call>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d1ab      	bne.n	801764e <rcl_wait+0x36>
 80176f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80176fa:	42b2      	cmp	r2, r6
 80176fc:	eb73 0107 	sbcs.w	r1, r3, r7
 8017700:	da03      	bge.n	801770a <rcl_wait+0xf2>
 8017702:	461f      	mov	r7, r3
 8017704:	2301      	movs	r3, #1
 8017706:	4616      	mov	r6, r2
 8017708:	9307      	str	r3, [sp, #28]
 801770a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801770c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801770e:	e7ba      	b.n	8017686 <rcl_wait+0x6e>
 8017710:	2900      	cmp	r1, #0
 8017712:	f000 80e4 	beq.w	80178de <rcl_wait+0x2c6>
 8017716:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801771a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801771e:	e7a5      	b.n	801766c <rcl_wait+0x54>
 8017720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017724:	4313      	orrs	r3, r2
 8017726:	d149      	bne.n	80177bc <rcl_wait+0x1a4>
 8017728:	2300      	movs	r3, #0
 801772a:	2200      	movs	r2, #0
 801772c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017730:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017734:	ab0a      	add	r3, sp, #40	; 0x28
 8017736:	9302      	str	r3, [sp, #8]
 8017738:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801773a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 801773e:	e9cd 3200 	strd	r3, r2, [sp]
 8017742:	f105 0110 	add.w	r1, r5, #16
 8017746:	f105 031c 	add.w	r3, r5, #28
 801774a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801774e:	1d28      	adds	r0, r5, #4
 8017750:	f000 fec4 	bl	80184dc <rmw_wait>
 8017754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017756:	4607      	mov	r7, r0
 8017758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801775a:	b32a      	cbz	r2, 80177a8 <rcl_wait+0x190>
 801775c:	f04f 0800 	mov.w	r8, #0
 8017760:	4646      	mov	r6, r8
 8017762:	e005      	b.n	8017770 <rcl_wait+0x158>
 8017764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017768:	f108 0801 	add.w	r8, r8, #1
 801776c:	4542      	cmp	r2, r8
 801776e:	d91b      	bls.n	80177a8 <rcl_wait+0x190>
 8017770:	6922      	ldr	r2, [r4, #16]
 8017772:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8017776:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801777a:	2800      	cmp	r0, #0
 801777c:	d0f3      	beq.n	8017766 <rcl_wait+0x14e>
 801777e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8017782:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8017786:	f7ff f907 	bl	8016998 <rcl_timer_is_ready>
 801778a:	2800      	cmp	r0, #0
 801778c:	f47f af5f 	bne.w	801764e <rcl_wait+0x36>
 8017790:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8017794:	2a00      	cmp	r2, #0
 8017796:	d1e5      	bne.n	8017764 <rcl_wait+0x14c>
 8017798:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801779a:	6921      	ldr	r1, [r4, #16]
 801779c:	f108 0801 	add.w	r8, r8, #1
 80177a0:	514a      	str	r2, [r1, r5]
 80177a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80177a4:	4542      	cmp	r2, r8
 80177a6:	d8e3      	bhi.n	8017770 <rcl_wait+0x158>
 80177a8:	f037 0002 	bics.w	r0, r7, #2
 80177ac:	d02c      	beq.n	8017808 <rcl_wait+0x1f0>
 80177ae:	2001      	movs	r0, #1
 80177b0:	e74d      	b.n	801764e <rcl_wait+0x36>
 80177b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80177b6:	b00f      	add	sp, #60	; 0x3c
 80177b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80177c0:	2a01      	cmp	r2, #1
 80177c2:	f173 0300 	sbcs.w	r3, r3, #0
 80177c6:	f2c0 8085 	blt.w	80178d4 <rcl_wait+0x2bc>
 80177ca:	2e00      	cmp	r6, #0
 80177cc:	f177 0300 	sbcs.w	r3, r7, #0
 80177d0:	bfb8      	it	lt
 80177d2:	2600      	movlt	r6, #0
 80177d4:	a34e      	add	r3, pc, #312	; (adr r3, 8017910 <rcl_wait+0x2f8>)
 80177d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177da:	bfb8      	it	lt
 80177dc:	2700      	movlt	r7, #0
 80177de:	4630      	mov	r0, r6
 80177e0:	4639      	mov	r1, r7
 80177e2:	f7e9 fd15 	bl	8001210 <__aeabi_ldivmod>
 80177e6:	a34a      	add	r3, pc, #296	; (adr r3, 8017910 <rcl_wait+0x2f8>)
 80177e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ec:	4680      	mov	r8, r0
 80177ee:	4689      	mov	r9, r1
 80177f0:	4630      	mov	r0, r6
 80177f2:	4639      	mov	r1, r7
 80177f4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80177f8:	f7e9 fd0a 	bl	8001210 <__aeabi_ldivmod>
 80177fc:	4619      	mov	r1, r3
 80177fe:	4610      	mov	r0, r2
 8017800:	ab0a      	add	r3, sp, #40	; 0x28
 8017802:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017806:	e796      	b.n	8017736 <rcl_wait+0x11e>
 8017808:	6866      	ldr	r6, [r4, #4]
 801780a:	4602      	mov	r2, r0
 801780c:	b91e      	cbnz	r6, 8017816 <rcl_wait+0x1fe>
 801780e:	e00d      	b.n	801782c <rcl_wait+0x214>
 8017810:	3201      	adds	r2, #1
 8017812:	42b2      	cmp	r2, r6
 8017814:	d00a      	beq.n	801782c <rcl_wait+0x214>
 8017816:	6899      	ldr	r1, [r3, #8]
 8017818:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801781c:	2900      	cmp	r1, #0
 801781e:	d1f7      	bne.n	8017810 <rcl_wait+0x1f8>
 8017820:	6825      	ldr	r5, [r4, #0]
 8017822:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017826:	3201      	adds	r2, #1
 8017828:	42b2      	cmp	r2, r6
 801782a:	d1f4      	bne.n	8017816 <rcl_wait+0x1fe>
 801782c:	68e6      	ldr	r6, [r4, #12]
 801782e:	2200      	movs	r2, #0
 8017830:	b91e      	cbnz	r6, 801783a <rcl_wait+0x222>
 8017832:	e00d      	b.n	8017850 <rcl_wait+0x238>
 8017834:	3201      	adds	r2, #1
 8017836:	42b2      	cmp	r2, r6
 8017838:	d00a      	beq.n	8017850 <rcl_wait+0x238>
 801783a:	6959      	ldr	r1, [r3, #20]
 801783c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017840:	2900      	cmp	r1, #0
 8017842:	d1f7      	bne.n	8017834 <rcl_wait+0x21c>
 8017844:	68a5      	ldr	r5, [r4, #8]
 8017846:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801784a:	3201      	adds	r2, #1
 801784c:	42b2      	cmp	r2, r6
 801784e:	d1f4      	bne.n	801783a <rcl_wait+0x222>
 8017850:	69e6      	ldr	r6, [r4, #28]
 8017852:	2200      	movs	r2, #0
 8017854:	b91e      	cbnz	r6, 801785e <rcl_wait+0x246>
 8017856:	e00d      	b.n	8017874 <rcl_wait+0x25c>
 8017858:	3201      	adds	r2, #1
 801785a:	42b2      	cmp	r2, r6
 801785c:	d00a      	beq.n	8017874 <rcl_wait+0x25c>
 801785e:	6a19      	ldr	r1, [r3, #32]
 8017860:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017864:	2900      	cmp	r1, #0
 8017866:	d1f7      	bne.n	8017858 <rcl_wait+0x240>
 8017868:	69a5      	ldr	r5, [r4, #24]
 801786a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801786e:	3201      	adds	r2, #1
 8017870:	42b2      	cmp	r2, r6
 8017872:	d1f4      	bne.n	801785e <rcl_wait+0x246>
 8017874:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017876:	2200      	movs	r2, #0
 8017878:	b91e      	cbnz	r6, 8017882 <rcl_wait+0x26a>
 801787a:	e00d      	b.n	8017898 <rcl_wait+0x280>
 801787c:	3201      	adds	r2, #1
 801787e:	4296      	cmp	r6, r2
 8017880:	d00a      	beq.n	8017898 <rcl_wait+0x280>
 8017882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017884:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017888:	2900      	cmp	r1, #0
 801788a:	d1f7      	bne.n	801787c <rcl_wait+0x264>
 801788c:	6a25      	ldr	r5, [r4, #32]
 801788e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8017892:	3201      	adds	r2, #1
 8017894:	4296      	cmp	r6, r2
 8017896:	d1f4      	bne.n	8017882 <rcl_wait+0x26a>
 8017898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801789a:	2200      	movs	r2, #0
 801789c:	b91e      	cbnz	r6, 80178a6 <rcl_wait+0x28e>
 801789e:	e00d      	b.n	80178bc <rcl_wait+0x2a4>
 80178a0:	3201      	adds	r2, #1
 80178a2:	42b2      	cmp	r2, r6
 80178a4:	d00a      	beq.n	80178bc <rcl_wait+0x2a4>
 80178a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80178a8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80178ac:	2900      	cmp	r1, #0
 80178ae:	d1f7      	bne.n	80178a0 <rcl_wait+0x288>
 80178b0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80178b2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80178b6:	3201      	adds	r2, #1
 80178b8:	42b2      	cmp	r2, r6
 80178ba:	d1f4      	bne.n	80178a6 <rcl_wait+0x28e>
 80178bc:	2f02      	cmp	r7, #2
 80178be:	f47f aec6 	bne.w	801764e <rcl_wait+0x36>
 80178c2:	9b07      	ldr	r3, [sp, #28]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	bf08      	it	eq
 80178c8:	2002      	moveq	r0, #2
 80178ca:	e6c0      	b.n	801764e <rcl_wait+0x36>
 80178cc:	200b      	movs	r0, #11
 80178ce:	b00f      	add	sp, #60	; 0x3c
 80178d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d4:	9b07      	ldr	r3, [sp, #28]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f47f af77 	bne.w	80177ca <rcl_wait+0x1b2>
 80178dc:	e72b      	b.n	8017736 <rcl_wait+0x11e>
 80178de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80178e2:	4313      	orrs	r3, r2
 80178e4:	bf08      	it	eq
 80178e6:	9107      	streq	r1, [sp, #28]
 80178e8:	f43f af1e 	beq.w	8017728 <rcl_wait+0x110>
 80178ec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80178f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80178f4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80178f8:	2a01      	cmp	r2, #1
 80178fa:	f173 0300 	sbcs.w	r3, r3, #0
 80178fe:	f04f 0300 	mov.w	r3, #0
 8017902:	9307      	str	r3, [sp, #28]
 8017904:	f6bf af61 	bge.w	80177ca <rcl_wait+0x1b2>
 8017908:	e715      	b.n	8017736 <rcl_wait+0x11e>
 801790a:	4632      	mov	r2, r6
 801790c:	463b      	mov	r3, r7
 801790e:	e7f3      	b.n	80178f8 <rcl_wait+0x2e0>
 8017910:	3b9aca00 	.word	0x3b9aca00
 8017914:	00000000 	.word	0x00000000

08017918 <__atomic_load_8>:
 8017918:	f04f 0101 	mov.w	r1, #1
 801791c:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 8017920:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 8017924:	4b13      	ldr	r3, [pc, #76]	; (8017974 <__atomic_load_8+0x5c>)
 8017926:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801792a:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 801792e:	fb03 f302 	mul.w	r3, r3, r2
 8017932:	4a11      	ldr	r2, [pc, #68]	; (8017978 <__atomic_load_8+0x60>)
 8017934:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8017938:	b430      	push	{r4, r5}
 801793a:	fba2 4203 	umull	r4, r2, r2, r3
 801793e:	0912      	lsrs	r2, r2, #4
 8017940:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8017944:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 8017948:	4c0c      	ldr	r4, [pc, #48]	; (801797c <__atomic_load_8+0x64>)
 801794a:	1a9b      	subs	r3, r3, r2
 801794c:	18e5      	adds	r5, r4, r3
 801794e:	e8d5 2f4f 	ldrexb	r2, [r5]
 8017952:	e8c5 1f4c 	strexb	ip, r1, [r5]
 8017956:	f1bc 0f00 	cmp.w	ip, #0
 801795a:	d1f8      	bne.n	801794e <__atomic_load_8+0x36>
 801795c:	b2d2      	uxtb	r2, r2
 801795e:	f3bf 8f5b 	dmb	ish
 8017962:	2a00      	cmp	r2, #0
 8017964:	d1f3      	bne.n	801794e <__atomic_load_8+0x36>
 8017966:	c803      	ldmia	r0, {r0, r1}
 8017968:	f3bf 8f5b 	dmb	ish
 801796c:	54e2      	strb	r2, [r4, r3]
 801796e:	bc30      	pop	{r4, r5}
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	27d4eb2d 	.word	0x27d4eb2d
 8017978:	b21642c9 	.word	0xb21642c9
 801797c:	20006868 	.word	0x20006868

08017980 <__atomic_store_8>:
 8017980:	b4f0      	push	{r4, r5, r6, r7}
 8017982:	f04f 0501 	mov.w	r5, #1
 8017986:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 801798a:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 801798e:	4913      	ldr	r1, [pc, #76]	; (80179dc <__atomic_store_8+0x5c>)
 8017990:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8017994:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 8017998:	fb01 f104 	mul.w	r1, r1, r4
 801799c:	4c10      	ldr	r4, [pc, #64]	; (80179e0 <__atomic_store_8+0x60>)
 801799e:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80179a2:	fba4 6401 	umull	r6, r4, r4, r1
 80179a6:	0924      	lsrs	r4, r4, #4
 80179a8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80179ac:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 80179b0:	4e0c      	ldr	r6, [pc, #48]	; (80179e4 <__atomic_store_8+0x64>)
 80179b2:	1b09      	subs	r1, r1, r4
 80179b4:	1877      	adds	r7, r6, r1
 80179b6:	e8d7 4f4f 	ldrexb	r4, [r7]
 80179ba:	e8c7 5f4c 	strexb	ip, r5, [r7]
 80179be:	f1bc 0f00 	cmp.w	ip, #0
 80179c2:	d1f8      	bne.n	80179b6 <__atomic_store_8+0x36>
 80179c4:	b2e4      	uxtb	r4, r4
 80179c6:	f3bf 8f5b 	dmb	ish
 80179ca:	2c00      	cmp	r4, #0
 80179cc:	d1f3      	bne.n	80179b6 <__atomic_store_8+0x36>
 80179ce:	e9c0 2300 	strd	r2, r3, [r0]
 80179d2:	f3bf 8f5b 	dmb	ish
 80179d6:	5474      	strb	r4, [r6, r1]
 80179d8:	bcf0      	pop	{r4, r5, r6, r7}
 80179da:	4770      	bx	lr
 80179dc:	27d4eb2d 	.word	0x27d4eb2d
 80179e0:	b21642c9 	.word	0xb21642c9
 80179e4:	20006868 	.word	0x20006868

080179e8 <__atomic_exchange_8>:
 80179e8:	b4f0      	push	{r4, r5, r6, r7}
 80179ea:	4605      	mov	r5, r0
 80179ec:	f04f 0001 	mov.w	r0, #1
 80179f0:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 80179f4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80179f8:	4c14      	ldr	r4, [pc, #80]	; (8017a4c <__atomic_exchange_8+0x64>)
 80179fa:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80179fe:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017a02:	fb04 f401 	mul.w	r4, r4, r1
 8017a06:	4912      	ldr	r1, [pc, #72]	; (8017a50 <__atomic_exchange_8+0x68>)
 8017a08:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8017a0c:	fba1 6104 	umull	r6, r1, r1, r4
 8017a10:	0909      	lsrs	r1, r1, #4
 8017a12:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8017a16:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8017a1a:	4f0e      	ldr	r7, [pc, #56]	; (8017a54 <__atomic_exchange_8+0x6c>)
 8017a1c:	1a64      	subs	r4, r4, r1
 8017a1e:	1939      	adds	r1, r7, r4
 8017a20:	e8d1 6f4f 	ldrexb	r6, [r1]
 8017a24:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8017a28:	f1bc 0f00 	cmp.w	ip, #0
 8017a2c:	d1f8      	bne.n	8017a20 <__atomic_exchange_8+0x38>
 8017a2e:	b2f6      	uxtb	r6, r6
 8017a30:	f3bf 8f5b 	dmb	ish
 8017a34:	2e00      	cmp	r6, #0
 8017a36:	d1f3      	bne.n	8017a20 <__atomic_exchange_8+0x38>
 8017a38:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017a3c:	e9c5 2300 	strd	r2, r3, [r5]
 8017a40:	f3bf 8f5b 	dmb	ish
 8017a44:	553e      	strb	r6, [r7, r4]
 8017a46:	bcf0      	pop	{r4, r5, r6, r7}
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	27d4eb2d 	.word	0x27d4eb2d
 8017a50:	b21642c9 	.word	0xb21642c9
 8017a54:	20006868 	.word	0x20006868

08017a58 <__atomic_fetch_add_8>:
 8017a58:	b4f0      	push	{r4, r5, r6, r7}
 8017a5a:	4605      	mov	r5, r0
 8017a5c:	f04f 0001 	mov.w	r0, #1
 8017a60:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8017a64:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8017a68:	4c15      	ldr	r4, [pc, #84]	; (8017ac0 <__atomic_fetch_add_8+0x68>)
 8017a6a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017a6e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017a72:	fb04 f401 	mul.w	r4, r4, r1
 8017a76:	4913      	ldr	r1, [pc, #76]	; (8017ac4 <__atomic_fetch_add_8+0x6c>)
 8017a78:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8017a7c:	fba1 6104 	umull	r6, r1, r1, r4
 8017a80:	0909      	lsrs	r1, r1, #4
 8017a82:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8017a86:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8017a8a:	4f0f      	ldr	r7, [pc, #60]	; (8017ac8 <__atomic_fetch_add_8+0x70>)
 8017a8c:	1a64      	subs	r4, r4, r1
 8017a8e:	1939      	adds	r1, r7, r4
 8017a90:	e8d1 6f4f 	ldrexb	r6, [r1]
 8017a94:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8017a98:	f1bc 0f00 	cmp.w	ip, #0
 8017a9c:	d1f8      	bne.n	8017a90 <__atomic_fetch_add_8+0x38>
 8017a9e:	b2f6      	uxtb	r6, r6
 8017aa0:	f3bf 8f5b 	dmb	ish
 8017aa4:	2e00      	cmp	r6, #0
 8017aa6:	d1f3      	bne.n	8017a90 <__atomic_fetch_add_8+0x38>
 8017aa8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017aac:	1882      	adds	r2, r0, r2
 8017aae:	eb41 0303 	adc.w	r3, r1, r3
 8017ab2:	e9c5 2300 	strd	r2, r3, [r5]
 8017ab6:	f3bf 8f5b 	dmb	ish
 8017aba:	553e      	strb	r6, [r7, r4]
 8017abc:	bcf0      	pop	{r4, r5, r6, r7}
 8017abe:	4770      	bx	lr
 8017ac0:	27d4eb2d 	.word	0x27d4eb2d
 8017ac4:	b21642c9 	.word	0xb21642c9
 8017ac8:	20006868 	.word	0x20006868

08017acc <rcutils_is_directory>:
 8017acc:	2000      	movs	r0, #0
 8017ace:	4770      	bx	lr

08017ad0 <rcutils_join_path>:
 8017ad0:	b082      	sub	sp, #8
 8017ad2:	2000      	movs	r0, #0
 8017ad4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017ad8:	b002      	add	sp, #8
 8017ada:	4770      	bx	lr

08017adc <rcutils_to_native_path>:
 8017adc:	b084      	sub	sp, #16
 8017ade:	a801      	add	r0, sp, #4
 8017ae0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8017ae4:	b004      	add	sp, #16
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	4770      	bx	lr
 8017aea:	bf00      	nop

08017aec <rcutils_format_string_limit>:
 8017aec:	b40f      	push	{r0, r1, r2, r3}
 8017aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017af0:	b083      	sub	sp, #12
 8017af2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017af4:	ac08      	add	r4, sp, #32
 8017af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017afa:	b34e      	cbz	r6, 8017b50 <rcutils_format_string_limit+0x64>
 8017afc:	a808      	add	r0, sp, #32
 8017afe:	f7f7 fc37 	bl	800f370 <rcutils_allocator_is_valid>
 8017b02:	b328      	cbz	r0, 8017b50 <rcutils_format_string_limit+0x64>
 8017b04:	2100      	movs	r1, #0
 8017b06:	ab0f      	add	r3, sp, #60	; 0x3c
 8017b08:	4608      	mov	r0, r1
 8017b0a:	4632      	mov	r2, r6
 8017b0c:	e9cd 3300 	strd	r3, r3, [sp]
 8017b10:	f000 f8f4 	bl	8017cfc <rcutils_vsnprintf>
 8017b14:	1c43      	adds	r3, r0, #1
 8017b16:	4605      	mov	r5, r0
 8017b18:	d01a      	beq.n	8017b50 <rcutils_format_string_limit+0x64>
 8017b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b1c:	1c47      	adds	r7, r0, #1
 8017b1e:	429f      	cmp	r7, r3
 8017b20:	bf84      	itt	hi
 8017b22:	461f      	movhi	r7, r3
 8017b24:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8017b28:	4638      	mov	r0, r7
 8017b2a:	9b08      	ldr	r3, [sp, #32]
 8017b2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b2e:	4798      	blx	r3
 8017b30:	4604      	mov	r4, r0
 8017b32:	b168      	cbz	r0, 8017b50 <rcutils_format_string_limit+0x64>
 8017b34:	4632      	mov	r2, r6
 8017b36:	4639      	mov	r1, r7
 8017b38:	9b01      	ldr	r3, [sp, #4]
 8017b3a:	f000 f8df 	bl	8017cfc <rcutils_vsnprintf>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	db02      	blt.n	8017b48 <rcutils_format_string_limit+0x5c>
 8017b42:	2300      	movs	r3, #0
 8017b44:	5563      	strb	r3, [r4, r5]
 8017b46:	e004      	b.n	8017b52 <rcutils_format_string_limit+0x66>
 8017b48:	4620      	mov	r0, r4
 8017b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b4e:	4798      	blx	r3
 8017b50:	2400      	movs	r4, #0
 8017b52:	4620      	mov	r0, r4
 8017b54:	b003      	add	sp, #12
 8017b56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017b5a:	b004      	add	sp, #16
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop

08017b60 <rcutils_get_env>:
 8017b60:	b168      	cbz	r0, 8017b7e <rcutils_get_env+0x1e>
 8017b62:	b510      	push	{r4, lr}
 8017b64:	460c      	mov	r4, r1
 8017b66:	b129      	cbz	r1, 8017b74 <rcutils_get_env+0x14>
 8017b68:	f001 fec6 	bl	80198f8 <getenv>
 8017b6c:	b120      	cbz	r0, 8017b78 <rcutils_get_env+0x18>
 8017b6e:	6020      	str	r0, [r4, #0]
 8017b70:	2000      	movs	r0, #0
 8017b72:	bd10      	pop	{r4, pc}
 8017b74:	4803      	ldr	r0, [pc, #12]	; (8017b84 <rcutils_get_env+0x24>)
 8017b76:	bd10      	pop	{r4, pc}
 8017b78:	4b03      	ldr	r3, [pc, #12]	; (8017b88 <rcutils_get_env+0x28>)
 8017b7a:	6023      	str	r3, [r4, #0]
 8017b7c:	bd10      	pop	{r4, pc}
 8017b7e:	4803      	ldr	r0, [pc, #12]	; (8017b8c <rcutils_get_env+0x2c>)
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	0801c910 	.word	0x0801c910
 8017b88:	0801ca34 	.word	0x0801ca34
 8017b8c:	0801c8f4 	.word	0x0801c8f4

08017b90 <rcutils_repl_str>:
 8017b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b94:	4680      	mov	r8, r0
 8017b96:	b089      	sub	sp, #36	; 0x24
 8017b98:	4608      	mov	r0, r1
 8017b9a:	2600      	movs	r6, #0
 8017b9c:	468a      	mov	sl, r1
 8017b9e:	4699      	mov	r9, r3
 8017ba0:	f8cd 8004 	str.w	r8, [sp, #4]
 8017ba4:	9206      	str	r2, [sp, #24]
 8017ba6:	f7e8 fb4d 	bl	8000244 <strlen>
 8017baa:	4637      	mov	r7, r6
 8017bac:	46b3      	mov	fp, r6
 8017bae:	2510      	movs	r5, #16
 8017bb0:	9002      	str	r0, [sp, #8]
 8017bb2:	e01e      	b.n	8017bf2 <rcutils_repl_str+0x62>
 8017bb4:	f10b 0b01 	add.w	fp, fp, #1
 8017bb8:	455e      	cmp	r6, fp
 8017bba:	d211      	bcs.n	8017be0 <rcutils_repl_str+0x50>
 8017bbc:	442e      	add	r6, r5
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017bc4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017bc8:	00b1      	lsls	r1, r6, #2
 8017bca:	4798      	blx	r3
 8017bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bd0:	2800      	cmp	r0, #0
 8017bd2:	d074      	beq.n	8017cbe <rcutils_repl_str+0x12e>
 8017bd4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8017bd8:	bf28      	it	cs
 8017bda:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8017bde:	4607      	mov	r7, r0
 8017be0:	9a01      	ldr	r2, [sp, #4]
 8017be2:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8017be6:	1aa2      	subs	r2, r4, r2
 8017be8:	f843 2c04 	str.w	r2, [r3, #-4]
 8017bec:	9b02      	ldr	r3, [sp, #8]
 8017bee:	eb04 0803 	add.w	r8, r4, r3
 8017bf2:	4651      	mov	r1, sl
 8017bf4:	4640      	mov	r0, r8
 8017bf6:	f002 f903 	bl	8019e00 <strstr>
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	d1d9      	bne.n	8017bb4 <rcutils_repl_str+0x24>
 8017c00:	4640      	mov	r0, r8
 8017c02:	f7e8 fb1f 	bl	8000244 <strlen>
 8017c06:	9b01      	ldr	r3, [sp, #4]
 8017c08:	eba8 0303 	sub.w	r3, r8, r3
 8017c0c:	181d      	adds	r5, r3, r0
 8017c0e:	9505      	str	r5, [sp, #20]
 8017c10:	f1bb 0f00 	cmp.w	fp, #0
 8017c14:	d03d      	beq.n	8017c92 <rcutils_repl_str+0x102>
 8017c16:	9806      	ldr	r0, [sp, #24]
 8017c18:	f7e8 fb14 	bl	8000244 <strlen>
 8017c1c:	9b02      	ldr	r3, [sp, #8]
 8017c1e:	4682      	mov	sl, r0
 8017c20:	1ac3      	subs	r3, r0, r3
 8017c22:	fb0b 5303 	mla	r3, fp, r3, r5
 8017c26:	461a      	mov	r2, r3
 8017c28:	9307      	str	r3, [sp, #28]
 8017c2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017c2e:	f8d9 3000 	ldr.w	r3, [r9]
 8017c32:	1c50      	adds	r0, r2, #1
 8017c34:	4798      	blx	r3
 8017c36:	9004      	str	r0, [sp, #16]
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	d040      	beq.n	8017cbe <rcutils_repl_str+0x12e>
 8017c3c:	463e      	mov	r6, r7
 8017c3e:	683a      	ldr	r2, [r7, #0]
 8017c40:	9901      	ldr	r1, [sp, #4]
 8017c42:	f001 fed3 	bl	80199ec <memcpy>
 8017c46:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8017c4a:	683d      	ldr	r5, [r7, #0]
 8017c4c:	9303      	str	r3, [sp, #12]
 8017c4e:	9b04      	ldr	r3, [sp, #16]
 8017c50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017c54:	441d      	add	r5, r3
 8017c56:	4652      	mov	r2, sl
 8017c58:	4641      	mov	r1, r8
 8017c5a:	4628      	mov	r0, r5
 8017c5c:	f001 fec6 	bl	80199ec <memcpy>
 8017c60:	f856 2b04 	ldr.w	r2, [r6], #4
 8017c64:	9b02      	ldr	r3, [sp, #8]
 8017c66:	eb05 000a 	add.w	r0, r5, sl
 8017c6a:	441a      	add	r2, r3
 8017c6c:	9b01      	ldr	r3, [sp, #4]
 8017c6e:	1899      	adds	r1, r3, r2
 8017c70:	9b03      	ldr	r3, [sp, #12]
 8017c72:	429c      	cmp	r4, r3
 8017c74:	bf0c      	ite	eq
 8017c76:	9b05      	ldreq	r3, [sp, #20]
 8017c78:	6833      	ldrne	r3, [r6, #0]
 8017c7a:	3401      	adds	r4, #1
 8017c7c:	1a9a      	subs	r2, r3, r2
 8017c7e:	1885      	adds	r5, r0, r2
 8017c80:	f001 feb4 	bl	80199ec <memcpy>
 8017c84:	455c      	cmp	r4, fp
 8017c86:	d3e6      	bcc.n	8017c56 <rcutils_repl_str+0xc6>
 8017c88:	2300      	movs	r3, #0
 8017c8a:	9a04      	ldr	r2, [sp, #16]
 8017c8c:	9907      	ldr	r1, [sp, #28]
 8017c8e:	5453      	strb	r3, [r2, r1]
 8017c90:	e00b      	b.n	8017caa <rcutils_repl_str+0x11a>
 8017c92:	4628      	mov	r0, r5
 8017c94:	f8d9 3000 	ldr.w	r3, [r9]
 8017c98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017c9c:	3001      	adds	r0, #1
 8017c9e:	4798      	blx	r3
 8017ca0:	9004      	str	r0, [sp, #16]
 8017ca2:	b110      	cbz	r0, 8017caa <rcutils_repl_str+0x11a>
 8017ca4:	9901      	ldr	r1, [sp, #4]
 8017ca6:	f002 f884 	bl	8019db2 <strcpy>
 8017caa:	4638      	mov	r0, r7
 8017cac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017cb0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017cb4:	4798      	blx	r3
 8017cb6:	9804      	ldr	r0, [sp, #16]
 8017cb8:	b009      	add	sp, #36	; 0x24
 8017cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	9304      	str	r3, [sp, #16]
 8017cc2:	e7f2      	b.n	8017caa <rcutils_repl_str+0x11a>

08017cc4 <rcutils_snprintf>:
 8017cc4:	b40c      	push	{r2, r3}
 8017cc6:	b530      	push	{r4, r5, lr}
 8017cc8:	b083      	sub	sp, #12
 8017cca:	ab06      	add	r3, sp, #24
 8017ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	b152      	cbz	r2, 8017cea <rcutils_snprintf+0x26>
 8017cd4:	b138      	cbz	r0, 8017ce6 <rcutils_snprintf+0x22>
 8017cd6:	b141      	cbz	r1, 8017cea <rcutils_snprintf+0x26>
 8017cd8:	f002 f95c 	bl	8019f94 <vsniprintf>
 8017cdc:	b003      	add	sp, #12
 8017cde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ce2:	b002      	add	sp, #8
 8017ce4:	4770      	bx	lr
 8017ce6:	2900      	cmp	r1, #0
 8017ce8:	d0f6      	beq.n	8017cd8 <rcutils_snprintf+0x14>
 8017cea:	f001 fdff 	bl	80198ec <__errno>
 8017cee:	2216      	movs	r2, #22
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	e7f0      	b.n	8017cdc <rcutils_snprintf+0x18>
 8017cfa:	bf00      	nop

08017cfc <rcutils_vsnprintf>:
 8017cfc:	b570      	push	{r4, r5, r6, lr}
 8017cfe:	b13a      	cbz	r2, 8017d10 <rcutils_vsnprintf+0x14>
 8017d00:	b120      	cbz	r0, 8017d0c <rcutils_vsnprintf+0x10>
 8017d02:	b129      	cbz	r1, 8017d10 <rcutils_vsnprintf+0x14>
 8017d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d08:	f002 b944 	b.w	8019f94 <vsniprintf>
 8017d0c:	2900      	cmp	r1, #0
 8017d0e:	d0f9      	beq.n	8017d04 <rcutils_vsnprintf+0x8>
 8017d10:	f001 fdec 	bl	80198ec <__errno>
 8017d14:	2316      	movs	r3, #22
 8017d16:	6003      	str	r3, [r0, #0]
 8017d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d1c:	bd70      	pop	{r4, r5, r6, pc}
 8017d1e:	bf00      	nop

08017d20 <rcutils_strdup>:
 8017d20:	b084      	sub	sp, #16
 8017d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d24:	ac07      	add	r4, sp, #28
 8017d26:	4605      	mov	r5, r0
 8017d28:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017d2c:	b1a0      	cbz	r0, 8017d58 <rcutils_strdup+0x38>
 8017d2e:	f7e8 fa89 	bl	8000244 <strlen>
 8017d32:	1c47      	adds	r7, r0, #1
 8017d34:	4606      	mov	r6, r0
 8017d36:	9b07      	ldr	r3, [sp, #28]
 8017d38:	4638      	mov	r0, r7
 8017d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d3c:	4798      	blx	r3
 8017d3e:	4604      	mov	r4, r0
 8017d40:	b128      	cbz	r0, 8017d4e <rcutils_strdup+0x2e>
 8017d42:	463a      	mov	r2, r7
 8017d44:	4629      	mov	r1, r5
 8017d46:	f001 fe51 	bl	80199ec <memcpy>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	55a3      	strb	r3, [r4, r6]
 8017d4e:	4620      	mov	r0, r4
 8017d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d54:	b004      	add	sp, #16
 8017d56:	4770      	bx	lr
 8017d58:	4604      	mov	r4, r0
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d60:	b004      	add	sp, #16
 8017d62:	4770      	bx	lr

08017d64 <rcutils_strndup>:
 8017d64:	b082      	sub	sp, #8
 8017d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d68:	ac06      	add	r4, sp, #24
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	e884 000c 	stmia.w	r4, {r2, r3}
 8017d70:	b188      	cbz	r0, 8017d96 <rcutils_strndup+0x32>
 8017d72:	1c4f      	adds	r7, r1, #1
 8017d74:	460e      	mov	r6, r1
 8017d76:	4638      	mov	r0, r7
 8017d78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d7a:	4790      	blx	r2
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	b128      	cbz	r0, 8017d8c <rcutils_strndup+0x28>
 8017d80:	463a      	mov	r2, r7
 8017d82:	4629      	mov	r1, r5
 8017d84:	f001 fe32 	bl	80199ec <memcpy>
 8017d88:	2300      	movs	r3, #0
 8017d8a:	55a3      	strb	r3, [r4, r6]
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d92:	b002      	add	sp, #8
 8017d94:	4770      	bx	lr
 8017d96:	4604      	mov	r4, r0
 8017d98:	e7f8      	b.n	8017d8c <rcutils_strndup+0x28>
 8017d9a:	bf00      	nop

08017d9c <rmw_get_zero_initialized_context>:
 8017d9c:	b510      	push	{r4, lr}
 8017d9e:	4604      	mov	r4, r0
 8017da0:	2250      	movs	r2, #80	; 0x50
 8017da2:	2100      	movs	r1, #0
 8017da4:	f001 fe4a 	bl	8019a3c <memset>
 8017da8:	4620      	mov	r0, r4
 8017daa:	bd10      	pop	{r4, pc}

08017dac <rmw_validate_namespace_with_size>:
 8017dac:	b340      	cbz	r0, 8017e00 <rmw_validate_namespace_with_size+0x54>
 8017dae:	b5d0      	push	{r4, r6, r7, lr}
 8017db0:	4614      	mov	r4, r2
 8017db2:	b0c2      	sub	sp, #264	; 0x108
 8017db4:	b332      	cbz	r2, 8017e04 <rmw_validate_namespace_with_size+0x58>
 8017db6:	2901      	cmp	r1, #1
 8017db8:	460f      	mov	r7, r1
 8017dba:	461e      	mov	r6, r3
 8017dbc:	d102      	bne.n	8017dc4 <rmw_validate_namespace_with_size+0x18>
 8017dbe:	7803      	ldrb	r3, [r0, #0]
 8017dc0:	2b2f      	cmp	r3, #47	; 0x2f
 8017dc2:	d019      	beq.n	8017df8 <rmw_validate_namespace_with_size+0x4c>
 8017dc4:	4669      	mov	r1, sp
 8017dc6:	aa01      	add	r2, sp, #4
 8017dc8:	f7f7 fd80 	bl	800f8cc <rmw_validate_full_topic_name>
 8017dcc:	b990      	cbnz	r0, 8017df4 <rmw_validate_namespace_with_size+0x48>
 8017dce:	9b00      	ldr	r3, [sp, #0]
 8017dd0:	b14b      	cbz	r3, 8017de6 <rmw_validate_namespace_with_size+0x3a>
 8017dd2:	2b07      	cmp	r3, #7
 8017dd4:	d007      	beq.n	8017de6 <rmw_validate_namespace_with_size+0x3a>
 8017dd6:	1e5a      	subs	r2, r3, #1
 8017dd8:	2a05      	cmp	r2, #5
 8017dda:	d82b      	bhi.n	8017e34 <rmw_validate_namespace_with_size+0x88>
 8017ddc:	e8df f002 	tbb	[pc, r2]
 8017de0:	24211e1b 	.word	0x24211e1b
 8017de4:	1427      	.short	0x1427
 8017de6:	2ff5      	cmp	r7, #245	; 0xf5
 8017de8:	d906      	bls.n	8017df8 <rmw_validate_namespace_with_size+0x4c>
 8017dea:	2307      	movs	r3, #7
 8017dec:	6023      	str	r3, [r4, #0]
 8017dee:	b10e      	cbz	r6, 8017df4 <rmw_validate_namespace_with_size+0x48>
 8017df0:	23f4      	movs	r3, #244	; 0xf4
 8017df2:	6033      	str	r3, [r6, #0]
 8017df4:	b042      	add	sp, #264	; 0x108
 8017df6:	bdd0      	pop	{r4, r6, r7, pc}
 8017df8:	2000      	movs	r0, #0
 8017dfa:	6020      	str	r0, [r4, #0]
 8017dfc:	b042      	add	sp, #264	; 0x108
 8017dfe:	bdd0      	pop	{r4, r6, r7, pc}
 8017e00:	200b      	movs	r0, #11
 8017e02:	4770      	bx	lr
 8017e04:	200b      	movs	r0, #11
 8017e06:	e7f5      	b.n	8017df4 <rmw_validate_namespace_with_size+0x48>
 8017e08:	2306      	movs	r3, #6
 8017e0a:	6023      	str	r3, [r4, #0]
 8017e0c:	2e00      	cmp	r6, #0
 8017e0e:	d0f1      	beq.n	8017df4 <rmw_validate_namespace_with_size+0x48>
 8017e10:	9b01      	ldr	r3, [sp, #4]
 8017e12:	6033      	str	r3, [r6, #0]
 8017e14:	e7ee      	b.n	8017df4 <rmw_validate_namespace_with_size+0x48>
 8017e16:	2301      	movs	r3, #1
 8017e18:	6023      	str	r3, [r4, #0]
 8017e1a:	e7f7      	b.n	8017e0c <rmw_validate_namespace_with_size+0x60>
 8017e1c:	2302      	movs	r3, #2
 8017e1e:	6023      	str	r3, [r4, #0]
 8017e20:	e7f4      	b.n	8017e0c <rmw_validate_namespace_with_size+0x60>
 8017e22:	2303      	movs	r3, #3
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	e7f1      	b.n	8017e0c <rmw_validate_namespace_with_size+0x60>
 8017e28:	2304      	movs	r3, #4
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	e7ee      	b.n	8017e0c <rmw_validate_namespace_with_size+0x60>
 8017e2e:	2305      	movs	r3, #5
 8017e30:	6023      	str	r3, [r4, #0]
 8017e32:	e7eb      	b.n	8017e0c <rmw_validate_namespace_with_size+0x60>
 8017e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017e38:	4a02      	ldr	r2, [pc, #8]	; (8017e44 <rmw_validate_namespace_with_size+0x98>)
 8017e3a:	a802      	add	r0, sp, #8
 8017e3c:	f7ff ff42 	bl	8017cc4 <rcutils_snprintf>
 8017e40:	2001      	movs	r0, #1
 8017e42:	e7d7      	b.n	8017df4 <rmw_validate_namespace_with_size+0x48>
 8017e44:	0801c92c 	.word	0x0801c92c

08017e48 <rmw_validate_namespace>:
 8017e48:	b168      	cbz	r0, 8017e66 <rmw_validate_namespace+0x1e>
 8017e4a:	b570      	push	{r4, r5, r6, lr}
 8017e4c:	460d      	mov	r5, r1
 8017e4e:	4616      	mov	r6, r2
 8017e50:	4604      	mov	r4, r0
 8017e52:	f7e8 f9f7 	bl	8000244 <strlen>
 8017e56:	4633      	mov	r3, r6
 8017e58:	4601      	mov	r1, r0
 8017e5a:	462a      	mov	r2, r5
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e62:	f7ff bfa3 	b.w	8017dac <rmw_validate_namespace_with_size>
 8017e66:	200b      	movs	r0, #11
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop

08017e6c <rmw_namespace_validation_result_string>:
 8017e6c:	2807      	cmp	r0, #7
 8017e6e:	bf9a      	itte	ls
 8017e70:	4b02      	ldrls	r3, [pc, #8]	; (8017e7c <rmw_namespace_validation_result_string+0x10>)
 8017e72:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017e76:	4802      	ldrhi	r0, [pc, #8]	; (8017e80 <rmw_namespace_validation_result_string+0x14>)
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop
 8017e7c:	0801cb24 	.word	0x0801cb24
 8017e80:	0801c97c 	.word	0x0801c97c

08017e84 <rmw_validate_node_name>:
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d03b      	beq.n	8017f00 <rmw_validate_node_name+0x7c>
 8017e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e8c:	460f      	mov	r7, r1
 8017e8e:	2900      	cmp	r1, #0
 8017e90:	d038      	beq.n	8017f04 <rmw_validate_node_name+0x80>
 8017e92:	4615      	mov	r5, r2
 8017e94:	4604      	mov	r4, r0
 8017e96:	f7e8 f9d5 	bl	8000244 <strlen>
 8017e9a:	b1e0      	cbz	r0, 8017ed6 <rmw_validate_node_name+0x52>
 8017e9c:	1e63      	subs	r3, r4, #1
 8017e9e:	eb03 0e00 	add.w	lr, r3, r0
 8017ea2:	f1c4 0c01 	rsb	ip, r4, #1
 8017ea6:	eb0c 0803 	add.w	r8, ip, r3
 8017eaa:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8017eae:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8017eb2:	f026 0220 	bic.w	r2, r6, #32
 8017eb6:	2909      	cmp	r1, #9
 8017eb8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8017ebc:	d913      	bls.n	8017ee6 <rmw_validate_node_name+0x62>
 8017ebe:	2a19      	cmp	r2, #25
 8017ec0:	d911      	bls.n	8017ee6 <rmw_validate_node_name+0x62>
 8017ec2:	2e5f      	cmp	r6, #95	; 0x5f
 8017ec4:	d00f      	beq.n	8017ee6 <rmw_validate_node_name+0x62>
 8017ec6:	2302      	movs	r3, #2
 8017ec8:	603b      	str	r3, [r7, #0]
 8017eca:	b10d      	cbz	r5, 8017ed0 <rmw_validate_node_name+0x4c>
 8017ecc:	f8c5 8000 	str.w	r8, [r5]
 8017ed0:	2000      	movs	r0, #0
 8017ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	603b      	str	r3, [r7, #0]
 8017eda:	2d00      	cmp	r5, #0
 8017edc:	d0f8      	beq.n	8017ed0 <rmw_validate_node_name+0x4c>
 8017ede:	2000      	movs	r0, #0
 8017ee0:	6028      	str	r0, [r5, #0]
 8017ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee6:	4573      	cmp	r3, lr
 8017ee8:	d1dd      	bne.n	8017ea6 <rmw_validate_node_name+0x22>
 8017eea:	7822      	ldrb	r2, [r4, #0]
 8017eec:	4b0d      	ldr	r3, [pc, #52]	; (8017f24 <rmw_validate_node_name+0xa0>)
 8017eee:	5cd3      	ldrb	r3, [r2, r3]
 8017ef0:	f013 0304 	ands.w	r3, r3, #4
 8017ef4:	d110      	bne.n	8017f18 <rmw_validate_node_name+0x94>
 8017ef6:	28ff      	cmp	r0, #255	; 0xff
 8017ef8:	d806      	bhi.n	8017f08 <rmw_validate_node_name+0x84>
 8017efa:	4618      	mov	r0, r3
 8017efc:	603b      	str	r3, [r7, #0]
 8017efe:	e7e8      	b.n	8017ed2 <rmw_validate_node_name+0x4e>
 8017f00:	200b      	movs	r0, #11
 8017f02:	4770      	bx	lr
 8017f04:	200b      	movs	r0, #11
 8017f06:	e7e4      	b.n	8017ed2 <rmw_validate_node_name+0x4e>
 8017f08:	2204      	movs	r2, #4
 8017f0a:	603a      	str	r2, [r7, #0]
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	d0df      	beq.n	8017ed0 <rmw_validate_node_name+0x4c>
 8017f10:	22fe      	movs	r2, #254	; 0xfe
 8017f12:	4618      	mov	r0, r3
 8017f14:	602a      	str	r2, [r5, #0]
 8017f16:	e7dc      	b.n	8017ed2 <rmw_validate_node_name+0x4e>
 8017f18:	2303      	movs	r3, #3
 8017f1a:	603b      	str	r3, [r7, #0]
 8017f1c:	2d00      	cmp	r5, #0
 8017f1e:	d1de      	bne.n	8017ede <rmw_validate_node_name+0x5a>
 8017f20:	e7d6      	b.n	8017ed0 <rmw_validate_node_name+0x4c>
 8017f22:	bf00      	nop
 8017f24:	0801cc9b 	.word	0x0801cc9b

08017f28 <rmw_node_name_validation_result_string>:
 8017f28:	2804      	cmp	r0, #4
 8017f2a:	bf9a      	itte	ls
 8017f2c:	4b02      	ldrls	r3, [pc, #8]	; (8017f38 <rmw_node_name_validation_result_string+0x10>)
 8017f2e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017f32:	4802      	ldrhi	r0, [pc, #8]	; (8017f3c <rmw_node_name_validation_result_string+0x14>)
 8017f34:	4770      	bx	lr
 8017f36:	bf00      	nop
 8017f38:	0801cc30 	.word	0x0801cc30
 8017f3c:	0801cb44 	.word	0x0801cb44

08017f40 <on_status>:
 8017f40:	b082      	sub	sp, #8
 8017f42:	b002      	add	sp, #8
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop

08017f48 <on_topic>:
 8017f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4c:	4a21      	ldr	r2, [pc, #132]	; (8017fd4 <on_topic+0x8c>)
 8017f4e:	b094      	sub	sp, #80	; 0x50
 8017f50:	6812      	ldr	r2, [r2, #0]
 8017f52:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017f54:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017f58:	9113      	str	r1, [sp, #76]	; 0x4c
 8017f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8017f5c:	b3ba      	cbz	r2, 8017fce <on_topic+0x86>
 8017f5e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017f62:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8017f66:	e001      	b.n	8017f6c <on_topic+0x24>
 8017f68:	6892      	ldr	r2, [r2, #8]
 8017f6a:	b382      	cbz	r2, 8017fce <on_topic+0x86>
 8017f6c:	68d4      	ldr	r4, [r2, #12]
 8017f6e:	8aa3      	ldrh	r3, [r4, #20]
 8017f70:	428b      	cmp	r3, r1
 8017f72:	d1f9      	bne.n	8017f68 <on_topic+0x20>
 8017f74:	7da3      	ldrb	r3, [r4, #22]
 8017f76:	4283      	cmp	r3, r0
 8017f78:	d1f6      	bne.n	8017f68 <on_topic+0x20>
 8017f7a:	2248      	movs	r2, #72	; 0x48
 8017f7c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017f80:	4668      	mov	r0, sp
 8017f82:	f001 fd33 	bl	80199ec <memcpy>
 8017f86:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f7f8 fdd6 	bl	8010b3c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017f90:	4607      	mov	r7, r0
 8017f92:	b1e0      	cbz	r0, 8017fce <on_topic+0x86>
 8017f94:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017f98:	462a      	mov	r2, r5
 8017f9a:	4630      	mov	r0, r6
 8017f9c:	f108 0110 	add.w	r1, r8, #16
 8017fa0:	f7f9 fecc 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 8017fa4:	b930      	cbnz	r0, 8017fb4 <on_topic+0x6c>
 8017fa6:	4639      	mov	r1, r7
 8017fa8:	480b      	ldr	r0, [pc, #44]	; (8017fd8 <on_topic+0x90>)
 8017faa:	b014      	add	sp, #80	; 0x50
 8017fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb0:	f000 b8be 	b.w	8018130 <put_memory>
 8017fb4:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017fb8:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017fbc:	f7f8 fbf0 	bl	80107a0 <rmw_uros_epoch_nanos>
 8017fc0:	2305      	movs	r3, #5
 8017fc2:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017fc6:	e9c2 0100 	strd	r0, r1, [r2]
 8017fca:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017fce:	b014      	add	sp, #80	; 0x50
 8017fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fd4:	2000cdac 	.word	0x2000cdac
 8017fd8:	20009b40 	.word	0x20009b40

08017fdc <on_request>:
 8017fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fe0:	4823      	ldr	r0, [pc, #140]	; (8018070 <on_request+0x94>)
 8017fe2:	b095      	sub	sp, #84	; 0x54
 8017fe4:	6800      	ldr	r0, [r0, #0]
 8017fe6:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8017fea:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8017fee:	9113      	str	r1, [sp, #76]	; 0x4c
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	d039      	beq.n	8018068 <on_request+0x8c>
 8017ff4:	461d      	mov	r5, r3
 8017ff6:	e001      	b.n	8017ffc <on_request+0x20>
 8017ff8:	6880      	ldr	r0, [r0, #8]
 8017ffa:	b3a8      	cbz	r0, 8018068 <on_request+0x8c>
 8017ffc:	68c4      	ldr	r4, [r0, #12]
 8017ffe:	8b21      	ldrh	r1, [r4, #24]
 8018000:	4291      	cmp	r1, r2
 8018002:	d1f9      	bne.n	8017ff8 <on_request+0x1c>
 8018004:	2248      	movs	r2, #72	; 0x48
 8018006:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801800a:	4668      	mov	r0, sp
 801800c:	f001 fcee 	bl	80199ec <memcpy>
 8018010:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8018014:	4620      	mov	r0, r4
 8018016:	f7f8 fd91 	bl	8010b3c <rmw_uxrce_get_static_input_buffer_for_entity>
 801801a:	4606      	mov	r6, r0
 801801c:	b320      	cbz	r0, 8018068 <on_request+0x8c>
 801801e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8018022:	463a      	mov	r2, r7
 8018024:	4640      	mov	r0, r8
 8018026:	f109 0110 	add.w	r1, r9, #16
 801802a:	f7f9 fe87 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 801802e:	b930      	cbnz	r0, 801803e <on_request+0x62>
 8018030:	4631      	mov	r1, r6
 8018032:	4810      	ldr	r0, [pc, #64]	; (8018074 <on_request+0x98>)
 8018034:	b015      	add	sp, #84	; 0x54
 8018036:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801803a:	f000 b879 	b.w	8018130 <put_memory>
 801803e:	f609 0628 	addw	r6, r9, #2088	; 0x828
 8018042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018044:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8018048:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 801804c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801804e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018052:	e886 0003 	stmia.w	r6, {r0, r1}
 8018056:	f7f8 fba3 	bl	80107a0 <rmw_uros_epoch_nanos>
 801805a:	2303      	movs	r3, #3
 801805c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8018060:	e9c2 0100 	strd	r0, r1, [r2]
 8018064:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8018068:	b015      	add	sp, #84	; 0x54
 801806a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801806e:	bf00      	nop
 8018070:	2000cd9c 	.word	0x2000cd9c
 8018074:	20009b40 	.word	0x20009b40

08018078 <on_reply>:
 8018078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801807c:	4822      	ldr	r0, [pc, #136]	; (8018108 <on_reply+0x90>)
 801807e:	b095      	sub	sp, #84	; 0x54
 8018080:	6800      	ldr	r0, [r0, #0]
 8018082:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018086:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801808a:	9113      	str	r1, [sp, #76]	; 0x4c
 801808c:	2800      	cmp	r0, #0
 801808e:	d037      	beq.n	8018100 <on_reply+0x88>
 8018090:	461d      	mov	r5, r3
 8018092:	e001      	b.n	8018098 <on_reply+0x20>
 8018094:	6880      	ldr	r0, [r0, #8]
 8018096:	b398      	cbz	r0, 8018100 <on_reply+0x88>
 8018098:	68c4      	ldr	r4, [r0, #12]
 801809a:	8b21      	ldrh	r1, [r4, #24]
 801809c:	4291      	cmp	r1, r2
 801809e:	d1f9      	bne.n	8018094 <on_reply+0x1c>
 80180a0:	2248      	movs	r2, #72	; 0x48
 80180a2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80180a6:	4668      	mov	r0, sp
 80180a8:	f001 fca0 	bl	80199ec <memcpy>
 80180ac:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80180b0:	4620      	mov	r0, r4
 80180b2:	f7f8 fd43 	bl	8010b3c <rmw_uxrce_get_static_input_buffer_for_entity>
 80180b6:	4606      	mov	r6, r0
 80180b8:	b310      	cbz	r0, 8018100 <on_reply+0x88>
 80180ba:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80180be:	463a      	mov	r2, r7
 80180c0:	4640      	mov	r0, r8
 80180c2:	f109 0110 	add.w	r1, r9, #16
 80180c6:	f7f9 fe39 	bl	8011d3c <ucdr_deserialize_array_uint8_t>
 80180ca:	b930      	cbnz	r0, 80180da <on_reply+0x62>
 80180cc:	4631      	mov	r1, r6
 80180ce:	480f      	ldr	r0, [pc, #60]	; (801810c <on_reply+0x94>)
 80180d0:	b015      	add	sp, #84	; 0x54
 80180d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180d6:	f000 b82b 	b.w	8018130 <put_memory>
 80180da:	2300      	movs	r3, #0
 80180dc:	b2aa      	uxth	r2, r5
 80180de:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80180e2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80180e6:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 80180ea:	e9c1 2300 	strd	r2, r3, [r1]
 80180ee:	f7f8 fb57 	bl	80107a0 <rmw_uros_epoch_nanos>
 80180f2:	2304      	movs	r3, #4
 80180f4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80180f8:	e9c2 0100 	strd	r0, r1, [r2]
 80180fc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8018100:	b015      	add	sp, #84	; 0x54
 8018102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018106:	bf00      	nop
 8018108:	2000a3d0 	.word	0x2000a3d0
 801810c:	20009b40 	.word	0x20009b40

08018110 <get_memory>:
 8018110:	4603      	mov	r3, r0
 8018112:	6840      	ldr	r0, [r0, #4]
 8018114:	b158      	cbz	r0, 801812e <get_memory+0x1e>
 8018116:	6882      	ldr	r2, [r0, #8]
 8018118:	605a      	str	r2, [r3, #4]
 801811a:	b10a      	cbz	r2, 8018120 <get_memory+0x10>
 801811c:	2100      	movs	r1, #0
 801811e:	6051      	str	r1, [r2, #4]
 8018120:	681a      	ldr	r2, [r3, #0]
 8018122:	6082      	str	r2, [r0, #8]
 8018124:	b102      	cbz	r2, 8018128 <get_memory+0x18>
 8018126:	6050      	str	r0, [r2, #4]
 8018128:	2200      	movs	r2, #0
 801812a:	6042      	str	r2, [r0, #4]
 801812c:	6018      	str	r0, [r3, #0]
 801812e:	4770      	bx	lr

08018130 <put_memory>:
 8018130:	684b      	ldr	r3, [r1, #4]
 8018132:	b10b      	cbz	r3, 8018138 <put_memory+0x8>
 8018134:	688a      	ldr	r2, [r1, #8]
 8018136:	609a      	str	r2, [r3, #8]
 8018138:	688a      	ldr	r2, [r1, #8]
 801813a:	b102      	cbz	r2, 801813e <put_memory+0xe>
 801813c:	6053      	str	r3, [r2, #4]
 801813e:	6803      	ldr	r3, [r0, #0]
 8018140:	428b      	cmp	r3, r1
 8018142:	6843      	ldr	r3, [r0, #4]
 8018144:	bf08      	it	eq
 8018146:	6002      	streq	r2, [r0, #0]
 8018148:	608b      	str	r3, [r1, #8]
 801814a:	b103      	cbz	r3, 801814e <put_memory+0x1e>
 801814c:	6059      	str	r1, [r3, #4]
 801814e:	2300      	movs	r3, #0
 8018150:	604b      	str	r3, [r1, #4]
 8018152:	6041      	str	r1, [r0, #4]
 8018154:	4770      	bx	lr
 8018156:	bf00      	nop

08018158 <rmw_destroy_client>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	b128      	cbz	r0, 8018168 <rmw_destroy_client+0x10>
 801815c:	4604      	mov	r4, r0
 801815e:	6800      	ldr	r0, [r0, #0]
 8018160:	460d      	mov	r5, r1
 8018162:	f7f8 fe5d 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 8018166:	b910      	cbnz	r0, 801816e <rmw_destroy_client+0x16>
 8018168:	2401      	movs	r4, #1
 801816a:	4620      	mov	r0, r4
 801816c:	bd70      	pop	{r4, r5, r6, pc}
 801816e:	6863      	ldr	r3, [r4, #4]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d0f9      	beq.n	8018168 <rmw_destroy_client+0x10>
 8018174:	2d00      	cmp	r5, #0
 8018176:	d0f7      	beq.n	8018168 <rmw_destroy_client+0x10>
 8018178:	6828      	ldr	r0, [r5, #0]
 801817a:	f7f8 fe51 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 801817e:	2800      	cmp	r0, #0
 8018180:	d0f2      	beq.n	8018168 <rmw_destroy_client+0x10>
 8018182:	686e      	ldr	r6, [r5, #4]
 8018184:	2e00      	cmp	r6, #0
 8018186:	d0ef      	beq.n	8018168 <rmw_destroy_client+0x10>
 8018188:	6864      	ldr	r4, [r4, #4]
 801818a:	6932      	ldr	r2, [r6, #16]
 801818c:	6920      	ldr	r0, [r4, #16]
 801818e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018192:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018196:	6819      	ldr	r1, [r3, #0]
 8018198:	f7fa fb4c 	bl	8012834 <uxr_buffer_cancel_data>
 801819c:	4602      	mov	r2, r0
 801819e:	6920      	ldr	r0, [r4, #16]
 80181a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80181a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80181a8:	f7f8 fdb6 	bl	8010d18 <run_xrce_session>
 80181ac:	6920      	ldr	r0, [r4, #16]
 80181ae:	6932      	ldr	r2, [r6, #16]
 80181b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80181b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80181b8:	6819      	ldr	r1, [r3, #0]
 80181ba:	f7f9 fffd 	bl	80121b8 <uxr_buffer_delete_entity>
 80181be:	4602      	mov	r2, r0
 80181c0:	6920      	ldr	r0, [r4, #16]
 80181c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80181c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80181ca:	f7f8 fda5 	bl	8010d18 <run_xrce_session>
 80181ce:	4603      	mov	r3, r0
 80181d0:	4628      	mov	r0, r5
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	bf14      	ite	ne
 80181d6:	2400      	movne	r4, #0
 80181d8:	2402      	moveq	r4, #2
 80181da:	f7f8 fc8d 	bl	8010af8 <rmw_uxrce_fini_client_memory>
 80181de:	e7c4      	b.n	801816a <rmw_destroy_client+0x12>

080181e0 <rmw_get_implementation_identifier>:
 80181e0:	4b01      	ldr	r3, [pc, #4]	; (80181e8 <rmw_get_implementation_identifier+0x8>)
 80181e2:	6818      	ldr	r0, [r3, #0]
 80181e4:	4770      	bx	lr
 80181e6:	bf00      	nop
 80181e8:	0801cc5c 	.word	0x0801cc5c

080181ec <create_topic>:
 80181ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181f0:	4605      	mov	r5, r0
 80181f2:	b085      	sub	sp, #20
 80181f4:	4821      	ldr	r0, [pc, #132]	; (801827c <create_topic+0x90>)
 80181f6:	460f      	mov	r7, r1
 80181f8:	4616      	mov	r6, r2
 80181fa:	f7ff ff89 	bl	8018110 <get_memory>
 80181fe:	4604      	mov	r4, r0
 8018200:	b390      	cbz	r0, 8018268 <create_topic+0x7c>
 8018202:	f241 5396 	movw	r3, #5526	; 0x1596
 8018206:	692a      	ldr	r2, [r5, #16]
 8018208:	68c4      	ldr	r4, [r0, #12]
 801820a:	5ad0      	ldrh	r0, [r2, r3]
 801820c:	61a5      	str	r5, [r4, #24]
 801820e:	1c41      	adds	r1, r0, #1
 8018210:	6166      	str	r6, [r4, #20]
 8018212:	52d1      	strh	r1, [r2, r3]
 8018214:	2102      	movs	r1, #2
 8018216:	f7fa faa5 	bl	8012764 <uxr_object_id>
 801821a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8018280 <create_topic+0x94>
 801821e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8018284 <create_topic+0x98>
 8018222:	4641      	mov	r1, r8
 8018224:	223c      	movs	r2, #60	; 0x3c
 8018226:	6120      	str	r0, [r4, #16]
 8018228:	4638      	mov	r0, r7
 801822a:	f7f8 fde3 	bl	8010df4 <generate_topic_name>
 801822e:	4649      	mov	r1, r9
 8018230:	2264      	movs	r2, #100	; 0x64
 8018232:	4630      	mov	r0, r6
 8018234:	f7f8 fda4 	bl	8010d80 <generate_type_name>
 8018238:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801823c:	2106      	movs	r1, #6
 801823e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018242:	e9cd 8900 	strd	r8, r9, [sp]
 8018246:	9102      	str	r1, [sp, #8]
 8018248:	6811      	ldr	r1, [r2, #0]
 801824a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801824e:	6922      	ldr	r2, [r4, #16]
 8018250:	f7fa f838 	bl	80122c4 <uxr_buffer_create_topic_bin>
 8018254:	4602      	mov	r2, r0
 8018256:	6928      	ldr	r0, [r5, #16]
 8018258:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801825c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018260:	f7f8 fd5a 	bl	8010d18 <run_xrce_session>
 8018264:	4605      	mov	r5, r0
 8018266:	b118      	cbz	r0, 8018270 <create_topic+0x84>
 8018268:	4620      	mov	r0, r4
 801826a:	b005      	add	sp, #20
 801826c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018270:	4620      	mov	r0, r4
 8018272:	f7f8 fc57 	bl	8010b24 <rmw_uxrce_fini_topic_memory>
 8018276:	462c      	mov	r4, r5
 8018278:	e7f6      	b.n	8018268 <create_topic+0x7c>
 801827a:	bf00      	nop
 801827c:	2000ccd8 	.word	0x2000ccd8
 8018280:	20006880 	.word	0x20006880
 8018284:	200068bc 	.word	0x200068bc

08018288 <destroy_topic>:
 8018288:	b538      	push	{r3, r4, r5, lr}
 801828a:	6985      	ldr	r5, [r0, #24]
 801828c:	b1dd      	cbz	r5, 80182c6 <destroy_topic+0x3e>
 801828e:	4604      	mov	r4, r0
 8018290:	6928      	ldr	r0, [r5, #16]
 8018292:	6922      	ldr	r2, [r4, #16]
 8018294:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018298:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801829c:	6819      	ldr	r1, [r3, #0]
 801829e:	f7f9 ff8b 	bl	80121b8 <uxr_buffer_delete_entity>
 80182a2:	4602      	mov	r2, r0
 80182a4:	6928      	ldr	r0, [r5, #16]
 80182a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80182aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80182ae:	f7f8 fd33 	bl	8010d18 <run_xrce_session>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	4620      	mov	r0, r4
 80182b8:	bf14      	ite	ne
 80182ba:	2400      	movne	r4, #0
 80182bc:	2402      	moveq	r4, #2
 80182be:	f7f8 fc31 	bl	8010b24 <rmw_uxrce_fini_topic_memory>
 80182c2:	4620      	mov	r0, r4
 80182c4:	bd38      	pop	{r3, r4, r5, pc}
 80182c6:	2401      	movs	r4, #1
 80182c8:	4620      	mov	r0, r4
 80182ca:	bd38      	pop	{r3, r4, r5, pc}

080182cc <rmw_take_request>:
 80182cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182d0:	4605      	mov	r5, r0
 80182d2:	6800      	ldr	r0, [r0, #0]
 80182d4:	460c      	mov	r4, r1
 80182d6:	4690      	mov	r8, r2
 80182d8:	461e      	mov	r6, r3
 80182da:	b089      	sub	sp, #36	; 0x24
 80182dc:	b128      	cbz	r0, 80182ea <rmw_take_request+0x1e>
 80182de:	4b28      	ldr	r3, [pc, #160]	; (8018380 <rmw_take_request+0xb4>)
 80182e0:	6819      	ldr	r1, [r3, #0]
 80182e2:	f7e7 ffa5 	bl	8000230 <strcmp>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d146      	bne.n	8018378 <rmw_take_request+0xac>
 80182ea:	b10e      	cbz	r6, 80182f0 <rmw_take_request+0x24>
 80182ec:	2300      	movs	r3, #0
 80182ee:	7033      	strb	r3, [r6, #0]
 80182f0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80182f4:	f7f8 fc98 	bl	8010c28 <rmw_uxrce_clean_expired_static_input_buffer>
 80182f8:	4648      	mov	r0, r9
 80182fa:	f7f8 fc6b 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80182fe:	4607      	mov	r7, r0
 8018300:	b3b0      	cbz	r0, 8018370 <rmw_take_request+0xa4>
 8018302:	68c5      	ldr	r5, [r0, #12]
 8018304:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8018308:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 801830c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018310:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8018314:	7423      	strb	r3, [r4, #16]
 8018316:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801831a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801831e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018322:	74e3      	strb	r3, [r4, #19]
 8018324:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8018328:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801832c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8018330:	6161      	str	r1, [r4, #20]
 8018332:	61a2      	str	r2, [r4, #24]
 8018334:	61e3      	str	r3, [r4, #28]
 8018336:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801833a:	689b      	ldr	r3, [r3, #8]
 801833c:	4798      	blx	r3
 801833e:	6844      	ldr	r4, [r0, #4]
 8018340:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018344:	4668      	mov	r0, sp
 8018346:	f105 0110 	add.w	r1, r5, #16
 801834a:	f7f5 fe51 	bl	800dff0 <ucdr_init_buffer>
 801834e:	4641      	mov	r1, r8
 8018350:	68e3      	ldr	r3, [r4, #12]
 8018352:	4668      	mov	r0, sp
 8018354:	4798      	blx	r3
 8018356:	4639      	mov	r1, r7
 8018358:	4604      	mov	r4, r0
 801835a:	480a      	ldr	r0, [pc, #40]	; (8018384 <rmw_take_request+0xb8>)
 801835c:	f7ff fee8 	bl	8018130 <put_memory>
 8018360:	b106      	cbz	r6, 8018364 <rmw_take_request+0x98>
 8018362:	7034      	strb	r4, [r6, #0]
 8018364:	f084 0001 	eor.w	r0, r4, #1
 8018368:	b2c0      	uxtb	r0, r0
 801836a:	b009      	add	sp, #36	; 0x24
 801836c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018370:	2001      	movs	r0, #1
 8018372:	b009      	add	sp, #36	; 0x24
 8018374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018378:	200c      	movs	r0, #12
 801837a:	b009      	add	sp, #36	; 0x24
 801837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018380:	0801cc5c 	.word	0x0801cc5c
 8018384:	20009b40 	.word	0x20009b40

08018388 <rmw_send_response>:
 8018388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801838a:	4605      	mov	r5, r0
 801838c:	6800      	ldr	r0, [r0, #0]
 801838e:	460c      	mov	r4, r1
 8018390:	4617      	mov	r7, r2
 8018392:	b091      	sub	sp, #68	; 0x44
 8018394:	b128      	cbz	r0, 80183a2 <rmw_send_response+0x1a>
 8018396:	4b2a      	ldr	r3, [pc, #168]	; (8018440 <rmw_send_response+0xb8>)
 8018398:	6819      	ldr	r1, [r3, #0]
 801839a:	f7e7 ff49 	bl	8000230 <strcmp>
 801839e:	2800      	cmp	r0, #0
 80183a0:	d143      	bne.n	801842a <rmw_send_response+0xa2>
 80183a2:	4621      	mov	r1, r4
 80183a4:	4622      	mov	r2, r4
 80183a6:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 80183aa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80183ae:	f891 c002 	ldrb.w	ip, [r1, #2]
 80183b2:	686d      	ldr	r5, [r5, #4]
 80183b4:	6851      	ldr	r1, [r2, #4]
 80183b6:	6966      	ldr	r6, [r4, #20]
 80183b8:	f88d c016 	strb.w	ip, [sp, #22]
 80183bc:	6892      	ldr	r2, [r2, #8]
 80183be:	f894 c000 	ldrb.w	ip, [r4]
 80183c2:	ab02      	add	r3, sp, #8
 80183c4:	f8ad e014 	strh.w	lr, [sp, #20]
 80183c8:	f88d c017 	strb.w	ip, [sp, #23]
 80183cc:	9606      	str	r6, [sp, #24]
 80183ce:	c307      	stmia	r3!, {r0, r1, r2}
 80183d0:	6922      	ldr	r2, [r4, #16]
 80183d2:	696b      	ldr	r3, [r5, #20]
 80183d4:	9207      	str	r2, [sp, #28]
 80183d6:	68db      	ldr	r3, [r3, #12]
 80183d8:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80183da:	4798      	blx	r3
 80183dc:	6844      	ldr	r4, [r0, #4]
 80183de:	4638      	mov	r0, r7
 80183e0:	6923      	ldr	r3, [r4, #16]
 80183e2:	4798      	blx	r3
 80183e4:	6932      	ldr	r2, [r6, #16]
 80183e6:	3018      	adds	r0, #24
 80183e8:	9000      	str	r0, [sp, #0]
 80183ea:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80183ec:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80183f0:	ab08      	add	r3, sp, #32
 80183f2:	692a      	ldr	r2, [r5, #16]
 80183f4:	f7fc f91c 	bl	8014630 <uxr_prepare_output_stream>
 80183f8:	b910      	cbnz	r0, 8018400 <rmw_send_response+0x78>
 80183fa:	2001      	movs	r0, #1
 80183fc:	b011      	add	sp, #68	; 0x44
 80183fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018400:	a902      	add	r1, sp, #8
 8018402:	a808      	add	r0, sp, #32
 8018404:	f7fd f88a 	bl	801551c <uxr_serialize_SampleIdentity>
 8018408:	68a3      	ldr	r3, [r4, #8]
 801840a:	4638      	mov	r0, r7
 801840c:	a908      	add	r1, sp, #32
 801840e:	4798      	blx	r3
 8018410:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8018414:	6930      	ldr	r0, [r6, #16]
 8018416:	2b01      	cmp	r3, #1
 8018418:	d00a      	beq.n	8018430 <rmw_send_response+0xa8>
 801841a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801841c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018420:	f7fb f876 	bl	8013510 <uxr_run_session_until_confirm_delivery>
 8018424:	2000      	movs	r0, #0
 8018426:	b011      	add	sp, #68	; 0x44
 8018428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801842a:	200c      	movs	r0, #12
 801842c:	b011      	add	sp, #68	; 0x44
 801842e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018430:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018434:	f7fa ffda 	bl	80133ec <uxr_flash_output_streams>
 8018438:	2000      	movs	r0, #0
 801843a:	b011      	add	sp, #68	; 0x44
 801843c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801843e:	bf00      	nop
 8018440:	0801cc5c 	.word	0x0801cc5c

08018444 <rmw_take_response>:
 8018444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018448:	4604      	mov	r4, r0
 801844a:	6800      	ldr	r0, [r0, #0]
 801844c:	4688      	mov	r8, r1
 801844e:	4617      	mov	r7, r2
 8018450:	461d      	mov	r5, r3
 8018452:	b089      	sub	sp, #36	; 0x24
 8018454:	b120      	cbz	r0, 8018460 <rmw_take_response+0x1c>
 8018456:	4b1f      	ldr	r3, [pc, #124]	; (80184d4 <rmw_take_response+0x90>)
 8018458:	6819      	ldr	r1, [r3, #0]
 801845a:	f7e7 fee9 	bl	8000230 <strcmp>
 801845e:	bb88      	cbnz	r0, 80184c4 <rmw_take_response+0x80>
 8018460:	b10d      	cbz	r5, 8018466 <rmw_take_response+0x22>
 8018462:	2300      	movs	r3, #0
 8018464:	702b      	strb	r3, [r5, #0]
 8018466:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801846a:	f7f8 fbdd 	bl	8010c28 <rmw_uxrce_clean_expired_static_input_buffer>
 801846e:	4648      	mov	r0, r9
 8018470:	f7f8 fbb0 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018474:	4606      	mov	r6, r0
 8018476:	b348      	cbz	r0, 80184cc <rmw_take_response+0x88>
 8018478:	68c4      	ldr	r4, [r0, #12]
 801847a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801847e:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8018482:	68d1      	ldr	r1, [r2, #12]
 8018484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018488:	e9c8 2308 	strd	r2, r3, [r8, #32]
 801848c:	4788      	blx	r1
 801848e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018492:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8018496:	f104 0110 	add.w	r1, r4, #16
 801849a:	4668      	mov	r0, sp
 801849c:	f7f5 fda8 	bl	800dff0 <ucdr_init_buffer>
 80184a0:	4639      	mov	r1, r7
 80184a2:	4668      	mov	r0, sp
 80184a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184a8:	4798      	blx	r3
 80184aa:	4631      	mov	r1, r6
 80184ac:	4604      	mov	r4, r0
 80184ae:	480a      	ldr	r0, [pc, #40]	; (80184d8 <rmw_take_response+0x94>)
 80184b0:	f7ff fe3e 	bl	8018130 <put_memory>
 80184b4:	b105      	cbz	r5, 80184b8 <rmw_take_response+0x74>
 80184b6:	702c      	strb	r4, [r5, #0]
 80184b8:	f084 0001 	eor.w	r0, r4, #1
 80184bc:	b2c0      	uxtb	r0, r0
 80184be:	b009      	add	sp, #36	; 0x24
 80184c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184c4:	200c      	movs	r0, #12
 80184c6:	b009      	add	sp, #36	; 0x24
 80184c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184cc:	2001      	movs	r0, #1
 80184ce:	b009      	add	sp, #36	; 0x24
 80184d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184d4:	0801cc5c 	.word	0x0801cc5c
 80184d8:	20009b40 	.word	0x20009b40

080184dc <rmw_wait>:
 80184dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e0:	4698      	mov	r8, r3
 80184e2:	4607      	mov	r7, r0
 80184e4:	460e      	mov	r6, r1
 80184e6:	4691      	mov	r9, r2
 80184e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184ea:	2a00      	cmp	r2, #0
 80184ec:	f000 8123 	beq.w	8018736 <rmw_wait+0x25a>
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	f000 812c 	beq.w	801874e <rmw_wait+0x272>
 80184f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80184fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fe:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8018502:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8018506:	ebbb 0b02 	subs.w	fp, fp, r2
 801850a:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 801850e:	eb6a 0a03 	sbc.w	sl, sl, r3
 8018512:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 8018516:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801851a:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 801851e:	eb1c 0b02 	adds.w	fp, ip, r2
 8018522:	eb4a 0a03 	adc.w	sl, sl, r3
 8018526:	4aab      	ldr	r2, [pc, #684]	; (80187d4 <rmw_wait+0x2f8>)
 8018528:	2300      	movs	r3, #0
 801852a:	f7e8 fec1 	bl	80012b0 <__aeabi_uldivmod>
 801852e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018532:	2300      	movs	r3, #0
 8018534:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8018538:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 801853c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8018540:	eb1b 0400 	adds.w	r4, fp, r0
 8018544:	eb4a 0501 	adc.w	r5, sl, r1
 8018548:	42a2      	cmp	r2, r4
 801854a:	eb73 0105 	sbcs.w	r1, r3, r5
 801854e:	f2c0 80f0 	blt.w	8018732 <rmw_wait+0x256>
 8018552:	f7f8 fb69 	bl	8010c28 <rmw_uxrce_clean_expired_static_input_buffer>
 8018556:	4ba0      	ldr	r3, [pc, #640]	; (80187d8 <rmw_wait+0x2fc>)
 8018558:	681d      	ldr	r5, [r3, #0]
 801855a:	b145      	cbz	r5, 801856e <rmw_wait+0x92>
 801855c:	462b      	mov	r3, r5
 801855e:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8018562:	2100      	movs	r1, #0
 8018564:	68da      	ldr	r2, [r3, #12]
 8018566:	689b      	ldr	r3, [r3, #8]
 8018568:	5411      	strb	r1, [r2, r0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d1fa      	bne.n	8018564 <rmw_wait+0x88>
 801856e:	f1b9 0f00 	cmp.w	r9, #0
 8018572:	d012      	beq.n	801859a <rmw_wait+0xbe>
 8018574:	f8d9 1000 	ldr.w	r1, [r9]
 8018578:	b179      	cbz	r1, 801859a <rmw_wait+0xbe>
 801857a:	2300      	movs	r3, #0
 801857c:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8018580:	f04f 0c01 	mov.w	ip, #1
 8018584:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8018588:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801858c:	3301      	adds	r3, #1
 801858e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018590:	4299      	cmp	r1, r3
 8018592:	6912      	ldr	r2, [r2, #16]
 8018594:	f802 c00e 	strb.w	ip, [r2, lr]
 8018598:	d1f6      	bne.n	8018588 <rmw_wait+0xac>
 801859a:	f1b8 0f00 	cmp.w	r8, #0
 801859e:	d012      	beq.n	80185c6 <rmw_wait+0xea>
 80185a0:	f8d8 1000 	ldr.w	r1, [r8]
 80185a4:	b179      	cbz	r1, 80185c6 <rmw_wait+0xea>
 80185a6:	2300      	movs	r3, #0
 80185a8:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80185ac:	f04f 0c01 	mov.w	ip, #1
 80185b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80185b4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80185b8:	3301      	adds	r3, #1
 80185ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80185bc:	4299      	cmp	r1, r3
 80185be:	6912      	ldr	r2, [r2, #16]
 80185c0:	f802 c00e 	strb.w	ip, [r2, lr]
 80185c4:	d1f6      	bne.n	80185b4 <rmw_wait+0xd8>
 80185c6:	b187      	cbz	r7, 80185ea <rmw_wait+0x10e>
 80185c8:	6839      	ldr	r1, [r7, #0]
 80185ca:	b171      	cbz	r1, 80185ea <rmw_wait+0x10e>
 80185cc:	2300      	movs	r3, #0
 80185ce:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80185d2:	f04f 0c01 	mov.w	ip, #1
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80185dc:	3301      	adds	r3, #1
 80185de:	6a12      	ldr	r2, [r2, #32]
 80185e0:	4299      	cmp	r1, r3
 80185e2:	6912      	ldr	r2, [r2, #16]
 80185e4:	f802 c00e 	strb.w	ip, [r2, lr]
 80185e8:	d1f6      	bne.n	80185d8 <rmw_wait+0xfc>
 80185ea:	b355      	cbz	r5, 8018642 <rmw_wait+0x166>
 80185ec:	462b      	mov	r3, r5
 80185ee:	f04f 0a00 	mov.w	sl, #0
 80185f2:	f241 51a4 	movw	r1, #5540	; 0x15a4
 80185f6:	68da      	ldr	r2, [r3, #12]
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	5c50      	ldrb	r0, [r2, r1]
 80185fc:	4450      	add	r0, sl
 80185fe:	fa5f fa80 	uxtb.w	sl, r0
 8018602:	2b00      	cmp	r3, #0
 8018604:	d1f7      	bne.n	80185f6 <rmw_wait+0x11a>
 8018606:	f1ba 0f00 	cmp.w	sl, #0
 801860a:	d01a      	beq.n	8018642 <rmw_wait+0x166>
 801860c:	1c63      	adds	r3, r4, #1
 801860e:	d00d      	beq.n	801862c <rmw_wait+0x150>
 8018610:	4620      	mov	r0, r4
 8018612:	f7e8 fbbd 	bl	8000d90 <__aeabi_i2f>
 8018616:	4604      	mov	r4, r0
 8018618:	4650      	mov	r0, sl
 801861a:	f7e8 fbb5 	bl	8000d88 <__aeabi_ui2f>
 801861e:	4601      	mov	r1, r0
 8018620:	4620      	mov	r0, r4
 8018622:	f7e8 fcbd 	bl	8000fa0 <__aeabi_fdiv>
 8018626:	f7e8 fdcd 	bl	80011c4 <__aeabi_f2iz>
 801862a:	4604      	mov	r4, r0
 801862c:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8018630:	68e8      	ldr	r0, [r5, #12]
 8018632:	f810 300a 	ldrb.w	r3, [r0, sl]
 8018636:	2b00      	cmp	r3, #0
 8018638:	f040 808c 	bne.w	8018754 <rmw_wait+0x278>
 801863c:	68ad      	ldr	r5, [r5, #8]
 801863e:	2d00      	cmp	r5, #0
 8018640:	d1f6      	bne.n	8018630 <rmw_wait+0x154>
 8018642:	f1b9 0f00 	cmp.w	r9, #0
 8018646:	f000 80a3 	beq.w	8018790 <rmw_wait+0x2b4>
 801864a:	f8d9 5000 	ldr.w	r5, [r9]
 801864e:	2d00      	cmp	r5, #0
 8018650:	f000 808a 	beq.w	8018768 <rmw_wait+0x28c>
 8018654:	2400      	movs	r4, #0
 8018656:	4625      	mov	r5, r4
 8018658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801865c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018660:	f7f8 fab8 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018664:	2800      	cmp	r0, #0
 8018666:	d054      	beq.n	8018712 <rmw_wait+0x236>
 8018668:	f8d9 3000 	ldr.w	r3, [r9]
 801866c:	3401      	adds	r4, #1
 801866e:	42a3      	cmp	r3, r4
 8018670:	f04f 0501 	mov.w	r5, #1
 8018674:	d8f0      	bhi.n	8018658 <rmw_wait+0x17c>
 8018676:	f1b8 0f00 	cmp.w	r8, #0
 801867a:	d012      	beq.n	80186a2 <rmw_wait+0x1c6>
 801867c:	f8d8 3000 	ldr.w	r3, [r8]
 8018680:	b17b      	cbz	r3, 80186a2 <rmw_wait+0x1c6>
 8018682:	2400      	movs	r4, #0
 8018684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018688:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801868c:	f7f8 faa2 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018690:	2800      	cmp	r0, #0
 8018692:	d046      	beq.n	8018722 <rmw_wait+0x246>
 8018694:	f8d8 3000 	ldr.w	r3, [r8]
 8018698:	3401      	adds	r4, #1
 801869a:	42a3      	cmp	r3, r4
 801869c:	f04f 0501 	mov.w	r5, #1
 80186a0:	d8f0      	bhi.n	8018684 <rmw_wait+0x1a8>
 80186a2:	b1df      	cbz	r7, 80186dc <rmw_wait+0x200>
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	b1cb      	cbz	r3, 80186dc <rmw_wait+0x200>
 80186a8:	2400      	movs	r4, #0
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80186b0:	f7f8 fa90 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80186b4:	b158      	cbz	r0, 80186ce <rmw_wait+0x1f2>
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	3401      	adds	r4, #1
 80186ba:	42a3      	cmp	r3, r4
 80186bc:	d961      	bls.n	8018782 <rmw_wait+0x2a6>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2501      	movs	r5, #1
 80186c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80186c6:	f7f8 fa85 	bl	8010bd4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80186ca:	2800      	cmp	r0, #0
 80186cc:	d1f3      	bne.n	80186b6 <rmw_wait+0x1da>
 80186ce:	e9d7 3200 	ldrd	r3, r2, [r7]
 80186d2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80186d6:	3401      	adds	r4, #1
 80186d8:	42a3      	cmp	r3, r4
 80186da:	d8e6      	bhi.n	80186aa <rmw_wait+0x1ce>
 80186dc:	b1a6      	cbz	r6, 8018708 <rmw_wait+0x22c>
 80186de:	6834      	ldr	r4, [r6, #0]
 80186e0:	b194      	cbz	r4, 8018708 <rmw_wait+0x22c>
 80186e2:	2300      	movs	r3, #0
 80186e4:	461f      	mov	r7, r3
 80186e6:	e004      	b.n	80186f2 <rmw_wait+0x216>
 80186e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80186ec:	3301      	adds	r3, #1
 80186ee:	42a3      	cmp	r3, r4
 80186f0:	d00a      	beq.n	8018708 <rmw_wait+0x22c>
 80186f2:	6870      	ldr	r0, [r6, #4]
 80186f4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80186f8:	7c0a      	ldrb	r2, [r1, #16]
 80186fa:	2a00      	cmp	r2, #0
 80186fc:	d0f4      	beq.n	80186e8 <rmw_wait+0x20c>
 80186fe:	3301      	adds	r3, #1
 8018700:	42a3      	cmp	r3, r4
 8018702:	4615      	mov	r5, r2
 8018704:	740f      	strb	r7, [r1, #16]
 8018706:	d1f4      	bne.n	80186f2 <rmw_wait+0x216>
 8018708:	2d00      	cmp	r5, #0
 801870a:	d037      	beq.n	801877c <rmw_wait+0x2a0>
 801870c:	2000      	movs	r0, #0
 801870e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018712:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018716:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801871a:	3401      	adds	r4, #1
 801871c:	42a3      	cmp	r3, r4
 801871e:	d89b      	bhi.n	8018658 <rmw_wait+0x17c>
 8018720:	e7a9      	b.n	8018676 <rmw_wait+0x19a>
 8018722:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018726:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801872a:	3401      	adds	r4, #1
 801872c:	429c      	cmp	r4, r3
 801872e:	d3a9      	bcc.n	8018684 <rmw_wait+0x1a8>
 8018730:	e7b7      	b.n	80186a2 <rmw_wait+0x1c6>
 8018732:	4614      	mov	r4, r2
 8018734:	e70d      	b.n	8018552 <rmw_wait+0x76>
 8018736:	f1b8 0f00 	cmp.w	r8, #0
 801873a:	f47f aed9 	bne.w	80184f0 <rmw_wait+0x14>
 801873e:	2800      	cmp	r0, #0
 8018740:	f47f aed6 	bne.w	80184f0 <rmw_wait+0x14>
 8018744:	2900      	cmp	r1, #0
 8018746:	d0e1      	beq.n	801870c <rmw_wait+0x230>
 8018748:	2b00      	cmp	r3, #0
 801874a:	f47f aed4 	bne.w	80184f6 <rmw_wait+0x1a>
 801874e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018752:	e6fe      	b.n	8018552 <rmw_wait+0x76>
 8018754:	4621      	mov	r1, r4
 8018756:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801875a:	f7fa feb9 	bl	80134d0 <uxr_run_session_until_data>
 801875e:	68ad      	ldr	r5, [r5, #8]
 8018760:	2d00      	cmp	r5, #0
 8018762:	f47f af65 	bne.w	8018630 <rmw_wait+0x154>
 8018766:	e76c      	b.n	8018642 <rmw_wait+0x166>
 8018768:	f1b8 0f00 	cmp.w	r8, #0
 801876c:	d11d      	bne.n	80187aa <rmw_wait+0x2ce>
 801876e:	b34f      	cbz	r7, 80187c4 <rmw_wait+0x2e8>
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	4645      	mov	r5, r8
 8018774:	2b00      	cmp	r3, #0
 8018776:	d197      	bne.n	80186a8 <rmw_wait+0x1cc>
 8018778:	2e00      	cmp	r6, #0
 801877a:	d1b0      	bne.n	80186de <rmw_wait+0x202>
 801877c:	2002      	movs	r0, #2
 801877e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018782:	2e00      	cmp	r6, #0
 8018784:	d0c2      	beq.n	801870c <rmw_wait+0x230>
 8018786:	6834      	ldr	r4, [r6, #0]
 8018788:	2501      	movs	r5, #1
 801878a:	2c00      	cmp	r4, #0
 801878c:	d1a9      	bne.n	80186e2 <rmw_wait+0x206>
 801878e:	e7bd      	b.n	801870c <rmw_wait+0x230>
 8018790:	f1b8 0f00 	cmp.w	r8, #0
 8018794:	d0eb      	beq.n	801876e <rmw_wait+0x292>
 8018796:	f8d8 3000 	ldr.w	r3, [r8]
 801879a:	464d      	mov	r5, r9
 801879c:	2b00      	cmp	r3, #0
 801879e:	f47f af70 	bne.w	8018682 <rmw_wait+0x1a6>
 80187a2:	2f00      	cmp	r7, #0
 80187a4:	f47f af7e 	bne.w	80186a4 <rmw_wait+0x1c8>
 80187a8:	e008      	b.n	80187bc <rmw_wait+0x2e0>
 80187aa:	f8d8 3000 	ldr.w	r3, [r8]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	f47f af67 	bne.w	8018682 <rmw_wait+0x1a6>
 80187b4:	461d      	mov	r5, r3
 80187b6:	2f00      	cmp	r7, #0
 80187b8:	f47f af74 	bne.w	80186a4 <rmw_wait+0x1c8>
 80187bc:	463d      	mov	r5, r7
 80187be:	2e00      	cmp	r6, #0
 80187c0:	d18d      	bne.n	80186de <rmw_wait+0x202>
 80187c2:	e7db      	b.n	801877c <rmw_wait+0x2a0>
 80187c4:	2e00      	cmp	r6, #0
 80187c6:	d0d9      	beq.n	801877c <rmw_wait+0x2a0>
 80187c8:	6834      	ldr	r4, [r6, #0]
 80187ca:	463d      	mov	r5, r7
 80187cc:	2c00      	cmp	r4, #0
 80187ce:	d188      	bne.n	80186e2 <rmw_wait+0x206>
 80187d0:	e7d4      	b.n	801877c <rmw_wait+0x2a0>
 80187d2:	bf00      	nop
 80187d4:	000f4240 	.word	0x000f4240
 80187d8:	2000cce8 	.word	0x2000cce8

080187dc <rmw_create_wait_set>:
 80187dc:	b508      	push	{r3, lr}
 80187de:	4803      	ldr	r0, [pc, #12]	; (80187ec <rmw_create_wait_set+0x10>)
 80187e0:	f7ff fc96 	bl	8018110 <get_memory>
 80187e4:	b108      	cbz	r0, 80187ea <rmw_create_wait_set+0xe>
 80187e6:	68c0      	ldr	r0, [r0, #12]
 80187e8:	3010      	adds	r0, #16
 80187ea:	bd08      	pop	{r3, pc}
 80187ec:	2000e4c0 	.word	0x2000e4c0

080187f0 <rmw_destroy_wait_set>:
 80187f0:	b508      	push	{r3, lr}
 80187f2:	4b08      	ldr	r3, [pc, #32]	; (8018814 <rmw_destroy_wait_set+0x24>)
 80187f4:	6819      	ldr	r1, [r3, #0]
 80187f6:	b911      	cbnz	r1, 80187fe <rmw_destroy_wait_set+0xe>
 80187f8:	e00a      	b.n	8018810 <rmw_destroy_wait_set+0x20>
 80187fa:	6889      	ldr	r1, [r1, #8]
 80187fc:	b141      	cbz	r1, 8018810 <rmw_destroy_wait_set+0x20>
 80187fe:	68cb      	ldr	r3, [r1, #12]
 8018800:	3310      	adds	r3, #16
 8018802:	4298      	cmp	r0, r3
 8018804:	d1f9      	bne.n	80187fa <rmw_destroy_wait_set+0xa>
 8018806:	4803      	ldr	r0, [pc, #12]	; (8018814 <rmw_destroy_wait_set+0x24>)
 8018808:	f7ff fc92 	bl	8018130 <put_memory>
 801880c:	2000      	movs	r0, #0
 801880e:	bd08      	pop	{r3, pc}
 8018810:	2001      	movs	r0, #1
 8018812:	bd08      	pop	{r3, pc}
 8018814:	2000e4c0 	.word	0x2000e4c0

08018818 <_MultiArrayDimension__cdr_serialize>:
 8018818:	b1d0      	cbz	r0, 8018850 <_MultiArrayDimension__cdr_serialize+0x38>
 801881a:	b570      	push	{r4, r5, r6, lr}
 801881c:	6806      	ldr	r6, [r0, #0]
 801881e:	460d      	mov	r5, r1
 8018820:	4604      	mov	r4, r0
 8018822:	b196      	cbz	r6, 801884a <_MultiArrayDimension__cdr_serialize+0x32>
 8018824:	4630      	mov	r0, r6
 8018826:	f7e7 fd0d 	bl	8000244 <strlen>
 801882a:	1c42      	adds	r2, r0, #1
 801882c:	4631      	mov	r1, r6
 801882e:	6060      	str	r0, [r4, #4]
 8018830:	4628      	mov	r0, r5
 8018832:	f7f9 fc3d 	bl	80120b0 <ucdr_serialize_sequence_char>
 8018836:	68e1      	ldr	r1, [r4, #12]
 8018838:	4628      	mov	r0, r5
 801883a:	f7f4 f9b1 	bl	800cba0 <ucdr_serialize_uint32_t>
 801883e:	4628      	mov	r0, r5
 8018840:	6921      	ldr	r1, [r4, #16]
 8018842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018846:	f7f4 b9ab 	b.w	800cba0 <ucdr_serialize_uint32_t>
 801884a:	4632      	mov	r2, r6
 801884c:	4630      	mov	r0, r6
 801884e:	e7ed      	b.n	801882c <_MultiArrayDimension__cdr_serialize+0x14>
 8018850:	4770      	bx	lr
 8018852:	bf00      	nop

08018854 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8018854:	b570      	push	{r4, r5, r6, lr}
 8018856:	4604      	mov	r4, r0
 8018858:	b1b0      	cbz	r0, 8018888 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801885a:	460d      	mov	r5, r1
 801885c:	2104      	movs	r1, #4
 801885e:	4628      	mov	r0, r5
 8018860:	f7f5 fbca 	bl	800dff8 <ucdr_alignment>
 8018864:	6866      	ldr	r6, [r4, #4]
 8018866:	1d6c      	adds	r4, r5, #5
 8018868:	4434      	add	r4, r6
 801886a:	1826      	adds	r6, r4, r0
 801886c:	2104      	movs	r1, #4
 801886e:	4630      	mov	r0, r6
 8018870:	f7f5 fbc2 	bl	800dff8 <ucdr_alignment>
 8018874:	1d04      	adds	r4, r0, #4
 8018876:	4434      	add	r4, r6
 8018878:	4620      	mov	r0, r4
 801887a:	2104      	movs	r1, #4
 801887c:	f7f5 fbbc 	bl	800dff8 <ucdr_alignment>
 8018880:	f1c5 0504 	rsb	r5, r5, #4
 8018884:	4428      	add	r0, r5
 8018886:	4420      	add	r0, r4
 8018888:	bd70      	pop	{r4, r5, r6, pc}
 801888a:	bf00      	nop

0801888c <_MultiArrayDimension__cdr_deserialize>:
 801888c:	b570      	push	{r4, r5, r6, lr}
 801888e:	460c      	mov	r4, r1
 8018890:	b082      	sub	sp, #8
 8018892:	b1d1      	cbz	r1, 80188ca <_MultiArrayDimension__cdr_deserialize+0x3e>
 8018894:	688e      	ldr	r6, [r1, #8]
 8018896:	ab01      	add	r3, sp, #4
 8018898:	4632      	mov	r2, r6
 801889a:	6809      	ldr	r1, [r1, #0]
 801889c:	4605      	mov	r5, r0
 801889e:	f7f9 fc19 	bl	80120d4 <ucdr_deserialize_sequence_char>
 80188a2:	9b01      	ldr	r3, [sp, #4]
 80188a4:	b968      	cbnz	r0, 80188c2 <_MultiArrayDimension__cdr_deserialize+0x36>
 80188a6:	429e      	cmp	r6, r3
 80188a8:	d312      	bcc.n	80188d0 <_MultiArrayDimension__cdr_deserialize+0x44>
 80188aa:	f104 010c 	add.w	r1, r4, #12
 80188ae:	4628      	mov	r0, r5
 80188b0:	f7f4 faa6 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80188b4:	4628      	mov	r0, r5
 80188b6:	f104 0110 	add.w	r1, r4, #16
 80188ba:	f7f4 faa1 	bl	800ce00 <ucdr_deserialize_uint32_t>
 80188be:	b002      	add	sp, #8
 80188c0:	bd70      	pop	{r4, r5, r6, pc}
 80188c2:	b103      	cbz	r3, 80188c6 <_MultiArrayDimension__cdr_deserialize+0x3a>
 80188c4:	3b01      	subs	r3, #1
 80188c6:	6063      	str	r3, [r4, #4]
 80188c8:	e7ef      	b.n	80188aa <_MultiArrayDimension__cdr_deserialize+0x1e>
 80188ca:	4608      	mov	r0, r1
 80188cc:	b002      	add	sp, #8
 80188ce:	bd70      	pop	{r4, r5, r6, pc}
 80188d0:	2101      	movs	r1, #1
 80188d2:	75a8      	strb	r0, [r5, #22]
 80188d4:	7569      	strb	r1, [r5, #21]
 80188d6:	6060      	str	r0, [r4, #4]
 80188d8:	4628      	mov	r0, r5
 80188da:	f7f5 fba5 	bl	800e028 <ucdr_align_to>
 80188de:	4628      	mov	r0, r5
 80188e0:	9901      	ldr	r1, [sp, #4]
 80188e2:	f7f5 fbd7 	bl	800e094 <ucdr_advance_buffer>
 80188e6:	e7e0      	b.n	80188aa <_MultiArrayDimension__cdr_deserialize+0x1e>

080188e8 <_MultiArrayDimension__max_serialized_size>:
 80188e8:	b510      	push	{r4, lr}
 80188ea:	2104      	movs	r1, #4
 80188ec:	2000      	movs	r0, #0
 80188ee:	f7f5 fb83 	bl	800dff8 <ucdr_alignment>
 80188f2:	1d04      	adds	r4, r0, #4
 80188f4:	4620      	mov	r0, r4
 80188f6:	2104      	movs	r1, #4
 80188f8:	f7f5 fb7e 	bl	800dff8 <ucdr_alignment>
 80188fc:	3004      	adds	r0, #4
 80188fe:	4420      	add	r0, r4
 8018900:	bd10      	pop	{r4, pc}
 8018902:	bf00      	nop

08018904 <_MultiArrayDimension__get_serialized_size>:
 8018904:	b510      	push	{r4, lr}
 8018906:	4604      	mov	r4, r0
 8018908:	b190      	cbz	r0, 8018930 <_MultiArrayDimension__get_serialized_size+0x2c>
 801890a:	2104      	movs	r1, #4
 801890c:	2000      	movs	r0, #0
 801890e:	f7f5 fb73 	bl	800dff8 <ucdr_alignment>
 8018912:	6864      	ldr	r4, [r4, #4]
 8018914:	2104      	movs	r1, #4
 8018916:	3405      	adds	r4, #5
 8018918:	4404      	add	r4, r0
 801891a:	4620      	mov	r0, r4
 801891c:	f7f5 fb6c 	bl	800dff8 <ucdr_alignment>
 8018920:	3004      	adds	r0, #4
 8018922:	4404      	add	r4, r0
 8018924:	4620      	mov	r0, r4
 8018926:	2104      	movs	r1, #4
 8018928:	f7f5 fb66 	bl	800dff8 <ucdr_alignment>
 801892c:	3004      	adds	r0, #4
 801892e:	4420      	add	r0, r4
 8018930:	bd10      	pop	{r4, pc}
 8018932:	bf00      	nop

08018934 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018934:	4800      	ldr	r0, [pc, #0]	; (8018938 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018936:	4770      	bx	lr
 8018938:	200002ac 	.word	0x200002ac

0801893c <get_serialized_size_geometry_msgs__msg__Pose>:
 801893c:	b570      	push	{r4, r5, r6, lr}
 801893e:	4604      	mov	r4, r0
 8018940:	b148      	cbz	r0, 8018956 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8018942:	460d      	mov	r5, r1
 8018944:	f000 ff3a 	bl	80197bc <get_serialized_size_geometry_msgs__msg__Point>
 8018948:	4606      	mov	r6, r0
 801894a:	f104 0018 	add.w	r0, r4, #24
 801894e:	19a9      	adds	r1, r5, r6
 8018950:	f7f9 f802 	bl	8011958 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8018954:	4430      	add	r0, r6
 8018956:	bd70      	pop	{r4, r5, r6, pc}

08018958 <_Pose__cdr_deserialize>:
 8018958:	b570      	push	{r4, r5, r6, lr}
 801895a:	460c      	mov	r4, r1
 801895c:	b189      	cbz	r1, 8018982 <_Pose__cdr_deserialize+0x2a>
 801895e:	4605      	mov	r5, r0
 8018960:	f000 ffb8 	bl	80198d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018964:	6843      	ldr	r3, [r0, #4]
 8018966:	4621      	mov	r1, r4
 8018968:	68db      	ldr	r3, [r3, #12]
 801896a:	4628      	mov	r0, r5
 801896c:	4798      	blx	r3
 801896e:	f7f9 f8a9 	bl	8011ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8018972:	6843      	ldr	r3, [r0, #4]
 8018974:	f104 0118 	add.w	r1, r4, #24
 8018978:	4628      	mov	r0, r5
 801897a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	4718      	bx	r3
 8018982:	4608      	mov	r0, r1
 8018984:	bd70      	pop	{r4, r5, r6, pc}
 8018986:	bf00      	nop

08018988 <_Pose__cdr_serialize>:
 8018988:	b198      	cbz	r0, 80189b2 <_Pose__cdr_serialize+0x2a>
 801898a:	b570      	push	{r4, r5, r6, lr}
 801898c:	460d      	mov	r5, r1
 801898e:	4604      	mov	r4, r0
 8018990:	f000 ffa0 	bl	80198d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8018994:	6843      	ldr	r3, [r0, #4]
 8018996:	4629      	mov	r1, r5
 8018998:	689b      	ldr	r3, [r3, #8]
 801899a:	4620      	mov	r0, r4
 801899c:	4798      	blx	r3
 801899e:	f7f9 f891 	bl	8011ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80189a2:	6843      	ldr	r3, [r0, #4]
 80189a4:	4629      	mov	r1, r5
 80189a6:	f104 0018 	add.w	r0, r4, #24
 80189aa:	689b      	ldr	r3, [r3, #8]
 80189ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189b0:	4718      	bx	r3
 80189b2:	4770      	bx	lr

080189b4 <_Pose__get_serialized_size>:
 80189b4:	b538      	push	{r3, r4, r5, lr}
 80189b6:	4604      	mov	r4, r0
 80189b8:	b148      	cbz	r0, 80189ce <_Pose__get_serialized_size+0x1a>
 80189ba:	2100      	movs	r1, #0
 80189bc:	f000 fefe 	bl	80197bc <get_serialized_size_geometry_msgs__msg__Point>
 80189c0:	4605      	mov	r5, r0
 80189c2:	f104 0018 	add.w	r0, r4, #24
 80189c6:	4629      	mov	r1, r5
 80189c8:	f7f8 ffc6 	bl	8011958 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80189cc:	4428      	add	r0, r5
 80189ce:	bd38      	pop	{r3, r4, r5, pc}

080189d0 <_Pose__max_serialized_size>:
 80189d0:	2301      	movs	r3, #1
 80189d2:	b510      	push	{r4, lr}
 80189d4:	b082      	sub	sp, #8
 80189d6:	2100      	movs	r1, #0
 80189d8:	f10d 0007 	add.w	r0, sp, #7
 80189dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80189e0:	f000 ff5c 	bl	801989c <max_serialized_size_geometry_msgs__msg__Point>
 80189e4:	4604      	mov	r4, r0
 80189e6:	f10d 0007 	add.w	r0, sp, #7
 80189ea:	4621      	mov	r1, r4
 80189ec:	f7f9 f846 	bl	8011a7c <max_serialized_size_geometry_msgs__msg__Quaternion>
 80189f0:	4420      	add	r0, r4
 80189f2:	b002      	add	sp, #8
 80189f4:	bd10      	pop	{r4, pc}
 80189f6:	bf00      	nop

080189f8 <max_serialized_size_geometry_msgs__msg__Pose>:
 80189f8:	2301      	movs	r3, #1
 80189fa:	b570      	push	{r4, r5, r6, lr}
 80189fc:	7003      	strb	r3, [r0, #0]
 80189fe:	4605      	mov	r5, r0
 8018a00:	460e      	mov	r6, r1
 8018a02:	f000 ff4b 	bl	801989c <max_serialized_size_geometry_msgs__msg__Point>
 8018a06:	4604      	mov	r4, r0
 8018a08:	4628      	mov	r0, r5
 8018a0a:	1931      	adds	r1, r6, r4
 8018a0c:	f7f9 f836 	bl	8011a7c <max_serialized_size_geometry_msgs__msg__Quaternion>
 8018a10:	4420      	add	r0, r4
 8018a12:	bd70      	pop	{r4, r5, r6, pc}

08018a14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8018a14:	4800      	ldr	r0, [pc, #0]	; (8018a18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8018a16:	4770      	bx	lr
 8018a18:	200002d4 	.word	0x200002d4

08018a1c <ucdr_serialize_string>:
 8018a1c:	b538      	push	{r3, r4, r5, lr}
 8018a1e:	4605      	mov	r5, r0
 8018a20:	4608      	mov	r0, r1
 8018a22:	460c      	mov	r4, r1
 8018a24:	f7e7 fc0e 	bl	8000244 <strlen>
 8018a28:	4602      	mov	r2, r0
 8018a2a:	4621      	mov	r1, r4
 8018a2c:	4628      	mov	r0, r5
 8018a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a32:	3201      	adds	r2, #1
 8018a34:	f7f9 bb3c 	b.w	80120b0 <ucdr_serialize_sequence_char>

08018a38 <ucdr_deserialize_string>:
 8018a38:	b500      	push	{lr}
 8018a3a:	b083      	sub	sp, #12
 8018a3c:	ab01      	add	r3, sp, #4
 8018a3e:	f7f9 fb49 	bl	80120d4 <ucdr_deserialize_sequence_char>
 8018a42:	b003      	add	sp, #12
 8018a44:	f85d fb04 	ldr.w	pc, [sp], #4

08018a48 <uxr_init_input_best_effort_stream>:
 8018a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a4c:	8003      	strh	r3, [r0, #0]
 8018a4e:	4770      	bx	lr

08018a50 <uxr_reset_input_best_effort_stream>:
 8018a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a54:	8003      	strh	r3, [r0, #0]
 8018a56:	4770      	bx	lr

08018a58 <uxr_receive_best_effort_message>:
 8018a58:	b538      	push	{r3, r4, r5, lr}
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	8800      	ldrh	r0, [r0, #0]
 8018a5e:	460d      	mov	r5, r1
 8018a60:	f000 fd20 	bl	80194a4 <uxr_seq_num_cmp>
 8018a64:	4603      	mov	r3, r0
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018a6c:	bfb8      	it	lt
 8018a6e:	8025      	strhlt	r5, [r4, #0]
 8018a70:	bd38      	pop	{r3, r4, r5, pc}
 8018a72:	bf00      	nop

08018a74 <on_full_input_buffer>:
 8018a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a76:	890f      	ldrh	r7, [r1, #8]
 8018a78:	460d      	mov	r5, r1
 8018a7a:	c912      	ldmia	r1, {r1, r4}
 8018a7c:	fbb4 f4f7 	udiv	r4, r4, r7
 8018a80:	6802      	ldr	r2, [r0, #0]
 8018a82:	4606      	mov	r6, r0
 8018a84:	1a53      	subs	r3, r2, r1
 8018a86:	fbb3 f3f4 	udiv	r3, r3, r4
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	fbb3 f2f7 	udiv	r2, r3, r7
 8018a92:	fb07 3312 	mls	r3, r7, r2, r3
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	fb04 f403 	mul.w	r4, r4, r3
 8018a9c:	7d28      	ldrb	r0, [r5, #20]
 8018a9e:	1d23      	adds	r3, r4, #4
 8018aa0:	440b      	add	r3, r1
 8018aa2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018aa6:	b110      	cbz	r0, 8018aae <on_full_input_buffer+0x3a>
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	f843 0c04 	str.w	r0, [r3, #-4]
 8018aae:	2a03      	cmp	r2, #3
 8018ab0:	d801      	bhi.n	8018ab6 <on_full_input_buffer+0x42>
 8018ab2:	2001      	movs	r0, #1
 8018ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ab6:	3408      	adds	r4, #8
 8018ab8:	4630      	mov	r0, r6
 8018aba:	6933      	ldr	r3, [r6, #16]
 8018abc:	4421      	add	r1, r4
 8018abe:	3a04      	subs	r2, #4
 8018ac0:	f7f5 fa8e 	bl	800dfe0 <ucdr_init_buffer_origin>
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	462a      	mov	r2, r5
 8018ac8:	4902      	ldr	r1, [pc, #8]	; (8018ad4 <on_full_input_buffer+0x60>)
 8018aca:	f7f5 fa67 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 8018ace:	2000      	movs	r0, #0
 8018ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	08018a75 	.word	0x08018a75

08018ad8 <uxr_init_input_reliable_stream>:
 8018ad8:	b430      	push	{r4, r5}
 8018ada:	2500      	movs	r5, #0
 8018adc:	9c02      	ldr	r4, [sp, #8]
 8018ade:	6001      	str	r1, [r0, #0]
 8018ae0:	8103      	strh	r3, [r0, #8]
 8018ae2:	6042      	str	r2, [r0, #4]
 8018ae4:	6104      	str	r4, [r0, #16]
 8018ae6:	7505      	strb	r5, [r0, #20]
 8018ae8:	b1ab      	cbz	r3, 8018b16 <uxr_init_input_reliable_stream+0x3e>
 8018aea:	600d      	str	r5, [r1, #0]
 8018aec:	8901      	ldrh	r1, [r0, #8]
 8018aee:	2901      	cmp	r1, #1
 8018af0:	d911      	bls.n	8018b16 <uxr_init_input_reliable_stream+0x3e>
 8018af2:	2201      	movs	r2, #1
 8018af4:	fbb2 f3f1 	udiv	r3, r2, r1
 8018af8:	6844      	ldr	r4, [r0, #4]
 8018afa:	fb01 2313 	mls	r3, r1, r3, r2
 8018afe:	fbb4 f1f1 	udiv	r1, r4, r1
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	fb03 f301 	mul.w	r3, r3, r1
 8018b08:	6801      	ldr	r1, [r0, #0]
 8018b0a:	3201      	adds	r2, #1
 8018b0c:	50cd      	str	r5, [r1, r3]
 8018b0e:	8901      	ldrh	r1, [r0, #8]
 8018b10:	b292      	uxth	r2, r2
 8018b12:	4291      	cmp	r1, r2
 8018b14:	d8ee      	bhi.n	8018af4 <uxr_init_input_reliable_stream+0x1c>
 8018b16:	bc30      	pop	{r4, r5}
 8018b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b1c:	60c3      	str	r3, [r0, #12]
 8018b1e:	4770      	bx	lr

08018b20 <uxr_reset_input_reliable_stream>:
 8018b20:	8902      	ldrh	r2, [r0, #8]
 8018b22:	b1ca      	cbz	r2, 8018b58 <uxr_reset_input_reliable_stream+0x38>
 8018b24:	b470      	push	{r4, r5, r6}
 8018b26:	2500      	movs	r5, #0
 8018b28:	4629      	mov	r1, r5
 8018b2a:	462e      	mov	r6, r5
 8018b2c:	fbb1 f3f2 	udiv	r3, r1, r2
 8018b30:	6844      	ldr	r4, [r0, #4]
 8018b32:	fb02 1313 	mls	r3, r2, r3, r1
 8018b36:	fbb4 f2f2 	udiv	r2, r4, r2
 8018b3a:	b29b      	uxth	r3, r3
 8018b3c:	fb03 f302 	mul.w	r3, r3, r2
 8018b40:	6802      	ldr	r2, [r0, #0]
 8018b42:	3501      	adds	r5, #1
 8018b44:	50d6      	str	r6, [r2, r3]
 8018b46:	8902      	ldrh	r2, [r0, #8]
 8018b48:	b2a9      	uxth	r1, r5
 8018b4a:	428a      	cmp	r2, r1
 8018b4c:	d8ee      	bhi.n	8018b2c <uxr_reset_input_reliable_stream+0xc>
 8018b4e:	bc70      	pop	{r4, r5, r6}
 8018b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b54:	60c3      	str	r3, [r0, #12]
 8018b56:	4770      	bx	lr
 8018b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b5c:	60c3      	str	r3, [r0, #12]
 8018b5e:	4770      	bx	lr

08018b60 <uxr_receive_reliable_message>:
 8018b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b64:	4604      	mov	r4, r0
 8018b66:	460d      	mov	r5, r1
 8018b68:	8901      	ldrh	r1, [r0, #8]
 8018b6a:	8980      	ldrh	r0, [r0, #12]
 8018b6c:	4690      	mov	r8, r2
 8018b6e:	461f      	mov	r7, r3
 8018b70:	f000 fc90 	bl	8019494 <uxr_seq_num_add>
 8018b74:	4629      	mov	r1, r5
 8018b76:	4606      	mov	r6, r0
 8018b78:	89a0      	ldrh	r0, [r4, #12]
 8018b7a:	f000 fc93 	bl	80194a4 <uxr_seq_num_cmp>
 8018b7e:	2800      	cmp	r0, #0
 8018b80:	db0a      	blt.n	8018b98 <uxr_receive_reliable_message+0x38>
 8018b82:	2600      	movs	r6, #0
 8018b84:	4629      	mov	r1, r5
 8018b86:	89e0      	ldrh	r0, [r4, #14]
 8018b88:	f000 fc8c 	bl	80194a4 <uxr_seq_num_cmp>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	bfb8      	it	lt
 8018b90:	81e5      	strhlt	r5, [r4, #14]
 8018b92:	4630      	mov	r0, r6
 8018b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b98:	4630      	mov	r0, r6
 8018b9a:	4629      	mov	r1, r5
 8018b9c:	f000 fc82 	bl	80194a4 <uxr_seq_num_cmp>
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	dbee      	blt.n	8018b82 <uxr_receive_reliable_message+0x22>
 8018ba4:	4640      	mov	r0, r8
 8018ba6:	6923      	ldr	r3, [r4, #16]
 8018ba8:	4798      	blx	r3
 8018baa:	4681      	mov	r9, r0
 8018bac:	2101      	movs	r1, #1
 8018bae:	89a0      	ldrh	r0, [r4, #12]
 8018bb0:	f000 fc70 	bl	8019494 <uxr_seq_num_add>
 8018bb4:	f1b9 0f00 	cmp.w	r9, #0
 8018bb8:	d101      	bne.n	8018bbe <uxr_receive_reliable_message+0x5e>
 8018bba:	4285      	cmp	r5, r0
 8018bbc:	d049      	beq.n	8018c52 <uxr_receive_reliable_message+0xf2>
 8018bbe:	8921      	ldrh	r1, [r4, #8]
 8018bc0:	6862      	ldr	r2, [r4, #4]
 8018bc2:	fbb5 f3f1 	udiv	r3, r5, r1
 8018bc6:	fbb2 f2f1 	udiv	r2, r2, r1
 8018bca:	fb01 5313 	mls	r3, r1, r3, r5
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	fb03 f302 	mul.w	r3, r3, r2
 8018bd4:	6820      	ldr	r0, [r4, #0]
 8018bd6:	3304      	adds	r3, #4
 8018bd8:	4418      	add	r0, r3
 8018bda:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d1cf      	bne.n	8018b82 <uxr_receive_reliable_message+0x22>
 8018be2:	4641      	mov	r1, r8
 8018be4:	463a      	mov	r2, r7
 8018be6:	f000 ff01 	bl	80199ec <memcpy>
 8018bea:	8921      	ldrh	r1, [r4, #8]
 8018bec:	6862      	ldr	r2, [r4, #4]
 8018bee:	fbb5 f3f1 	udiv	r3, r5, r1
 8018bf2:	fbb2 f2f1 	udiv	r2, r2, r1
 8018bf6:	2001      	movs	r0, #1
 8018bf8:	fb01 5313 	mls	r3, r1, r3, r5
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	fb03 f302 	mul.w	r3, r3, r2
 8018c02:	6822      	ldr	r2, [r4, #0]
 8018c04:	50d7      	str	r7, [r2, r3]
 8018c06:	9b08      	ldr	r3, [sp, #32]
 8018c08:	7018      	strb	r0, [r3, #0]
 8018c0a:	f1b9 0f00 	cmp.w	r9, #0
 8018c0e:	d0b8      	beq.n	8018b82 <uxr_receive_reliable_message+0x22>
 8018c10:	89a6      	ldrh	r6, [r4, #12]
 8018c12:	e001      	b.n	8018c18 <uxr_receive_reliable_message+0xb8>
 8018c14:	2801      	cmp	r0, #1
 8018c16:	d1b4      	bne.n	8018b82 <uxr_receive_reliable_message+0x22>
 8018c18:	4630      	mov	r0, r6
 8018c1a:	2101      	movs	r1, #1
 8018c1c:	f000 fc3a 	bl	8019494 <uxr_seq_num_add>
 8018c20:	8921      	ldrh	r1, [r4, #8]
 8018c22:	6862      	ldr	r2, [r4, #4]
 8018c24:	fbb0 f3f1 	udiv	r3, r0, r1
 8018c28:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c2c:	fb01 0313 	mls	r3, r1, r3, r0
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	fb03 f302 	mul.w	r3, r3, r2
 8018c36:	4606      	mov	r6, r0
 8018c38:	6820      	ldr	r0, [r4, #0]
 8018c3a:	3304      	adds	r3, #4
 8018c3c:	4418      	add	r0, r3
 8018c3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d09d      	beq.n	8018b82 <uxr_receive_reliable_message+0x22>
 8018c46:	6923      	ldr	r3, [r4, #16]
 8018c48:	4798      	blx	r3
 8018c4a:	2802      	cmp	r0, #2
 8018c4c:	d1e2      	bne.n	8018c14 <uxr_receive_reliable_message+0xb4>
 8018c4e:	2601      	movs	r6, #1
 8018c50:	e798      	b.n	8018b84 <uxr_receive_reliable_message+0x24>
 8018c52:	9b08      	ldr	r3, [sp, #32]
 8018c54:	81a5      	strh	r5, [r4, #12]
 8018c56:	2601      	movs	r6, #1
 8018c58:	f883 9000 	strb.w	r9, [r3]
 8018c5c:	e792      	b.n	8018b84 <uxr_receive_reliable_message+0x24>
 8018c5e:	bf00      	nop

08018c60 <uxr_next_input_reliable_buffer_available>:
 8018c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c64:	4604      	mov	r4, r0
 8018c66:	460e      	mov	r6, r1
 8018c68:	8980      	ldrh	r0, [r0, #12]
 8018c6a:	2101      	movs	r1, #1
 8018c6c:	4617      	mov	r7, r2
 8018c6e:	f000 fc11 	bl	8019494 <uxr_seq_num_add>
 8018c72:	8921      	ldrh	r1, [r4, #8]
 8018c74:	6862      	ldr	r2, [r4, #4]
 8018c76:	fbb0 f3f1 	udiv	r3, r0, r1
 8018c7a:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c7e:	fb01 0313 	mls	r3, r1, r3, r0
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	fb03 f302 	mul.w	r3, r3, r2
 8018c88:	6822      	ldr	r2, [r4, #0]
 8018c8a:	3304      	adds	r3, #4
 8018c8c:	eb02 0803 	add.w	r8, r2, r3
 8018c90:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8018c94:	f1b9 0f00 	cmp.w	r9, #0
 8018c98:	d025      	beq.n	8018ce6 <uxr_next_input_reliable_buffer_available+0x86>
 8018c9a:	4605      	mov	r5, r0
 8018c9c:	6923      	ldr	r3, [r4, #16]
 8018c9e:	4640      	mov	r0, r8
 8018ca0:	4798      	blx	r3
 8018ca2:	4682      	mov	sl, r0
 8018ca4:	b310      	cbz	r0, 8018cec <uxr_next_input_reliable_buffer_available+0x8c>
 8018ca6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018caa:	e005      	b.n	8018cb8 <uxr_next_input_reliable_buffer_available+0x58>
 8018cac:	6923      	ldr	r3, [r4, #16]
 8018cae:	4798      	blx	r3
 8018cb0:	2802      	cmp	r0, #2
 8018cb2:	d032      	beq.n	8018d1a <uxr_next_input_reliable_buffer_available+0xba>
 8018cb4:	2801      	cmp	r0, #1
 8018cb6:	d116      	bne.n	8018ce6 <uxr_next_input_reliable_buffer_available+0x86>
 8018cb8:	4650      	mov	r0, sl
 8018cba:	2101      	movs	r1, #1
 8018cbc:	f000 fbea 	bl	8019494 <uxr_seq_num_add>
 8018cc0:	4682      	mov	sl, r0
 8018cc2:	8922      	ldrh	r2, [r4, #8]
 8018cc4:	6860      	ldr	r0, [r4, #4]
 8018cc6:	fbba f3f2 	udiv	r3, sl, r2
 8018cca:	fbb0 f0f2 	udiv	r0, r0, r2
 8018cce:	fb02 a313 	mls	r3, r2, r3, sl
 8018cd2:	b29b      	uxth	r3, r3
 8018cd4:	fb03 f300 	mul.w	r3, r3, r0
 8018cd8:	6820      	ldr	r0, [r4, #0]
 8018cda:	3304      	adds	r3, #4
 8018cdc:	4418      	add	r0, r3
 8018cde:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d1e2      	bne.n	8018cac <uxr_next_input_reliable_buffer_available+0x4c>
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cec:	464a      	mov	r2, r9
 8018cee:	4641      	mov	r1, r8
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	f7f5 f97d 	bl	800dff0 <ucdr_init_buffer>
 8018cf6:	8921      	ldrh	r1, [r4, #8]
 8018cf8:	6862      	ldr	r2, [r4, #4]
 8018cfa:	fbb5 f3f1 	udiv	r3, r5, r1
 8018cfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8018d02:	fb01 5313 	mls	r3, r1, r3, r5
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	fb03 f302 	mul.w	r3, r3, r2
 8018d0c:	6822      	ldr	r2, [r4, #0]
 8018d0e:	2001      	movs	r0, #1
 8018d10:	f842 a003 	str.w	sl, [r2, r3]
 8018d14:	81a5      	strh	r5, [r4, #12]
 8018d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d1a:	8922      	ldrh	r2, [r4, #8]
 8018d1c:	6863      	ldr	r3, [r4, #4]
 8018d1e:	fbb5 f0f2 	udiv	r0, r5, r2
 8018d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d26:	f04f 0c00 	mov.w	ip, #0
 8018d2a:	fb02 5510 	mls	r5, r2, r0, r5
 8018d2e:	b2ad      	uxth	r5, r5
 8018d30:	fb05 f503 	mul.w	r5, r5, r3
 8018d34:	6823      	ldr	r3, [r4, #0]
 8018d36:	4630      	mov	r0, r6
 8018d38:	eba9 0207 	sub.w	r2, r9, r7
 8018d3c:	eb08 0107 	add.w	r1, r8, r7
 8018d40:	f843 c005 	str.w	ip, [r3, r5]
 8018d44:	f7f5 f954 	bl	800dff0 <ucdr_init_buffer>
 8018d48:	4630      	mov	r0, r6
 8018d4a:	4622      	mov	r2, r4
 8018d4c:	4903      	ldr	r1, [pc, #12]	; (8018d5c <uxr_next_input_reliable_buffer_available+0xfc>)
 8018d4e:	f7f5 f925 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 8018d52:	2001      	movs	r0, #1
 8018d54:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018d58:	e7c6      	b.n	8018ce8 <uxr_next_input_reliable_buffer_available+0x88>
 8018d5a:	bf00      	nop
 8018d5c:	08018a75 	.word	0x08018a75

08018d60 <uxr_process_heartbeat>:
 8018d60:	b538      	push	{r3, r4, r5, lr}
 8018d62:	4611      	mov	r1, r2
 8018d64:	4604      	mov	r4, r0
 8018d66:	89c0      	ldrh	r0, [r0, #14]
 8018d68:	4615      	mov	r5, r2
 8018d6a:	f000 fb9b 	bl	80194a4 <uxr_seq_num_cmp>
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	bfb8      	it	lt
 8018d72:	81e5      	strhlt	r5, [r4, #14]
 8018d74:	bd38      	pop	{r3, r4, r5, pc}
 8018d76:	bf00      	nop

08018d78 <uxr_compute_acknack>:
 8018d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d7c:	8903      	ldrh	r3, [r0, #8]
 8018d7e:	4604      	mov	r4, r0
 8018d80:	460d      	mov	r5, r1
 8018d82:	8986      	ldrh	r6, [r0, #12]
 8018d84:	b1d3      	cbz	r3, 8018dbc <uxr_compute_acknack+0x44>
 8018d86:	4630      	mov	r0, r6
 8018d88:	2701      	movs	r7, #1
 8018d8a:	e003      	b.n	8018d94 <uxr_compute_acknack+0x1c>
 8018d8c:	4567      	cmp	r7, ip
 8018d8e:	d215      	bcs.n	8018dbc <uxr_compute_acknack+0x44>
 8018d90:	89a0      	ldrh	r0, [r4, #12]
 8018d92:	3701      	adds	r7, #1
 8018d94:	b2b9      	uxth	r1, r7
 8018d96:	f000 fb7d 	bl	8019494 <uxr_seq_num_add>
 8018d9a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018d9e:	6863      	ldr	r3, [r4, #4]
 8018da0:	fbb0 f2fc 	udiv	r2, r0, ip
 8018da4:	fbb3 f3fc 	udiv	r3, r3, ip
 8018da8:	fb0c 0212 	mls	r2, ip, r2, r0
 8018dac:	6821      	ldr	r1, [r4, #0]
 8018dae:	b292      	uxth	r2, r2
 8018db0:	fb02 1303 	mla	r3, r2, r3, r1
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1e8      	bne.n	8018d8c <uxr_compute_acknack+0x14>
 8018dba:	4606      	mov	r6, r0
 8018dbc:	4630      	mov	r0, r6
 8018dbe:	2101      	movs	r1, #1
 8018dc0:	802e      	strh	r6, [r5, #0]
 8018dc2:	89e6      	ldrh	r6, [r4, #14]
 8018dc4:	f000 fb6a 	bl	801949c <uxr_seq_num_sub>
 8018dc8:	4601      	mov	r1, r0
 8018dca:	4630      	mov	r0, r6
 8018dcc:	f000 fb66 	bl	801949c <uxr_seq_num_sub>
 8018dd0:	4606      	mov	r6, r0
 8018dd2:	b310      	cbz	r0, 8018e1a <uxr_compute_acknack+0xa2>
 8018dd4:	f04f 0900 	mov.w	r9, #0
 8018dd8:	f04f 0801 	mov.w	r8, #1
 8018ddc:	464f      	mov	r7, r9
 8018dde:	fa1f f189 	uxth.w	r1, r9
 8018de2:	8828      	ldrh	r0, [r5, #0]
 8018de4:	f000 fb56 	bl	8019494 <uxr_seq_num_add>
 8018de8:	8923      	ldrh	r3, [r4, #8]
 8018dea:	6862      	ldr	r2, [r4, #4]
 8018dec:	fbb0 fcf3 	udiv	ip, r0, r3
 8018df0:	fbb2 f1f3 	udiv	r1, r2, r3
 8018df4:	fb0c 0313 	mls	r3, ip, r3, r0
 8018df8:	6822      	ldr	r2, [r4, #0]
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	fb03 2201 	mla	r2, r3, r1, r2
 8018e00:	6812      	ldr	r2, [r2, #0]
 8018e02:	fa08 f309 	lsl.w	r3, r8, r9
 8018e06:	f109 0901 	add.w	r9, r9, #1
 8018e0a:	b90a      	cbnz	r2, 8018e10 <uxr_compute_acknack+0x98>
 8018e0c:	431f      	orrs	r7, r3
 8018e0e:	b2bf      	uxth	r7, r7
 8018e10:	454e      	cmp	r6, r9
 8018e12:	d1e4      	bne.n	8018dde <uxr_compute_acknack+0x66>
 8018e14:	4638      	mov	r0, r7
 8018e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e1a:	4607      	mov	r7, r0
 8018e1c:	4638      	mov	r0, r7
 8018e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e22:	bf00      	nop

08018e24 <uxr_init_output_best_effort_stream>:
 8018e24:	b410      	push	{r4}
 8018e26:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8018e2a:	e9c0 1300 	strd	r1, r3, [r0]
 8018e2e:	81c4      	strh	r4, [r0, #14]
 8018e30:	7303      	strb	r3, [r0, #12]
 8018e32:	bc10      	pop	{r4}
 8018e34:	6082      	str	r2, [r0, #8]
 8018e36:	4770      	bx	lr

08018e38 <uxr_reset_output_best_effort_stream>:
 8018e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e3c:	7b03      	ldrb	r3, [r0, #12]
 8018e3e:	81c2      	strh	r2, [r0, #14]
 8018e40:	6043      	str	r3, [r0, #4]
 8018e42:	4770      	bx	lr

08018e44 <uxr_prepare_best_effort_buffer_to_write>:
 8018e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e46:	4604      	mov	r4, r0
 8018e48:	b083      	sub	sp, #12
 8018e4a:	6840      	ldr	r0, [r0, #4]
 8018e4c:	460d      	mov	r5, r1
 8018e4e:	4616      	mov	r6, r2
 8018e50:	f7fb fb2a 	bl	80144a8 <uxr_submessage_padding>
 8018e54:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018e58:	4410      	add	r0, r2
 8018e5a:	1942      	adds	r2, r0, r5
 8018e5c:	4293      	cmp	r3, r2
 8018e5e:	bf2c      	ite	cs
 8018e60:	2701      	movcs	r7, #1
 8018e62:	2700      	movcc	r7, #0
 8018e64:	d202      	bcs.n	8018e6c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018e66:	4638      	mov	r0, r7
 8018e68:	b003      	add	sp, #12
 8018e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e6c:	9000      	str	r0, [sp, #0]
 8018e6e:	6821      	ldr	r1, [r4, #0]
 8018e70:	4630      	mov	r0, r6
 8018e72:	2300      	movs	r3, #0
 8018e74:	f7f5 f8aa 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8018e78:	4638      	mov	r0, r7
 8018e7a:	6861      	ldr	r1, [r4, #4]
 8018e7c:	4429      	add	r1, r5
 8018e7e:	6061      	str	r1, [r4, #4]
 8018e80:	b003      	add	sp, #12
 8018e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e84 <uxr_prepare_best_effort_buffer_to_send>:
 8018e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e88:	6845      	ldr	r5, [r0, #4]
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	7b00      	ldrb	r0, [r0, #12]
 8018e8e:	4285      	cmp	r5, r0
 8018e90:	bf8c      	ite	hi
 8018e92:	2701      	movhi	r7, #1
 8018e94:	2700      	movls	r7, #0
 8018e96:	d802      	bhi.n	8018e9e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018e98:	4638      	mov	r0, r7
 8018e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9e:	4688      	mov	r8, r1
 8018ea0:	89e0      	ldrh	r0, [r4, #14]
 8018ea2:	2101      	movs	r1, #1
 8018ea4:	4615      	mov	r5, r2
 8018ea6:	461e      	mov	r6, r3
 8018ea8:	f000 faf4 	bl	8019494 <uxr_seq_num_add>
 8018eac:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018eb0:	81e0      	strh	r0, [r4, #14]
 8018eb2:	8030      	strh	r0, [r6, #0]
 8018eb4:	f8c8 2000 	str.w	r2, [r8]
 8018eb8:	602b      	str	r3, [r5, #0]
 8018eba:	7b23      	ldrb	r3, [r4, #12]
 8018ebc:	4638      	mov	r0, r7
 8018ebe:	6063      	str	r3, [r4, #4]
 8018ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ec4 <on_full_output_buffer>:
 8018ec4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8018ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eca:	460d      	mov	r5, r1
 8018ecc:	c90a      	ldmia	r1, {r1, r3}
 8018ece:	fbb3 f7fc 	udiv	r7, r3, ip
 8018ed2:	6804      	ldr	r4, [r0, #0]
 8018ed4:	4606      	mov	r6, r0
 8018ed6:	1a63      	subs	r3, r4, r1
 8018ed8:	fbb3 f3f7 	udiv	r3, r3, r7
 8018edc:	3301      	adds	r3, #1
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	fbb3 f4fc 	udiv	r4, r3, ip
 8018ee4:	fb0c 3314 	mls	r3, ip, r4, r3
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	fb07 f303 	mul.w	r3, r7, r3
 8018eee:	7b2a      	ldrb	r2, [r5, #12]
 8018ef0:	58cc      	ldr	r4, [r1, r3]
 8018ef2:	4413      	add	r3, r2
 8018ef4:	3308      	adds	r3, #8
 8018ef6:	1aa2      	subs	r2, r4, r2
 8018ef8:	4419      	add	r1, r3
 8018efa:	3a04      	subs	r2, #4
 8018efc:	6903      	ldr	r3, [r0, #16]
 8018efe:	f7f5 f86f 	bl	800dfe0 <ucdr_init_buffer_origin>
 8018f02:	4630      	mov	r0, r6
 8018f04:	462a      	mov	r2, r5
 8018f06:	4902      	ldr	r1, [pc, #8]	; (8018f10 <on_full_output_buffer+0x4c>)
 8018f08:	f7f5 f848 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 8018f0c:	2000      	movs	r0, #0
 8018f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f10:	08018ec5 	.word	0x08018ec5

08018f14 <uxr_init_output_reliable_stream>:
 8018f14:	b430      	push	{r4, r5}
 8018f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018f1a:	6001      	str	r1, [r0, #0]
 8018f1c:	8103      	strh	r3, [r0, #8]
 8018f1e:	6042      	str	r2, [r0, #4]
 8018f20:	7304      	strb	r4, [r0, #12]
 8018f22:	b1b3      	cbz	r3, 8018f52 <uxr_init_output_reliable_stream+0x3e>
 8018f24:	600c      	str	r4, [r1, #0]
 8018f26:	8901      	ldrh	r1, [r0, #8]
 8018f28:	2901      	cmp	r1, #1
 8018f2a:	d912      	bls.n	8018f52 <uxr_init_output_reliable_stream+0x3e>
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	fbb2 f3f1 	udiv	r3, r2, r1
 8018f32:	6844      	ldr	r4, [r0, #4]
 8018f34:	fb01 2313 	mls	r3, r1, r3, r2
 8018f38:	fbb4 f1f1 	udiv	r1, r4, r1
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	fb03 f301 	mul.w	r3, r3, r1
 8018f42:	7b04      	ldrb	r4, [r0, #12]
 8018f44:	6801      	ldr	r1, [r0, #0]
 8018f46:	3201      	adds	r2, #1
 8018f48:	50cc      	str	r4, [r1, r3]
 8018f4a:	8901      	ldrh	r1, [r0, #8]
 8018f4c:	b292      	uxth	r2, r2
 8018f4e:	4291      	cmp	r1, r2
 8018f50:	d8ed      	bhi.n	8018f2e <uxr_init_output_reliable_stream+0x1a>
 8018f52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018f56:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8018f5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018f5e:	2200      	movs	r2, #0
 8018f60:	4b04      	ldr	r3, [pc, #16]	; (8018f74 <uxr_init_output_reliable_stream+0x60>)
 8018f62:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8018f66:	bc30      	pop	{r4, r5}
 8018f68:	8241      	strh	r1, [r0, #18]
 8018f6a:	8402      	strh	r2, [r0, #32]
 8018f6c:	f8c0 300e 	str.w	r3, [r0, #14]
 8018f70:	4770      	bx	lr
 8018f72:	bf00      	nop
 8018f74:	ffff0000 	.word	0xffff0000

08018f78 <uxr_reset_output_reliable_stream>:
 8018f78:	8902      	ldrh	r2, [r0, #8]
 8018f7a:	b430      	push	{r4, r5}
 8018f7c:	b19a      	cbz	r2, 8018fa6 <uxr_reset_output_reliable_stream+0x2e>
 8018f7e:	2500      	movs	r5, #0
 8018f80:	4629      	mov	r1, r5
 8018f82:	fbb1 f3f2 	udiv	r3, r1, r2
 8018f86:	6844      	ldr	r4, [r0, #4]
 8018f88:	fb02 1313 	mls	r3, r2, r3, r1
 8018f8c:	fbb4 f2f2 	udiv	r2, r4, r2
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	fb03 f302 	mul.w	r3, r3, r2
 8018f96:	7b01      	ldrb	r1, [r0, #12]
 8018f98:	6802      	ldr	r2, [r0, #0]
 8018f9a:	3501      	adds	r5, #1
 8018f9c:	50d1      	str	r1, [r2, r3]
 8018f9e:	8902      	ldrh	r2, [r0, #8]
 8018fa0:	b2a9      	uxth	r1, r5
 8018fa2:	428a      	cmp	r2, r1
 8018fa4:	d8ed      	bhi.n	8018f82 <uxr_reset_output_reliable_stream+0xa>
 8018fa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018faa:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8018fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	4b04      	ldr	r3, [pc, #16]	; (8018fc8 <uxr_reset_output_reliable_stream+0x50>)
 8018fb6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8018fba:	bc30      	pop	{r4, r5}
 8018fbc:	8241      	strh	r1, [r0, #18]
 8018fbe:	8402      	strh	r2, [r0, #32]
 8018fc0:	f8c0 300e 	str.w	r3, [r0, #14]
 8018fc4:	4770      	bx	lr
 8018fc6:	bf00      	nop
 8018fc8:	ffff0000 	.word	0xffff0000

08018fcc <uxr_prepare_reliable_buffer_to_write>:
 8018fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd0:	4604      	mov	r4, r0
 8018fd2:	89c5      	ldrh	r5, [r0, #14]
 8018fd4:	8900      	ldrh	r0, [r0, #8]
 8018fd6:	6866      	ldr	r6, [r4, #4]
 8018fd8:	fbb5 f3f0 	udiv	r3, r5, r0
 8018fdc:	fbb6 f6f0 	udiv	r6, r6, r0
 8018fe0:	fb00 5313 	mls	r3, r0, r3, r5
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	fb06 f303 	mul.w	r3, r6, r3
 8018fea:	4688      	mov	r8, r1
 8018fec:	6821      	ldr	r1, [r4, #0]
 8018fee:	3304      	adds	r3, #4
 8018ff0:	b091      	sub	sp, #68	; 0x44
 8018ff2:	18cb      	adds	r3, r1, r3
 8018ff4:	9604      	str	r6, [sp, #16]
 8018ff6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018ffa:	2104      	movs	r1, #4
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	9305      	str	r3, [sp, #20]
 8019000:	9206      	str	r2, [sp, #24]
 8019002:	f7f4 fff9 	bl	800dff8 <ucdr_alignment>
 8019006:	1833      	adds	r3, r6, r0
 8019008:	9e04      	ldr	r6, [sp, #16]
 801900a:	eb03 0708 	add.w	r7, r3, r8
 801900e:	3e04      	subs	r6, #4
 8019010:	42b7      	cmp	r7, r6
 8019012:	9303      	str	r3, [sp, #12]
 8019014:	f240 80dd 	bls.w	80191d2 <uxr_prepare_reliable_buffer_to_write+0x206>
 8019018:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801901c:	eb0e 0308 	add.w	r3, lr, r8
 8019020:	42b3      	cmp	r3, r6
 8019022:	f240 80c3 	bls.w	80191ac <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8019026:	9b03      	ldr	r3, [sp, #12]
 8019028:	3304      	adds	r3, #4
 801902a:	42b3      	cmp	r3, r6
 801902c:	f080 810d 	bcs.w	801924a <uxr_prepare_reliable_buffer_to_write+0x27e>
 8019030:	8920      	ldrh	r0, [r4, #8]
 8019032:	2800      	cmp	r0, #0
 8019034:	f000 8123 	beq.w	801927e <uxr_prepare_reliable_buffer_to_write+0x2b2>
 8019038:	f04f 0c00 	mov.w	ip, #0
 801903c:	6862      	ldr	r2, [r4, #4]
 801903e:	4661      	mov	r1, ip
 8019040:	fbb2 f9f0 	udiv	r9, r2, r0
 8019044:	4662      	mov	r2, ip
 8019046:	6827      	ldr	r7, [r4, #0]
 8019048:	fbb2 f3f0 	udiv	r3, r2, r0
 801904c:	fb00 2313 	mls	r3, r0, r3, r2
 8019050:	b29b      	uxth	r3, r3
 8019052:	fb09 7303 	mla	r3, r9, r3, r7
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	f10c 0c01 	add.w	ip, ip, #1
 801905c:	459e      	cmp	lr, r3
 801905e:	bf08      	it	eq
 8019060:	3101      	addeq	r1, #1
 8019062:	fa1f f28c 	uxth.w	r2, ip
 8019066:	bf08      	it	eq
 8019068:	b289      	uxtheq	r1, r1
 801906a:	4282      	cmp	r2, r0
 801906c:	d3ec      	bcc.n	8019048 <uxr_prepare_reliable_buffer_to_write+0x7c>
 801906e:	9b03      	ldr	r3, [sp, #12]
 8019070:	1f37      	subs	r7, r6, #4
 8019072:	b2bf      	uxth	r7, r7
 8019074:	eba7 0903 	sub.w	r9, r7, r3
 8019078:	fa1f f989 	uxth.w	r9, r9
 801907c:	eba7 070e 	sub.w	r7, r7, lr
 8019080:	b2bf      	uxth	r7, r7
 8019082:	eba8 0809 	sub.w	r8, r8, r9
 8019086:	fbb8 faf7 	udiv	sl, r8, r7
 801908a:	fb07 831a 	mls	r3, r7, sl, r8
 801908e:	9707      	str	r7, [sp, #28]
 8019090:	b113      	cbz	r3, 8019098 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8019092:	9307      	str	r3, [sp, #28]
 8019094:	f10a 0a01 	add.w	sl, sl, #1
 8019098:	fa1f fa8a 	uxth.w	sl, sl
 801909c:	458a      	cmp	sl, r1
 801909e:	f200 8094 	bhi.w	80191ca <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80190a2:	f10d 0b20 	add.w	fp, sp, #32
 80190a6:	f1ba 0f00 	cmp.w	sl, #0
 80190aa:	d039      	beq.n	8019120 <uxr_prepare_reliable_buffer_to_write+0x154>
 80190ac:	f04f 0800 	mov.w	r8, #0
 80190b0:	f10d 0b20 	add.w	fp, sp, #32
 80190b4:	e000      	b.n	80190b8 <uxr_prepare_reliable_buffer_to_write+0xec>
 80190b6:	46b9      	mov	r9, r7
 80190b8:	fbb5 f1f0 	udiv	r1, r5, r0
 80190bc:	6863      	ldr	r3, [r4, #4]
 80190be:	fb00 5111 	mls	r1, r0, r1, r5
 80190c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80190c6:	b289      	uxth	r1, r1
 80190c8:	fb01 f103 	mul.w	r1, r1, r3
 80190cc:	6823      	ldr	r3, [r4, #0]
 80190ce:	3104      	adds	r1, #4
 80190d0:	4419      	add	r1, r3
 80190d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190d6:	4632      	mov	r2, r6
 80190d8:	4658      	mov	r0, fp
 80190da:	9300      	str	r3, [sp, #0]
 80190dc:	2300      	movs	r3, #0
 80190de:	f7f4 ff75 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 80190e2:	464a      	mov	r2, r9
 80190e4:	2300      	movs	r3, #0
 80190e6:	210d      	movs	r1, #13
 80190e8:	4658      	mov	r0, fp
 80190ea:	f7fb f99d 	bl	8014428 <uxr_buffer_submessage_header>
 80190ee:	8921      	ldrh	r1, [r4, #8]
 80190f0:	6862      	ldr	r2, [r4, #4]
 80190f2:	fbb5 f3f1 	udiv	r3, r5, r1
 80190f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80190fa:	fb01 5313 	mls	r3, r1, r3, r5
 80190fe:	b29b      	uxth	r3, r3
 8019100:	fb03 f302 	mul.w	r3, r3, r2
 8019104:	6822      	ldr	r2, [r4, #0]
 8019106:	4628      	mov	r0, r5
 8019108:	50d6      	str	r6, [r2, r3]
 801910a:	2101      	movs	r1, #1
 801910c:	f000 f9c2 	bl	8019494 <uxr_seq_num_add>
 8019110:	f108 0801 	add.w	r8, r8, #1
 8019114:	fa1f f388 	uxth.w	r3, r8
 8019118:	459a      	cmp	sl, r3
 801911a:	4605      	mov	r5, r0
 801911c:	8920      	ldrh	r0, [r4, #8]
 801911e:	d8ca      	bhi.n	80190b6 <uxr_prepare_reliable_buffer_to_write+0xea>
 8019120:	fbb5 f1f0 	udiv	r1, r5, r0
 8019124:	6863      	ldr	r3, [r4, #4]
 8019126:	fb00 5111 	mls	r1, r0, r1, r5
 801912a:	fbb3 f0f0 	udiv	r0, r3, r0
 801912e:	b289      	uxth	r1, r1
 8019130:	fb01 f100 	mul.w	r1, r1, r0
 8019134:	6823      	ldr	r3, [r4, #0]
 8019136:	3104      	adds	r1, #4
 8019138:	4419      	add	r1, r3
 801913a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801913e:	4632      	mov	r2, r6
 8019140:	4658      	mov	r0, fp
 8019142:	9300      	str	r3, [sp, #0]
 8019144:	2300      	movs	r3, #0
 8019146:	f7f4 ff41 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 801914a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801914e:	4658      	mov	r0, fp
 8019150:	fa1f f288 	uxth.w	r2, r8
 8019154:	2302      	movs	r3, #2
 8019156:	210d      	movs	r1, #13
 8019158:	f7fb f966 	bl	8014428 <uxr_buffer_submessage_header>
 801915c:	8922      	ldrh	r2, [r4, #8]
 801915e:	6863      	ldr	r3, [r4, #4]
 8019160:	fbb5 f0f2 	udiv	r0, r5, r2
 8019164:	fbb3 f3f2 	udiv	r3, r3, r2
 8019168:	fb02 5010 	mls	r0, r2, r0, r5
 801916c:	b280      	uxth	r0, r0
 801916e:	fb00 f003 	mul.w	r0, r0, r3
 8019172:	6823      	ldr	r3, [r4, #0]
 8019174:	9f03      	ldr	r7, [sp, #12]
 8019176:	9307      	str	r3, [sp, #28]
 8019178:	9b05      	ldr	r3, [sp, #20]
 801917a:	7b26      	ldrb	r6, [r4, #12]
 801917c:	1d39      	adds	r1, r7, #4
 801917e:	440b      	add	r3, r1
 8019180:	4619      	mov	r1, r3
 8019182:	3604      	adds	r6, #4
 8019184:	9b07      	ldr	r3, [sp, #28]
 8019186:	9a04      	ldr	r2, [sp, #16]
 8019188:	4446      	add	r6, r8
 801918a:	501e      	str	r6, [r3, r0]
 801918c:	9e06      	ldr	r6, [sp, #24]
 801918e:	3a08      	subs	r2, #8
 8019190:	4630      	mov	r0, r6
 8019192:	1bd2      	subs	r2, r2, r7
 8019194:	f7f4 ff2c 	bl	800dff0 <ucdr_init_buffer>
 8019198:	4630      	mov	r0, r6
 801919a:	4622      	mov	r2, r4
 801919c:	4939      	ldr	r1, [pc, #228]	; (8019284 <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 801919e:	f7f4 fefd 	bl	800df9c <ucdr_set_on_full_buffer_callback>
 80191a2:	2001      	movs	r0, #1
 80191a4:	81e5      	strh	r5, [r4, #14]
 80191a6:	b011      	add	sp, #68	; 0x44
 80191a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ac:	2101      	movs	r1, #1
 80191ae:	89e0      	ldrh	r0, [r4, #14]
 80191b0:	f000 f970 	bl	8019494 <uxr_seq_num_add>
 80191b4:	8921      	ldrh	r1, [r4, #8]
 80191b6:	4605      	mov	r5, r0
 80191b8:	8a60      	ldrh	r0, [r4, #18]
 80191ba:	f000 f96b 	bl	8019494 <uxr_seq_num_add>
 80191be:	4601      	mov	r1, r0
 80191c0:	4628      	mov	r0, r5
 80191c2:	f000 f96f 	bl	80194a4 <uxr_seq_num_cmp>
 80191c6:	2800      	cmp	r0, #0
 80191c8:	dd24      	ble.n	8019214 <uxr_prepare_reliable_buffer_to_write+0x248>
 80191ca:	2000      	movs	r0, #0
 80191cc:	b011      	add	sp, #68	; 0x44
 80191ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d2:	8921      	ldrh	r1, [r4, #8]
 80191d4:	8a60      	ldrh	r0, [r4, #18]
 80191d6:	f000 f95d 	bl	8019494 <uxr_seq_num_add>
 80191da:	4601      	mov	r1, r0
 80191dc:	4628      	mov	r0, r5
 80191de:	f000 f961 	bl	80194a4 <uxr_seq_num_cmp>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	dcf1      	bgt.n	80191ca <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80191e6:	8920      	ldrh	r0, [r4, #8]
 80191e8:	6862      	ldr	r2, [r4, #4]
 80191ea:	fbb5 f3f0 	udiv	r3, r5, r0
 80191ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80191f2:	fb00 5313 	mls	r3, r0, r3, r5
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	fb03 f302 	mul.w	r3, r3, r2
 80191fc:	6822      	ldr	r2, [r4, #0]
 80191fe:	9806      	ldr	r0, [sp, #24]
 8019200:	50d7      	str	r7, [r2, r3]
 8019202:	9b03      	ldr	r3, [sp, #12]
 8019204:	463a      	mov	r2, r7
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	9905      	ldr	r1, [sp, #20]
 801920a:	2300      	movs	r3, #0
 801920c:	f7f4 fede 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8019210:	2001      	movs	r0, #1
 8019212:	e7db      	b.n	80191cc <uxr_prepare_reliable_buffer_to_write+0x200>
 8019214:	8921      	ldrh	r1, [r4, #8]
 8019216:	6862      	ldr	r2, [r4, #4]
 8019218:	fbb5 f3f1 	udiv	r3, r5, r1
 801921c:	fbb2 f2f1 	udiv	r2, r2, r1
 8019220:	fb01 5313 	mls	r3, r1, r3, r5
 8019224:	b29b      	uxth	r3, r3
 8019226:	fb03 f302 	mul.w	r3, r3, r2
 801922a:	6821      	ldr	r1, [r4, #0]
 801922c:	7b22      	ldrb	r2, [r4, #12]
 801922e:	3304      	adds	r3, #4
 8019230:	4419      	add	r1, r3
 8019232:	4442      	add	r2, r8
 8019234:	f841 2c04 	str.w	r2, [r1, #-4]
 8019238:	7b23      	ldrb	r3, [r4, #12]
 801923a:	9806      	ldr	r0, [sp, #24]
 801923c:	9300      	str	r3, [sp, #0]
 801923e:	2300      	movs	r3, #0
 8019240:	f7f4 fec4 	bl	800dfcc <ucdr_init_buffer_origin_offset>
 8019244:	2001      	movs	r0, #1
 8019246:	81e5      	strh	r5, [r4, #14]
 8019248:	e7c0      	b.n	80191cc <uxr_prepare_reliable_buffer_to_write+0x200>
 801924a:	4628      	mov	r0, r5
 801924c:	2101      	movs	r1, #1
 801924e:	f000 f921 	bl	8019494 <uxr_seq_num_add>
 8019252:	4605      	mov	r5, r0
 8019254:	8920      	ldrh	r0, [r4, #8]
 8019256:	6862      	ldr	r2, [r4, #4]
 8019258:	fbb5 f3f0 	udiv	r3, r5, r0
 801925c:	fbb2 f2f0 	udiv	r2, r2, r0
 8019260:	fb00 5313 	mls	r3, r0, r3, r5
 8019264:	b29b      	uxth	r3, r3
 8019266:	fb03 f302 	mul.w	r3, r3, r2
 801926a:	6822      	ldr	r2, [r4, #0]
 801926c:	3304      	adds	r3, #4
 801926e:	18d3      	adds	r3, r2, r3
 8019270:	9305      	str	r3, [sp, #20]
 8019272:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019276:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801927a:	9303      	str	r3, [sp, #12]
 801927c:	e6d9      	b.n	8019032 <uxr_prepare_reliable_buffer_to_write+0x66>
 801927e:	4601      	mov	r1, r0
 8019280:	e6f5      	b.n	801906e <uxr_prepare_reliable_buffer_to_write+0xa2>
 8019282:	bf00      	nop
 8019284:	08018ec5 	.word	0x08018ec5

08019288 <uxr_prepare_next_reliable_buffer_to_send>:
 8019288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801928c:	4606      	mov	r6, r0
 801928e:	4689      	mov	r9, r1
 8019290:	8a00      	ldrh	r0, [r0, #16]
 8019292:	2101      	movs	r1, #1
 8019294:	4690      	mov	r8, r2
 8019296:	461f      	mov	r7, r3
 8019298:	f000 f8fc 	bl	8019494 <uxr_seq_num_add>
 801929c:	8038      	strh	r0, [r7, #0]
 801929e:	8932      	ldrh	r2, [r6, #8]
 80192a0:	6873      	ldr	r3, [r6, #4]
 80192a2:	fbb0 f5f2 	udiv	r5, r0, r2
 80192a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80192aa:	fb02 0415 	mls	r4, r2, r5, r0
 80192ae:	b2a4      	uxth	r4, r4
 80192b0:	fb04 f403 	mul.w	r4, r4, r3
 80192b4:	6833      	ldr	r3, [r6, #0]
 80192b6:	3404      	adds	r4, #4
 80192b8:	4423      	add	r3, r4
 80192ba:	f8c9 3000 	str.w	r3, [r9]
 80192be:	6833      	ldr	r3, [r6, #0]
 80192c0:	89f1      	ldrh	r1, [r6, #14]
 80192c2:	441c      	add	r4, r3
 80192c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80192c8:	f8c8 3000 	str.w	r3, [r8]
 80192cc:	f000 f8ea 	bl	80194a4 <uxr_seq_num_cmp>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	dd02      	ble.n	80192da <uxr_prepare_next_reliable_buffer_to_send+0x52>
 80192d4:	2000      	movs	r0, #0
 80192d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192da:	f8d8 2000 	ldr.w	r2, [r8]
 80192de:	7b33      	ldrb	r3, [r6, #12]
 80192e0:	429a      	cmp	r2, r3
 80192e2:	d9f7      	bls.n	80192d4 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 80192e4:	8a71      	ldrh	r1, [r6, #18]
 80192e6:	8a30      	ldrh	r0, [r6, #16]
 80192e8:	f000 f8d8 	bl	801949c <uxr_seq_num_sub>
 80192ec:	8933      	ldrh	r3, [r6, #8]
 80192ee:	4283      	cmp	r3, r0
 80192f0:	d0f0      	beq.n	80192d4 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 80192f2:	8838      	ldrh	r0, [r7, #0]
 80192f4:	89f3      	ldrh	r3, [r6, #14]
 80192f6:	8230      	strh	r0, [r6, #16]
 80192f8:	4298      	cmp	r0, r3
 80192fa:	d002      	beq.n	8019302 <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 80192fc:	2001      	movs	r0, #1
 80192fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019302:	2101      	movs	r1, #1
 8019304:	f000 f8c6 	bl	8019494 <uxr_seq_num_add>
 8019308:	4603      	mov	r3, r0
 801930a:	2001      	movs	r0, #1
 801930c:	81f3      	strh	r3, [r6, #14]
 801930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019312:	bf00      	nop

08019314 <uxr_update_output_stream_heartbeat_timestamp>:
 8019314:	b5d0      	push	{r4, r6, r7, lr}
 8019316:	8a01      	ldrh	r1, [r0, #16]
 8019318:	4604      	mov	r4, r0
 801931a:	8a40      	ldrh	r0, [r0, #18]
 801931c:	4616      	mov	r6, r2
 801931e:	461f      	mov	r7, r3
 8019320:	f000 f8c0 	bl	80194a4 <uxr_seq_num_cmp>
 8019324:	2800      	cmp	r0, #0
 8019326:	db07      	blt.n	8019338 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801932c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019330:	2000      	movs	r0, #0
 8019332:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019336:	bdd0      	pop	{r4, r6, r7, pc}
 8019338:	f894 0020 	ldrb.w	r0, [r4, #32]
 801933c:	b948      	cbnz	r0, 8019352 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801933e:	2301      	movs	r3, #1
 8019340:	f884 3020 	strb.w	r3, [r4, #32]
 8019344:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8019348:	f147 0200 	adc.w	r2, r7, #0
 801934c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8019350:	bdd0      	pop	{r4, r6, r7, pc}
 8019352:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019356:	4296      	cmp	r6, r2
 8019358:	eb77 0303 	sbcs.w	r3, r7, r3
 801935c:	bfa5      	ittet	ge
 801935e:	3001      	addge	r0, #1
 8019360:	f884 0020 	strbge.w	r0, [r4, #32]
 8019364:	2000      	movlt	r0, #0
 8019366:	2001      	movge	r0, #1
 8019368:	e7ec      	b.n	8019344 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801936a:	bf00      	nop

0801936c <uxr_begin_output_nack_buffer_it>:
 801936c:	8a40      	ldrh	r0, [r0, #18]
 801936e:	4770      	bx	lr

08019370 <uxr_next_reliable_nack_buffer_to_send>:
 8019370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019374:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8019378:	f1b9 0f00 	cmp.w	r9, #0
 801937c:	d011      	beq.n	80193a2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 801937e:	460f      	mov	r7, r1
 8019380:	4690      	mov	r8, r2
 8019382:	461e      	mov	r6, r3
 8019384:	4605      	mov	r5, r0
 8019386:	8818      	ldrh	r0, [r3, #0]
 8019388:	2101      	movs	r1, #1
 801938a:	f000 f883 	bl	8019494 <uxr_seq_num_add>
 801938e:	8030      	strh	r0, [r6, #0]
 8019390:	8a29      	ldrh	r1, [r5, #16]
 8019392:	f000 f887 	bl	80194a4 <uxr_seq_num_cmp>
 8019396:	2800      	cmp	r0, #0
 8019398:	dd06      	ble.n	80193a8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 801939a:	2300      	movs	r3, #0
 801939c:	4699      	mov	r9, r3
 801939e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 80193a2:	4648      	mov	r0, r9
 80193a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193a8:	892a      	ldrh	r2, [r5, #8]
 80193aa:	8830      	ldrh	r0, [r6, #0]
 80193ac:	686b      	ldr	r3, [r5, #4]
 80193ae:	fbb0 f4f2 	udiv	r4, r0, r2
 80193b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80193b6:	fb02 0414 	mls	r4, r2, r4, r0
 80193ba:	b2a4      	uxth	r4, r4
 80193bc:	fb04 f403 	mul.w	r4, r4, r3
 80193c0:	682b      	ldr	r3, [r5, #0]
 80193c2:	3404      	adds	r4, #4
 80193c4:	4423      	add	r3, r4
 80193c6:	603b      	str	r3, [r7, #0]
 80193c8:	682b      	ldr	r3, [r5, #0]
 80193ca:	441c      	add	r4, r3
 80193cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80193d0:	f8c8 3000 	str.w	r3, [r8]
 80193d4:	7b2a      	ldrb	r2, [r5, #12]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d0d6      	beq.n	8019388 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80193da:	4648      	mov	r0, r9
 80193dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080193e0 <uxr_process_acknack>:
 80193e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e2:	4604      	mov	r4, r0
 80193e4:	460e      	mov	r6, r1
 80193e6:	4610      	mov	r0, r2
 80193e8:	2101      	movs	r1, #1
 80193ea:	f000 f857 	bl	801949c <uxr_seq_num_sub>
 80193ee:	8a61      	ldrh	r1, [r4, #18]
 80193f0:	f000 f854 	bl	801949c <uxr_seq_num_sub>
 80193f4:	b1b8      	cbz	r0, 8019426 <uxr_process_acknack+0x46>
 80193f6:	4605      	mov	r5, r0
 80193f8:	2700      	movs	r7, #0
 80193fa:	2101      	movs	r1, #1
 80193fc:	8a60      	ldrh	r0, [r4, #18]
 80193fe:	f000 f849 	bl	8019494 <uxr_seq_num_add>
 8019402:	8921      	ldrh	r1, [r4, #8]
 8019404:	6862      	ldr	r2, [r4, #4]
 8019406:	fbb0 f3f1 	udiv	r3, r0, r1
 801940a:	fbb2 f2f1 	udiv	r2, r2, r1
 801940e:	fb01 0313 	mls	r3, r1, r3, r0
 8019412:	b29b      	uxth	r3, r3
 8019414:	fb03 f302 	mul.w	r3, r3, r2
 8019418:	7b21      	ldrb	r1, [r4, #12]
 801941a:	6822      	ldr	r2, [r4, #0]
 801941c:	3701      	adds	r7, #1
 801941e:	42bd      	cmp	r5, r7
 8019420:	8260      	strh	r0, [r4, #18]
 8019422:	50d1      	str	r1, [r2, r3]
 8019424:	d1e9      	bne.n	80193fa <uxr_process_acknack+0x1a>
 8019426:	3e00      	subs	r6, #0
 8019428:	f04f 0300 	mov.w	r3, #0
 801942c:	bf18      	it	ne
 801942e:	2601      	movne	r6, #1
 8019430:	f884 3020 	strb.w	r3, [r4, #32]
 8019434:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8019438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801943a:	bf00      	nop

0801943c <uxr_is_output_up_to_date>:
 801943c:	8a01      	ldrh	r1, [r0, #16]
 801943e:	b508      	push	{r3, lr}
 8019440:	8a40      	ldrh	r0, [r0, #18]
 8019442:	f000 f82f 	bl	80194a4 <uxr_seq_num_cmp>
 8019446:	fab0 f080 	clz	r0, r0
 801944a:	0940      	lsrs	r0, r0, #5
 801944c:	bd08      	pop	{r3, pc}
 801944e:	bf00      	nop

08019450 <get_available_free_slots>:
 8019450:	8901      	ldrh	r1, [r0, #8]
 8019452:	b1e1      	cbz	r1, 801948e <get_available_free_slots+0x3e>
 8019454:	b4f0      	push	{r4, r5, r6, r7}
 8019456:	2400      	movs	r4, #0
 8019458:	4603      	mov	r3, r0
 801945a:	6845      	ldr	r5, [r0, #4]
 801945c:	4622      	mov	r2, r4
 801945e:	4620      	mov	r0, r4
 8019460:	fbb5 f5f1 	udiv	r5, r5, r1
 8019464:	681f      	ldr	r7, [r3, #0]
 8019466:	7b1e      	ldrb	r6, [r3, #12]
 8019468:	fbb2 f3f1 	udiv	r3, r2, r1
 801946c:	fb01 2313 	mls	r3, r1, r3, r2
 8019470:	b29b      	uxth	r3, r3
 8019472:	fb05 7303 	mla	r3, r5, r3, r7
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	3401      	adds	r4, #1
 801947a:	429e      	cmp	r6, r3
 801947c:	bf08      	it	eq
 801947e:	3001      	addeq	r0, #1
 8019480:	b2a2      	uxth	r2, r4
 8019482:	bf08      	it	eq
 8019484:	b280      	uxtheq	r0, r0
 8019486:	428a      	cmp	r2, r1
 8019488:	d3ee      	bcc.n	8019468 <get_available_free_slots+0x18>
 801948a:	bcf0      	pop	{r4, r5, r6, r7}
 801948c:	4770      	bx	lr
 801948e:	4608      	mov	r0, r1
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop

08019494 <uxr_seq_num_add>:
 8019494:	4408      	add	r0, r1
 8019496:	b280      	uxth	r0, r0
 8019498:	4770      	bx	lr
 801949a:	bf00      	nop

0801949c <uxr_seq_num_sub>:
 801949c:	1a40      	subs	r0, r0, r1
 801949e:	b280      	uxth	r0, r0
 80194a0:	4770      	bx	lr
 80194a2:	bf00      	nop

080194a4 <uxr_seq_num_cmp>:
 80194a4:	4288      	cmp	r0, r1
 80194a6:	d011      	beq.n	80194cc <uxr_seq_num_cmp+0x28>
 80194a8:	d309      	bcc.n	80194be <uxr_seq_num_cmp+0x1a>
 80194aa:	4288      	cmp	r0, r1
 80194ac:	d910      	bls.n	80194d0 <uxr_seq_num_cmp+0x2c>
 80194ae:	1a40      	subs	r0, r0, r1
 80194b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80194b4:	bfd4      	ite	le
 80194b6:	2001      	movle	r0, #1
 80194b8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80194bc:	4770      	bx	lr
 80194be:	1a0b      	subs	r3, r1, r0
 80194c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80194c4:	daf1      	bge.n	80194aa <uxr_seq_num_cmp+0x6>
 80194c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194ca:	4770      	bx	lr
 80194cc:	2000      	movs	r0, #0
 80194ce:	4770      	bx	lr
 80194d0:	2001      	movs	r0, #1
 80194d2:	4770      	bx	lr

080194d4 <rcl_get_default_domain_id>:
 80194d4:	2300      	movs	r3, #0
 80194d6:	b530      	push	{r4, r5, lr}
 80194d8:	b083      	sub	sp, #12
 80194da:	9300      	str	r3, [sp, #0]
 80194dc:	b1d0      	cbz	r0, 8019514 <rcl_get_default_domain_id+0x40>
 80194de:	4604      	mov	r4, r0
 80194e0:	4669      	mov	r1, sp
 80194e2:	4815      	ldr	r0, [pc, #84]	; (8019538 <rcl_get_default_domain_id+0x64>)
 80194e4:	f7fe fb3c 	bl	8017b60 <rcutils_get_env>
 80194e8:	4602      	mov	r2, r0
 80194ea:	b110      	cbz	r0, 80194f2 <rcl_get_default_domain_id+0x1e>
 80194ec:	2001      	movs	r0, #1
 80194ee:	b003      	add	sp, #12
 80194f0:	bd30      	pop	{r4, r5, pc}
 80194f2:	9b00      	ldr	r3, [sp, #0]
 80194f4:	b18b      	cbz	r3, 801951a <rcl_get_default_domain_id+0x46>
 80194f6:	7818      	ldrb	r0, [r3, #0]
 80194f8:	2800      	cmp	r0, #0
 80194fa:	d0f8      	beq.n	80194ee <rcl_get_default_domain_id+0x1a>
 80194fc:	4618      	mov	r0, r3
 80194fe:	a901      	add	r1, sp, #4
 8019500:	9201      	str	r2, [sp, #4]
 8019502:	f000 fd11 	bl	8019f28 <strtoul>
 8019506:	4605      	mov	r5, r0
 8019508:	b150      	cbz	r0, 8019520 <rcl_get_default_domain_id+0x4c>
 801950a:	1c43      	adds	r3, r0, #1
 801950c:	d00d      	beq.n	801952a <rcl_get_default_domain_id+0x56>
 801950e:	2000      	movs	r0, #0
 8019510:	6025      	str	r5, [r4, #0]
 8019512:	e7ec      	b.n	80194ee <rcl_get_default_domain_id+0x1a>
 8019514:	200b      	movs	r0, #11
 8019516:	b003      	add	sp, #12
 8019518:	bd30      	pop	{r4, r5, pc}
 801951a:	4618      	mov	r0, r3
 801951c:	b003      	add	sp, #12
 801951e:	bd30      	pop	{r4, r5, pc}
 8019520:	9b01      	ldr	r3, [sp, #4]
 8019522:	781b      	ldrb	r3, [r3, #0]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d0f2      	beq.n	801950e <rcl_get_default_domain_id+0x3a>
 8019528:	e7e0      	b.n	80194ec <rcl_get_default_domain_id+0x18>
 801952a:	f000 f9df 	bl	80198ec <__errno>
 801952e:	6803      	ldr	r3, [r0, #0]
 8019530:	2b22      	cmp	r3, #34	; 0x22
 8019532:	d1ec      	bne.n	801950e <rcl_get_default_domain_id+0x3a>
 8019534:	e7da      	b.n	80194ec <rcl_get_default_domain_id+0x18>
 8019536:	bf00      	nop
 8019538:	0801cc7c 	.word	0x0801cc7c

0801953c <rcl_get_zero_initialized_guard_condition>:
 801953c:	4603      	mov	r3, r0
 801953e:	4a03      	ldr	r2, [pc, #12]	; (801954c <rcl_get_zero_initialized_guard_condition+0x10>)
 8019540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019544:	e883 0003 	stmia.w	r3, {r0, r1}
 8019548:	4618      	mov	r0, r3
 801954a:	4770      	bx	lr
 801954c:	0801cc8c 	.word	0x0801cc8c

08019550 <rcl_guard_condition_init>:
 8019550:	b082      	sub	sp, #8
 8019552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019554:	b087      	sub	sp, #28
 8019556:	ad0c      	add	r5, sp, #48	; 0x30
 8019558:	e9c5 2300 	strd	r2, r3, [r5]
 801955c:	ac01      	add	r4, sp, #4
 801955e:	4607      	mov	r7, r0
 8019560:	460e      	mov	r6, r1
 8019562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019566:	682b      	ldr	r3, [r5, #0]
 8019568:	a801      	add	r0, sp, #4
 801956a:	6023      	str	r3, [r4, #0]
 801956c:	f7f5 ff00 	bl	800f370 <rcutils_allocator_is_valid>
 8019570:	2800      	cmp	r0, #0
 8019572:	d032      	beq.n	80195da <rcl_guard_condition_init+0x8a>
 8019574:	463d      	mov	r5, r7
 8019576:	2f00      	cmp	r7, #0
 8019578:	d02f      	beq.n	80195da <rcl_guard_condition_init+0x8a>
 801957a:	687f      	ldr	r7, [r7, #4]
 801957c:	bb3f      	cbnz	r7, 80195ce <rcl_guard_condition_init+0x7e>
 801957e:	2e00      	cmp	r6, #0
 8019580:	d02b      	beq.n	80195da <rcl_guard_condition_init+0x8a>
 8019582:	4630      	mov	r0, r6
 8019584:	f7fc f880 	bl	8015688 <rcl_context_is_valid>
 8019588:	2800      	cmp	r0, #0
 801958a:	d02c      	beq.n	80195e6 <rcl_guard_condition_init+0x96>
 801958c:	201c      	movs	r0, #28
 801958e:	9b01      	ldr	r3, [sp, #4]
 8019590:	9905      	ldr	r1, [sp, #20]
 8019592:	4798      	blx	r3
 8019594:	4604      	mov	r4, r0
 8019596:	6068      	str	r0, [r5, #4]
 8019598:	2800      	cmp	r0, #0
 801959a:	d02d      	beq.n	80195f8 <rcl_guard_condition_init+0xa8>
 801959c:	6830      	ldr	r0, [r6, #0]
 801959e:	3028      	adds	r0, #40	; 0x28
 80195a0:	f000 f8d4 	bl	801974c <rmw_create_guard_condition>
 80195a4:	686e      	ldr	r6, [r5, #4]
 80195a6:	6020      	str	r0, [r4, #0]
 80195a8:	6834      	ldr	r4, [r6, #0]
 80195aa:	b1f4      	cbz	r4, 80195ea <rcl_guard_condition_init+0x9a>
 80195ac:	f04f 0c01 	mov.w	ip, #1
 80195b0:	ac01      	add	r4, sp, #4
 80195b2:	f106 0508 	add.w	r5, r6, #8
 80195b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195b8:	f886 c004 	strb.w	ip, [r6, #4]
 80195bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195be:	4638      	mov	r0, r7
 80195c0:	6823      	ldr	r3, [r4, #0]
 80195c2:	602b      	str	r3, [r5, #0]
 80195c4:	b007      	add	sp, #28
 80195c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80195ca:	b002      	add	sp, #8
 80195cc:	4770      	bx	lr
 80195ce:	2064      	movs	r0, #100	; 0x64
 80195d0:	b007      	add	sp, #28
 80195d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80195d6:	b002      	add	sp, #8
 80195d8:	4770      	bx	lr
 80195da:	200b      	movs	r0, #11
 80195dc:	b007      	add	sp, #28
 80195de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80195e2:	b002      	add	sp, #8
 80195e4:	4770      	bx	lr
 80195e6:	2065      	movs	r0, #101	; 0x65
 80195e8:	e7f2      	b.n	80195d0 <rcl_guard_condition_init+0x80>
 80195ea:	4630      	mov	r0, r6
 80195ec:	9b02      	ldr	r3, [sp, #8]
 80195ee:	9905      	ldr	r1, [sp, #20]
 80195f0:	4798      	blx	r3
 80195f2:	2001      	movs	r0, #1
 80195f4:	606c      	str	r4, [r5, #4]
 80195f6:	e7eb      	b.n	80195d0 <rcl_guard_condition_init+0x80>
 80195f8:	200a      	movs	r0, #10
 80195fa:	e7e9      	b.n	80195d0 <rcl_guard_condition_init+0x80>

080195fc <rcl_guard_condition_init_from_rmw>:
 80195fc:	4684      	mov	ip, r0
 80195fe:	b082      	sub	sp, #8
 8019600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019604:	b086      	sub	sp, #24
 8019606:	ac0c      	add	r4, sp, #48	; 0x30
 8019608:	f844 3f04 	str.w	r3, [r4, #4]!
 801960c:	ad01      	add	r5, sp, #4
 801960e:	460f      	mov	r7, r1
 8019610:	4616      	mov	r6, r2
 8019612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	a801      	add	r0, sp, #4
 801961a:	4664      	mov	r4, ip
 801961c:	602b      	str	r3, [r5, #0]
 801961e:	f7f5 fea7 	bl	800f370 <rcutils_allocator_is_valid>
 8019622:	b338      	cbz	r0, 8019674 <rcl_guard_condition_init_from_rmw+0x78>
 8019624:	b334      	cbz	r4, 8019674 <rcl_guard_condition_init_from_rmw+0x78>
 8019626:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801962a:	f1b8 0f00 	cmp.w	r8, #0
 801962e:	d11b      	bne.n	8019668 <rcl_guard_condition_init_from_rmw+0x6c>
 8019630:	b306      	cbz	r6, 8019674 <rcl_guard_condition_init_from_rmw+0x78>
 8019632:	4630      	mov	r0, r6
 8019634:	f7fc f828 	bl	8015688 <rcl_context_is_valid>
 8019638:	b310      	cbz	r0, 8019680 <rcl_guard_condition_init_from_rmw+0x84>
 801963a:	201c      	movs	r0, #28
 801963c:	9b01      	ldr	r3, [sp, #4]
 801963e:	9905      	ldr	r1, [sp, #20]
 8019640:	4798      	blx	r3
 8019642:	4605      	mov	r5, r0
 8019644:	6060      	str	r0, [r4, #4]
 8019646:	b340      	cbz	r0, 801969a <rcl_guard_condition_init_from_rmw+0x9e>
 8019648:	b1e7      	cbz	r7, 8019684 <rcl_guard_condition_init_from_rmw+0x88>
 801964a:	6007      	str	r7, [r0, #0]
 801964c:	f880 8004 	strb.w	r8, [r0, #4]
 8019650:	ac01      	add	r4, sp, #4
 8019652:	3508      	adds	r5, #8
 8019654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019658:	2000      	movs	r0, #0
 801965a:	6823      	ldr	r3, [r4, #0]
 801965c:	602b      	str	r3, [r5, #0]
 801965e:	b006      	add	sp, #24
 8019660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019664:	b002      	add	sp, #8
 8019666:	4770      	bx	lr
 8019668:	2064      	movs	r0, #100	; 0x64
 801966a:	b006      	add	sp, #24
 801966c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019670:	b002      	add	sp, #8
 8019672:	4770      	bx	lr
 8019674:	200b      	movs	r0, #11
 8019676:	b006      	add	sp, #24
 8019678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801967c:	b002      	add	sp, #8
 801967e:	4770      	bx	lr
 8019680:	2065      	movs	r0, #101	; 0x65
 8019682:	e7f2      	b.n	801966a <rcl_guard_condition_init_from_rmw+0x6e>
 8019684:	6830      	ldr	r0, [r6, #0]
 8019686:	3028      	adds	r0, #40	; 0x28
 8019688:	f000 f860 	bl	801974c <rmw_create_guard_condition>
 801968c:	6028      	str	r0, [r5, #0]
 801968e:	6865      	ldr	r5, [r4, #4]
 8019690:	682e      	ldr	r6, [r5, #0]
 8019692:	b126      	cbz	r6, 801969e <rcl_guard_condition_init_from_rmw+0xa2>
 8019694:	2301      	movs	r3, #1
 8019696:	712b      	strb	r3, [r5, #4]
 8019698:	e7da      	b.n	8019650 <rcl_guard_condition_init_from_rmw+0x54>
 801969a:	200a      	movs	r0, #10
 801969c:	e7e5      	b.n	801966a <rcl_guard_condition_init_from_rmw+0x6e>
 801969e:	4628      	mov	r0, r5
 80196a0:	9b02      	ldr	r3, [sp, #8]
 80196a2:	9905      	ldr	r1, [sp, #20]
 80196a4:	4798      	blx	r3
 80196a6:	2001      	movs	r0, #1
 80196a8:	6066      	str	r6, [r4, #4]
 80196aa:	e7de      	b.n	801966a <rcl_guard_condition_init_from_rmw+0x6e>

080196ac <rcl_guard_condition_fini>:
 80196ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ae:	b1e0      	cbz	r0, 80196ea <rcl_guard_condition_fini+0x3e>
 80196b0:	4604      	mov	r4, r0
 80196b2:	6840      	ldr	r0, [r0, #4]
 80196b4:	b158      	cbz	r0, 80196ce <rcl_guard_condition_fini+0x22>
 80196b6:	6803      	ldr	r3, [r0, #0]
 80196b8:	68c6      	ldr	r6, [r0, #12]
 80196ba:	6987      	ldr	r7, [r0, #24]
 80196bc:	b153      	cbz	r3, 80196d4 <rcl_guard_condition_fini+0x28>
 80196be:	7905      	ldrb	r5, [r0, #4]
 80196c0:	b955      	cbnz	r5, 80196d8 <rcl_guard_condition_fini+0x2c>
 80196c2:	4639      	mov	r1, r7
 80196c4:	47b0      	blx	r6
 80196c6:	2300      	movs	r3, #0
 80196c8:	4628      	mov	r0, r5
 80196ca:	6063      	str	r3, [r4, #4]
 80196cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196ce:	4605      	mov	r5, r0
 80196d0:	4628      	mov	r0, r5
 80196d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196d4:	461d      	mov	r5, r3
 80196d6:	e7f4      	b.n	80196c2 <rcl_guard_condition_fini+0x16>
 80196d8:	4618      	mov	r0, r3
 80196da:	f000 f84b 	bl	8019774 <rmw_destroy_guard_condition>
 80196de:	4605      	mov	r5, r0
 80196e0:	3d00      	subs	r5, #0
 80196e2:	bf18      	it	ne
 80196e4:	2501      	movne	r5, #1
 80196e6:	6860      	ldr	r0, [r4, #4]
 80196e8:	e7eb      	b.n	80196c2 <rcl_guard_condition_fini+0x16>
 80196ea:	250b      	movs	r5, #11
 80196ec:	4628      	mov	r0, r5
 80196ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080196f0 <rcl_guard_condition_get_default_options>:
 80196f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196f4:	4680      	mov	r8, r0
 80196f6:	b086      	sub	sp, #24
 80196f8:	466d      	mov	r5, sp
 80196fa:	4c08      	ldr	r4, [pc, #32]	; (801971c <rcl_guard_condition_get_default_options+0x2c>)
 80196fc:	4646      	mov	r6, r8
 80196fe:	4627      	mov	r7, r4
 8019700:	4668      	mov	r0, sp
 8019702:	f7f5 fe27 	bl	800f354 <rcutils_get_default_allocator>
 8019706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801970a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801970c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801970e:	4640      	mov	r0, r8
 8019710:	682b      	ldr	r3, [r5, #0]
 8019712:	6023      	str	r3, [r4, #0]
 8019714:	6033      	str	r3, [r6, #0]
 8019716:	b006      	add	sp, #24
 8019718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801971c:	20006920 	.word	0x20006920

08019720 <rcl_trigger_guard_condition>:
 8019720:	b148      	cbz	r0, 8019736 <rcl_trigger_guard_condition+0x16>
 8019722:	b508      	push	{r3, lr}
 8019724:	6843      	ldr	r3, [r0, #4]
 8019726:	b143      	cbz	r3, 801973a <rcl_trigger_guard_condition+0x1a>
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	f000 f837 	bl	801979c <rmw_trigger_guard_condition>
 801972e:	3800      	subs	r0, #0
 8019730:	bf18      	it	ne
 8019732:	2001      	movne	r0, #1
 8019734:	bd08      	pop	{r3, pc}
 8019736:	200b      	movs	r0, #11
 8019738:	4770      	bx	lr
 801973a:	200b      	movs	r0, #11
 801973c:	bd08      	pop	{r3, pc}
 801973e:	bf00      	nop

08019740 <rcl_guard_condition_get_rmw_handle>:
 8019740:	b110      	cbz	r0, 8019748 <rcl_guard_condition_get_rmw_handle+0x8>
 8019742:	6840      	ldr	r0, [r0, #4]
 8019744:	b100      	cbz	r0, 8019748 <rcl_guard_condition_get_rmw_handle+0x8>
 8019746:	6800      	ldr	r0, [r0, #0]
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop

0801974c <rmw_create_guard_condition>:
 801974c:	b538      	push	{r3, r4, r5, lr}
 801974e:	4605      	mov	r5, r0
 8019750:	4807      	ldr	r0, [pc, #28]	; (8019770 <rmw_create_guard_condition+0x24>)
 8019752:	f7fe fcdd 	bl	8018110 <get_memory>
 8019756:	b148      	cbz	r0, 801976c <rmw_create_guard_condition+0x20>
 8019758:	2300      	movs	r3, #0
 801975a:	68c4      	ldr	r4, [r0, #12]
 801975c:	61e5      	str	r5, [r4, #28]
 801975e:	7423      	strb	r3, [r4, #16]
 8019760:	f7fe fd3e 	bl	80181e0 <rmw_get_implementation_identifier>
 8019764:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019768:	f104 0014 	add.w	r0, r4, #20
 801976c:	bd38      	pop	{r3, r4, r5, pc}
 801976e:	bf00      	nop
 8019770:	2000ccc8 	.word	0x2000ccc8

08019774 <rmw_destroy_guard_condition>:
 8019774:	b508      	push	{r3, lr}
 8019776:	4b08      	ldr	r3, [pc, #32]	; (8019798 <rmw_destroy_guard_condition+0x24>)
 8019778:	6819      	ldr	r1, [r3, #0]
 801977a:	b911      	cbnz	r1, 8019782 <rmw_destroy_guard_condition+0xe>
 801977c:	e00a      	b.n	8019794 <rmw_destroy_guard_condition+0x20>
 801977e:	6889      	ldr	r1, [r1, #8]
 8019780:	b141      	cbz	r1, 8019794 <rmw_destroy_guard_condition+0x20>
 8019782:	68cb      	ldr	r3, [r1, #12]
 8019784:	3314      	adds	r3, #20
 8019786:	4298      	cmp	r0, r3
 8019788:	d1f9      	bne.n	801977e <rmw_destroy_guard_condition+0xa>
 801978a:	4803      	ldr	r0, [pc, #12]	; (8019798 <rmw_destroy_guard_condition+0x24>)
 801978c:	f7fe fcd0 	bl	8018130 <put_memory>
 8019790:	2000      	movs	r0, #0
 8019792:	bd08      	pop	{r3, pc}
 8019794:	2001      	movs	r0, #1
 8019796:	bd08      	pop	{r3, pc}
 8019798:	2000ccc8 	.word	0x2000ccc8

0801979c <rmw_trigger_guard_condition>:
 801979c:	b160      	cbz	r0, 80197b8 <rmw_trigger_guard_condition+0x1c>
 801979e:	b510      	push	{r4, lr}
 80197a0:	4604      	mov	r4, r0
 80197a2:	6800      	ldr	r0, [r0, #0]
 80197a4:	f7f7 fb3c 	bl	8010e20 <is_uxrce_rmw_identifier_valid>
 80197a8:	b908      	cbnz	r0, 80197ae <rmw_trigger_guard_condition+0x12>
 80197aa:	2001      	movs	r0, #1
 80197ac:	bd10      	pop	{r4, pc}
 80197ae:	2201      	movs	r2, #1
 80197b0:	6863      	ldr	r3, [r4, #4]
 80197b2:	2000      	movs	r0, #0
 80197b4:	741a      	strb	r2, [r3, #16]
 80197b6:	bd10      	pop	{r4, pc}
 80197b8:	2001      	movs	r0, #1
 80197ba:	4770      	bx	lr

080197bc <get_serialized_size_geometry_msgs__msg__Point>:
 80197bc:	b1b8      	cbz	r0, 80197ee <get_serialized_size_geometry_msgs__msg__Point+0x32>
 80197be:	b538      	push	{r3, r4, r5, lr}
 80197c0:	460d      	mov	r5, r1
 80197c2:	2108      	movs	r1, #8
 80197c4:	4628      	mov	r0, r5
 80197c6:	f7f4 fc17 	bl	800dff8 <ucdr_alignment>
 80197ca:	f105 0408 	add.w	r4, r5, #8
 80197ce:	4404      	add	r4, r0
 80197d0:	4620      	mov	r0, r4
 80197d2:	2108      	movs	r1, #8
 80197d4:	f7f4 fc10 	bl	800dff8 <ucdr_alignment>
 80197d8:	3008      	adds	r0, #8
 80197da:	4404      	add	r4, r0
 80197dc:	4620      	mov	r0, r4
 80197de:	2108      	movs	r1, #8
 80197e0:	f7f4 fc0a 	bl	800dff8 <ucdr_alignment>
 80197e4:	f1c5 0508 	rsb	r5, r5, #8
 80197e8:	4428      	add	r0, r5
 80197ea:	4420      	add	r0, r4
 80197ec:	bd38      	pop	{r3, r4, r5, pc}
 80197ee:	4770      	bx	lr

080197f0 <_Point__cdr_deserialize>:
 80197f0:	b538      	push	{r3, r4, r5, lr}
 80197f2:	460c      	mov	r4, r1
 80197f4:	b171      	cbz	r1, 8019814 <_Point__cdr_deserialize+0x24>
 80197f6:	4605      	mov	r5, r0
 80197f8:	f7f4 fa10 	bl	800dc1c <ucdr_deserialize_double>
 80197fc:	f104 0108 	add.w	r1, r4, #8
 8019800:	4628      	mov	r0, r5
 8019802:	f7f4 fa0b 	bl	800dc1c <ucdr_deserialize_double>
 8019806:	4628      	mov	r0, r5
 8019808:	f104 0110 	add.w	r1, r4, #16
 801980c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019810:	f7f4 ba04 	b.w	800dc1c <ucdr_deserialize_double>
 8019814:	4608      	mov	r0, r1
 8019816:	bd38      	pop	{r3, r4, r5, pc}

08019818 <_Point__cdr_serialize>:
 8019818:	b198      	cbz	r0, 8019842 <_Point__cdr_serialize+0x2a>
 801981a:	e9d0 2300 	ldrd	r2, r3, [r0]
 801981e:	b570      	push	{r4, r5, r6, lr}
 8019820:	460d      	mov	r5, r1
 8019822:	4604      	mov	r4, r0
 8019824:	4608      	mov	r0, r1
 8019826:	f7f4 f857 	bl	800d8d8 <ucdr_serialize_double>
 801982a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 801982e:	4628      	mov	r0, r5
 8019830:	f7f4 f852 	bl	800d8d8 <ucdr_serialize_double>
 8019834:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8019838:	4628      	mov	r0, r5
 801983a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801983e:	f7f4 b84b 	b.w	800d8d8 <ucdr_serialize_double>
 8019842:	4770      	bx	lr

08019844 <_Point__get_serialized_size>:
 8019844:	b198      	cbz	r0, 801986e <_Point__get_serialized_size+0x2a>
 8019846:	b510      	push	{r4, lr}
 8019848:	2108      	movs	r1, #8
 801984a:	2000      	movs	r0, #0
 801984c:	f7f4 fbd4 	bl	800dff8 <ucdr_alignment>
 8019850:	f100 0408 	add.w	r4, r0, #8
 8019854:	4620      	mov	r0, r4
 8019856:	2108      	movs	r1, #8
 8019858:	f7f4 fbce 	bl	800dff8 <ucdr_alignment>
 801985c:	3008      	adds	r0, #8
 801985e:	4404      	add	r4, r0
 8019860:	4620      	mov	r0, r4
 8019862:	2108      	movs	r1, #8
 8019864:	f7f4 fbc8 	bl	800dff8 <ucdr_alignment>
 8019868:	3008      	adds	r0, #8
 801986a:	4420      	add	r0, r4
 801986c:	bd10      	pop	{r4, pc}
 801986e:	4770      	bx	lr

08019870 <_Point__max_serialized_size>:
 8019870:	b538      	push	{r3, r4, r5, lr}
 8019872:	2108      	movs	r1, #8
 8019874:	2000      	movs	r0, #0
 8019876:	f7f4 fbbf 	bl	800dff8 <ucdr_alignment>
 801987a:	f100 0508 	add.w	r5, r0, #8
 801987e:	4628      	mov	r0, r5
 8019880:	2108      	movs	r1, #8
 8019882:	f7f4 fbb9 	bl	800dff8 <ucdr_alignment>
 8019886:	f100 0408 	add.w	r4, r0, #8
 801988a:	442c      	add	r4, r5
 801988c:	4620      	mov	r0, r4
 801988e:	2108      	movs	r1, #8
 8019890:	f7f4 fbb2 	bl	800dff8 <ucdr_alignment>
 8019894:	3008      	adds	r0, #8
 8019896:	4420      	add	r0, r4
 8019898:	bd38      	pop	{r3, r4, r5, pc}
 801989a:	bf00      	nop

0801989c <max_serialized_size_geometry_msgs__msg__Point>:
 801989c:	4603      	mov	r3, r0
 801989e:	2201      	movs	r2, #1
 80198a0:	b570      	push	{r4, r5, r6, lr}
 80198a2:	4608      	mov	r0, r1
 80198a4:	701a      	strb	r2, [r3, #0]
 80198a6:	460c      	mov	r4, r1
 80198a8:	2108      	movs	r1, #8
 80198aa:	f7f4 fba5 	bl	800dff8 <ucdr_alignment>
 80198ae:	f104 0508 	add.w	r5, r4, #8
 80198b2:	1946      	adds	r6, r0, r5
 80198b4:	4630      	mov	r0, r6
 80198b6:	2108      	movs	r1, #8
 80198b8:	f7f4 fb9e 	bl	800dff8 <ucdr_alignment>
 80198bc:	f100 0508 	add.w	r5, r0, #8
 80198c0:	4435      	add	r5, r6
 80198c2:	4628      	mov	r0, r5
 80198c4:	2108      	movs	r1, #8
 80198c6:	f7f4 fb97 	bl	800dff8 <ucdr_alignment>
 80198ca:	f1c4 0408 	rsb	r4, r4, #8
 80198ce:	4420      	add	r0, r4
 80198d0:	4428      	add	r0, r5
 80198d2:	bd70      	pop	{r4, r5, r6, pc}

080198d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 80198d4:	4800      	ldr	r0, [pc, #0]	; (80198d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 80198d6:	4770      	bx	lr
 80198d8:	200002fc 	.word	0x200002fc

080198dc <calloc>:
 80198dc:	4b02      	ldr	r3, [pc, #8]	; (80198e8 <calloc+0xc>)
 80198de:	460a      	mov	r2, r1
 80198e0:	4601      	mov	r1, r0
 80198e2:	6818      	ldr	r0, [r3, #0]
 80198e4:	f000 b8b2 	b.w	8019a4c <_calloc_r>
 80198e8:	20000324 	.word	0x20000324

080198ec <__errno>:
 80198ec:	4b01      	ldr	r3, [pc, #4]	; (80198f4 <__errno+0x8>)
 80198ee:	6818      	ldr	r0, [r3, #0]
 80198f0:	4770      	bx	lr
 80198f2:	bf00      	nop
 80198f4:	20000324 	.word	0x20000324

080198f8 <getenv>:
 80198f8:	b507      	push	{r0, r1, r2, lr}
 80198fa:	4b04      	ldr	r3, [pc, #16]	; (801990c <getenv+0x14>)
 80198fc:	4601      	mov	r1, r0
 80198fe:	aa01      	add	r2, sp, #4
 8019900:	6818      	ldr	r0, [r3, #0]
 8019902:	f000 f805 	bl	8019910 <_findenv_r>
 8019906:	b003      	add	sp, #12
 8019908:	f85d fb04 	ldr.w	pc, [sp], #4
 801990c:	20000324 	.word	0x20000324

08019910 <_findenv_r>:
 8019910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019914:	4607      	mov	r7, r0
 8019916:	4689      	mov	r9, r1
 8019918:	4616      	mov	r6, r2
 801991a:	f000 fb67 	bl	8019fec <__env_lock>
 801991e:	4b18      	ldr	r3, [pc, #96]	; (8019980 <_findenv_r+0x70>)
 8019920:	681c      	ldr	r4, [r3, #0]
 8019922:	469a      	mov	sl, r3
 8019924:	b134      	cbz	r4, 8019934 <_findenv_r+0x24>
 8019926:	464b      	mov	r3, r9
 8019928:	4698      	mov	r8, r3
 801992a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801992e:	b139      	cbz	r1, 8019940 <_findenv_r+0x30>
 8019930:	293d      	cmp	r1, #61	; 0x3d
 8019932:	d1f9      	bne.n	8019928 <_findenv_r+0x18>
 8019934:	4638      	mov	r0, r7
 8019936:	f000 fb5f 	bl	8019ff8 <__env_unlock>
 801993a:	2000      	movs	r0, #0
 801993c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019940:	eba8 0809 	sub.w	r8, r8, r9
 8019944:	46a3      	mov	fp, r4
 8019946:	f854 0b04 	ldr.w	r0, [r4], #4
 801994a:	2800      	cmp	r0, #0
 801994c:	d0f2      	beq.n	8019934 <_findenv_r+0x24>
 801994e:	4642      	mov	r2, r8
 8019950:	4649      	mov	r1, r9
 8019952:	f000 fa36 	bl	8019dc2 <strncmp>
 8019956:	2800      	cmp	r0, #0
 8019958:	d1f4      	bne.n	8019944 <_findenv_r+0x34>
 801995a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801995e:	eb03 0508 	add.w	r5, r3, r8
 8019962:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019966:	2b3d      	cmp	r3, #61	; 0x3d
 8019968:	d1ec      	bne.n	8019944 <_findenv_r+0x34>
 801996a:	f8da 3000 	ldr.w	r3, [sl]
 801996e:	4638      	mov	r0, r7
 8019970:	ebab 0303 	sub.w	r3, fp, r3
 8019974:	109b      	asrs	r3, r3, #2
 8019976:	6033      	str	r3, [r6, #0]
 8019978:	f000 fb3e 	bl	8019ff8 <__env_unlock>
 801997c:	1c68      	adds	r0, r5, #1
 801997e:	e7dd      	b.n	801993c <_findenv_r+0x2c>
 8019980:	20000004 	.word	0x20000004

08019984 <__libc_init_array>:
 8019984:	b570      	push	{r4, r5, r6, lr}
 8019986:	2600      	movs	r6, #0
 8019988:	4d0c      	ldr	r5, [pc, #48]	; (80199bc <__libc_init_array+0x38>)
 801998a:	4c0d      	ldr	r4, [pc, #52]	; (80199c0 <__libc_init_array+0x3c>)
 801998c:	1b64      	subs	r4, r4, r5
 801998e:	10a4      	asrs	r4, r4, #2
 8019990:	42a6      	cmp	r6, r4
 8019992:	d109      	bne.n	80199a8 <__libc_init_array+0x24>
 8019994:	f001 fc88 	bl	801b2a8 <_init>
 8019998:	2600      	movs	r6, #0
 801999a:	4d0a      	ldr	r5, [pc, #40]	; (80199c4 <__libc_init_array+0x40>)
 801999c:	4c0a      	ldr	r4, [pc, #40]	; (80199c8 <__libc_init_array+0x44>)
 801999e:	1b64      	subs	r4, r4, r5
 80199a0:	10a4      	asrs	r4, r4, #2
 80199a2:	42a6      	cmp	r6, r4
 80199a4:	d105      	bne.n	80199b2 <__libc_init_array+0x2e>
 80199a6:	bd70      	pop	{r4, r5, r6, pc}
 80199a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80199ac:	4798      	blx	r3
 80199ae:	3601      	adds	r6, #1
 80199b0:	e7ee      	b.n	8019990 <__libc_init_array+0xc>
 80199b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80199b6:	4798      	blx	r3
 80199b8:	3601      	adds	r6, #1
 80199ba:	e7f2      	b.n	80199a2 <__libc_init_array+0x1e>
 80199bc:	0801cef0 	.word	0x0801cef0
 80199c0:	0801cef0 	.word	0x0801cef0
 80199c4:	0801cef0 	.word	0x0801cef0
 80199c8:	0801cef4 	.word	0x0801cef4

080199cc <malloc>:
 80199cc:	4b02      	ldr	r3, [pc, #8]	; (80199d8 <malloc+0xc>)
 80199ce:	4601      	mov	r1, r0
 80199d0:	6818      	ldr	r0, [r3, #0]
 80199d2:	f000 b895 	b.w	8019b00 <_malloc_r>
 80199d6:	bf00      	nop
 80199d8:	20000324 	.word	0x20000324

080199dc <free>:
 80199dc:	4b02      	ldr	r3, [pc, #8]	; (80199e8 <free+0xc>)
 80199de:	4601      	mov	r1, r0
 80199e0:	6818      	ldr	r0, [r3, #0]
 80199e2:	f000 b841 	b.w	8019a68 <_free_r>
 80199e6:	bf00      	nop
 80199e8:	20000324 	.word	0x20000324

080199ec <memcpy>:
 80199ec:	440a      	add	r2, r1
 80199ee:	4291      	cmp	r1, r2
 80199f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80199f4:	d100      	bne.n	80199f8 <memcpy+0xc>
 80199f6:	4770      	bx	lr
 80199f8:	b510      	push	{r4, lr}
 80199fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80199fe:	4291      	cmp	r1, r2
 8019a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a04:	d1f9      	bne.n	80199fa <memcpy+0xe>
 8019a06:	bd10      	pop	{r4, pc}

08019a08 <memmove>:
 8019a08:	4288      	cmp	r0, r1
 8019a0a:	b510      	push	{r4, lr}
 8019a0c:	eb01 0402 	add.w	r4, r1, r2
 8019a10:	d902      	bls.n	8019a18 <memmove+0x10>
 8019a12:	4284      	cmp	r4, r0
 8019a14:	4623      	mov	r3, r4
 8019a16:	d807      	bhi.n	8019a28 <memmove+0x20>
 8019a18:	1e43      	subs	r3, r0, #1
 8019a1a:	42a1      	cmp	r1, r4
 8019a1c:	d008      	beq.n	8019a30 <memmove+0x28>
 8019a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a26:	e7f8      	b.n	8019a1a <memmove+0x12>
 8019a28:	4601      	mov	r1, r0
 8019a2a:	4402      	add	r2, r0
 8019a2c:	428a      	cmp	r2, r1
 8019a2e:	d100      	bne.n	8019a32 <memmove+0x2a>
 8019a30:	bd10      	pop	{r4, pc}
 8019a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a3a:	e7f7      	b.n	8019a2c <memmove+0x24>

08019a3c <memset>:
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	4402      	add	r2, r0
 8019a40:	4293      	cmp	r3, r2
 8019a42:	d100      	bne.n	8019a46 <memset+0xa>
 8019a44:	4770      	bx	lr
 8019a46:	f803 1b01 	strb.w	r1, [r3], #1
 8019a4a:	e7f9      	b.n	8019a40 <memset+0x4>

08019a4c <_calloc_r>:
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	fb02 f501 	mul.w	r5, r2, r1
 8019a52:	4629      	mov	r1, r5
 8019a54:	f000 f854 	bl	8019b00 <_malloc_r>
 8019a58:	4604      	mov	r4, r0
 8019a5a:	b118      	cbz	r0, 8019a64 <_calloc_r+0x18>
 8019a5c:	462a      	mov	r2, r5
 8019a5e:	2100      	movs	r1, #0
 8019a60:	f7ff ffec 	bl	8019a3c <memset>
 8019a64:	4620      	mov	r0, r4
 8019a66:	bd38      	pop	{r3, r4, r5, pc}

08019a68 <_free_r>:
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4605      	mov	r5, r0
 8019a6c:	2900      	cmp	r1, #0
 8019a6e:	d043      	beq.n	8019af8 <_free_r+0x90>
 8019a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a74:	1f0c      	subs	r4, r1, #4
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	bfb8      	it	lt
 8019a7a:	18e4      	addlt	r4, r4, r3
 8019a7c:	f000 fbcc 	bl	801a218 <__malloc_lock>
 8019a80:	4a1e      	ldr	r2, [pc, #120]	; (8019afc <_free_r+0x94>)
 8019a82:	6813      	ldr	r3, [r2, #0]
 8019a84:	4610      	mov	r0, r2
 8019a86:	b933      	cbnz	r3, 8019a96 <_free_r+0x2e>
 8019a88:	6063      	str	r3, [r4, #4]
 8019a8a:	6014      	str	r4, [r2, #0]
 8019a8c:	4628      	mov	r0, r5
 8019a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a92:	f000 bbc7 	b.w	801a224 <__malloc_unlock>
 8019a96:	42a3      	cmp	r3, r4
 8019a98:	d90a      	bls.n	8019ab0 <_free_r+0x48>
 8019a9a:	6821      	ldr	r1, [r4, #0]
 8019a9c:	1862      	adds	r2, r4, r1
 8019a9e:	4293      	cmp	r3, r2
 8019aa0:	bf01      	itttt	eq
 8019aa2:	681a      	ldreq	r2, [r3, #0]
 8019aa4:	685b      	ldreq	r3, [r3, #4]
 8019aa6:	1852      	addeq	r2, r2, r1
 8019aa8:	6022      	streq	r2, [r4, #0]
 8019aaa:	6063      	str	r3, [r4, #4]
 8019aac:	6004      	str	r4, [r0, #0]
 8019aae:	e7ed      	b.n	8019a8c <_free_r+0x24>
 8019ab0:	461a      	mov	r2, r3
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	b10b      	cbz	r3, 8019aba <_free_r+0x52>
 8019ab6:	42a3      	cmp	r3, r4
 8019ab8:	d9fa      	bls.n	8019ab0 <_free_r+0x48>
 8019aba:	6811      	ldr	r1, [r2, #0]
 8019abc:	1850      	adds	r0, r2, r1
 8019abe:	42a0      	cmp	r0, r4
 8019ac0:	d10b      	bne.n	8019ada <_free_r+0x72>
 8019ac2:	6820      	ldr	r0, [r4, #0]
 8019ac4:	4401      	add	r1, r0
 8019ac6:	1850      	adds	r0, r2, r1
 8019ac8:	4283      	cmp	r3, r0
 8019aca:	6011      	str	r1, [r2, #0]
 8019acc:	d1de      	bne.n	8019a8c <_free_r+0x24>
 8019ace:	6818      	ldr	r0, [r3, #0]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	4401      	add	r1, r0
 8019ad4:	6011      	str	r1, [r2, #0]
 8019ad6:	6053      	str	r3, [r2, #4]
 8019ad8:	e7d8      	b.n	8019a8c <_free_r+0x24>
 8019ada:	d902      	bls.n	8019ae2 <_free_r+0x7a>
 8019adc:	230c      	movs	r3, #12
 8019ade:	602b      	str	r3, [r5, #0]
 8019ae0:	e7d4      	b.n	8019a8c <_free_r+0x24>
 8019ae2:	6820      	ldr	r0, [r4, #0]
 8019ae4:	1821      	adds	r1, r4, r0
 8019ae6:	428b      	cmp	r3, r1
 8019ae8:	bf01      	itttt	eq
 8019aea:	6819      	ldreq	r1, [r3, #0]
 8019aec:	685b      	ldreq	r3, [r3, #4]
 8019aee:	1809      	addeq	r1, r1, r0
 8019af0:	6021      	streq	r1, [r4, #0]
 8019af2:	6063      	str	r3, [r4, #4]
 8019af4:	6054      	str	r4, [r2, #4]
 8019af6:	e7c9      	b.n	8019a8c <_free_r+0x24>
 8019af8:	bd38      	pop	{r3, r4, r5, pc}
 8019afa:	bf00      	nop
 8019afc:	20006934 	.word	0x20006934

08019b00 <_malloc_r>:
 8019b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b02:	1ccd      	adds	r5, r1, #3
 8019b04:	f025 0503 	bic.w	r5, r5, #3
 8019b08:	3508      	adds	r5, #8
 8019b0a:	2d0c      	cmp	r5, #12
 8019b0c:	bf38      	it	cc
 8019b0e:	250c      	movcc	r5, #12
 8019b10:	2d00      	cmp	r5, #0
 8019b12:	4606      	mov	r6, r0
 8019b14:	db01      	blt.n	8019b1a <_malloc_r+0x1a>
 8019b16:	42a9      	cmp	r1, r5
 8019b18:	d903      	bls.n	8019b22 <_malloc_r+0x22>
 8019b1a:	230c      	movs	r3, #12
 8019b1c:	6033      	str	r3, [r6, #0]
 8019b1e:	2000      	movs	r0, #0
 8019b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b22:	f000 fb79 	bl	801a218 <__malloc_lock>
 8019b26:	4921      	ldr	r1, [pc, #132]	; (8019bac <_malloc_r+0xac>)
 8019b28:	680a      	ldr	r2, [r1, #0]
 8019b2a:	4614      	mov	r4, r2
 8019b2c:	b99c      	cbnz	r4, 8019b56 <_malloc_r+0x56>
 8019b2e:	4f20      	ldr	r7, [pc, #128]	; (8019bb0 <_malloc_r+0xb0>)
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	b923      	cbnz	r3, 8019b3e <_malloc_r+0x3e>
 8019b34:	4621      	mov	r1, r4
 8019b36:	4630      	mov	r0, r6
 8019b38:	f000 f8ca 	bl	8019cd0 <_sbrk_r>
 8019b3c:	6038      	str	r0, [r7, #0]
 8019b3e:	4629      	mov	r1, r5
 8019b40:	4630      	mov	r0, r6
 8019b42:	f000 f8c5 	bl	8019cd0 <_sbrk_r>
 8019b46:	1c43      	adds	r3, r0, #1
 8019b48:	d123      	bne.n	8019b92 <_malloc_r+0x92>
 8019b4a:	230c      	movs	r3, #12
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	6033      	str	r3, [r6, #0]
 8019b50:	f000 fb68 	bl	801a224 <__malloc_unlock>
 8019b54:	e7e3      	b.n	8019b1e <_malloc_r+0x1e>
 8019b56:	6823      	ldr	r3, [r4, #0]
 8019b58:	1b5b      	subs	r3, r3, r5
 8019b5a:	d417      	bmi.n	8019b8c <_malloc_r+0x8c>
 8019b5c:	2b0b      	cmp	r3, #11
 8019b5e:	d903      	bls.n	8019b68 <_malloc_r+0x68>
 8019b60:	6023      	str	r3, [r4, #0]
 8019b62:	441c      	add	r4, r3
 8019b64:	6025      	str	r5, [r4, #0]
 8019b66:	e004      	b.n	8019b72 <_malloc_r+0x72>
 8019b68:	6863      	ldr	r3, [r4, #4]
 8019b6a:	42a2      	cmp	r2, r4
 8019b6c:	bf0c      	ite	eq
 8019b6e:	600b      	streq	r3, [r1, #0]
 8019b70:	6053      	strne	r3, [r2, #4]
 8019b72:	4630      	mov	r0, r6
 8019b74:	f000 fb56 	bl	801a224 <__malloc_unlock>
 8019b78:	f104 000b 	add.w	r0, r4, #11
 8019b7c:	1d23      	adds	r3, r4, #4
 8019b7e:	f020 0007 	bic.w	r0, r0, #7
 8019b82:	1ac2      	subs	r2, r0, r3
 8019b84:	d0cc      	beq.n	8019b20 <_malloc_r+0x20>
 8019b86:	1a1b      	subs	r3, r3, r0
 8019b88:	50a3      	str	r3, [r4, r2]
 8019b8a:	e7c9      	b.n	8019b20 <_malloc_r+0x20>
 8019b8c:	4622      	mov	r2, r4
 8019b8e:	6864      	ldr	r4, [r4, #4]
 8019b90:	e7cc      	b.n	8019b2c <_malloc_r+0x2c>
 8019b92:	1cc4      	adds	r4, r0, #3
 8019b94:	f024 0403 	bic.w	r4, r4, #3
 8019b98:	42a0      	cmp	r0, r4
 8019b9a:	d0e3      	beq.n	8019b64 <_malloc_r+0x64>
 8019b9c:	1a21      	subs	r1, r4, r0
 8019b9e:	4630      	mov	r0, r6
 8019ba0:	f000 f896 	bl	8019cd0 <_sbrk_r>
 8019ba4:	3001      	adds	r0, #1
 8019ba6:	d1dd      	bne.n	8019b64 <_malloc_r+0x64>
 8019ba8:	e7cf      	b.n	8019b4a <_malloc_r+0x4a>
 8019baa:	bf00      	nop
 8019bac:	20006934 	.word	0x20006934
 8019bb0:	20006938 	.word	0x20006938

08019bb4 <iprintf>:
 8019bb4:	b40f      	push	{r0, r1, r2, r3}
 8019bb6:	4b0a      	ldr	r3, [pc, #40]	; (8019be0 <iprintf+0x2c>)
 8019bb8:	b513      	push	{r0, r1, r4, lr}
 8019bba:	681c      	ldr	r4, [r3, #0]
 8019bbc:	b124      	cbz	r4, 8019bc8 <iprintf+0x14>
 8019bbe:	69a3      	ldr	r3, [r4, #24]
 8019bc0:	b913      	cbnz	r3, 8019bc8 <iprintf+0x14>
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	f000 fa76 	bl	801a0b4 <__sinit>
 8019bc8:	ab05      	add	r3, sp, #20
 8019bca:	4620      	mov	r0, r4
 8019bcc:	9a04      	ldr	r2, [sp, #16]
 8019bce:	68a1      	ldr	r1, [r4, #8]
 8019bd0:	9301      	str	r3, [sp, #4]
 8019bd2:	f000 fcd7 	bl	801a584 <_vfiprintf_r>
 8019bd6:	b002      	add	sp, #8
 8019bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bdc:	b004      	add	sp, #16
 8019bde:	4770      	bx	lr
 8019be0:	20000324 	.word	0x20000324

08019be4 <srand>:
 8019be4:	b538      	push	{r3, r4, r5, lr}
 8019be6:	4b10      	ldr	r3, [pc, #64]	; (8019c28 <srand+0x44>)
 8019be8:	4604      	mov	r4, r0
 8019bea:	681d      	ldr	r5, [r3, #0]
 8019bec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019bee:	b9b3      	cbnz	r3, 8019c1e <srand+0x3a>
 8019bf0:	2018      	movs	r0, #24
 8019bf2:	f7ff feeb 	bl	80199cc <malloc>
 8019bf6:	4602      	mov	r2, r0
 8019bf8:	63a8      	str	r0, [r5, #56]	; 0x38
 8019bfa:	b920      	cbnz	r0, 8019c06 <srand+0x22>
 8019bfc:	2142      	movs	r1, #66	; 0x42
 8019bfe:	4b0b      	ldr	r3, [pc, #44]	; (8019c2c <srand+0x48>)
 8019c00:	480b      	ldr	r0, [pc, #44]	; (8019c30 <srand+0x4c>)
 8019c02:	f000 f9d5 	bl	8019fb0 <__assert_func>
 8019c06:	490b      	ldr	r1, [pc, #44]	; (8019c34 <srand+0x50>)
 8019c08:	4b0b      	ldr	r3, [pc, #44]	; (8019c38 <srand+0x54>)
 8019c0a:	e9c0 1300 	strd	r1, r3, [r0]
 8019c0e:	4b0b      	ldr	r3, [pc, #44]	; (8019c3c <srand+0x58>)
 8019c10:	2100      	movs	r1, #0
 8019c12:	6083      	str	r3, [r0, #8]
 8019c14:	230b      	movs	r3, #11
 8019c16:	8183      	strh	r3, [r0, #12]
 8019c18:	2001      	movs	r0, #1
 8019c1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019c1e:	2200      	movs	r2, #0
 8019c20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019c22:	611c      	str	r4, [r3, #16]
 8019c24:	615a      	str	r2, [r3, #20]
 8019c26:	bd38      	pop	{r3, r4, r5, pc}
 8019c28:	20000324 	.word	0x20000324
 8019c2c:	0801cda0 	.word	0x0801cda0
 8019c30:	0801cdb7 	.word	0x0801cdb7
 8019c34:	abcd330e 	.word	0xabcd330e
 8019c38:	e66d1234 	.word	0xe66d1234
 8019c3c:	0005deec 	.word	0x0005deec

08019c40 <rand>:
 8019c40:	4b17      	ldr	r3, [pc, #92]	; (8019ca0 <rand+0x60>)
 8019c42:	b510      	push	{r4, lr}
 8019c44:	681c      	ldr	r4, [r3, #0]
 8019c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019c48:	b9b3      	cbnz	r3, 8019c78 <rand+0x38>
 8019c4a:	2018      	movs	r0, #24
 8019c4c:	f7ff febe 	bl	80199cc <malloc>
 8019c50:	4602      	mov	r2, r0
 8019c52:	63a0      	str	r0, [r4, #56]	; 0x38
 8019c54:	b920      	cbnz	r0, 8019c60 <rand+0x20>
 8019c56:	214e      	movs	r1, #78	; 0x4e
 8019c58:	4b12      	ldr	r3, [pc, #72]	; (8019ca4 <rand+0x64>)
 8019c5a:	4813      	ldr	r0, [pc, #76]	; (8019ca8 <rand+0x68>)
 8019c5c:	f000 f9a8 	bl	8019fb0 <__assert_func>
 8019c60:	4912      	ldr	r1, [pc, #72]	; (8019cac <rand+0x6c>)
 8019c62:	4b13      	ldr	r3, [pc, #76]	; (8019cb0 <rand+0x70>)
 8019c64:	e9c0 1300 	strd	r1, r3, [r0]
 8019c68:	4b12      	ldr	r3, [pc, #72]	; (8019cb4 <rand+0x74>)
 8019c6a:	2100      	movs	r1, #0
 8019c6c:	6083      	str	r3, [r0, #8]
 8019c6e:	230b      	movs	r3, #11
 8019c70:	8183      	strh	r3, [r0, #12]
 8019c72:	2001      	movs	r0, #1
 8019c74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019c78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019c7a:	480f      	ldr	r0, [pc, #60]	; (8019cb8 <rand+0x78>)
 8019c7c:	690a      	ldr	r2, [r1, #16]
 8019c7e:	694b      	ldr	r3, [r1, #20]
 8019c80:	4350      	muls	r0, r2
 8019c82:	4c0e      	ldr	r4, [pc, #56]	; (8019cbc <rand+0x7c>)
 8019c84:	fb04 0003 	mla	r0, r4, r3, r0
 8019c88:	fba2 3404 	umull	r3, r4, r2, r4
 8019c8c:	1c5a      	adds	r2, r3, #1
 8019c8e:	4404      	add	r4, r0
 8019c90:	f144 0000 	adc.w	r0, r4, #0
 8019c94:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8019c98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019c9c:	bd10      	pop	{r4, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20000324 	.word	0x20000324
 8019ca4:	0801cda0 	.word	0x0801cda0
 8019ca8:	0801cdb7 	.word	0x0801cdb7
 8019cac:	abcd330e 	.word	0xabcd330e
 8019cb0:	e66d1234 	.word	0xe66d1234
 8019cb4:	0005deec 	.word	0x0005deec
 8019cb8:	5851f42d 	.word	0x5851f42d
 8019cbc:	4c957f2d 	.word	0x4c957f2d

08019cc0 <realloc>:
 8019cc0:	4b02      	ldr	r3, [pc, #8]	; (8019ccc <realloc+0xc>)
 8019cc2:	460a      	mov	r2, r1
 8019cc4:	4601      	mov	r1, r0
 8019cc6:	6818      	ldr	r0, [r3, #0]
 8019cc8:	f000 bab2 	b.w	801a230 <_realloc_r>
 8019ccc:	20000324 	.word	0x20000324

08019cd0 <_sbrk_r>:
 8019cd0:	b538      	push	{r3, r4, r5, lr}
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	4d05      	ldr	r5, [pc, #20]	; (8019cec <_sbrk_r+0x1c>)
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	4608      	mov	r0, r1
 8019cda:	602b      	str	r3, [r5, #0]
 8019cdc:	f7ea fa66 	bl	80041ac <_sbrk>
 8019ce0:	1c43      	adds	r3, r0, #1
 8019ce2:	d102      	bne.n	8019cea <_sbrk_r+0x1a>
 8019ce4:	682b      	ldr	r3, [r5, #0]
 8019ce6:	b103      	cbz	r3, 8019cea <_sbrk_r+0x1a>
 8019ce8:	6023      	str	r3, [r4, #0]
 8019cea:	bd38      	pop	{r3, r4, r5, pc}
 8019cec:	2000e4dc 	.word	0x2000e4dc

08019cf0 <sniprintf>:
 8019cf0:	b40c      	push	{r2, r3}
 8019cf2:	b530      	push	{r4, r5, lr}
 8019cf4:	4b17      	ldr	r3, [pc, #92]	; (8019d54 <sniprintf+0x64>)
 8019cf6:	1e0c      	subs	r4, r1, #0
 8019cf8:	681d      	ldr	r5, [r3, #0]
 8019cfa:	b09d      	sub	sp, #116	; 0x74
 8019cfc:	da08      	bge.n	8019d10 <sniprintf+0x20>
 8019cfe:	238b      	movs	r3, #139	; 0x8b
 8019d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d04:	602b      	str	r3, [r5, #0]
 8019d06:	b01d      	add	sp, #116	; 0x74
 8019d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d0c:	b002      	add	sp, #8
 8019d0e:	4770      	bx	lr
 8019d10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019d14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019d18:	bf0c      	ite	eq
 8019d1a:	4623      	moveq	r3, r4
 8019d1c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019d20:	9304      	str	r3, [sp, #16]
 8019d22:	9307      	str	r3, [sp, #28]
 8019d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d28:	9002      	str	r0, [sp, #8]
 8019d2a:	9006      	str	r0, [sp, #24]
 8019d2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d30:	4628      	mov	r0, r5
 8019d32:	ab21      	add	r3, sp, #132	; 0x84
 8019d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019d36:	a902      	add	r1, sp, #8
 8019d38:	9301      	str	r3, [sp, #4]
 8019d3a:	f000 fafb 	bl	801a334 <_svfiprintf_r>
 8019d3e:	1c43      	adds	r3, r0, #1
 8019d40:	bfbc      	itt	lt
 8019d42:	238b      	movlt	r3, #139	; 0x8b
 8019d44:	602b      	strlt	r3, [r5, #0]
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	d0dd      	beq.n	8019d06 <sniprintf+0x16>
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	9b02      	ldr	r3, [sp, #8]
 8019d4e:	701a      	strb	r2, [r3, #0]
 8019d50:	e7d9      	b.n	8019d06 <sniprintf+0x16>
 8019d52:	bf00      	nop
 8019d54:	20000324 	.word	0x20000324

08019d58 <siprintf>:
 8019d58:	b40e      	push	{r1, r2, r3}
 8019d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019d5e:	b500      	push	{lr}
 8019d60:	b09c      	sub	sp, #112	; 0x70
 8019d62:	ab1d      	add	r3, sp, #116	; 0x74
 8019d64:	9002      	str	r0, [sp, #8]
 8019d66:	9006      	str	r0, [sp, #24]
 8019d68:	9107      	str	r1, [sp, #28]
 8019d6a:	9104      	str	r1, [sp, #16]
 8019d6c:	4808      	ldr	r0, [pc, #32]	; (8019d90 <siprintf+0x38>)
 8019d6e:	4909      	ldr	r1, [pc, #36]	; (8019d94 <siprintf+0x3c>)
 8019d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d74:	9105      	str	r1, [sp, #20]
 8019d76:	6800      	ldr	r0, [r0, #0]
 8019d78:	a902      	add	r1, sp, #8
 8019d7a:	9301      	str	r3, [sp, #4]
 8019d7c:	f000 fada 	bl	801a334 <_svfiprintf_r>
 8019d80:	2200      	movs	r2, #0
 8019d82:	9b02      	ldr	r3, [sp, #8]
 8019d84:	701a      	strb	r2, [r3, #0]
 8019d86:	b01c      	add	sp, #112	; 0x70
 8019d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d8c:	b003      	add	sp, #12
 8019d8e:	4770      	bx	lr
 8019d90:	20000324 	.word	0x20000324
 8019d94:	ffff0208 	.word	0xffff0208

08019d98 <strchr>:
 8019d98:	4603      	mov	r3, r0
 8019d9a:	b2c9      	uxtb	r1, r1
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019da2:	b112      	cbz	r2, 8019daa <strchr+0x12>
 8019da4:	428a      	cmp	r2, r1
 8019da6:	d1f9      	bne.n	8019d9c <strchr+0x4>
 8019da8:	4770      	bx	lr
 8019daa:	2900      	cmp	r1, #0
 8019dac:	bf18      	it	ne
 8019dae:	2000      	movne	r0, #0
 8019db0:	4770      	bx	lr

08019db2 <strcpy>:
 8019db2:	4603      	mov	r3, r0
 8019db4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019db8:	f803 2b01 	strb.w	r2, [r3], #1
 8019dbc:	2a00      	cmp	r2, #0
 8019dbe:	d1f9      	bne.n	8019db4 <strcpy+0x2>
 8019dc0:	4770      	bx	lr

08019dc2 <strncmp>:
 8019dc2:	b510      	push	{r4, lr}
 8019dc4:	b16a      	cbz	r2, 8019de2 <strncmp+0x20>
 8019dc6:	3901      	subs	r1, #1
 8019dc8:	1884      	adds	r4, r0, r2
 8019dca:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019dce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019dd2:	4293      	cmp	r3, r2
 8019dd4:	d103      	bne.n	8019dde <strncmp+0x1c>
 8019dd6:	42a0      	cmp	r0, r4
 8019dd8:	d001      	beq.n	8019dde <strncmp+0x1c>
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d1f5      	bne.n	8019dca <strncmp+0x8>
 8019dde:	1a98      	subs	r0, r3, r2
 8019de0:	bd10      	pop	{r4, pc}
 8019de2:	4610      	mov	r0, r2
 8019de4:	e7fc      	b.n	8019de0 <strncmp+0x1e>

08019de6 <strnlen>:
 8019de6:	4602      	mov	r2, r0
 8019de8:	b510      	push	{r4, lr}
 8019dea:	4401      	add	r1, r0
 8019dec:	428a      	cmp	r2, r1
 8019dee:	4613      	mov	r3, r2
 8019df0:	d101      	bne.n	8019df6 <strnlen+0x10>
 8019df2:	1a18      	subs	r0, r3, r0
 8019df4:	bd10      	pop	{r4, pc}
 8019df6:	781c      	ldrb	r4, [r3, #0]
 8019df8:	3201      	adds	r2, #1
 8019dfa:	2c00      	cmp	r4, #0
 8019dfc:	d1f6      	bne.n	8019dec <strnlen+0x6>
 8019dfe:	e7f8      	b.n	8019df2 <strnlen+0xc>

08019e00 <strstr>:
 8019e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e02:	780c      	ldrb	r4, [r1, #0]
 8019e04:	b164      	cbz	r4, 8019e20 <strstr+0x20>
 8019e06:	4603      	mov	r3, r0
 8019e08:	781a      	ldrb	r2, [r3, #0]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	1c5e      	adds	r6, r3, #1
 8019e0e:	b90a      	cbnz	r2, 8019e14 <strstr+0x14>
 8019e10:	4610      	mov	r0, r2
 8019e12:	e005      	b.n	8019e20 <strstr+0x20>
 8019e14:	4294      	cmp	r4, r2
 8019e16:	d108      	bne.n	8019e2a <strstr+0x2a>
 8019e18:	460d      	mov	r5, r1
 8019e1a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8019e1e:	b902      	cbnz	r2, 8019e22 <strstr+0x22>
 8019e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e22:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8019e26:	4297      	cmp	r7, r2
 8019e28:	d0f7      	beq.n	8019e1a <strstr+0x1a>
 8019e2a:	4633      	mov	r3, r6
 8019e2c:	e7ec      	b.n	8019e08 <strstr+0x8>
	...

08019e30 <_strtoul_l.isra.0>:
 8019e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e34:	468c      	mov	ip, r1
 8019e36:	4686      	mov	lr, r0
 8019e38:	4e3a      	ldr	r6, [pc, #232]	; (8019f24 <_strtoul_l.isra.0+0xf4>)
 8019e3a:	4660      	mov	r0, ip
 8019e3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019e40:	5da5      	ldrb	r5, [r4, r6]
 8019e42:	f015 0508 	ands.w	r5, r5, #8
 8019e46:	d1f8      	bne.n	8019e3a <_strtoul_l.isra.0+0xa>
 8019e48:	2c2d      	cmp	r4, #45	; 0x2d
 8019e4a:	d134      	bne.n	8019eb6 <_strtoul_l.isra.0+0x86>
 8019e4c:	f04f 0801 	mov.w	r8, #1
 8019e50:	f89c 4000 	ldrb.w	r4, [ip]
 8019e54:	f100 0c02 	add.w	ip, r0, #2
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d05e      	beq.n	8019f1a <_strtoul_l.isra.0+0xea>
 8019e5c:	2b10      	cmp	r3, #16
 8019e5e:	d10c      	bne.n	8019e7a <_strtoul_l.isra.0+0x4a>
 8019e60:	2c30      	cmp	r4, #48	; 0x30
 8019e62:	d10a      	bne.n	8019e7a <_strtoul_l.isra.0+0x4a>
 8019e64:	f89c 0000 	ldrb.w	r0, [ip]
 8019e68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019e6c:	2858      	cmp	r0, #88	; 0x58
 8019e6e:	d14f      	bne.n	8019f10 <_strtoul_l.isra.0+0xe0>
 8019e70:	2310      	movs	r3, #16
 8019e72:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8019e76:	f10c 0c02 	add.w	ip, ip, #2
 8019e7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019e7e:	fbb7 f7f3 	udiv	r7, r7, r3
 8019e82:	2500      	movs	r5, #0
 8019e84:	fb03 f907 	mul.w	r9, r3, r7
 8019e88:	4628      	mov	r0, r5
 8019e8a:	ea6f 0909 	mvn.w	r9, r9
 8019e8e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8019e92:	2e09      	cmp	r6, #9
 8019e94:	d818      	bhi.n	8019ec8 <_strtoul_l.isra.0+0x98>
 8019e96:	4634      	mov	r4, r6
 8019e98:	42a3      	cmp	r3, r4
 8019e9a:	dd24      	ble.n	8019ee6 <_strtoul_l.isra.0+0xb6>
 8019e9c:	2d00      	cmp	r5, #0
 8019e9e:	db1f      	blt.n	8019ee0 <_strtoul_l.isra.0+0xb0>
 8019ea0:	4287      	cmp	r7, r0
 8019ea2:	d31d      	bcc.n	8019ee0 <_strtoul_l.isra.0+0xb0>
 8019ea4:	d101      	bne.n	8019eaa <_strtoul_l.isra.0+0x7a>
 8019ea6:	45a1      	cmp	r9, r4
 8019ea8:	db1a      	blt.n	8019ee0 <_strtoul_l.isra.0+0xb0>
 8019eaa:	2501      	movs	r5, #1
 8019eac:	fb00 4003 	mla	r0, r0, r3, r4
 8019eb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019eb4:	e7eb      	b.n	8019e8e <_strtoul_l.isra.0+0x5e>
 8019eb6:	2c2b      	cmp	r4, #43	; 0x2b
 8019eb8:	bf08      	it	eq
 8019eba:	f89c 4000 	ldrbeq.w	r4, [ip]
 8019ebe:	46a8      	mov	r8, r5
 8019ec0:	bf08      	it	eq
 8019ec2:	f100 0c02 	addeq.w	ip, r0, #2
 8019ec6:	e7c7      	b.n	8019e58 <_strtoul_l.isra.0+0x28>
 8019ec8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019ecc:	2e19      	cmp	r6, #25
 8019ece:	d801      	bhi.n	8019ed4 <_strtoul_l.isra.0+0xa4>
 8019ed0:	3c37      	subs	r4, #55	; 0x37
 8019ed2:	e7e1      	b.n	8019e98 <_strtoul_l.isra.0+0x68>
 8019ed4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8019ed8:	2e19      	cmp	r6, #25
 8019eda:	d804      	bhi.n	8019ee6 <_strtoul_l.isra.0+0xb6>
 8019edc:	3c57      	subs	r4, #87	; 0x57
 8019ede:	e7db      	b.n	8019e98 <_strtoul_l.isra.0+0x68>
 8019ee0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019ee4:	e7e4      	b.n	8019eb0 <_strtoul_l.isra.0+0x80>
 8019ee6:	2d00      	cmp	r5, #0
 8019ee8:	da07      	bge.n	8019efa <_strtoul_l.isra.0+0xca>
 8019eea:	2322      	movs	r3, #34	; 0x22
 8019eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ef0:	f8ce 3000 	str.w	r3, [lr]
 8019ef4:	b942      	cbnz	r2, 8019f08 <_strtoul_l.isra.0+0xd8>
 8019ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019efa:	f1b8 0f00 	cmp.w	r8, #0
 8019efe:	d000      	beq.n	8019f02 <_strtoul_l.isra.0+0xd2>
 8019f00:	4240      	negs	r0, r0
 8019f02:	2a00      	cmp	r2, #0
 8019f04:	d0f7      	beq.n	8019ef6 <_strtoul_l.isra.0+0xc6>
 8019f06:	b10d      	cbz	r5, 8019f0c <_strtoul_l.isra.0+0xdc>
 8019f08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8019f0c:	6011      	str	r1, [r2, #0]
 8019f0e:	e7f2      	b.n	8019ef6 <_strtoul_l.isra.0+0xc6>
 8019f10:	2430      	movs	r4, #48	; 0x30
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d1b1      	bne.n	8019e7a <_strtoul_l.isra.0+0x4a>
 8019f16:	2308      	movs	r3, #8
 8019f18:	e7af      	b.n	8019e7a <_strtoul_l.isra.0+0x4a>
 8019f1a:	2c30      	cmp	r4, #48	; 0x30
 8019f1c:	d0a2      	beq.n	8019e64 <_strtoul_l.isra.0+0x34>
 8019f1e:	230a      	movs	r3, #10
 8019f20:	e7ab      	b.n	8019e7a <_strtoul_l.isra.0+0x4a>
 8019f22:	bf00      	nop
 8019f24:	0801cc9b 	.word	0x0801cc9b

08019f28 <strtoul>:
 8019f28:	4613      	mov	r3, r2
 8019f2a:	460a      	mov	r2, r1
 8019f2c:	4601      	mov	r1, r0
 8019f2e:	4802      	ldr	r0, [pc, #8]	; (8019f38 <strtoul+0x10>)
 8019f30:	6800      	ldr	r0, [r0, #0]
 8019f32:	f7ff bf7d 	b.w	8019e30 <_strtoul_l.isra.0>
 8019f36:	bf00      	nop
 8019f38:	20000324 	.word	0x20000324

08019f3c <_vsniprintf_r>:
 8019f3c:	b530      	push	{r4, r5, lr}
 8019f3e:	1e14      	subs	r4, r2, #0
 8019f40:	4605      	mov	r5, r0
 8019f42:	b09b      	sub	sp, #108	; 0x6c
 8019f44:	4618      	mov	r0, r3
 8019f46:	da05      	bge.n	8019f54 <_vsniprintf_r+0x18>
 8019f48:	238b      	movs	r3, #139	; 0x8b
 8019f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f4e:	602b      	str	r3, [r5, #0]
 8019f50:	b01b      	add	sp, #108	; 0x6c
 8019f52:	bd30      	pop	{r4, r5, pc}
 8019f54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019f58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019f5c:	bf0c      	ite	eq
 8019f5e:	4623      	moveq	r3, r4
 8019f60:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019f64:	9302      	str	r3, [sp, #8]
 8019f66:	9305      	str	r3, [sp, #20]
 8019f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f6c:	4602      	mov	r2, r0
 8019f6e:	9100      	str	r1, [sp, #0]
 8019f70:	9104      	str	r1, [sp, #16]
 8019f72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019f76:	4669      	mov	r1, sp
 8019f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	f000 f9da 	bl	801a334 <_svfiprintf_r>
 8019f80:	1c43      	adds	r3, r0, #1
 8019f82:	bfbc      	itt	lt
 8019f84:	238b      	movlt	r3, #139	; 0x8b
 8019f86:	602b      	strlt	r3, [r5, #0]
 8019f88:	2c00      	cmp	r4, #0
 8019f8a:	d0e1      	beq.n	8019f50 <_vsniprintf_r+0x14>
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	9b00      	ldr	r3, [sp, #0]
 8019f90:	701a      	strb	r2, [r3, #0]
 8019f92:	e7dd      	b.n	8019f50 <_vsniprintf_r+0x14>

08019f94 <vsniprintf>:
 8019f94:	b507      	push	{r0, r1, r2, lr}
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	4613      	mov	r3, r2
 8019f9a:	460a      	mov	r2, r1
 8019f9c:	4601      	mov	r1, r0
 8019f9e:	4803      	ldr	r0, [pc, #12]	; (8019fac <vsniprintf+0x18>)
 8019fa0:	6800      	ldr	r0, [r0, #0]
 8019fa2:	f7ff ffcb 	bl	8019f3c <_vsniprintf_r>
 8019fa6:	b003      	add	sp, #12
 8019fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fac:	20000324 	.word	0x20000324

08019fb0 <__assert_func>:
 8019fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019fb2:	4614      	mov	r4, r2
 8019fb4:	461a      	mov	r2, r3
 8019fb6:	4b09      	ldr	r3, [pc, #36]	; (8019fdc <__assert_func+0x2c>)
 8019fb8:	4605      	mov	r5, r0
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	68d8      	ldr	r0, [r3, #12]
 8019fbe:	b14c      	cbz	r4, 8019fd4 <__assert_func+0x24>
 8019fc0:	4b07      	ldr	r3, [pc, #28]	; (8019fe0 <__assert_func+0x30>)
 8019fc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019fc6:	9100      	str	r1, [sp, #0]
 8019fc8:	462b      	mov	r3, r5
 8019fca:	4906      	ldr	r1, [pc, #24]	; (8019fe4 <__assert_func+0x34>)
 8019fcc:	f000 f8f0 	bl	801a1b0 <fiprintf>
 8019fd0:	f000 feb4 	bl	801ad3c <abort>
 8019fd4:	4b04      	ldr	r3, [pc, #16]	; (8019fe8 <__assert_func+0x38>)
 8019fd6:	461c      	mov	r4, r3
 8019fd8:	e7f3      	b.n	8019fc2 <__assert_func+0x12>
 8019fda:	bf00      	nop
 8019fdc:	20000324 	.word	0x20000324
 8019fe0:	0801ce16 	.word	0x0801ce16
 8019fe4:	0801ce23 	.word	0x0801ce23
 8019fe8:	0801ce51 	.word	0x0801ce51

08019fec <__env_lock>:
 8019fec:	4801      	ldr	r0, [pc, #4]	; (8019ff4 <__env_lock+0x8>)
 8019fee:	f000 b911 	b.w	801a214 <__retarget_lock_acquire_recursive>
 8019ff2:	bf00      	nop
 8019ff4:	2000e4d2 	.word	0x2000e4d2

08019ff8 <__env_unlock>:
 8019ff8:	4801      	ldr	r0, [pc, #4]	; (801a000 <__env_unlock+0x8>)
 8019ffa:	f000 b90c 	b.w	801a216 <__retarget_lock_release_recursive>
 8019ffe:	bf00      	nop
 801a000:	2000e4d2 	.word	0x2000e4d2

0801a004 <std>:
 801a004:	2300      	movs	r3, #0
 801a006:	b510      	push	{r4, lr}
 801a008:	4604      	mov	r4, r0
 801a00a:	e9c0 3300 	strd	r3, r3, [r0]
 801a00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a012:	6083      	str	r3, [r0, #8]
 801a014:	8181      	strh	r1, [r0, #12]
 801a016:	6643      	str	r3, [r0, #100]	; 0x64
 801a018:	81c2      	strh	r2, [r0, #14]
 801a01a:	6183      	str	r3, [r0, #24]
 801a01c:	4619      	mov	r1, r3
 801a01e:	2208      	movs	r2, #8
 801a020:	305c      	adds	r0, #92	; 0x5c
 801a022:	f7ff fd0b 	bl	8019a3c <memset>
 801a026:	4b05      	ldr	r3, [pc, #20]	; (801a03c <std+0x38>)
 801a028:	6224      	str	r4, [r4, #32]
 801a02a:	6263      	str	r3, [r4, #36]	; 0x24
 801a02c:	4b04      	ldr	r3, [pc, #16]	; (801a040 <std+0x3c>)
 801a02e:	62a3      	str	r3, [r4, #40]	; 0x28
 801a030:	4b04      	ldr	r3, [pc, #16]	; (801a044 <std+0x40>)
 801a032:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a034:	4b04      	ldr	r3, [pc, #16]	; (801a048 <std+0x44>)
 801a036:	6323      	str	r3, [r4, #48]	; 0x30
 801a038:	bd10      	pop	{r4, pc}
 801a03a:	bf00      	nop
 801a03c:	0801ab11 	.word	0x0801ab11
 801a040:	0801ab33 	.word	0x0801ab33
 801a044:	0801ab6b 	.word	0x0801ab6b
 801a048:	0801ab8f 	.word	0x0801ab8f

0801a04c <_cleanup_r>:
 801a04c:	4901      	ldr	r1, [pc, #4]	; (801a054 <_cleanup_r+0x8>)
 801a04e:	f000 b8c1 	b.w	801a1d4 <_fwalk_reent>
 801a052:	bf00      	nop
 801a054:	0801ae79 	.word	0x0801ae79

0801a058 <__sfmoreglue>:
 801a058:	b570      	push	{r4, r5, r6, lr}
 801a05a:	2568      	movs	r5, #104	; 0x68
 801a05c:	1e4a      	subs	r2, r1, #1
 801a05e:	4355      	muls	r5, r2
 801a060:	460e      	mov	r6, r1
 801a062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a066:	f7ff fd4b 	bl	8019b00 <_malloc_r>
 801a06a:	4604      	mov	r4, r0
 801a06c:	b140      	cbz	r0, 801a080 <__sfmoreglue+0x28>
 801a06e:	2100      	movs	r1, #0
 801a070:	e9c0 1600 	strd	r1, r6, [r0]
 801a074:	300c      	adds	r0, #12
 801a076:	60a0      	str	r0, [r4, #8]
 801a078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a07c:	f7ff fcde 	bl	8019a3c <memset>
 801a080:	4620      	mov	r0, r4
 801a082:	bd70      	pop	{r4, r5, r6, pc}

0801a084 <__sfp_lock_acquire>:
 801a084:	4801      	ldr	r0, [pc, #4]	; (801a08c <__sfp_lock_acquire+0x8>)
 801a086:	f000 b8c5 	b.w	801a214 <__retarget_lock_acquire_recursive>
 801a08a:	bf00      	nop
 801a08c:	2000e4d8 	.word	0x2000e4d8

0801a090 <__sfp_lock_release>:
 801a090:	4801      	ldr	r0, [pc, #4]	; (801a098 <__sfp_lock_release+0x8>)
 801a092:	f000 b8c0 	b.w	801a216 <__retarget_lock_release_recursive>
 801a096:	bf00      	nop
 801a098:	2000e4d8 	.word	0x2000e4d8

0801a09c <__sinit_lock_acquire>:
 801a09c:	4801      	ldr	r0, [pc, #4]	; (801a0a4 <__sinit_lock_acquire+0x8>)
 801a09e:	f000 b8b9 	b.w	801a214 <__retarget_lock_acquire_recursive>
 801a0a2:	bf00      	nop
 801a0a4:	2000e4d3 	.word	0x2000e4d3

0801a0a8 <__sinit_lock_release>:
 801a0a8:	4801      	ldr	r0, [pc, #4]	; (801a0b0 <__sinit_lock_release+0x8>)
 801a0aa:	f000 b8b4 	b.w	801a216 <__retarget_lock_release_recursive>
 801a0ae:	bf00      	nop
 801a0b0:	2000e4d3 	.word	0x2000e4d3

0801a0b4 <__sinit>:
 801a0b4:	b510      	push	{r4, lr}
 801a0b6:	4604      	mov	r4, r0
 801a0b8:	f7ff fff0 	bl	801a09c <__sinit_lock_acquire>
 801a0bc:	69a3      	ldr	r3, [r4, #24]
 801a0be:	b11b      	cbz	r3, 801a0c8 <__sinit+0x14>
 801a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0c4:	f7ff bff0 	b.w	801a0a8 <__sinit_lock_release>
 801a0c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a0cc:	6523      	str	r3, [r4, #80]	; 0x50
 801a0ce:	4b13      	ldr	r3, [pc, #76]	; (801a11c <__sinit+0x68>)
 801a0d0:	4a13      	ldr	r2, [pc, #76]	; (801a120 <__sinit+0x6c>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801a0d6:	42a3      	cmp	r3, r4
 801a0d8:	bf08      	it	eq
 801a0da:	2301      	moveq	r3, #1
 801a0dc:	4620      	mov	r0, r4
 801a0de:	bf08      	it	eq
 801a0e0:	61a3      	streq	r3, [r4, #24]
 801a0e2:	f000 f81f 	bl	801a124 <__sfp>
 801a0e6:	6060      	str	r0, [r4, #4]
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f000 f81b 	bl	801a124 <__sfp>
 801a0ee:	60a0      	str	r0, [r4, #8]
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	f000 f817 	bl	801a124 <__sfp>
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	2104      	movs	r1, #4
 801a0fa:	60e0      	str	r0, [r4, #12]
 801a0fc:	6860      	ldr	r0, [r4, #4]
 801a0fe:	f7ff ff81 	bl	801a004 <std>
 801a102:	2201      	movs	r2, #1
 801a104:	2109      	movs	r1, #9
 801a106:	68a0      	ldr	r0, [r4, #8]
 801a108:	f7ff ff7c 	bl	801a004 <std>
 801a10c:	2202      	movs	r2, #2
 801a10e:	2112      	movs	r1, #18
 801a110:	68e0      	ldr	r0, [r4, #12]
 801a112:	f7ff ff77 	bl	801a004 <std>
 801a116:	2301      	movs	r3, #1
 801a118:	61a3      	str	r3, [r4, #24]
 801a11a:	e7d1      	b.n	801a0c0 <__sinit+0xc>
 801a11c:	0801cd9c 	.word	0x0801cd9c
 801a120:	0801a04d 	.word	0x0801a04d

0801a124 <__sfp>:
 801a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a126:	4607      	mov	r7, r0
 801a128:	f7ff ffac 	bl	801a084 <__sfp_lock_acquire>
 801a12c:	4b1e      	ldr	r3, [pc, #120]	; (801a1a8 <__sfp+0x84>)
 801a12e:	681e      	ldr	r6, [r3, #0]
 801a130:	69b3      	ldr	r3, [r6, #24]
 801a132:	b913      	cbnz	r3, 801a13a <__sfp+0x16>
 801a134:	4630      	mov	r0, r6
 801a136:	f7ff ffbd 	bl	801a0b4 <__sinit>
 801a13a:	3648      	adds	r6, #72	; 0x48
 801a13c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a140:	3b01      	subs	r3, #1
 801a142:	d503      	bpl.n	801a14c <__sfp+0x28>
 801a144:	6833      	ldr	r3, [r6, #0]
 801a146:	b30b      	cbz	r3, 801a18c <__sfp+0x68>
 801a148:	6836      	ldr	r6, [r6, #0]
 801a14a:	e7f7      	b.n	801a13c <__sfp+0x18>
 801a14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a150:	b9d5      	cbnz	r5, 801a188 <__sfp+0x64>
 801a152:	4b16      	ldr	r3, [pc, #88]	; (801a1ac <__sfp+0x88>)
 801a154:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a158:	60e3      	str	r3, [r4, #12]
 801a15a:	6665      	str	r5, [r4, #100]	; 0x64
 801a15c:	f000 f859 	bl	801a212 <__retarget_lock_init_recursive>
 801a160:	f7ff ff96 	bl	801a090 <__sfp_lock_release>
 801a164:	2208      	movs	r2, #8
 801a166:	4629      	mov	r1, r5
 801a168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a16c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a170:	6025      	str	r5, [r4, #0]
 801a172:	61a5      	str	r5, [r4, #24]
 801a174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a178:	f7ff fc60 	bl	8019a3c <memset>
 801a17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a184:	4620      	mov	r0, r4
 801a186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a188:	3468      	adds	r4, #104	; 0x68
 801a18a:	e7d9      	b.n	801a140 <__sfp+0x1c>
 801a18c:	2104      	movs	r1, #4
 801a18e:	4638      	mov	r0, r7
 801a190:	f7ff ff62 	bl	801a058 <__sfmoreglue>
 801a194:	4604      	mov	r4, r0
 801a196:	6030      	str	r0, [r6, #0]
 801a198:	2800      	cmp	r0, #0
 801a19a:	d1d5      	bne.n	801a148 <__sfp+0x24>
 801a19c:	f7ff ff78 	bl	801a090 <__sfp_lock_release>
 801a1a0:	230c      	movs	r3, #12
 801a1a2:	603b      	str	r3, [r7, #0]
 801a1a4:	e7ee      	b.n	801a184 <__sfp+0x60>
 801a1a6:	bf00      	nop
 801a1a8:	0801cd9c 	.word	0x0801cd9c
 801a1ac:	ffff0001 	.word	0xffff0001

0801a1b0 <fiprintf>:
 801a1b0:	b40e      	push	{r1, r2, r3}
 801a1b2:	b503      	push	{r0, r1, lr}
 801a1b4:	4601      	mov	r1, r0
 801a1b6:	ab03      	add	r3, sp, #12
 801a1b8:	4805      	ldr	r0, [pc, #20]	; (801a1d0 <fiprintf+0x20>)
 801a1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1be:	6800      	ldr	r0, [r0, #0]
 801a1c0:	9301      	str	r3, [sp, #4]
 801a1c2:	f000 f9df 	bl	801a584 <_vfiprintf_r>
 801a1c6:	b002      	add	sp, #8
 801a1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1cc:	b003      	add	sp, #12
 801a1ce:	4770      	bx	lr
 801a1d0:	20000324 	.word	0x20000324

0801a1d4 <_fwalk_reent>:
 801a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1d8:	4606      	mov	r6, r0
 801a1da:	4688      	mov	r8, r1
 801a1dc:	2700      	movs	r7, #0
 801a1de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a1e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a1e6:	f1b9 0901 	subs.w	r9, r9, #1
 801a1ea:	d505      	bpl.n	801a1f8 <_fwalk_reent+0x24>
 801a1ec:	6824      	ldr	r4, [r4, #0]
 801a1ee:	2c00      	cmp	r4, #0
 801a1f0:	d1f7      	bne.n	801a1e2 <_fwalk_reent+0xe>
 801a1f2:	4638      	mov	r0, r7
 801a1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1f8:	89ab      	ldrh	r3, [r5, #12]
 801a1fa:	2b01      	cmp	r3, #1
 801a1fc:	d907      	bls.n	801a20e <_fwalk_reent+0x3a>
 801a1fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a202:	3301      	adds	r3, #1
 801a204:	d003      	beq.n	801a20e <_fwalk_reent+0x3a>
 801a206:	4629      	mov	r1, r5
 801a208:	4630      	mov	r0, r6
 801a20a:	47c0      	blx	r8
 801a20c:	4307      	orrs	r7, r0
 801a20e:	3568      	adds	r5, #104	; 0x68
 801a210:	e7e9      	b.n	801a1e6 <_fwalk_reent+0x12>

0801a212 <__retarget_lock_init_recursive>:
 801a212:	4770      	bx	lr

0801a214 <__retarget_lock_acquire_recursive>:
 801a214:	4770      	bx	lr

0801a216 <__retarget_lock_release_recursive>:
 801a216:	4770      	bx	lr

0801a218 <__malloc_lock>:
 801a218:	4801      	ldr	r0, [pc, #4]	; (801a220 <__malloc_lock+0x8>)
 801a21a:	f7ff bffb 	b.w	801a214 <__retarget_lock_acquire_recursive>
 801a21e:	bf00      	nop
 801a220:	2000e4d4 	.word	0x2000e4d4

0801a224 <__malloc_unlock>:
 801a224:	4801      	ldr	r0, [pc, #4]	; (801a22c <__malloc_unlock+0x8>)
 801a226:	f7ff bff6 	b.w	801a216 <__retarget_lock_release_recursive>
 801a22a:	bf00      	nop
 801a22c:	2000e4d4 	.word	0x2000e4d4

0801a230 <_realloc_r>:
 801a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a232:	4607      	mov	r7, r0
 801a234:	4614      	mov	r4, r2
 801a236:	460e      	mov	r6, r1
 801a238:	b921      	cbnz	r1, 801a244 <_realloc_r+0x14>
 801a23a:	4611      	mov	r1, r2
 801a23c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a240:	f7ff bc5e 	b.w	8019b00 <_malloc_r>
 801a244:	b922      	cbnz	r2, 801a250 <_realloc_r+0x20>
 801a246:	f7ff fc0f 	bl	8019a68 <_free_r>
 801a24a:	4625      	mov	r5, r4
 801a24c:	4628      	mov	r0, r5
 801a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a250:	f000 fed2 	bl	801aff8 <_malloc_usable_size_r>
 801a254:	42a0      	cmp	r0, r4
 801a256:	d20f      	bcs.n	801a278 <_realloc_r+0x48>
 801a258:	4621      	mov	r1, r4
 801a25a:	4638      	mov	r0, r7
 801a25c:	f7ff fc50 	bl	8019b00 <_malloc_r>
 801a260:	4605      	mov	r5, r0
 801a262:	2800      	cmp	r0, #0
 801a264:	d0f2      	beq.n	801a24c <_realloc_r+0x1c>
 801a266:	4631      	mov	r1, r6
 801a268:	4622      	mov	r2, r4
 801a26a:	f7ff fbbf 	bl	80199ec <memcpy>
 801a26e:	4631      	mov	r1, r6
 801a270:	4638      	mov	r0, r7
 801a272:	f7ff fbf9 	bl	8019a68 <_free_r>
 801a276:	e7e9      	b.n	801a24c <_realloc_r+0x1c>
 801a278:	4635      	mov	r5, r6
 801a27a:	e7e7      	b.n	801a24c <_realloc_r+0x1c>

0801a27c <__ssputs_r>:
 801a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a280:	688e      	ldr	r6, [r1, #8]
 801a282:	4682      	mov	sl, r0
 801a284:	429e      	cmp	r6, r3
 801a286:	460c      	mov	r4, r1
 801a288:	4690      	mov	r8, r2
 801a28a:	461f      	mov	r7, r3
 801a28c:	d838      	bhi.n	801a300 <__ssputs_r+0x84>
 801a28e:	898a      	ldrh	r2, [r1, #12]
 801a290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a294:	d032      	beq.n	801a2fc <__ssputs_r+0x80>
 801a296:	6825      	ldr	r5, [r4, #0]
 801a298:	6909      	ldr	r1, [r1, #16]
 801a29a:	3301      	adds	r3, #1
 801a29c:	eba5 0901 	sub.w	r9, r5, r1
 801a2a0:	6965      	ldr	r5, [r4, #20]
 801a2a2:	444b      	add	r3, r9
 801a2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a2a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a2ac:	106d      	asrs	r5, r5, #1
 801a2ae:	429d      	cmp	r5, r3
 801a2b0:	bf38      	it	cc
 801a2b2:	461d      	movcc	r5, r3
 801a2b4:	0553      	lsls	r3, r2, #21
 801a2b6:	d531      	bpl.n	801a31c <__ssputs_r+0xa0>
 801a2b8:	4629      	mov	r1, r5
 801a2ba:	f7ff fc21 	bl	8019b00 <_malloc_r>
 801a2be:	4606      	mov	r6, r0
 801a2c0:	b950      	cbnz	r0, 801a2d8 <__ssputs_r+0x5c>
 801a2c2:	230c      	movs	r3, #12
 801a2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2c8:	f8ca 3000 	str.w	r3, [sl]
 801a2cc:	89a3      	ldrh	r3, [r4, #12]
 801a2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2d2:	81a3      	strh	r3, [r4, #12]
 801a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2d8:	464a      	mov	r2, r9
 801a2da:	6921      	ldr	r1, [r4, #16]
 801a2dc:	f7ff fb86 	bl	80199ec <memcpy>
 801a2e0:	89a3      	ldrh	r3, [r4, #12]
 801a2e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a2ea:	81a3      	strh	r3, [r4, #12]
 801a2ec:	6126      	str	r6, [r4, #16]
 801a2ee:	444e      	add	r6, r9
 801a2f0:	6026      	str	r6, [r4, #0]
 801a2f2:	463e      	mov	r6, r7
 801a2f4:	6165      	str	r5, [r4, #20]
 801a2f6:	eba5 0509 	sub.w	r5, r5, r9
 801a2fa:	60a5      	str	r5, [r4, #8]
 801a2fc:	42be      	cmp	r6, r7
 801a2fe:	d900      	bls.n	801a302 <__ssputs_r+0x86>
 801a300:	463e      	mov	r6, r7
 801a302:	4632      	mov	r2, r6
 801a304:	4641      	mov	r1, r8
 801a306:	6820      	ldr	r0, [r4, #0]
 801a308:	f7ff fb7e 	bl	8019a08 <memmove>
 801a30c:	68a3      	ldr	r3, [r4, #8]
 801a30e:	6822      	ldr	r2, [r4, #0]
 801a310:	1b9b      	subs	r3, r3, r6
 801a312:	4432      	add	r2, r6
 801a314:	2000      	movs	r0, #0
 801a316:	60a3      	str	r3, [r4, #8]
 801a318:	6022      	str	r2, [r4, #0]
 801a31a:	e7db      	b.n	801a2d4 <__ssputs_r+0x58>
 801a31c:	462a      	mov	r2, r5
 801a31e:	f7ff ff87 	bl	801a230 <_realloc_r>
 801a322:	4606      	mov	r6, r0
 801a324:	2800      	cmp	r0, #0
 801a326:	d1e1      	bne.n	801a2ec <__ssputs_r+0x70>
 801a328:	4650      	mov	r0, sl
 801a32a:	6921      	ldr	r1, [r4, #16]
 801a32c:	f7ff fb9c 	bl	8019a68 <_free_r>
 801a330:	e7c7      	b.n	801a2c2 <__ssputs_r+0x46>
	...

0801a334 <_svfiprintf_r>:
 801a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a338:	4698      	mov	r8, r3
 801a33a:	898b      	ldrh	r3, [r1, #12]
 801a33c:	4607      	mov	r7, r0
 801a33e:	061b      	lsls	r3, r3, #24
 801a340:	460d      	mov	r5, r1
 801a342:	4614      	mov	r4, r2
 801a344:	b09d      	sub	sp, #116	; 0x74
 801a346:	d50e      	bpl.n	801a366 <_svfiprintf_r+0x32>
 801a348:	690b      	ldr	r3, [r1, #16]
 801a34a:	b963      	cbnz	r3, 801a366 <_svfiprintf_r+0x32>
 801a34c:	2140      	movs	r1, #64	; 0x40
 801a34e:	f7ff fbd7 	bl	8019b00 <_malloc_r>
 801a352:	6028      	str	r0, [r5, #0]
 801a354:	6128      	str	r0, [r5, #16]
 801a356:	b920      	cbnz	r0, 801a362 <_svfiprintf_r+0x2e>
 801a358:	230c      	movs	r3, #12
 801a35a:	603b      	str	r3, [r7, #0]
 801a35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a360:	e0d1      	b.n	801a506 <_svfiprintf_r+0x1d2>
 801a362:	2340      	movs	r3, #64	; 0x40
 801a364:	616b      	str	r3, [r5, #20]
 801a366:	2300      	movs	r3, #0
 801a368:	9309      	str	r3, [sp, #36]	; 0x24
 801a36a:	2320      	movs	r3, #32
 801a36c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a370:	2330      	movs	r3, #48	; 0x30
 801a372:	f04f 0901 	mov.w	r9, #1
 801a376:	f8cd 800c 	str.w	r8, [sp, #12]
 801a37a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a520 <_svfiprintf_r+0x1ec>
 801a37e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a382:	4623      	mov	r3, r4
 801a384:	469a      	mov	sl, r3
 801a386:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a38a:	b10a      	cbz	r2, 801a390 <_svfiprintf_r+0x5c>
 801a38c:	2a25      	cmp	r2, #37	; 0x25
 801a38e:	d1f9      	bne.n	801a384 <_svfiprintf_r+0x50>
 801a390:	ebba 0b04 	subs.w	fp, sl, r4
 801a394:	d00b      	beq.n	801a3ae <_svfiprintf_r+0x7a>
 801a396:	465b      	mov	r3, fp
 801a398:	4622      	mov	r2, r4
 801a39a:	4629      	mov	r1, r5
 801a39c:	4638      	mov	r0, r7
 801a39e:	f7ff ff6d 	bl	801a27c <__ssputs_r>
 801a3a2:	3001      	adds	r0, #1
 801a3a4:	f000 80aa 	beq.w	801a4fc <_svfiprintf_r+0x1c8>
 801a3a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3aa:	445a      	add	r2, fp
 801a3ac:	9209      	str	r2, [sp, #36]	; 0x24
 801a3ae:	f89a 3000 	ldrb.w	r3, [sl]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f000 80a2 	beq.w	801a4fc <_svfiprintf_r+0x1c8>
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3c2:	f10a 0a01 	add.w	sl, sl, #1
 801a3c6:	9304      	str	r3, [sp, #16]
 801a3c8:	9307      	str	r3, [sp, #28]
 801a3ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a3ce:	931a      	str	r3, [sp, #104]	; 0x68
 801a3d0:	4654      	mov	r4, sl
 801a3d2:	2205      	movs	r2, #5
 801a3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d8:	4851      	ldr	r0, [pc, #324]	; (801a520 <_svfiprintf_r+0x1ec>)
 801a3da:	f000 fdff 	bl	801afdc <memchr>
 801a3de:	9a04      	ldr	r2, [sp, #16]
 801a3e0:	b9d8      	cbnz	r0, 801a41a <_svfiprintf_r+0xe6>
 801a3e2:	06d0      	lsls	r0, r2, #27
 801a3e4:	bf44      	itt	mi
 801a3e6:	2320      	movmi	r3, #32
 801a3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3ec:	0711      	lsls	r1, r2, #28
 801a3ee:	bf44      	itt	mi
 801a3f0:	232b      	movmi	r3, #43	; 0x2b
 801a3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3f6:	f89a 3000 	ldrb.w	r3, [sl]
 801a3fa:	2b2a      	cmp	r3, #42	; 0x2a
 801a3fc:	d015      	beq.n	801a42a <_svfiprintf_r+0xf6>
 801a3fe:	4654      	mov	r4, sl
 801a400:	2000      	movs	r0, #0
 801a402:	f04f 0c0a 	mov.w	ip, #10
 801a406:	9a07      	ldr	r2, [sp, #28]
 801a408:	4621      	mov	r1, r4
 801a40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a40e:	3b30      	subs	r3, #48	; 0x30
 801a410:	2b09      	cmp	r3, #9
 801a412:	d94e      	bls.n	801a4b2 <_svfiprintf_r+0x17e>
 801a414:	b1b0      	cbz	r0, 801a444 <_svfiprintf_r+0x110>
 801a416:	9207      	str	r2, [sp, #28]
 801a418:	e014      	b.n	801a444 <_svfiprintf_r+0x110>
 801a41a:	eba0 0308 	sub.w	r3, r0, r8
 801a41e:	fa09 f303 	lsl.w	r3, r9, r3
 801a422:	4313      	orrs	r3, r2
 801a424:	46a2      	mov	sl, r4
 801a426:	9304      	str	r3, [sp, #16]
 801a428:	e7d2      	b.n	801a3d0 <_svfiprintf_r+0x9c>
 801a42a:	9b03      	ldr	r3, [sp, #12]
 801a42c:	1d19      	adds	r1, r3, #4
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	9103      	str	r1, [sp, #12]
 801a432:	2b00      	cmp	r3, #0
 801a434:	bfbb      	ittet	lt
 801a436:	425b      	neglt	r3, r3
 801a438:	f042 0202 	orrlt.w	r2, r2, #2
 801a43c:	9307      	strge	r3, [sp, #28]
 801a43e:	9307      	strlt	r3, [sp, #28]
 801a440:	bfb8      	it	lt
 801a442:	9204      	strlt	r2, [sp, #16]
 801a444:	7823      	ldrb	r3, [r4, #0]
 801a446:	2b2e      	cmp	r3, #46	; 0x2e
 801a448:	d10c      	bne.n	801a464 <_svfiprintf_r+0x130>
 801a44a:	7863      	ldrb	r3, [r4, #1]
 801a44c:	2b2a      	cmp	r3, #42	; 0x2a
 801a44e:	d135      	bne.n	801a4bc <_svfiprintf_r+0x188>
 801a450:	9b03      	ldr	r3, [sp, #12]
 801a452:	3402      	adds	r4, #2
 801a454:	1d1a      	adds	r2, r3, #4
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	9203      	str	r2, [sp, #12]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	bfb8      	it	lt
 801a45e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a462:	9305      	str	r3, [sp, #20]
 801a464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a530 <_svfiprintf_r+0x1fc>
 801a468:	2203      	movs	r2, #3
 801a46a:	4650      	mov	r0, sl
 801a46c:	7821      	ldrb	r1, [r4, #0]
 801a46e:	f000 fdb5 	bl	801afdc <memchr>
 801a472:	b140      	cbz	r0, 801a486 <_svfiprintf_r+0x152>
 801a474:	2340      	movs	r3, #64	; 0x40
 801a476:	eba0 000a 	sub.w	r0, r0, sl
 801a47a:	fa03 f000 	lsl.w	r0, r3, r0
 801a47e:	9b04      	ldr	r3, [sp, #16]
 801a480:	3401      	adds	r4, #1
 801a482:	4303      	orrs	r3, r0
 801a484:	9304      	str	r3, [sp, #16]
 801a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a48a:	2206      	movs	r2, #6
 801a48c:	4825      	ldr	r0, [pc, #148]	; (801a524 <_svfiprintf_r+0x1f0>)
 801a48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a492:	f000 fda3 	bl	801afdc <memchr>
 801a496:	2800      	cmp	r0, #0
 801a498:	d038      	beq.n	801a50c <_svfiprintf_r+0x1d8>
 801a49a:	4b23      	ldr	r3, [pc, #140]	; (801a528 <_svfiprintf_r+0x1f4>)
 801a49c:	bb1b      	cbnz	r3, 801a4e6 <_svfiprintf_r+0x1b2>
 801a49e:	9b03      	ldr	r3, [sp, #12]
 801a4a0:	3307      	adds	r3, #7
 801a4a2:	f023 0307 	bic.w	r3, r3, #7
 801a4a6:	3308      	adds	r3, #8
 801a4a8:	9303      	str	r3, [sp, #12]
 801a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4ac:	4433      	add	r3, r6
 801a4ae:	9309      	str	r3, [sp, #36]	; 0x24
 801a4b0:	e767      	b.n	801a382 <_svfiprintf_r+0x4e>
 801a4b2:	460c      	mov	r4, r1
 801a4b4:	2001      	movs	r0, #1
 801a4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4ba:	e7a5      	b.n	801a408 <_svfiprintf_r+0xd4>
 801a4bc:	2300      	movs	r3, #0
 801a4be:	f04f 0c0a 	mov.w	ip, #10
 801a4c2:	4619      	mov	r1, r3
 801a4c4:	3401      	adds	r4, #1
 801a4c6:	9305      	str	r3, [sp, #20]
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4ce:	3a30      	subs	r2, #48	; 0x30
 801a4d0:	2a09      	cmp	r2, #9
 801a4d2:	d903      	bls.n	801a4dc <_svfiprintf_r+0x1a8>
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d0c5      	beq.n	801a464 <_svfiprintf_r+0x130>
 801a4d8:	9105      	str	r1, [sp, #20]
 801a4da:	e7c3      	b.n	801a464 <_svfiprintf_r+0x130>
 801a4dc:	4604      	mov	r4, r0
 801a4de:	2301      	movs	r3, #1
 801a4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4e4:	e7f0      	b.n	801a4c8 <_svfiprintf_r+0x194>
 801a4e6:	ab03      	add	r3, sp, #12
 801a4e8:	9300      	str	r3, [sp, #0]
 801a4ea:	462a      	mov	r2, r5
 801a4ec:	4638      	mov	r0, r7
 801a4ee:	4b0f      	ldr	r3, [pc, #60]	; (801a52c <_svfiprintf_r+0x1f8>)
 801a4f0:	a904      	add	r1, sp, #16
 801a4f2:	f3af 8000 	nop.w
 801a4f6:	1c42      	adds	r2, r0, #1
 801a4f8:	4606      	mov	r6, r0
 801a4fa:	d1d6      	bne.n	801a4aa <_svfiprintf_r+0x176>
 801a4fc:	89ab      	ldrh	r3, [r5, #12]
 801a4fe:	065b      	lsls	r3, r3, #25
 801a500:	f53f af2c 	bmi.w	801a35c <_svfiprintf_r+0x28>
 801a504:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a506:	b01d      	add	sp, #116	; 0x74
 801a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a50c:	ab03      	add	r3, sp, #12
 801a50e:	9300      	str	r3, [sp, #0]
 801a510:	462a      	mov	r2, r5
 801a512:	4638      	mov	r0, r7
 801a514:	4b05      	ldr	r3, [pc, #20]	; (801a52c <_svfiprintf_r+0x1f8>)
 801a516:	a904      	add	r1, sp, #16
 801a518:	f000 f9d4 	bl	801a8c4 <_printf_i>
 801a51c:	e7eb      	b.n	801a4f6 <_svfiprintf_r+0x1c2>
 801a51e:	bf00      	nop
 801a520:	0801ceb4 	.word	0x0801ceb4
 801a524:	0801cebe 	.word	0x0801cebe
 801a528:	00000000 	.word	0x00000000
 801a52c:	0801a27d 	.word	0x0801a27d
 801a530:	0801ceba 	.word	0x0801ceba

0801a534 <__sfputc_r>:
 801a534:	6893      	ldr	r3, [r2, #8]
 801a536:	b410      	push	{r4}
 801a538:	3b01      	subs	r3, #1
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	6093      	str	r3, [r2, #8]
 801a53e:	da07      	bge.n	801a550 <__sfputc_r+0x1c>
 801a540:	6994      	ldr	r4, [r2, #24]
 801a542:	42a3      	cmp	r3, r4
 801a544:	db01      	blt.n	801a54a <__sfputc_r+0x16>
 801a546:	290a      	cmp	r1, #10
 801a548:	d102      	bne.n	801a550 <__sfputc_r+0x1c>
 801a54a:	bc10      	pop	{r4}
 801a54c:	f000 bb24 	b.w	801ab98 <__swbuf_r>
 801a550:	6813      	ldr	r3, [r2, #0]
 801a552:	1c58      	adds	r0, r3, #1
 801a554:	6010      	str	r0, [r2, #0]
 801a556:	7019      	strb	r1, [r3, #0]
 801a558:	4608      	mov	r0, r1
 801a55a:	bc10      	pop	{r4}
 801a55c:	4770      	bx	lr

0801a55e <__sfputs_r>:
 801a55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a560:	4606      	mov	r6, r0
 801a562:	460f      	mov	r7, r1
 801a564:	4614      	mov	r4, r2
 801a566:	18d5      	adds	r5, r2, r3
 801a568:	42ac      	cmp	r4, r5
 801a56a:	d101      	bne.n	801a570 <__sfputs_r+0x12>
 801a56c:	2000      	movs	r0, #0
 801a56e:	e007      	b.n	801a580 <__sfputs_r+0x22>
 801a570:	463a      	mov	r2, r7
 801a572:	4630      	mov	r0, r6
 801a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a578:	f7ff ffdc 	bl	801a534 <__sfputc_r>
 801a57c:	1c43      	adds	r3, r0, #1
 801a57e:	d1f3      	bne.n	801a568 <__sfputs_r+0xa>
 801a580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a584 <_vfiprintf_r>:
 801a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a588:	460d      	mov	r5, r1
 801a58a:	4614      	mov	r4, r2
 801a58c:	4698      	mov	r8, r3
 801a58e:	4606      	mov	r6, r0
 801a590:	b09d      	sub	sp, #116	; 0x74
 801a592:	b118      	cbz	r0, 801a59c <_vfiprintf_r+0x18>
 801a594:	6983      	ldr	r3, [r0, #24]
 801a596:	b90b      	cbnz	r3, 801a59c <_vfiprintf_r+0x18>
 801a598:	f7ff fd8c 	bl	801a0b4 <__sinit>
 801a59c:	4b89      	ldr	r3, [pc, #548]	; (801a7c4 <_vfiprintf_r+0x240>)
 801a59e:	429d      	cmp	r5, r3
 801a5a0:	d11b      	bne.n	801a5da <_vfiprintf_r+0x56>
 801a5a2:	6875      	ldr	r5, [r6, #4]
 801a5a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5a6:	07d9      	lsls	r1, r3, #31
 801a5a8:	d405      	bmi.n	801a5b6 <_vfiprintf_r+0x32>
 801a5aa:	89ab      	ldrh	r3, [r5, #12]
 801a5ac:	059a      	lsls	r2, r3, #22
 801a5ae:	d402      	bmi.n	801a5b6 <_vfiprintf_r+0x32>
 801a5b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5b2:	f7ff fe2f 	bl	801a214 <__retarget_lock_acquire_recursive>
 801a5b6:	89ab      	ldrh	r3, [r5, #12]
 801a5b8:	071b      	lsls	r3, r3, #28
 801a5ba:	d501      	bpl.n	801a5c0 <_vfiprintf_r+0x3c>
 801a5bc:	692b      	ldr	r3, [r5, #16]
 801a5be:	b9eb      	cbnz	r3, 801a5fc <_vfiprintf_r+0x78>
 801a5c0:	4629      	mov	r1, r5
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f000 fb4c 	bl	801ac60 <__swsetup_r>
 801a5c8:	b1c0      	cbz	r0, 801a5fc <_vfiprintf_r+0x78>
 801a5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5cc:	07dc      	lsls	r4, r3, #31
 801a5ce:	d50e      	bpl.n	801a5ee <_vfiprintf_r+0x6a>
 801a5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a5d4:	b01d      	add	sp, #116	; 0x74
 801a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5da:	4b7b      	ldr	r3, [pc, #492]	; (801a7c8 <_vfiprintf_r+0x244>)
 801a5dc:	429d      	cmp	r5, r3
 801a5de:	d101      	bne.n	801a5e4 <_vfiprintf_r+0x60>
 801a5e0:	68b5      	ldr	r5, [r6, #8]
 801a5e2:	e7df      	b.n	801a5a4 <_vfiprintf_r+0x20>
 801a5e4:	4b79      	ldr	r3, [pc, #484]	; (801a7cc <_vfiprintf_r+0x248>)
 801a5e6:	429d      	cmp	r5, r3
 801a5e8:	bf08      	it	eq
 801a5ea:	68f5      	ldreq	r5, [r6, #12]
 801a5ec:	e7da      	b.n	801a5a4 <_vfiprintf_r+0x20>
 801a5ee:	89ab      	ldrh	r3, [r5, #12]
 801a5f0:	0598      	lsls	r0, r3, #22
 801a5f2:	d4ed      	bmi.n	801a5d0 <_vfiprintf_r+0x4c>
 801a5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5f6:	f7ff fe0e 	bl	801a216 <__retarget_lock_release_recursive>
 801a5fa:	e7e9      	b.n	801a5d0 <_vfiprintf_r+0x4c>
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801a600:	2320      	movs	r3, #32
 801a602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a606:	2330      	movs	r3, #48	; 0x30
 801a608:	f04f 0901 	mov.w	r9, #1
 801a60c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a610:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801a7d0 <_vfiprintf_r+0x24c>
 801a614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a618:	4623      	mov	r3, r4
 801a61a:	469a      	mov	sl, r3
 801a61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a620:	b10a      	cbz	r2, 801a626 <_vfiprintf_r+0xa2>
 801a622:	2a25      	cmp	r2, #37	; 0x25
 801a624:	d1f9      	bne.n	801a61a <_vfiprintf_r+0x96>
 801a626:	ebba 0b04 	subs.w	fp, sl, r4
 801a62a:	d00b      	beq.n	801a644 <_vfiprintf_r+0xc0>
 801a62c:	465b      	mov	r3, fp
 801a62e:	4622      	mov	r2, r4
 801a630:	4629      	mov	r1, r5
 801a632:	4630      	mov	r0, r6
 801a634:	f7ff ff93 	bl	801a55e <__sfputs_r>
 801a638:	3001      	adds	r0, #1
 801a63a:	f000 80aa 	beq.w	801a792 <_vfiprintf_r+0x20e>
 801a63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a640:	445a      	add	r2, fp
 801a642:	9209      	str	r2, [sp, #36]	; 0x24
 801a644:	f89a 3000 	ldrb.w	r3, [sl]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	f000 80a2 	beq.w	801a792 <_vfiprintf_r+0x20e>
 801a64e:	2300      	movs	r3, #0
 801a650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a658:	f10a 0a01 	add.w	sl, sl, #1
 801a65c:	9304      	str	r3, [sp, #16]
 801a65e:	9307      	str	r3, [sp, #28]
 801a660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a664:	931a      	str	r3, [sp, #104]	; 0x68
 801a666:	4654      	mov	r4, sl
 801a668:	2205      	movs	r2, #5
 801a66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a66e:	4858      	ldr	r0, [pc, #352]	; (801a7d0 <_vfiprintf_r+0x24c>)
 801a670:	f000 fcb4 	bl	801afdc <memchr>
 801a674:	9a04      	ldr	r2, [sp, #16]
 801a676:	b9d8      	cbnz	r0, 801a6b0 <_vfiprintf_r+0x12c>
 801a678:	06d1      	lsls	r1, r2, #27
 801a67a:	bf44      	itt	mi
 801a67c:	2320      	movmi	r3, #32
 801a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a682:	0713      	lsls	r3, r2, #28
 801a684:	bf44      	itt	mi
 801a686:	232b      	movmi	r3, #43	; 0x2b
 801a688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a68c:	f89a 3000 	ldrb.w	r3, [sl]
 801a690:	2b2a      	cmp	r3, #42	; 0x2a
 801a692:	d015      	beq.n	801a6c0 <_vfiprintf_r+0x13c>
 801a694:	4654      	mov	r4, sl
 801a696:	2000      	movs	r0, #0
 801a698:	f04f 0c0a 	mov.w	ip, #10
 801a69c:	9a07      	ldr	r2, [sp, #28]
 801a69e:	4621      	mov	r1, r4
 801a6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6a4:	3b30      	subs	r3, #48	; 0x30
 801a6a6:	2b09      	cmp	r3, #9
 801a6a8:	d94e      	bls.n	801a748 <_vfiprintf_r+0x1c4>
 801a6aa:	b1b0      	cbz	r0, 801a6da <_vfiprintf_r+0x156>
 801a6ac:	9207      	str	r2, [sp, #28]
 801a6ae:	e014      	b.n	801a6da <_vfiprintf_r+0x156>
 801a6b0:	eba0 0308 	sub.w	r3, r0, r8
 801a6b4:	fa09 f303 	lsl.w	r3, r9, r3
 801a6b8:	4313      	orrs	r3, r2
 801a6ba:	46a2      	mov	sl, r4
 801a6bc:	9304      	str	r3, [sp, #16]
 801a6be:	e7d2      	b.n	801a666 <_vfiprintf_r+0xe2>
 801a6c0:	9b03      	ldr	r3, [sp, #12]
 801a6c2:	1d19      	adds	r1, r3, #4
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	9103      	str	r1, [sp, #12]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	bfbb      	ittet	lt
 801a6cc:	425b      	neglt	r3, r3
 801a6ce:	f042 0202 	orrlt.w	r2, r2, #2
 801a6d2:	9307      	strge	r3, [sp, #28]
 801a6d4:	9307      	strlt	r3, [sp, #28]
 801a6d6:	bfb8      	it	lt
 801a6d8:	9204      	strlt	r2, [sp, #16]
 801a6da:	7823      	ldrb	r3, [r4, #0]
 801a6dc:	2b2e      	cmp	r3, #46	; 0x2e
 801a6de:	d10c      	bne.n	801a6fa <_vfiprintf_r+0x176>
 801a6e0:	7863      	ldrb	r3, [r4, #1]
 801a6e2:	2b2a      	cmp	r3, #42	; 0x2a
 801a6e4:	d135      	bne.n	801a752 <_vfiprintf_r+0x1ce>
 801a6e6:	9b03      	ldr	r3, [sp, #12]
 801a6e8:	3402      	adds	r4, #2
 801a6ea:	1d1a      	adds	r2, r3, #4
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	9203      	str	r2, [sp, #12]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	bfb8      	it	lt
 801a6f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a6f8:	9305      	str	r3, [sp, #20]
 801a6fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a7e0 <_vfiprintf_r+0x25c>
 801a6fe:	2203      	movs	r2, #3
 801a700:	4650      	mov	r0, sl
 801a702:	7821      	ldrb	r1, [r4, #0]
 801a704:	f000 fc6a 	bl	801afdc <memchr>
 801a708:	b140      	cbz	r0, 801a71c <_vfiprintf_r+0x198>
 801a70a:	2340      	movs	r3, #64	; 0x40
 801a70c:	eba0 000a 	sub.w	r0, r0, sl
 801a710:	fa03 f000 	lsl.w	r0, r3, r0
 801a714:	9b04      	ldr	r3, [sp, #16]
 801a716:	3401      	adds	r4, #1
 801a718:	4303      	orrs	r3, r0
 801a71a:	9304      	str	r3, [sp, #16]
 801a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a720:	2206      	movs	r2, #6
 801a722:	482c      	ldr	r0, [pc, #176]	; (801a7d4 <_vfiprintf_r+0x250>)
 801a724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a728:	f000 fc58 	bl	801afdc <memchr>
 801a72c:	2800      	cmp	r0, #0
 801a72e:	d03f      	beq.n	801a7b0 <_vfiprintf_r+0x22c>
 801a730:	4b29      	ldr	r3, [pc, #164]	; (801a7d8 <_vfiprintf_r+0x254>)
 801a732:	bb1b      	cbnz	r3, 801a77c <_vfiprintf_r+0x1f8>
 801a734:	9b03      	ldr	r3, [sp, #12]
 801a736:	3307      	adds	r3, #7
 801a738:	f023 0307 	bic.w	r3, r3, #7
 801a73c:	3308      	adds	r3, #8
 801a73e:	9303      	str	r3, [sp, #12]
 801a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a742:	443b      	add	r3, r7
 801a744:	9309      	str	r3, [sp, #36]	; 0x24
 801a746:	e767      	b.n	801a618 <_vfiprintf_r+0x94>
 801a748:	460c      	mov	r4, r1
 801a74a:	2001      	movs	r0, #1
 801a74c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a750:	e7a5      	b.n	801a69e <_vfiprintf_r+0x11a>
 801a752:	2300      	movs	r3, #0
 801a754:	f04f 0c0a 	mov.w	ip, #10
 801a758:	4619      	mov	r1, r3
 801a75a:	3401      	adds	r4, #1
 801a75c:	9305      	str	r3, [sp, #20]
 801a75e:	4620      	mov	r0, r4
 801a760:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a764:	3a30      	subs	r2, #48	; 0x30
 801a766:	2a09      	cmp	r2, #9
 801a768:	d903      	bls.n	801a772 <_vfiprintf_r+0x1ee>
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d0c5      	beq.n	801a6fa <_vfiprintf_r+0x176>
 801a76e:	9105      	str	r1, [sp, #20]
 801a770:	e7c3      	b.n	801a6fa <_vfiprintf_r+0x176>
 801a772:	4604      	mov	r4, r0
 801a774:	2301      	movs	r3, #1
 801a776:	fb0c 2101 	mla	r1, ip, r1, r2
 801a77a:	e7f0      	b.n	801a75e <_vfiprintf_r+0x1da>
 801a77c:	ab03      	add	r3, sp, #12
 801a77e:	9300      	str	r3, [sp, #0]
 801a780:	462a      	mov	r2, r5
 801a782:	4630      	mov	r0, r6
 801a784:	4b15      	ldr	r3, [pc, #84]	; (801a7dc <_vfiprintf_r+0x258>)
 801a786:	a904      	add	r1, sp, #16
 801a788:	f3af 8000 	nop.w
 801a78c:	4607      	mov	r7, r0
 801a78e:	1c78      	adds	r0, r7, #1
 801a790:	d1d6      	bne.n	801a740 <_vfiprintf_r+0x1bc>
 801a792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a794:	07d9      	lsls	r1, r3, #31
 801a796:	d405      	bmi.n	801a7a4 <_vfiprintf_r+0x220>
 801a798:	89ab      	ldrh	r3, [r5, #12]
 801a79a:	059a      	lsls	r2, r3, #22
 801a79c:	d402      	bmi.n	801a7a4 <_vfiprintf_r+0x220>
 801a79e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7a0:	f7ff fd39 	bl	801a216 <__retarget_lock_release_recursive>
 801a7a4:	89ab      	ldrh	r3, [r5, #12]
 801a7a6:	065b      	lsls	r3, r3, #25
 801a7a8:	f53f af12 	bmi.w	801a5d0 <_vfiprintf_r+0x4c>
 801a7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7ae:	e711      	b.n	801a5d4 <_vfiprintf_r+0x50>
 801a7b0:	ab03      	add	r3, sp, #12
 801a7b2:	9300      	str	r3, [sp, #0]
 801a7b4:	462a      	mov	r2, r5
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	4b08      	ldr	r3, [pc, #32]	; (801a7dc <_vfiprintf_r+0x258>)
 801a7ba:	a904      	add	r1, sp, #16
 801a7bc:	f000 f882 	bl	801a8c4 <_printf_i>
 801a7c0:	e7e4      	b.n	801a78c <_vfiprintf_r+0x208>
 801a7c2:	bf00      	nop
 801a7c4:	0801ce74 	.word	0x0801ce74
 801a7c8:	0801ce94 	.word	0x0801ce94
 801a7cc:	0801ce54 	.word	0x0801ce54
 801a7d0:	0801ceb4 	.word	0x0801ceb4
 801a7d4:	0801cebe 	.word	0x0801cebe
 801a7d8:	00000000 	.word	0x00000000
 801a7dc:	0801a55f 	.word	0x0801a55f
 801a7e0:	0801ceba 	.word	0x0801ceba

0801a7e4 <_printf_common>:
 801a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7e8:	4616      	mov	r6, r2
 801a7ea:	4699      	mov	r9, r3
 801a7ec:	688a      	ldr	r2, [r1, #8]
 801a7ee:	690b      	ldr	r3, [r1, #16]
 801a7f0:	4607      	mov	r7, r0
 801a7f2:	4293      	cmp	r3, r2
 801a7f4:	bfb8      	it	lt
 801a7f6:	4613      	movlt	r3, r2
 801a7f8:	6033      	str	r3, [r6, #0]
 801a7fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a7fe:	460c      	mov	r4, r1
 801a800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a804:	b10a      	cbz	r2, 801a80a <_printf_common+0x26>
 801a806:	3301      	adds	r3, #1
 801a808:	6033      	str	r3, [r6, #0]
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	0699      	lsls	r1, r3, #26
 801a80e:	bf42      	ittt	mi
 801a810:	6833      	ldrmi	r3, [r6, #0]
 801a812:	3302      	addmi	r3, #2
 801a814:	6033      	strmi	r3, [r6, #0]
 801a816:	6825      	ldr	r5, [r4, #0]
 801a818:	f015 0506 	ands.w	r5, r5, #6
 801a81c:	d106      	bne.n	801a82c <_printf_common+0x48>
 801a81e:	f104 0a19 	add.w	sl, r4, #25
 801a822:	68e3      	ldr	r3, [r4, #12]
 801a824:	6832      	ldr	r2, [r6, #0]
 801a826:	1a9b      	subs	r3, r3, r2
 801a828:	42ab      	cmp	r3, r5
 801a82a:	dc28      	bgt.n	801a87e <_printf_common+0x9a>
 801a82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a830:	1e13      	subs	r3, r2, #0
 801a832:	6822      	ldr	r2, [r4, #0]
 801a834:	bf18      	it	ne
 801a836:	2301      	movne	r3, #1
 801a838:	0692      	lsls	r2, r2, #26
 801a83a:	d42d      	bmi.n	801a898 <_printf_common+0xb4>
 801a83c:	4649      	mov	r1, r9
 801a83e:	4638      	mov	r0, r7
 801a840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a844:	47c0      	blx	r8
 801a846:	3001      	adds	r0, #1
 801a848:	d020      	beq.n	801a88c <_printf_common+0xa8>
 801a84a:	6823      	ldr	r3, [r4, #0]
 801a84c:	68e5      	ldr	r5, [r4, #12]
 801a84e:	f003 0306 	and.w	r3, r3, #6
 801a852:	2b04      	cmp	r3, #4
 801a854:	bf18      	it	ne
 801a856:	2500      	movne	r5, #0
 801a858:	6832      	ldr	r2, [r6, #0]
 801a85a:	f04f 0600 	mov.w	r6, #0
 801a85e:	68a3      	ldr	r3, [r4, #8]
 801a860:	bf08      	it	eq
 801a862:	1aad      	subeq	r5, r5, r2
 801a864:	6922      	ldr	r2, [r4, #16]
 801a866:	bf08      	it	eq
 801a868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a86c:	4293      	cmp	r3, r2
 801a86e:	bfc4      	itt	gt
 801a870:	1a9b      	subgt	r3, r3, r2
 801a872:	18ed      	addgt	r5, r5, r3
 801a874:	341a      	adds	r4, #26
 801a876:	42b5      	cmp	r5, r6
 801a878:	d11a      	bne.n	801a8b0 <_printf_common+0xcc>
 801a87a:	2000      	movs	r0, #0
 801a87c:	e008      	b.n	801a890 <_printf_common+0xac>
 801a87e:	2301      	movs	r3, #1
 801a880:	4652      	mov	r2, sl
 801a882:	4649      	mov	r1, r9
 801a884:	4638      	mov	r0, r7
 801a886:	47c0      	blx	r8
 801a888:	3001      	adds	r0, #1
 801a88a:	d103      	bne.n	801a894 <_printf_common+0xb0>
 801a88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a894:	3501      	adds	r5, #1
 801a896:	e7c4      	b.n	801a822 <_printf_common+0x3e>
 801a898:	2030      	movs	r0, #48	; 0x30
 801a89a:	18e1      	adds	r1, r4, r3
 801a89c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a8a0:	1c5a      	adds	r2, r3, #1
 801a8a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a8a6:	4422      	add	r2, r4
 801a8a8:	3302      	adds	r3, #2
 801a8aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a8ae:	e7c5      	b.n	801a83c <_printf_common+0x58>
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	4622      	mov	r2, r4
 801a8b4:	4649      	mov	r1, r9
 801a8b6:	4638      	mov	r0, r7
 801a8b8:	47c0      	blx	r8
 801a8ba:	3001      	adds	r0, #1
 801a8bc:	d0e6      	beq.n	801a88c <_printf_common+0xa8>
 801a8be:	3601      	adds	r6, #1
 801a8c0:	e7d9      	b.n	801a876 <_printf_common+0x92>
	...

0801a8c4 <_printf_i>:
 801a8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8c8:	460c      	mov	r4, r1
 801a8ca:	7e27      	ldrb	r7, [r4, #24]
 801a8cc:	4691      	mov	r9, r2
 801a8ce:	2f78      	cmp	r7, #120	; 0x78
 801a8d0:	4680      	mov	r8, r0
 801a8d2:	469a      	mov	sl, r3
 801a8d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a8d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a8da:	d807      	bhi.n	801a8ec <_printf_i+0x28>
 801a8dc:	2f62      	cmp	r7, #98	; 0x62
 801a8de:	d80a      	bhi.n	801a8f6 <_printf_i+0x32>
 801a8e0:	2f00      	cmp	r7, #0
 801a8e2:	f000 80d9 	beq.w	801aa98 <_printf_i+0x1d4>
 801a8e6:	2f58      	cmp	r7, #88	; 0x58
 801a8e8:	f000 80a4 	beq.w	801aa34 <_printf_i+0x170>
 801a8ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a8f4:	e03a      	b.n	801a96c <_printf_i+0xa8>
 801a8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a8fa:	2b15      	cmp	r3, #21
 801a8fc:	d8f6      	bhi.n	801a8ec <_printf_i+0x28>
 801a8fe:	a001      	add	r0, pc, #4	; (adr r0, 801a904 <_printf_i+0x40>)
 801a900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a904:	0801a95d 	.word	0x0801a95d
 801a908:	0801a971 	.word	0x0801a971
 801a90c:	0801a8ed 	.word	0x0801a8ed
 801a910:	0801a8ed 	.word	0x0801a8ed
 801a914:	0801a8ed 	.word	0x0801a8ed
 801a918:	0801a8ed 	.word	0x0801a8ed
 801a91c:	0801a971 	.word	0x0801a971
 801a920:	0801a8ed 	.word	0x0801a8ed
 801a924:	0801a8ed 	.word	0x0801a8ed
 801a928:	0801a8ed 	.word	0x0801a8ed
 801a92c:	0801a8ed 	.word	0x0801a8ed
 801a930:	0801aa7f 	.word	0x0801aa7f
 801a934:	0801a9a1 	.word	0x0801a9a1
 801a938:	0801aa61 	.word	0x0801aa61
 801a93c:	0801a8ed 	.word	0x0801a8ed
 801a940:	0801a8ed 	.word	0x0801a8ed
 801a944:	0801aaa1 	.word	0x0801aaa1
 801a948:	0801a8ed 	.word	0x0801a8ed
 801a94c:	0801a9a1 	.word	0x0801a9a1
 801a950:	0801a8ed 	.word	0x0801a8ed
 801a954:	0801a8ed 	.word	0x0801a8ed
 801a958:	0801aa69 	.word	0x0801aa69
 801a95c:	680b      	ldr	r3, [r1, #0]
 801a95e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a962:	1d1a      	adds	r2, r3, #4
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	600a      	str	r2, [r1, #0]
 801a968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a96c:	2301      	movs	r3, #1
 801a96e:	e0a4      	b.n	801aaba <_printf_i+0x1f6>
 801a970:	6825      	ldr	r5, [r4, #0]
 801a972:	6808      	ldr	r0, [r1, #0]
 801a974:	062e      	lsls	r6, r5, #24
 801a976:	f100 0304 	add.w	r3, r0, #4
 801a97a:	d50a      	bpl.n	801a992 <_printf_i+0xce>
 801a97c:	6805      	ldr	r5, [r0, #0]
 801a97e:	600b      	str	r3, [r1, #0]
 801a980:	2d00      	cmp	r5, #0
 801a982:	da03      	bge.n	801a98c <_printf_i+0xc8>
 801a984:	232d      	movs	r3, #45	; 0x2d
 801a986:	426d      	negs	r5, r5
 801a988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a98c:	230a      	movs	r3, #10
 801a98e:	485e      	ldr	r0, [pc, #376]	; (801ab08 <_printf_i+0x244>)
 801a990:	e019      	b.n	801a9c6 <_printf_i+0x102>
 801a992:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a996:	6805      	ldr	r5, [r0, #0]
 801a998:	600b      	str	r3, [r1, #0]
 801a99a:	bf18      	it	ne
 801a99c:	b22d      	sxthne	r5, r5
 801a99e:	e7ef      	b.n	801a980 <_printf_i+0xbc>
 801a9a0:	680b      	ldr	r3, [r1, #0]
 801a9a2:	6825      	ldr	r5, [r4, #0]
 801a9a4:	1d18      	adds	r0, r3, #4
 801a9a6:	6008      	str	r0, [r1, #0]
 801a9a8:	0628      	lsls	r0, r5, #24
 801a9aa:	d501      	bpl.n	801a9b0 <_printf_i+0xec>
 801a9ac:	681d      	ldr	r5, [r3, #0]
 801a9ae:	e002      	b.n	801a9b6 <_printf_i+0xf2>
 801a9b0:	0669      	lsls	r1, r5, #25
 801a9b2:	d5fb      	bpl.n	801a9ac <_printf_i+0xe8>
 801a9b4:	881d      	ldrh	r5, [r3, #0]
 801a9b6:	2f6f      	cmp	r7, #111	; 0x6f
 801a9b8:	bf0c      	ite	eq
 801a9ba:	2308      	moveq	r3, #8
 801a9bc:	230a      	movne	r3, #10
 801a9be:	4852      	ldr	r0, [pc, #328]	; (801ab08 <_printf_i+0x244>)
 801a9c0:	2100      	movs	r1, #0
 801a9c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a9c6:	6866      	ldr	r6, [r4, #4]
 801a9c8:	2e00      	cmp	r6, #0
 801a9ca:	bfa8      	it	ge
 801a9cc:	6821      	ldrge	r1, [r4, #0]
 801a9ce:	60a6      	str	r6, [r4, #8]
 801a9d0:	bfa4      	itt	ge
 801a9d2:	f021 0104 	bicge.w	r1, r1, #4
 801a9d6:	6021      	strge	r1, [r4, #0]
 801a9d8:	b90d      	cbnz	r5, 801a9de <_printf_i+0x11a>
 801a9da:	2e00      	cmp	r6, #0
 801a9dc:	d04d      	beq.n	801aa7a <_printf_i+0x1b6>
 801a9de:	4616      	mov	r6, r2
 801a9e0:	fbb5 f1f3 	udiv	r1, r5, r3
 801a9e4:	fb03 5711 	mls	r7, r3, r1, r5
 801a9e8:	5dc7      	ldrb	r7, [r0, r7]
 801a9ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a9ee:	462f      	mov	r7, r5
 801a9f0:	42bb      	cmp	r3, r7
 801a9f2:	460d      	mov	r5, r1
 801a9f4:	d9f4      	bls.n	801a9e0 <_printf_i+0x11c>
 801a9f6:	2b08      	cmp	r3, #8
 801a9f8:	d10b      	bne.n	801aa12 <_printf_i+0x14e>
 801a9fa:	6823      	ldr	r3, [r4, #0]
 801a9fc:	07df      	lsls	r7, r3, #31
 801a9fe:	d508      	bpl.n	801aa12 <_printf_i+0x14e>
 801aa00:	6923      	ldr	r3, [r4, #16]
 801aa02:	6861      	ldr	r1, [r4, #4]
 801aa04:	4299      	cmp	r1, r3
 801aa06:	bfde      	ittt	le
 801aa08:	2330      	movle	r3, #48	; 0x30
 801aa0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aa0e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801aa12:	1b92      	subs	r2, r2, r6
 801aa14:	6122      	str	r2, [r4, #16]
 801aa16:	464b      	mov	r3, r9
 801aa18:	4621      	mov	r1, r4
 801aa1a:	4640      	mov	r0, r8
 801aa1c:	f8cd a000 	str.w	sl, [sp]
 801aa20:	aa03      	add	r2, sp, #12
 801aa22:	f7ff fedf 	bl	801a7e4 <_printf_common>
 801aa26:	3001      	adds	r0, #1
 801aa28:	d14c      	bne.n	801aac4 <_printf_i+0x200>
 801aa2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa2e:	b004      	add	sp, #16
 801aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa34:	4834      	ldr	r0, [pc, #208]	; (801ab08 <_printf_i+0x244>)
 801aa36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aa3a:	680e      	ldr	r6, [r1, #0]
 801aa3c:	6823      	ldr	r3, [r4, #0]
 801aa3e:	f856 5b04 	ldr.w	r5, [r6], #4
 801aa42:	061f      	lsls	r7, r3, #24
 801aa44:	600e      	str	r6, [r1, #0]
 801aa46:	d514      	bpl.n	801aa72 <_printf_i+0x1ae>
 801aa48:	07d9      	lsls	r1, r3, #31
 801aa4a:	bf44      	itt	mi
 801aa4c:	f043 0320 	orrmi.w	r3, r3, #32
 801aa50:	6023      	strmi	r3, [r4, #0]
 801aa52:	b91d      	cbnz	r5, 801aa5c <_printf_i+0x198>
 801aa54:	6823      	ldr	r3, [r4, #0]
 801aa56:	f023 0320 	bic.w	r3, r3, #32
 801aa5a:	6023      	str	r3, [r4, #0]
 801aa5c:	2310      	movs	r3, #16
 801aa5e:	e7af      	b.n	801a9c0 <_printf_i+0xfc>
 801aa60:	6823      	ldr	r3, [r4, #0]
 801aa62:	f043 0320 	orr.w	r3, r3, #32
 801aa66:	6023      	str	r3, [r4, #0]
 801aa68:	2378      	movs	r3, #120	; 0x78
 801aa6a:	4828      	ldr	r0, [pc, #160]	; (801ab0c <_printf_i+0x248>)
 801aa6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aa70:	e7e3      	b.n	801aa3a <_printf_i+0x176>
 801aa72:	065e      	lsls	r6, r3, #25
 801aa74:	bf48      	it	mi
 801aa76:	b2ad      	uxthmi	r5, r5
 801aa78:	e7e6      	b.n	801aa48 <_printf_i+0x184>
 801aa7a:	4616      	mov	r6, r2
 801aa7c:	e7bb      	b.n	801a9f6 <_printf_i+0x132>
 801aa7e:	680b      	ldr	r3, [r1, #0]
 801aa80:	6826      	ldr	r6, [r4, #0]
 801aa82:	1d1d      	adds	r5, r3, #4
 801aa84:	6960      	ldr	r0, [r4, #20]
 801aa86:	600d      	str	r5, [r1, #0]
 801aa88:	0635      	lsls	r5, r6, #24
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	d501      	bpl.n	801aa92 <_printf_i+0x1ce>
 801aa8e:	6018      	str	r0, [r3, #0]
 801aa90:	e002      	b.n	801aa98 <_printf_i+0x1d4>
 801aa92:	0671      	lsls	r1, r6, #25
 801aa94:	d5fb      	bpl.n	801aa8e <_printf_i+0x1ca>
 801aa96:	8018      	strh	r0, [r3, #0]
 801aa98:	2300      	movs	r3, #0
 801aa9a:	4616      	mov	r6, r2
 801aa9c:	6123      	str	r3, [r4, #16]
 801aa9e:	e7ba      	b.n	801aa16 <_printf_i+0x152>
 801aaa0:	680b      	ldr	r3, [r1, #0]
 801aaa2:	1d1a      	adds	r2, r3, #4
 801aaa4:	600a      	str	r2, [r1, #0]
 801aaa6:	681e      	ldr	r6, [r3, #0]
 801aaa8:	2100      	movs	r1, #0
 801aaaa:	4630      	mov	r0, r6
 801aaac:	6862      	ldr	r2, [r4, #4]
 801aaae:	f000 fa95 	bl	801afdc <memchr>
 801aab2:	b108      	cbz	r0, 801aab8 <_printf_i+0x1f4>
 801aab4:	1b80      	subs	r0, r0, r6
 801aab6:	6060      	str	r0, [r4, #4]
 801aab8:	6863      	ldr	r3, [r4, #4]
 801aaba:	6123      	str	r3, [r4, #16]
 801aabc:	2300      	movs	r3, #0
 801aabe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aac2:	e7a8      	b.n	801aa16 <_printf_i+0x152>
 801aac4:	4632      	mov	r2, r6
 801aac6:	4649      	mov	r1, r9
 801aac8:	4640      	mov	r0, r8
 801aaca:	6923      	ldr	r3, [r4, #16]
 801aacc:	47d0      	blx	sl
 801aace:	3001      	adds	r0, #1
 801aad0:	d0ab      	beq.n	801aa2a <_printf_i+0x166>
 801aad2:	6823      	ldr	r3, [r4, #0]
 801aad4:	079b      	lsls	r3, r3, #30
 801aad6:	d413      	bmi.n	801ab00 <_printf_i+0x23c>
 801aad8:	68e0      	ldr	r0, [r4, #12]
 801aada:	9b03      	ldr	r3, [sp, #12]
 801aadc:	4298      	cmp	r0, r3
 801aade:	bfb8      	it	lt
 801aae0:	4618      	movlt	r0, r3
 801aae2:	e7a4      	b.n	801aa2e <_printf_i+0x16a>
 801aae4:	2301      	movs	r3, #1
 801aae6:	4632      	mov	r2, r6
 801aae8:	4649      	mov	r1, r9
 801aaea:	4640      	mov	r0, r8
 801aaec:	47d0      	blx	sl
 801aaee:	3001      	adds	r0, #1
 801aaf0:	d09b      	beq.n	801aa2a <_printf_i+0x166>
 801aaf2:	3501      	adds	r5, #1
 801aaf4:	68e3      	ldr	r3, [r4, #12]
 801aaf6:	9903      	ldr	r1, [sp, #12]
 801aaf8:	1a5b      	subs	r3, r3, r1
 801aafa:	42ab      	cmp	r3, r5
 801aafc:	dcf2      	bgt.n	801aae4 <_printf_i+0x220>
 801aafe:	e7eb      	b.n	801aad8 <_printf_i+0x214>
 801ab00:	2500      	movs	r5, #0
 801ab02:	f104 0619 	add.w	r6, r4, #25
 801ab06:	e7f5      	b.n	801aaf4 <_printf_i+0x230>
 801ab08:	0801cec5 	.word	0x0801cec5
 801ab0c:	0801ced6 	.word	0x0801ced6

0801ab10 <__sread>:
 801ab10:	b510      	push	{r4, lr}
 801ab12:	460c      	mov	r4, r1
 801ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab18:	f000 fa76 	bl	801b008 <_read_r>
 801ab1c:	2800      	cmp	r0, #0
 801ab1e:	bfab      	itete	ge
 801ab20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ab22:	89a3      	ldrhlt	r3, [r4, #12]
 801ab24:	181b      	addge	r3, r3, r0
 801ab26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ab2a:	bfac      	ite	ge
 801ab2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801ab2e:	81a3      	strhlt	r3, [r4, #12]
 801ab30:	bd10      	pop	{r4, pc}

0801ab32 <__swrite>:
 801ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab36:	461f      	mov	r7, r3
 801ab38:	898b      	ldrh	r3, [r1, #12]
 801ab3a:	4605      	mov	r5, r0
 801ab3c:	05db      	lsls	r3, r3, #23
 801ab3e:	460c      	mov	r4, r1
 801ab40:	4616      	mov	r6, r2
 801ab42:	d505      	bpl.n	801ab50 <__swrite+0x1e>
 801ab44:	2302      	movs	r3, #2
 801ab46:	2200      	movs	r2, #0
 801ab48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab4c:	f000 f9d0 	bl	801aef0 <_lseek_r>
 801ab50:	89a3      	ldrh	r3, [r4, #12]
 801ab52:	4632      	mov	r2, r6
 801ab54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab58:	81a3      	strh	r3, [r4, #12]
 801ab5a:	4628      	mov	r0, r5
 801ab5c:	463b      	mov	r3, r7
 801ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab66:	f000 b869 	b.w	801ac3c <_write_r>

0801ab6a <__sseek>:
 801ab6a:	b510      	push	{r4, lr}
 801ab6c:	460c      	mov	r4, r1
 801ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab72:	f000 f9bd 	bl	801aef0 <_lseek_r>
 801ab76:	1c43      	adds	r3, r0, #1
 801ab78:	89a3      	ldrh	r3, [r4, #12]
 801ab7a:	bf15      	itete	ne
 801ab7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ab7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ab82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ab86:	81a3      	strheq	r3, [r4, #12]
 801ab88:	bf18      	it	ne
 801ab8a:	81a3      	strhne	r3, [r4, #12]
 801ab8c:	bd10      	pop	{r4, pc}

0801ab8e <__sclose>:
 801ab8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab92:	f000 b8db 	b.w	801ad4c <_close_r>
	...

0801ab98 <__swbuf_r>:
 801ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab9a:	460e      	mov	r6, r1
 801ab9c:	4614      	mov	r4, r2
 801ab9e:	4605      	mov	r5, r0
 801aba0:	b118      	cbz	r0, 801abaa <__swbuf_r+0x12>
 801aba2:	6983      	ldr	r3, [r0, #24]
 801aba4:	b90b      	cbnz	r3, 801abaa <__swbuf_r+0x12>
 801aba6:	f7ff fa85 	bl	801a0b4 <__sinit>
 801abaa:	4b21      	ldr	r3, [pc, #132]	; (801ac30 <__swbuf_r+0x98>)
 801abac:	429c      	cmp	r4, r3
 801abae:	d12b      	bne.n	801ac08 <__swbuf_r+0x70>
 801abb0:	686c      	ldr	r4, [r5, #4]
 801abb2:	69a3      	ldr	r3, [r4, #24]
 801abb4:	60a3      	str	r3, [r4, #8]
 801abb6:	89a3      	ldrh	r3, [r4, #12]
 801abb8:	071a      	lsls	r2, r3, #28
 801abba:	d52f      	bpl.n	801ac1c <__swbuf_r+0x84>
 801abbc:	6923      	ldr	r3, [r4, #16]
 801abbe:	b36b      	cbz	r3, 801ac1c <__swbuf_r+0x84>
 801abc0:	6923      	ldr	r3, [r4, #16]
 801abc2:	6820      	ldr	r0, [r4, #0]
 801abc4:	b2f6      	uxtb	r6, r6
 801abc6:	1ac0      	subs	r0, r0, r3
 801abc8:	6963      	ldr	r3, [r4, #20]
 801abca:	4637      	mov	r7, r6
 801abcc:	4283      	cmp	r3, r0
 801abce:	dc04      	bgt.n	801abda <__swbuf_r+0x42>
 801abd0:	4621      	mov	r1, r4
 801abd2:	4628      	mov	r0, r5
 801abd4:	f000 f950 	bl	801ae78 <_fflush_r>
 801abd8:	bb30      	cbnz	r0, 801ac28 <__swbuf_r+0x90>
 801abda:	68a3      	ldr	r3, [r4, #8]
 801abdc:	3001      	adds	r0, #1
 801abde:	3b01      	subs	r3, #1
 801abe0:	60a3      	str	r3, [r4, #8]
 801abe2:	6823      	ldr	r3, [r4, #0]
 801abe4:	1c5a      	adds	r2, r3, #1
 801abe6:	6022      	str	r2, [r4, #0]
 801abe8:	701e      	strb	r6, [r3, #0]
 801abea:	6963      	ldr	r3, [r4, #20]
 801abec:	4283      	cmp	r3, r0
 801abee:	d004      	beq.n	801abfa <__swbuf_r+0x62>
 801abf0:	89a3      	ldrh	r3, [r4, #12]
 801abf2:	07db      	lsls	r3, r3, #31
 801abf4:	d506      	bpl.n	801ac04 <__swbuf_r+0x6c>
 801abf6:	2e0a      	cmp	r6, #10
 801abf8:	d104      	bne.n	801ac04 <__swbuf_r+0x6c>
 801abfa:	4621      	mov	r1, r4
 801abfc:	4628      	mov	r0, r5
 801abfe:	f000 f93b 	bl	801ae78 <_fflush_r>
 801ac02:	b988      	cbnz	r0, 801ac28 <__swbuf_r+0x90>
 801ac04:	4638      	mov	r0, r7
 801ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac08:	4b0a      	ldr	r3, [pc, #40]	; (801ac34 <__swbuf_r+0x9c>)
 801ac0a:	429c      	cmp	r4, r3
 801ac0c:	d101      	bne.n	801ac12 <__swbuf_r+0x7a>
 801ac0e:	68ac      	ldr	r4, [r5, #8]
 801ac10:	e7cf      	b.n	801abb2 <__swbuf_r+0x1a>
 801ac12:	4b09      	ldr	r3, [pc, #36]	; (801ac38 <__swbuf_r+0xa0>)
 801ac14:	429c      	cmp	r4, r3
 801ac16:	bf08      	it	eq
 801ac18:	68ec      	ldreq	r4, [r5, #12]
 801ac1a:	e7ca      	b.n	801abb2 <__swbuf_r+0x1a>
 801ac1c:	4621      	mov	r1, r4
 801ac1e:	4628      	mov	r0, r5
 801ac20:	f000 f81e 	bl	801ac60 <__swsetup_r>
 801ac24:	2800      	cmp	r0, #0
 801ac26:	d0cb      	beq.n	801abc0 <__swbuf_r+0x28>
 801ac28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ac2c:	e7ea      	b.n	801ac04 <__swbuf_r+0x6c>
 801ac2e:	bf00      	nop
 801ac30:	0801ce74 	.word	0x0801ce74
 801ac34:	0801ce94 	.word	0x0801ce94
 801ac38:	0801ce54 	.word	0x0801ce54

0801ac3c <_write_r>:
 801ac3c:	b538      	push	{r3, r4, r5, lr}
 801ac3e:	4604      	mov	r4, r0
 801ac40:	4608      	mov	r0, r1
 801ac42:	4611      	mov	r1, r2
 801ac44:	2200      	movs	r2, #0
 801ac46:	4d05      	ldr	r5, [pc, #20]	; (801ac5c <_write_r+0x20>)
 801ac48:	602a      	str	r2, [r5, #0]
 801ac4a:	461a      	mov	r2, r3
 801ac4c:	f7e9 fa62 	bl	8004114 <_write>
 801ac50:	1c43      	adds	r3, r0, #1
 801ac52:	d102      	bne.n	801ac5a <_write_r+0x1e>
 801ac54:	682b      	ldr	r3, [r5, #0]
 801ac56:	b103      	cbz	r3, 801ac5a <_write_r+0x1e>
 801ac58:	6023      	str	r3, [r4, #0]
 801ac5a:	bd38      	pop	{r3, r4, r5, pc}
 801ac5c:	2000e4dc 	.word	0x2000e4dc

0801ac60 <__swsetup_r>:
 801ac60:	4b32      	ldr	r3, [pc, #200]	; (801ad2c <__swsetup_r+0xcc>)
 801ac62:	b570      	push	{r4, r5, r6, lr}
 801ac64:	681d      	ldr	r5, [r3, #0]
 801ac66:	4606      	mov	r6, r0
 801ac68:	460c      	mov	r4, r1
 801ac6a:	b125      	cbz	r5, 801ac76 <__swsetup_r+0x16>
 801ac6c:	69ab      	ldr	r3, [r5, #24]
 801ac6e:	b913      	cbnz	r3, 801ac76 <__swsetup_r+0x16>
 801ac70:	4628      	mov	r0, r5
 801ac72:	f7ff fa1f 	bl	801a0b4 <__sinit>
 801ac76:	4b2e      	ldr	r3, [pc, #184]	; (801ad30 <__swsetup_r+0xd0>)
 801ac78:	429c      	cmp	r4, r3
 801ac7a:	d10f      	bne.n	801ac9c <__swsetup_r+0x3c>
 801ac7c:	686c      	ldr	r4, [r5, #4]
 801ac7e:	89a3      	ldrh	r3, [r4, #12]
 801ac80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ac84:	0719      	lsls	r1, r3, #28
 801ac86:	d42c      	bmi.n	801ace2 <__swsetup_r+0x82>
 801ac88:	06dd      	lsls	r5, r3, #27
 801ac8a:	d411      	bmi.n	801acb0 <__swsetup_r+0x50>
 801ac8c:	2309      	movs	r3, #9
 801ac8e:	6033      	str	r3, [r6, #0]
 801ac90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ac94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac98:	81a3      	strh	r3, [r4, #12]
 801ac9a:	e03e      	b.n	801ad1a <__swsetup_r+0xba>
 801ac9c:	4b25      	ldr	r3, [pc, #148]	; (801ad34 <__swsetup_r+0xd4>)
 801ac9e:	429c      	cmp	r4, r3
 801aca0:	d101      	bne.n	801aca6 <__swsetup_r+0x46>
 801aca2:	68ac      	ldr	r4, [r5, #8]
 801aca4:	e7eb      	b.n	801ac7e <__swsetup_r+0x1e>
 801aca6:	4b24      	ldr	r3, [pc, #144]	; (801ad38 <__swsetup_r+0xd8>)
 801aca8:	429c      	cmp	r4, r3
 801acaa:	bf08      	it	eq
 801acac:	68ec      	ldreq	r4, [r5, #12]
 801acae:	e7e6      	b.n	801ac7e <__swsetup_r+0x1e>
 801acb0:	0758      	lsls	r0, r3, #29
 801acb2:	d512      	bpl.n	801acda <__swsetup_r+0x7a>
 801acb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801acb6:	b141      	cbz	r1, 801acca <__swsetup_r+0x6a>
 801acb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801acbc:	4299      	cmp	r1, r3
 801acbe:	d002      	beq.n	801acc6 <__swsetup_r+0x66>
 801acc0:	4630      	mov	r0, r6
 801acc2:	f7fe fed1 	bl	8019a68 <_free_r>
 801acc6:	2300      	movs	r3, #0
 801acc8:	6363      	str	r3, [r4, #52]	; 0x34
 801acca:	89a3      	ldrh	r3, [r4, #12]
 801accc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801acd0:	81a3      	strh	r3, [r4, #12]
 801acd2:	2300      	movs	r3, #0
 801acd4:	6063      	str	r3, [r4, #4]
 801acd6:	6923      	ldr	r3, [r4, #16]
 801acd8:	6023      	str	r3, [r4, #0]
 801acda:	89a3      	ldrh	r3, [r4, #12]
 801acdc:	f043 0308 	orr.w	r3, r3, #8
 801ace0:	81a3      	strh	r3, [r4, #12]
 801ace2:	6923      	ldr	r3, [r4, #16]
 801ace4:	b94b      	cbnz	r3, 801acfa <__swsetup_r+0x9a>
 801ace6:	89a3      	ldrh	r3, [r4, #12]
 801ace8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801acec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801acf0:	d003      	beq.n	801acfa <__swsetup_r+0x9a>
 801acf2:	4621      	mov	r1, r4
 801acf4:	4630      	mov	r0, r6
 801acf6:	f000 f931 	bl	801af5c <__smakebuf_r>
 801acfa:	89a0      	ldrh	r0, [r4, #12]
 801acfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad00:	f010 0301 	ands.w	r3, r0, #1
 801ad04:	d00a      	beq.n	801ad1c <__swsetup_r+0xbc>
 801ad06:	2300      	movs	r3, #0
 801ad08:	60a3      	str	r3, [r4, #8]
 801ad0a:	6963      	ldr	r3, [r4, #20]
 801ad0c:	425b      	negs	r3, r3
 801ad0e:	61a3      	str	r3, [r4, #24]
 801ad10:	6923      	ldr	r3, [r4, #16]
 801ad12:	b943      	cbnz	r3, 801ad26 <__swsetup_r+0xc6>
 801ad14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ad18:	d1ba      	bne.n	801ac90 <__swsetup_r+0x30>
 801ad1a:	bd70      	pop	{r4, r5, r6, pc}
 801ad1c:	0781      	lsls	r1, r0, #30
 801ad1e:	bf58      	it	pl
 801ad20:	6963      	ldrpl	r3, [r4, #20]
 801ad22:	60a3      	str	r3, [r4, #8]
 801ad24:	e7f4      	b.n	801ad10 <__swsetup_r+0xb0>
 801ad26:	2000      	movs	r0, #0
 801ad28:	e7f7      	b.n	801ad1a <__swsetup_r+0xba>
 801ad2a:	bf00      	nop
 801ad2c:	20000324 	.word	0x20000324
 801ad30:	0801ce74 	.word	0x0801ce74
 801ad34:	0801ce94 	.word	0x0801ce94
 801ad38:	0801ce54 	.word	0x0801ce54

0801ad3c <abort>:
 801ad3c:	2006      	movs	r0, #6
 801ad3e:	b508      	push	{r3, lr}
 801ad40:	f000 f99c 	bl	801b07c <raise>
 801ad44:	2001      	movs	r0, #1
 801ad46:	f7e9 f9be 	bl	80040c6 <_exit>
	...

0801ad4c <_close_r>:
 801ad4c:	b538      	push	{r3, r4, r5, lr}
 801ad4e:	2300      	movs	r3, #0
 801ad50:	4d05      	ldr	r5, [pc, #20]	; (801ad68 <_close_r+0x1c>)
 801ad52:	4604      	mov	r4, r0
 801ad54:	4608      	mov	r0, r1
 801ad56:	602b      	str	r3, [r5, #0]
 801ad58:	f7e9 f9f8 	bl	800414c <_close>
 801ad5c:	1c43      	adds	r3, r0, #1
 801ad5e:	d102      	bne.n	801ad66 <_close_r+0x1a>
 801ad60:	682b      	ldr	r3, [r5, #0]
 801ad62:	b103      	cbz	r3, 801ad66 <_close_r+0x1a>
 801ad64:	6023      	str	r3, [r4, #0]
 801ad66:	bd38      	pop	{r3, r4, r5, pc}
 801ad68:	2000e4dc 	.word	0x2000e4dc

0801ad6c <__sflush_r>:
 801ad6c:	898a      	ldrh	r2, [r1, #12]
 801ad6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad72:	4605      	mov	r5, r0
 801ad74:	0710      	lsls	r0, r2, #28
 801ad76:	460c      	mov	r4, r1
 801ad78:	d458      	bmi.n	801ae2c <__sflush_r+0xc0>
 801ad7a:	684b      	ldr	r3, [r1, #4]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	dc05      	bgt.n	801ad8c <__sflush_r+0x20>
 801ad80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	dc02      	bgt.n	801ad8c <__sflush_r+0x20>
 801ad86:	2000      	movs	r0, #0
 801ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ad8e:	2e00      	cmp	r6, #0
 801ad90:	d0f9      	beq.n	801ad86 <__sflush_r+0x1a>
 801ad92:	2300      	movs	r3, #0
 801ad94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ad98:	682f      	ldr	r7, [r5, #0]
 801ad9a:	602b      	str	r3, [r5, #0]
 801ad9c:	d032      	beq.n	801ae04 <__sflush_r+0x98>
 801ad9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ada0:	89a3      	ldrh	r3, [r4, #12]
 801ada2:	075a      	lsls	r2, r3, #29
 801ada4:	d505      	bpl.n	801adb2 <__sflush_r+0x46>
 801ada6:	6863      	ldr	r3, [r4, #4]
 801ada8:	1ac0      	subs	r0, r0, r3
 801adaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801adac:	b10b      	cbz	r3, 801adb2 <__sflush_r+0x46>
 801adae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801adb0:	1ac0      	subs	r0, r0, r3
 801adb2:	2300      	movs	r3, #0
 801adb4:	4602      	mov	r2, r0
 801adb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801adb8:	4628      	mov	r0, r5
 801adba:	6a21      	ldr	r1, [r4, #32]
 801adbc:	47b0      	blx	r6
 801adbe:	1c43      	adds	r3, r0, #1
 801adc0:	89a3      	ldrh	r3, [r4, #12]
 801adc2:	d106      	bne.n	801add2 <__sflush_r+0x66>
 801adc4:	6829      	ldr	r1, [r5, #0]
 801adc6:	291d      	cmp	r1, #29
 801adc8:	d82c      	bhi.n	801ae24 <__sflush_r+0xb8>
 801adca:	4a2a      	ldr	r2, [pc, #168]	; (801ae74 <__sflush_r+0x108>)
 801adcc:	40ca      	lsrs	r2, r1
 801adce:	07d6      	lsls	r6, r2, #31
 801add0:	d528      	bpl.n	801ae24 <__sflush_r+0xb8>
 801add2:	2200      	movs	r2, #0
 801add4:	6062      	str	r2, [r4, #4]
 801add6:	6922      	ldr	r2, [r4, #16]
 801add8:	04d9      	lsls	r1, r3, #19
 801adda:	6022      	str	r2, [r4, #0]
 801addc:	d504      	bpl.n	801ade8 <__sflush_r+0x7c>
 801adde:	1c42      	adds	r2, r0, #1
 801ade0:	d101      	bne.n	801ade6 <__sflush_r+0x7a>
 801ade2:	682b      	ldr	r3, [r5, #0]
 801ade4:	b903      	cbnz	r3, 801ade8 <__sflush_r+0x7c>
 801ade6:	6560      	str	r0, [r4, #84]	; 0x54
 801ade8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801adea:	602f      	str	r7, [r5, #0]
 801adec:	2900      	cmp	r1, #0
 801adee:	d0ca      	beq.n	801ad86 <__sflush_r+0x1a>
 801adf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801adf4:	4299      	cmp	r1, r3
 801adf6:	d002      	beq.n	801adfe <__sflush_r+0x92>
 801adf8:	4628      	mov	r0, r5
 801adfa:	f7fe fe35 	bl	8019a68 <_free_r>
 801adfe:	2000      	movs	r0, #0
 801ae00:	6360      	str	r0, [r4, #52]	; 0x34
 801ae02:	e7c1      	b.n	801ad88 <__sflush_r+0x1c>
 801ae04:	6a21      	ldr	r1, [r4, #32]
 801ae06:	2301      	movs	r3, #1
 801ae08:	4628      	mov	r0, r5
 801ae0a:	47b0      	blx	r6
 801ae0c:	1c41      	adds	r1, r0, #1
 801ae0e:	d1c7      	bne.n	801ada0 <__sflush_r+0x34>
 801ae10:	682b      	ldr	r3, [r5, #0]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d0c4      	beq.n	801ada0 <__sflush_r+0x34>
 801ae16:	2b1d      	cmp	r3, #29
 801ae18:	d001      	beq.n	801ae1e <__sflush_r+0xb2>
 801ae1a:	2b16      	cmp	r3, #22
 801ae1c:	d101      	bne.n	801ae22 <__sflush_r+0xb6>
 801ae1e:	602f      	str	r7, [r5, #0]
 801ae20:	e7b1      	b.n	801ad86 <__sflush_r+0x1a>
 801ae22:	89a3      	ldrh	r3, [r4, #12]
 801ae24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae28:	81a3      	strh	r3, [r4, #12]
 801ae2a:	e7ad      	b.n	801ad88 <__sflush_r+0x1c>
 801ae2c:	690f      	ldr	r7, [r1, #16]
 801ae2e:	2f00      	cmp	r7, #0
 801ae30:	d0a9      	beq.n	801ad86 <__sflush_r+0x1a>
 801ae32:	0793      	lsls	r3, r2, #30
 801ae34:	bf18      	it	ne
 801ae36:	2300      	movne	r3, #0
 801ae38:	680e      	ldr	r6, [r1, #0]
 801ae3a:	bf08      	it	eq
 801ae3c:	694b      	ldreq	r3, [r1, #20]
 801ae3e:	eba6 0807 	sub.w	r8, r6, r7
 801ae42:	600f      	str	r7, [r1, #0]
 801ae44:	608b      	str	r3, [r1, #8]
 801ae46:	f1b8 0f00 	cmp.w	r8, #0
 801ae4a:	dd9c      	ble.n	801ad86 <__sflush_r+0x1a>
 801ae4c:	4643      	mov	r3, r8
 801ae4e:	463a      	mov	r2, r7
 801ae50:	4628      	mov	r0, r5
 801ae52:	6a21      	ldr	r1, [r4, #32]
 801ae54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ae56:	47b0      	blx	r6
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	dc06      	bgt.n	801ae6a <__sflush_r+0xfe>
 801ae5c:	89a3      	ldrh	r3, [r4, #12]
 801ae5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae66:	81a3      	strh	r3, [r4, #12]
 801ae68:	e78e      	b.n	801ad88 <__sflush_r+0x1c>
 801ae6a:	4407      	add	r7, r0
 801ae6c:	eba8 0800 	sub.w	r8, r8, r0
 801ae70:	e7e9      	b.n	801ae46 <__sflush_r+0xda>
 801ae72:	bf00      	nop
 801ae74:	20400001 	.word	0x20400001

0801ae78 <_fflush_r>:
 801ae78:	b538      	push	{r3, r4, r5, lr}
 801ae7a:	690b      	ldr	r3, [r1, #16]
 801ae7c:	4605      	mov	r5, r0
 801ae7e:	460c      	mov	r4, r1
 801ae80:	b913      	cbnz	r3, 801ae88 <_fflush_r+0x10>
 801ae82:	2500      	movs	r5, #0
 801ae84:	4628      	mov	r0, r5
 801ae86:	bd38      	pop	{r3, r4, r5, pc}
 801ae88:	b118      	cbz	r0, 801ae92 <_fflush_r+0x1a>
 801ae8a:	6983      	ldr	r3, [r0, #24]
 801ae8c:	b90b      	cbnz	r3, 801ae92 <_fflush_r+0x1a>
 801ae8e:	f7ff f911 	bl	801a0b4 <__sinit>
 801ae92:	4b14      	ldr	r3, [pc, #80]	; (801aee4 <_fflush_r+0x6c>)
 801ae94:	429c      	cmp	r4, r3
 801ae96:	d11b      	bne.n	801aed0 <_fflush_r+0x58>
 801ae98:	686c      	ldr	r4, [r5, #4]
 801ae9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d0ef      	beq.n	801ae82 <_fflush_r+0xa>
 801aea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aea4:	07d0      	lsls	r0, r2, #31
 801aea6:	d404      	bmi.n	801aeb2 <_fflush_r+0x3a>
 801aea8:	0599      	lsls	r1, r3, #22
 801aeaa:	d402      	bmi.n	801aeb2 <_fflush_r+0x3a>
 801aeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeae:	f7ff f9b1 	bl	801a214 <__retarget_lock_acquire_recursive>
 801aeb2:	4628      	mov	r0, r5
 801aeb4:	4621      	mov	r1, r4
 801aeb6:	f7ff ff59 	bl	801ad6c <__sflush_r>
 801aeba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aebc:	4605      	mov	r5, r0
 801aebe:	07da      	lsls	r2, r3, #31
 801aec0:	d4e0      	bmi.n	801ae84 <_fflush_r+0xc>
 801aec2:	89a3      	ldrh	r3, [r4, #12]
 801aec4:	059b      	lsls	r3, r3, #22
 801aec6:	d4dd      	bmi.n	801ae84 <_fflush_r+0xc>
 801aec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeca:	f7ff f9a4 	bl	801a216 <__retarget_lock_release_recursive>
 801aece:	e7d9      	b.n	801ae84 <_fflush_r+0xc>
 801aed0:	4b05      	ldr	r3, [pc, #20]	; (801aee8 <_fflush_r+0x70>)
 801aed2:	429c      	cmp	r4, r3
 801aed4:	d101      	bne.n	801aeda <_fflush_r+0x62>
 801aed6:	68ac      	ldr	r4, [r5, #8]
 801aed8:	e7df      	b.n	801ae9a <_fflush_r+0x22>
 801aeda:	4b04      	ldr	r3, [pc, #16]	; (801aeec <_fflush_r+0x74>)
 801aedc:	429c      	cmp	r4, r3
 801aede:	bf08      	it	eq
 801aee0:	68ec      	ldreq	r4, [r5, #12]
 801aee2:	e7da      	b.n	801ae9a <_fflush_r+0x22>
 801aee4:	0801ce74 	.word	0x0801ce74
 801aee8:	0801ce94 	.word	0x0801ce94
 801aeec:	0801ce54 	.word	0x0801ce54

0801aef0 <_lseek_r>:
 801aef0:	b538      	push	{r3, r4, r5, lr}
 801aef2:	4604      	mov	r4, r0
 801aef4:	4608      	mov	r0, r1
 801aef6:	4611      	mov	r1, r2
 801aef8:	2200      	movs	r2, #0
 801aefa:	4d05      	ldr	r5, [pc, #20]	; (801af10 <_lseek_r+0x20>)
 801aefc:	602a      	str	r2, [r5, #0]
 801aefe:	461a      	mov	r2, r3
 801af00:	f7e9 f948 	bl	8004194 <_lseek>
 801af04:	1c43      	adds	r3, r0, #1
 801af06:	d102      	bne.n	801af0e <_lseek_r+0x1e>
 801af08:	682b      	ldr	r3, [r5, #0]
 801af0a:	b103      	cbz	r3, 801af0e <_lseek_r+0x1e>
 801af0c:	6023      	str	r3, [r4, #0]
 801af0e:	bd38      	pop	{r3, r4, r5, pc}
 801af10:	2000e4dc 	.word	0x2000e4dc

0801af14 <__swhatbuf_r>:
 801af14:	b570      	push	{r4, r5, r6, lr}
 801af16:	460e      	mov	r6, r1
 801af18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af1c:	4614      	mov	r4, r2
 801af1e:	2900      	cmp	r1, #0
 801af20:	461d      	mov	r5, r3
 801af22:	b096      	sub	sp, #88	; 0x58
 801af24:	da07      	bge.n	801af36 <__swhatbuf_r+0x22>
 801af26:	2300      	movs	r3, #0
 801af28:	602b      	str	r3, [r5, #0]
 801af2a:	89b3      	ldrh	r3, [r6, #12]
 801af2c:	061a      	lsls	r2, r3, #24
 801af2e:	d410      	bmi.n	801af52 <__swhatbuf_r+0x3e>
 801af30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801af34:	e00e      	b.n	801af54 <__swhatbuf_r+0x40>
 801af36:	466a      	mov	r2, sp
 801af38:	f000 f8bc 	bl	801b0b4 <_fstat_r>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	dbf2      	blt.n	801af26 <__swhatbuf_r+0x12>
 801af40:	9a01      	ldr	r2, [sp, #4]
 801af42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801af46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801af4a:	425a      	negs	r2, r3
 801af4c:	415a      	adcs	r2, r3
 801af4e:	602a      	str	r2, [r5, #0]
 801af50:	e7ee      	b.n	801af30 <__swhatbuf_r+0x1c>
 801af52:	2340      	movs	r3, #64	; 0x40
 801af54:	2000      	movs	r0, #0
 801af56:	6023      	str	r3, [r4, #0]
 801af58:	b016      	add	sp, #88	; 0x58
 801af5a:	bd70      	pop	{r4, r5, r6, pc}

0801af5c <__smakebuf_r>:
 801af5c:	898b      	ldrh	r3, [r1, #12]
 801af5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801af60:	079d      	lsls	r5, r3, #30
 801af62:	4606      	mov	r6, r0
 801af64:	460c      	mov	r4, r1
 801af66:	d507      	bpl.n	801af78 <__smakebuf_r+0x1c>
 801af68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801af6c:	6023      	str	r3, [r4, #0]
 801af6e:	6123      	str	r3, [r4, #16]
 801af70:	2301      	movs	r3, #1
 801af72:	6163      	str	r3, [r4, #20]
 801af74:	b002      	add	sp, #8
 801af76:	bd70      	pop	{r4, r5, r6, pc}
 801af78:	466a      	mov	r2, sp
 801af7a:	ab01      	add	r3, sp, #4
 801af7c:	f7ff ffca 	bl	801af14 <__swhatbuf_r>
 801af80:	9900      	ldr	r1, [sp, #0]
 801af82:	4605      	mov	r5, r0
 801af84:	4630      	mov	r0, r6
 801af86:	f7fe fdbb 	bl	8019b00 <_malloc_r>
 801af8a:	b948      	cbnz	r0, 801afa0 <__smakebuf_r+0x44>
 801af8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af90:	059a      	lsls	r2, r3, #22
 801af92:	d4ef      	bmi.n	801af74 <__smakebuf_r+0x18>
 801af94:	f023 0303 	bic.w	r3, r3, #3
 801af98:	f043 0302 	orr.w	r3, r3, #2
 801af9c:	81a3      	strh	r3, [r4, #12]
 801af9e:	e7e3      	b.n	801af68 <__smakebuf_r+0xc>
 801afa0:	4b0d      	ldr	r3, [pc, #52]	; (801afd8 <__smakebuf_r+0x7c>)
 801afa2:	62b3      	str	r3, [r6, #40]	; 0x28
 801afa4:	89a3      	ldrh	r3, [r4, #12]
 801afa6:	6020      	str	r0, [r4, #0]
 801afa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801afac:	81a3      	strh	r3, [r4, #12]
 801afae:	9b00      	ldr	r3, [sp, #0]
 801afb0:	6120      	str	r0, [r4, #16]
 801afb2:	6163      	str	r3, [r4, #20]
 801afb4:	9b01      	ldr	r3, [sp, #4]
 801afb6:	b15b      	cbz	r3, 801afd0 <__smakebuf_r+0x74>
 801afb8:	4630      	mov	r0, r6
 801afba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801afbe:	f000 f88b 	bl	801b0d8 <_isatty_r>
 801afc2:	b128      	cbz	r0, 801afd0 <__smakebuf_r+0x74>
 801afc4:	89a3      	ldrh	r3, [r4, #12]
 801afc6:	f023 0303 	bic.w	r3, r3, #3
 801afca:	f043 0301 	orr.w	r3, r3, #1
 801afce:	81a3      	strh	r3, [r4, #12]
 801afd0:	89a0      	ldrh	r0, [r4, #12]
 801afd2:	4305      	orrs	r5, r0
 801afd4:	81a5      	strh	r5, [r4, #12]
 801afd6:	e7cd      	b.n	801af74 <__smakebuf_r+0x18>
 801afd8:	0801a04d 	.word	0x0801a04d

0801afdc <memchr>:
 801afdc:	4603      	mov	r3, r0
 801afde:	b510      	push	{r4, lr}
 801afe0:	b2c9      	uxtb	r1, r1
 801afe2:	4402      	add	r2, r0
 801afe4:	4293      	cmp	r3, r2
 801afe6:	4618      	mov	r0, r3
 801afe8:	d101      	bne.n	801afee <memchr+0x12>
 801afea:	2000      	movs	r0, #0
 801afec:	e003      	b.n	801aff6 <memchr+0x1a>
 801afee:	7804      	ldrb	r4, [r0, #0]
 801aff0:	3301      	adds	r3, #1
 801aff2:	428c      	cmp	r4, r1
 801aff4:	d1f6      	bne.n	801afe4 <memchr+0x8>
 801aff6:	bd10      	pop	{r4, pc}

0801aff8 <_malloc_usable_size_r>:
 801aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801affc:	1f18      	subs	r0, r3, #4
 801affe:	2b00      	cmp	r3, #0
 801b000:	bfbc      	itt	lt
 801b002:	580b      	ldrlt	r3, [r1, r0]
 801b004:	18c0      	addlt	r0, r0, r3
 801b006:	4770      	bx	lr

0801b008 <_read_r>:
 801b008:	b538      	push	{r3, r4, r5, lr}
 801b00a:	4604      	mov	r4, r0
 801b00c:	4608      	mov	r0, r1
 801b00e:	4611      	mov	r1, r2
 801b010:	2200      	movs	r2, #0
 801b012:	4d05      	ldr	r5, [pc, #20]	; (801b028 <_read_r+0x20>)
 801b014:	602a      	str	r2, [r5, #0]
 801b016:	461a      	mov	r2, r3
 801b018:	f7e9 f85f 	bl	80040da <_read>
 801b01c:	1c43      	adds	r3, r0, #1
 801b01e:	d102      	bne.n	801b026 <_read_r+0x1e>
 801b020:	682b      	ldr	r3, [r5, #0]
 801b022:	b103      	cbz	r3, 801b026 <_read_r+0x1e>
 801b024:	6023      	str	r3, [r4, #0]
 801b026:	bd38      	pop	{r3, r4, r5, pc}
 801b028:	2000e4dc 	.word	0x2000e4dc

0801b02c <_raise_r>:
 801b02c:	291f      	cmp	r1, #31
 801b02e:	b538      	push	{r3, r4, r5, lr}
 801b030:	4604      	mov	r4, r0
 801b032:	460d      	mov	r5, r1
 801b034:	d904      	bls.n	801b040 <_raise_r+0x14>
 801b036:	2316      	movs	r3, #22
 801b038:	6003      	str	r3, [r0, #0]
 801b03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b03e:	bd38      	pop	{r3, r4, r5, pc}
 801b040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b042:	b112      	cbz	r2, 801b04a <_raise_r+0x1e>
 801b044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b048:	b94b      	cbnz	r3, 801b05e <_raise_r+0x32>
 801b04a:	4620      	mov	r0, r4
 801b04c:	f000 f830 	bl	801b0b0 <_getpid_r>
 801b050:	462a      	mov	r2, r5
 801b052:	4601      	mov	r1, r0
 801b054:	4620      	mov	r0, r4
 801b056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b05a:	f000 b817 	b.w	801b08c <_kill_r>
 801b05e:	2b01      	cmp	r3, #1
 801b060:	d00a      	beq.n	801b078 <_raise_r+0x4c>
 801b062:	1c59      	adds	r1, r3, #1
 801b064:	d103      	bne.n	801b06e <_raise_r+0x42>
 801b066:	2316      	movs	r3, #22
 801b068:	6003      	str	r3, [r0, #0]
 801b06a:	2001      	movs	r0, #1
 801b06c:	e7e7      	b.n	801b03e <_raise_r+0x12>
 801b06e:	2400      	movs	r4, #0
 801b070:	4628      	mov	r0, r5
 801b072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b076:	4798      	blx	r3
 801b078:	2000      	movs	r0, #0
 801b07a:	e7e0      	b.n	801b03e <_raise_r+0x12>

0801b07c <raise>:
 801b07c:	4b02      	ldr	r3, [pc, #8]	; (801b088 <raise+0xc>)
 801b07e:	4601      	mov	r1, r0
 801b080:	6818      	ldr	r0, [r3, #0]
 801b082:	f7ff bfd3 	b.w	801b02c <_raise_r>
 801b086:	bf00      	nop
 801b088:	20000324 	.word	0x20000324

0801b08c <_kill_r>:
 801b08c:	b538      	push	{r3, r4, r5, lr}
 801b08e:	2300      	movs	r3, #0
 801b090:	4d06      	ldr	r5, [pc, #24]	; (801b0ac <_kill_r+0x20>)
 801b092:	4604      	mov	r4, r0
 801b094:	4608      	mov	r0, r1
 801b096:	4611      	mov	r1, r2
 801b098:	602b      	str	r3, [r5, #0]
 801b09a:	f7e9 f804 	bl	80040a6 <_kill>
 801b09e:	1c43      	adds	r3, r0, #1
 801b0a0:	d102      	bne.n	801b0a8 <_kill_r+0x1c>
 801b0a2:	682b      	ldr	r3, [r5, #0]
 801b0a4:	b103      	cbz	r3, 801b0a8 <_kill_r+0x1c>
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	bd38      	pop	{r3, r4, r5, pc}
 801b0aa:	bf00      	nop
 801b0ac:	2000e4dc 	.word	0x2000e4dc

0801b0b0 <_getpid_r>:
 801b0b0:	f7e8 bff2 	b.w	8004098 <_getpid>

0801b0b4 <_fstat_r>:
 801b0b4:	b538      	push	{r3, r4, r5, lr}
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	4d06      	ldr	r5, [pc, #24]	; (801b0d4 <_fstat_r+0x20>)
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	4608      	mov	r0, r1
 801b0be:	4611      	mov	r1, r2
 801b0c0:	602b      	str	r3, [r5, #0]
 801b0c2:	f7e9 f84e 	bl	8004162 <_fstat>
 801b0c6:	1c43      	adds	r3, r0, #1
 801b0c8:	d102      	bne.n	801b0d0 <_fstat_r+0x1c>
 801b0ca:	682b      	ldr	r3, [r5, #0]
 801b0cc:	b103      	cbz	r3, 801b0d0 <_fstat_r+0x1c>
 801b0ce:	6023      	str	r3, [r4, #0]
 801b0d0:	bd38      	pop	{r3, r4, r5, pc}
 801b0d2:	bf00      	nop
 801b0d4:	2000e4dc 	.word	0x2000e4dc

0801b0d8 <_isatty_r>:
 801b0d8:	b538      	push	{r3, r4, r5, lr}
 801b0da:	2300      	movs	r3, #0
 801b0dc:	4d05      	ldr	r5, [pc, #20]	; (801b0f4 <_isatty_r+0x1c>)
 801b0de:	4604      	mov	r4, r0
 801b0e0:	4608      	mov	r0, r1
 801b0e2:	602b      	str	r3, [r5, #0]
 801b0e4:	f7e9 f84c 	bl	8004180 <_isatty>
 801b0e8:	1c43      	adds	r3, r0, #1
 801b0ea:	d102      	bne.n	801b0f2 <_isatty_r+0x1a>
 801b0ec:	682b      	ldr	r3, [r5, #0]
 801b0ee:	b103      	cbz	r3, 801b0f2 <_isatty_r+0x1a>
 801b0f0:	6023      	str	r3, [r4, #0]
 801b0f2:	bd38      	pop	{r3, r4, r5, pc}
 801b0f4:	2000e4dc 	.word	0x2000e4dc

0801b0f8 <sqrt>:
 801b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0fa:	4606      	mov	r6, r0
 801b0fc:	460f      	mov	r7, r1
 801b0fe:	f000 f827 	bl	801b150 <__ieee754_sqrt>
 801b102:	4b12      	ldr	r3, [pc, #72]	; (801b14c <sqrt+0x54>)
 801b104:	4604      	mov	r4, r0
 801b106:	f993 3000 	ldrsb.w	r3, [r3]
 801b10a:	460d      	mov	r5, r1
 801b10c:	3301      	adds	r3, #1
 801b10e:	d019      	beq.n	801b144 <sqrt+0x4c>
 801b110:	4632      	mov	r2, r6
 801b112:	463b      	mov	r3, r7
 801b114:	4630      	mov	r0, r6
 801b116:	4639      	mov	r1, r7
 801b118:	f7e5 fcf2 	bl	8000b00 <__aeabi_dcmpun>
 801b11c:	b990      	cbnz	r0, 801b144 <sqrt+0x4c>
 801b11e:	2200      	movs	r2, #0
 801b120:	2300      	movs	r3, #0
 801b122:	4630      	mov	r0, r6
 801b124:	4639      	mov	r1, r7
 801b126:	f7e5 fcc3 	bl	8000ab0 <__aeabi_dcmplt>
 801b12a:	b158      	cbz	r0, 801b144 <sqrt+0x4c>
 801b12c:	f7fe fbde 	bl	80198ec <__errno>
 801b130:	2321      	movs	r3, #33	; 0x21
 801b132:	2200      	movs	r2, #0
 801b134:	6003      	str	r3, [r0, #0]
 801b136:	2300      	movs	r3, #0
 801b138:	4610      	mov	r0, r2
 801b13a:	4619      	mov	r1, r3
 801b13c:	f7e5 fb70 	bl	8000820 <__aeabi_ddiv>
 801b140:	4604      	mov	r4, r0
 801b142:	460d      	mov	r5, r1
 801b144:	4620      	mov	r0, r4
 801b146:	4629      	mov	r1, r5
 801b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b14a:	bf00      	nop
 801b14c:	20000388 	.word	0x20000388

0801b150 <__ieee754_sqrt>:
 801b150:	f8df c150 	ldr.w	ip, [pc, #336]	; 801b2a4 <__ieee754_sqrt+0x154>
 801b154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b158:	ea3c 0c01 	bics.w	ip, ip, r1
 801b15c:	460b      	mov	r3, r1
 801b15e:	4606      	mov	r6, r0
 801b160:	460d      	mov	r5, r1
 801b162:	460a      	mov	r2, r1
 801b164:	4607      	mov	r7, r0
 801b166:	4604      	mov	r4, r0
 801b168:	d10e      	bne.n	801b188 <__ieee754_sqrt+0x38>
 801b16a:	4602      	mov	r2, r0
 801b16c:	f7e5 fa2e 	bl	80005cc <__aeabi_dmul>
 801b170:	4602      	mov	r2, r0
 801b172:	460b      	mov	r3, r1
 801b174:	4630      	mov	r0, r6
 801b176:	4629      	mov	r1, r5
 801b178:	f7e5 f872 	bl	8000260 <__adddf3>
 801b17c:	4606      	mov	r6, r0
 801b17e:	460d      	mov	r5, r1
 801b180:	4630      	mov	r0, r6
 801b182:	4629      	mov	r1, r5
 801b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b188:	2900      	cmp	r1, #0
 801b18a:	dc0d      	bgt.n	801b1a8 <__ieee754_sqrt+0x58>
 801b18c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801b190:	ea5c 0707 	orrs.w	r7, ip, r7
 801b194:	d0f4      	beq.n	801b180 <__ieee754_sqrt+0x30>
 801b196:	b139      	cbz	r1, 801b1a8 <__ieee754_sqrt+0x58>
 801b198:	4602      	mov	r2, r0
 801b19a:	f7e5 f85f 	bl	800025c <__aeabi_dsub>
 801b19e:	4602      	mov	r2, r0
 801b1a0:	460b      	mov	r3, r1
 801b1a2:	f7e5 fb3d 	bl	8000820 <__aeabi_ddiv>
 801b1a6:	e7e9      	b.n	801b17c <__ieee754_sqrt+0x2c>
 801b1a8:	1512      	asrs	r2, r2, #20
 801b1aa:	d074      	beq.n	801b296 <__ieee754_sqrt+0x146>
 801b1ac:	2000      	movs	r0, #0
 801b1ae:	07d5      	lsls	r5, r2, #31
 801b1b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b1b4:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 801b1b8:	bf5e      	ittt	pl
 801b1ba:	0fe3      	lsrpl	r3, r4, #31
 801b1bc:	0064      	lslpl	r4, r4, #1
 801b1be:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 801b1c2:	0fe3      	lsrs	r3, r4, #31
 801b1c4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b1c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b1cc:	2516      	movs	r5, #22
 801b1ce:	4601      	mov	r1, r0
 801b1d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801b1d4:	1076      	asrs	r6, r6, #1
 801b1d6:	0064      	lsls	r4, r4, #1
 801b1d8:	188f      	adds	r7, r1, r2
 801b1da:	429f      	cmp	r7, r3
 801b1dc:	bfde      	ittt	le
 801b1de:	1bdb      	suble	r3, r3, r7
 801b1e0:	18b9      	addle	r1, r7, r2
 801b1e2:	1880      	addle	r0, r0, r2
 801b1e4:	005b      	lsls	r3, r3, #1
 801b1e6:	3d01      	subs	r5, #1
 801b1e8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801b1ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801b1f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801b1f4:	d1f0      	bne.n	801b1d8 <__ieee754_sqrt+0x88>
 801b1f6:	462a      	mov	r2, r5
 801b1f8:	f04f 0e20 	mov.w	lr, #32
 801b1fc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801b200:	428b      	cmp	r3, r1
 801b202:	eb07 0c05 	add.w	ip, r7, r5
 801b206:	dc02      	bgt.n	801b20e <__ieee754_sqrt+0xbe>
 801b208:	d113      	bne.n	801b232 <__ieee754_sqrt+0xe2>
 801b20a:	45a4      	cmp	ip, r4
 801b20c:	d811      	bhi.n	801b232 <__ieee754_sqrt+0xe2>
 801b20e:	f1bc 0f00 	cmp.w	ip, #0
 801b212:	eb0c 0507 	add.w	r5, ip, r7
 801b216:	da43      	bge.n	801b2a0 <__ieee754_sqrt+0x150>
 801b218:	2d00      	cmp	r5, #0
 801b21a:	db41      	blt.n	801b2a0 <__ieee754_sqrt+0x150>
 801b21c:	f101 0801 	add.w	r8, r1, #1
 801b220:	1a5b      	subs	r3, r3, r1
 801b222:	4641      	mov	r1, r8
 801b224:	45a4      	cmp	ip, r4
 801b226:	bf88      	it	hi
 801b228:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801b22c:	eba4 040c 	sub.w	r4, r4, ip
 801b230:	443a      	add	r2, r7
 801b232:	005b      	lsls	r3, r3, #1
 801b234:	f1be 0e01 	subs.w	lr, lr, #1
 801b238:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801b23c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 801b240:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801b244:	d1dc      	bne.n	801b200 <__ieee754_sqrt+0xb0>
 801b246:	4323      	orrs	r3, r4
 801b248:	d006      	beq.n	801b258 <__ieee754_sqrt+0x108>
 801b24a:	1c54      	adds	r4, r2, #1
 801b24c:	bf0b      	itete	eq
 801b24e:	4672      	moveq	r2, lr
 801b250:	3201      	addne	r2, #1
 801b252:	3001      	addeq	r0, #1
 801b254:	f022 0201 	bicne.w	r2, r2, #1
 801b258:	1043      	asrs	r3, r0, #1
 801b25a:	07c1      	lsls	r1, r0, #31
 801b25c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801b260:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b264:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b268:	bf48      	it	mi
 801b26a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801b26e:	4610      	mov	r0, r2
 801b270:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801b274:	e782      	b.n	801b17c <__ieee754_sqrt+0x2c>
 801b276:	0ae3      	lsrs	r3, r4, #11
 801b278:	3915      	subs	r1, #21
 801b27a:	0564      	lsls	r4, r4, #21
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d0fa      	beq.n	801b276 <__ieee754_sqrt+0x126>
 801b280:	02de      	lsls	r6, r3, #11
 801b282:	d50a      	bpl.n	801b29a <__ieee754_sqrt+0x14a>
 801b284:	f1c2 0020 	rsb	r0, r2, #32
 801b288:	fa24 f000 	lsr.w	r0, r4, r0
 801b28c:	1e55      	subs	r5, r2, #1
 801b28e:	4094      	lsls	r4, r2
 801b290:	4303      	orrs	r3, r0
 801b292:	1b4a      	subs	r2, r1, r5
 801b294:	e78a      	b.n	801b1ac <__ieee754_sqrt+0x5c>
 801b296:	4611      	mov	r1, r2
 801b298:	e7f0      	b.n	801b27c <__ieee754_sqrt+0x12c>
 801b29a:	005b      	lsls	r3, r3, #1
 801b29c:	3201      	adds	r2, #1
 801b29e:	e7ef      	b.n	801b280 <__ieee754_sqrt+0x130>
 801b2a0:	4688      	mov	r8, r1
 801b2a2:	e7bd      	b.n	801b220 <__ieee754_sqrt+0xd0>
 801b2a4:	7ff00000 	.word	0x7ff00000

0801b2a8 <_init>:
 801b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2aa:	bf00      	nop
 801b2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2ae:	bc08      	pop	{r3}
 801b2b0:	469e      	mov	lr, r3
 801b2b2:	4770      	bx	lr

0801b2b4 <_fini>:
 801b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b6:	bf00      	nop
 801b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2ba:	bc08      	pop	{r3}
 801b2bc:	469e      	mov	lr, r3
 801b2be:	4770      	bx	lr
